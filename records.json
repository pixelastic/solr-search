[
  {
    "content": "Licensed to the Apache Software Foundation (ASF) under one or more contributor\nlicense agreements. See the NOTICE file distributed with this work for additional\ninformation regarding copyright ownership. The ASF licenses this file to you under\nthe Apache License, Version 2.0 (the \"License\"); you may not use this file except in\ncompliance with the License. You may obtain a copy of the License at",
    "hierarchy": [
      "Licenses"
    ],
    "pageId": 6
  },
  {
    "content": "Unless required by applicable law or agreed to in writing, software distributed under the License is\ndistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing permissions and limitations under the License.",
    "hierarchy": [
      "Licenses"
    ],
    "pageId": 6
  },
  {
    "content": "Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Apache Lucene,\nApache Solr and their respective logos are trademarks of the Apache Software Foundation. Please see the\nApache Trademark Policy<span class=\"fc1\"> for more information.</span>",
    "hierarchy": [
      "Licenses"
    ],
    "pageId": 6
  },
  {
    "content": "This reference guide describes Apache Solr, the open source solution for search.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Solr builds on Lucene, an open source Java library that provides indexing and search technology, as well as\nspellchecking, hit highlighting and advanced analysis/tokenization capabilities. Both Solr and Lucene are\nmanaged by the Apache Software Foundation (<span class=\"link\">www.apache.org)</span>. You can download Apache Solr from the\nSolr website at <span class=\"link\">http://lucene.apache.org/solr/</span>.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "This Guide contains the following main sections:",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Getting Started<span class=\"ff2 fc1\">: This section guides you through the installation and setup of Solr.</span>",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Using the Solr Administration User Interface<span class=\"ff2 fc1\">: This section introduces the Solr Web-based user interface.</span>\nFrom your browser you can view configuration files, submit queries, view logfile settings and Java\nenvironment settings, and monitor and control distributed configurations.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Documents, Fields, and Schema Design<span class=\"ff2 fc1\">: This section describes how Solr organizes its data for indexing. It</span>\nexplains how a Solr schema defines the fields and field types which Solr uses to organize data within the\ndocument files it indexes.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Understanding Analyzers, Tokenizers, and Filters<span class=\"ff2 fc1\">: This section explains how Solr prepares text for</span>\nindexing and searching. Analyzers parse text and produce a stream of tokens, lexical units used for indexing\nand searching. Tokenizers break field data down into tokens. Filters perform other transformational or\nselective work on token streams.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Indexing and Basic Data Operations<span class=\"ff2 fc1\">: This section describes the indexing process and basic index</span>\noperations, such as commit, optimize, and rollback.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Searching<span class=\"ff2 fc1\">: This section presents an overview of the search process in Solr. It describes the main</span>\ncomponents used in searches, including request handlers, query parsers, and response writers. It lists the\nquery parameters that can be passed to Solr, and it describes features such as boosting and faceting, which\ncan be used to fine-tune search results.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "The Well-Configured Solr Instance<span class=\"ff2 fc1\">: This section discusses performance tuning for Solr. It begins with an</span>\noverview of the <span class=\"code\">solrconfig.xml</span> file, then tells you how to configure cores with <span class=\"code\">solr.xml</span>, how to configure\nthe Lucene index writer, and more.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Monitoring Solr<span class=\"ff2 fc1\">: Administration and monitoring can be performed using the web-based administration</span>\nconsole, through the command line interface, or using REST APIs.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Deployment and Operations<span class=\"ff2 fc1\">: An important aspect of Solr is that all operations and deployment can be</span>\ndone online, with minimal or no impact to running applications. This includes minor upgrades and\nprovisioning and removing nodes, backing up and restoring indexes and editing configurations",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "SolrCloud<span class=\"ff2 fc1\">: This section describes the newest and most exciting of Solr's new features, SolrCloud, which</span>\nprovides comprehensive distributed capabilities.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Securing Solr<span class=\"ff2 fc1\">: When planning how to secure Solr, you should consider which of the available features or</span>\napproaches are right for you.",
    "hierarchy": [
      "Apache Solr Reference Guide"
    ],
    "pageId": 7
  },
  {
    "content": "Legacy Scaling and Distribution<span class=\"ff2 fc1\">: This section tells you how to grow a Solr distribution by dividing a large</span>\nindex into sections called shards, which are then distributed across multiple servers, or by replicating a\nsingle index across multiple services.",
    "hierarchy": [
    ],
    "pageId": 8
  },
  {
    "content": "Client APIs<span class=\"ff2 fc1\">: This section tells you how to access Solr through various client APIs, including JavaScript, JSON,</span>\nand Ruby.",
    "hierarchy": [
    ],
    "pageId": 8
  },
  {
    "content": "This guide describes all of the important features and functions of Apache Solr.",
    "hierarchy": [
      "About This Guide"
    ],
    "pageId": 9
  },
  {
    "content": "Solr is free to download from <span class=\"link\">http://lucene.apache.org/solr/</span>.",
    "hierarchy": [
      "About This Guide"
    ],
    "pageId": 9
  },
  {
    "content": "Designed to provide high-level documentation, this guide is intended to be more encyclopedic and less of a\ncookbook. It is structured to address a broad spectrum of needs, ranging from new developers getting\nstarted to well-experienced developers extending their application or troubleshooting. It will be of use at\nany point in the application life cycle, for whenever you need authoritative information about Solr.",
    "hierarchy": [
      "About This Guide"
    ],
    "pageId": 9
  },
  {
    "content": "The material as presented assumes that you are familiar with some basic search concepts and that you can\nread XML. It does not assume that you are a Java programmer, although knowledge of Java is helpful when\nworking directly with Lucene or when developing custom extensions to a Lucene/Solr installation.",
    "hierarchy": [
      "About This Guide"
    ],
    "pageId": 9
  },
  {
    "content": "The default port when running Solr is 8983. The samples, URLs and screenshots in this guide may show\ndifferent ports, because the port number that Solr uses is configurable.",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "If you have not customized your installation of Solr, please make sure that you use port 8983 when following\nthe examples, or configure your own installation to use the port numbers shown in the examples. For\ninformation about configuring port numbers, see the section <span class=\"link\">Monitoring Solr</span>.",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "Similarly, URL examples use <span class=\"code\">localhost</span> throughout; if you are accessing Solr from a location remote to the\nserver hosting Solr, replace <span class=\"code\">localhost</span> with the proper domain or IP where Solr is running.",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "For example, we might provide a sample query like:",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=brown+cow",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "There are several items in this URL you might need to change locally. First, if your server is running at\n\"www.example.com\", you'll replace \"localhost\" with the proper domain. If you aren’t using port 8983, you’ll\nreplace that also. Finally, you’ll want to replace \"gettingstarted\" (the collection or core name) with the\nproper one in use in your implementation. The URL would then become:",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "http://www.example.com/solr/mycollection/select?q=brown+cow",
    "hierarchy": [
      "Hosts and Port Examples"
    ],
    "pageId": 10
  },
  {
    "content": "Path information is given relative to <span class=\"code\">solr.home</span>, which is the location under the main Solr installation where\nSolr's collections and their <span class=\"code\">conf</span> and <span class=\"code\">data</span> directories are stored.",
    "hierarchy": [
      "Directory Paths"
    ],
    "pageId": 11
  },
  {
    "content": "In many cases, this is is in the <span class=\"code\">server/solr</span> directory of your installation. However, there can be exceptions,\nparticularly if your installation has customized this.",
    "hierarchy": [
      "Directory Paths"
    ],
    "pageId": 11
  },
  {
    "content": "In several cases of this Guide, our examples are built from the the \"techproducts\" example (i.e., you have\nstarted Solr with the command <span class=\"code\">bin/solr -e techproducts</span>). In this case, <span class=\"code\">solr.home</span> will be a sub-directory\nof the <span class=\"code\">example/</span> directory created for you automatically.",
    "hierarchy": [
      "Directory Paths"
    ],
    "pageId": 11
  },
  {
    "content": "See also the section <span class=\"link\">Solr Home</span> for further details on what is contained in this directory.",
    "hierarchy": [
      "Directory Paths"
    ],
    "pageId": 11
  },
  {
    "content": "Solr has two styles of APIs that currently co-exist. The first has grown somewhat organically as Solr has\ndeveloped over time, but the second, referred to as the \"V2 API\", redesigns many of the original APIs with a\nmodernized and self-documenting API interface.",
    "hierarchy": [
      "API Examples"
    ],
    "pageId": 12
  },
  {
    "content": "In many cases, but not all, the parameters and outputs of API calls are the same between the two styles. In\nall cases the paths and endpoints used are different.",
    "hierarchy": [
      "API Examples"
    ],
    "pageId": 12
  },
  {
    "content": "Throughout this Guide, we have added examples of both styles with sections labeled \"V1 API\" and \"V2 API\".\nAs of the 7.2 version of this Guide, these examples are not yet complete - more coverage will be added as\nfuture versions of the Guide are released.",
    "hierarchy": [
      "API Examples"
    ],
    "pageId": 12
  },
  {
    "content": "The section <span class=\"link\">V2 API</span> provides more information about how to work with the new API structure, including how\nto disable it if you choose to do so.",
    "hierarchy": [
      "API Examples"
    ],
    "pageId": 12
  },
  {
    "content": "Special notes are included throughout these pages. There are several types of notes:",
    "hierarchy": [
      "Special Inline Notes"
    ],
    "pageId": 13
  },
  {
    "content": "Information blocks provide additional information that's useful for you to know.",
    "hierarchy": [
      "Special Inline Notes"
    ],
    "pageId": 13
  },
  {
    "content": "Important blocks provide information that we want to make sure you are aware of.",
    "hierarchy": [
      "Special Inline Notes"
    ],
    "pageId": 13
  },
  {
    "content": "Tip blocks provide helpful tips.",
    "hierarchy": [
      "Special Inline Notes"
    ],
    "pageId": 13
  },
  {
    "content": "Caution blocks provide details on scenarios or configurations you should be careful with.",
    "hierarchy": [
      "Special Inline Notes"
    ],
    "pageId": 13
  },
  {
    "content": "Warning blocks are used to warn you from a possibly dangerous change or action.",
    "hierarchy": [
      "Special Inline Notes"
    ],
    "pageId": 13
  },
  {
    "content": "Solr makes it easy for programmers to develop sophisticated, high-performance\nsearch applications with advanced features.",
    "hierarchy": [
      "Getting Started"
    ],
    "pageId": 14
  },
  {
    "content": "This section introduces you to the basic Solr architecture and features to help you get up and running\nquickly. It covers the following topics:",
    "hierarchy": [
      "Getting Started"
    ],
    "pageId": 14
  },
  {
    "content": "Solr Tutorial<span class=\"fc1\">: This tutorial covers getting Solr up and running</span>",
    "hierarchy": [
      "Getting Started"
    ],
    "pageId": 14
  },
  {
    "content": "A Quick Overview<span class=\"fc1\">: A high-level overview of how Solr works.</span>",
    "hierarchy": [
      "Getting Started"
    ],
    "pageId": 14
  },
  {
    "content": "Solr System Requirements<span class=\"fc1\">: Solr System Requirement</span>",
    "hierarchy": [
      "Getting Started"
    ],
    "pageId": 14
  },
  {
    "content": "Installing Solr<span class=\"fc1\">: A walkthrough of the Solr installation process.</span>",
    "hierarchy": [
      "Getting Started"
    ],
    "pageId": 14
  },
  {
    "content": "This tutorial covers getting Solr up and running, ingesting a variety of data sources into Solr collections, and\ngetting a feel for the Solr administrative and search interfaces.",
    "hierarchy": [
      "Solr Tutorial"
    ],
    "pageId": 15
  },
  {
    "content": "The tutorial is organized into three sections that each build on the one before it. The <span class=\"link\">first exercise</span> will ask\nyou to start Solr, create a collection, index some basic documents, and then perform some searches.",
    "hierarchy": [
      "Solr Tutorial"
    ],
    "pageId": 15
  },
  {
    "content": "The <span class=\"link\">second exercise</span> works with a different set of data, and explores requesting facets with the dataset.",
    "hierarchy": [
      "Solr Tutorial"
    ],
    "pageId": 15
  },
  {
    "content": "The <span class=\"link\">third exercise</span> encourages you to begin to work with your own data and start a plan for your\nimplementation.",
    "hierarchy": [
      "Solr Tutorial"
    ],
    "pageId": 15
  },
  {
    "content": "Finally, we'll introduce <span class=\"link\">spatial search</span> and show you how to get your Solr instance back into a clean state.",
    "hierarchy": [
      "Solr Tutorial"
    ],
    "pageId": 15
  },
  {
    "content": "To follow along with this tutorial, you will need…",
    "hierarchy": [
      "Solr Tutorial",
      "Before You Begin"
    ],
    "pageId": 15
  },
  {
    "content": "1.To meet the <span class=\"link\">system requirements</span>\n2.An Apache Solr release <span class=\"link\">download</span>. This tutorial is designed for Apache Solr 7.3.",
    "hierarchy": [
      "Solr Tutorial",
      "Before You Begin"
    ],
    "pageId": 15
  },
  {
    "content": "For best results, please run the browser showing this tutorial and the Solr server on the same machine so\ntutorial links will correctly point to your Solr server.",
    "hierarchy": [
      "Solr Tutorial",
      "Before You Begin"
    ],
    "pageId": 15
  },
  {
    "content": "Begin by unzipping the Solr release and changing your working directory to the subdirectory where Solr was\ninstalled. For example, with a shell in UNIX, Cygwin, or MacOS:",
    "hierarchy": [
      "Solr Tutorial",
      "Unpack Solr"
    ],
    "pageId": 15
  },
  {
    "content": "~$ ls solr*\nsolr-7.3.0.zip",
    "hierarchy": [
      "Solr Tutorial",
      "Unpack Solr"
    ],
    "pageId": 15
  },
  {
    "content": "~$ unzip -q solr-7.3.0.zip",
    "hierarchy": [
      "Solr Tutorial",
      "Unpack Solr"
    ],
    "pageId": 15
  },
  {
    "content": "~$ cd solr-7.3.0/",
    "hierarchy": [
      "Solr Tutorial",
      "Unpack Solr"
    ],
    "pageId": 15
  },
  {
    "content": "If you'd like to know more about Solr’s directory layout before moving to the first exercise, see the section\nDirectory Layout<span class=\"fc1\"> for details.</span>",
    "hierarchy": [
      "Solr Tutorial",
      "Unpack Solr"
    ],
    "pageId": 15
  },
  {
    "content": "This exercise will walk you through how to start Solr as a two-node cluster (both nodes on the same\nmachine) and create a collection during startup. Then you will index some sample data that ships with Solr\nand do some basic searches.",
    "hierarchy": [
      "Solr Tutorial",
      "Exercise 1: Index Techproducts Example Data"
    ],
    "pageId": 15
  },
  {
    "content": "To launch Solr, run: <span class=\"code\">bin/solr start -e cloud</span> on Unix or MacOS; <span class=\"code\">bin\\solr.cmd start -e cloud</span> on\nWindows.",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "This will start an interactive session that will start two Solr \"servers\" on your machine. This command has an\noption to run without prompting you for input (<span class=\"code\">-noprompt</span>), but we want to modify two of the defaults so we\nwon't use that option now.",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "solr-7.3.0:$ ./bin/solr start -e cloud",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "Welcome to the SolrCloud example!",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "This interactive session will help you launch a SolrCloud cluster on your local workstation.\nTo begin, how many Solr nodes would you like to run in your local cluster? (specify 1-4 nodes)\n[2]:",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "The first prompt asks how many nodes we want to run. Note the <span class=\"code\">[2]</span> at the end of the last line; that is the\ndefault number of nodes. Two is what we want for this example, so you can simply press <span class=\"code\">enter</span>.",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "Ok, let's start up 2 Solr nodes for your example SolrCloud cluster.\nPlease enter the port for node1 [8983]:",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "This will be the port that the first node runs on. Unless you know you have something else running on port\n8983 on your machine, accept this default option also by pressing <span class=\"code\">enter</span>. If something is already using that\nport, you will be asked to choose another port.",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "Please enter the port for node2 [7574]:",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "This is the port the second node will run on. Again, unless you know you have something else running on\nport 8983 on your machine, accept this default option also by pressing <span class=\"code\">enter</span>. If something is already using\nthat port, you will be asked to choose another port.",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "Solr will now initialize itself and start running on those two nodes. The script will print the commands it uses\nfor your reference.",
    "hierarchy": [
      "Launch Solr in SolrCloud Mode"
    ],
    "pageId": 16
  },
  {
    "content": "Starting up 2 Solr nodes for your example SolrCloud cluster.",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Creating Solr home directory /solr-7.3.0/example/cloud/node1/solr\nCloning /solr-7.3.0/example/cloud/node1 into\nÊ  /solr-7.3.0/example/cloud/node2",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Starting up Solr on port 8983 using command:\n\"bin/solr\" start -cloud -p 8983 -s \"example/cloud/node1/solr\"",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Waiting up to 180 seconds to see Solr running on port 8983 [\\]\nStarted Solr server on port 8983 (pid=34942). Happy searching!",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Starting up Solr on port 7574 using command:\n\"bin/solr\" start -cloud -p 7574 -s \"example/cloud/node2/solr\" -z localhost:9983",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Waiting up to 180 seconds to see Solr running on port 7574 [\\]\nStarted Solr server on port 7574 (pid=35036). Happy searching!",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "INFO  - 2017-07-27 12:28:02.835; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider;\nCluster at localhost:9983 ready",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Notice that two instances of Solr have started on two nodes. Because we are starting in SolrCloud mode, and\ndid not define any details about an external ZooKeeper cluster, Solr launches its own ZooKeeper and\nconnects both nodes to it.",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "After startup is complete, you'll be prompted to create a collection to use for indexing data.",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Now let's create a new collection for indexing documents in your 2-node cluster.\nPlease provide a name for your new collection: [gettingstarted]",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Here's the first place where we’ll deviate from the default options. This tutorial will ask you to index some\nsample data included with Solr, called the \"techproducts\" data. Let’s name our collection \"techproducts\" so\nit’s easy to differentiate from other collections we’ll create later. Enter <span class=\"ff1 fs1\">techproducts</span> at the prompt and hit\nenter<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "How many shards would you like to split techproducts into? [2]",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "This is asking how many <span class=\"link\">shards</span> you want to split your index into across the two nodes. Choosing \"2\" (the\ndefault) means we will split the index relatively evenly across both nodes, which is a good way to start.\nAccept the default by hitting <span class=\"ff1 fs1\">enter</span>.",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "How many replicas per shard would you like to create? [2]",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "A replica is a copy of the index that's used for failover (see also the <span class=\"link\">Solr Glossary definition</span>). Again, the\ndefault of \"2\" is fine to start with here also, so accept the default by hitting <span class=\"ff1 fs1\">enter</span>.",
    "hierarchy": [
    ],
    "pageId": 17
  },
  {
    "content": "Please choose a configuration for the techproducts collection, available options are:\n_default or sample_techproducts_configs [_default]",
    "hierarchy": [
    ],
    "pageId": 18
  },
  {
    "content": "We've reached another point where we will deviate from the default option. Solr has two sample sets of\nconfiguration files (called a <span class=\"code\">configSet</span>) available out-of-the-box.",
    "hierarchy": [
    ],
    "pageId": 18
  },
  {
    "content": "A collection must have a configSet, which at a minimum includes the two main configuration files for Solr:\nthe schema file (named either <span class=\"ff1 fs1\">managed-schema</span> or <span class=\"ff1 fs1\">schema.xml</span>), and <span class=\"ff1 fs1\">solrconfig.xml</span>. The question here is\nwhich configSet you would like to start with. The <span class=\"ff1 fs1\">_default</span> is a bare-bones option, but note there's one\nwhose name includes \"techproducts\", the same as we named our collection. This configSet is specifically\ndesigned to support the sample data we want to use, so enter <span class=\"ff1 fs1\">sample_techproducts_configs</span> at the prompt\nand hit <span class=\"ff1 fs1\">enter</span>.",
    "hierarchy": [
    ],
    "pageId": 18
  },
  {
    "content": "At this point, Solr will create the collection and again output to the screen the commands it issues.",
    "hierarchy": [
    ],
    "pageId": 18
  },
  {
    "content": "Uploading /solr-7.3.0/server/solr/configsets/_default/conf for config techproducts to ZooKeeper\nat localhost:9983",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "Connecting to ZooKeeper at localhost:9983 ...\nINFO  - 2017-07-27 12:48:59.289; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider;\nCluster at localhost:9983 ready\nUploading /solr-7.3.0/server/solr/configsets/sample_techproducts_configs/conf for config\ntechproducts to ZooKeeper at localhost:9983",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "Creating new collection 'techproducts' using command:\nhttp://localhost:8983/solr/admin/collections?action=CREATE&name=techproducts&numShards=2&replicat\nionFactor=2&maxShardsPerNode=2&collection.configName=techproducts",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "{\nÊ \"responseHeader\":{\nÊ   \"status\":0,\nÊ   \"QTime\":5460},\nÊ \"success\":{\nÊ   \"192.168.0.110:7574_solr\":{\nÊ     \"responseHeader\":{\nÊ       \"status\":0,\nÊ       \"QTime\":4056},\nÊ     \"core\":\"techproducts_shard1_replica_n1\"},\nÊ   \"192.168.0.110:8983_solr\":{\nÊ     \"responseHeader\":{\nÊ       \"status\":0,\nÊ       \"QTime\":4056},\nÊ     \"core\":\"techproducts_shard2_replica_n2\"}}}",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "Enabling auto soft-commits with maxTime 3 secs using the Config API",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "POSTing request to Config API: http://localhost:8983/solr/techproducts/config\n{\"set-property\":{\"updateHandler.autoSoftCommit.maxTime\":\"3000\"}}\nSuccessfully set-property updateHandler.autoSoftCommit.maxTime to 3000",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "SolrCloud example running, please visit: http://localhost:8983/solr",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "Congratulations!<span class=\"code\"> Solr is ready for data!</span>",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "You can see that Solr is running by launching the Solr Admin UI in your web browser: <span class=\"link\">http://localhost:8983/</span>\nsolr/<span class=\"fc0\">. This is the main starting point for administering Solr.</span>",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "Solr will now be running two \"nodes\", one on port 7574 and one on port 8983. There is one collection\ncreated automatically, <span class=\"ff1 fs1\">techproducts</span>, a two shard collection, each with two replicas.",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "The <span class=\"link\">Cloud tab</span> in the Admin UI diagrams the collection nicely:",
    "hierarchy": [
    ],
    "pageId": 19
  },
  {
    "content": "Your Solr server is up and running, but it doesn't contain any data yet, so we can’t do any queries.",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "Solr includes the <span class=\"ff4 fs2\">bin/post</span> tool in order to facilitate indexing various types of documents easily. We'll use\nthis tool for the indexing examples below.",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "You'll need a command shell to run some of the following examples, rooted in the Solr install directory; the\nshell from where you launched Solr works just fine.",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "Currently the <span class=\"ff4 fs2\">bin/post</span> tool does not have a comparable Windows script, but the\nunderlying Java program invoked is available. We'll show examples below for Windows, but\nyou can also see the <span class=\"link\">Windows section</span> of the Post Tool documentation for more details.",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "The data we will index is in the <span class=\"ff4 fs2\">example/exampledocs</span> directory. The documents are in a mix of document\nformats (JSON, CSV, etc.), and fortunately we can index them all at once:",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "solr-7.3.0:$ bin/post -c techproducts example/exampledocs/*",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "C:\\solr-7.3.0> java -jar -Dc=techproducts -Dauto example\\exampledocs\\post.jar\nexample\\exampledocs\\*",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "You should see output similar to the following:",
    "hierarchy": [
      "Index the Techproducts Data"
    ],
    "pageId": 20
  },
  {
    "content": "SimplePostTool version 5.0.0\nPosting files to [base] url http://localhost:8983/solr/techproducts/update...\nEntering auto mode. File endings considered are\nxml,json,jsonl,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log\nPOSTing file books.csv (text/csv) to [base]\nPOSTing file books.json (application/json) to [base]/json/docs\nPOSTing file gb18030-example.xml (application/xml) to [base]\nPOSTing file hd.xml (application/xml) to [base]\nPOSTing file ipod_other.xml (application/xml) to [base]\nPOSTing file ipod_video.xml (application/xml) to [base]\nPOSTing file manufacturers.xml (application/xml) to [base]\nPOSTing file mem.xml (application/xml) to [base]\nPOSTing file money.xml (application/xml) to [base]\nPOSTing file monitor.xml (application/xml) to [base]\nPOSTing file monitor2.xml (application/xml) to [base]\nPOSTing file more_books.jsonl (application/json) to [base]/json/docs\nPOSTing file mp500.xml (application/xml) to [base]\nPOSTing file post.jar (application/octet-stream) to [base]/extract\nPOSTing file sample.html (text/html) to [base]/extract\nPOSTing file sd500.xml (application/xml) to [base]\nPOSTing file solr-word.pdf (application/pdf) to [base]/extract\nPOSTing file solr.xml (application/xml) to [base]\nPOSTing file test_utf8.sh (application/octet-stream) to [base]/extract\nPOSTing file utf8-example.xml (application/xml) to [base]\nPOSTing file vidcard.xml (application/xml) to [base]\n21 files indexed.\nCOMMITting Solr index changes to http://localhost:8983/solr/techproducts/update...\nTime spent: 0:00:00.822",
    "hierarchy": [
    ],
    "pageId": 21
  },
  {
    "content": "Congratulations again! You have data in your Solr!",
    "hierarchy": [
    ],
    "pageId": 21
  },
  {
    "content": "Now we're ready to start searching.",
    "hierarchy": [
    ],
    "pageId": 21
  },
  {
    "content": "Solr can be queried via REST clients, curl, wget, Chrome POSTMAN, etc., as well as via native clients available\nfor many programming languages.",
    "hierarchy": [
      "Basic Searching"
    ],
    "pageId": 21
  },
  {
    "content": "The Solr Admin UI includes a query builder interface via the Query tab for the <span class=\"ff1 fs2\">techproducts</span> collection (at\nhttp://localhost:8983/solr/#/techproducts/query<span class=\"fc0\">). If you click the <span class=\"code\">[<span class=\"ff4\"> </span>Execute Query<span class=\"ff4\"> </span>]</span> button without</span>\nchanging anything in the form, you'll get 10 documents in JSON format:",
    "hierarchy": [
      "Basic Searching"
    ],
    "pageId": 21
  },
  {
    "content": "The URL sent by the Admin UI to Solr is shown in light grey near the top right of the above screenshot. If you\nclick on it, your browser will show you the raw response.",
    "hierarchy": [
    ],
    "pageId": 22
  },
  {
    "content": "To use curl, give the same URL shown in your browser in quotes on the command line:",
    "hierarchy": [
    ],
    "pageId": 22
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?indent=on&q=*:*\"",
    "hierarchy": [
    ],
    "pageId": 22
  },
  {
    "content": "What's happening here is that we are using Solr’s query parameter (<span class=\"code\">q</span>) with a special syntax that requests all\ndocuments in the index (<span class=\"code\">*:*</span>). All of the documents are not returned to us, however, because of the default\nfor a parameter called <span class=\"code\">rows</span>, which you can see in the form is <span class=\"code\">10</span>. You can change the parameter in the UI or\nin the defaults if you wish.",
    "hierarchy": [
    ],
    "pageId": 22
  },
  {
    "content": "Solr has very powerful search options, and this tutorial won't be able to cover all of them. But we can cover\nsome of the most common types of queries.",
    "hierarchy": [
    ],
    "pageId": 22
  },
  {
    "content": "To search for a term, enter it as the <span class=\"code\">q</span> parameter value in the Solr Admin UI Query screen, replacing <span class=\"code\">*:*</span> with\nthe term you want to find.",
    "hierarchy": [
      "Search for a Single Term"
    ],
    "pageId": 22
  },
  {
    "content": "Enter \"foundation\" and hit <span class=\"ff4\">[<span class=\"ff5\"> </span>Execute Query<span class=\"ff5\"> </span>]</span> again.",
    "hierarchy": [
      "Search for a Single Term"
    ],
    "pageId": 22
  },
  {
    "content": "If you prefer curl, enter something like this:",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?q=foundation\"",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "You'll see something like this:",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">8</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"foundation\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">4</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">2.7879646</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc4\">\"0553293354\"</span>,\nÊ       <span class=\"fc1\">\"cat\"</span>:[<span class=\"fc4\">\"book\"</span>],\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc4\">\"Foundation\"</span>,\nÊ       <span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">7.99</span>,\nÊ       <span class=\"fc1\">\"price_c\"</span>:<span class=\"fc4\">\"7.99,USD\"</span>,\nÊ       <span class=\"fc1\">\"inStock\"</span>:<span class=\"fc2\">true</span>,\nÊ       <span class=\"fc1\">\"author\"</span>:<span class=\"fc4\">\"Isaac Asimov\"</span>,\nÊ       <span class=\"fc1\">\"author_s\"</span>:<span class=\"fc4\">\"Isaac Asimov\"</span>,\nÊ       <span class=\"fc1\">\"series_t\"</span>:<span class=\"fc4\">\"Foundation Novels\"</span>,\nÊ       <span class=\"fc1\">\"sequence_i\"</span>:<span class=\"fc3\">1</span>,\nÊ       <span class=\"fc1\">\"genre_s\"</span>:<span class=\"fc4\">\"scifi\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">1574100232473411586</span>,\nÊ       <span class=\"fc1\">\"price_c____l_ns\"</span>:<span class=\"fc3\">799</span>}]\n}}",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "The response indicates that there are 4 hits (<span class=\"ff2 fs1\">\"numFound\":4</span>). We've only included one document the above\nsample output, but since 4 hits is lower than the <span class=\"ff2 fs1\">rows</span> parameter default of 10 to be returned, you should see\nall 4 of them.",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "Note the <span class=\"ff2 fs1\">responseHeader</span> before the documents. This header will include the parameters you have set for\nthe search. By default it shows only the parameters <span class=\"code\">you</span> have set for this query, which in this case is only\nyour query term.",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "The documents we got back include all the fields for each document that were indexed. This is, again,\ndefault behavior. If you want to restrict the fields in the response, you can use the <span class=\"ff2 fs1\">fl</span> param, which takes a\ncomma-separated list of field names. This is one of the available fields on the query form in the Admin UI.",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "Put \"id\" (without quotes) in the \"fl\" box and hit <span class=\"ff4\">[<span class=\"ff5\"> </span>Execute Query<span class=\"ff5\"> </span>]</span> again. Or, to specify it with curl:",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?q=foundation&fl=id\"",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "You should only see the IDs of the matching records returned.",
    "hierarchy": [
    ],
    "pageId": 23
  },
  {
    "content": "All Solr queries look for documents using some field. Often you want to query across multiple fields at the\nsame time, and this is what we've done so far with the \"foundation\" query. This is possible with the use of",
    "hierarchy": [
      "Field Searches"
    ],
    "pageId": 23
  },
  {
    "content": "copy fields, which are set up already with this set of configurations. We'll cover copy fields a little bit more in\nExercise 2.",
    "hierarchy": [
    ],
    "pageId": 24
  },
  {
    "content": "Sometimes, though, you want to limit your query to a single field. This can make your queries more efficient\nand the results more relevant for users.",
    "hierarchy": [
    ],
    "pageId": 24
  },
  {
    "content": "Much of the data in our small sample data set is related to products. Let's say we want to find all the\n\"electronics\" products in the index. In the Query screen, enter \"electronics\" (without quotes) in the <span class=\"ff2 fs1\">q</span> box\nand hit <span class=\"code\">[<span class=\"ff4\"> </span>Execute Query<span class=\"ff4\"> </span>]</span>. You should get 14 results, such as:",
    "hierarchy": [
    ],
    "pageId": 24
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">6</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"electronics\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">14</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">1.5579545</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc4\">\"IW-02\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc4\">\"iPod & iPod Mini USB 2.0 Cable\"</span>,\nÊ       <span class=\"fc1\">\"manu\"</span>:<span class=\"fc4\">\"Belkin\"</span>,\nÊ       <span class=\"fc1\">\"manu_id_s\"</span>:<span class=\"fc4\">\"belkin\"</span>,\nÊ       <span class=\"fc1\">\"cat\"</span>:[<span class=\"fc4\">\"electronics\"</span>,\nÊ         <span class=\"fc4\">\"connector\"</span>],\nÊ       <span class=\"fc1\">\"features\"</span>:[<span class=\"fc4\">\"car power adapter for iPod, white\"</span>],\nÊ       <span class=\"fc1\">\"weight\"</span>:<span class=\"fc3\">2.0</span>,\nÊ       <span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">11.5</span>,\nÊ       <span class=\"fc1\">\"price_c\"</span>:<span class=\"fc4\">\"11.50,USD\"</span>,\nÊ       <span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">1</span>,\nÊ       <span class=\"fc1\">\"inStock\"</span>:<span class=\"fc2\">false</span>,\nÊ       <span class=\"fc1\">\"store\"</span>:<span class=\"fc4\">\"37.7752,-122.4232\"</span>,\nÊ       <span class=\"fc1\">\"manufacturedate_dt\"</span>:<span class=\"fc4\">\"2006-02-14T23:55:59Z\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">1574100232554151936</span>,\nÊ       <span class=\"fc1\">\"price_c____l_ns\"</span>:<span class=\"fc3\">1150</span>}]\n}}",
    "hierarchy": [
    ],
    "pageId": 24
  },
  {
    "content": "This search finds all documents that contain the term \"electronics\" anywhere in the indexed fields. However,\nwe can see from the above there is a <span class=\"ff2 fs1\">cat</span> field (for \"category\"). If we limit our search for only documents\nwith the category \"electronics\", the results will be more precise for our users.",
    "hierarchy": [
    ],
    "pageId": 24
  },
  {
    "content": "Update your query in the <span class=\"ff2 fs1\">q</span> field of the Admin UI so it's <span class=\"ff2 fs1\">cat:electronics</span>. Now you get 12 results:",
    "hierarchy": [
    ],
    "pageId": 24
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">6</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"cat:electronics\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">12</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">0.9614112</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc4\">\"SP2514N\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc4\">\"Samsung SpinPoint P120 SP2514N - hard drive - 250 GB - ATA-133\"</span>,\nÊ       <span class=\"fc1\">\"manu\"</span>:<span class=\"fc4\">\"Samsung Electronics Co. Ltd.\"</span>,\nÊ       <span class=\"fc1\">\"manu_id_s\"</span>:<span class=\"fc4\">\"samsung\"</span>,\nÊ       <span class=\"fc1\">\"cat\"</span>:[<span class=\"fc4\">\"electronics\"</span>,\nÊ         <span class=\"fc4\">\"hard drive\"</span>],\nÊ       <span class=\"fc1\">\"features\"</span>:[<span class=\"fc4\">\"7200RPM, 8MB cache, IDE Ultra ATA-133\"</span>,\nÊ         <span class=\"fc4\">\"NoiseGuard, SilentSeek technology, Fluid Dynamic Bearing (FDB) motor\"</span>],\nÊ       <span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">92.0</span>,\nÊ       <span class=\"fc1\">\"price_c\"</span>:<span class=\"fc4\">\"92.0,USD\"</span>,\nÊ       <span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">6</span>,\nÊ       <span class=\"fc1\">\"inStock\"</span>:<span class=\"fc2\">true</span>,\nÊ       <span class=\"fc1\">\"manufacturedate_dt\"</span>:<span class=\"fc4\">\"2006-02-13T15:26:37Z\"</span>,\nÊ       <span class=\"fc1\">\"store\"</span>:<span class=\"fc4\">\"35.0752,-97.032\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">1574100232511160320</span>,\nÊ       <span class=\"fc1\">\"price_c____l_ns\"</span>:<span class=\"fc3\">9200</span>}]\nÊ    }}",
    "hierarchy": [
    ],
    "pageId": 25
  },
  {
    "content": "Using curl, this query would look like this:",
    "hierarchy": [
    ],
    "pageId": 25
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?q=cat:electronics\"",
    "hierarchy": [
    ],
    "pageId": 25
  },
  {
    "content": "To search for a multi-term phrase, enclose it in double quotes: <span class=\"ff1 fs1\">q=\"multiple terms here\"</span>. For example,\nsearch for \"CAS latency\" by entering that phrase in quotes to the <span class=\"ff1 fs1\">q</span> box in the Admin UI.",
    "hierarchy": [
      "Phrase Search"
    ],
    "pageId": 25
  },
  {
    "content": "If you're following along with curl, note that the space between terms must be converted to \"+\" in a URL, as\nso:",
    "hierarchy": [
      "Phrase Search"
    ],
    "pageId": 25
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?q=\\\"CAS+latency\\\"\"",
    "hierarchy": [
      "Phrase Search"
    ],
    "pageId": 25
  },
  {
    "content": "We get 2 results:",
    "hierarchy": [
      "Phrase Search"
    ],
    "pageId": 25
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">7</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"\\\"CAS latency\\\"\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">2</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">5.937691</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc4\">\"VDBDB1A16\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc4\">\"A-DATA V-Series 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System Memory</span>",
    "hierarchy": [
    ],
    "pageId": 26
  },
  {
    "content": "Ê       <span class=\"fc1\">\"manu\"</span>:<span class=\"fc4\">\"A-DATA Technology Inc.\"</span>,\nÊ       <span class=\"fc1\">\"manu_id_s\"</span>:<span class=\"fc4\">\"corsair\"</span>,\nÊ       <span class=\"fc1\">\"cat\"</span>:[<span class=\"fc4\">\"electronics\"</span>,\nÊ         <span class=\"fc4\">\"memory\"</span>],\nÊ       <span class=\"fc1\">\"features\"</span>:[<span class=\"fc4\">\"CAS latency 3,   2.7v\"</span>],\nÊ       <span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">0</span>,\nÊ       <span class=\"fc1\">\"inStock\"</span>:<span class=\"fc2\">true</span>,\nÊ       <span class=\"fc1\">\"store\"</span>:<span class=\"fc4\">\"45.18414,-93.88141\"</span>,\nÊ       <span class=\"fc1\">\"manufacturedate_dt\"</span>:<span class=\"fc4\">\"2006-02-13T15:26:37Z\"</span>,\nÊ       <span class=\"fc1\">\"payloads\"</span>:<span class=\"fc4\">\"electronics|0.9 memory|0.1\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">1574100232590852096</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc4\">\"TWINX2048-3200PRO\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc4\">\"CORSAIR  XMS 2GB (2 x 1GB) 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) Dual</span>",
    "hierarchy": [
    ],
    "pageId": 26
  },
  {
    "content": "Ê       <span class=\"fc1\">\"manu\"</span>:<span class=\"fc4\">\"Corsair Microsystems Inc.\"</span>,\nÊ       <span class=\"fc1\">\"manu_id_s\"</span>:<span class=\"fc4\">\"corsair\"</span>,\nÊ       <span class=\"fc1\">\"cat\"</span>:[<span class=\"fc4\">\"electronics\"</span>,\nÊ         <span class=\"fc4\">\"memory\"</span>],\nÊ       <span class=\"fc1\">\"features\"</span>:[<span class=\"fc4\">\"CAS latency 2,  2-3-3-6 timing, 2.75v, unbuffered, heat-spreader\"</span>],\nÊ       <span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">185.0</span>,\nÊ       <span class=\"fc1\">\"price_c\"</span>:<span class=\"fc4\">\"185.00,USD\"</span>,\nÊ       <span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">5</span>,\nÊ       <span class=\"fc1\">\"inStock\"</span>:<span class=\"fc2\">true</span>,\nÊ       <span class=\"fc1\">\"store\"</span>:<span class=\"fc4\">\"37.7752,-122.4232\"</span>,\nÊ       <span class=\"fc1\">\"manufacturedate_dt\"</span>:<span class=\"fc4\">\"2006-02-13T15:26:37Z\"</span>,\nÊ       <span class=\"fc1\">\"payloads\"</span>:<span class=\"fc4\">\"electronics|6.0 memory|3.0\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">1574100232584560640</span>,\nÊ       <span class=\"fc1\">\"price_c____l_ns\"</span>:<span class=\"fc3\">18500</span>}]\nÊ }}",
    "hierarchy": [
    ],
    "pageId": 26
  },
  {
    "content": "By default, when you search for multiple terms and/or phrases in a single query, Solr will only require that\none of them is present in order for a document to match. Documents containing more terms will be sorted\nhigher in the results list.",
    "hierarchy": [
      "Combining Searches"
    ],
    "pageId": 26
  },
  {
    "content": "You can require that a term or phrase is present by prefixing it with a <span class=\"ff1 fs1\">+</span>; conversely, to disallow the presence\nof a term or phrase, prefix it with a <span class=\"ff1 fs1\">-</span>.",
    "hierarchy": [
      "Combining Searches"
    ],
    "pageId": 26
  },
  {
    "content": "To find documents that contain both terms \"electronics\" and \"music\", enter <span class=\"ff2 fs1\">+electronics +music</span> in the <span class=\"ff2 fs1\">q</span>\nbox in the Admin UI Query tab.",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "If you're using curl, you must encode the <span class=\"ff2 fs1\">+</span> character because it has a reserved purpose in URLs (encoding\nthe space character). The encoding for <span class=\"ff2 fs1\">+</span> is <span class=\"ff2 fs1\">%2B</span> as in:",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?q=%2Belectronics%20%2Bmusic\"",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "You should only get a single result.",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "To search for documents that contain the term \"electronics\" but <span class=\"code\">don't</span> contain the term \"music\", enter\n+electronics -music<span class=\"ff1 fs0\"> in the </span>q<span class=\"ff1 fs0\"> box in the Admin UI. For curl, again, URL encode </span>+<span class=\"ff1 fs0\"> as </span>%2B<span class=\"ff1 fs0\"> as in:</span>",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/select?q=%2Belectronics+-music\"",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "This time you get 13 results.",
    "hierarchy": [
    ],
    "pageId": 27
  },
  {
    "content": "We have only scratched the surface of the search options available in Solr. For more Solr search options, see\nthe section on <span class=\"link\">Searching</span>.",
    "hierarchy": [
      "More Information on Searching"
    ],
    "pageId": 27
  },
  {
    "content": "At this point, you've seen how Solr can index data and have done some basic queries. You can choose now\nto continue to the next example which will introduce more Solr concepts, such as faceting results and\nmanaging your schema, or you can strike out on your own.",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "If you decide not to continue with this tutorial, the data we've indexed so far is likely of little value to you.\nYou can delete your installation and start over, or you can use the <span class=\"ff2 fs1\">bin/solr</span> script we started out with to\ndelete this collection:",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "bin/solr delete -c techproducts",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "And then create a new collection:",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "bin/solr create -c <yourCollection> -s 2 -rf 2",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "To stop both of the Solr nodes we started, issue the command:",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "bin/solr stop -all",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "For more information on start/stop and collection options with <span class=\"ff2 fs1\">bin/solr</span>, see <span class=\"link\">Solr Control Script Reference</span>.",
    "hierarchy": [
      "Exercise 1 Wrap Up"
    ],
    "pageId": 27
  },
  {
    "content": "This exercise will build on the last one and introduce you to the index schema and Solr's powerful faceting\nfeatures.",
    "hierarchy": [
      "Exercise 2: Modify the Schema and Index Films Data"
    ],
    "pageId": 27
  },
  {
    "content": "Did you stop Solr after the last exercise? No? Then go ahead to the next section.",
    "hierarchy": [
      "Exercise 2: Modify the Schema and Index Films Data",
      "Restart Solr"
    ],
    "pageId": 27
  },
  {
    "content": "If you did, though, and need to restart Solr, issue these commands:",
    "hierarchy": [
      "Exercise 2: Modify the Schema and Index Films Data",
      "Restart Solr"
    ],
    "pageId": 27
  },
  {
    "content": "./bin/solr start -c -p 8983 -s example/cloud/node1/solr",
    "hierarchy": [
    ],
    "pageId": 28
  },
  {
    "content": "This starts the first node. When it's done start the second node, and tell it how to connect to to ZooKeeper:",
    "hierarchy": [
    ],
    "pageId": 28
  },
  {
    "content": "./bin/solr start -c -p 7574 -s example/cloud/node2/solr -z localhost:9983",
    "hierarchy": [
    ],
    "pageId": 28
  },
  {
    "content": "We're going to use a whole new data set in this exercise, so it would be better to have a new collection\ninstead of trying to reuse the one we had before.",
    "hierarchy": [
      "Create a New Collection"
    ],
    "pageId": 28
  },
  {
    "content": "One reason for this is we're going to use a feature in Solr called \"field guessing\", where Solr attempts to\nguess what type of data is in a field while it’s indexing it. It also automatically creates new fields in the\nschema for new fields that appear in incoming documents. This mode is called \"Schemaless\". We’ll see the\nbenefits and limitations of this approach to help you decide how and where to use it in your real application.",
    "hierarchy": [
      "Create a New Collection"
    ],
    "pageId": 28
  },
  {
    "content": "Solr's schema is a single file (in XML) that stores the details about the fields and field types Solr is\nexpected to understand. The schema defines not only the field or field type names, but also any\nmodifications that should happen to a field before it is indexed. For example, if you want to ensure that\na user who enters \"abc\" and a user who enters \"ABC\" can both find a document containing the term\n\"ABC\", you will want to normalize (lower-case it, in this case) \"ABC\" when it is indexed, and normalize\nthe user query to be sure of a match. These rules are defined in your schema.",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "Earlier in the tutorial we mentioned copy fields, which are fields made up of data that originated from\nother fields. You can also define dynamic fields, which use wildcards (such as <span class=\"ff1 fs0\">*_t</span> or <span class=\"ff1 fs0\">*_s</span>) to dynamically\ncreate fields of a specific field type. These types of rules are also defined in the schema.",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "When you initially started Solr in the first exercise, we had a choice of a configSet to use. The one we chose\nhad a schema that was pre-defined for the data we later indexed. This time, we're going to use a configSet\nthat has a very minimal schema and let Solr figure out from the data what fields to add.",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "The data you're going to index is related to movies, so start by creating a collection named \"films\" that uses\nthe <span class=\"ff1 fs0\">_default</span> configSet:",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "bin/solr create -c films -s 2 -rf 2",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "Whoa, wait. We didn't specify a configSet! That’s fine, the <span class=\"ff1 fs0\">_default</span> is appropriately named, since it’s the\ndefault and is used if you don’t specify one at all.",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "We did, however, set two parameters <span class=\"ff1 fs0\">-s</span> and <span class=\"ff1 fs0\">-rf</span>. Those are the number of shards to split the collection\nacross (2) and how many replicas to create (2). This is equivalent to the options we had during the\ninteractive example from the first exercise.",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "You should see output like:",
    "hierarchy": [
      "What is a \"schema\" and why do I need one?"
    ],
    "pageId": 28
  },
  {
    "content": "WARNING: Using _default configset. Data driven schema functionality is enabled by default, which\nis\nÊ        NOT RECOMMENDED for production use.",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "Ê        To turn it off:\nÊ           curl http://localhost:7574/solr/films/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "Connecting to ZooKeeper at localhost:9983 ...\nINFO  - 2017-07-27 15:07:46.191; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider;\nCluster at localhost:9983 ready\nUploading /7.3.0/server/solr/configsets/_default/conf for config films to ZooKeeper at\nlocalhost:9983",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "Creating new collection 'films' using command:\nhttp://localhost:7574/solr/admin/collections?action=CREATE&name=films&numShards=2&replicationFact\nor=2&maxShardsPerNode=2&collection.configName=films",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "{\nÊ \"responseHeader\":{\nÊ   \"status\":0,\nÊ   \"QTime\":3830},\nÊ \"success\":{\nÊ   \"192.168.0.110:8983_solr\":{\nÊ     \"responseHeader\":{\nÊ       \"status\":0,\nÊ       \"QTime\":2076},\nÊ     \"core\":\"films_shard2_replica_n1\"},\nÊ   \"192.168.0.110:7574_solr\":{\nÊ     \"responseHeader\":{\nÊ       \"status\":0,\nÊ       \"QTime\":2494},\nÊ     \"core\":\"films_shard1_replica_n2\"}}}",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "The first thing the command printed was a warning about not using this configSet in production. That's due\nto some of the limitations we’ll cover shortly.",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "Otherwise, though, the collection should be created. If we go to the Admin UI at <span class=\"link\">http://localhost:8983/solr/#</span>\n/films/collection-overview<span class=\"fc0\"> we should see the overview screen.</span>",
    "hierarchy": [
    ],
    "pageId": 29
  },
  {
    "content": "There are two parallel things happening with the schema that comes with the <span class=\"ff1 fs1\">_default</span> configSet.",
    "hierarchy": [
      "Preparing Schemaless for the Films Data"
    ],
    "pageId": 29
  },
  {
    "content": "First, we are using a \"managed schema\", which is configured to only be modified by Solr's Schema API. That\nmeans we should not hand-edit it so there isn’t confusion about which edits come from which source. Solr’s\nSchema API allows us to make changes to fields, field types, and other types of schema rules.",
    "hierarchy": [
      "Preparing Schemaless for the Films Data"
    ],
    "pageId": 29
  },
  {
    "content": "Second, we are using \"field guessing\", which is configured in the <span class=\"ff1 fs1\">solrconfig.xml</span> file (and includes most of\nSolr's various configuration settings). Field guessing is designed to allow us to start using Solr without\nhaving to define all the fields we think will be in our documents before trying to index them. This is why we",
    "hierarchy": [
      "Preparing Schemaless for the Films Data"
    ],
    "pageId": 29
  },
  {
    "content": "call it \"schemaless\", because you can start quickly and let Solr create fields for you as it encounters them in\ndocuments.",
    "hierarchy": [
    ],
    "pageId": 30
  },
  {
    "content": "Sounds great! Well, not really, there are limitations. It's a bit brute force, and if it guesses wrong, you can’t\nchange much about a field after data has been indexed without having to reindex. If we only have a few\nthousand documents that might not be bad, but if you have millions and millions of documents, or, worse,\ndon’t have access to the original data anymore, this can be a real problem.",
    "hierarchy": [
    ],
    "pageId": 30
  },
  {
    "content": "For these reasons, the Solr community does not recommend going to production without a schema that you\nhave defined yourself. By this we mean that the schemaless features are fine to start with, but you should\nstill always make sure your schema matches your expectations for how you want your data indexed and how\nusers are going to query it.",
    "hierarchy": [
    ],
    "pageId": 30
  },
  {
    "content": "It is possible to mix schemaless features with a defined schema. Using the Schema API, you can define a few\nfields that you know you want to control, and let Solr guess others that are less important or which you are\nconfident (through testing) will be guessed to your satisfaction. That's what we’re going to do here.",
    "hierarchy": [
    ],
    "pageId": 30
  },
  {
    "content": "The films data we are going to index has a small number of fields for each movie: an ID, director name(s),\nfilm name, release date, and genre(s).",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "If you look at one of the files in <span class=\"code\">example/films</span>, you'll see the first film is named <span class=\"ff4\">.45</span>, released in 2006. As the\nfirst document in the dataset, Solr is going to guess the field type based on the data in the record. If we go\nahead and index this data, that first film name is going to indicate to Solr that that field type is a \"float\"\nnumeric field, and will create a \"name\" field with a type <span class=\"code\">FloatPointField</span>. All data after this record will be\nexpected to be a float.",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "Well, that's not going to work. We have titles like <span class=\"ff4\">A Mighty Wind</span> and <span class=\"ff4\">Chicken Run</span>, which are strings -\ndecidedly not numeric and not floats. If we let Solr guess the \"name\" field is a float, what will happen is later\ntitles will cause an error and indexing will fail. That’s not going to get us very far.",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "What we can do is set up the \"name\" field in Solr before we index the data to be sure Solr always interprets\nit as a string. At the command line, enter this curl command:",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\"add-field\": {\"name\":\"name\",\n\"type\":\"text_general\", \"multiValued\":false, \"stored\":true}}'\nhttp://localhost:8983/solr/films/schema",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "This command uses the Schema API to explicitly define a field named \"name\" that has the field type\n\"text_general\" (a text field). It will not be permitted to have multiple values, but it will be stored (meaning it\ncan be retrieved by queries).",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "You can also use the Admin UI to create fields, but it offers a bit less control over the properties of your field.\nIt will work for our case, though:",
    "hierarchy": [
      "Create the \"names\" Field"
    ],
    "pageId": 30
  },
  {
    "content": "There's one more change to make before we start indexing.",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "In the first exercise when we queried the documents we had indexed, we didn't have to specify a field to\nsearch because the configuration we used was set up to copy fields into a <span class=\"ff4 fs2\">text</span> field, and that field was the\ndefault when no other field was defined in the query.",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "The configuration we're using now doesn’t have that rule. We would need to define a field to search for\nevery query. We can, however, set up a \"catchall field\" by defining a copy field that will take all data from all\nfields and index it into a field named <span class=\"ff4 fs2\">_text_</span>. Let’s do that now.",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "You can use either the Admin UI or the Schema API for this.",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "At the command line, use the Schema API again to define a copy field:",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\"add-copy-field\" :\n{\"source\":\"*\",\"dest\":\"_text_\"}}' http://localhost:8983/solr/films/schema",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "In the Admin UI, choose <span class=\"ff2\">[<span class=\"ff5\"> </span>Add Copy Field<span class=\"ff5\"> </span>]</span>, then fill out the source and destination for your field, as in this\nscreenshot.",
    "hierarchy": [
      "Create a \"catchall\" Copy Field"
    ],
    "pageId": 31
  },
  {
    "content": "What this does is make a copy of all fields and put the data into the \"_text_\" field.",
    "hierarchy": [
    ],
    "pageId": 32
  },
  {
    "content": "It can be very expensive to do this with your production data because it tells Solr to\neffectively index everything twice. It will make indexing slower, and make your index larger.\nWith your production data, you will want to be sure you only copy fields that really warrant\nit for your application.",
    "hierarchy": [
    ],
    "pageId": 32
  },
  {
    "content": "OK, now we're ready to index the data and start playing around with it.",
    "hierarchy": [
    ],
    "pageId": 32
  },
  {
    "content": "The films data we will index is located in the <span class=\"ff5 fs3\">example/films</span> directory of your installation. It comes in three\nformats: JSON, XML and CSV. Pick one of the formats and index it into the \"films\" collection (in each\nexample, one command is for Unix/MacOS and the other is for Windows):",
    "hierarchy": [
      "Index Sample Film Data"
    ],
    "pageId": 32
  },
  {
    "content": "bin/post -c films example/films/films.json",
    "hierarchy": [
      "Index Sample Film Data"
    ],
    "pageId": 32
  },
  {
    "content": "C:\\solr-7.3.0> java -jar -Dc=films -Dauto example\\exampledocs\\post.jar example\\films\\*.json",
    "hierarchy": [
      "Index Sample Film Data"
    ],
    "pageId": 32
  },
  {
    "content": "bin/post -c films example/films/films.xml",
    "hierarchy": [
      "Index Sample Film Data"
    ],
    "pageId": 32
  },
  {
    "content": "C:\\solr-7.3.0> java -jar -Dc=films -Dauto example\\exampledocs\\post.jar example\\films\\*.xml",
    "hierarchy": [
      "Index Sample Film Data"
    ],
    "pageId": 32
  },
  {
    "content": "bin/post -c films example/films/films.csv -params\n\"f.genre.split=true&f.directed_by.split=true&f.genre.separator=|&f.directed_by.separator=|\"",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "C:\\solr-7.3.0> java -jar -Dc=films\n-Dparams=f.genre.split=true&f.directed_by.split=true&f.genre.separator=|&f.directed_by.separator=\n| -Dauto example\\exampledocs\\post.jar example\\films\\*.csv",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "Each command includes these main parameters:",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "-c films: this is the Solr collection to index data to.",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "example/films/films.json (or <span class=\"ff2 fs1\">films.xml</span> or <span class=\"ff2 fs1\">films.csv</span>): this is the path to the data file to index. You\ncould simply supply the directory where this file resides, but since you know the format you want to\nindex, specifying the exact file for that format is more efficient.",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "Note the CSV command includes extra parameters. This is to ensure multi-valued entries in the \"genre\" and\n\"directed_by\" columns are split by the pipe (<span class=\"ff2 fs1\">|</span>) character, used in this file as a separator. Telling Solr to split\nthese columns this way will ensure proper indexing of the data.",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "Each command will produce output similar to the below seen while indexing JSON:",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "$ ./bin/post -c films example/films/films.json\n/bin/java -classpath /solr-7.3.0/dist/solr-core-7.3.0.jar -Dauto=yes -Dc=films -Ddata=files\norg.apache.solr.util.SimplePostTool example/films/films.json\nSimplePostTool version 5.0.0\nPosting files to [base] url http://localhost:8983/solr/films/update...\nEntering auto mode. File endings considered are\nxml,json,jsonl,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log\nPOSTing file films.json (application/json) to [base]/json/docs\n1 files indexed.\nCOMMITting Solr index changes to http://localhost:8983/solr/films/update...\nTime spent: 0:00:00.878",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "Hooray!",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "If you go to the Query screen in the Admin UI for films (<span class=\"link\">http://localhost:8983/solr/#/films/query</span>) and hit\n[<span class=\"ff5\"> </span>Execute Query<span class=\"ff5\"> </span>]<span class=\"code\"> you should see 1100 results, with the first 10 returned to the screen.</span>",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "Let's do a query to see if the \"catchall\" field worked properly. Enter \"comedy\" in the <span class=\"ff2 fs1\">q</span> box and hit <span class=\"ff4\">[<span class=\"ff5\"> </span>Execute</span>\nQuery<span class=\"ff5\"> </span>]<span class=\"code\"> again. You should see get 417 results. Feel free to play around with other searches before we move</span>\non to faceting.",
    "hierarchy": [
    ],
    "pageId": 33
  },
  {
    "content": "One of Solr's most popular features is faceting. Faceting allows the search results to be arranged into\nsubsets (or buckets, or categories), providing a count for each subset. There are several types of faceting:\nfield values, numeric and date ranges, pivots (decision tree), and arbitrary query faceting.",
    "hierarchy": [
      "Faceting"
    ],
    "pageId": 33
  },
  {
    "content": "In addition to providing search results, a Solr query can return the number of documents that contain each\nunique value in the whole result set.",
    "hierarchy": [
      "Field Facets"
    ],
    "pageId": 34
  },
  {
    "content": "On the Admin UI Query tab, if you check the <span class=\"code\">facet</span> checkbox, you'll see a few facet-related options appear:",
    "hierarchy": [
      "Field Facets"
    ],
    "pageId": 34
  },
  {
    "content": "To see facet counts from all documents (<span class=\"code\">q=*:*</span>): turn on faceting (<span class=\"code\">facet=true</span>), and specify the field to facet\non via the <span class=\"code\">facet.field</span> param. If you only want facets, and no document contents, specify <span class=\"code\">rows=0</span>. The <span class=\"code\">curl</span>\ncommand below will return facet counts for the <span class=\"code\">genre_str</span> field:",
    "hierarchy": [
      "Field Facets"
    ],
    "pageId": 34
  },
  {
    "content": "curl \"http://localhost:8983/solr/films/select?q=*:*&rows=0&facet=true&facet.field=genre_str\"",
    "hierarchy": [
      "Field Facets"
    ],
    "pageId": 34
  },
  {
    "content": "In your terminal, you'll see something like:",
    "hierarchy": [
      "Field Facets"
    ],
    "pageId": 34
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">11</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"*:*\"</span>,\nÊ     <span class=\"fc1\">\"facet.field\"</span>:<span class=\"fc4\">\"genre_str\"</span>,\nÊ     <span class=\"fc1\">\"rows\"</span>:<span class=\"fc4\">\"0\"</span>,\nÊ     <span class=\"fc1\">\"facet\"</span>:<span class=\"fc4\">\"true\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">1100</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">1.0</span>,<span class=\"fc1\">\"docs\"</span>:[]\nÊ },\nÊ <span class=\"fc1\">\"facet_counts\"</span>:{\nÊ   <span class=\"fc1\">\"facet_queries\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_fields\"</span>:{\nÊ     <span class=\"fc1\">\"genre_str\"</span>:[\nÊ       <span class=\"fc4\">\"Drama\"</span>,<span class=\"fc3\">552</span>,\nÊ       <span class=\"fc4\">\"Comedy\"</span>,<span class=\"fc3\">389</span>,\nÊ       <span class=\"fc4\">\"Romance Film\"</span>,<span class=\"fc3\">270</span>,\nÊ       <span class=\"fc4\">\"Thriller\"</span>,<span class=\"fc3\">259</span>,\nÊ       <span class=\"fc4\">\"Action Film\"</span>,<span class=\"fc3\">196</span>,\nÊ       <span class=\"fc4\">\"Crime Fiction\"</span>,<span class=\"fc3\">170</span>,\nÊ       <span class=\"fc4\">\"World cinema\"</span>,<span class=\"fc3\">167</span>]},\nÊ       <span class=\"fc1\">\"facet_ranges\"</span>:{},\nÊ       <span class=\"fc1\">\"facet_intervals\"</span>:{},\nÊ       <span class=\"fc1\">\"facet_heatmaps\"</span>:{}}}",
    "hierarchy": [
    ],
    "pageId": 35
  },
  {
    "content": "We've truncated the output here a little bit, but in the <span class=\"ff1 fs1\">facet_counts</span> section, you see by default you get a\ncount of the number of documents using each genre for every genre in the index. Solr has a parameter\nfacet.mincount<span class=\"ff2 fs0\"> that you could use to limit the facets to only those that contain a certain number of</span>\ndocuments (this parameter is not shown in the UI). Or, perhaps you do want all the facets, and you’ll let your\napplication’s front-end control how it’s displayed to users.",
    "hierarchy": [
    ],
    "pageId": 35
  },
  {
    "content": "If you wanted to control the number of items in a bucket, you could do something like this:",
    "hierarchy": [
    ],
    "pageId": 35
  },
  {
    "content": "curl\n\"http://localhost:8983/solr/films/select?=&q=*:*&facet.field=genre_str&facet.mincount=200&fa\ncet=on&rows=0\"",
    "hierarchy": [
    ],
    "pageId": 35
  },
  {
    "content": "You should only see 4 facets returned.",
    "hierarchy": [
    ],
    "pageId": 35
  },
  {
    "content": "There are a great deal of other parameters available to help you control how Solr constructs the facets and\nfacet lists. We'll cover some of them in this exercise, but you can also see the section <span class=\"link\">Faceting</span> for more\ndetail.",
    "hierarchy": [
    ],
    "pageId": 35
  },
  {
    "content": "For numerics or dates, it's often desirable to partition the facet counts into ranges rather than discrete\nvalues. A prime example of numeric range faceting, using the example techproducts data from our previous\nexercise, is <span class=\"ff1 fs1\">price</span>. In the <span class=\"ff1 fs1\">/browse</span> UI, it looks like this:",
    "hierarchy": [
      "Range Facets"
    ],
    "pageId": 35
  },
  {
    "content": "The films data includes the release date for films, and we could use that to create date range facets, which\nare another common use for range facets.",
    "hierarchy": [
    ],
    "pageId": 36
  },
  {
    "content": "The Solr Admin UI doesn't yet support range facet options, so you will need to use curl or similar command\nline tool for the following examples.",
    "hierarchy": [
    ],
    "pageId": 36
  },
  {
    "content": "If we construct a query that looks like this:",
    "hierarchy": [
    ],
    "pageId": 36
  },
  {
    "content": "curl 'http://localhost:8983/solr/films/select?q=*:*&rows=0'\\\nÊ   '&facet=true'\\\nÊ   '&facet.range=initial_release_date'\\\nÊ   '&facet.range.start=NOW-20YEAR'\\\nÊ   '&facet.range.end=NOW'\\\nÊ   '&facet.range.gap=%2B1YEAR'",
    "hierarchy": [
    ],
    "pageId": 36
  },
  {
    "content": "This will request all films and ask for them to be grouped by year starting with 20 years ago (our earliest\nrelease date is in 2000) and ending today. Note that this query again URL encodes a <span class=\"code\">+</span> as <span class=\"code\">%2B</span>.",
    "hierarchy": [
    ],
    "pageId": 36
  },
  {
    "content": "In the terminal you will see:",
    "hierarchy": [
    ],
    "pageId": 36
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">8</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"facet.range\"</span>:<span class=\"fc4\">\"initial_release_date\"</span>,\nÊ     <span class=\"fc1\">\"facet.limit\"</span>:<span class=\"fc4\">\"300\"</span>,\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"*:*\"</span>,\nÊ     <span class=\"fc1\">\"facet.range.gap\"</span>:<span class=\"fc4\">\"+1YEAR\"</span>,\nÊ     <span class=\"fc1\">\"rows\"</span>:<span class=\"fc4\">\"0\"</span>,\nÊ     <span class=\"fc1\">\"facet\"</span>:<span class=\"fc4\">\"on\"</span>,\nÊ     <span class=\"fc1\">\"facet.range.start\"</span>:<span class=\"fc4\">\"NOW-20YEAR\"</span>,\nÊ     <span class=\"fc1\">\"facet.range.end\"</span>:<span class=\"fc4\">\"NOW\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">1100</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">1.0</span>,<span class=\"fc1\">\"docs\"</span>:[]\nÊ },\nÊ <span class=\"fc1\">\"facet_counts\"</span>:{\nÊ   <span class=\"fc1\">\"facet_queries\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_fields\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_ranges\"</span>:{\nÊ     <span class=\"fc1\">\"initial_release_date\"</span>:{\nÊ       <span class=\"fc1\">\"counts\"</span>:[\nÊ         <span class=\"fc4\">\"1997-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc4\">\"1998-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc4\">\"1999-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">48</span>,\nÊ         <span class=\"fc4\">\"2000-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">82</span>,\nÊ         <span class=\"fc4\">\"2001-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">103</span>,\nÊ         <span class=\"fc4\">\"2002-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">131</span>,\nÊ         <span class=\"fc4\">\"2003-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">137</span>,\nÊ         <span class=\"fc4\">\"2004-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">163</span>,\nÊ         <span class=\"fc4\">\"2005-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">189</span>,\nÊ         <span class=\"fc4\">\"2006-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">92</span>,\nÊ         <span class=\"fc4\">\"2007-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">26</span>,\nÊ         <span class=\"fc4\">\"2008-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">7</span>,\nÊ         <span class=\"fc4\">\"2009-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">3</span>,\nÊ         <span class=\"fc4\">\"2010-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc4\">\"2011-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc4\">\"2012-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">1</span>,\nÊ         <span class=\"fc4\">\"2013-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">1</span>,\nÊ         <span class=\"fc4\">\"2014-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">1</span>,\nÊ         <span class=\"fc4\">\"2015-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc4\">\"2016-07-28T17:12:06.919Z\"</span>,<span class=\"fc3\">0</span>],\nÊ       <span class=\"fc1\">\"gap\"</span>:<span class=\"fc4\">\"+1YEAR\"</span>,\nÊ       <span class=\"fc1\">\"start\"</span>:<span class=\"fc4\">\"1997-07-28T17:12:06.919Z\"</span>,\nÊ       <span class=\"fc1\">\"end\"</span>:<span class=\"fc4\">\"2017-07-28T17:12:06.919Z\"</span>}},\nÊ   <span class=\"fc1\">\"facet_intervals\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_heatmaps\"</span>:{}}}",
    "hierarchy": [
    ],
    "pageId": 37
  },
  {
    "content": "Another faceting type is pivot facets, also known as \"decision trees\", allowing two or more fields to be",
    "hierarchy": [
      "Pivot Facets"
    ],
    "pageId": 37
  },
  {
    "content": "nested for all the various possible combinations. Using the films data, pivot facets can be used to see how\nmany of the films in the \"Drama\" category (the <span class=\"ff2 fs1\">genre_str</span> field) are directed by a director. Here's how to get\nat the raw data for this scenario:",
    "hierarchy": [
    ],
    "pageId": 38
  },
  {
    "content": "curl\n\"http://localhost:8983/solr/films/select?q=*:*&rows=0&facet=on&facet.pivot=genre_str,directe\nd_by_str\"",
    "hierarchy": [
    ],
    "pageId": 38
  },
  {
    "content": "This results in the following response, which shows a facet for each category and director combination:",
    "hierarchy": [
    ],
    "pageId": 38
  },
  {
    "content": "{<span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">1147</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"*:*\"</span>,\nÊ     <span class=\"fc1\">\"facet.pivot\"</span>:<span class=\"fc4\">\"genre_str,directed_by_str\"</span>,\nÊ     <span class=\"fc1\">\"rows\"</span>:<span class=\"fc4\">\"0\"</span>,\nÊ     <span class=\"fc1\">\"facet\"</span>:<span class=\"fc4\">\"on\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">1100</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">1.0</span>,<span class=\"fc1\">\"docs\"</span>:[]\nÊ },\nÊ <span class=\"fc1\">\"facet_counts\"</span>:{\nÊ   <span class=\"fc1\">\"facet_queries\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_fields\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_ranges\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_intervals\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_heatmaps\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_pivot\"</span>:{\nÊ     <span class=\"fc1\">\"genre_str,directed_by_str\"</span>:[{\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc4\">\"genre_str\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>:<span class=\"fc4\">\"Drama\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">552</span>,\nÊ         <span class=\"fc1\">\"pivot\"</span>:[{\nÊ             <span class=\"fc1\">\"field\"</span>:<span class=\"fc4\">\"directed_by_str\"</span>,\nÊ             <span class=\"fc1\">\"value\"</span>:<span class=\"fc4\">\"Ridley Scott\"</span>,\nÊ             <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">5</span>},\nÊ           {\nÊ             <span class=\"fc1\">\"field\"</span>:<span class=\"fc4\">\"directed_by_str\"</span>,\nÊ             <span class=\"fc1\">\"value\"</span>:<span class=\"fc4\">\"Steven Soderbergh\"</span>,\nÊ             <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">5</span>},\nÊ           {\nÊ             <span class=\"fc1\">\"field\"</span>:<span class=\"fc4\">\"directed_by_str\"</span>,\nÊ             <span class=\"fc1\">\"value\"</span>:<span class=\"fc4\">\"Michael Winterbottom\"</span>,\nÊ             <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">4</span>}}]}]}}}",
    "hierarchy": [
    ],
    "pageId": 38
  },
  {
    "content": "We've truncated this output as well - you will see a lot of genres and directors in your screen.",
    "hierarchy": [
    ],
    "pageId": 38
  },
  {
    "content": "In this exercise, we learned a little bit more about how Solr organizes data in the indexes, and how to work\nwith the Schema API to manipulate the schema file. We also learned a bit about facets in Solr, including",
    "hierarchy": [
      "Exercise 2 Wrap Up"
    ],
    "pageId": 38
  },
  {
    "content": "range facets and pivot facets. In both of these things, we've only scratched the surface of the available\noptions. If you can dream it, it might be possible!",
    "hierarchy": [
    ],
    "pageId": 39
  },
  {
    "content": "Like our previous exercise, this data may not be relevant to your needs. We can clean up our work by\ndeleting the collection. To do that, issue this command at the command line:",
    "hierarchy": [
    ],
    "pageId": 39
  },
  {
    "content": "bin/solr delete -c films",
    "hierarchy": [
    ],
    "pageId": 39
  },
  {
    "content": "For this last exercise, work with a dataset of your choice. This can be files on your local hard drive, a set of\ndata you have worked with before, or maybe a sample of the data you intend to index to Solr for your\nproduction application.",
    "hierarchy": [
      "Exercise 3: Index Your Own Data"
    ],
    "pageId": 39
  },
  {
    "content": "This exercise is intended to get you thinking about what you will need to do for your application:",
    "hierarchy": [
      "Exercise 3: Index Your Own Data"
    ],
    "pageId": 39
  },
  {
    "content": "What sorts of data do you need to index?",
    "hierarchy": [
      "Exercise 3: Index Your Own Data"
    ],
    "pageId": 39
  },
  {
    "content": "What will you need to do to prepare Solr for your data (such as, create specific fields, set up copy fields,\ndetermine analysis rules, etc.)",
    "hierarchy": [
      "Exercise 3: Index Your Own Data"
    ],
    "pageId": 39
  },
  {
    "content": "What kinds of search options do you want to provide to users?",
    "hierarchy": [
      "Exercise 3: Index Your Own Data"
    ],
    "pageId": 39
  },
  {
    "content": "How much testing will you need to do to ensure everything works the way you expect?",
    "hierarchy": [
      "Exercise 3: Index Your Own Data"
    ],
    "pageId": 39
  },
  {
    "content": "Before you get started, create a new collection, named whatever you'd like. In this example, the collection\nwill be named \"localDocs\"; replace that name with whatever name you choose if you want to.",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Create Your Own Collection"
    ],
    "pageId": 39
  },
  {
    "content": "./bin/solr create -c localDocs -s 2 -rf 2",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Create Your Own Collection"
    ],
    "pageId": 39
  },
  {
    "content": "Again, as we saw from Exercise 2 above, this will use the <span class=\"ff2 fs1\">_default</span> configSet and all the schemaless features\nit provides. As we noted previously, this may cause problems when we index our data. You may need to\niterate on indexing a few times before you get the schema right.",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Create Your Own Collection"
    ],
    "pageId": 39
  },
  {
    "content": "Solr has lots of ways to index data. Choose one of the approaches below and try it out with your system:",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Indexing Ideas"
    ],
    "pageId": 39
  },
  {
    "content": "Local Files with bin/post\nIf you have a local directory of files, the Post Tool (<span class=\"ff2 fs1\">bin/post</span>) can index a directory of files. We saw this in\naction in our first exercise.",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Indexing Ideas"
    ],
    "pageId": 39
  },
  {
    "content": "We used only JSON, XML and CSV in our exercises, but the Post Tool can also handle HTML, PDF, Microsoft\nOffice formats (such as MS Word), plain text, and more.",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Indexing Ideas"
    ],
    "pageId": 39
  },
  {
    "content": "In this example, assume there is a directory named \"Documents\" locally. To index it, we would issue a\ncommand like this (correcting the collection name after the <span class=\"ff2 fs1\">-c</span> parameter as needed):",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Indexing Ideas"
    ],
    "pageId": 39
  },
  {
    "content": "./bin/post -c localDocs ~/Documents",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Indexing Ideas"
    ],
    "pageId": 39
  },
  {
    "content": "You may get errors as it works through your documents. These might be caused by the field guessing, or\nthe file type may not be supported. Indexing content such as this demonstrates the need to plan Solr for",
    "hierarchy": [
      "Exercise 3: Index Your Own Data",
      "Indexing Ideas"
    ],
    "pageId": 39
  },
  {
    "content": "your data, which requires understanding it and perhaps also some trial and error.",
    "hierarchy": [
    ],
    "pageId": 40
  },
  {
    "content": "DataImportHandler\nSolr includes a tool called the <span class=\"link\">Data Import Handler (DIH)</span> which can connect to databases (if you have a\njdbc driver), mail servers, or other structured data sources. There are several examples included for\nfeeds, GMail, and a small HSQL database.",
    "hierarchy": [
    ],
    "pageId": 40
  },
  {
    "content": "The <span class=\"code\">README.txt</span> file in <span class=\"code\">example/example-DIH</span> will give you details on how to start working with this tool.",
    "hierarchy": [
    ],
    "pageId": 40
  },
  {
    "content": "SolrJ\nSolrJ is a Java-based client for interacting with Solr. Use <span class=\"link\">SolrJ</span> for JVM-based languages or other <span class=\"link\">Solr clients</span>\nto programmatically create documents to send to Solr.",
    "hierarchy": [
    ],
    "pageId": 40
  },
  {
    "content": "Documents Screen\nUse the Admin UI <span class=\"link\">Documents tab</span> (at <span class=\"link\">http://localhost:8983/solr/#/localDocs/documents</span>) to paste in a\ndocument to be indexed, or select <span class=\"code\">Document Builder</span> from the <span class=\"code\">Document Type</span> dropdown to build a\ndocument one field at a time. Click on the <span class=\"ff2\">[<span class=\"ff4\"> </span>Submit Document<span class=\"ff4\"> </span>]</span> button below the form to index your\ndocument.",
    "hierarchy": [
    ],
    "pageId": 40
  },
  {
    "content": "You may notice that even if you index content in this tutorial more than once, it does not duplicate the\nresults found. This is because the example Solr schema (a file named either <span class=\"code\">managed-schema</span> or <span class=\"code\">schema.xml</span>)\nspecifies a <span class=\"code\">uniqueKey</span> field called <span class=\"code\">id</span>. Whenever you POST commands to Solr to add a document with the\nsame value for the <span class=\"code\">uniqueKey</span> as an existing document, it automatically replaces it for you.",
    "hierarchy": [
      "Updating Data"
    ],
    "pageId": 40
  },
  {
    "content": "You can see that that has happened by looking at the values for <span class=\"code\">numDocs</span> and <span class=\"code\">maxDoc</span> in the core-specific\nOverview section of the Solr Admin UI.",
    "hierarchy": [
      "Updating Data"
    ],
    "pageId": 40
  },
  {
    "content": "numDocs<span class=\"ff1 fs0\"> represents the number of searchable documents in the index (and will be larger than the number</span>\nof XML, JSON, or CSV files since some files contained more than one document). The <span class=\"code\">maxDoc</span> value may be\nlarger as the <span class=\"code\">maxDoc</span> count includes logically deleted documents that have not yet been physically removed\nfrom the index. You can re-post the sample files over and over again as much as you want and <span class=\"code\">numDocs</span> will\nnever increase, because the new documents will constantly be replacing the old.",
    "hierarchy": [
      "Updating Data"
    ],
    "pageId": 40
  },
  {
    "content": "Go ahead and edit any of the existing example data files, change some of the data, and re-run the PostTool\n(<span class=\"code\">bin/post</span>). You'll see your changes reflected in subsequent searches.",
    "hierarchy": [
      "Updating Data"
    ],
    "pageId": 40
  },
  {
    "content": "If you need to iterate a few times to get your schema right, you may want to delete documents to clear out\nthe collection and try again. Note, however, that merely removing documents doesn't change the\nunderlying field definitions. Essentially, this will allow you to reindex your data after making changes to\nfields for your needs.",
    "hierarchy": [
      "Deleting Data"
    ],
    "pageId": 40
  },
  {
    "content": "You can delete data by POSTing a delete command to the update URL and specifying the value of the\ndocument's unique key field, or a query that matches multiple documents (be careful with that one!). We\ncan use <span class=\"code\">bin/post</span> to delete documents also if we structure the request properly.",
    "hierarchy": [
      "Deleting Data"
    ],
    "pageId": 40
  },
  {
    "content": "Execute the following command to delete a specific document:",
    "hierarchy": [
      "Deleting Data"
    ],
    "pageId": 40
  },
  {
    "content": "bin/post -c localDocs -d \"<delete><id>SP2514N</id></delete>\"",
    "hierarchy": [
    ],
    "pageId": 41
  },
  {
    "content": "To delete all documents, you can use \"delete-by-query\" command like:",
    "hierarchy": [
    ],
    "pageId": 41
  },
  {
    "content": "bin/post -c localDocs -d \"<delete><query>*:*</query></delete>\"",
    "hierarchy": [
    ],
    "pageId": 41
  },
  {
    "content": "You can also modify the above to only delete documents that match a specific query.",
    "hierarchy": [
    ],
    "pageId": 41
  },
  {
    "content": "At this point, you're ready to start working on your own.",
    "hierarchy": [
      "Exercise 3 Wrap Up"
    ],
    "pageId": 41
  },
  {
    "content": "Jump ahead to the overall <span class=\"link\">wrap up</span> when you're ready to stop Solr and remove all the examples you worked\nwith and start fresh.",
    "hierarchy": [
      "Exercise 3 Wrap Up"
    ],
    "pageId": 41
  },
  {
    "content": "Solr has sophisticated geospatial support, including searching within a specified distance range of a given\nlocation (or within a bounding box), sorting by distance, or even boosting results by the distance.",
    "hierarchy": [
      "Spatial Queries"
    ],
    "pageId": 41
  },
  {
    "content": "Some of the example techproducts documents we indexed in Exercise 1 have locations associated with them\nto illustrate the spatial capabilities. To re-index this data, see <span class=\"link\">Exercise 1</span>.",
    "hierarchy": [
      "Spatial Queries"
    ],
    "pageId": 41
  },
  {
    "content": "Spatial queries can be combined with any other types of queries, such as in this example of querying for\n\"ipod\" within 10 kilometers from San Francisco:",
    "hierarchy": [
      "Spatial Queries"
    ],
    "pageId": 41
  },
  {
    "content": "This is from Solr's example search UI (called <span class=\"ff1 fs0\">/browse</span>), which has a nice feature to show a map for each item\nand allow easy selection of the location to search near. You can see this yourself by going to\nhttp://localhost:8983/solr/techproducts/browse?q=ipod&pt=37.7752%2C-122.4232&d=10&sfield=store&\nfq=%7B%21bbox%7D&queryOpts=spatial&queryOpts=spatial<span class=\"fc0\"> in a browser.</span>",
    "hierarchy": [
      "Spatial Queries"
    ],
    "pageId": 41
  },
  {
    "content": "To learn more about Solr's spatial capabilities, see the section <span class=\"link\">Spatial Search</span>.",
    "hierarchy": [
      "Spatial Queries"
    ],
    "pageId": 41
  },
  {
    "content": "If you've run the full set of commands in this quick start guide you have done the following:",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "Launched Solr into SolrCloud mode, two nodes, two collections including shards and replicas",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "Indexed several types of files",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "Used the Schema API to modify your schema",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "Opened the admin console, used its query interface to get results",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "Opened the /browse interface to explore Solr's features in a more friendly and familiar interface",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "Nice work!",
    "hierarchy": [
      "Wrapping Up"
    ],
    "pageId": 42
  },
  {
    "content": "As you work through this tutorial, you may want to stop Solr and reset the environment back to the starting\npoint. The following command line will stop Solr and remove the directories for each of the two nodes that\nwere created all the way back in Exercise 1:",
    "hierarchy": [
      "Cleanup"
    ],
    "pageId": 42
  },
  {
    "content": "bin/solr stop -all ; rm -Rf example/cloud/",
    "hierarchy": [
      "Cleanup"
    ],
    "pageId": 42
  },
  {
    "content": "This Guide will be your best resource for learning more about Solr.",
    "hierarchy": [
      "Where to next?"
    ],
    "pageId": 42
  },
  {
    "content": "Solr also has a robust community made up of people happy to help you get started. For more information,\ncheck out the Solr website's <span class=\"link\">Resources page</span>.",
    "hierarchy": [
      "Where to next?"
    ],
    "pageId": 42
  },
  {
    "content": "Solr is a search server built on top of Apache Lucene, an open source, Java-based, information retrieval\nlibrary. It is designed to drive powerful document retrieval applications - wherever you need to serve data to\nusers based on their queries, Solr can work for you.",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "Here is a example of how Solr could integrate with an application:",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "In the scenario above, Solr runs alongside other server applications. For example, an online store application\nwould provide a user interface, a shopping cart, and a way to make purchases for end users; while an\ninventory management application would allow store employees to edit product information. The product\nmetadata would be kept in some kind of database, as well as in Solr.",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "Solr makes it easy to add the capability to search through the online store through the following steps:",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "1.Define a <span class=\"code\">schema</span>. The schema tells Solr about the contents of documents it will be indexing. In the online\nstore example, the schema would define fields for the product name, description, price, manufacturer,\nand so on. Solr's schema is powerful and flexible and allows you to tailor Solr’s behavior to your\napplication. See <span class=\"link\">Documents, Fields, and Schema Design</span> for all the details.",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "2.Feed Solr documents for which your users will search.\n3.Expose search functionality in your application.",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "Because Solr is based on open standards, it is highly extensible. Solr queries are simple HTTP request URLs\nand the response is a structured document: mainly JSON, but it could also be XML, CSV, or other formats.\nThis means that a wide variety of clients will be able to use Solr, from other web applications to browser\nclients, rich client applications, and mobile devices. Any platform capable of HTTP can talk to Solr. See <span class=\"link\">Client</span>\nAPIs<span class=\"fc1\"> for details on client APIs.</span>",
    "hierarchy": [
      "A Quick Overview"
    ],
    "pageId": 43
  },
  {
    "content": "Solr offers support for the simplest keyword searching through to complex queries on multiple fields and\nfaceted search results. <span class=\"link\">Searching</span> has more information about searching and queries.",
    "hierarchy": [
    ],
    "pageId": 44
  },
  {
    "content": "If Solr's capabilities are not impressive enough, its ability to handle very high-volume applications should do\nthe trick.",
    "hierarchy": [
    ],
    "pageId": 44
  },
  {
    "content": "A relatively common scenario is that you have so much data, or so many queries, that a single Solr server is\nunable to handle your entire workload. In this case, you can scale up the capabilities of your application\nusing <span class=\"link\">SolrCloud</span> to better distribute the data, and the processing of requests, across many servers. Multiple\noptions can be mixed and matched depending on the scalability you need.",
    "hierarchy": [
    ],
    "pageId": 44
  },
  {
    "content": "For example: \"Sharding\" is a scaling technique in which a collection is split into multiple logical pieces called\n\"shards\" in order to scale up the number of documents in a collection beyond what could physically fit on a\nsingle server. Incoming queries are distributed to every shard in the collection, which respond with merged\nresults. Another technique available is to increase the \"Replication Factor\" of your collection, which allows\nyou to add servers with additional copies of your collection to handle higher concurrent query load by\nspreading the requests around to multiple machines. Sharding and replication are not mutually exclusive,\nand together make Solr an extremely powerful and scalable platform.",
    "hierarchy": [
    ],
    "pageId": 44
  },
  {
    "content": "Best of all, this talk about high-volume applications is not just hypothetical: some of the famous Internet\nsites that use Solr today are Macy's, EBay, and Zappo’s. For more examples, take a look at\nhttps://wiki.apache.org/solr/PublicServers<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 44
  },
  {
    "content": "You can install Solr in any system where a suitable Java Runtime Environment (JRE) is available, as detailed\nbelow.",
    "hierarchy": [
      "Solr System Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "Currently this includes Linux, MacOS/OS X, and Microsoft Windows.",
    "hierarchy": [
      "Solr System Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "You will need the Java Runtime Environment (JRE) version 1.8 or higher. At a command line, check your Java\nversion like this:",
    "hierarchy": [
      "Solr System Requirements",
      "Installation Requirements",
      "Java Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "$ java -version\njava version \"1.8.0_60\"\nJava(TM) SE Runtime Environment (build 1.8.0_60-b27)\nJava HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)",
    "hierarchy": [
      "Solr System Requirements",
      "Installation Requirements",
      "Java Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "The exact output will vary, but you need to make sure you meet the minimum version requirement. We also\nrecommend choosing a version that is not end-of-life from its vendor. Oracle or OpenJDK are the most\ntested JREs and are recommended. It's also recommended to use the latest available official release when\npossible.",
    "hierarchy": [
      "Solr System Requirements",
      "Installation Requirements",
      "Java Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "Some versions of Java VM have bugs that may impact your implementation. To be sure, check the page\nLucene JavaBugs<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Solr System Requirements",
      "Installation Requirements",
      "Java Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "If you don't have the required version, or if the <span class=\"code\">java</span> command is not found, download and install the latest\nversion from Oracle at <span class=\"link\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</span>.",
    "hierarchy": [
      "Solr System Requirements",
      "Installation Requirements",
      "Java Requirements"
    ],
    "pageId": 45
  },
  {
    "content": "Solr is tested on several versions of Linux, MacOS, and Windows.",
    "hierarchy": [
      "Solr System Requirements",
      "Installation Requirements",
      "Supported Operating Systems"
    ],
    "pageId": 45
  },
  {
    "content": "Installation of Solr on Unix-compatible or Windows servers generally requires simply extracting (or,\nunzipping) the download package.",
    "hierarchy": [
      "Installing Solr"
    ],
    "pageId": 46
  },
  {
    "content": "Please be sure to review the <span class=\"link\">Solr System Requirements</span> before starting Solr.",
    "hierarchy": [
      "Installing Solr"
    ],
    "pageId": 46
  },
  {
    "content": "Solr is available from the Solr website. Download the latest release <span class=\"link\">https://lucene.apache.org/solr/mirrors-</span>\nsolr-latest-redir.html<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Installing Solr",
      "Available Solr Packages"
    ],
    "pageId": 46
  },
  {
    "content": "There are three separate packages:",
    "hierarchy": [
      "Installing Solr",
      "Available Solr Packages"
    ],
    "pageId": 46
  },
  {
    "content": "solr-7.3.0.tgz for Linux/Unix/OSX systems",
    "hierarchy": [
      "Installing Solr",
      "Available Solr Packages"
    ],
    "pageId": 46
  },
  {
    "content": "solr-7.3.0.zip for Microsoft Windows systems",
    "hierarchy": [
      "Installing Solr",
      "Available Solr Packages"
    ],
    "pageId": 46
  },
  {
    "content": "solr-7.3.0-src.tgz the package Solr source code. This is useful if you want to develop on Solr without\nusing the official Git repository.",
    "hierarchy": [
      "Installing Solr",
      "Available Solr Packages"
    ],
    "pageId": 46
  },
  {
    "content": "When getting started with Solr, all you need to do is extract the Solr distribution archive to a directory of\nyour choosing. This will suffice as an initial development environment, but take care not to overtax this \"toy\"\ninstallation before setting up your true development and production environments.",
    "hierarchy": [
      "Installing Solr",
      "Preparing for Installation"
    ],
    "pageId": 46
  },
  {
    "content": "When you've progressed past initial evaluation of Solr, you’ll want to take care to plan your implementation.\nYou may need to reinstall Solr on another server or make a clustered SolrCloud environment.",
    "hierarchy": [
      "Installing Solr",
      "Preparing for Installation"
    ],
    "pageId": 46
  },
  {
    "content": "When you're ready to setup Solr for a production environment, please refer to the instructions provided on\nthe <span class=\"link\">Taking Solr to Production</span> page.",
    "hierarchy": [
      "Installing Solr",
      "Preparing for Installation"
    ],
    "pageId": 46
  },
  {
    "content": "How to size your Solr installation is a complex question that relies on a number of factors,\nincluding the number and structure of documents, how many fields you intend to store, the\nnumber of users, etc.",
    "hierarchy": [
      "Installing Solr",
      "Preparing for Installation"
    ],
    "pageId": 46
  },
  {
    "content": "It's highly recommended that you spend a bit of time thinking about the factors that will\nimpact hardware sizing for your Solr implementation. A very good blog post that discusses\nthe issues to consider is <span class=\"link\">Sizing Hardware in the Abstract: Why We Don’t have a Definitive</span>\nAnswer<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Installing Solr",
      "Preparing for Installation"
    ],
    "pageId": 46
  },
  {
    "content": "One thing to note when planning your installation is that a hard limit exists in Lucene for the number of\ndocuments in a single index: approximately 2.14 billion documents (2,147,483,647 to be exact). In practice, it\nis highly unlikely that such a large number of documents would fit and perform well in a single index, and\nyou will likely need to distribute your index across a cluster before you ever approach this number. If you\nknow you will exceed this number of documents in total before you've even started indexing, it’s best to\nplan your installation with <span class=\"link\">SolrCloud</span> as part of your design from the start.",
    "hierarchy": [
      "Installing Solr",
      "Preparing for Installation"
    ],
    "pageId": 46
  },
  {
    "content": "To keep things simple for now, extract the Solr distribution archive to your local home directory, for instance\non Linux, do:",
    "hierarchy": [
      "Package Installation"
    ],
    "pageId": 47
  },
  {
    "content": "cd ~/\ntar zxf solr-7.3.0.tgz",
    "hierarchy": [
      "Package Installation"
    ],
    "pageId": 47
  },
  {
    "content": "Once extracted, you are now ready to run Solr using the instructions provided in the <span class=\"link\">Starting Solr</span> section\nbelow.",
    "hierarchy": [
      "Package Installation"
    ],
    "pageId": 47
  },
  {
    "content": "After installing Solr, you'll see the following directories and files within them:",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "bin/\nThis directory includes several important scripts that will make using Solr easier.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "solr and solr.cmd\nThis is <span class=\"link\">Solr's Control Script</span>, also known as <span class=\"code\">bin/solr</span> (*nix) / <span class=\"code\">bin/solr.cmd</span> (Windows). This script is the\npreferred tool to start and stop Solr. You can also create collections or cores, configure authentication,\nand work with configuration files when running in SolrCloud mode.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "post\nThe <span class=\"link\">PostTool</span>, which provides a simple command line interface for POSTing content to Solr.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "solr.in.sh and solr.in.cmd\nThese are property files for *nix and Windows systems, respectively. System-level properties for Java,\nJetty, and Solr are configured here. Many of these settings can be overridden when using <span class=\"code\">bin/solr</span> /\nbin/solr.cmd<span class=\"ff2 fs1\">, but this allows you to set all the properties in one place.</span>",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "install_solr_services.sh\nThis script is used on *nix systems to install Solr as a service. It is described in more detail in the\nsection <span class=\"link\">Taking Solr to Production</span>.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "contrib/\nSolr's <span class=\"code\">contrib</span> directory includes add-on plugins for specialized features of Solr.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "dist/\nThe <span class=\"code\">dist</span> directory contains the main Solr .jar files.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "docs/\nThe <span class=\"code\">docs</span> directory includes a link to online Javadocs for Solr.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "example/\nThe <span class=\"code\">example</span> directory includes several types of examples that demonstrate various Solr capabilities. See\nthe section <span class=\"link\">Solr Examples</span> below for more details on what is in this directory.",
    "hierarchy": [
      "Directory Layout"
    ],
    "pageId": 47
  },
  {
    "content": "licenses/\nThe <span class=\"code\">licenses</span> directory includes all of the licenses for 3rd party libraries used by Solr.",
    "hierarchy": [
    ],
    "pageId": 48
  },
  {
    "content": "server/\nThis directory is where the heart of the Solr application resides. A README in this directory provides a\ndetailed overview, but here are some highlights:",
    "hierarchy": [
    ],
    "pageId": 48
  },
  {
    "content": "Solr's Admin UI (<span class=\"code\">server/solr-webapp</span>)\n•Jetty libraries (<span class=\"code\">server/lib</span>)\n•Log files (<span class=\"code\">server/logs</span>) and log configurations (<span class=\"code\">server/resources</span>). See the section <span class=\"link\">Configuring</span>\nLogging<span class=\"fc0\"> for more details on how to customize Solr’s default logging.</span>\n•Sample configsets (<span class=\"code\">server/solr/configsets</span>)",
    "hierarchy": [
    ],
    "pageId": 48
  },
  {
    "content": "Solr includes a number of example documents and configurations to use when getting started. If you ran\nthrough the <span class=\"link\">Solr Tutorial</span>, you have already interacted with some of these files.",
    "hierarchy": [
      "Solr Examples"
    ],
    "pageId": 48
  },
  {
    "content": "Here are the examples included with Solr:",
    "hierarchy": [
      "Solr Examples"
    ],
    "pageId": 48
  },
  {
    "content": "exampledocs\nThis is a small set of simple CSV, XML, and JSON files that can be used with <span class=\"code\">bin/post</span> when first getting\nstarted with Solr. For more information about using <span class=\"code\">bin/post</span> with these files, see <span class=\"link\">Post Tool</span>.",
    "hierarchy": [
      "Solr Examples"
    ],
    "pageId": 48
  },
  {
    "content": "example-DIH\nThis directory includes a few example DataImport Handler (DIH) configurations to help you get started\nwith importing structured content in a database, an email server, or even an Atom feed. Each example\nwill index a different set of data; see the README there for more details about these examples.",
    "hierarchy": [
      "Solr Examples"
    ],
    "pageId": 48
  },
  {
    "content": "files\nThe <span class=\"code\">files</span> directory provides a basic search UI for documents such as Word or PDF that you may have\nstored locally. See the README there for details on how to use this example.",
    "hierarchy": [
      "Solr Examples"
    ],
    "pageId": 48
  },
  {
    "content": "films\nThe <span class=\"code\">films</span> directory includes a robust set of data about movies in three formats: CSV, XML, and JSON. See\nthe README there for details on how to use this dataset.",
    "hierarchy": [
      "Solr Examples"
    ],
    "pageId": 48
  },
  {
    "content": "Solr includes a command line interface tool called <span class=\"code\">bin/solr</span> (Linux/MacOS) or <span class=\"code\">bin\\solr.cmd</span> (Windows). This\ntool allows you to start and stop Solr, create cores and collections, configure authentication, and check the\nstatus of your system.",
    "hierarchy": [
      "Starting Solr"
    ],
    "pageId": 48
  },
  {
    "content": "To use it to start Solr you can simply enter:",
    "hierarchy": [
      "Starting Solr"
    ],
    "pageId": 48
  },
  {
    "content": "bin/solr start",
    "hierarchy": [
      "Starting Solr"
    ],
    "pageId": 48
  },
  {
    "content": "If you are running Windows, you can start Solr by running <span class=\"ff2 fs1\">bin\\solr.cmd</span> instead.",
    "hierarchy": [
    ],
    "pageId": 49
  },
  {
    "content": "bin\\solr.cmd start",
    "hierarchy": [
    ],
    "pageId": 49
  },
  {
    "content": "This will start Solr in the background, listening on port 8983.",
    "hierarchy": [
    ],
    "pageId": 49
  },
  {
    "content": "When you start Solr in the background, the script will wait to make sure Solr starts correctly before returning\nto the command line prompt.",
    "hierarchy": [
    ],
    "pageId": 49
  },
  {
    "content": "All of the options for the Solr CLI are described in the section <span class=\"link\">Solr Control Script Reference</span>.",
    "hierarchy": [
    ],
    "pageId": 49
  },
  {
    "content": "Solr also provides a number of useful examples to help you learn about key features. You can launch the\nexamples using the <span class=\"ff2 fs1\">-e</span> flag. For instance, to launch the \"techproducts\" example, you would do:",
    "hierarchy": [
      "Start Solr with a Specific Bundled Example"
    ],
    "pageId": 49
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
      "Start Solr with a Specific Bundled Example"
    ],
    "pageId": 49
  },
  {
    "content": "Currently, the available examples you can run are: techproducts, dih, schemaless, and cloud. See the section\nRunning with Example Configurations<span class=\"fc0\"> for details on each example.</span>",
    "hierarchy": [
      "Start Solr with a Specific Bundled Example"
    ],
    "pageId": 49
  },
  {
    "content": "Running the <span class=\"ff2 fs1\">cloud</span> example starts Solr in <span class=\"link\">SolrCloud</span> mode. For more information on\nstarting Solr in cloud mode, see the section <span class=\"link\">Getting Started with SolrCloud</span>.",
    "hierarchy": [
      "Start Solr with a Specific Bundled Example"
    ],
    "pageId": 49
  },
  {
    "content": "If you're not sure if Solr is running locally, you can use the status command:",
    "hierarchy": [
      "Check if Solr is Running"
    ],
    "pageId": 49
  },
  {
    "content": "bin/solr status",
    "hierarchy": [
      "Check if Solr is Running"
    ],
    "pageId": 49
  },
  {
    "content": "This will search for running Solr instances on your computer and then gather basic information about them,\nsuch as the version and memory usage.",
    "hierarchy": [
      "Check if Solr is Running"
    ],
    "pageId": 49
  },
  {
    "content": "That's it! Solr is running. If you need convincing, use a Web browser to see the Admin Console.",
    "hierarchy": [
      "Check if Solr is Running"
    ],
    "pageId": 49
  },
  {
    "content": "http://localhost:8983/solr/",
    "hierarchy": [
      "Check if Solr is Running"
    ],
    "pageId": 49
  },
  {
    "content": "If Solr is not running, your browser will complain that it cannot connect to the server. Check your port\nnumber and try again.",
    "hierarchy": [
    ],
    "pageId": 50
  },
  {
    "content": "If you did not start Solr with an example configuration, you would need to create a core in order to be able\nto index and search. You can do so by running:",
    "hierarchy": [
      "Create a Core"
    ],
    "pageId": 50
  },
  {
    "content": "bin/solr create -c <name>",
    "hierarchy": [
      "Create a Core"
    ],
    "pageId": 50
  },
  {
    "content": "This will create a core that uses a data-driven schema which tries to guess the correct field type when you\nadd documents to the index.",
    "hierarchy": [
      "Create a Core"
    ],
    "pageId": 50
  },
  {
    "content": "To see all available options for creating a new core, execute:",
    "hierarchy": [
      "Create a Core"
    ],
    "pageId": 50
  },
  {
    "content": "bin/solr create -help",
    "hierarchy": [
      "Create a Core"
    ],
    "pageId": 50
  },
  {
    "content": "An important aspect of Solr is that all operations and deployment can be done online, with minimal or no\nimpact to running applications. This includes minor upgrades and provisioning and removing nodes,\nbacking up and restoring indexes and editing configurations",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Common administrative tasks include:",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Solr Control Script Reference<span class=\"fc1\">: This section provides information about all of the options available to the</span>\nbin/solr<span class=\"ff2 fs1\"> / </span>bin\\solr.cmd<span class=\"ff2 fs1\"> scripts, which can start and stop Solr, configure authentication, and create or</span>\nremove collections and cores.",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Solr Configuration Files<span class=\"fc1\">: Overview of the installation layout and major configuration files.</span>",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Taking Solr to Production<span class=\"fc1\">: Detailed steps to help you install Solr as a service and take your application to</span>\nproduction.",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Making and Restoring Backups<span class=\"fc1\">: Describes backup strategies for your Solr indexes.</span>",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Running Solr on HDFS<span class=\"fc1\">: How to use HDFS to store your Solr indexes and transaction logs.</span>",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "SolrCloud on AWS EC2<span class=\"fc1\">: A tutorial on deploying Solr in Amazon Web Services (AWS) using EC2 instances.</span>",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Upgrading a Solr Cluster<span class=\"fc1\">: Information for upgrading a production SolrCloud cluster.</span>",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Solr Upgrade Notes<span class=\"fc1\">: Information about changes made in Solr releases.</span>",
    "hierarchy": [
      "Deployment and Operations"
    ],
    "pageId": 51
  },
  {
    "content": "Solr includes a script known as “bin/solr” that allows you to perform many common operations on your Solr\ninstallation or cluster.",
    "hierarchy": [
      "Solr Control Script Reference"
    ],
    "pageId": 52
  },
  {
    "content": "You can start and stop Solr, create and delete collections or cores, perform operations on ZooKeeper and\ncheck the status of Solr and configured shards.",
    "hierarchy": [
      "Solr Control Script Reference"
    ],
    "pageId": 52
  },
  {
    "content": "You can find the script in the <span class=\"code\">bin/</span> directory of your Solr installation. The <span class=\"code\">bin/solr</span> script makes Solr easier\nto work with by providing simple commands and options to quickly accomplish common goals.",
    "hierarchy": [
      "Solr Control Script Reference"
    ],
    "pageId": 52
  },
  {
    "content": "More examples of <span class=\"code\">bin/solr</span> in use are available throughout the Solr Reference Guide, but particularly in the\nsections <span class=\"link\">Starting Solr</span> and <span class=\"link\">Getting Started with SolrCloud</span>.",
    "hierarchy": [
      "Solr Control Script Reference"
    ],
    "pageId": 52
  },
  {
    "content": "The <span class=\"code\">start</span> command starts Solr. The <span class=\"code\">restart</span> command allows you to restart Solr while it is already running\nor if it has been stopped already.",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "The <span class=\"code\">start</span> and <span class=\"code\">restart</span> commands have several options to allow you to run in SolrCloud mode, use an\nexample configuration set, start with a hostname or port that is not the default and point to a local\nZooKeeper ensemble.",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "bin/solr start [options]",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "bin/solr start -help",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "bin/solr restart [options]",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "bin/solr restart -help",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "When using the <span class=\"code\">restart</span> command, you must pass all of the parameters you initially passed when you\nstarted Solr. Behind the scenes, a stop request is initiated, so Solr will be stopped before being started again.\nIf no nodes are already running, restart will skip the step to stop and proceed to starting Solr.",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart"
    ],
    "pageId": 52
  },
  {
    "content": "The <span class=\"code\">bin/solr</span> script provides many options to allow you to customize the server in common ways, such as\nchanging the listening port. However, most of the defaults are adequate for most Solr installations,\nespecially when just getting started.",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart",
      "Start Parameters"
    ],
    "pageId": 52
  },
  {
    "content": "-a \"<string>\"\nStart Solr with additional JVM parameters, such as those starting with -X. If you are passing JVM\nparameters that begin with \"-D\", you can omit the -a option.",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart",
      "Start Parameters"
    ],
    "pageId": 52
  },
  {
    "content": "Example<span class=\"ff2\">:</span>",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart",
      "Start Parameters"
    ],
    "pageId": 52
  },
  {
    "content": "bin/solr start -a \"-Xdebug -Xrunjdwp:transport=dt_socket, server=y,suspend=n,address=1044\"",
    "hierarchy": [
      "Solr Control Script Reference",
      "Starting and Stopping",
      "Start and Restart",
      "Start Parameters"
    ],
    "pageId": 52
  },
  {
    "content": "-cloud\nStart Solr in SolrCloud mode, which will also launch the embedded ZooKeeper instance included with Solr.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "This option can be shortened to simply <span class=\"ff1 fs0\">-c</span>.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "If you are already running a ZooKeeper ensemble that you want to use instead of the embedded (single-\nnode) ZooKeeper, you should also pass the -z parameter.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "For more details, see the section <span class=\"link\">SolrCloud Mode</span> below.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"ff1 fs0\">bin/solr start -c</span></span>",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "-d <dir>\nDefine a server directory, defaults to <span class=\"ff1 fs0\">server</span> (as in, <span class=\"ff1 fs0\">$SOLR_HOME/server</span>). It is uncommon to override this\noption. When running multiple instances of Solr on the same host, it is more common to use the same\nserver directory for each instance and use a unique Solr home directory using the -s option.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"ff1 fs0\">bin/solr start -d newServerDir</span></span>",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "-e <name>\nStart Solr with an example configuration. These examples are provided to help you get started faster with\nSolr generally, or just try a specific feature.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "The available options are:",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "cloud\n•techproducts\n•dih\n•schemaless",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "See the section <span class=\"link\">Running with Example Configurations</span> below for more details on the example\nconfigurations.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"ff1 fs0\">bin/solr start -e schemaless</span></span>",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "-f\nStart Solr in the foreground; you cannot use this option when running examples with the -e option.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"ff1 fs0\">bin/solr start -f</span></span>",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "-h <hostname>\nStart Solr with the defined hostname. If this is not specified, 'localhost' will be assumed.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"ff1 fs0\">bin/solr start -h search.mysolr.com</span></span>",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "-m <memory>\nStart Solr with the defined value as the min (-Xms) and max (-Xmx) heap size for the JVM.",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"ff1 fs0\">bin/solr start -m 1g</span></span>",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "-noprompt\nStart Solr and suppress any prompts that may be seen with another option. This would have the side",
    "hierarchy": [
    ],
    "pageId": 53
  },
  {
    "content": "effect of accepting all defaults implicitly.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "For example, when using the \"cloud\" example, an interactive session guides you through several options\nfor your SolrCloud cluster. If you want to accept all of the defaults, you can simply add the -noprompt\noption to your request.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -e cloud -noprompt</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-p <port>\nStart Solr on the defined port. If this is not specified, '8983' will be used.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -p 8655</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-s <dir>\nSets the <span class=\"code\">solr.solr.home</span> system property; Solr will create core directories under this directory. This\nallows you to run multiple Solr instances on the same host while reusing the same server directory set\nusing the <span class=\"code\">-d</span> parameter.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "If set, the specified directory should contain a <span class=\"code\">solr.xml</span> file, unless <span class=\"code\">solr.xml</span> exists in ZooKeeper. The\ndefault value is <span class=\"code\">server/solr</span>.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "This parameter is ignored when running examples (<span class=\"code\">-e</span>), as the <span class=\"code\">solr.solr.home</span> depends on which\nexample is run.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -s newHome</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-v\nBe more verbose. This changes the logging level of log4j from <span class=\"code\">INFO</span> to <span class=\"code\">DEBUG</span>, having the same effect as if\nyou edited <span class=\"code\">log4j.properties</span> accordingly.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -f -v</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-q\nBe more quiet. This changes the logging level of log4j from <span class=\"code\">INFO</span> to <span class=\"code\">WARN</span>, having the same effect as if you\nedited <span class=\"code\">log4j.properties</span> accordingly. This can be useful in a production setting where you want to limit\nlogging to warnings and errors.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -f -q</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-V\nStart Solr with verbose messages from the start script.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -V</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-z <zkHost>\nStart Solr with the defined ZooKeeper connection string. This option is only used with the -c option, to\nstart Solr in SolrCloud mode. If this option is not provided, Solr will start the embedded ZooKeeper\ninstance and use that instance for SolrCloud operations.",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">bin/solr start -c -z server1:2181,server2:2181</span></span>",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "-force\nIf attempting to start Solr as the root user, the script will exit with a warning that running Solr as \"root\"",
    "hierarchy": [
    ],
    "pageId": 54
  },
  {
    "content": "can cause problems. It is possible to override this warning with the -force parameter.",
    "hierarchy": [
    ],
    "pageId": 55
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">sudo bin/solr start -force</span></span>",
    "hierarchy": [
    ],
    "pageId": 55
  },
  {
    "content": "To emphasize how the default settings work take a moment to understand that the following commands are\nequivalent:",
    "hierarchy": [
    ],
    "pageId": 55
  },
  {
    "content": "bin/solr start",
    "hierarchy": [
    ],
    "pageId": 55
  },
  {
    "content": "bin/solr start -h localhost -p 8983 -d server -s solr -m 512m",
    "hierarchy": [
    ],
    "pageId": 55
  },
  {
    "content": "It is not necessary to define all of the options when starting if the defaults are fine for your needs.",
    "hierarchy": [
    ],
    "pageId": 55
  },
  {
    "content": "The <span class=\"code\">bin/solr</span> script will pass any additional parameters that begin with <span class=\"code\">-D</span> to the JVM, which allows you to\nset arbitrary Java system properties.",
    "hierarchy": [
      "Setting Java System Properties"
    ],
    "pageId": 55
  },
  {
    "content": "For example, to set the auto soft-commit frequency to 3 seconds, you can do:",
    "hierarchy": [
      "Setting Java System Properties"
    ],
    "pageId": 55
  },
  {
    "content": "bin/solr start -Dsolr.autoSoftCommit.maxTime=3000",
    "hierarchy": [
      "Setting Java System Properties"
    ],
    "pageId": 55
  },
  {
    "content": "The <span class=\"code\">-c</span> and <span class=\"code\">-cloud</span> options are equivalent:",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "bin/solr start -c",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "bin/solr start -cloud",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "If you specify a ZooKeeper connection string, such as <span class=\"code\">-z 192.168.1.4:2181</span>, then Solr will connect to\nZooKeeper and join the cluster.",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "If you do not specify the <span class=\"code\">-z</span> option when starting Solr in cloud mode, then Solr will launch an embedded\nZooKeeper server listening on the Solr port + 1000, i.e., if Solr is running on port 8983, then the embedded\nZooKeeper will be listening on port 9983.",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "If your ZooKeeper connection string uses a chroot, such as <span class=\"code\">localhost:2181/solr</span>, then you\nneed to create the /solr znode before launching SolrCloud using the <span class=\"code\">bin/solr</span> script.",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "+ To do this use the <span class=\"code\">mkroot</span> command outlined below, for example: <span class=\"code\">bin/solr zk mkroot</span>\n/solr -z 192.168.1.4:2181",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "When starting in SolrCloud mode, the interactive script session will prompt you to choose a configset to use.",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "For more information about starting Solr in SolrCloud mode, see also the section <span class=\"link\">Getting Started with</span>\nSolrCloud<span class=\"fc0\">.</span>",
    "hierarchy": [
      "SolrCloud Mode"
    ],
    "pageId": 55
  },
  {
    "content": "bin/solr start -e <name>",
    "hierarchy": [
      "Running with Example Configurations"
    ],
    "pageId": 55
  },
  {
    "content": "The example configurations allow you to get started quickly with a configuration that mirrors what you hope\nto accomplish with Solr.",
    "hierarchy": [
      "Running with Example Configurations"
    ],
    "pageId": 55
  },
  {
    "content": "Each example launches Solr with a managed schema, which allows use of the <span class=\"link\">Schema API</span> to make schema\nedits, but does not allow manual editing of a Schema file.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "If you would prefer to manually modify a <span class=\"ff2 fs1\">schema.xml</span> file directly, you can change this default as described\nin the section <span class=\"link\">Schema Factory Definition in SolrConfig</span>.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "Unless otherwise noted in the descriptions below, the examples do not enable <span class=\"link\">SolrCloud</span> nor <span class=\"link\">schemaless</span>\nmode<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "The following examples are provided:",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "cloud<span class=\"ff1\">: This example starts a 1-4 node SolrCloud cluster on a single machine. When chosen, an interactive</span>\nsession will start to guide you through options to select the initial configset to use, the number of nodes\nfor your example cluster, the ports to use, and name of the collection to be created.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "When using this example, you can choose from any of the available configsets found in\n$SOLR_HOME/server/solr/configsets<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "techproducts<span class=\"ff1\">: This example starts Solr in standalone mode with a schema designed for the sample</span>\ndocuments included in the <span class=\"ff2 fs1\">$SOLR_HOME/example/exampledocs</span> directory.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "The configset used can be found in\n$SOLR_HOME/server/solr/configsets/sample_techproducts_configs<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "dih<span class=\"ff1\">: This example starts Solr in standalone mode with the DataImportHandler (DIH) enabled and several</span>\nexample <span class=\"ff2 fs1\">dataconfig.xml</span> files pre-configured for different types of data supported with DIH (such as,\ndatabase contents, email, RSS feeds, etc.).",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "The configset used is customized for DIH, and is found in <span class=\"ff2 fs1\">$SOLR_HOME/example/example-DIH/solr/conf</span>.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "For more information about DIH, see the section <span class=\"link\">Uploading Structured Data Store Data with the Data</span>\nImport Handler<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "schemaless<span class=\"ff1\">: This example starts Solr in standalone mode using a managed schema, as described in the</span>\nsection <span class=\"link\">Schema Factory Definition in SolrConfig</span>, and provides a very minimal pre-defined schema. Solr\nwill run in <span class=\"link\">Schemaless Mode</span> with this configuration, where Solr will create fields in the schema on the fly\nand will guess field types used in incoming documents.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "The configset used can be found in <span class=\"ff2 fs1\">$SOLR_HOME/server/solr/configsets/_default</span>.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "The run in-foreground option (<span class=\"ff2 fs1\">-f</span>) is not compatible with the <span class=\"ff2 fs1\">-e</span> option since the script\nneeds to perform additional tasks after starting the Solr server.",
    "hierarchy": [
    ],
    "pageId": 56
  },
  {
    "content": "The <span class=\"ff2 fs1\">stop</span> command sends a STOP request to a running Solr node, which allows it to shutdown gracefully.\nThe command will wait up to 180 seconds for Solr to stop gracefully and then will forcefully kill the process\n(kill -9).",
    "hierarchy": [
      "Stop"
    ],
    "pageId": 56
  },
  {
    "content": "bin/solr stop [options]",
    "hierarchy": [
      "Stop"
    ],
    "pageId": 56
  },
  {
    "content": "bin/solr stop -help",
    "hierarchy": [
      "Stop"
    ],
    "pageId": 56
  },
  {
    "content": "-p <port>\nStop Solr running on the given port. If you are running more than one instance, or are running in\nSolrCloud mode, you either need to specify the ports in separate requests or use the -all option.",
    "hierarchy": [
      "Stop Parameters"
    ],
    "pageId": 57
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff2 fs1\">bin/solr stop -p 8983</span></span>",
    "hierarchy": [
      "Stop Parameters"
    ],
    "pageId": 57
  },
  {
    "content": "-all\nStop all running Solr instances that have a valid PID.",
    "hierarchy": [
      "Stop Parameters"
    ],
    "pageId": 57
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff2 fs1\">bin/solr stop -all</span></span>",
    "hierarchy": [
      "Stop Parameters"
    ],
    "pageId": 57
  },
  {
    "content": "-k <key>\nStop key used to protect from stopping Solr inadvertently; default is \"solrrocks\".",
    "hierarchy": [
      "Stop Parameters"
    ],
    "pageId": 57
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff2 fs1\">bin/solr stop -k solrrocks</span></span>",
    "hierarchy": [
      "Stop Parameters"
    ],
    "pageId": 57
  },
  {
    "content": "The <span class=\"ff2 fs1\">version</span> command simply returns the version of Solr currently installed and immediately exists.",
    "hierarchy": [
      "System Information",
      "Version"
    ],
    "pageId": 57
  },
  {
    "content": "$ bin/solr version\nX.Y.0",
    "hierarchy": [
      "System Information",
      "Version"
    ],
    "pageId": 57
  },
  {
    "content": "The <span class=\"ff2 fs1\">status</span> command displays basic JSON-formatted information for any Solr nodes found running on the\nlocal system.",
    "hierarchy": [
      "System Information",
      "Status"
    ],
    "pageId": 57
  },
  {
    "content": "The <span class=\"ff2 fs1\">status</span> command uses the <span class=\"ff2 fs1\">SOLR_PID_DIR</span> environment variable to locate Solr process ID files to find\nrunning Solr instances, which defaults to the <span class=\"ff2 fs1\">bin</span> directory.",
    "hierarchy": [
      "System Information",
      "Status"
    ],
    "pageId": 57
  },
  {
    "content": "bin/solr status",
    "hierarchy": [
      "System Information",
      "Status"
    ],
    "pageId": 57
  },
  {
    "content": "The output will include a status of each node of the cluster, as in this example:",
    "hierarchy": [
      "System Information",
      "Status"
    ],
    "pageId": 57
  },
  {
    "content": "Found 2 Solr nodes:",
    "hierarchy": [
    ],
    "pageId": 58
  },
  {
    "content": "Solr process 39920 running on port 7574\n{\nÊ \"solr_home\":\"/Applications/Solr/example/cloud/node2/solr/\",\nÊ \"version\":\"X.Y.0\",\nÊ \"startTime\":\"2015-02-10T17:19:54.739Z\",\nÊ \"uptime\":\"1 days, 23 hours, 55 minutes, 48 seconds\",\nÊ \"memory\":\"77.2 MB (%15.7) of 490.7 MB\",\nÊ \"cloud\":{\nÊ   \"ZooKeeper\":\"localhost:9865\",\nÊ   \"liveNodes\":\"2\",\nÊ   \"collections\":\"2\"}}",
    "hierarchy": [
    ],
    "pageId": 58
  },
  {
    "content": "Solr process 39827 running on port 8865\n{\nÊ \"solr_home\":\"/Applications/Solr/example/cloud/node1/solr/\",\nÊ \"version\":\"X.Y.0\",\nÊ \"startTime\":\"2015-02-10T17:19:49.057Z\",\nÊ \"uptime\":\"1 days, 23 hours, 55 minutes, 54 seconds\",\nÊ \"memory\":\"94.2 MB (%19.2) of 490.7 MB\",\nÊ \"cloud\":{\nÊ   \"ZooKeeper\":\"localhost:9865\",\nÊ   \"liveNodes\":\"2\",\nÊ   \"collections\":\"2\"}}",
    "hierarchy": [
    ],
    "pageId": 58
  },
  {
    "content": "The <span class=\"ff1 fs2\">assert</span> command sanity checks common issues with Solr installations. These include checking the\nownership/existence of particular directories, and ensuring Solr is available on the expected URL. The\ncommand can either output a specified error message, or change its exit code to indicate errors.",
    "hierarchy": [
      "Assert"
    ],
    "pageId": 58
  },
  {
    "content": "As an example:",
    "hierarchy": [
      "Assert"
    ],
    "pageId": 58
  },
  {
    "content": "bin/solr assert --exists /opt/bin/solr",
    "hierarchy": [
      "Assert"
    ],
    "pageId": 58
  },
  {
    "content": "Results in the output below:",
    "hierarchy": [
      "Assert"
    ],
    "pageId": 58
  },
  {
    "content": "ERROR: Directory /opt/bin/solr does not exist.",
    "hierarchy": [
      "Assert"
    ],
    "pageId": 58
  },
  {
    "content": "Use <span class=\"ff1 fs2\">bin/solr assert -help</span> for a full list of options.",
    "hierarchy": [
      "Assert"
    ],
    "pageId": 58
  },
  {
    "content": "The <span class=\"ff1 fs2\">healthcheck</span> command generates a JSON-formatted health report for a collection when running in\nSolrCloud mode. The health report provides information about the state of every replica for all shards in a\ncollection, including the number of committed documents and its current state.",
    "hierarchy": [
      "Healthcheck"
    ],
    "pageId": 58
  },
  {
    "content": "bin/solr healthcheck [options]",
    "hierarchy": [
    ],
    "pageId": 59
  },
  {
    "content": "bin/solr healthcheck -help",
    "hierarchy": [
    ],
    "pageId": 59
  },
  {
    "content": "-c <collection>\nName of the collection to run a healthcheck against (required).",
    "hierarchy": [
      "Healthcheck Parameters"
    ],
    "pageId": 59
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff1 fs0\">bin/solr healthcheck -c gettingstarted</span></span>",
    "hierarchy": [
      "Healthcheck Parameters"
    ],
    "pageId": 59
  },
  {
    "content": "-z <zkhost>\nZooKeeper connection string, defaults to <span class=\"ff1 fs0\">localhost:9983</span>. If you are running Solr on a port other than\n8983, you will have to specify the ZooKeeper connection string. By default, this will be the Solr port + 1000.",
    "hierarchy": [
      "Healthcheck Parameters"
    ],
    "pageId": 59
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff1 fs0\">bin/solr healthcheck -z localhost:2181</span></span>",
    "hierarchy": [
      "Healthcheck Parameters"
    ],
    "pageId": 59
  },
  {
    "content": "Below is an example healthcheck request and response using a non-standard ZooKeeper connect string,\nwith 2 nodes running:",
    "hierarchy": [
      "Healthcheck Parameters"
    ],
    "pageId": 59
  },
  {
    "content": "$ bin/solr healthcheck -c gettingstarted -z localhost:9865",
    "hierarchy": [
      "Healthcheck Parameters"
    ],
    "pageId": 59
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"collection\"</span>:<span class=\"fc2\">\"gettingstarted\"</span>,\nÊ <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"healthy\"</span>,\nÊ <span class=\"fc1\">\"numDocs\"</span>:<span class=\"fc3\">0</span>,\nÊ <span class=\"fc1\">\"numShards\"</span>:<span class=\"fc3\">2</span>,\nÊ <span class=\"fc1\">\"shards\"</span>:[\nÊ   {\nÊ     <span class=\"fc1\">\"shard\"</span>:<span class=\"fc2\">\"shard1\"</span>,\nÊ     <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"healthy\"</span>,\nÊ     <span class=\"fc1\">\"replicas\"</span>:[\nÊ       {\nÊ         <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"core_node1\"</span>,\nÊ         <span class=\"fc1\">\"url\"</span>:<span class=\"fc2\">\"http://10.0.1.10:8865/solr/gettingstarted_shard1_replica2/\"</span>,\nÊ         <span class=\"fc1\">\"numDocs\"</span>:<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"active\"</span>,\nÊ         <span class=\"fc1\">\"uptime\"</span>:<span class=\"fc2\">\"2 days, 1 hours, 18 minutes, 48 seconds\"</span>,\nÊ         <span class=\"fc1\">\"memory\"</span>:<span class=\"fc2\">\"25.6 MB (%5.2) of 490.7 MB\"</span>,\nÊ         <span class=\"fc1\">\"leader\"</span>:<span class=\"fc4\">true</span>},\nÊ       {\nÊ         <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"core_node4\"</span>,\nÊ         <span class=\"fc1\">\"url\"</span>:<span class=\"fc2\">\"http://10.0.1.10:7574/solr/gettingstarted_shard1_replica1/\"</span>,\nÊ         <span class=\"fc1\">\"numDocs\"</span>:<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"active\"</span>,\nÊ         <span class=\"fc1\">\"uptime\"</span>:<span class=\"fc2\">\"2 days, 1 hours, 18 minutes, 42 seconds\"</span>,\nÊ         <span class=\"fc1\">\"memory\"</span>:<span class=\"fc2\">\"95.3 MB (%19.4) of 490.7 MB\"</span>}]},\nÊ   {\nÊ     <span class=\"fc1\">\"shard\"</span>:<span class=\"fc2\">\"shard2\"</span>,\nÊ     <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"healthy\"</span>,\nÊ     <span class=\"fc1\">\"replicas\"</span>:[\nÊ       {\nÊ         <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"core_node2\"</span>,\nÊ         <span class=\"fc1\">\"url\"</span>:<span class=\"fc2\">\"http://10.0.1.10:8865/solr/gettingstarted_shard2_replica2/\"</span>,\nÊ         <span class=\"fc1\">\"numDocs\"</span>:<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"active\"</span>,\nÊ         <span class=\"fc1\">\"uptime\"</span>:<span class=\"fc2\">\"2 days, 1 hours, 18 minutes, 48 seconds\"</span>,\nÊ         <span class=\"fc1\">\"memory\"</span>:<span class=\"fc2\">\"25.8 MB (%5.3) of 490.7 MB\"</span>},\nÊ       {\nÊ         <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"core_node3\"</span>,\nÊ         <span class=\"fc1\">\"url\"</span>:<span class=\"fc2\">\"http://10.0.1.10:7574/solr/gettingstarted_shard2_replica1/\"</span>,\nÊ         <span class=\"fc1\">\"numDocs\"</span>:<span class=\"fc3\">0</span>,\nÊ         <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">\"active\"</span>,\nÊ         <span class=\"fc1\">\"uptime\"</span>:<span class=\"fc2\">\"2 days, 1 hours, 18 minutes, 42 seconds\"</span>,\nÊ         <span class=\"fc1\">\"memory\"</span>:<span class=\"fc2\">\"95.4 MB (%19.4) of 490.7 MB\"</span>,\nÊ         <span class=\"fc1\">\"leader\"</span>:<span class=\"fc4\">true</span>}]}]}",
    "hierarchy": [
    ],
    "pageId": 60
  },
  {
    "content": "The <span class=\"ff1 fs2\">bin/solr</span> script can also help you create new collections (in SolrCloud mode) or cores (in standalone\nmode), or delete collections.",
    "hierarchy": [
      "Collections and Cores"
    ],
    "pageId": 60
  },
  {
    "content": "The <span class=\"code\">create</span> command detects the mode that Solr is running in (standalone or SolrCloud) and then creates a\ncore or collection depending on the mode.",
    "hierarchy": [
      "Create a Core or Collection"
    ],
    "pageId": 61
  },
  {
    "content": "bin/solr create [options]",
    "hierarchy": [
      "Create a Core or Collection"
    ],
    "pageId": 61
  },
  {
    "content": "bin/solr create -help",
    "hierarchy": [
      "Create a Core or Collection"
    ],
    "pageId": 61
  },
  {
    "content": "-c <name>\nName of the core or collection to create (required).",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -c mycollection</span></span>",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "-d <confdir>\nThe configuration directory. This defaults to <span class=\"code\">_default</span>.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "See the section <span class=\"link\">Configuration Directories and SolrCloud</span> below for more details about this option when\nrunning in SolrCloud mode.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -d _default</span></span>",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "-n <configName>\nThe configuration name. This defaults to the same name as the core or collection.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -n basic</span></span>",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "-p <port>\nPort of a local Solr instance to send the create command to; by default the script tries to detect the port\nby looking for running Solr instances.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "This option is useful if you are running multiple standalone Solr instances on the same host, thus\nrequiring you to be specific about which instance to create the core in.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -p 8983</span></span>",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "-s <shards><span class=\"ff1 fs1\"> or </span>-shards\nNumber of shards to split a collection into, default is 1; only applies when Solr is running in SolrCloud\nmode.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -s 2</span></span>",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "-rf <replicas><span class=\"ff1 fs1\"> or </span>-replicationFactor\nNumber of copies of each document in the collection. The default is 1 (no replication).",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -rf 2</span></span>",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "-force\nIf attempting to run create as \"root\" user, the script will exit with a warning that running Solr or actions\nagainst Solr as \"root\" can cause problems. It is possible to override this warning with the -force\nparameter.",
    "hierarchy": [
      "Create a Core or Collection",
      "Create Core or Collection Parameters"
    ],
    "pageId": 61
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr create -c foo -force</span></span>",
    "hierarchy": [
    ],
    "pageId": 62
  },
  {
    "content": "Before creating a collection in SolrCloud, the configuration directory used by the collection must be\nuploaded to ZooKeeper. The <span class=\"code\">create</span> command supports several use cases for how collections and\nconfiguration directories work. The main decision you need to make is whether a configuration directory in\nZooKeeper should be shared across multiple collections.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "Let's work through a few examples to illustrate how configuration directories work in SolrCloud.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "First, if you don't provide the <span class=\"code\">-d</span> or <span class=\"code\">-n</span> options, then the default configuration\n(<span class=\"code\">$SOLR_HOME/server/solr/configsets/_default/conf</span>) is uploaded to ZooKeeper using the same name as\nthe collection.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "For example, the following command will result in the <span class=\"code\">_default</span> configuration being uploaded to\n/configs/contacts<span class=\"ff2 fs0\"> in ZooKeeper: </span>bin/solr create -c contacts<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "If you create another collection with <span class=\"code\">bin/solr create -c contacts2</span>, then another copy of the <span class=\"code\">_default</span>\ndirectory will be uploaded to ZooKeeper under <span class=\"code\">/configs/contacts2</span>.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "Any changes you make to the configuration for the contacts collection will not affect the <span class=\"code\">contacts2</span>\ncollection. Put simply, the default behavior creates a unique copy of the configuration directory for each\ncollection you create.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "You can override the name given to the configuration directory in ZooKeeper by using the <span class=\"code\">-n</span> option. For\ninstance, the command <span class=\"code\">bin/solr create -c logs -d _default -n basic</span> will upload the\nserver/solr/configsets/_default/conf<span class=\"ff2 fs0\"> directory to ZooKeeper as </span>/configs/basic<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "Notice that we used the <span class=\"code\">-d</span> option to specify a different configuration than the default. Solr provides several\nbuilt-in configurations under <span class=\"code\">server/solr/configsets</span>. However you can also provide the path to your own\nconfiguration directory using the <span class=\"code\">-d</span> option. For instance, the command <span class=\"code\">bin/solr create -c mycoll -d</span>\n/tmp/myconfigs<span class=\"ff2 fs0\">, will upload </span>/tmp/myconfigs<span class=\"ff2 fs0\"> into ZooKeeper under </span>/configs/mycoll<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "To reiterate, the configuration directory is named after the collection unless you override it using the <span class=\"code\">-n</span>\noption.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "Other collections can share the same configuration by specifying the name of the shared configuration\nusing the <span class=\"code\">-n</span> option. For instance, the following command will create a new collection that shares the basic\nconfiguration created previously: <span class=\"code\">bin/solr create -c logs2 -n basic</span>.",
    "hierarchy": [
      "Configuration Directories and SolrCloud"
    ],
    "pageId": 62
  },
  {
    "content": "The <span class=\"code\">_default</span> schema can mutate as data is indexed, since it has schemaless functionality (i.e., data-driven\nchanges to the schema). Consequently, we recommend that you do not share data-driven configurations\nbetween collections unless you are certain that all collections should inherit the changes made when\nindexing data into one of the collections. You can turn off schemaless functionality (i.e., data-driven changes\nto the schema) for a collection by the following (assuming the collection name is <span class=\"code\">mycollection</span>):",
    "hierarchy": [
      "Data-driven Schema and Shared Configurations"
    ],
    "pageId": 62
  },
  {
    "content": "curl http://host:8983/solr/mycollection/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
      "Data-driven Schema and Shared Configurations"
    ],
    "pageId": 62
  },
  {
    "content": "The <span class=\"code\">delete</span> command detects the mode that Solr is running in (standalone or SolrCloud) and then deletes\nthe specified core (standalone) or collection (SolrCloud) as appropriate.",
    "hierarchy": [
      "Delete Core or Collection"
    ],
    "pageId": 63
  },
  {
    "content": "bin/solr delete [options]",
    "hierarchy": [
      "Delete Core or Collection"
    ],
    "pageId": 63
  },
  {
    "content": "bin/solr delete -help",
    "hierarchy": [
      "Delete Core or Collection"
    ],
    "pageId": 63
  },
  {
    "content": "If running in SolrCloud mode, the delete command checks if the configuration directory used by the\ncollection you are deleting is being used by other collections. If not, then the configuration directory is also\ndeleted from ZooKeeper.",
    "hierarchy": [
      "Delete Core or Collection"
    ],
    "pageId": 63
  },
  {
    "content": "For example, if you created a collection with <span class=\"code\">bin/solr create -c contacts</span>, then the delete command\nbin/solr delete -c contacts<span class=\"ff2 fs1\"> will check to see if the </span>/configs/contacts<span class=\"ff2 fs1\"> configuration directory is being</span>\nused by any other collections. If not, then the <span class=\"code\">/configs/contacts</span> directory is removed from ZooKeeper.",
    "hierarchy": [
      "Delete Core or Collection"
    ],
    "pageId": 63
  },
  {
    "content": "-c <name>\nName of the core / collection to delete (required).",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr delete -c mycoll</span></span>",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "-deleteConfig\nWhether or not the configuration directory should also be deleted from ZooKeeper. The default is <span class=\"code\">true</span>.",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "If the configuration directory is being used by another collection, then it will not be deleted even if you\npass <span class=\"code\">-deleteConfig</span> as <span class=\"code\">true</span>.",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr delete -deleteConfig false</span></span>",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "-p <port>\nThe port of a local Solr instance to send the delete command to. By default the script tries to detect the\nport by looking for running Solr instances.",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "This option is useful if you are running multiple standalone Solr instances on the same host, thus\nrequiring you to be specific about which instance to delete the core from.",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">bin/solr delete -p 8983</span></span>",
    "hierarchy": [
      "Delete Core or Collection",
      "Delete Core or Collection Parameters"
    ],
    "pageId": 63
  },
  {
    "content": "The <span class=\"code\">bin/solr</span> script allows enabling or disabling Basic Authentication, allowing you to configure\nauthentication from the command line.",
    "hierarchy": [
      "Authentication"
    ],
    "pageId": 63
  },
  {
    "content": "Currently, this script only enables Basic Authentication, and is only available when using SolrCloud mode.",
    "hierarchy": [
      "Authentication"
    ],
    "pageId": 63
  },
  {
    "content": "The command <span class=\"code\">bin/solr auth enable</span> configures Solr to use Basic Authentication when accessing the User\nInterface, using <span class=\"code\">bin/solr</span> and any API requests.",
    "hierarchy": [
      "Authentication",
      "Enabling Basic Authentication"
    ],
    "pageId": 63
  },
  {
    "content": "For more information about Solr's authentication plugins, see the section <span class=\"link\">Securing Solr</span>. For\nmore information on Basic Authentication support specifically, see the section <span class=\"link\">Basic</span>\nAuthentication Plugin<span class=\"fc1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "The <span class=\"code\">bin/solr auth enable</span> command makes several changes to enable Basic Authentication:",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "Creates a <span class=\"code\">security.json</span> file and uploads it to ZooKeeper. The <span class=\"code\">security.json</span> file will look similar to:",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"authentication\"</span>:{\nÊ  <span class=\"fc3\">\"blockUnknown\"</span>: <span class=\"fc4\">false</span>,\nÊ  <span class=\"fc3\">\"class\"</span>:<span class=\"fc5\">\"solr.BasicAuthPlugin\"</span>,\nÊ  <span class=\"fc3\">\"credentials\"</span>:{<span class=\"fc3\">\"user\"</span>:<span class=\"fc5\">\"vgGVo69YJeUg/O6AcFiowWsdyOUdqfQvOLsrpIPMCzk=</span>",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "Ê },\nÊ <span class=\"fc3\">\"authorization\"</span>:{\nÊ  <span class=\"fc3\">\"class\"</span>:<span class=\"fc5\">\"solr.RuleBasedAuthorizationPlugin\"</span>,\nÊ  <span class=\"fc3\">\"permissions\"</span>:[\nÊ{<span class=\"fc3\">\"name\"</span>:<span class=\"fc5\">\"security-edit\"</span>, <span class=\"fc3\">\"role\"</span>:<span class=\"fc5\">\"admin\"</span>},\nÊ{<span class=\"fc3\">\"name\"</span>:<span class=\"fc5\">\"collection-admin-edit\"</span>, <span class=\"fc3\">\"role\"</span>:<span class=\"fc5\">\"admin\"</span>},\nÊ{<span class=\"fc3\">\"name\"</span>:<span class=\"fc5\">\"core-admin-edit\"</span>, <span class=\"fc3\">\"role\"</span>:<span class=\"fc5\">\"admin\"</span>}\nÊ  ],\nÊ  <span class=\"fc3\">\"user-role\"</span>:{<span class=\"fc3\">\"user\"</span>:<span class=\"fc5\">\"admin\"</span>}\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "Adds two lines to <span class=\"code\">bin/solr.in.sh</span> or <span class=\"code\">bin\\solr.in.cmd</span> to set the authentication type, and the path to\nbasicAuth.conf<span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "# The following lines added by ./solr for enabling BasicAuth\nSOLR_AUTH_TYPE=\"basic\"\nSOLR_AUTHENTICATION_OPTS=\"-Dsolr.httpclient.config=/path/to/solr-\n7.3.0/server/solr/basicAuth.conf\"",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "Creates the file <span class=\"code\">server/solr/basicAuth.conf</span> to store the credential information that is used with\nbin/solr<span class=\"ff2 fs1\"> commands.</span>",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "The command takes the following parameters:",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "-credentials\nThe username and password in the format of <span class=\"code\">username:password</span> of the initial user.",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "If you prefer not to pass the username and password as an argument to the script, you can choose the\n-prompt<span class=\"ff2 fs1\"> option. Either </span>-credentials<span class=\"ff2 fs1\"> or </span>-prompt<span class=\"ff2 fs1\"> <span class=\"ff4\">must</span> be specified.</span>",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "-prompt\nIf prompt is preferred, pass <span class=\"ff4\">true</span> as a parameter to request the script to prompt the user to enter a\nusername and password.",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "Either <span class=\"code\">-credentials</span> or <span class=\"code\">-prompt</span> <span class=\"ff4\">must</span> be specified.",
    "hierarchy": [
    ],
    "pageId": 64
  },
  {
    "content": "-blockUnknown\nWhen <span class=\"code\">true</span>, blocks all unauthenticated users from accessing Solr. This defaults to <span class=\"code\">false</span>, which means\nunauthenticated users will still be able to access Solr.",
    "hierarchy": [
    ],
    "pageId": 65
  },
  {
    "content": "-updateIncludeFileOnly\nWhen <span class=\"code\">true</span>, only the settings in <span class=\"ff1 fs0\">bin/solr.in.sh</span> or <span class=\"ff1 fs0\">bin\\solr.in.cmd</span> will be updated, and <span class=\"ff1 fs0\">security.json</span>\nwill not be created.",
    "hierarchy": [
    ],
    "pageId": 65
  },
  {
    "content": "-z\nDefines the ZooKeeper connect string. This is useful if you want to enable authentication before all your\nSolr nodes have come up.",
    "hierarchy": [
    ],
    "pageId": 65
  },
  {
    "content": "-d\nDefines the Solr server directory, by default <span class=\"ff1 fs0\">$SOLR_HOME/server</span>. It is not common to need to override the\ndefault, and is only needed if you have customized the <span class=\"ff1 fs0\">$SOLR_HOME</span> directory path.",
    "hierarchy": [
    ],
    "pageId": 65
  },
  {
    "content": "-s\nDefines the location of <span class=\"ff1 fs0\">solr.solr.home</span>, which by default is <span class=\"ff1 fs0\">server/solr</span>. If you have multiple instances\nof Solr on the same host, or if you have customized the <span class=\"ff1 fs0\">$SOLR_HOME</span> directory path, you likely need to\ndefine this.",
    "hierarchy": [
    ],
    "pageId": 65
  },
  {
    "content": "You can disable Basic Authentication with <span class=\"ff1 fs0\">bin/solr auth disable</span>.",
    "hierarchy": [
      "Disabling Basic Authentication"
    ],
    "pageId": 65
  },
  {
    "content": "If the <span class=\"ff1 fs0\">-updateIncludeFileOnly</span> option is set to <span class=\"code\">true</span>, then only the settings in <span class=\"ff1 fs0\">bin/solr.in.sh</span> or\nbin\\solr.in.cmd<span class=\"ff2 fs1\"> will be updated, and </span>security.json<span class=\"ff2 fs1\"> will not be removed.</span>",
    "hierarchy": [
      "Disabling Basic Authentication"
    ],
    "pageId": 65
  },
  {
    "content": "If the <span class=\"ff1 fs0\">-updateIncludeFileOnly</span> option is set to <span class=\"code\">false</span>, then the settings in <span class=\"ff1 fs0\">bin/solr.in.sh</span> or\nbin\\solr.in.cmd<span class=\"ff2 fs1\"> will be updated, and </span>security.json<span class=\"ff2 fs1\"> will be removed. However, the </span>basicAuth.conf<span class=\"ff2 fs1\"> file is</span>\nnot removed with either option.",
    "hierarchy": [
      "Disabling Basic Authentication"
    ],
    "pageId": 65
  },
  {
    "content": "The <span class=\"ff1 fs0\">bin/solr</span> script allows certain operations affecting ZooKeeper. These operations are for SolrCloud mode\nonly. The operations are available as sub-commands, which each have their own set of options.",
    "hierarchy": [
      "ZooKeeper Operations"
    ],
    "pageId": 65
  },
  {
    "content": "bin/solr zk [sub-command] [options]",
    "hierarchy": [
      "ZooKeeper Operations"
    ],
    "pageId": 65
  },
  {
    "content": "bin/solr zk -help",
    "hierarchy": [
      "ZooKeeper Operations"
    ],
    "pageId": 65
  },
  {
    "content": "Solr should have been started at least once before issuing these commands to initialize\nZooKeeper with the znodes Solr expects. Once ZooKeeper is initialized, Solr doesn't need to\nbe running on any node to use these commands.",
    "hierarchy": [
      "ZooKeeper Operations"
    ],
    "pageId": 65
  },
  {
    "content": "Use the <span class=\"ff1 fs0\">zk upconfig</span> command to upload one of the pre-configured configuration set or a customized\nconfiguration set to ZooKeeper.",
    "hierarchy": [
      "ZooKeeper Operations",
      "Upload a Configuration Set"
    ],
    "pageId": 65
  },
  {
    "content": "All parameters below are required.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "-n <name>\nName of the configuration set in ZooKeeper. This command will upload the configuration set to the\n\"configs\" ZooKeeper node giving it the name specified.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "You can see all uploaded configuration sets in the Admin UI via the Cloud screens. Choose Cloud -> Tree\n-> configs to see them.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "If a pre-existing configuration set is specified, it will be overwritten in ZooKeeper.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">-n myconfig</span></span>",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "-d <configset dir>\nThe path of the configuration set to upload. It should have a <span class=\"code\">conf</span> directory immediately below it that in\nturn contains <span class=\"code\">solrconfig.xml</span> etc.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "If just a name is supplied, <span class=\"code\">$SOLR_HOME/server/solr/configsets</span> will be checked for this name. An\nabsolute path may be supplied instead.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "Examples<span class=\"ff2\">:</span>",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "\n-d directory_under_configsets\n•\n-d /path/to/configset/source",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"code\">solr.in.sh</span> or <span class=\"code\">solr.in.cmd</span>.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "An example of this command with all of the parameters is:",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "bin/solr zk upconfig -z 111.222.333.444:2181 -n mynewconfig -d /path/to/configset",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "This command does <span class=\"ff1\">not</span> automatically make changes effective! It simply uploads the\nconfiguration sets to ZooKeeper. You can use the Collection API's <span class=\"link\">RELOAD command</span> to\nreload any collections that uses this configuration set.",
    "hierarchy": [
      "ZK Upload Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "Use the <span class=\"code\">zk downconfig</span> command to download a configuration set from ZooKeeper to the local filesystem.",
    "hierarchy": [
      "Download a Configuration Set"
    ],
    "pageId": 66
  },
  {
    "content": "All parameters listed below are required.",
    "hierarchy": [
      "Download a Configuration Set",
      "ZK Download Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "-n <name>\nName of config set in ZooKeeper to download. The Admin UI Cloud -> Tree -> configs node lists all",
    "hierarchy": [
      "Download a Configuration Set",
      "ZK Download Parameters"
    ],
    "pageId": 66
  },
  {
    "content": "available configuration sets.",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">-n myconfig</span></span>",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "-d <configset dir>\nThe path to write the downloaded configuration set into. If just a name is supplied,\n$SOLR_HOME/server/solr/configsets<span class=\"ff1 fs0\"> will be the parent. An absolute path may be supplied as well.</span>",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "In either case, <span class=\"ff4\">pre-existing configurations at the destination will be overwritten!</span>",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "Examples<span class=\"ff1\">:</span>",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "\n-d directory_under_configsets\n•\n-d /path/to/configset/destination",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"code\">solr.in.sh</span> or <span class=\"code\">solr.in.cmd</span>.",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "An example of this command with all parameters is:",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "bin/solr zk downconfig -z 111.222.333.444:2181 -n mynewconfig -d /path/to/configset",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "A \"best practice\" is to keep your configuration sets in some form of version control as the system-of-record.\nIn that scenario, <span class=\"code\">downconfig</span> should rarely be used.",
    "hierarchy": [
    ],
    "pageId": 67
  },
  {
    "content": "Use the <span class=\"code\">zk cp</span> command for transferring files and directories between ZooKeeper znodes and your local\ndrive. This command will copy from the local drive to ZooKeeper, from ZooKeeper to the local drive or from\nZooKeeper to ZooKeeper.",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes"
    ],
    "pageId": 67
  },
  {
    "content": "-r\nOptional. Do a recursive copy. The command will fail if the <src> has children unless '-r' is specified.",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes",
      "ZK Copy Parameters"
    ],
    "pageId": 67
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"code\">-r</span></span>",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes",
      "ZK Copy Parameters"
    ],
    "pageId": 67
  },
  {
    "content": "<src>\nThe file or path to copy from. If prefixed with <span class=\"code\">zk:</span> then the source is presumed to be ZooKeeper. If no\nprefix or the prefix is 'file:' this is the local drive. At least one of <src> or <dest> must be prefixed by <span class=\"code\">'zk:'</span>\nor the command will fail.",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes",
      "ZK Copy Parameters"
    ],
    "pageId": 67
  },
  {
    "content": "Examples<span class=\"ff1\">:</span>",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes",
      "ZK Copy Parameters"
    ],
    "pageId": 67
  },
  {
    "content": "\nzk:/configs/myconfigs/solrconfig.xml\n•\nfile:/Users/apache/configs/src",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes",
      "ZK Copy Parameters"
    ],
    "pageId": 67
  },
  {
    "content": "<dest>\nThe file or path to copy to. If prefixed with <span class=\"code\">zk:</span> then the source is presumed to be ZooKeeper. If no prefix",
    "hierarchy": [
      "Copy between Local Files and ZooKeeper znodes",
      "ZK Copy Parameters"
    ],
    "pageId": 67
  },
  {
    "content": "or the prefix is <span class=\"ff2 fs1\">file:</span> this is the local drive.",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "At least one of <span class=\"ff2 fs1\"><src></span> or <span class=\"ff2 fs1\"><dest></span> must be prefixed by <span class=\"ff2 fs1\">zk:</span> or the command will fail. If <span class=\"ff2 fs1\"><dest></span> ends in a slash\ncharacter it names a directory.",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "Examples<span class=\"ff1\">:</span>",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "\nzk:/configs/myconfigs/solrconfig.xml\n•\nfile:/Users/apache/configs/src",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"ff2 fs1\">solr.in.sh</span> or <span class=\"ff2 fs1\">solr.in.cmd</span>.",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"ff2 fs1\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "An example of this command with the parameters is:",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "Recursively copy a directory from local to ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "bin/solr zk cp -r file:/apache/confgs/whatever/conf zk:/configs/myconf -z\n111.222.333.444:2181",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "Copy a single file from ZooKeeper to local.",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "bin/solr zk cp zk:/configs/myconf/managed_schema /configs/myconf/managed_schema -z\n111.222.333.444:2181",
    "hierarchy": [
    ],
    "pageId": 68
  },
  {
    "content": "Use the <span class=\"ff2 fs1\">zk rm</span> command to remove a znode (and optionally all child nodes) from ZooKeeper",
    "hierarchy": [
      "Remove a znode from ZooKeeper"
    ],
    "pageId": 68
  },
  {
    "content": "-r\nOptional. Do a recursive removal. The command will fail if the <path> has children unless '-r' is specified.",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "Example<span class=\"ff1\">: <span class=\"ff2 fs1\">-r</span></span>",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "<path>\nThe path to remove from ZooKeeper, either a parent or leaf node.",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "There are limited safety checks, you cannot remove '/' or '/zookeeper' nodes.",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "The path is assumed to be a ZooKeeper node, no <span class=\"ff2 fs1\">zk:</span> prefix is necessary.",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "Examples<span class=\"ff1\">:</span>",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "\n/configs\n•\n/configs/myconfigset\n•\n/configs/myconfigset/solrconfig.xml",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"ff2 fs1\">solr.in.sh</span> or <span class=\"ff2 fs1\">solr.in.cmd</span>.",
    "hierarchy": [
      "Remove a znode from ZooKeeper",
      "ZK Remove Parameters"
    ],
    "pageId": 68
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
    ],
    "pageId": 69
  },
  {
    "content": "Examples of this command with the parameters are:",
    "hierarchy": [
    ],
    "pageId": 69
  },
  {
    "content": "bin/solr zk rm -r /configs",
    "hierarchy": [
    ],
    "pageId": 69
  },
  {
    "content": "bin/solr zk rm /configs/myconfigset/schema.xml",
    "hierarchy": [
    ],
    "pageId": 69
  },
  {
    "content": "Use the <span class=\"code\">zk mv</span> command to move (rename) a ZooKeeper znode",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)"
    ],
    "pageId": 69
  },
  {
    "content": "<src>\nThe znode to rename. The <span class=\"code\">zk:</span> prefix is assumed.",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">/configs/oldconfigset</span></span>",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "<dest>\nThe new name of the znode. The <span class=\"code\">zk:</span> prefix is assumed.",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">/configs/newconfigset</span></span>",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"code\">solr.in.sh</span> or <span class=\"code\">solr.in.cmd</span>.",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "An example of this command is:",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "bin/solr zk mv /configs/oldconfigset /configs/newconfigset",
    "hierarchy": [
      "Move One ZooKeeper znode to Another (Rename)",
      "ZK Move Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "Use the <span class=\"code\">zk ls</span> command to see the children of a znode.",
    "hierarchy": [
      "List a ZooKeeper znode's Children"
    ],
    "pageId": 69
  },
  {
    "content": "-r<span class=\"ff2 fs0\"> Optional. Recursively list all descendants of a znode.</span>",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "+ <span class=\"ff1\">Example</span>: <span class=\"code\">-r</span>",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "<path>\nThe path on ZooKeeper to list.",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">/collections/mycollection</span></span>",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"code\">solr.in.sh</span> or <span class=\"code\">solr.in.cmd</span>.",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "Example<span class=\"ff2\">: <span class=\"code\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "An example of this command with the parameters is:",
    "hierarchy": [
      "List a ZooKeeper znode's Children",
      "ZK List Parameters"
    ],
    "pageId": 69
  },
  {
    "content": "bin/solr zk ls -r /collections/mycollection",
    "hierarchy": [
    ],
    "pageId": 70
  },
  {
    "content": "bin/solr zk ls /collections",
    "hierarchy": [
    ],
    "pageId": 70
  },
  {
    "content": "Use the <span class=\"ff1 fs0\">zk mkroot</span> command to create a znode. The primary use-case for this command to support\nZooKeeper's \"chroot\" concept. However, it can also be used to create arbitrary paths.",
    "hierarchy": [
      "Create a znode (supports chroot)"
    ],
    "pageId": 70
  },
  {
    "content": "<path>\nThe path on ZooKeeper to create. Intermediate znodes will be created if necessary. A leading slash is\nassumed even if not specified.",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff1 fs0\">/solr</span></span>",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "-z <zkHost>\nThe ZooKeeper connection string. Unnecessary if ZK_HOST is defined in <span class=\"ff1 fs0\">solr.in.sh</span> or <span class=\"ff1 fs0\">solr.in.cmd</span>.",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "Example<span class=\"code\">: <span class=\"ff1 fs0\">-z 123.321.23.43:2181</span></span>",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "Examples of this command:",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "bin/solr zk mkroot /solr -z 123.321.23.43:2181",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "bin/solr zk mkroot /solr/production",
    "hierarchy": [
      "Create a znode (supports chroot)",
      "Create znode Parameters"
    ],
    "pageId": 70
  },
  {
    "content": "Solr has several configuration files that you will interact with during your implementation.",
    "hierarchy": [
      "Solr Configuration Files"
    ],
    "pageId": 71
  },
  {
    "content": "Many of these files are in XML format, although APIs that interact with configuration settings tend to accept\nJSON for programmatic access as needed.",
    "hierarchy": [
      "Solr Configuration Files"
    ],
    "pageId": 71
  },
  {
    "content": "When Solr runs, it needs access to a home directory.",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "When you first install Solr, your home directory is <span class=\"code\">server/solr</span>. However, some examples may change this\nlocation (such as, if you run <span class=\"code\">bin/solr start -e cloud</span>, your home directory will be <span class=\"code\">example/cloud</span>).",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "The home directory contains important configuration information and is the place where Solr will store its\nindex. The layout of the home directory will look a little different when you are running Solr in standalone\nmode vs. when you are running in SolrCloud mode.",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "The crucial parts of the Solr home directory are shown in these examples:",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "<solr-home-directory>/\nÊ  solr.xml\nÊ  core_name1/\nÊ     core.properties\nÊ     conf/\nÊ        solrconfig.xml\nÊ        managed-schema\nÊ     data/\nÊ  core_name2/\nÊ     core.properties\nÊ     conf/\nÊ        solrconfig.xml\nÊ        managed-schema\nÊ     data/",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "<solr-home-directory>/\nÊ  solr.xml\nÊ  core_name1/\nÊ     core.properties\nÊ     data/\nÊ  core_name2/\nÊ     core.properties\nÊ     data/",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "You may see other files, but the main ones you need to know are discussed in the next section.",
    "hierarchy": [
      "Solr Configuration Files",
      "Solr Home"
    ],
    "pageId": 71
  },
  {
    "content": "Inside Solr's Home, you’ll find these files:",
    "hierarchy": [
      "Configuration Files"
    ],
    "pageId": 72
  },
  {
    "content": "solr.xml specifies configuration options for your Solr server instance. For more information on\nsolr.xml<span class=\"ff2 fs1\"> see <span class=\"link\">Solr Cores and solr.xml</span>.</span>",
    "hierarchy": [
      "Configuration Files"
    ],
    "pageId": 72
  },
  {
    "content": "Per Solr Core:",
    "hierarchy": [
      "Configuration Files"
    ],
    "pageId": 72
  },
  {
    "content": "◦core.properties<span class=\"ff2 fs1\"> defines specific properties for each core such as its name, the collection the core</span>\nbelongs to, the location of the schema, and other parameters. For more details on <span class=\"code\">core.properties</span>,\nsee the section <span class=\"link\">Defining core.properties</span>.\n◦solrconfig.xml<span class=\"ff2 fs1\"> controls high-level behavior. You can, for example, specify an alternate location for</span>\nthe data directory. For more information on <span class=\"code\">solrconfig.xml</span>, see <span class=\"link\">Configuring solrconfig.xml</span>.\n◦managed-schema<span class=\"ff2 fs1\"> (or </span>schema.xml<span class=\"ff2 fs1\"> instead) describes the documents you will ask Solr to index. The</span>\nSchema define a document as a collection of fields. You get to define both the field types and the\nfields themselves. Field type definitions are powerful and include information about how Solr\nprocesses incoming field values and query values. For more information on Solr Schemas, see\nDocuments, Fields, and Schema Design<span class=\"fc1\"> and the </span>Schema API<span class=\"fc1\">.</span>\n◦data/<span class=\"ff2 fs1\"> The directory containing the low level index files.</span>",
    "hierarchy": [
      "Configuration Files"
    ],
    "pageId": 72
  },
  {
    "content": "Note that the SolrCloud example does not include a <span class=\"code\">conf</span> directory for each Solr Core (so there is no\nsolrconfig.xml<span class=\"ff2 fs1\"> or Schema file). This is because the configuration files usually found in the </span>conf<span class=\"ff2 fs1\"> directory</span>\nare stored in ZooKeeper so they can be propagated across the cluster.",
    "hierarchy": [
      "Configuration Files"
    ],
    "pageId": 72
  },
  {
    "content": "If you are using SolrCloud with the embedded ZooKeeper instance, you may also see <span class=\"code\">zoo.cfg</span> and <span class=\"code\">zoo.data</span>\nwhich are ZooKeeper configuration and data files. However, if you are running your own ZooKeeper\nensemble, you would supply your own ZooKeeper configuration file when you start it and the copies in Solr\nwould be unused. For more information about SolrCloud, see the section <span class=\"link\">SolrCloud</span>.",
    "hierarchy": [
      "Configuration Files"
    ],
    "pageId": 72
  },
  {
    "content": "This section provides guidance on how to setup Solr to run in production on *nix platforms, such as Ubuntu.\nSpecifically, we'll walk through the process of setting up to run a single Solr instance on a Linux host and\nthen provide tips on how to support multiple Solr nodes running on the same host.",
    "hierarchy": [
      "Taking Solr to Production"
    ],
    "pageId": 73
  },
  {
    "content": "Solr includes a service installation script (<span class=\"code\">bin/install_solr_service.sh</span>) to help you install Solr as a service\non Linux. Currently, the script only supports CentOS, Debian, Red Hat, SUSE and Ubuntu Linux distributions.\nBefore running the script, you need to determine a few parameters about your setup. Specifically, you need\nto decide where to install Solr and which system user should be the owner of the Solr files and process.",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script"
    ],
    "pageId": 73
  },
  {
    "content": "We recommend separating your live Solr files, such as logs and index files, from the files included in the Solr\ndistribution bundle, as that makes it easier to upgrade Solr and is considered a good practice to follow as a\nsystem administrator.",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script",
      "Planning Your Directory Structure"
    ],
    "pageId": 73
  },
  {
    "content": "By default, the service installation script will extract the distribution archive into <span class=\"code\">/opt</span>. You can change this\nlocation using the <span class=\"code\">-i</span> option when running the installation script. The script will also create a symbolic link to\nthe versioned directory of Solr. For instance, if you run the installation script for Solr 7.3.0, then the following\ndirectory structure will be used:",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script",
      "Planning Your Directory Structure",
      "Solr Installation Directory"
    ],
    "pageId": 73
  },
  {
    "content": "/opt/solr-7.3.0\n/opt/solr -> /opt/solr-7.3.0",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script",
      "Planning Your Directory Structure",
      "Solr Installation Directory"
    ],
    "pageId": 73
  },
  {
    "content": "Using a symbolic link insulates any scripts from being dependent on the specific Solr version. If, down the\nroad, you need to upgrade to a later version of Solr, you can just update the symbolic link to point to the\nupgraded version of Solr. We'll use <span class=\"code\">/opt/solr</span> to refer to the Solr installation directory in the remaining\nsections of this page.",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script",
      "Planning Your Directory Structure",
      "Solr Installation Directory"
    ],
    "pageId": 73
  },
  {
    "content": "You should also separate writable Solr files into a different directory; by default, the installation script uses\n/var/solr<span class=\"ff2 fs1\">, but you can override this location using the </span>-d<span class=\"ff2 fs1\"> option. With this approach, the files in </span>/opt/solr\nwill remain untouched and all files that change while Solr is running will live under <span class=\"code\">/var/solr</span>.",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script",
      "Planning Your Directory Structure",
      "Separate Directory for Writable Files"
    ],
    "pageId": 73
  },
  {
    "content": "Running Solr as <span class=\"code\">root</span> is not recommended for security reasons, and the <span class=\"link\">controlÊscript</span> start command will\nrefuse to do so. Consequently, you should determine the username of a system user that will own all of the\nSolr files and the running Solr process. By default, the installation script will create the <span class=\"ff1\">solr</span> user, but you can\noverride this setting using the -u option. If your organization has specific requirements for creating new\nuser accounts, then you should create the user before running the script. The installation script will make\nthe Solr user the owner of the <span class=\"code\">/opt/solr</span> and <span class=\"code\">/var/solr</span> directories.",
    "hierarchy": [
      "Taking Solr to Production",
      "Service Installation Script",
      "Create the Solr User"
    ],
    "pageId": 73
  },
  {
    "content": "You are now ready to run the installation script.",
    "hierarchy": [
    ],
    "pageId": 74
  },
  {
    "content": "To run the script, you'll need to download the latest Solr distribution archive and then do the following:",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "tar xzf solr-7.3.0.tgz solr-7.3.0/bin/install_solr_service.sh --strip-components=2",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "The previous command extracts the <span class=\"code\">install_solr_service.sh</span> script from the archive into the current\ndirectory. If installing on Red Hat, please make sure <span class=\"ff2\">lsof</span> is installed before running the Solr installation\nscript (<span class=\"code\">sudo yum install lsof</span>). The installation script must be run as root:",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "sudo bash ./install_solr_service.sh solr-7.3.0.tgz",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "By default, the script extracts the distribution archive into <span class=\"code\">/opt</span>, configures Solr to write files into <span class=\"code\">/var/solr</span>,\nand runs Solr as the <span class=\"code\">solr</span> user. Consequently, the following command produces the same result as the\nprevious command:",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "sudo bash ./install_solr_service.sh solr-7.3.0.tgz -i /opt -d /var/solr -u solr -s solr -p 8983",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "You can customize the service name, installation directories, port, and owner using options passed to the\ninstallation script. To see available options, simply do:",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "sudo bash ./install_solr_service.sh -help",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "Once the script completes, Solr will be installed as a service and running in the background on your server\n(on port 8983). To verify, you can do:",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "sudo service solr status",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "If you do not want to start the service immediately, pass the <span class=\"code\">-n</span> option. You can then start the service\nmanually later, e.g., after completing the configuration setup.",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "We'll cover some additional configuration settings you can make to fine-tune your Solr setup in a moment.\nBefore moving on, let’s take a closer look at the steps performed by the installation script. This gives you a\nbetter overview and will help you understand important details about your Solr installation when reading\nother pages in this guide; such as when a page refers to Solr home, you’ll know exactly where that is on your\nsystem.",
    "hierarchy": [
      "Run the Solr Installation Script"
    ],
    "pageId": 74
  },
  {
    "content": "The Solr home directory (not to be confused with the Solr installation directory) is where Solr manages core\ndirectories with index files. By default, the installation script uses <span class=\"code\">/var/solr/data</span>. If the <span class=\"code\">-d</span> option is used on\nthe install script, then this will change to the <span class=\"code\">data</span> subdirectory in the location given to the -d option. Take a\nmoment to inspect the contents of the Solr home directory on your system. If you do not <span class=\"link\">store </span><span class=\"code\">solr.xml</span><span class=\"link\"> in</span>\nZooKeeper<span class=\"fc0\">, the home directory must contain a <span class=\"code\">solr.xml</span> file. When Solr starts up, the Solr Control Script</span>",
    "hierarchy": [
      "Run the Solr Installation Script",
      "Solr Home Directory"
    ],
    "pageId": 74
  },
  {
    "content": "passes the location of the home directory using the <span class=\"ff2 fs1\">-Dsolr.solr.home=…</span> system property.",
    "hierarchy": [
    ],
    "pageId": 75
  },
  {
    "content": "The service installation script creates an environment specific include file that overrides defaults used by the\nbin/solr<span class=\"ff1 fs0\"> script. The main advantage of using an include file is that it provides a single location where all of</span>\nyour environment-specific overrides are defined. Take a moment to inspect the contents of the\n/etc/default/solr.in.sh<span class=\"ff1 fs0\"> file, which is the default path setup by the installation script. If you used the </span>-s\noption on the install script to change the name of the service, then the first part of the filename will be\ndifferent. For a service named <span class=\"ff2 fs1\">solr-demo</span>, the file will be named <span class=\"ff2 fs1\">/etc/default/solr-demo.in.sh</span>. There are\nmany settings that you can override using this file. However, at a minimum, this script needs to define the\nSOLR_PID_DIR<span class=\"ff1 fs0\"> and </span>SOLR_HOME<span class=\"ff1 fs0\"> variables, such as:</span>",
    "hierarchy": [
      "Environment Overrides Include File"
    ],
    "pageId": 75
  },
  {
    "content": "SOLR_PID_DIR=/var/solr\nSOLR_HOME=/var/solr/data",
    "hierarchy": [
      "Environment Overrides Include File"
    ],
    "pageId": 75
  },
  {
    "content": "The <span class=\"ff2 fs1\">SOLR_PID_DIR</span> variable sets the directory where the <span class=\"link\">control script</span> will write out a file containing the Solr\nserver's process ID.",
    "hierarchy": [
      "Environment Overrides Include File"
    ],
    "pageId": 75
  },
  {
    "content": "Solr uses Apache Log4J for logging. The installation script copies\n/opt/solr/server/resources/log4j.properties<span class=\"ff1 fs0\"> to </span>/var/solr/log4j.properties<span class=\"ff1 fs0\">. Take a moment to</span>\nverify that the Solr include file is configured to send logs to the correct location by checking the following\nsettings in <span class=\"ff2 fs1\">/etc/default/solr.in.sh</span>:",
    "hierarchy": [
      "Log Settings"
    ],
    "pageId": 75
  },
  {
    "content": "LOG4J_PROPS=/var/solr/log4j.properties\nSOLR_LOGS_DIR=/var/solr/logs",
    "hierarchy": [
      "Log Settings"
    ],
    "pageId": 75
  },
  {
    "content": "For more information about Log4J configuration, please see: <span class=\"link\">Configuring Logging</span>",
    "hierarchy": [
      "Log Settings"
    ],
    "pageId": 75
  },
  {
    "content": "When running a service like Solr on Linux, it's common to setup an init.d script so that system administrators\ncan control Solr using the service tool, such as: <span class=\"ff2 fs1\">service solr start</span>. The installation script creates a very\nbasic init.d script to help you get started. Take a moment to inspect the <span class=\"ff2 fs1\">/etc/init.d/solr</span> file, which is the\ndefault script name setup by the installation script. If you used the <span class=\"ff2 fs1\">-s</span> option on the install script to change\nthe name of the service, then the filename will be different. Notice that the following variables are setup for\nyour environment based on the parameters passed to the installation script:",
    "hierarchy": [
      "init.d Script"
    ],
    "pageId": 75
  },
  {
    "content": "SOLR_INSTALL_DIR=/opt/solr\nSOLR_ENV=/etc/default/solr.in.sh\nRUNAS=solr",
    "hierarchy": [
      "init.d Script"
    ],
    "pageId": 75
  },
  {
    "content": "The <span class=\"ff2 fs1\">SOLR_INSTALL_DIR</span> and <span class=\"ff2 fs1\">SOLR_ENV</span> variables should be self-explanatory. The <span class=\"ff2 fs1\">RUNAS</span> variable sets the\nowner of the Solr process, such as <span class=\"ff2 fs1\">solr</span>; if you don't set this value, the script will run Solr as <span class=\"code\">root</span>, which is\nnot recommended for production. You can use the <span class=\"ff2 fs1\">/etc/init.d/solr</span> script to start Solr by doing the\nfollowing as root:",
    "hierarchy": [
      "init.d Script"
    ],
    "pageId": 75
  },
  {
    "content": "service solr start",
    "hierarchy": [
    ],
    "pageId": 76
  },
  {
    "content": "The <span class=\"ff1 fs1\">/etc/init.d/solr</span> script also supports the <span class=\"code\">stop</span>, <span class=\"code\">restart</span>, and <span class=\"code\">status</span> commands. Please keep in mind\nthat the init script that ships with Solr is very basic and is intended to show you how to setup Solr as a\nservice. However, it's also common to use more advanced tools like <span class=\"code\">supervisord</span> or <span class=\"code\">upstart</span> to control Solr\nas a service on Linux. While showing how to integrate Solr with tools like supervisord is beyond the scope of\nthis guide, the <span class=\"ff1 fs1\">init.d/solr</span> script should provide enough guidance to help you get started. Also, the\ninstallation script sets the Solr service to start automatically when the host machine initializes.",
    "hierarchy": [
    ],
    "pageId": 76
  },
  {
    "content": "In the next section, we cover some additional environment settings to help you fine-tune your production\nsetup. However, before we move on, let's review what we’ve achieved thus far. Specifically, you should be\nable to control Solr using <span class=\"ff1 fs1\">/etc/init.d/solr</span>. Please verify the following commands work with your setup:",
    "hierarchy": [
      "Progress Check"
    ],
    "pageId": 76
  },
  {
    "content": "sudo service solr restart\nsudo service solr status",
    "hierarchy": [
      "Progress Check"
    ],
    "pageId": 76
  },
  {
    "content": "The status command should give some basic information about the running Solr node that looks similar to:",
    "hierarchy": [
      "Progress Check"
    ],
    "pageId": 76
  },
  {
    "content": "Solr process PID running on port 8983\n{\nÊ \"version\":\"5.0.0 - ubuntu - 2014-12-17 19:36:58\",\nÊ \"startTime\":\"2014-12-19T19:25:46.853Z\",\nÊ \"uptime\":\"0 days, 0 hours, 0 minutes, 8 seconds\",\nÊ \"memory\":\"85.4 MB (%17.4) of 490.7 MB\"}",
    "hierarchy": [
      "Progress Check"
    ],
    "pageId": 76
  },
  {
    "content": "If the <span class=\"ff1 fs1\">status</span> command is not successful, look for error messages in <span class=\"ff1 fs1\">/var/solr/logs/solr.log</span>.",
    "hierarchy": [
      "Progress Check"
    ],
    "pageId": 76
  },
  {
    "content": "The Merge Scheduler is configured in <span class=\"ff1 fs1\">solrconfig.xml</span> and defaults to <span class=\"ff1 fs1\">ConcurrentMergeScheduler</span>. This\nscheduler uses multiple threads to merge Lucene segments in the background.",
    "hierarchy": [
      "Fine-Tune Your Production Setup",
      "Dynamic Defaults for ConcurrentMergeScheduler"
    ],
    "pageId": 76
  },
  {
    "content": "By default, the <span class=\"ff1 fs1\">ConcurrentMergeScheduler</span> auto-detects whether the underlying disk drive is rotational or a\nSSD and sets defaults for <span class=\"ff1 fs1\">maxThreadCount</span> and <span class=\"ff1 fs1\">maxMergeCount</span> accordingly. If the disk drive is determined to\nbe rotational then the <span class=\"ff1 fs1\">maxThreadCount</span> is set to 1 and <span class=\"ff1 fs1\">maxMergeCount</span> is set to 6. Otherwise, <span class=\"ff1 fs1\">maxThreadCount</span>\nis set to 4 or half the number of processors available to the JVM whichever is greater and <span class=\"ff1 fs1\">maxMergeCount</span> is\nset to <span class=\"ff1 fs1\">maxThreadCount+5</span>.",
    "hierarchy": [
      "Fine-Tune Your Production Setup",
      "Dynamic Defaults for ConcurrentMergeScheduler"
    ],
    "pageId": 76
  },
  {
    "content": "This auto-detection works only on Linux and even then it is not guaranteed to be correct. On all other\nplatforms, the disk is assumed to be rotational. Therefore, if the auto-detection fails or is incorrect then\nindexing performance can suffer badly due to the wrong defaults.",
    "hierarchy": [
      "Fine-Tune Your Production Setup",
      "Dynamic Defaults for ConcurrentMergeScheduler"
    ],
    "pageId": 76
  },
  {
    "content": "The auto-detected value is exposed by the <span class=\"link\">Metrics API</span> with the key",
    "hierarchy": [
      "Fine-Tune Your Production Setup",
      "Dynamic Defaults for ConcurrentMergeScheduler"
    ],
    "pageId": 76
  },
  {
    "content": "solr.node:CONTAINER.fs.coreRoot.spins<span class=\"ff2 fs1\">. A value of </span>true<span class=\"ff2 fs1\"> denotes that the disk is detected to be a</span>\nrotational or spinning disk.",
    "hierarchy": [
    ],
    "pageId": 77
  },
  {
    "content": "It is safer to explicitly set values for <span class=\"ff1 fs0\">maxThreadCount</span> and <span class=\"ff1 fs0\">maxMergeCount</span> in the <span class=\"link\">IndexConfig section of</span>\nSolrConfig.xml<span class=\"fc0\"> so that values appropriate to your hardware are used.</span>",
    "hierarchy": [
    ],
    "pageId": 77
  },
  {
    "content": "Alternatively, the boolean system property <span class=\"ff1 fs0\">lucene.cms.override_spins</span> can be set in the <span class=\"ff1 fs0\">SOLR_OPTS</span>\nvariable in the include file to override the auto-detected value. Similarily, the system property\nlucene.cms.override_core_count<span class=\"ff2 fs1\"> can be set to the number of CPU cores to override the auto-detected</span>\nprocessor count.",
    "hierarchy": [
    ],
    "pageId": 77
  },
  {
    "content": "By default, the <span class=\"ff1 fs0\">bin/solr</span> script sets the maximum Java heap size to 512M (-Xmx512m), which is fine for\ngetting started with Solr. For production, you'll want to increase the maximum heap size based on the\nmemory requirements of your search application; values between 10 and 20 gigabytes are not uncommon\nfor production servers. When you need to change the memory settings for your Solr server, use the\nSOLR_JAVA_MEM<span class=\"ff2 fs1\"> variable in the include file, such as:</span>",
    "hierarchy": [
      "Memory and GC Settings"
    ],
    "pageId": 77
  },
  {
    "content": "SOLR_JAVA_MEM=\"-Xms10g -Xmx10g\"",
    "hierarchy": [
      "Memory and GC Settings"
    ],
    "pageId": 77
  },
  {
    "content": "Also, the <span class=\"link\">Solr Control Script</span> comes with a set of pre-configured Java Garbage Collection settings that have\nshown to work well with Solr for a number of different workloads. However, these settings may not work\nwell for your specific use of Solr. Consequently, you may need to change the GC settings, which should also\nbe done with the <span class=\"ff1 fs0\">GC_TUNE</span> variable in the <span class=\"ff1 fs0\">/etc/default/solr.in.sh</span> include file. For more information about\ntuning your memory and garbage collection settings, see: <span class=\"link\">JVM Settings</span>.",
    "hierarchy": [
      "Memory and GC Settings"
    ],
    "pageId": 77
  },
  {
    "content": "The <span class=\"ff1 fs0\">bin/solr</span> script registers the <span class=\"ff1 fs0\">bin/oom_solr.sh</span> script to be called by the JVM if an OutOfMemoryError\noccurs. The <span class=\"ff1 fs0\">oom_solr.sh</span> script will issue a <span class=\"ff1 fs0\">kill -9</span> to the Solr process that experiences the\nOutOfMemoryError<span class=\"ff2 fs1\">. This behavior is recommended when running in SolrCloud mode so that ZooKeeper is</span>\nimmediately notified that a node has experienced a non-recoverable error. Take a moment to inspect the\ncontents of the <span class=\"ff1 fs0\">/opt/solr/bin/oom_solr.sh</span> script so that you are familiar with the actions the script will\nperform if it is invoked by the JVM.",
    "hierarchy": [
      "Memory and GC Settings",
      "Out-of-Memory Shutdown Hook"
    ],
    "pageId": 77
  },
  {
    "content": "To run Solr in SolrCloud mode, you need to set the <span class=\"ff1 fs0\">ZK_HOST</span> variable in the include file to point to your\nZooKeeper ensemble. Running the embedded ZooKeeper is not supported in production environments. For\ninstance, if you have a ZooKeeper ensemble hosted on the following three hosts on the default client port\n2181 (zk1, zk2, and zk3), then you would set:",
    "hierarchy": [
      "Going to Production with SolrCloud"
    ],
    "pageId": 77
  },
  {
    "content": "ZK_HOST=zk1,zk2,zk3",
    "hierarchy": [
      "Going to Production with SolrCloud"
    ],
    "pageId": 77
  },
  {
    "content": "When the <span class=\"ff1 fs0\">ZK_HOST</span> variable is set, Solr will launch in \"cloud\" mode.",
    "hierarchy": [
      "Going to Production with SolrCloud"
    ],
    "pageId": 77
  },
  {
    "content": "If you're using a ZooKeeper instance that is shared by other systems, it’s recommended to isolate the\nSolrCloud znode tree using ZooKeeper’s chroot support. For instance, to ensure all znodes created by\nSolrCloud are stored under <span class=\"code\">/solr</span>, you can put <span class=\"code\">/solr</span> on the end of your <span class=\"code\">ZK_HOST</span> connection string, such as:",
    "hierarchy": [
      "ZooKeeper chroot"
    ],
    "pageId": 78
  },
  {
    "content": "ZK_HOST=zk1,zk2,zk3/solr",
    "hierarchy": [
      "ZooKeeper chroot"
    ],
    "pageId": 78
  },
  {
    "content": "Before using a chroot for the first time, you need to create the root path (znode) in ZooKeeper by using the\nSolr Control Script<span class=\"fc1\">. We can use the mkroot command for that:</span>",
    "hierarchy": [
      "ZooKeeper chroot"
    ],
    "pageId": 78
  },
  {
    "content": "bin/solr zk mkroot /solr -z <ZK_node>:<ZK_PORT>",
    "hierarchy": [
      "ZooKeeper chroot"
    ],
    "pageId": 78
  },
  {
    "content": "If you also want to bootstrap ZooKeeper with existing <span class=\"code\">solr_home</span>, you can instead use the\nzkcli.sh<span class=\"ff2 fs0\"> / </span>zkcli.bat<span class=\"ff2 fs0\"> </span>bootstrap<span class=\"ff2 fs0\"> command, which will also create the chroot path if it does</span>\nnot exist. See <span class=\"link\">Command Line Utilities</span> for more info.",
    "hierarchy": [
      "ZooKeeper chroot"
    ],
    "pageId": 78
  },
  {
    "content": "Use the <span class=\"code\">SOLR_HOST</span> variable in the include file to set the hostname of the Solr server.",
    "hierarchy": [
      "Solr Hostname"
    ],
    "pageId": 78
  },
  {
    "content": "SOLR_HOST=solr1.example.com",
    "hierarchy": [
      "Solr Hostname"
    ],
    "pageId": 78
  },
  {
    "content": "Setting the hostname of the Solr server is recommended, especially when running in SolrCloud mode, as this\ndetermines the address of the node when it registers with ZooKeeper.",
    "hierarchy": [
      "Solr Hostname"
    ],
    "pageId": 78
  },
  {
    "content": "Solr allows configuration properties to be overridden using Java system properties passed at startup using\nthe <span class=\"code\">-Dproperty=value</span> syntax. For instance, in <span class=\"code\">solrconfig.xml</span>, the default auto soft commit settings are set\nto:",
    "hierarchy": [
      "Override Settings in solrconfig.xml"
    ],
    "pageId": 78
  },
  {
    "content": "Ê <span class=\"fc4\"><maxTime></span>${solr.autoSoftCommit.maxTime:-1}<span class=\"fc4\"></maxTime></span>",
    "hierarchy": [
      "Override Settings in solrconfig.xml"
    ],
    "pageId": 78
  },
  {
    "content": "In general, whenever you see a property in a Solr configuration file that uses the\n${solr.PROPERTY:DEFAULT_VALUE}<span class=\"ff2 fs0\"> syntax, then you know it can be overridden using a Java system property.</span>\nFor instance, to set the maxTime for soft-commits to be 10 seconds, then you can start Solr with\n-Dsolr.autoSoftCommit.maxTime=10000<span class=\"ff2 fs0\">, such as:</span>",
    "hierarchy": [
      "Override Settings in solrconfig.xml"
    ],
    "pageId": 78
  },
  {
    "content": "bin/solr start -Dsolr.autoSoftCommit.maxTime=10000",
    "hierarchy": [
      "Override Settings in solrconfig.xml"
    ],
    "pageId": 78
  },
  {
    "content": "The <span class=\"code\">bin/solr</span> script simply passes options starting with <span class=\"code\">-D</span> on to the JVM during startup. For running in\nproduction, we recommend setting these properties in the <span class=\"code\">SOLR_OPTS</span> variable defined in the include file.",
    "hierarchy": [
      "Override Settings in solrconfig.xml"
    ],
    "pageId": 78
  },
  {
    "content": "Keeping with our soft-commit example, in <span class=\"ff2 fs1\">/etc/default/solr.in.sh</span>, you would do:",
    "hierarchy": [
    ],
    "pageId": 79
  },
  {
    "content": "SOLR_OPTS=\"$SOLR_OPTS -Dsolr.autoSoftCommit.maxTime=10000\"",
    "hierarchy": [
    ],
    "pageId": 79
  },
  {
    "content": "Two common settings that result in errors on *nix systems are file handles and user processes.",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "It is common for the default limits for number of processes and file handles to default to values that are too\nlow for a large Solr installation. The required number of each of these will increase based on a combination\nof the number of replicas hosted per node and the number of segments in the index for each replica.",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "The usual recommendation is to make processes and file handles at least 65,000 each, unlimited if possible.\nOn most *nix systems, this command will show the currently-defined limits:",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "ulimit -a",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "It is strongly recommended that file handle and process limits be permanently raised as above. The exact\nform of the command will vary per operating system, and some systems require editing configuration files\nand restarting your server. Consult your system administrators for guidance in your particular environment.",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "If these limits are exceeded, the problems reported by Solr vary depending on the specific\noperation responsible for exceeding the limit. Errors such as \"too many open files\",\n\"connection error\", and \"max processes exceeded\" have been reported, as well as\nSolrCloud recovery failures.",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "Since exceeding these limits can result in such varied symptoms it is <span class=\"ff5\">strongly</span> recommended\nthat these limits be permanently raised as recommended above.",
    "hierarchy": [
      "File Handles and Processes (ulimit settings)"
    ],
    "pageId": 79
  },
  {
    "content": "The <span class=\"ff2 fs1\">bin/solr</span> script is capable of running multiple instances on one machine, but for a <span class=\"code\">typical</span> installation,\nthis is not a recommended setup. Extra CPU and memory resources are required for each additional\ninstance. A single instance is easily capable of handling multiple indexes.",
    "hierarchy": [
      "Running Multiple Solr Nodes per Host"
    ],
    "pageId": 79
  },
  {
    "content": "For every recommendation, there are exceptions. For the recommendation above, that\nexception is mostly applicable when discussing extreme scalability. The best reason for\nrunning multiple Solr nodes on one host is decreasing the need for extremely large heaps.",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "When the Java heap gets very large, it can result in extremely long garbage collection\npauses, even with the GC tuning that the startup script provides by default. The exact point\nat which the heap is considered \"very large\" will vary depending on how Solr is used. This\nmeans that there is no hard number that can be given as a threshold, but if your heap is\nreaching the neighborhood of 16 to 32 gigabytes, it might be time to consider splitting\nnodes. Ideally this would mean more machines, but budget constraints might make that\nimpossible.",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "There is another issue once the heap reaches 32GB. Below 32GB, Java is able to use\ncompressed pointers, but above that point, larger pointers are required, which uses more\nmemory and slows down the JVM.",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "Because of the potential garbage collection issues and the particular issues that happen at\n32GB, if a single instance would require a 64GB heap, performance is likely to improve\ngreatly if the machine is set up with two nodes that each have a 31GB heap.",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "If your use case requires multiple instances, at a minimum you will need unique Solr home directories for\neach node you want to run; ideally, each home should be on a different physical disk so that multiple Solr\nnodes don't have to compete with each other when accessing files on disk. Having different Solr home\ndirectories implies that you’ll need a different include file for each node. Moreover, if using the\n/etc/init.d/solr<span class=\"code\"> script to control Solr as a service, then you’ll need a separate script for each node. The</span>\neasiest approach is to use the service installation script to add multiple services on the same host, such as:",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "sudo bash ./install_solr_service.sh solr-7.3.0.tgz -s solr2 -p 8984",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "The command shown above will add a service named <span class=\"ff4 fs2\">solr2</span> running on port 8984 using <span class=\"ff4 fs2\">/var/solr2</span> for\nwritable (aka \"live\") files; the second server will still be owned and run by the <span class=\"ff4 fs2\">solr</span> user and will use the Solr\ndistribution files in <span class=\"ff4 fs2\">/opt</span>. After installing the solr2 service, verify it works correctly by doing:",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "sudo service solr2 restart\nsudo service solr2 status",
    "hierarchy": [
    ],
    "pageId": 80
  },
  {
    "content": "If you are worried about data loss, and of course you <span class=\"code\">should</span> be, you need a way to back up your Solr indexes\nso that you can recover quickly in case of catastrophic failure.",
    "hierarchy": [
      "Making and Restoring Backups"
    ],
    "pageId": 81
  },
  {
    "content": "Solr provides two approaches to backing up and restoring Solr cores or collections, depending on how you\nare running Solr. If you run in SolrCloud mode, you will use the Collections API. If you run Solr in standalone\nmode, you will use the replication handler.",
    "hierarchy": [
      "Making and Restoring Backups"
    ],
    "pageId": 81
  },
  {
    "content": "Support for backups when running SolrCloud is provided with the <span class=\"link\">Collections API</span>. This allows the backups to\nbe generated across multiple shards, and restored to the same number of shards and replicas as the\noriginal collection.",
    "hierarchy": [
      "Making and Restoring Backups",
      "SolrCloud Backups"
    ],
    "pageId": 81
  },
  {
    "content": "Two commands are available:",
    "hierarchy": [
      "Making and Restoring Backups",
      "SolrCloud Backups"
    ],
    "pageId": 81
  },
  {
    "content": "action=BACKUP: This command backs up Solr indexes and configurations. More information is available\nin the section <span class=\"link\">Backup Collection</span>.",
    "hierarchy": [
      "Making and Restoring Backups",
      "SolrCloud Backups"
    ],
    "pageId": 81
  },
  {
    "content": "action=RESTORE: This command restores Solr indexes and configurations. More information is available\nin the section <span class=\"link\">Restore Collection</span>.",
    "hierarchy": [
      "Making and Restoring Backups",
      "SolrCloud Backups"
    ],
    "pageId": 81
  },
  {
    "content": "Backups and restoration uses Solr's replication handler. Out of the box, Solr includes implicit support for\nreplication so this API can be used. Configuration of the replication handler can, however, be customized by\ndefining your own replication handler in <span class=\"ff4 fs3\">solrconfig.xml</span>. For details on configuring the replication handler,\nsee the section <span class=\"link\">Configuring the ReplicationHandler</span>.",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups"
    ],
    "pageId": 81
  },
  {
    "content": "The <span class=\"ff4 fs3\">backup</span> API requires sending a command to the <span class=\"ff4 fs3\">/replication</span> handler to back up the system.",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "You can trigger a back-up with an HTTP command like this (replace \"gettingstarted\" with the name of the\ncore you are working with):",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/replication?command=backup",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "The <span class=\"ff4 fs3\">backup</span> command is an asynchronous call, and it will represent data from the latest index commit point.\nAll indexing and search operations will continue to be executed against the index as usual.",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "Only one backup call can be made against a core at any point in time. While an ongoing backup operation is\nhappening subsequent calls for restoring will throw an exception.",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "The backup request can also take the following additional parameters:",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "location",
    "hierarchy": [
      "Making and Restoring Backups",
      "Standalone Mode Backups",
      "Backup API"
    ],
    "pageId": 81
  },
  {
    "content": "The path where the backup will be created. If the path is not absolute then the backup path will be\nrelative to Solr's instance directory. |name |The snapshot will be created in a directory called\nsnapshot.<name><span class=\"ff1 fs0\">. If a name is not specified then the directory name would have the following format:</span>\nsnapshot.<yyyyMMddHHmmssSSS><span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 82
  },
  {
    "content": "numberToKeep\nThe number of backups to keep. If <span class=\"ff2 fs1\">maxNumberOfBackups</span> has been specified on the replication handler in\nsolrconfig.xml<span class=\"ff1 fs0\">, </span>maxNumberOfBackups<span class=\"ff1 fs0\"> is always used and attempts to use </span>numberToKeep<span class=\"ff1 fs0\"> will cause an</span>\nerror. Also, this parameter is not taken into consideration if the backup name is specified. More\ninformation about <span class=\"ff2 fs1\">maxNumberOfBackups</span> can be found in the section <span class=\"link\">Configuring the ReplicationHandler</span>.",
    "hierarchy": [
    ],
    "pageId": 82
  },
  {
    "content": "repository\nThe name of the repository to be used for the backup. If no repository is specified then the local\nfilesystem repository will be used automatically.",
    "hierarchy": [
    ],
    "pageId": 82
  },
  {
    "content": "commitName\nThe name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command.",
    "hierarchy": [
    ],
    "pageId": 82
  },
  {
    "content": "The <span class=\"ff2 fs1\">backup</span> operation can be monitored to see if it has completed by sending the <span class=\"ff2 fs1\">details</span> command to the\n/replication<span class=\"ff1 fs0\"> handler, as in this example:</span>",
    "hierarchy": [
      "Backup Status"
    ],
    "pageId": 82
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/replication?command=details&wt=xml",
    "hierarchy": [
      "Backup Status"
    ],
    "pageId": 82
  },
  {
    "content": "Ê <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"startTime\"<span class=\"fc4\">></span></span>Sun Apr 12 16:22:50 DAVT 2015<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><int</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"fileCount\"<span class=\"fc4\">></span></span>10<span class=\"fc4\"></int></span>\nÊ <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"status\"<span class=\"fc4\">></span></span>success<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"snapshotCompletedAt\"<span class=\"fc4\">></span></span>Sun Apr 12 16:22:50 DAVT 2015<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"snapshotName\"<span class=\"fc4\">></span></span>my_backup<span class=\"fc4\"></str></span>",
    "hierarchy": [
      "Backup Status"
    ],
    "pageId": 82
  },
  {
    "content": "If it failed then a <span class=\"ff2 fs1\">snapShootException</span> will be sent in the response.",
    "hierarchy": [
      "Backup Status"
    ],
    "pageId": 82
  },
  {
    "content": "Restoring the backup requires sending the <span class=\"ff2 fs1\">restore</span> command to the <span class=\"ff2 fs1\">/replication</span> handler, followed by the\nname of the backup to restore.",
    "hierarchy": [
      "Restore API"
    ],
    "pageId": 82
  },
  {
    "content": "You can restore from a backup with a command like this:",
    "hierarchy": [
      "Restore API"
    ],
    "pageId": 82
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/replication?command=restore&name=backup_name",
    "hierarchy": [
      "Restore API"
    ],
    "pageId": 82
  },
  {
    "content": "This will restore the named index snapshot into the current core. Searches will start reflecting the snapshot\ndata once the restore is complete.",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "The <span class=\"ff2 fs1\">restore</span> request can take these additional parameters:",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "location\nThe location of the backup snapshot file. If not specified, it looks for backups in Solr's data directory.",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "name\nThe name of the backed up index snapshot to be restored. If the name is not provided it looks for\nbackups with <span class=\"ff2 fs1\">snapshot.<timestamp></span> format in the location directory. It picks the latest timestamp\nbackup in that case.",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "repository\nThe name of the repository to be used for the backup. If no repository is specified then the local\nfilesystem repository will be used automatically.",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "The <span class=\"ff2 fs1\">restore</span> command is an asynchronous call. Once the restore is complete the data reflected will be of the\nbacked up index which was restored.",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "Only one <span class=\"ff2 fs1\">restore</span> call can can be made against a core at one point in time. While an ongoing restore\noperation is happening subsequent calls for restoring will throw an exception.",
    "hierarchy": [
    ],
    "pageId": 83
  },
  {
    "content": "You can also check the status of a <span class=\"ff2 fs1\">restore</span> operation by sending the <span class=\"ff2 fs1\">restorestatus</span> command to the\n/replication<span class=\"ff1 fs0\"> handler, as in this example:</span>",
    "hierarchy": [
      "Restore Status API"
    ],
    "pageId": 83
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/replication?command=restorestatus&wt=xml",
    "hierarchy": [
      "Restore Status API"
    ],
    "pageId": 83
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"restorestatus\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"snapshotName\"<span class=\"fc3\">></span></span>snapshot.<span class=\"fc3\"><name></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>success<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Restore Status API"
    ],
    "pageId": 83
  },
  {
    "content": "The status value can be \"In Progress\", \"success\" or \"failed\". If it failed then an \"exception\" will also be sent\nin the response.",
    "hierarchy": [
      "Restore Status API"
    ],
    "pageId": 83
  },
  {
    "content": "The snapshot functionality is different from the backup functionality as the index files aren't copied",
    "hierarchy": [
      "Create Snapshot API"
    ],
    "pageId": 83
  },
  {
    "content": "anywhere. The index files are snapshotted in the same index directory and can be referenced while taking\nbackups.",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "You can trigger a snapshot command with an HTTP command like this (replace \"techproducts\" with the\nname of the core you are working with):",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=CREATESNAPSHOT&core=techproducts&commitName=commit1",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "The <span class=\"code\">CREATESNAPSHOT</span> request parameters are:",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "commitName\nThe name to store the snapshot as.",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "core\nThe name of the core to perform the snapshot on.",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
    ],
    "pageId": 84
  },
  {
    "content": "The <span class=\"code\">LISTSNAPSHOTS</span> command lists all the taken snapshots for a particular core.",
    "hierarchy": [
      "List Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "You can trigger a list snapshot command with an HTTP command like this (replace \"techproducts\" with the\nname of the core you are working with):",
    "hierarchy": [
      "List Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=LISTSNAPSHOTS&core=techproducts&commitName=commit1",
    "hierarchy": [
      "List Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "The list snapshot request parameters are:",
    "hierarchy": [
      "List Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "core\nThe name of the core to whose snapshots we want to list.",
    "hierarchy": [
      "List Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
      "List Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "The <span class=\"code\">DELETESNAPSHOT</span> command deletes a snapshot for a particular core.",
    "hierarchy": [
      "Delete Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "You can trigger a delete snapshot with an HTTP command like this (replace \"techproducts\" with the name of\nthe core you are working with):",
    "hierarchy": [
      "Delete Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=DELETESNAPSHOT&core=techproducts&commitName=commit1",
    "hierarchy": [
      "Delete Snapshot API"
    ],
    "pageId": 84
  },
  {
    "content": "The delete snapshot request parameters are:",
    "hierarchy": [
    ],
    "pageId": 85
  },
  {
    "content": "commitName\nSpecify the commit name to be deleted",
    "hierarchy": [
    ],
    "pageId": 85
  },
  {
    "content": "core\nThe name of the core whose snapshot we want to delete",
    "hierarchy": [
    ],
    "pageId": 85
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously",
    "hierarchy": [
    ],
    "pageId": 85
  },
  {
    "content": "Solr provides interfaces to plug different storage systems for backing up and restoring. For example, you\ncan have a Solr cluster running on a local filesystem like EXT3 but you can backup the indexes to a HDFS\nfilesystem or vice versa.",
    "hierarchy": [
      "Backup/Restore Storage Repositories"
    ],
    "pageId": 85
  },
  {
    "content": "The repository interfaces needs to be configured in the <span class=\"ff2 fs1\">solr.xml</span> file. While running backup/restore\ncommands we can specify the repository to be used.",
    "hierarchy": [
      "Backup/Restore Storage Repositories"
    ],
    "pageId": 85
  },
  {
    "content": "If no repository is configured then the local filesystem repository will be used automatically.",
    "hierarchy": [
      "Backup/Restore Storage Repositories"
    ],
    "pageId": 85
  },
  {
    "content": "Example <span class=\"ff2 fs1\">solr.xml</span> section to configure a repository like <span class=\"link\">HDFS</span>:",
    "hierarchy": [
      "Backup/Restore Storage Repositories"
    ],
    "pageId": 85
  },
  {
    "content": "Ê <span class=\"fc3\"><repository</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"hdfs\"</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"org.apache.solr.core.backup.repository.HdfsBackupRepository\"</span>",
    "hierarchy": [
      "Backup/Restore Storage Repositories"
    ],
    "pageId": 85
  },
  {
    "content": "Ê   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"location\"<span class=\"fc3\">></span></span>${solr.hdfs.default.backup.path}<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"solr.hdfs.home\"<span class=\"fc3\">></span></span>${solr.hdfs.home:}<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"solr.hdfs.confdir\"<span class=\"fc3\">></span></span>${solr.hdfs.confdir:}<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></repository></span>",
    "hierarchy": [
      "Backup/Restore Storage Repositories"
    ],
    "pageId": 85
  },
  {
    "content": "Solr has support for writing and reading its index and transaction log files to the HDFS distributed\nfilesystem.",
    "hierarchy": [
      "Running Solr on HDFS"
    ],
    "pageId": 86
  },
  {
    "content": "This does not use Hadoop MapReduce to process Solr data, rather it only uses the HDFS filesystem for index\nand transaction log file storage.",
    "hierarchy": [
      "Running Solr on HDFS"
    ],
    "pageId": 86
  },
  {
    "content": "To use HDFS rather than a local filesystem, you must be using Hadoop 2.x and you will need to instruct Solr\nto use the <span class=\"code\">HdfsDirectoryFactory</span>. There are also several additional parameters to define. These can be set\nin one of three ways:",
    "hierarchy": [
      "Running Solr on HDFS"
    ],
    "pageId": 86
  },
  {
    "content": "Pass JVM arguments to the <span class=\"code\">bin/solr</span> script. These would need to be passed every time you start Solr\nwith <span class=\"code\">bin/solr</span>.",
    "hierarchy": [
      "Running Solr on HDFS"
    ],
    "pageId": 86
  },
  {
    "content": "Modify <span class=\"code\">solr.in.sh</span> (or <span class=\"code\">solr.in.cmd</span> on Windows) to pass the JVM arguments automatically when using\nbin/solr<span class=\"ff2 fs1\"> without having to set them manually.</span>",
    "hierarchy": [
      "Running Solr on HDFS"
    ],
    "pageId": 86
  },
  {
    "content": "Define the properties in <span class=\"code\">solrconfig.xml</span>. These configuration changes would need to be repeated for\nevery collection, so is a good option if you only want some of your collections stored in HDFS.",
    "hierarchy": [
      "Running Solr on HDFS"
    ],
    "pageId": 86
  },
  {
    "content": "For standalone Solr instances, there are a few parameters you should modify before starting Solr. These can\nbe set in <span class=\"code\">solrconfig.xml</span> (more on that <span class=\"link\">below</span>), or passed to the <span class=\"code\">bin/solr</span> script at startup.",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "You need to use an <span class=\"code\">HdfsDirectoryFactory</span> and a data directory in the form <span class=\"code\">hdfs://host:port/path</span>",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "You need to specify an <span class=\"code\">updateLog</span> location in the form <span class=\"code\">hdfs://host:port/path</span>",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "You should specify a lock factory type of <span class=\"code\">'hdfs'</span> or none.",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "If you do not modify <span class=\"code\">solrconfig.xml</span>, you can instead start Solr on HDFS with the following command:",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "bin/solr start -Dsolr.directoryFactory=HdfsDirectoryFactory\nÊ    -Dsolr.lock.type=hdfs\nÊ    -Dsolr.data.dir=hdfs://host:port/path\nÊ    -Dsolr.updatelog=hdfs://host:port/path",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "This example will start Solr in standalone mode, using the defined JVM properties (explained in more detail\nbelow<span class=\"fc1\">).</span>",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "Standalone Solr Instances"
    ],
    "pageId": 86
  },
  {
    "content": "In SolrCloud mode, it's best to leave the data and update log directories as the defaults Solr comes with and\nsimply specify the <span class=\"code\">solr.hdfs.home</span>. All dynamically created collections will create the appropriate directories\nautomatically under the <span class=\"code\">solr.hdfs.home</span> root directory.",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "SolrCloud Instances"
    ],
    "pageId": 86
  },
  {
    "content": "Set <span class=\"code\">solr.hdfs.home</span> in the form <span class=\"code\">hdfs://host:port/path</span>",
    "hierarchy": [
      "Running Solr on HDFS",
      "Starting Solr on HDFS",
      "SolrCloud Instances"
    ],
    "pageId": 86
  },
  {
    "content": "<span class=\"ls1\">You should specify a lock factory type of <span class=\"ff2 fs1\">'hdfs'</span> or none.</span>",
    "hierarchy": [
    ],
    "pageId": 87
  },
  {
    "content": "bin/solr start -c -Dsolr.directoryFactory=HdfsDirectoryFactory\nÊ    -Dsolr.lock.type=hdfs\nÊ    -Dsolr.hdfs.home=hdfs://host:port/path",
    "hierarchy": [
    ],
    "pageId": 87
  },
  {
    "content": "This command starts Solr in SolrCloud mode, using the defined JVM properties.",
    "hierarchy": [
    ],
    "pageId": 87
  },
  {
    "content": "The examples above assume you will pass JVM arguments as part of the start command every time you use\nbin/solr<span class=\"ff1 fs0\"> to start Solr. However, </span>bin/solr<span class=\"ff1 fs0\"> looks for an include file named </span>solr.in.sh<span class=\"ff1 fs0\"> (</span>solr.in.cmd<span class=\"ff1 fs0\"> on</span>\nWindows) to set environment variables. By default, this file is found in the <span class=\"ff2 fs1\">bin</span> directory, and you can modify\nit to permanently add the <span class=\"ff2 fs1\">HdfsDirectoryFactory</span> settings and ensure they are used every time Solr is\nstarted.",
    "hierarchy": [
      "Modifying solr.in.sh (*nix) or solr.in.cmd (Windows)"
    ],
    "pageId": 87
  },
  {
    "content": "For example, to set JVM arguments to always use HDFS when running in SolrCloud mode (as shown above),\nyou would add a section such as this:",
    "hierarchy": [
      "Modifying solr.in.sh (*nix) or solr.in.cmd (Windows)"
    ],
    "pageId": 87
  },
  {
    "content": "# Set HDFS DirectoryFactory & Settings\n-Dsolr.directoryFactory=HdfsDirectoryFactory \\\n-Dsolr.lock.type=hdfs \\\n-Dsolr.hdfs.home=hdfs://host:port/path \\",
    "hierarchy": [
      "Modifying solr.in.sh (*nix) or solr.in.cmd (Windows)"
    ],
    "pageId": 87
  },
  {
    "content": "For performance, the <span class=\"ff2 fs1\">HdfsDirectoryFactory</span> uses a Directory that will cache HDFS blocks. This caching\nmechanism replaces the standard file system cache that Solr utilizes. By default, this cache is allocated off-\nheap. This cache will often need to be quite large and you may need to raise the off-heap memory limit for\nthe specific JVM you are running Solr in. For the Oracle/OpenJDK JVMs, the following is an example\ncommand-line parameter that you can use to raise the limit when starting Solr:",
    "hierarchy": [
      "The Block Cache"
    ],
    "pageId": 87
  },
  {
    "content": "-XX:MaxDirectMemorySize=20g",
    "hierarchy": [
      "The Block Cache"
    ],
    "pageId": 87
  },
  {
    "content": "The <span class=\"ff2 fs1\">HdfsDirectoryFactory</span> has a number of settings defined as part of the <span class=\"ff2 fs1\">directoryFactory</span>\nconfiguration.",
    "hierarchy": [
      "HdfsDirectoryFactory Parameters"
    ],
    "pageId": 87
  },
  {
    "content": "solr.hdfs.home\nA root location in HDFS for Solr to write collection data to. Rather than specifying an HDFS location for the\ndata directory or update log directory, use this to specify one root location and have everything\nautomatically created within this HDFS location. The structure of this parameter is\nhdfs://host:port/path/solr<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "HdfsDirectoryFactory Parameters",
      "Solr HDFS Settings"
    ],
    "pageId": 87
  },
  {
    "content": "solr.hdfs.blockcache.enabled\nEnable the blockcache. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "Block Cache Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.blockcache.read.enabled\nEnable the read cache. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "Block Cache Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.blockcache.direct.memory.allocation\nEnable direct memory allocation. If this is <span class=\"ff2 fs1\">false</span>, heap is used. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "Block Cache Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.blockcache.slab.count\nNumber of memory slabs to allocate. Each slab is 128 MB in size. The default is <span class=\"ff2 fs1\">1</span>.",
    "hierarchy": [
      "Block Cache Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.blockcache.global\nEnable/Disable using one global cache for all SolrCores. The settings used will be from the first\nHdfsDirectoryFactory created. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "Block Cache Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.nrtcachingdirectory.enable\ntrue | Enable the use of NRTCachingDirectory. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "NRTCachingDirectory Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.nrtcachingdirectory.maxmergesizemb\nNRTCachingDirectory max segment size for merges. The default is <span class=\"ff2 fs1\">16</span>.",
    "hierarchy": [
      "NRTCachingDirectory Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.nrtcachingdirectory.maxcachedmb\nNRTCachingDirectory max cache size. The default is <span class=\"ff2 fs1\">192</span>.",
    "hierarchy": [
      "NRTCachingDirectory Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.confdir\nPass the location of HDFS client configuration files - needed for HDFS HA for example.",
    "hierarchy": [
      "HDFS Client Configuration Settings"
    ],
    "pageId": 88
  },
  {
    "content": "Hadoop can be configured to use the Kerberos protocol to verify user identity when trying to access core\nservices like HDFS. If your HDFS directories are protected using Kerberos, then you need to configure Solr's\nHdfsDirectoryFactory to authenticate using Kerberos in order to read and write to HDFS. To enable Kerberos\nauthentication from Solr, you need to set the following parameters:",
    "hierarchy": [
      "Kerberos Authentication Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.security.kerberos.enabled\nSet to <span class=\"ff2 fs1\">true</span> to enable Kerberos authentication. The default is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "Kerberos Authentication Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.security.kerberos.keytabfile\nA keytab file contains pairs of Kerberos principals and encrypted keys which allows for password-less\nauthentication when Solr attempts to authenticate with secure Hadoop.",
    "hierarchy": [
      "Kerberos Authentication Settings"
    ],
    "pageId": 88
  },
  {
    "content": "This file will need to be present on all Solr servers at the same path provided in this parameter.",
    "hierarchy": [
      "Kerberos Authentication Settings"
    ],
    "pageId": 88
  },
  {
    "content": "solr.hdfs.security.kerberos.principal",
    "hierarchy": [
      "Kerberos Authentication Settings"
    ],
    "pageId": 88
  },
  {
    "content": "The Kerberos principal that Solr should use to authenticate to secure Hadoop; the format of a typical\nKerberos V5 principal is: <span class=\"ff2 fs1\">primary/instance@realm</span>.",
    "hierarchy": [
    ],
    "pageId": 89
  },
  {
    "content": "Here is a sample <span class=\"ff2 fs1\">solrconfig.xml</span> configuration for storing Solr indexes on HDFS:",
    "hierarchy": [
      "Example solrconfig.xml for HDFS"
    ],
    "pageId": 89
  },
  {
    "content": "Ê <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.home\"<span class=\"fc2\">></span></span>hdfs://host:port/solr<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.blockcache.enabled\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></bool></span>\nÊ <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.blockcache.slab.count\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.blockcache.direct.memory.allocation\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></bool></span>\nÊ <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.blockcache.blocksperbank\"<span class=\"fc2\">></span></span>16384<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.blockcache.read.enabled\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></bool></span>\nÊ <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.nrtcachingdirectory.enable\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></bool></span>\nÊ <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.nrtcachingdirectory.maxmergesizemb\"<span class=\"fc2\">></span></span>16<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.nrtcachingdirectory.maxcachedmb\"<span class=\"fc2\">></span></span>192<span class=\"fc2\"></int></span>",
    "hierarchy": [
      "Example solrconfig.xml for HDFS"
    ],
    "pageId": 89
  },
  {
    "content": "If using Kerberos, you will need to add the three Kerberos related properties to the <span class=\"ff2 fs1\"><directoryFactory></span>\nelement in <span class=\"ff2 fs1\">solrconfig.xml</span>, such as:",
    "hierarchy": [
      "Example solrconfig.xml for HDFS"
    ],
    "pageId": 89
  },
  {
    "content": "Ê  ...\nÊ <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.security.kerberos.enabled\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></bool></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.security.kerberos.keytabfile\"<span class=\"fc2\">></span></span>/etc/krb5.keytab<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"solr.hdfs.security.kerberos.principal\"<span class=\"fc2\">></span></span>solr/admin@KERBEROS.COM<span class=\"fc2\"></str></span>",
    "hierarchy": [
      "Example solrconfig.xml for HDFS"
    ],
    "pageId": 89
  },
  {
    "content": "The ability to automatically add new replicas when the Overseer notices that a shard has gone down was\npreviously only available to users running Solr in HDFS, but it is now available to all users via Solr's\nautoscaling framework. See the section <span class=\"link\">Auto Add Replicas Trigger</span> for details on how to enable and disable\nthis feature.",
    "hierarchy": [
      "Automatically Add Replicas in SolrCloud"
    ],
    "pageId": 89
  },
  {
    "content": "The ability to enable or disable the autoAddReplicas feature with cluster properties has\nbeen deprecated and will be removed in a future version. All users of this feature who have\npreviously used that approach are encouraged to change their configurations to use the\nautoscaling framework to ensure continued operation of this feature in their Solr\ninstallations.",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "For users using this feature with the deprecated configuration, you can temporarily disable\nit cluster-wide by setting the cluster property <span class=\"code\">autoAddReplicas</span> to <span class=\"code\">false</span>, as in these\nexamples:",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CLUSTERPROP&name=autoAddRepli\ncas&val=false",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "curl -X POST -H 'Content-type: application/json' -d '{\"set-property\":\n{\"name\":\"autoAddReplicas\", \"val\":false}}' http://localhost:8983/api/cluster",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "Re-enable the feature by unsetting the <span class=\"code\">autoAddReplicas</span> cluster property. When no <span class=\"code\">val</span>\nparameter is provided, the cluster property is unset:",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CLUSTERPROP&name=autoAddRepli\ncas",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "curl -X POST -H 'Content-type: application/json' -d '{\"set-property\":\n{\"name\":\"autoAddReplicas\"}}' http://localhost:8983/api/cluster",
    "hierarchy": [
    ],
    "pageId": 90
  },
  {
    "content": "This guide is a tutorial on how to set up a multi-node SolrCloud cluster on <span class=\"link\">Amazon Web Services (AWS) EC2</span>\ninstances for early development and design.",
    "hierarchy": [
      "SolrCloud on AWS EC2"
    ],
    "pageId": 91
  },
  {
    "content": "This tutorial is not meant for production systems. For one, it uses Solr's embedded ZooKeeper instance, and\nfor production you should have at least 3 ZooKeeper nodes in an ensemble. There are additional steps you\nshould take for a production installation; refer to <span class=\"link\">Taking Solr to Production</span> for how to deploy Solr in\nproduction.",
    "hierarchy": [
      "SolrCloud on AWS EC2"
    ],
    "pageId": 91
  },
  {
    "content": "In this guide we are going to:",
    "hierarchy": [
      "SolrCloud on AWS EC2"
    ],
    "pageId": 91
  },
  {
    "content": "1.Launch multiple AWS EC2 instances\n◦Create new <span class=\"ff4\">Security Group</span>\n◦Configure instances and launch\n2.Install, configure and start Solr on newly launched EC2 instances\n◦Install system prerequisites: Java 1.8 and later\n◦Download latest version of Solr\n◦Start the Solr nodes in cloud mode\n3.Create a collection, index documents and query the system\n◦Create collection with multiple shards and replicas\n◦Index documents to the newly created collection\n◦Verify documents presence by querying the collection",
    "hierarchy": [
      "SolrCloud on AWS EC2"
    ],
    "pageId": 91
  },
  {
    "content": "To use this guide, you must have the following:",
    "hierarchy": [
      "SolrCloud on AWS EC2",
      "Before You Start"
    ],
    "pageId": 91
  },
  {
    "content": "An <span class=\"link\">AWS</span> account.",
    "hierarchy": [
      "SolrCloud on AWS EC2",
      "Before You Start"
    ],
    "pageId": 91
  },
  {
    "content": "Familiarity with setting up a single-node SolrCloud on local machine. Refer to the <span class=\"link\">Solr Tutorial</span> if you have\nnever used Solr before.",
    "hierarchy": [
      "SolrCloud on AWS EC2",
      "Before You Start"
    ],
    "pageId": 91
  },
  {
    "content": "1.Navigate to the <span class=\"link\">AWS EC2 console</span> and to the region of your choice.\n2.Configure an <span class=\"link\">AWS security group</span> which will limit access to the installation and allow our launched EC2\ninstances to talk to each other without restrictions.",
    "hierarchy": [
      "SolrCloud on AWS EC2",
      "Launch EC2 instances",
      "Create new Security Group"
    ],
    "pageId": 91
  },
  {
    "content": "a.From the EC2 Dashboard, click <span class=\"ff1\">[<span class=\"ff5\"> </span>Security Groups<span class=\"ff5\"> </span>]</span> from the left-hand menu, under \"Network &\nSecurity\".\nb.Click <span class=\"ff1\">[<span class=\"ff5\"> </span>Create Security Group<span class=\"ff5\"> </span>]</span> under the <span class=\"ff4\">Security Groups</span> section. Give your security group a\ndescriptive name.",
    "hierarchy": [
      "SolrCloud on AWS EC2",
      "Launch EC2 instances",
      "Create new Security Group"
    ],
    "pageId": 91
  },
  {
    "content": "c.<span class=\"ls1\">You can select one of the existing <span class=\"link\">VPCs</span> or create a new one.</span>\nd.<span class=\"ls1\">We need two ports open for our cloud here:</span>\ni.<span class=\"ls1\">Solr port. In this example we will use Solr's default port 8983.</span>\nii.<span class=\"ls1\">ZooKeeper Port: We’ll use Solr’s embedded ZooKeeper, so we’ll use the default port 9983 (see the</span>\nDeploying with External ZooKeeper<span class=\"fc0\"> to configure external ZooKeeper).</span>\ne.<span class=\"ls1\">Click <span class=\"ff2\">[<span class=\"code\"> </span>Inbound<span class=\"code\"> </span>]</span> to set inbound network rules, then select <span class=\"ff2\">[<span class=\"code\"> </span>Add Rule<span class=\"code\"> </span>]</span>. Select \"Custom TCP\" as the</span>\ntype. Enter 8983 for the \"Port Range\" and choose \"My IP for the Source, then enter your public IP.\nCreate a second rule with the same type and source, but enter 9983 for the port.",
    "hierarchy": [
    ],
    "pageId": 92
  },
  {
    "content": "This will limit access to your current machine. If you want wider access to the instance in order to\ncollaborate with others, you can specify that, but make sure you only allow as much access as\nneeded. A Solr instance should not be exposed to general Internet traffic.",
    "hierarchy": [
    ],
    "pageId": 92
  },
  {
    "content": "f.<span class=\"ls1\">Add another rule for SSH access. Choose \"SSH\" as the type, and again \"My IP\" for the source and</span>\nagain enter your public IP. You need SSH access on all instances to install and configure Solr.\ng.<span class=\"ls1\">Review the details, your group configuration should look like this:</span>",
    "hierarchy": [
    ],
    "pageId": 92
  },
  {
    "content": "h.<span class=\"ls1\">Click <span class=\"ff2\">[<span class=\"code\"> </span>Create<span class=\"code\"> </span>]</span> when finished.</span>\ni.<span class=\"ls1\">We need to modify the rules so that instances that are part of the group can talk to all other instances</span>\nthat are part of the same group. We could not do this while creating the group, so we need to edit the\ngroup after creating it to add this.\ni.<span class=\"ls1\">Select the newly created group in the Security Group overview table. Under the \"Inbound\" tab,</span>\nclick <span class=\"ff2\">[<span class=\"code\"> </span>Edit<span class=\"code\"> </span>]</span>.\nii.<span class=\"ls1\">Click <span class=\"ff2\">[<span class=\"code\"> </span>Add rule<span class=\"code\"> </span>]</span>. Choose <span class=\"ff4 fs1\">All TCP</span> from the pulldown list for the type, and enter <span class=\"ff4 fs1\">0-65535</span> for the</span>\nport range. Specify the name of the current Security Group as the <span class=\"ff4 fs1\">solr-sample</span>.\nj.<span class=\"ls1\">Review the details, your group configuration should now look like this:</span>",
    "hierarchy": [
    ],
    "pageId": 92
  },
  {
    "content": "k.<span class=\"ls1\">Click <span class=\"ff2\">[<span class=\"code\"> </span>Save<span class=\"code\"> </span>]</span> when finished.</span>",
    "hierarchy": [
    ],
    "pageId": 93
  },
  {
    "content": "Once the security group is in place, you can choose <span class=\"ff2\">[<span class=\"code\"> </span>Instances<span class=\"code\"> </span>]</span> from the left-hand navigation menu.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "Under Instances, click <span class=\"ff2\">[<span class=\"code\"> </span>Launch Instance<span class=\"code\"> </span>]</span> button and follow the wizard steps:",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "1.<span class=\"ls1\">Choose your Amazon Machine Image (AMI): Choose <span class=\"ff2\">Amazon Linux AMI, SSD Volume Type</span> as the AMI.</span>\nThere are both commercial AMIs and Community based AMIs available, e.g., Amazon Linux AMI (HVM),\nSSD Volume Type, but this is a nice AMI to use for our purposes. Click <span class=\"ff2\">[<span class=\"code\"> </span>Select<span class=\"code\"> </span>]</span> next to the image you\nchoose.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "2.<span class=\"ls1\">The next screen asks you to choose the instance type, <span class=\"ff2\">t2.medium</span> is sufficient. Choose it from the list,</span>\nthen click <span class=\"ff2\">[<span class=\"code\"> </span>Configure Instance Details<span class=\"code\"> </span>]</span>.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "3.<span class=\"ls1\">Configure the instance. Enter <span class=\"ff2\">2</span> in the \"Number of instances\" field. Make sure the setting for \"Auto-</span>\nassign Public IP\" is \"Enabled\".",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "4.<span class=\"ls1\">When finished, click <span class=\"ff2\">[<span class=\"code\"> </span>Add Storage<span class=\"code\"> </span>]</span>. The default of <span class=\"ff2\">8 GB</span> for size and <span class=\"ff2\">General Purpose SSD</span> for the</span>\nvolume type is sufficient for running this quick start. Optionally select \"Delete on termination\" if you\nknow you won't need the data stored in Solr indexes after you terminate the instances.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "5.<span class=\"ls1\">When finished, click <span class=\"ff2\">[<span class=\"code\"> </span>Add Tags<span class=\"code\"> </span>]</span>. You do not have to add any tags for this quick start, but you can add</span>\nthem if you want.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "6.<span class=\"ls1\">Click <span class=\"ff2\">[<span class=\"code\"> </span>Configure Security Group<span class=\"code\"> </span>]</span>. Choose <span class=\"ff2\">Select an existing security group</span> and select the security</span>\ngroup you created earlier: <span class=\"ff4 fs2\">solr-sample</span>. You should see the expected inbound rules at the bottom of the\npage.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "7.<span class=\"ls1\">Click <span class=\"ff2\">[<span class=\"code\"> </span>Review<span class=\"code\"> </span>]</span>.</span>\n8.<span class=\"ls1\">If everything looks correct, click <span class=\"ff2\">[<span class=\"code\"> </span>Launch<span class=\"code\"> </span>]</span>.</span>\n9.<span class=\"ls1\">Select an existing “private key file” or create a new one and download to your local machine so you will</span>\nbe able to login into the instances via SSH.",
    "hierarchy": [
      "Configure Instances and Launch"
    ],
    "pageId": 93
  },
  {
    "content": "10.<span class=\"ls1\">On the instances list, you can watch the states change. You cannot use the instances until they become</span>\n“running”<span class=\"ff1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 94
  },
  {
    "content": "1.<span class=\"ls1\">Locate the Public DNS record for the instance by selecting the instance from the list of instances, and log</span>\non to each machine one by one.",
    "hierarchy": [
      "Install, Configure and Start"
    ],
    "pageId": 94
  },
  {
    "content": "Using SSH, if your AWS identity key file is <span class=\"code\">aws-key.pem</span> and the AMI uses <span class=\"code\">ec2-user</span> as login user, on each\nAWS instance, do the following:",
    "hierarchy": [
      "Install, Configure and Start"
    ],
    "pageId": 94
  },
  {
    "content": "$ ssh-add aws-key.pem\n$ ssh -A ec2-user@<instance-public-dns>",
    "hierarchy": [
      "Install, Configure and Start"
    ],
    "pageId": 94
  },
  {
    "content": "2.<span class=\"ls1\">While logged in to each of the AWS EC2 instances, configure Java 1.8 and download Solr:</span>",
    "hierarchy": [
      "Install, Configure and Start"
    ],
    "pageId": 94
  },
  {
    "content": "# verify default java version packaged with AWS instances is 1.7\n$ java -version\n$ sudo yum install java-1.8.0\n$ sudo /usr/sbin/alternatives --config java\n# select jdk-1.8\n# verify default java version to java-1.8\n$ java -version",
    "hierarchy": [
      "Install, Configure and Start"
    ],
    "pageId": 94
  },
  {
    "content": "# download desired version of Solr\n$ wget http://archive.apache.org/dist/lucene/solr/7.3.0/solr-7.3.0.tgz\n# untar\n$ tar -zxvf solr-7.3.0.tgz\n# set SOLR_HOME\n$ export SOLR_HOME=$PWD/solr-7.3.0\n# put the env variable in .bashrc\n# vim ~/.bashrc\nexport SOLR_HOME=/home/ec2-user/solr-7.3.0",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "3.Resolve the Public DNS to simpler hostnames.",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "Let's assume AWS instances public DNS with IPv4 Public IP are as follows:",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "◦ec2-54-1-2-3.us-east-2.compute.amazonaws.com: 54.1.2.3\n◦ec2-54-4-5-6.us-east-2.compute.amazonaws.com: 54.4.5.6",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "Edit <span class=\"ff1 fs1\">/etc/hosts</span>, and add entries for the above machines:",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "$ sudo vim /etc/hosts\n54.1.2.3 solr-node-1\n54.4.5.6 solr-node-2",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "4.Configure Solr in running EC2 instances.",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "In this case, one of the machines will host ZooKeeper embedded along with Solr node, say, <span class=\"ff1 fs1\">ec2-101-1-2-</span>\n3.us-east-2.compute.amazonaws.com<span class=\"ff2 fs0\"> (aka, </span>solr-node-1<span class=\"ff2 fs0\">)</span>",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "See <span class=\"link\">Deploying with External ZooKeeper</span> for configure external ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "Inside the <span class=\"ff1 fs1\">ec2-101-1-2-3.us-east-2.compute.amazonaws.com</span> (<span class=\"ff1 fs1\">solr-node-1</span>)",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "$ cd $SOLR_HOME\n# start Solr node on 8983 and ZooKeeper will start on 8983+1000 9983\n$ bin/solr start -c -p 8983 -h solr-node-1",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "On the other node, <span class=\"ff1 fs1\">ec2-101-4-5-6.us-east-2.compute.amazonaws.com</span> (<span class=\"ff1 fs1\">solr-node-2</span>)",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "$ cd $SOLR_HOME\n# start Solr node on 8983 and connect to ZooKeeper running on first node\n$ bin/solr start -c -p 8983 -h solr-node-2 -z solr-node-1:9983",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "5.Inspect and Verify. Inspect the Solr nodes state from browser on local machine:",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "Go to:",
    "hierarchy": [
    ],
    "pageId": 95
  },
  {
    "content": "http://ec2-101-1-2-3.us-east-2.compute.amazonaws.com:8983/solr (solr-node-1:8983/solr)",
    "hierarchy": [
    ],
    "pageId": 96
  },
  {
    "content": "http://ec2-101-4-5-6.us-east-2.compute.amazonaws.com:8983/solr (solr-node-2:8983/solr)",
    "hierarchy": [
    ],
    "pageId": 96
  },
  {
    "content": "You should able to see Solr UI dashboard for both nodes.",
    "hierarchy": [
    ],
    "pageId": 96
  },
  {
    "content": "You can refer <span class=\"link\">Solr Tutorial</span> for an extensive walkthrough on creating collections with multiple shards and\nreplicas, indexing data via different methods and querying documents accordingly.",
    "hierarchy": [
      "Create Collection, Index and Query"
    ],
    "pageId": 96
  },
  {
    "content": "If you want to configure an external ZooKeeper ensemble to avoid using the embedded single-instance\nZooKeeper that runs in the same JVM as the Solr node, you need to make few tweaks in the above listed\nsteps as follows.",
    "hierarchy": [
      "Deploying with External ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "When creating the security group, instead of opening port <span class=\"ff1 fs2\">9983</span> for ZooKeeper, you'll open <span class=\"ff1 fs2\">2181</span> (or\nwhatever port you are using for ZooKeeper: it’s default is 2181).",
    "hierarchy": [
      "Deploying with External ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "When configuring the number of instances to launch, choose to open 3 instances instead of 2.",
    "hierarchy": [
      "Deploying with External ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "When modifying the <span class=\"ff1 fs2\">/etc/hosts</span> on each machine, add a third line for the 3rd instance and give it a\nrecognizable name:",
    "hierarchy": [
      "Deploying with External ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "$ sudo vim /etc/hosts\n54.1.2.3  solr-node-1\n54.4.5.6  solr-node-2\n54.7.8.9  zookeeper-node",
    "hierarchy": [
      "Deploying with External ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "You'll need to install ZooKeeper manually, described in the next section.",
    "hierarchy": [
      "Deploying with External ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "These steps will help you install and configure a single instance of ZooKeeper on AWS. This is not sufficient\nfor a production, use, however, where a ZooKeeper ensemble of at least three nodes is recommended. See\nthe section <span class=\"link\">Setting Up an External ZooKeeper Ensemble</span> for information about how to change this single-\ninstance into an ensemble.",
    "hierarchy": [
      "Deploying with External ZooKeeper",
      "Install ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "1.Download a stable version of ZooKeeper. In this example we're using ZooKeeper v3.4.6. On the node\nyou’re using to host ZooKeeper (<span class=\"ff1 fs2\">zookeeper-node</span>), download the package and untar it:",
    "hierarchy": [
      "Deploying with External ZooKeeper",
      "Install ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "# download stable version of ZooKeeper, here 3.4.6\n$ wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz\n# untar\n$ tar -zxvf zookeeper-3.4.6.tar.gz",
    "hierarchy": [
      "Deploying with External ZooKeeper",
      "Install ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "Add an environment variable for ZooKeeper's home directory (<span class=\"ff1 fs2\">ZOO_HOME</span>) to the <span class=\"ff1 fs2\">.bashrc</span> for the user",
    "hierarchy": [
      "Deploying with External ZooKeeper",
      "Install ZooKeeper"
    ],
    "pageId": 96
  },
  {
    "content": "who will be running the process. The rest of the instructions assume you have set this variable. Correct\nthe path to the ZooKeeper installation as appropriate if where you put it does not match the below.",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "$ export ZOO_HOME=$PWD/zookeeper-3.4.6\n# put the env variable in .bashrc\n# vim ~/.bashrc\nexport ZOO_HOME=/home/ec2-user/zookeeper-3.4.6",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "2.Change directories to <span class=\"ff2 fs1\">ZOO_HOME</span>, and create the ZooKeeper configuration by using the template provided\nby ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "$ cd $ZOO_HOME\n# create ZooKeeper config by using zoo_sample.cfg\n$ cp conf/zoo_sample.cfg conf/zoo.cfg",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "3.Create the ZooKeeper data directory in the filesystem, and edit the <span class=\"ff2 fs1\">zoo.cfg</span> file to uncomment the\nautopurge parameters and define the location of the data directory.",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "# create data dir for ZooKeeper, edit zoo.cfg, uncomment autopurge parameters\n$ mkdir data\n$ vim conf/zoo.cfg\n# -- uncomment --\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=1\n# -- edit --\ndataDir=data",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "4.Start ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "$ cd $ZOO_HOME\n# start ZooKeeper, default port: 2181\n$ bin/zkServer.sh start",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "5.On the the first node being used for Solr (<span class=\"ff2 fs1\">solr-node-1</span>), start Solr and tell it where to find ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "$ cd $SOLR_HOME\n# start Solr node on 8983 and connect to ZooKeeper running on ZooKeeper node\n$ bin/solr start -c -p 8983 -h solr-node-1 -z zookeeper-node:2181",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "6.On the second Solr node (<span class=\"ff2 fs1\">solr-node-2</span>), again start Solr and tell it where to find ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "$ cd $SOLR_HOME\n# start Solr node on 8983 and connect to ZooKeeper running on ZooKeeper node\n$ bin/solr start -c -p 8983 -h solr-node-1 -z zookeeper-node:2181",
    "hierarchy": [
    ],
    "pageId": 97
  },
  {
    "content": "As noted earlier, a single ZooKeeper node is not sufficient for a production installation. See\nthese additional resources for more information about deploying Solr in production, which\ncan be used once you have the EC2 instances up and running:",
    "hierarchy": [
    ],
    "pageId": 98
  },
  {
    "content": "<span class=\"link\">Taking Solr to Production</span>\n•<span class=\"link\">Setting Up an External ZooKeeper Ensemble</span>",
    "hierarchy": [
    ],
    "pageId": 98
  },
  {
    "content": "This page covers how to upgrade an existing Solr cluster that was installed using the <span class=\"link\">service installation</span>\nscripts<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Upgrading a Solr Cluster"
    ],
    "pageId": 99
  },
  {
    "content": "The steps outlined on this page assume you use the default service name of <span class=\"ff4 fs3\">solr</span>. If you\nuse an alternate service name or Solr installation directory, some of the paths and\ncommands mentioned below will have to be modified accordingly.",
    "hierarchy": [
      "Upgrading a Solr Cluster"
    ],
    "pageId": 99
  },
  {
    "content": "Here is a checklist of things you need to prepare before starting the upgrade process:",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "1.Examine the <span class=\"link\">Solr Upgrade Notes</span> to determine if any behavior changes in the new version of Solr will\naffect your installation.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "2.If not using replication (i.e., collections with <span class=\"ff4 fs3\">replicationFactor</span> less than 1), then you should make a\nbackup of each collection. If all of your collections use replication, then you don't technically need to\nmake a backup since you will be upgrading and verifying each node individually.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "3.Determine which Solr node is currently hosting the Overseer leader process in SolrCloud, as you should\nupgrade this node last. To determine the Overseer, use the Overseer Status API, see: <span class=\"link\">Collections API</span>.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "4.Plan to perform your upgrade during a system maintenance window if possible. You'll be doing a rolling\nrestart of your cluster (each node, one-by-one), but we still recommend doing the upgrade when system\nusage is minimal.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "5.Verify the cluster is currently healthy and all replicas are active, as you should not perform an upgrade\non a degraded cluster.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "6.Re-build and test all custom server-side components against the new Solr JAR files.\n7.Determine the values of the following variables that are used by the Solr Control Scripts:\n◦ZK_HOST<span class=\"ff2 fs1\">: The ZooKeeper connection string your current SolrCloud nodes use to connect to</span>\nZooKeeper; this value will be the same for all nodes in the cluster.\n◦SOLR_HOST<span class=\"ff2 fs1\">: The hostname each Solr node used to register with ZooKeeper when joining the</span>\nSolrCloud cluster; this value will be used to set the <span class=\"ff1\">host</span> Java system property when starting the new\nSolr process.\n◦SOLR_PORT<span class=\"ff2 fs1\">: The port each Solr node is listening on, such as 8983.</span>\n◦SOLR_HOME<span class=\"ff2 fs1\">: The absolute path to the Solr home directory for each Solr node; this directory must</span>\ncontain a <span class=\"ff4 fs3\">solr.xml</span> file. This value will be passed to the new Solr process using the <span class=\"ff4 fs3\">solr.solr.home</span>\nsystem property, see: <span class=\"link\">Solr Cores and solr.xml</span>.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "If you are upgrading from an installation of Solr 5.x or later, these values can typically be found in\neither <span class=\"ff4 fs3\">/var/solr/solr.in.sh</span> or <span class=\"ff4 fs3\">/etc/default/solr.in.sh</span>.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "You should now be ready to upgrade your cluster. Please verify this process in a test or staging cluster\nbefore doing it in production.",
    "hierarchy": [
      "Upgrading a Solr Cluster",
      "Planning Your Upgrade"
    ],
    "pageId": 99
  },
  {
    "content": "The approach we recommend is to perform the upgrade of each Solr node, one-by-one. In other words, you\nwill need to stop a node, upgrade it to the new version of Solr, and restart it before moving on to the next\nnode. This means that for a short period of time, there will be a mix of \"Old Solr\" and \"New Solr\" nodes\nrunning in your cluster. We also assume that you will point the new Solr node to your existing Solr home\ndirectory where the Lucene index files are managed for each collection on the node. This means that you\nwon't need to move any index files around to perform the upgrade.",
    "hierarchy": [
      "Upgrade Process"
    ],
    "pageId": 100
  },
  {
    "content": "Begin by stopping the Solr node you want to upgrade. After stopping the node, if using a replication (i.e.,\ncollections with <span class=\"code\">replicationFactor</span> less than 1), verify that all leaders hosted on the downed node have\nsuccessfully migrated to other replicas; you can do this by visiting the <span class=\"link\">Cloud panel in the Solr Admin UI</span>. If\nnot using replication, then any collections with shards hosted on the downed node will be temporarily off-\nline.",
    "hierarchy": [
      "Upgrade Process",
      "Step 1: Stop Solr"
    ],
    "pageId": 100
  },
  {
    "content": "Please follow the instructions to install Solr as a Service on Linux documented at <span class=\"link\">Taking Solr to Production</span>.\nUse the <span class=\"code\">-n</span> parameter to avoid automatic start of Solr by the installer script. You need to update the\n/etc/default/solr.in.sh<span class=\"ff2 fs1\"> include file in the next step to complete the upgrade process.</span>",
    "hierarchy": [
      "Upgrade Process",
      "Step 2: Install Solr as a Service"
    ],
    "pageId": 100
  },
  {
    "content": "If you have a <span class=\"code\">/var/solr/solr.in.sh</span> file for your existing Solr install, running the\ninstall_solr_service.sh<span class=\"ff2 fs1\"> script will move this file to its new location:</span>\n/etc/default/solr.in.sh<span class=\"ff2 fs1\"> (see <span class=\"link\">SOLR-8101</span> for more details)</span>",
    "hierarchy": [
      "Upgrade Process",
      "Step 2: Install Solr as a Service"
    ],
    "pageId": 100
  },
  {
    "content": "Open <span class=\"code\">/etc/default/solr.in.sh</span> with a text editor and verify that the following variables are set correctly,\nor add them bottom of the include file as needed:",
    "hierarchy": [
      "Upgrade Process",
      "Step 3: Set Environment Variable Overrides"
    ],
    "pageId": 100
  },
  {
    "content": "ZK_HOST=\nSOLR_HOST=\nSOLR_PORT=\nSOLR_HOME=",
    "hierarchy": [
      "Upgrade Process",
      "Step 3: Set Environment Variable Overrides"
    ],
    "pageId": 100
  },
  {
    "content": "Make sure the user you plan to own the Solr process is the owner of the <span class=\"code\">SOLR_HOME</span> directory. For instance, if\nyou plan to run Solr as the \"solr\" user and <span class=\"code\">SOLR_HOME</span> is <span class=\"code\">/var/solr/data</span>, then you would do: <span class=\"code\">sudo chown -R</span>\nsolr: /var/solr/data",
    "hierarchy": [
      "Upgrade Process",
      "Step 3: Set Environment Variable Overrides"
    ],
    "pageId": 100
  },
  {
    "content": "You are now ready to start the upgraded Solr node by doing: <span class=\"code\">sudo service solr start</span>. The upgraded\ninstance will join the existing cluster because you're using the same <span class=\"code\">SOLR_HOME</span>, <span class=\"code\">SOLR_PORT</span>, and <span class=\"code\">SOLR_HOST</span>\nsettings used by the old Solr node; thus, the new server will look like the old node to the running cluster. Be\nsure to look in <span class=\"code\">/var/solr/logs/solr.log</span> for errors during startup.",
    "hierarchy": [
      "Upgrade Process",
      "Step 4: Start Solr"
    ],
    "pageId": 100
  },
  {
    "content": "You should run the Solr <span class=\"ff1\">healthcheck</span> command for all collections that are hosted on the upgraded node\nbefore proceeding to upgrade the next node in your cluster. For instance, if the newly upgraded node hosts\na replica for the <span class=\"ff1\">MyDocuments</span> collection, then you can run the following command (replace <span class=\"code\">ZK_HOST</span> with\nthe ZooKeeper connection string):",
    "hierarchy": [
      "Step 5: Run Healthcheck"
    ],
    "pageId": 101
  },
  {
    "content": "/opt/solr/bin/solr healthcheck -c MyDocuments -z ZK_HOST",
    "hierarchy": [
      "Step 5: Run Healthcheck"
    ],
    "pageId": 101
  },
  {
    "content": "Look for any problems reported about any of the replicas for the collection.",
    "hierarchy": [
      "Step 5: Run Healthcheck"
    ],
    "pageId": 101
  },
  {
    "content": "Lastly, repeat Steps 1-5 for all nodes in your cluster.",
    "hierarchy": [
      "Step 5: Run Healthcheck"
    ],
    "pageId": 101
  },
  {
    "content": "The Lucene distribution includes <span class=\"link\">a tool that upgrades</span> an index from previous Lucene versions to the current\nfile format.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "The tool can be used from command line, or it can be instantiated and executed in Java.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "Indexes can <span class=\"ff1\">only</span> be upgraded from the previous major release version to the current\nmajor release version.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "This means that the IndexUpgrader Tool in any Solr 7.x release, for example, can only work\nwith indexes from 6.x releases, but cannot work with indexes from Solr 5.x or earlier.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "If you are currently using an earlier release such as 5.x and want to move more than one\nmajor version ahead, you need to first upgrade your indexes to the next major version\n(6.x), then again to the major version after that (7.x), etc.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "In a Solr distribution, the Lucene files are located in <span class=\"code\">./server/solr-webapp/webapp/WEB-INF/lib</span>. You will\nneed to include the <span class=\"code\">lucene-core-<version>.jar</span> and <span class=\"code\">lucene-backwards-codecs-<version>.jar</span> on the\nclasspath when running the tool.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "java -cp lucene-core-7.3.0.jar:lucene-backward-codecs-7.3.0.jar\norg.apache.lucene.index.IndexUpgrader [-delete-prior-commits] [-verbose] /path/to/index",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "This tool keeps only the last commit in an index. For this reason, if the incoming index has more than one\ncommit, the tool refuses to run by default. Specify <span class=\"code\">-delete-prior-commits</span> to override this, allowing the tool\nto delete all but the last commit.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "Upgrading large indexes may take a long time. As a rule of thumb, the upgrade processes about 1 GB per\nminute.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "This tool may reorder documents if the index was partially upgraded before execution (e.g.,\ndocuments were added). If your application relies on monotonicity of document IDs (i.e.,\nthe order in which the documents were added to the index is preserved), do a full optimize\ninstead.",
    "hierarchy": [
      "IndexUpgrader Tool"
    ],
    "pageId": 101
  },
  {
    "content": "The following notes describe changes to Solr in recent releases that you should be aware of before\nupgrading.",
    "hierarchy": [
      "Solr Upgrade Notes"
    ],
    "pageId": 102
  },
  {
    "content": "These notes highlight the biggest changes that may impact the largest number of implementations. It is not\na comprehensive list of all changes to Solr in any release.",
    "hierarchy": [
      "Solr Upgrade Notes"
    ],
    "pageId": 102
  },
  {
    "content": "When planning your Solr upgrade, consider the customizations you have made to your system and review\nthe <span class=\"code\">CHANGES.txt</span> file found in your Solr package. That file includes all the changes and updates that may\neffect your existing implementation.",
    "hierarchy": [
      "Solr Upgrade Notes"
    ],
    "pageId": 102
  },
  {
    "content": "Detailed steps for upgrading a Solr cluster are in the section <span class=\"link\">Upgrading a Solr Cluster</span>.",
    "hierarchy": [
      "Solr Upgrade Notes"
    ],
    "pageId": 102
  },
  {
    "content": "See the <span class=\"link\">7.3 Release Notes</span> for an overview of the main new features in Solr 7.3.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "When upgrading to Solr 7.3, users should be aware of the following major changes from v7.2:",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "Collections created without specifying a configset name have used a copy of the <span class=\"code\">_default</span> configset\nsince Solr 7.0. Before 7.3, the copied configset was named the same as the collection name, but from 7.3\nonwards it will be named with a new \".AUTOCREATED\" suffix. This is to prevent overwriting custom\nconfigset names.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "The <span class=\"code\">rq</span> parameter used with Learning to Rank rerank query parsing no longer considers the <span class=\"code\">defType</span>\nparameter. See <span class=\"link\">Running a Rerank Query</span> for more information about this parameter.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "The default value of <span class=\"code\">autoReplicaFailoverWaitAfterExpiration</span>, used with the AutoAddReplicas\nfeature, has increased to 120 seconds from the previous default of 30 seconds. This affects how soon Solr\nadds new replicas to replace the replicas on nodes which have either crashed or shutdown.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "The default Solr log file size and number of backups have been raised to 32MB and 10 respectively. See\nthe section <span class=\"link\">Configuring Logging</span> for more information about how to configure logging.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "The old Leader-In-Recovery implementation (implemented in Solr 4.9) is now deprecated and replaced.\nSolr will support rolling upgrades from old 7.x versions of Solr to future 7.x releases until the last release\nof the 7.x major version.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "This means to upgrade to Solr 8 in the future, you will need to be on Solr 7.3 or higher.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "Replicas which are not up-to-date are no longer allowed to become leader. Use the <span class=\"link\">FORCELEADER</span>\ncommand<span class=\"fc1\"> of the Collections API to allow these replicas become leader.</span>",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "The behaviour of the autoscaling system will now pause all triggers from execution between the start of\nactions and the end of a cool down period. The triggers will resume after the cool down period expires.\nPreviously, the cool down period was a fixed period started after actions for a trigger event completed\nand during this time all triggers continued to run but any events were rejected and tried later.",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "The throttling mechanism used to limit the rate of autoscaling events processed has been removed. This\ndeprecates the <span class=\"code\">actionThrottlePeriodSeconds</span> setting in the <span class=\"code\">set-properties</span><span class=\"link\"> Autoscaling API</span> which is",
    "hierarchy": [
      "Solr Upgrade Notes",
      "Upgrading to 7.x Releases",
      "Solr 7.3"
    ],
    "pageId": 102
  },
  {
    "content": "now non-operational. Use the <span class=\"ff2 fs1\">triggerCooldownPeriodSeconds</span> parameter instead to pause event\nprocessing.",
    "hierarchy": [
    ],
    "pageId": 103
  },
  {
    "content": "If you are using the spatial JTS library with Solr, you must upgrade to 1.15.0. This new version of JTS is\nnow dual-licensed to include a BSD style license. See the section on <span class=\"link\">Spatial Search</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 103
  },
  {
    "content": "The top-level <span class=\"ff2 fs1\"><highlighting></span> element in <span class=\"ff2 fs1\">solrconfig.xml</span> is now officially deprecated in favour of the\nequivalent <span class=\"ff2 fs1\"><searchComponent></span> syntax. This element has been out of use in default Solr installations for\nseveral releases already.",
    "hierarchy": [
    ],
    "pageId": 103
  },
  {
    "content": "See the <span class=\"link\">7.2 Release Notes</span> for an overview of the main new features in Solr 7.2.",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "When upgrading to Solr 7.2, users should be aware of the following major changes from v7.1:",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "Starting a query string with <span class=\"link\">local parameters</span> <span class=\"ff2 fs1\">{!myparser …}</span> is used to switch from one query parser to\nanother, and is intended for use by Solr system developers, not end users doing searches. To reduce\nnegative side-effects of unintended hack-ability, Solr now limits the cases when local parameters will be\nparsed to only contexts in which the default parser is \"<span class=\"link\">lucene</span>\" or \"<span class=\"link\">func</span>\".",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "So, if <span class=\"ff2 fs1\">defType=edismax</span> then <span class=\"ff2 fs1\">q={!myparser …}</span> won't work. In that example, put the desired query parser\ninto the <span class=\"ff2 fs1\">defType</span> parameter.",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "Another example is if <span class=\"ff2 fs1\">deftype=edismax</span> then <span class=\"ff2 fs1\">hl.q={!myparser …}</span> won't work for the same reason. In\nthis example, either put the desired query parser into the <span class=\"ff2 fs1\">hl.qparser</span> parameter or set\nhl.qparser=lucene<span class=\"ff1 fs0\">. Most users won’t run into these cases but some will need to change.</span>",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "If you must have full backwards compatibility, use <span class=\"ff2 fs1\">luceneMatchVersion=7.1.0</span> or an earlier version.",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "The eDisMax parser by default no longer allows subqueries that specify a Solr parser using either local\nparameters, or the older <span class=\"ff2 fs1\">_query_</span> magic field trick.",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "For example, <span class=\"ff2 fs1\">{!prefix f=myfield v=enterp}</span> or <span class=\"ff2 fs1\">_query_:\"{!prefix f=myfield v=enterp}\"</span> are not\nsupported by default any longer. If you want to allow power-users to do this, set <span class=\"ff2 fs1\">uf=* query</span> or some\nother value that includes <span class=\"ff2 fs1\">_query_</span>.",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "If you need full backwards compatibility for the time being, use <span class=\"ff2 fs1\">luceneMatchVersion=7.1.0</span> or\nsomething earlier.",
    "hierarchy": [
      "Solr 7.2"
    ],
    "pageId": 103
  },
  {
    "content": "See the <span class=\"link\">7.1 Release Notes</span> for an overview of the main new features of Solr 7.1.",
    "hierarchy": [
      "Solr 7.1"
    ],
    "pageId": 103
  },
  {
    "content": "When upgrading to Solr 7.1, users should be aware of the following major changes from v7.0:",
    "hierarchy": [
      "Solr 7.1"
    ],
    "pageId": 103
  },
  {
    "content": "The feature to automatically add replicas if a replica goes down, previously available only when storing\nindexes in HDFS, has been ported to the autoscaling framework. Due to this, <span class=\"ff2 fs1\">autoAddReplicas</span> is now\navailable to all users even if their indexes are on local disks.",
    "hierarchy": [
      "Solr 7.1"
    ],
    "pageId": 103
  },
  {
    "content": "Existing users of this feature should not have to change anything. However, they should note these\nchanges:",
    "hierarchy": [
      "Solr 7.1"
    ],
    "pageId": 103
  },
  {
    "content": "◦<span class=\"ff2 ls1\">Behavior: Changing the <span class=\"code\">autoAddReplicas</span> property from disabled (<span class=\"code\">false</span>) to enabled (<span class=\"code\">true</span>) using</span>\nMODIFYCOLLECTION API<span class=\"fc0\"> no longer replaces down replicas for the collection immediately. Instead,</span>\nreplicas are only added if a node containing them went down while <span class=\"code\">autoAddReplicas</span> was enabled.\nThe parameters <span class=\"code\">autoReplicaFailoverBadNodeExpiration</span> and <span class=\"code\">autoReplicaFailoverWorkLoopDelay</span>\nare no longer used.\n◦<span class=\"ff2 ls1\">Deprecations: Enabling/disabling autoAddReplicas cluster-wide with the API will be deprecated; use</span>\nsuspend/resume trigger APIs with <span class=\"code\">name=\".auto_add_replicas\"</span> instead.",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "More information about the changes to this feature can be found in the section <span class=\"link\">SolrCloud</span>\nAutomatically Adding Replicas<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "<span class=\"ls1\">Shard and cluster metric reporter configuration now require a class attribute.</span>",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "◦<span class=\"ff2 ls1\">If a reporter configures the <span class=\"code\">group=\"shard\"</span> attribute then please also configure the</span>\nclass=\"org.apache.solr.metrics.reporters.solr.SolrShardReporter\"<span class=\"ff2 fs0\"> attribute.</span>\n◦<span class=\"ff2 ls1\">If a reporter configures the <span class=\"code\">group=\"cluster\"</span> attribute then please also configure the</span>\nclass=\"org.apache.solr.metrics.reporters.solr.SolrClusterReporter\"<span class=\"ff2 fs0\"> attribute.</span>",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "See the section <span class=\"link\">Shard and Cluster Reporters</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "<span class=\"ls1\">All Stream Evaluators in <span class=\"code\">solrj.io.eval</span> have been refactored to have a simpler and more robust</span>\nstructure. This simplifies and condenses the code required to implement a new Evaluator and makes it\nmuch easier for evaluators to handle differing data types (primitives, objects, arrays, lists, and so forth).",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "<span class=\"ls1\">In the ReplicationHandler, the <span class=\"code\">master.commitReserveDuration</span> sub-element is deprecated. Instead</span>\nplease configure a direct <span class=\"code\">commitReserveDuration</span> element for use in all modes (master, slave, cloud).",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "<span class=\"ls1\">The <span class=\"code\">RunExecutableListener</span> was removed for security reasons. If you want to listen to events caused by</span>\nupdates, commits, or optimize, write your own listener as native Java class as part of a Solr plugin.",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "<span class=\"ls1\">In the XML query parser (<span class=\"code\">defType=xmlparser</span> or <span class=\"code\">{!xmlparser … }</span>) the resolving of external entities is</span>\nnow disallowed by default.",
    "hierarchy": [
    ],
    "pageId": 104
  },
  {
    "content": "The upgrade from Solr 6.x to Solr 7.0 introduces several <span class=\"ff4\">major</span> changes that you should be aware of before\nupgrading. Please do a thorough review of the section <span class=\"link\">Major Changes in Solr 7</span> before starting your\nupgrade.",
    "hierarchy": [
      "Upgrading to 7.x from Any 6.x Release"
    ],
    "pageId": 104
  },
  {
    "content": "Users upgrading from versions of Solr prior to 6.x are strongly encouraged to consult <span class=\"code\">CHANGES.txt</span> for the\ndetails of <span class=\"ff5\">all</span> changes since the version they are upgrading from.",
    "hierarchy": [
      "Upgrading to 7.x from pre-6.x Versions of Solr"
    ],
    "pageId": 104
  },
  {
    "content": "A summary of the significant changes between Solr 5.x and Solr 6.0 is in the section <span class=\"link\">Major Changes from Solr</span>\n5 to Solr 6<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Upgrading to 7.x from pre-6.x Versions of Solr"
    ],
    "pageId": 104
  },
  {
    "content": "Solr 7 is a major new release of Solr which introduces new features and a number of other changes that may\nimpact your existing installation.",
    "hierarchy": [
      "Major Changes in Solr 7"
    ],
    "pageId": 104
  },
  {
    "content": "There are major changes in Solr 7 to consider before starting to migrate your configurations and indexes.\nThis page is designed to highlight the biggest changes - new features you may want to be aware of, but also\nchanges in default behavior and deprecated features that have been removed.",
    "hierarchy": [
      "Upgrade Planning"
    ],
    "pageId": 105
  },
  {
    "content": "There are many hundreds of changes in Solr 7, however, so a thorough review of the <span class=\"link\">Solr Upgrade Notes</span> as\nwell as the <span class=\"link\">CHANGES.txt</span> file in your Solr instance will help you plan your migration to Solr 7. This section\nattempts to highlight some of the major changes you should be aware of.",
    "hierarchy": [
      "Upgrade Planning"
    ],
    "pageId": 105
  },
  {
    "content": "You should also consider all changes that have been made to Solr in any version you have not upgraded to\nalready. For example, if you are currently using Solr 6.2, you should review changes made in all subsequent\n6.x releases in addition to changes for 7.0.",
    "hierarchy": [
      "Upgrade Planning"
    ],
    "pageId": 105
  },
  {
    "content": "Re-indexing your data is considered the best practice and you should try to do so if possible. However, if re-\nindexing is not feasible, keep in mind you can only upgrade one major version at a time. Thus, Solr 6.x\nindexes will be compatible with Solr 7 but Solr 5.x indexes will not be.",
    "hierarchy": [
      "Upgrade Planning"
    ],
    "pageId": 105
  },
  {
    "content": "If you do not re-index now, keep in mind that you will need to either re-index your data or upgrade your\nindexes before you will be able to move to Solr 8 when it is released in the future. See the section\nIndexUpgrader Tool<span class=\"fc1\"> for more details on how to upgrade your indexes.</span>",
    "hierarchy": [
      "Upgrade Planning"
    ],
    "pageId": 105
  },
  {
    "content": "See also the section <span class=\"link\">Upgrading a Solr Cluster</span> for details on how to upgrade a SolrCloud cluster.",
    "hierarchy": [
      "Upgrade Planning"
    ],
    "pageId": 105
  },
  {
    "content": "Until Solr 7, the SolrCloud model for replicas has been to allow any replica to become a leader when a leader\nis lost. This is highly effective for most users, providing reliable failover in case of issues in the cluster.\nHowever, it comes at a cost in large clusters because all replicas must be in sync at all times.",
    "hierarchy": [
      "New Features & Enhancements",
      "Replication Modes"
    ],
    "pageId": 105
  },
  {
    "content": "To provide additional flexibility, two new types of replicas have been added, named TLOG & PULL. These new\ntypes provide options to have replicas which only sync with the leader by copying index segments from the\nleader. The TLOG type has an additional benefit of maintaining a transaction log (the \"tlog\" of its name),\nwhich would allow it to recover and become a leader if necessary; the PULL type does not maintain a\ntransaction log, so cannot become a leader.",
    "hierarchy": [
      "New Features & Enhancements",
      "Replication Modes"
    ],
    "pageId": 105
  },
  {
    "content": "As part of this change, the traditional type of replica is now named NRT. If you do not explicitly define a\nnumber of TLOG or PULL replicas, Solr defaults to creating NRT replicas. If this model is working for you, you\nwill not have to change anything.",
    "hierarchy": [
      "New Features & Enhancements",
      "Replication Modes"
    ],
    "pageId": 105
  },
  {
    "content": "See the section <span class=\"link\">Types of Replicas</span> for more details on the new replica modes, and how define the replica type\nin your cluster.",
    "hierarchy": [
      "New Features & Enhancements",
      "Replication Modes"
    ],
    "pageId": 105
  },
  {
    "content": "Solr autoscaling is a new suite of features in Solr to make managing a SolrCloud cluster easier and more\nautomated.",
    "hierarchy": [
      "New Features & Enhancements",
      "Autoscaling"
    ],
    "pageId": 105
  },
  {
    "content": "At its core, Solr autoscaling provides users with a rule syntax to define preferences and policies for how to\ndistribute nodes and shards in a cluster, with the goal of maintaining a balance in the cluster. As of Solr 7,",
    "hierarchy": [
      "New Features & Enhancements",
      "Autoscaling"
    ],
    "pageId": 105
  },
  {
    "content": "Solr will take any policy or preference rules into account when determining where to place new shards and\nreplicas created or moved with various Collections API commands.",
    "hierarchy": [
    ],
    "pageId": 106
  },
  {
    "content": "See the section <span class=\"link\">SolrCloud Autoscaling</span> for details on the options available in 7.0. Expect more features to be\nreleased in subsequent 7.x releases in this area.",
    "hierarchy": [
    ],
    "pageId": 106
  },
  {
    "content": "The Analytics Component has been refactored.",
    "hierarchy": [
      "Other Features & Enhancements"
    ],
    "pageId": 106
  },
  {
    "content": "◦The documentation for this component is in progress; until it is available, please refer to <span class=\"link\">SOLR-11144</span>\nfor more details.\nThere were several other new features released in earlier 6.x releases, which you may have missed:",
    "hierarchy": [
      "Other Features & Enhancements"
    ],
    "pageId": 106
  },
  {
    "content": "◦<span class=\"link\">Learning to Rank</span>\n◦<span class=\"link\">Unified Highlighter</span>\n◦<span class=\"link\">Metrics API<span class=\"fc0\">. See also information about related deprecations in the section </span>JMX Support and MBeans</span>\nbelow.\n◦<span class=\"link\">Payload queries</span>\n◦<span class=\"link\">Streaming Evaluators</span>\n◦<span class=\"link\">/v2 API</span>\n◦<span class=\"link\">Graph streaming expressions</span>",
    "hierarchy": [
      "Other Features & Enhancements"
    ],
    "pageId": 106
  },
  {
    "content": "Several changes have been made to configSets that ship with Solr; not only their content but how Solr\nbehaves in regard to them:",
    "hierarchy": [
      "Configuration and Default Changes",
      "New Default ConfigSet"
    ],
    "pageId": 106
  },
  {
    "content": "The <span class=\"ff4 fs2\">data_driven_configset</span> and <span class=\"ff4 fs2\">basic_configset</span> have been removed, and replaced by the <span class=\"ff4 fs2\">_default</span>\nconfigset. The <span class=\"ff4 fs2\">sample_techproducts_configset</span> also remains, and is designed for use with the example\ndocuments shipped with Solr in the <span class=\"ff4 fs2\">example/exampledocs</span> directory.",
    "hierarchy": [
      "Configuration and Default Changes",
      "New Default ConfigSet"
    ],
    "pageId": 106
  },
  {
    "content": "When creating a new collection, if you do not specify a configSet, the <span class=\"ff4 fs2\">_default</span> will be used.",
    "hierarchy": [
      "Configuration and Default Changes",
      "New Default ConfigSet"
    ],
    "pageId": 106
  },
  {
    "content": "◦If you use SolrCloud, the <span class=\"ff4 fs2\">_default</span> configSet will be automatically uploaded to ZooKeeper.\n◦If you use standalone mode, the instanceDir will be created automatically, using the <span class=\"ff4 fs2\">_default</span>\nconfigSet as it's basis.",
    "hierarchy": [
      "Configuration and Default Changes",
      "New Default ConfigSet"
    ],
    "pageId": 106
  },
  {
    "content": "To improve the functionality of Schemaless Mode, Solr now behaves differently when it detects that data in\nan incoming field should have a text-based field type.",
    "hierarchy": [
      "Configuration and Default Changes",
      "Schemaless Improvements"
    ],
    "pageId": 106
  },
  {
    "content": "Incoming fields will be indexed as <span class=\"ff4 fs2\">text_general</span> by default (you can change this). The name of the field\nwill be the same as the field name defined in the document.",
    "hierarchy": [
      "Configuration and Default Changes",
      "Schemaless Improvements"
    ],
    "pageId": 106
  },
  {
    "content": "A copy field rule will be inserted into your schema to copy the new <span class=\"ff4 fs2\">text_general</span> field to a new field with\nthe name <span class=\"ff4 fs2\"><name>_str</span>. This field's type will be a <span class=\"ff4 fs2\">strings</span> field (to allow for multiple values). The first 256\ncharacters of the text field will be inserted to the new <span class=\"ff4 fs2\">strings</span> field.",
    "hierarchy": [
      "Configuration and Default Changes",
      "Schemaless Improvements"
    ],
    "pageId": 106
  },
  {
    "content": "This behavior can be customized if you wish to remove the copy field rule, or to change the number of\ncharacters inserted to the string field, or the field type used. See the section <span class=\"link\">Schemaless Mode</span> for details.",
    "hierarchy": [
    ],
    "pageId": 107
  },
  {
    "content": "Because copy field rules can slow indexing and increase index size, it's recommended you\nonly use copy fields when you need to. If you do not need to sort or facet on a field, you\nshould remove the automatically-generated copy field rule.",
    "hierarchy": [
    ],
    "pageId": 107
  },
  {
    "content": "Automatic field creation can be disabled with the <span class=\"code\">update.autoCreateFields</span> property. To do this, you can\nuse the Config API with a command such as:",
    "hierarchy": [
    ],
    "pageId": 107
  },
  {
    "content": "curl http://host:8983/solr/mycollection/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
    ],
    "pageId": 107
  },
  {
    "content": "curl http://host:8983/api/collections/mycollection/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
    ],
    "pageId": 107
  },
  {
    "content": "JSON is now the default response format. If you rely on XML responses, you must now define <span class=\"code\">wt=xml</span> in\nyour request. In addition, line indentation is enabled by default (<span class=\"code\">indent=on</span>).",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "The <span class=\"code\">sow</span> parameter (short for \"Split on Whitespace\") now defaults to <span class=\"code\">false</span>, which allows support for\nmulti-word synonyms out of the box. This parameter is used with the eDismax and standard/\"lucene\"\nquery parsers. If this parameter is not explicitly specified as <span class=\"code\">true</span>, query text will not be split on\nwhitespace before analysis.",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "The <span class=\"code\">legacyCloud</span> parameter now defaults to <span class=\"code\">false</span>. If an entry for a replica does not exist in <span class=\"code\">state.json</span>,\nthat replica will not get registered.",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "This may affect users who bring up replicas and they are automatically registered as a part of a shard. It\nis possible to fall back to the old behavior by setting the property <span class=\"code\">legacyCloud=true</span>, in the cluster\nproperties using the following command:",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:2181 -cmd clusterprop -name\nlegacyCloud -val true",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "The eDismax query parser parameter <span class=\"code\">lowercaseOperators</span> now defaults to <span class=\"code\">false</span> if the\nluceneMatchVersion<span class=\"ff1 fs0\"> in </span>solrconfig.xml<span class=\"ff1 fs0\"> is 7.0.0 or above. Behavior for </span>luceneMatchVersion<span class=\"ff1 fs0\"> lower than</span>\n7.0.0 is unchanged (so, <span class=\"code\">true</span>). This means that clients must sent boolean operators (such as AND, OR and\nNOT) in upper case in order to be recognized, or you must explicitly set this parameter to <span class=\"code\">true</span>.",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "The <span class=\"code\">handleSelect</span> parameter in <span class=\"code\">solrconfig.xml</span> now defaults to <span class=\"code\">false</span> if the <span class=\"code\">luceneMatchVersion</span> is\n7.0.0 or above. This causes Solr to ignore the <span class=\"code\">qt</span> parameter if it is present in a request. If you have\nrequest handlers without a leading '/', you can set <span class=\"code\">handleSelect=\"true\"</span> or consider migrating your",
    "hierarchy": [
      "Changes to Default Behaviors"
    ],
    "pageId": 107
  },
  {
    "content": "configuration.",
    "hierarchy": [
    ],
    "pageId": 108
  },
  {
    "content": "The <span class=\"ff2 fs1\">qt</span> parameter is still used as a SolrJ special parameter that specifies the request handler (tail URL\npath) to use.",
    "hierarchy": [
    ],
    "pageId": 108
  },
  {
    "content": "The lucenePlusSort query parser (aka the \"Old Lucene Query Parser\") has been deprecated and is no\nlonger implicitly defined. If you wish to continue using this parser until Solr 8 (when it will be removed),\nyou must register it in your <span class=\"ff2 fs1\">solrconfig.xml</span>, as in: <span class=\"ff2 fs1\"><queryParser name=\"lucenePlusSort\"</span>\nclass=\"solr.OldLuceneQParserPlugin\"/><span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 108
  },
  {
    "content": "The name of <span class=\"ff2 fs1\">TemplateUpdateRequestProcessorFactory</span> is changed to <span class=\"ff2 fs1\">template</span> from <span class=\"ff2 fs1\">Template</span> and the\nname of <span class=\"ff2 fs1\">AtomicUpdateProcessorFactory</span> is changed to <span class=\"ff2 fs1\">atomic</span> from <span class=\"ff2 fs1\">Atomic</span>",
    "hierarchy": [
    ],
    "pageId": 108
  },
  {
    "content": "◦Also, <span class=\"ff2 fs1\">TemplateUpdateRequestProcessorFactory</span> now uses <span class=\"ff2 fs1\">{}</span> instead of <span class=\"ff2 fs1\">${}</span> for <span class=\"ff2 fs1\">template</span>.",
    "hierarchy": [
    ],
    "pageId": 108
  },
  {
    "content": "Solr has implemented *PointField types across the board, to replace Trie* based numeric fields. All Trie*\nfields are now considered deprecated, and will be removed in Solr 8.",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Point Fields Are Default Numeric Types"
    ],
    "pageId": 108
  },
  {
    "content": "If you are using Trie* fields in your schema, you should consider moving to PointFields as soon as feasible.\nChanging to the new PointField types will require you to re-index your data.",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Point Fields Are Default Numeric Types"
    ],
    "pageId": 108
  },
  {
    "content": "The following spatial-related fields have been deprecated:",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nLatLonType",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nGeoHashField",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nSpatialVectorFieldType",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nSpatialTermQueryPrefixTreeFieldType",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "Choose one of these field types instead:",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nLatLonPointSpatialField",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nSpatialRecursivePrefixTreeField",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "\nRptWithGeometrySpatialField",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "See the section <span class=\"link\">Spatial Search</span> for more information.",
    "hierarchy": [
      "Deprecations and Removed Features",
      "Spatial Fields"
    ],
    "pageId": 108
  },
  {
    "content": "The <span class=\"ff2 fs1\"><jmx></span> element in <span class=\"ff2 fs1\">solrconfig.xml</span> has been removed in favor of <span class=\"ff2 fs1\"><metrics><reporter></span> elements\ndefined in <span class=\"ff2 fs1\">solr.xml</span>.",
    "hierarchy": [
      "Deprecations and Removed Features",
      "JMX Support and MBeans"
    ],
    "pageId": 108
  },
  {
    "content": "Limited back-compatibility is offered by automatically adding a default instance of <span class=\"ff2 fs1\">SolrJmxReporter</span> if\nit's missing AND when a local MBean server is found. A local MBean server can be activated either via\nENABLE_REMOTE_JMX_OPTS<span class=\"ff1 fs0\"> in </span>solr.in.sh<span class=\"ff1 fs0\"> or via system properties, e.g.,</span>\n-Dcom.sun.management.jmxremote<span class=\"ff1 fs0\">. This default instance exports all Solr metrics from all registries as</span>\nhierarchical MBeans.",
    "hierarchy": [
      "Deprecations and Removed Features",
      "JMX Support and MBeans"
    ],
    "pageId": 108
  },
  {
    "content": "This behavior can be also disabled by specifying a <span class=\"ff2 fs1\">SolrJmxReporter</span> configuration with a boolean init\nargument <span class=\"ff2 fs1\">enabled</span> set to <span class=\"ff2 fs1\">false</span>. For a more fine-grained control users should explicitly specify at least\none <span class=\"ff2 fs1\">SolrJmxReporter</span> configuration.",
    "hierarchy": [
    ],
    "pageId": 109
  },
  {
    "content": "See also the section <span class=\"link\">The <metrics><reporters> Element</span>, which describes how to set up Metrics Reporters\nin <span class=\"ff2 fs1\">solr.xml</span>. Note that back-compatibility support may be removed in Solr 8.",
    "hierarchy": [
    ],
    "pageId": 109
  },
  {
    "content": "MBean names and attributes now follow the hierarchical names used in metrics. This is reflected also in\n/admin/mbeans<span class=\"ff1 fs0\"> and </span>/admin/plugins<span class=\"ff1 fs0\"> output, and can be observed in the UI Plugins tab, because now all</span>\nthese APIs get their data from the metrics API. The old (mostly flat) JMX view has been removed.",
    "hierarchy": [
    ],
    "pageId": 109
  },
  {
    "content": "The following changes were made in SolrJ.",
    "hierarchy": [
      "SolrJ"
    ],
    "pageId": 109
  },
  {
    "content": "HttpClientInterceptorPlugin is now <span class=\"ff2 fs1\">HttpClientBuilderPlugin</span> and must work with a\nSolrHttpClientBuilder<span class=\"ff1 fs0\"> rather than an </span>HttpClientConfigurer<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "SolrJ"
    ],
    "pageId": 109
  },
  {
    "content": "HttpClientUtil now allows configuring <span class=\"ff2 fs1\">HttpClient</span> instances via <span class=\"ff2 fs1\">SolrHttpClientBuilder</span> rather than\nan <span class=\"ff2 fs1\">HttpClientConfigurer</span>. Use of env variable <span class=\"ff2 fs1\">SOLR_AUTHENTICATION_CLIENT_CONFIGURER</span> no longer\nworks, please use <span class=\"ff2 fs1\">SOLR_AUTHENTICATION_CLIENT_BUILDER</span>",
    "hierarchy": [
      "SolrJ"
    ],
    "pageId": 109
  },
  {
    "content": "SolrClient implementations now use their own internal configuration for socket timeouts, connect\ntimeouts, and allowing redirects rather than what is set as the default when building the <span class=\"ff2 fs1\">HttpClient</span>\ninstance. Use the appropriate setters on the <span class=\"ff2 fs1\">SolrClient</span> instance.",
    "hierarchy": [
      "SolrJ"
    ],
    "pageId": 109
  },
  {
    "content": "HttpSolrClient#setAllowCompression has been removed and compression must be enabled as a\nconstructor param.",
    "hierarchy": [
      "SolrJ"
    ],
    "pageId": 109
  },
  {
    "content": "HttpSolrClient#setDefaultMaxConnectionsPerHost and <span class=\"ff2 fs1\">HttpSolrClient#setMaxTotalConnections</span>\nhave been removed. These now default very high and can only be changed via parameter when creating\nan HttpClient instance.",
    "hierarchy": [
      "SolrJ"
    ],
    "pageId": 109
  },
  {
    "content": "The <span class=\"ff2 fs1\">defaultOperator</span> parameter in the schema is no longer supported. Use the <span class=\"ff2 fs1\">q.op</span> parameter instead.\nThis option had been deprecated for several releases. See the section <span class=\"link\">Standard Query Parser Parameters</span>\nfor more information.",
    "hierarchy": [
      "Other Deprecations and Removals"
    ],
    "pageId": 109
  },
  {
    "content": "The <span class=\"ff2 fs1\">defaultSearchField</span> parameter in the schema is no longer supported. Use the <span class=\"ff2 fs1\">df</span> parameter\ninstead. This option had been deprecated for several releases. See the section <span class=\"link\">Standard Query Parser</span>\nParameters<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
      "Other Deprecations and Removals"
    ],
    "pageId": 109
  },
  {
    "content": "The <span class=\"ff2 fs1\">mergePolicy</span>, <span class=\"ff2 fs1\">mergeFactor</span> and <span class=\"ff2 fs1\">maxMergeDocs</span> parameters have been removed and are no longer\nsupported. You should define a <span class=\"ff2 fs1\">mergePolicyFactory</span> instead. See the section <span class=\"link\">the mergePolicyFactory</span> for\nmore information.",
    "hierarchy": [
      "Other Deprecations and Removals"
    ],
    "pageId": 109
  },
  {
    "content": "The PostingsSolrHighlighter has been deprecated. It's recommended that you move to using the\nUnifiedHighlighter instead. See the section <span class=\"link\">Unified Highlighter</span> for more information about this\nhighlighter.",
    "hierarchy": [
      "Other Deprecations and Removals"
    ],
    "pageId": 109
  },
  {
    "content": "Index-time boosts have been removed from Lucene, and are no longer available from Solr. If any boosts\nare provided, they will be ignored by the indexing chain. As a replacement, index-time scoring factors\nshould be indexed in a separate field and combined with the query score using a function query. See the\nsection <span class=\"link\">Function Queries</span> for more information.",
    "hierarchy": [
      "Other Deprecations and Removals"
    ],
    "pageId": 109
  },
  {
    "content": "<span class=\"ls1\">The <span class=\"ff2 fs1\">StandardRequestHandler</span> is deprecated. Use <span class=\"ff2 fs1\">SearchHandler</span> instead.</span>",
    "hierarchy": [
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">To improve parameter consistency in the Collections API, the parameter names <span class=\"ff2 fs1\">fromNode</span> for the</span>\nMOVEREPLICA command and <span class=\"ff2 fs1\">source</span>, <span class=\"ff2 fs1\">target</span> for the REPLACENODE command have been deprecated\nand replaced with <span class=\"ff2 fs1\">sourceNode</span> and <span class=\"ff2 fs1\">targetNode</span> instead. The old names will continue to work for back-\ncompatibility but they will be removed in Solr 8.",
    "hierarchy": [
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">The unused <span class=\"ff2 fs1\">valType</span> option has been removed from ExternalFileField, if you have this in your schema</span>\nyou can safely remove it.",
    "hierarchy": [
    ],
    "pageId": 110
  },
  {
    "content": "The following summary of changes in earlier 6.x releases highlights significant changes released between\nSolr 6.0 and 6.6 that were listed in earlier versions of this Guide. Mentions of deprecations are likely\nsuperseded by removal in Solr 7, as noted in the above sections.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "Note again that this is not a complete list of all changes that may impact your installation, so a thorough\nreview of CHANGES.txt is highly recommended if upgrading from any version earlier than 6.6.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">The Solr contribs map-reduce, morphlines-core and morphlines-cell have been removed.</span>",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">JSON Facet API now uses hyper-log-log for numBuckets cardinality calculation and calculates cardinality</span>\nbefore filtering buckets by any <span class=\"ff2 fs1\">mincount</span> greater than 1.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">If you use historical dates, specifically on or before the year 1582, you should re-index for better date</span>\nhandling.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">If you use the JSON Facet API (json.facet) with <span class=\"ff2 fs1\">method=stream</span>, you must now set <span class=\"ff2 fs1\">sort='index asc'</span> to</span>\nget the streaming behavior; otherwise it won't stream. Reminder: <span class=\"ff2 fs1\">method</span> is a hint that doesn’t change\ndefaults of other parameters.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">If you use the JSON Facet API (json.facet) to facet on a numeric field and if you use <span class=\"ff2 fs1\">mincount=0</span> or if you</span>\nset the prefix, you will now get an error as these options are incompatible with numeric faceting.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">Solr's logging verbosity at the INFO level has been greatly reduced, and you may need to update the log</span>\nconfigs to use the DEBUG level to see all the logging messages you used to see at INFO level before.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">We are no longer backing up <span class=\"ff2 fs1\">solr.log</span> and <span class=\"ff2 fs1\">solr_gc.log</span> files in date-stamped copies forever. If you</span>\nrelied on the <span class=\"ff2 fs1\">solr_log_<date></span> or <span class=\"ff2 fs1\">solr_gc_log_<date></span> being in the logs folder that will no longer be the\ncase. See the section <span class=\"link\">Configuring Logging</span> for details on how log rotation works as of Solr 6.3.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">The create/deleteCollection methods on <span class=\"ff2 fs1\">MiniSolrCloudCluster</span> have been deprecated. Clients should</span>\ninstead use the <span class=\"ff2 fs1\">CollectionAdminRequest</span> API. In addition,\nMiniSolrCloudCluster#uploadConfigDir(File, String)<span class=\"ff1 fs0\"> has been deprecated in favour of</span>\n#uploadConfigSet(Path, String)<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">The <span class=\"ff2 fs1\">bin/solr.in.sh</span> (<span class=\"ff2 fs1\">bin/solr.in.cmd</span> on Windows) is now completely commented by default.</span>\nPreviously, this wasn't so, which had the effect of masking existing environment variables.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">The <span class=\"ff2 fs1\">_version_</span> field is no longer indexed and is now defined with <span class=\"ff2 fs1\">indexed=false</span> by default, because the</span>\nfield has DocValues enabled.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">The <span class=\"ff2 fs1\">/export</span> handler has been changed so it no longer returns zero (0) for numeric fields that are not in</span>\nthe original document. One consequence of this change is that you must be aware that some tuples will\nnot have values if there were none in the original document.",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "<span class=\"ls1\">Metrics-related classes in <span class=\"ff2 fs1\">org.apache.solr.util.stats</span> have been removed in favor of the <span class=\"link\">Dropwizard</span></span>",
    "hierarchy": [
      "Major Changes in Earlier 6.x Versions"
    ],
    "pageId": 110
  },
  {
    "content": "metrics library<span class=\"fc1\">. Any custom plugins using these classes should be changed to use the equivalent classes</span>\nfrom the metrics library. As part of this, the following changes were made to the output of Overseer\nStatus API:",
    "hierarchy": [
    ],
    "pageId": 111
  },
  {
    "content": "◦The \"totalTime\" metric has been removed because it is no longer supported.\n◦The metrics \"75thPctlRequestTime\", \"95thPctlRequestTime\", \"99thPctlRequestTime\" and\n\"999thPctlRequestTime\" in Overseer Status API have been renamed to \"75thPcRequestTime\",\n\"95thPcRequestTime\" and so on for consistency with stats output in other parts of Solr.\n◦The metrics \"avgRequestsPerMinute\", \"5minRateRequestsPerMinute\" and\n\"15minRateRequestsPerMinute\" have been replaced by corresponding per-second rates viz.\n\"avgRequestsPerSecond\", \"5minRateRequestsPerSecond\" and \"15minRateRequestsPerSecond\" for\nconsistency with stats output in other parts of Solr.\nA new highlighter named UnifiedHighlighter has been added. You are encouraged to try out the\nUnifiedHighlighter by setting <span class=\"code\">hl.method=unified</span> and report feedback. It's more efficient/faster than the\nother highlighters, especially compared to the original Highlighter. See <span class=\"code\">HighlightParams.java</span> for a\nlisting of highlight parameters annotated with which highlighters use them.\nhl.useFastVectorHighlighter<span class=\"ff1 fs0\"> is now considered deprecated in lieu of </span>hl.method=fastVector<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 111
  },
  {
    "content": "The <span class=\"code\">maxWarmingSearchers</span><span class=\"fc0\"> parameter</span> now defaults to 1, and more importantly commits will now block if\nthis limit is exceeded instead of throwing an exception (a good thing). Consequently there is no longer a\nrisk in overlapping commits. Nonetheless users should continue to avoid excessive committing. Users\nare advised to remove any pre-existing <span class=\"code\">maxWarmingSearchers</span> entries from their <span class=\"code\">solrconfig.xml</span> files.",
    "hierarchy": [
    ],
    "pageId": 111
  },
  {
    "content": "The <span class=\"fc0\">Complex Phrase query parser</span> now supports leading wildcards. Beware of its possible heaviness,\nusers are encouraged to use ReversedWildcardFilter in index time analysis.",
    "hierarchy": [
    ],
    "pageId": 111
  },
  {
    "content": "The JMX metric \"avgTimePerRequest\" (and the corresponding metric in the metrics API for each handler)\nused to be a simple non-decaying average based on total cumulative time and the number of requests.\nThe Codahale Metrics implementation applies exponential decay to this value, which heavily biases the\naverage towards the last 5 minutes.",
    "hierarchy": [
    ],
    "pageId": 111
  },
  {
    "content": "Parallel SQL now uses Apache Calcite as its SQL framework. As part of this change the default\naggregation mode has been changed to <span class=\"code\">facet</span> rather than <span class=\"code\">map_reduce</span>. There have also been changes to\nthe SQL aggregate response and some SQL syntax changes. Consult the <span class=\"fc0\">Parallel SQL Interface</span>\ndocumentation for full details.",
    "hierarchy": [
    ],
    "pageId": 111
  },
  {
    "content": "There are some major changes in Solr 6 to consider before starting to migrate your configurations and\nindexes.",
    "hierarchy": [
      "Major Changes from Solr 5 to Solr 6"
    ],
    "pageId": 111
  },
  {
    "content": "There are many hundreds of changes, so a thorough review of the <span class=\"fc0\">Solr Upgrade Notes</span> section as well as the\nCHANGES.txt<span class=\"fc1\"> file in your Solr instance will help you plan your migration to Solr 6. This section attempts to</span>\nhighlight some of the major changes you should be aware of.",
    "hierarchy": [
      "Major Changes from Solr 5 to Solr 6"
    ],
    "pageId": 111
  },
  {
    "content": "Some of the major improvements in Solr 6 include:",
    "hierarchy": [
      "Major Changes from Solr 5 to Solr 6",
      "Highlights of New Features in Solr 6"
    ],
    "pageId": 111
  },
  {
    "content": "Introduced in Solr 5, <span class=\"link\">Streaming Expressions</span> allow querying Solr and getting results as a stream of data,\nsorted and aggregated as requested.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "Several new expression types have been added in Solr 6:",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "Parallel expressions using a MapReduce-like shuffling for faster throughput of high-cardinality fields.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "Daemon expressions to support continuous push or pull streaming.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "Advanced parallel relational algebra like distributed joins, intersections, unions and complements.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "Publish/Subscribe messaging.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "JDBC connections to pull data from other systems and join with documents in the Solr index.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 112
  },
  {
    "content": "Built on streaming expressions, new in Solr 6 is a <span class=\"link\">Parallel SQL interface</span> to be able to send SQL queries to\nSolr. SQL statements are compiled to streaming expressions on the fly, providing the full range of\naggregations available to streaming expression requests. A JDBC driver is included, which allows using SQL\nclients and database visualization tools to query your Solr index and import data to other systems.",
    "hierarchy": [
      "Parallel SQL Interface"
    ],
    "pageId": 112
  },
  {
    "content": "Replication across data centers is now possible with <span class=\"link\">Cross Data Center Replication</span>. Using an active-passive\nmodel, a SolrCloud cluster can be replicated to another data center, and monitored with a new API.",
    "hierarchy": [
      "Cross Data Center Replication"
    ],
    "pageId": 112
  },
  {
    "content": "A new <span class=\"code\">graph</span><span class=\"link\"> query parser</span> makes it possible to to graph traversal queries of Directed (Cyclic) Graphs\nmodelled using Solr documents.",
    "hierarchy": [
      "Graph QueryParser"
    ],
    "pageId": 112
  },
  {
    "content": "Most non-text field types in the Solr sample configsets now default to using <span class=\"link\">DocValues</span>.",
    "hierarchy": [
      "DocValues"
    ],
    "pageId": 112
  },
  {
    "content": "The minimum supported version of Java for Solr 6 (and the <span class=\"link\">SolrJ client libraries</span>) is now Java 8.",
    "hierarchy": [
      "Java 8 Required"
    ],
    "pageId": 112
  },
  {
    "content": "Solr 6 has no support for reading Lucene/Solr 4.x and earlier indexes. Be sure to run the Lucene\nIndexUpgrader<span class=\"ff2 fs0\"> included with Solr 5.5 if you might still have old 4x formatted segments in your index.</span>\nAlternatively: fully optimize your index with Solr 5.5 to make sure it consists only of one up-to-date index\nsegment.",
    "hierarchy": [
      "Index Format Changes"
    ],
    "pageId": 112
  },
  {
    "content": "Solr's default behavior when a <span class=\"code\">solrconfig.xml</span> does not explicitly define a <span class=\"code\"><schemaFactory/></span> is now\ndependent on the <span class=\"code\">luceneMatchVersion</span> specified in that <span class=\"code\">solrconfig.xml</span>. When <span class=\"code\">luceneMatchVersion <</span>\n6.0<span class=\"ff2 fs0\">, </span>ClassicIndexSchemaFactory<span class=\"ff2 fs0\"> will continue to be used for back compatibility, otherwise an instance of</span>",
    "hierarchy": [
      "Managed Schema is now the Default"
    ],
    "pageId": 112
  },
  {
    "content": "ManagedIndexSchemaFactory<span class=\"ff2 fs1\"> will be used.</span>",
    "hierarchy": [
    ],
    "pageId": 113
  },
  {
    "content": "The most notable impacts of this change are:",
    "hierarchy": [
    ],
    "pageId": 113
  },
  {
    "content": "Existing <span class=\"ff1 fs0\">solrconfig.xml</span> files that are modified to use <span class=\"ff1 fs0\">luceneMatchVersion >= 6.0</span>, but do <span class=\"code\">not</span> have an\nexplicitly configured <span class=\"ff1 fs0\">ClassicIndexSchemaFactory</span>, will have their <span class=\"ff1 fs0\">schema.xml</span> file automatically\nupgraded to a <span class=\"ff1 fs0\">managed-schema</span> file.",
    "hierarchy": [
    ],
    "pageId": 113
  },
  {
    "content": "Schema modifications via the <span class=\"link\">Schema API</span> will now be enabled by default.",
    "hierarchy": [
    ],
    "pageId": 113
  },
  {
    "content": "Please review the <span class=\"link\">Schema Factory Definition in SolrConfig</span> section for more details.",
    "hierarchy": [
    ],
    "pageId": 113
  },
  {
    "content": "Solr's default behavior when a Schema does not explicitly define a global <span class=\"ff1 fs0\"><similarity/></span> is now dependent\non the <span class=\"ff1 fs0\">luceneMatchVersion</span> specified in the <span class=\"ff1 fs0\">solrconfig.xml</span>. When <span class=\"ff1 fs0\">luceneMatchVersion < 6.0</span>, an\ninstance of <span class=\"ff1 fs0\">ClassicSimilarityFactory</span> will be used, otherwise an instance of <span class=\"ff1 fs0\">SchemaSimilarityFactory</span>\nwill be used. Most notably this change means that users can take advantage of per Field Type similarity\ndeclarations, without needing to also explicitly declare a global usage of <span class=\"ff1 fs0\">SchemaSimilarityFactory</span>.",
    "hierarchy": [
      "Default Similarity Changes"
    ],
    "pageId": 113
  },
  {
    "content": "Regardless of whether it is explicitly declared, or used as an implicit global default,\nSchemaSimilarityFactory<span class=\"ff2 fs1\"> 's implicit behavior when a Field Types do not declare an explicit </span><similarity />\nhas also been changed to depend on the the <span class=\"ff1 fs0\">luceneMatchVersion</span>. When <span class=\"ff1 fs0\">luceneMatchVersion < 6.0</span>, an\ninstance of <span class=\"ff1 fs0\">ClassicSimilarity</span> will be used, otherwise an instance of <span class=\"ff1 fs0\">BM25Similarity</span> will be used. A\ndefaultSimFromFieldType<span class=\"ff2 fs1\"> init option may be specified on the </span>SchemaSimilarityFactory<span class=\"ff2 fs1\"> declaration to</span>\nchange this behavior. Please review the <span class=\"ff1 fs0\">SchemaSimilarityFactory</span> javadocs for more details",
    "hierarchy": [
      "Default Similarity Changes"
    ],
    "pageId": 113
  },
  {
    "content": "DELETESHARD and DELETEREPLICA now default to deleting the instance directory, data directory, and index\ndirectory for any replica they delete. Please review the <span class=\"link\">Collection API</span> documentation for details on new\nrequest parameters to prevent this behavior if you wish to keep all data on disk when using these\ncommands",
    "hierarchy": [
      "Replica & Shard Delete Command Changes"
    ],
    "pageId": 113
  },
  {
    "content": "The <span class=\"ff1 fs0\">facet.date</span> parameter (and associated <span class=\"ff1 fs0\">facet.date.*</span> parameters) that were deprecated in Solr 3.x have\nbeen removed completely. If you have not yet switched to using the equivalent <span class=\"ff1 fs0\">facet.range</span> functionality\nyou must do so now before upgrading.",
    "hierarchy": [
      "facet.date.* Parameters Removed"
    ],
    "pageId": 113
  },
  {
    "content": "This section discusses the Solr Administration User Interface (\"Admin UI\").",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "The <span class=\"link\">Overview of the Solr Admin UI</span> explains the basic features of the user interface, what's on the initial\nAdmin UI page, and how to configure the interface. In addition, there are pages describing each screen of\nthe Admin UI:",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Getting Assistance</span> shows you how to get more information about the UI.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Logging</span> shows recent messages logged by this Solr node and provides a way to change logging levels\nfor specific classes.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Cloud Screens</span> display information about nodes when running in SolrCloud mode.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Collections / Core Admin</span> explains how to get management information about each core.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Java Properties</span> shows the Java information about each core.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Thread Dump</span> lets you see detailed information about each thread, along with state information.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Suggestions Screen</span> displays the state of the system with regard to the autoscaling policies that are in\nplace.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "<span class=\"link\">Collection-Specific Tools</span> is a section explaining additional screens available for each collection.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "◦<span class=\"link\">Analysis<span class=\"fc1\"> - lets you analyze the data found in specific fields.</span></span>\n◦<span class=\"link\">Dataimport<span class=\"fc1\"> - shows you information about the current status of the Data Import Handler.</span></span>\n◦<span class=\"link\">Documents<span class=\"fc1\"> - provides a simple form allowing you to execute various Solr indexing commands</span></span>\ndirectly from the browser.\n◦<span class=\"link\">Files<span class=\"fc1\"> - shows the current core configuration files such as <span class=\"ff4 fs2\">solrconfig.xml</span>.</span></span>\n◦<span class=\"link\">Query<span class=\"fc1\"> - lets you submit a structured query about various elements of a core.</span></span>\n◦<span class=\"link\">Stream<span class=\"fc1\"> - allows you to submit streaming expressions and see results and parsing explanations.</span></span>\n◦<span class=\"link\">Schema Browser<span class=\"fc1\"> - displays schema data in a browser window.</span></span>\n<span class=\"link\">Core-Specific Tools</span> is a section explaining additional screens available for each named core.",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "◦<span class=\"link\">Ping<span class=\"fc1\"> - lets you ping a named core and determine whether the core is active.</span></span>\n◦<span class=\"link\">Plugins/Stats<span class=\"fc1\"> - shows statistics for plugins and other installed components.</span></span>\n◦<span class=\"link\">Replication<span class=\"fc1\"> - shows you the current replication status for the core, and lets you enable/disable</span></span>\nreplication.\n◦<span class=\"link\">Segments Info<span class=\"fc1\"> - Provides a visualization of the underlying Lucene index segments.</span></span>",
    "hierarchy": [
      "Using the Solr Administration User Interface"
    ],
    "pageId": 114
  },
  {
    "content": "Solr features a Web interface that makes it easy for Solr administrators and programmers to view <span class=\"link\">Solr</span>\nconfiguration<span class=\"fc1\"> details, run </span>queries and analyze<span class=\"fc1\"> document fields in order to fine-tune a Solr configuration and</span>\naccess <span class=\"link\">online documentation</span> and other help.",
    "hierarchy": [
      "Overview of the Solr Admin UI"
    ],
    "pageId": 115
  },
  {
    "content": "Accessing the URL <span class=\"ff4 fs2\">http://hostname:8983/solr/</span> will show the main dashboard, which is divided into two\nparts.",
    "hierarchy": [
      "Overview of the Solr Admin UI"
    ],
    "pageId": 115
  },
  {
    "content": "A left-side of the screen is a menu under the Solr logo that provides the navigation through the screens of\nthe UI. The first set of links are for system-level information and configuration and provide access to\nLogging<span class=\"fc1\">, </span>Collection/Core Administration<span class=\"fc1\">, and </span>Java Properties<span class=\"fc1\">, among other things. At the end of this</span>\ninformation is at least one pulldown listing Solr cores configured for this instance. On <span class=\"link\">SolrCloud</span> nodes, an\nadditional pulldown list shows all collections in this cluster. Clicking on a collection or core name shows\nsecondary menus of information for the specified collection or core, such as a <span class=\"link\">Schema Browser</span>, <span class=\"link\">Config Files</span>,\nPlugins & Statistics<span class=\"fc1\">, and an ability to perform </span>Queries<span class=\"fc1\"> on indexed data.</span>",
    "hierarchy": [
      "Overview of the Solr Admin UI"
    ],
    "pageId": 115
  },
  {
    "content": "The center of the screen shows the detail of the option selected. This may include a sub-navigation for the\noption or text or graphical representation of the requested data. See the sections in this guide for each\nscreen for more details.",
    "hierarchy": [
      "Overview of the Solr Admin UI"
    ],
    "pageId": 115
  },
  {
    "content": "Under the covers, the Solr Admin UI re-uses the same HTTP APIs available to all clients to access Solr-related\ndata to drive an external interface.",
    "hierarchy": [
      "Overview of the Solr Admin UI"
    ],
    "pageId": 115
  },
  {
    "content": "The path to the Solr Admin UI given above is <span class=\"code\">http://hostname:port/solr</span>, which redirects\nto <span class=\"code\">http://hostname:port/solr/#/</span> in the current version. A convenience redirect is also\nsupported, so simply accessing the Admin UI at <span class=\"code\">http://hostname:port/</span> will also redirect\nto <span class=\"code\">http://hostname:port/solr/#/</span>.",
    "hierarchy": [
    ],
    "pageId": 116
  },
  {
    "content": "At the bottom of each screen of the Admin UI is a set of links that can be used to get more assistance with\nconfiguring and using Solr.",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "These icons include the following links.",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "DocumentationNavigates to the Apache Solr documentation hosted on\nhttps://lucene.apache.org/solr/<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "Issue TrackerNavigates to the JIRA issue tracking server for the Apache Solr project. This\nserver resides at <span class=\"link\">https://issues.apache.org/jira/browse/SOLR</span>.",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "IRC ChannelNavigates to Solr's <span class=\"link\">IRC</span> live-chat room: <span class=\"link\">http://webchat.freenode.net/?</span>\nchannels=#solr<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "Community forumNavigates to the Apache Wiki page which has further information about ways to\nengage in the Solr User community mailing lists: <span class=\"link\">https://wiki.apache.org/solr/</span>\nUsingMailingLists<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "Solr Query SyntaxNavigates to the section <span class=\"link\">Query Syntax and Parsing</span> in this Reference Guide.",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "These links cannot be modified without editing the <span class=\"ff4 fs2\">index.html</span> in the <span class=\"ff4 fs2\">server/solr/solr-webapp</span> directory\nthat contains the Admin UI files.",
    "hierarchy": [
      "Getting Assistance"
    ],
    "pageId": 117
  },
  {
    "content": "The Logging page shows recent messages logged by this Solr node.",
    "hierarchy": [
      "Logging"
    ],
    "pageId": 118
  },
  {
    "content": "When you click the link for \"Logging\", a page similar to the one below will be displayed:",
    "hierarchy": [
      "Logging"
    ],
    "pageId": 118
  },
  {
    "content": "While this example shows logged messages for only one core, if you have multiple cores in a single instance,\nthey will each be listed, with the level for each.",
    "hierarchy": [
      "Logging"
    ],
    "pageId": 118
  },
  {
    "content": "When you select the <span class=\"ff1\">Level</span> link on the left, you see the hierarchy of classpaths and classnames for your\ninstance. A row highlighted in yellow indicates that the class has logging capabilities. Click on a highlighted\nrow, and a menu will appear to allow you to change the log level for that class. Characters in boldface\nindicate that the class will not be affected by level changes to root.",
    "hierarchy": [
      "Logging",
      "Selecting a Logging Level"
    ],
    "pageId": 118
  },
  {
    "content": "For an explanation of the various logging levels, see <span class=\"link\">Configuring Logging</span>.",
    "hierarchy": [
      "Logging",
      "Selecting a Logging Level"
    ],
    "pageId": 118
  },
  {
    "content": "When running in <span class=\"link\">SolrCloud</span> mode, a \"Cloud\" option will appear in the Admin UI between <span class=\"link\">Logging</span> and\nCollections/Core Admin<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Cloud Screens"
    ],
    "pageId": 119
  },
  {
    "content": "This screen provides status information about each collection & node in your cluster, as well as access to the\nlow level data being stored in <span class=\"link\">ZooKeeper</span>.",
    "hierarchy": [
      "Cloud Screens"
    ],
    "pageId": 119
  },
  {
    "content": "The \"Cloud\" menu option is only available on Solr instances running in <span class=\"link\">SolrCloud mode</span>.\nSingle node or master/slave replication instances of Solr will not display this option.",
    "hierarchy": [
      "Cloud Screens"
    ],
    "pageId": 119
  },
  {
    "content": "Click on the Cloud option in the left-hand navigation, and a small sub-menu appears with options called\n\"Tree\", \"Graph\", \"Graph (Radial)\" and \"Dump\". The default view (\"Graph\") shows a graph of each collection,\nthe shards that make up those collections, and the addresses of each replica for each shard.",
    "hierarchy": [
      "Cloud Screens"
    ],
    "pageId": 119
  },
  {
    "content": "This example shows the very simple two-node cluster created using the <span class=\"ff5 fs3\">bin/solr -e cloud -noprompt</span>\nexample command. In addition to the 2 shard, 2 replica \"gettingstarted\" collection, there is an additional\n\"films\" collection consisting of a single shard/replica:",
    "hierarchy": [
      "Cloud Screens"
    ],
    "pageId": 119
  },
  {
    "content": "The \"Graph (Radial)\" option provides a different visual view of each node. Using the same example cluster,\nthe radial graph view looks like:",
    "hierarchy": [
      "Cloud Screens"
    ],
    "pageId": 119
  },
  {
    "content": "The \"Tree\" option shows a directory structure of the data in ZooKeeper, including cluster wide information\nregarding the <span class=\"ff2 fs1\">live_nodes</span> and <span class=\"ff2 fs1\">overseer</span> status, as well as collection specific information such as the\nstate.json<span class=\"ff1 fs0\">, current shard leaders, and configuration files in use. In this example, we see the </span>state.json<span class=\"ff1 fs0\"> file</span>\ndefinition for the \"films\" collection:",
    "hierarchy": [
    ],
    "pageId": 120
  },
  {
    "content": "The final option is \"Dump\", which returns a JSON document containing all nodes, their contents and their\nchildren (recursively). This can be used to export a snapshot of all the data that Solr has kept inside\nZooKeeper and can aid in debugging SolrCloud problems.",
    "hierarchy": [
    ],
    "pageId": 120
  },
  {
    "content": "The Collections screen provides some basic functionality for managing your Collections, powered by the\nCollections API<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "If you are running a single node Solr instance, you will not see a Collections option in the\nleft nav menu of the Admin UI.",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "You will instead see a \"Core Admin\" screen that supports some comparable Core level\ninformation & manipulation via the <span class=\"link\">CoreAdmin API</span> instead.",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "The main display of this page provides a list of collections that exist in your cluster. Clicking on a collection\nname provides some basic metadata about how the collection is defined, and its current shards & replicas,\nwith options for adding and deleting individual replicas.",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "The buttons at the top of the screen let you make various collection level changes to your cluster, from add\nnew collections or aliases to reloading or deleting a single collection.",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "Replicas can be deleted by clicking the red \"X\" next to the replica name.",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "If the shard is inactive, for example after a <span class=\"link\">SPLITSHARD action</span>, an option to delete the shard will appear as a\nred \"X\" next to the shard name.",
    "hierarchy": [
      "Collections / Core Admin"
    ],
    "pageId": 121
  },
  {
    "content": "The Java Properties screen provides easy access to one of the most essential components of a top-\nperforming Solr systems. With the Java Properties screen, you can see all the properties of the JVM running\nSolr, including the class paths, file encodings, JVM memory settings, operating system, and more.",
    "hierarchy": [
      "Java Properties"
    ],
    "pageId": 123
  },
  {
    "content": "The Thread Dump screen lets you inspect the currently active threads on your server.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "Each thread is listed and access to the stacktraces is available where applicable. Icons to the left indicate the\nstate of the thread: for example, threads with a green check-mark in a green circle are in a \"RUNNABLE\"\nstate. On the right of the thread name, a down-arrow means you can expand to see the stacktrace for that\nthread.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "When you move your cursor over a thread name, a box floats over the name with the state for that thread.\nThread states can be:",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "NEWA thread that has not yet started.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "RUNNABLEA thread executing in the Java virtual machine.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "BLOCKEDA thread that is blocked waiting for a monitor lock.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "WAITINGA thread that is waiting indefinitely for another thread to perform a particular\naction.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "TIMED_WAITINGA thread that is waiting for another thread to perform an action for up to a\nspecified waiting time.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "TERMINATEDA thread that has exited.",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "When you click on one of the threads that can be expanded, you'll see the stacktrace, as in the example\nbelow:",
    "hierarchy": [
      "Thread Dump"
    ],
    "pageId": 124
  },
  {
    "content": "You can also check the <span class=\"code\">Show all Stacktraces</span> button to automatically enable expansion for all threads.",
    "hierarchy": [
    ],
    "pageId": 125
  },
  {
    "content": "The Suggestions screen shows violations to an <span class=\"link\">autoscaling policy</span> that exist in the\nsystem, and allows you to take action to correct the violations.",
    "hierarchy": [
      "Suggestions Screen"
    ],
    "pageId": 126
  },
  {
    "content": "This screen is a visual representation of the output of the <span class=\"link\">Suggestions API</span>.",
    "hierarchy": [
      "Suggestions Screen"
    ],
    "pageId": 126
  },
  {
    "content": "When there are no violations or other suggestions, the screen will appear somewhat blank:",
    "hierarchy": [
      "Suggestions Screen"
    ],
    "pageId": 126
  },
  {
    "content": "When the system is in violation of an aspect of a policy, each violation will be shown, as in this screenshot:",
    "hierarchy": [
      "Suggestions Screen"
    ],
    "pageId": 126
  },
  {
    "content": "A line is shown for each violation. In this case, we have defined a policy where no replica can exist on a node\nthat has less than 500Gb of available disk space. In this example, 4 replicas in our sample cluster violates this\nrule.",
    "hierarchy": [
    ],
    "pageId": 127
  },
  {
    "content": "In the \"Action\" column, the green button allows you to execute the recommended change to allow the\nsystem to return to compliance with the policy. If you hover your mouse over this button, you will see the\nrecommended Collections API command:",
    "hierarchy": [
    ],
    "pageId": 127
  },
  {
    "content": "In this case, the recommendation is to issue a MOVEREPLICA command to move this replica to a node with\nmore available disk space.",
    "hierarchy": [
    ],
    "pageId": 128
  },
  {
    "content": "Since autoscaling features are only available in SolrCloud mode, this screen will only appear\nwhen running Solr in SolrCloud mode.",
    "hierarchy": [
    ],
    "pageId": 128
  },
  {
    "content": "In the left-hand navigation bar, you will see a pull-down menu titled \"Collection Selector\" that can be used to\naccess collection specific administration screens.",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "The \"Collection Selector\" pull-down menu is only available on Solr instances running in\nSolrCloud mode<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "Single node or master/slave replication instances of Solr will not display this menu, instead\nthe Collection specific UI pages described in this section will be available in the <span class=\"link\">Core</span>\nSelector pull-down menu<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "Clicking on the Collection Selector pull-down menu will show a list of the collections in your Solr cluster, with\na search box that can be used to find a specific collection by name. When you select a collection from the\npull-down, the main display of the page will display some basic metadata about the collection, and a\nsecondary menu will appear in the left nav with links to additional collection specific administration screens.",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "The collection-specific UI screens are listed below, with a link to the section of this guide to find out more:",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Analysis<span class=\"fc1\"> - lets you analyze the data found in specific fields.</span></span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Dataimport<span class=\"fc1\"> - shows you information about the current status of the Data Import Handler.</span></span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Documents<span class=\"fc1\"> - provides a simple form allowing you to execute various Solr indexing commands directly</span></span>\nfrom the browser.",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Files<span class=\"fc1\"> - shows the current core configuration files such as <span class=\"ff5 fs3\">solrconfig.xml</span>.</span></span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Query<span class=\"fc1\"> - lets you submit a structured query about various elements of a core.</span></span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Stream<span class=\"fc1\"> - allows you to submit streaming expressions and see results and parsing explanations.</span></span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "<span class=\"link\">Schema Browser<span class=\"fc1\"> - displays schema data in a browser window.</span></span>",
    "hierarchy": [
      "Collection-Specific Tools"
    ],
    "pageId": 129
  },
  {
    "content": "The Analysis screen lets you inspect how data will be handled according to the field, field type and dynamic",
    "hierarchy": [
      "Collection-Specific Tools",
      "Analysis Screen"
    ],
    "pageId": 129
  },
  {
    "content": "field configurations found in your Schema. You can analyze how content would be handled during indexing\nor during query processing and view the results separately or at the same time. Ideally, you would want\ncontent to be handled consistently, and this screen allows you to validate the settings in the field type or\nfield analysis chains.",
    "hierarchy": [
    ],
    "pageId": 130
  },
  {
    "content": "Enter content in one or both boxes at the top of the screen, and then choose the field or field type\ndefinitions to use for analysis.",
    "hierarchy": [
    ],
    "pageId": 130
  },
  {
    "content": "If you click the <span class=\"ff2\">Verbose Output</span> check box, you see more information, including more details on the\ntransformations to the input (such as, convert to lower case, strip extra characters, etc.) including the raw\nbytes, type and detailed position information at each stage. The information displayed will vary depending\non the settings of the field or field type. Each step of the process is displayed in a separate section, with an\nabbreviation for the tokenizer or filter that is applied in that step. Hover or click on the abbreviation, and\nyou'll see the name and path of the tokenizer or filter.",
    "hierarchy": [
    ],
    "pageId": 130
  },
  {
    "content": "In the example screenshot above, several transformations are applied to the input \"Running is a sport.\" The\nwords \"is\" and \"a\" have been removed and the word \"running\" has been changed to its basic form, \"run\".\nThis is because we are using the field type <span class=\"ff2 fs1\">text_en</span> in this scenario, which is configured to remove stop\nwords (small words that usually do not provide a great deal of context) and \"stem\" terms when possible to\nfind more possible matches (this is particularly helpful with plural forms of words). If you click the question\nmark next to the <span class=\"code\">Analyze Fieldname/Field Type</span> pull-down menu, the <span class=\"link\">Schema Browser window</span> will open,\nshowing you the settings for the field specified.",
    "hierarchy": [
    ],
    "pageId": 131
  },
  {
    "content": "The section <span class=\"link\">Understanding Analyzers, Tokenizers, and Filters</span> describes in detail what each option is and how\nit may transform your data and the section <span class=\"link\">Running Your Analyzer</span> has specific examples for using the\nAnalysis screen.",
    "hierarchy": [
    ],
    "pageId": 131
  },
  {
    "content": "The Dataimport screen shows the configuration of the DataImportHandler (DIH) and allows you start, and\nmonitor the status of, import commands as defined by the options selected on the screen and defined in the\nconfiguration file.",
    "hierarchy": [
      "Dataimport Screen"
    ],
    "pageId": 131
  },
  {
    "content": "This screen also lets you adjust various options to control how the data is imported to Solr, and view the\ndata import configuration file that controls the import.",
    "hierarchy": [
    ],
    "pageId": 132
  },
  {
    "content": "For more information about data importing with DIH, see the section on <span class=\"link\">Uploading Structured Data Store</span>\nData with the Data Import Handler<span class=\"fc1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 132
  },
  {
    "content": "The Documents screen provides a simple form allowing you to execute various Solr indexing commands in a\nvariety of formats directly from the browser.",
    "hierarchy": [
      "Documents Screen"
    ],
    "pageId": 132
  },
  {
    "content": "The screen allows you to:",
    "hierarchy": [
      "Documents Screen"
    ],
    "pageId": 132
  },
  {
    "content": "<span class=\"ls1\">Submit JSON, CSV or XML documents in Solr-specific format for indexing</span>",
    "hierarchy": [
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Upload documents (in JSON, CSV or XML) for indexing</span>",
    "hierarchy": [
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Construct documents by selecting fields and field values</span>",
    "hierarchy": [
    ],
    "pageId": 133
  },
  {
    "content": "There are other ways to load data, see also these sections:",
    "hierarchy": [
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"link\">Uploading Data with Index Handlers</span>\n•<span class=\"link\">Uploading Data with Solr Cell using Apache Tika</span>",
    "hierarchy": [
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Request-Handler: The first step is to define the RequestHandler. By default <span class=\"ff4 fs3\">/update</span> will be defined.</span>\nChange the request handler to <span class=\"ff4 fs3\">/update/extract</span> to use Solr Cell.",
    "hierarchy": [
      "Common Fields"
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Document Type: Select the Document Type to define the format of document to load. The remaining</span>\nparameters may change depending on the document type selected.",
    "hierarchy": [
      "Common Fields"
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Document(s): Enter a properly-formatted Solr document corresponding to the <span class=\"ff4 fs3\">Document Type</span> selected.</span>\nXML and JSON documents must be formatted in a Solr-specific format, a small illustrative document will\nbe shown. CSV files should have headers corresponding to fields defined in the schema. More details can\nbe found at: <span class=\"link\">Uploading Data with Index Handlers</span>.",
    "hierarchy": [
      "Common Fields"
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Commit Within: Specify the number of milliseconds between the time the document is submitted and</span>\nwhen it is available for searching.",
    "hierarchy": [
      "Common Fields"
    ],
    "pageId": 133
  },
  {
    "content": "<span class=\"ls1\">Overwrite: If <span class=\"ff4 fs3\">true</span> the new document will replace an existing document with the same value in the <span class=\"ff4 fs3\">id</span></span>\nfield. If <span class=\"ff4 fs3\">false</span> multiple documents with the same id can be added.",
    "hierarchy": [
      "Common Fields"
    ],
    "pageId": 133
  },
  {
    "content": "Setting <span class=\"ff4 fs3\">Overwrite</span> to <span class=\"ff4 fs3\">false</span> is very rare in production situations, the default is <span class=\"ff4 fs3\">true</span>.",
    "hierarchy": [
      "Common Fields"
    ],
    "pageId": 133
  },
  {
    "content": "When using these document types the functionality is similar to submitting documents via <span class=\"ff4 fs3\">curl</span> or similar.\nThe document structure must be in a Solr-specific format appropriate for the document type. Examples are\nillustrated in the Document(s) text box when you select the various types.",
    "hierarchy": [
      "CSV, JSON and XML Documents"
    ],
    "pageId": 133
  },
  {
    "content": "These options will only add or overwrite documents; for other update tasks, see the <span class=\"link\">Solr Command</span> option.",
    "hierarchy": [
      "CSV, JSON and XML Documents"
    ],
    "pageId": 133
  },
  {
    "content": "The Document Builder provides a wizard-like interface to enter fields of a document.",
    "hierarchy": [
      "Document Builder"
    ],
    "pageId": 133
  },
  {
    "content": "The File Upload option allows choosing a prepared file and uploading it. If using <span class=\"ff4 fs3\">/update</span> for the Request-\nHandler option, you will be limited to XML, CSV, and JSON.",
    "hierarchy": [
      "File Upload"
    ],
    "pageId": 133
  },
  {
    "content": "Other document types (e.g Word, PDF, etc.) can be indexed using the ExtractingRequestHandler (aka, Solr\nCell). You must modify the RequestHandler to <span class=\"ff4 fs3\">/update/extract</span>, which must be defined in your\nsolrconfig.xml<span class=\"ff1 fs0\"> file with your desired defaults. You should also add </span>&literal.id<span class=\"ff1 fs0\"> shown in the \"Extracting</span>\nRequest Handler Params\" field so the file chosen is given a unique id. More information can be found at:",
    "hierarchy": [
      "File Upload"
    ],
    "pageId": 133
  },
  {
    "content": "Uploading Data with Solr Cell using Apache Tika",
    "hierarchy": [
    ],
    "pageId": 134
  },
  {
    "content": "The Solr Command option allows you use the <span class=\"code\">/update</span> request handler with XML or JSON formatted\ncommands to perform specific actions. A few examples are:",
    "hierarchy": [
      "Solr Command"
    ],
    "pageId": 134
  },
  {
    "content": "Deleting documents",
    "hierarchy": [
      "Solr Command"
    ],
    "pageId": 134
  },
  {
    "content": "Updating only certain fields of documents",
    "hierarchy": [
      "Solr Command"
    ],
    "pageId": 134
  },
  {
    "content": "Issuing commit commands on the index",
    "hierarchy": [
      "Solr Command"
    ],
    "pageId": 134
  },
  {
    "content": "The Files screen lets you browse & view the various configuration files (such <span class=\"code\">solrconfig.xml</span> and the\nschema file) for the collection you selected.",
    "hierarchy": [
      "Files Screen"
    ],
    "pageId": 134
  },
  {
    "content": "If you are using <span class=\"fc0\">SolrCloud</span>, the files displayed are the configuration files for this collection stored in\nZooKeeper. In a standalone Solr installations, all files in the <span class=\"code\">conf</span> directory are displayed.",
    "hierarchy": [
      "Files Screen"
    ],
    "pageId": 134
  },
  {
    "content": "While <span class=\"code\">solrconfig.xml</span> defines the behavior of Solr as it indexes content and responds to queries, the\nSchema allows you to define the types of data in your content (field types), the fields your documents will be\nbroken into, and any dynamic fields that should be generated based on patterns of field names in the\nincoming documents. Any other configuration files are used depending on how they are referenced in either\nsolrconfig.xml<span class=\"ff1 fs0\"> or your schema.</span>",
    "hierarchy": [
      "Files Screen"
    ],
    "pageId": 134
  },
  {
    "content": "Configuration files cannot be edited with this screen, so a text editor of some kind must be used.",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "This screen is related to the <span class=\"link\">Schema Browser Screen</span>, in that they both can display information from the\nschema, but the Schema Browser provides a way to drill into the analysis chain and displays linkages\nbetween field types, fields, and dynamic field rules.",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "Many of the options defined in these configuration files are described throughout the rest of this Guide. In\nparticular, you will want to review these sections:",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "<span class=\"link\">Indexing and Basic Data Operations</span>",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "<span class=\"link\">Searching</span>",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "<span class=\"link\">The Well-Configured Solr Instance</span>",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "<span class=\"link\">Documents, Fields, and Schema Design</span>",
    "hierarchy": [
    ],
    "pageId": 135
  },
  {
    "content": "You can use the <span class=\"ff2\">Query</span> screen to submit a search query to a Solr collection and analyze the results.",
    "hierarchy": [
      "Query Screen"
    ],
    "pageId": 135
  },
  {
    "content": "In the example in the screenshot, a query has been submitted, and the screen shows the query results sent\nto the browser as JSON.",
    "hierarchy": [
      "Query Screen"
    ],
    "pageId": 135
  },
  {
    "content": "In this example, a query for <span class=\"ff2 fs1\">genre:Fantasy</span> was sent to a \"films\" collection. Defaults were used for all other\noptions in the form, which are explained briefly in the table below, and covered in detail in later parts of this\nGuide.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "The response is shown to the right of the form. Requests to Solr are simply HTTP requests, and the query\nsubmitted is shown in light type above the results; if you click on this it will open a new browser window with\njust this request and response (without the rest of the Solr Admin UI). The rest of the response is shown in\nJSON, which is the default output format.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "The response has at least two sections, but may have several more depending on the options chosen. The\ntwo sections it always has are the <span class=\"ff2 fs1\">responseHeader</span> and the <span class=\"ff2 fs1\">response</span>. The <span class=\"ff2 fs1\">responseHeader</span> includes the\nstatus of the search (<span class=\"ff2 fs1\">status</span>), the processing time (<span class=\"ff2 fs1\">QTime</span>), and the parameters (<span class=\"ff2 fs1\">params</span>) that were used to\nprocess the query.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "The <span class=\"ff2 fs1\">response</span> includes the documents that matched the query, in <span class=\"ff2 fs1\">doc</span> sub-sections. The fields return depend\non the parameters of the query (and the defaults of the request handler used). The number of results is also\nincluded in this section.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "This screen allows you to experiment with different query options, and inspect how your documents were\nindexed. The query parameters available on the form are some basic options that most users want to have\navailable, but there are dozens more available which could be simply added to the basic request by hand (if\nopened in a browser). The following parameters are available:",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "Request-handler (qt)\nSpecifies the query handler for the request. If a query handler is not specified, Solr processes the\nresponse with the standard query handler.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "q\nThe query event. See <span class=\"link\">Searching</span> for an explanation of this parameter.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "fq\nThe filter queries. See <span class=\"link\">Common Query Parameters</span> for more information on this parameter.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "sort\nSorts the response to a query in either ascending or descending order based on the response's score or\nanother specified characteristic.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "start, rows\nstart<span class=\"ff1 fs0\"> is the offset into the query result starting at which documents should be returned. The default</span>\nvalue is 0, meaning that the query should return results starting with the first document that matches.\nThis field accepts the same syntax as the start query parameter, which is described in <span class=\"link\">Searching</span>. <span class=\"ff2 fs1\">rows</span> is\nthe number of rows to return.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "fl\nDefines the fields to return for each document. You can explicitly list the stored fields, <span class=\"link\">functions</span>, and <span class=\"link\">doc</span>\ntransformers<span class=\"fc0\"> you want to have returned by separating them with either a comma or a space.</span>",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "wt\nSpecifies the Response Writer to be used to format the query response. Defaults to JSON if not specified.",
    "hierarchy": [
    ],
    "pageId": 136
  },
  {
    "content": "indent\nClick this button to request that the Response Writer use indentation to make the responses more\nreadable.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "debugQuery\nClick this button to augment the query response with debugging information, including \"explain info\" for\neach document returned. This debugging information is intended to be intelligible to the administrator or\nprogrammer.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "dismax\nClick this button to enable the Dismax query parser. See <span class=\"link\">The DisMax Query Parser</span> for further\ninformation.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "edismax\nClick this button to enable the Extended query parser. See <span class=\"link\">The Extended DisMax Query Parser</span> for further\ninformation.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "hl\nClick this button to enable highlighting in the query response. See <span class=\"link\">Highlighting</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "facet\nEnables faceting, the arrangement of search results into categories based on indexed terms. See <span class=\"link\">Faceting</span>\nfor more information.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "spatial\nClick to enable using location data for use in spatial or geospatial searches. See <span class=\"link\">Spatial Search</span> for more\ninformation.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "spellcheck\nClick this button to enable the Spellchecker, which provides inline query suggestions based on other,\nsimilar, terms. See <span class=\"link\">Spell Checking</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 137
  },
  {
    "content": "The Stream screen allows you to enter a <span class=\"link\">streaming expression</span> and see the results. It is very similar to the\nQuery Screen<span class=\"fc0\">, except the input box is at the top and all options must be declared in the expression.</span>",
    "hierarchy": [
      "Stream Screen"
    ],
    "pageId": 137
  },
  {
    "content": "The screen will insert everything up to the streaming expression itself, so you do not need to enter the full\nURI with the hostname, port, collection, etc. Simply input the expression after the <span class=\"code\">expr=</span> part, and the URL\nwill be constructed dynamically as appropriate.",
    "hierarchy": [
      "Stream Screen"
    ],
    "pageId": 137
  },
  {
    "content": "Under the input box, the Execute button will run the expression. An option \"with explanation\" will show the\nparts of the streaming expression that were executed. Under this, the streamed results are shown. A URL to\nbe able to view the output in a browser is also available.",
    "hierarchy": [
      "Stream Screen"
    ],
    "pageId": 137
  },
  {
    "content": "The Schema Browser screen lets you review schema data in a browser window.",
    "hierarchy": [
      "Schema Browser Screen"
    ],
    "pageId": 138
  },
  {
    "content": "If you have accessed this window from the Analysis screen, it will be opened to a specific field, dynamic field\nrule or field type. If there is nothing chosen, use the pull-down menu to choose the field or field type.",
    "hierarchy": [
      "Schema Browser Screen"
    ],
    "pageId": 138
  },
  {
    "content": "The screen provides a great deal of useful information about each particular field and fieldtype in the\nSchema, and provides a quick UI for adding fields or fieldtypes using the <span class=\"link\">Schema API</span> (if enabled). In the\nexample above, we have chosen the <span class=\"code\">cat</span> field. On the left side of the main view window, we see the field\nname, that it is copied to the <span class=\"code\">_text_</span> (because of a copyField rule) and that it use the <span class=\"code\">strings</span> fieldtype. Click\non one of those field or fieldtype names, and you can see the corresponding definitions.",
    "hierarchy": [
    ],
    "pageId": 139
  },
  {
    "content": "In the right part of the main view, we see the specific properties of how the <span class=\"code\">cat</span> field is defined – either\nexplicitly or implicitly via its fieldtype, as well as how many documents have populated this field. Then we see\nthe analyzer used for indexing and query processing. Click the icon to the left of either of those, and you'll\nsee the definitions for the tokenizers and/or filters that are used. The output of these processes is the\ninformation you see when testing how content is handled for a particular field with the <span class=\"link\">Analysis Screen</span>.",
    "hierarchy": [
    ],
    "pageId": 139
  },
  {
    "content": "Under the analyzer information is a button to <span class=\"ff4\">Load Term Info</span>. Clicking that button will show the top <span class=\"ff1\">N</span>\nterms that are in a sample shard for that field, as well as a histogram showing the number of terms with\nvarious frequencies. Click on a term, and you will be taken to the <span class=\"link\">Query Screen</span> to see the results of a query\nof that term in that field. If you want to always see the term information for a field, choose <span class=\"ff4\">Autoload</span> and it\nwill always appear when there are terms for a field. A histogram shows the number of terms with a given\nfrequency in the field.",
    "hierarchy": [
    ],
    "pageId": 139
  },
  {
    "content": "Term Information is loaded from single arbitrarily selected core from the collection, to\nprovide a representative sample for the collection. Full <span class=\"link\">Field Facet</span> query results are needed\nto see precise term counts across the entire collection.",
    "hierarchy": [
    ],
    "pageId": 139
  },
  {
    "content": "The Core-Specific tools are a group of UI screens that allow you to see core-level information.",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "In the left-hand navigation bar, you will see a pull-down menu titled \"Core Selector\". Clicking on the menu\nwill show a list of Solr cores hosted on this Solr node, with a search box that can be used to find a specific\ncore by name.",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "When you select a core from the pull-down, the main display of the page will show some basic metadata\nabout the core, and a secondary menu will appear in the left nav with links to additional core specific\nadministration screens.",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "The core-specific UI screens are listed below, with a link to the section of this guide to find out more:",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Ping<span class=\"fc1\"> - lets you ping a named core and determine whether the core is active.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Plugins/Stats<span class=\"fc1\"> - shows statistics for plugins and other installed components.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Replication<span class=\"fc1\"> - shows you the current replication status for the core, and lets you enable/disable</span></span>\nreplication.",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Segments Info<span class=\"fc1\"> - Provides a visualization of the underlying Lucene index segments.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "If you are running a single node instance of Solr, additional UI screens normally displayed on a per-\ncollection bases will also be listed:",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Analysis<span class=\"fc1\"> - lets you analyze the data found in specific fields.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Dataimport<span class=\"fc1\"> - shows you information about the current status of the Data Import Handler.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Documents<span class=\"fc1\"> - provides a simple form allowing you to execute various Solr indexing commands directly</span></span>\nfrom the browser.",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Files<span class=\"fc1\"> - shows the current core configuration files such as <span class=\"ff4 fs2\">solrconfig.xml</span>.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Query<span class=\"fc1\"> - lets you submit a structured query about various elements of a core.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Stream<span class=\"fc1\"> - allows you to submit streaming expressions and see results and parsing explanations.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "<span class=\"link\">Schema Browser<span class=\"fc1\"> - displays schema data in a browser window.</span></span>",
    "hierarchy": [
      "Core-Specific Tools"
    ],
    "pageId": 140
  },
  {
    "content": "Choosing Ping under a core name issues a <span class=\"code\">ping</span> request to check whether the core is up and responding to\nrequests.",
    "hierarchy": [
      "Ping"
    ],
    "pageId": 141
  },
  {
    "content": "The search executed by a Ping is configured with the <span class=\"link\">Request Parameters API</span>. See <span class=\"link\">Implicit RequestHandlers</span>\nfor the paramset to use for the <span class=\"code\">/admin/ping</span> endpoint.",
    "hierarchy": [
      "Ping"
    ],
    "pageId": 141
  },
  {
    "content": "The Ping option doesn't open a page, but the status of the request can be seen on the core overview page\nshown when clicking on a collection name. The length of time the request has taken is displayed next to the\nPing option, in milliseconds.",
    "hierarchy": [
      "Ping"
    ],
    "pageId": 141
  },
  {
    "content": "While the UI screen makes it easy to see the ping response time, the underlying ping command can be more\nuseful when executed by remote monitoring tools:",
    "hierarchy": [
      "Ping",
      "Ping API Examples"
    ],
    "pageId": 141
  },
  {
    "content": "http://localhost:8983/solr/<core-name>/admin/ping",
    "hierarchy": [
      "Ping",
      "Ping API Examples"
    ],
    "pageId": 141
  },
  {
    "content": "This command will ping the core name for a response.",
    "hierarchy": [
      "Ping",
      "Ping API Examples"
    ],
    "pageId": 141
  },
  {
    "content": "http://localhost:8983/solr/<collection-name>/admin/ping?distrib=true&wt=xml",
    "hierarchy": [
      "Ping",
      "Ping API Examples"
    ],
    "pageId": 141
  },
  {
    "content": "This command will ping all replicas of the given collection name for a response",
    "hierarchy": [
      "Ping",
      "Ping API Examples"
    ],
    "pageId": 141
  },
  {
    "content": "Ê  <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>13<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"params\"<span class=\"fc0\">></span></span>\nÊ        <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"q\"<span class=\"fc0\">></span></span>{!lucene}*:*<span class=\"fc0\"></str></span>\nÊ        <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"distrib\"<span class=\"fc0\">></span></span>false<span class=\"fc0\"></str></span>\nÊ        <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"df\"<span class=\"fc0\">></span></span>_text_<span class=\"fc0\"></str></span>\nÊ        <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"rows\"<span class=\"fc0\">></span></span>10<span class=\"fc0\"></str></span>\nÊ        <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"echoParams\"<span class=\"fc0\">></span></span>all<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ  <span class=\"fc0\"></lst></span>\nÊ  <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>OK<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 142
  },
  {
    "content": "Both API calls have the same output. A status=OK indicates that the nodes are responding.",
    "hierarchy": [
    ],
    "pageId": 142
  },
  {
    "content": "SolrPing ping = <span class=\"fc4\">new</span> SolrPing();\nping.getParams().add(<span class=\"fc3\">\"distrib\"</span>, <span class=\"fc3\">\"true\"</span>); <span class=\"fc5\">//To make it a distributed request against a collection</span>\nrsp = ping.process(solrClient, collectionName);",
    "hierarchy": [
    ],
    "pageId": 142
  },
  {
    "content": "The Plugins screen shows information and statistics about the status and performance of various plugins\nrunning in each Solr core. You can find information about the performance of the Solr caches, the state of\nSolr's searchers, and the configuration of Request Handlers and Search Components.",
    "hierarchy": [
      "Plugins & Stats Screen"
    ],
    "pageId": 142
  },
  {
    "content": "Choose an area of interest on the right, and then drill down into more specifics by clicking on one of the\nnames that appear in the central part of the window. In this example, we've chosen to look at the Searcher\nstats, from the Core area:",
    "hierarchy": [
      "Plugins & Stats Screen"
    ],
    "pageId": 142
  },
  {
    "content": "The display is a snapshot taken when the page is loaded. You can get updated status by choosing to either\nWatch Changes<span class=\"ff1\"> or </span>Refresh Values<span class=\"ff1\">. Watching the changes will highlight those areas that have changed,</span>\nwhile refreshing the values will reload the page with updated information.",
    "hierarchy": [
    ],
    "pageId": 143
  },
  {
    "content": "The Replication screen shows you the current replication state for the core you have specified. <span class=\"link\">SolrCloud</span> has\nsupplanted much of this functionality, but if you are still using Master-Slave index replication, you can use\nthis screen to:",
    "hierarchy": [
      "Replication Screen"
    ],
    "pageId": 143
  },
  {
    "content": "1.View the replicatable index state. (on a master node)\n2.View the current replication status (on a slave node)\n3.Disable replication. (on a master node)",
    "hierarchy": [
      "Replication Screen"
    ],
    "pageId": 143
  },
  {
    "content": "When using <span class=\"link\">SolrCloud</span>, do not attempt to disable replication via this screen.",
    "hierarchy": [
      "Replication Screen"
    ],
    "pageId": 143
  },
  {
    "content": "More details on how to configure replication is available in the section called <span class=\"link\">Index Replication</span>.",
    "hierarchy": [
      "Replication Screen"
    ],
    "pageId": 143
  },
  {
    "content": "The Segments Info screen lets you see a visualization of the various segments in the underlying Lucene\nindex for this core, with information about the size of each segment – both bytes and in number of\ndocuments – as well as other basic metadata about those segments. Most visible is the the number of\ndeleted documents, but you can hover your mouse over the segments to see additional numeric details.",
    "hierarchy": [
      "Segments Info"
    ],
    "pageId": 143
  },
  {
    "content": "This information may be useful for people to help make decisions about the optimal <span class=\"link\">merge settings</span> for their\ndata.",
    "hierarchy": [
    ],
    "pageId": 144
  },
  {
    "content": "This section discusses how Solr organizes its data into documents and fields, as well as how to work with a\nschema in Solr.",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "This section includes the following topics:",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Overview of Documents, Fields, and Schema Design<span class=\"fc1\">: An introduction to the concepts covered in this section.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Solr Field Types<span class=\"fc1\">: Detailed information about field types in Solr, including the field types in the default Solr</span>\nschema.",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Defining Fields<span class=\"fc1\">: Describes how to define fields in Solr.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Copying Fields<span class=\"fc1\">: Describes how to populate fields with data copied from another field.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Dynamic Fields<span class=\"fc1\">: Information about using dynamic fields in order to catch and index fields that do not exactly</span>\nconform to other field definitions in your schema.",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Schema API<span class=\"fc1\">: Use curl commands to read various parts of a schema or create new fields and copyField rules.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Other Schema Elements<span class=\"fc1\">: Describes other important elements in the Solr schema.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Putting the Pieces Together<span class=\"fc1\">: A higher-level view of the Solr schema and how its elements work together.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "DocValues<span class=\"fc1\">: Describes how to create a docValues index for faster lookups.</span>",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "Schemaless Mode<span class=\"fc1\">: Automatically add previously unknown schema fields using value-based field type</span>\nguessing.",
    "hierarchy": [
      "Documents, Fields, and Schema Design"
    ],
    "pageId": 145
  },
  {
    "content": "The fundamental premise of Solr is simple. You give it a lot of information, then later you can ask it\nquestions and find the piece of information you want. The part where you feed in all the information is\ncalled <span class=\"code\">indexing</span> or <span class=\"code\">updating</span>. When you ask a question, it's called a <span class=\"code\">query</span>.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design"
    ],
    "pageId": 146
  },
  {
    "content": "One way to understand how Solr works is to think of a loose-leaf book of recipes. Every time you add a\nrecipe to the book, you update the index at the back. You list each ingredient and the page number of the\nrecipe you just added. Suppose you add one hundred recipes. Using the index, you can very quickly find all\nthe recipes that use garbanzo beans, or artichokes, or coffee, as an ingredient. Using the index is much\nfaster than looking through each recipe one by one. Imagine a book of one thousand recipes, or one million.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design"
    ],
    "pageId": 146
  },
  {
    "content": "Solr allows you to build an index with many different fields, or types of entries. The example above shows\nhow to build an index with just one field, <span class=\"ff4 fs2\">ingredients</span>. You could have other fields in the index for the\nrecipe's cooking style, like <span class=\"ff4 fs2\">Asian</span>, <span class=\"ff4 fs2\">Cajun</span>, or <span class=\"ff4 fs2\">vegan</span>, and you could have an index field for preparation times.\nSolr can answer questions like \"What Cajun-style recipes that have blood oranges as an ingredient can be\nprepared in fewer than 30 minutes?\"",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design"
    ],
    "pageId": 146
  },
  {
    "content": "The schema is the place where you tell Solr how it should build indexes from input documents.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design"
    ],
    "pageId": 146
  },
  {
    "content": "Solr's basic unit of information is a <span class=\"code\">document</span>, which is a set of data that describes something. A recipe\ndocument would contain the ingredients, the instructions, the preparation time, the cooking time, the tools\nneeded, and so on. A document about a person, for example, might contain the person’s name, biography,\nfavorite color, and shoe size. A document about a book could contain the title, author, year of publication,\nnumber of pages, and so on.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "How Solr Sees the World"
    ],
    "pageId": 146
  },
  {
    "content": "In the Solr universe, documents are composed of <span class=\"code\">fields</span>, which are more specific pieces of information. Shoe\nsize could be a field. First name and last name could be fields.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "How Solr Sees the World"
    ],
    "pageId": 146
  },
  {
    "content": "Fields can contain different kinds of data. A name field, for example, is text (character data). A shoe size field\nmight be a floating point number so that it could contain values like 6 and 9.5. Obviously, the definition of\nfields is flexible (you could define a shoe size field as a text field rather than a floating point number, for\nexample), but if you define your fields correctly, Solr will be able to interpret them correctly and your users\nwill get better results when they perform a query.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "How Solr Sees the World"
    ],
    "pageId": 146
  },
  {
    "content": "You can tell Solr about the kind of data a field contains by specifying its <span class=\"code\">field type</span>. The field type tells Solr how\nto interpret the field and how it can be queried.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "How Solr Sees the World"
    ],
    "pageId": 146
  },
  {
    "content": "When you add a document, Solr takes the information in the document's fields and adds that information to\nan index. When you perform a query, Solr can quickly consult the index and return the matching documents.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "How Solr Sees the World"
    ],
    "pageId": 146
  },
  {
    "content": "Field analysis<span class=\"ff2\"> tells Solr what to do with incoming data when building an index. A more accurate name for this</span>\nprocess would be <span class=\"code\">processing</span> or even <span class=\"code\">digestion</span>, but the official name is <span class=\"code\">analysis</span>.",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "Field Analysis"
    ],
    "pageId": 146
  },
  {
    "content": "Consider, for example, a biography field in a person document. Every word of the biography must be",
    "hierarchy": [
      "Overview of Documents, Fields, and Schema Design",
      "Field Analysis"
    ],
    "pageId": 146
  },
  {
    "content": "indexed so that you can quickly find people whose lives have had anything to do with ketchup, or\ndragonflies, or cryptography.",
    "hierarchy": [
    ],
    "pageId": 147
  },
  {
    "content": "However, a biography will likely contains lots of words you don't care about and don’t want clogging up\nyour index—words like \"the\", \"a\", \"to\", and so forth. Furthermore, suppose the biography contains the word\n\"Ketchup\", capitalized at the beginning of a sentence. If a user makes a query for \"ketchup\", you want Solr\nto tell you about the person even though the biography contains the capitalized word.",
    "hierarchy": [
    ],
    "pageId": 147
  },
  {
    "content": "The solution to both these problems is field analysis. For the biography field, you can tell Solr how to break\napart the biography into words. You can tell Solr that you want to make all the words lower case, and you\ncan tell Solr to remove accents marks.",
    "hierarchy": [
    ],
    "pageId": 147
  },
  {
    "content": "Field analysis is an important part of a field type. <span class=\"link\">Understanding Analyzers, Tokenizers, and Filters</span> is a\ndetailed description of field analysis.",
    "hierarchy": [
    ],
    "pageId": 147
  },
  {
    "content": "Solr stores details about the field types and fields it is expected to understand in a schema file. The name\nand location of this file may vary depending on how you initially configured Solr or if you modified it later.",
    "hierarchy": [
      "Solr's Schema File"
    ],
    "pageId": 147
  },
  {
    "content": "managed-schema is the name for the schema file Solr uses by default to support making Schema changes\nat runtime via the <span class=\"link\">Schema API</span>, or <span class=\"link\">Schemaless Mode</span> features. You may <span class=\"link\">explicitly configure the managed</span>\nschema features<span class=\"fc0\"> to use an alternative filename if you choose, but the contents of the files are still</span>\nupdated automatically by Solr.",
    "hierarchy": [
      "Solr's Schema File"
    ],
    "pageId": 147
  },
  {
    "content": "schema.xml is the traditional name for a schema file which can be edited manually by users who use the\nClassicIndexSchemaFactory<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Solr's Schema File"
    ],
    "pageId": 147
  },
  {
    "content": "If you are using SolrCloud you may not be able to find any file by these names on the local filesystem.\nYou will only be able to see the schema through the Schema API (if enabled) or through the Solr Admin\nUI's <span class=\"link\">Cloud Screens</span>.",
    "hierarchy": [
      "Solr's Schema File"
    ],
    "pageId": 147
  },
  {
    "content": "Whichever name of the file in use in your installation, the structure of the file is not changed. However, the\nway you interact with the file will change. If you are using the managed schema, it is expected that you only\ninteract with the file with the Schema API, and never make manual edits. If you do not use the managed\nschema, you will only be able to make manual edits to the file, the Schema API will not support any\nmodifications.",
    "hierarchy": [
      "Solr's Schema File"
    ],
    "pageId": 147
  },
  {
    "content": "Note that if you are not using the Schema API yet you do use SolrCloud, you will need to interact with\nschema.xml<span class=\"ff1 fs0\"> through ZooKeeper using upconfig and downconfig commands to make a local copy and upload</span>\nyour changes. The options for doing this are described in <span class=\"link\">Solr Control Script Reference</span> and <span class=\"link\">Using ZooKeeper</span>\nto Manage Configuration Files<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Solr's Schema File"
    ],
    "pageId": 147
  },
  {
    "content": "The field type defines how Solr should interpret data in a field and how the field can be queried. There are\nmany field types included with Solr by default, and they can also be defined locally.",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "Topics covered in this section:",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Field Type Definitions and Properties</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Field Types Included with Solr</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Working with Currencies and Exchange Rates</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Working with Dates</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Working with Enum Fields</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Working with External Files and Processes</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "<span class=\"link\">Field Properties by Use Case</span>",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "See also the <span class=\"link\">FieldType Javadoc</span>.",
    "hierarchy": [
      "Solr Field Types"
    ],
    "pageId": 148
  },
  {
    "content": "A field type defines the analysis that will occur on a field when documents are indexed or queries are sent to\nthe index.",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties"
    ],
    "pageId": 148
  },
  {
    "content": "A field type definition can include four types of information:",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties"
    ],
    "pageId": 148
  },
  {
    "content": "The name of the field type (mandatory).",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties"
    ],
    "pageId": 148
  },
  {
    "content": "An implementation class name (mandatory).",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties"
    ],
    "pageId": 148
  },
  {
    "content": "If the field type is <span class=\"ff4 fs4\">TextField</span>, a description of the field analysis for the field type.",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties"
    ],
    "pageId": 148
  },
  {
    "content": "Field type properties - depending on the implementation class, some properties may be mandatory.",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties"
    ],
    "pageId": 148
  },
  {
    "content": "Field types are defined in <span class=\"ff4 fs4\">schema.xml</span>. Each field type is defined between <span class=\"ff4 fs4\">fieldType</span> elements. They can\noptionally be grouped within a <span class=\"ff4 fs4\">types</span> element. Here is an example of a field type definition for a type called\ntext_general<span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
      "Solr Field Types",
      "Field Type Definitions and Properties",
      "Field Type Definitions in schema.xml"
    ],
    "pageId": 148
  },
  {
    "content": "Ê   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"stopwords.txt\"</span> <span class=\"fc0\">/></span>\nÊ   <span class=\"fc4\"><!-- in this example, we will only use synonyms at query time</span>",
    "hierarchy": [
    ],
    "pageId": 149
  },
  {
    "content": "Ê   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>\nÊ <span class=\"fc0\"><analyzer</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"query\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"stopwords.txt\"</span> <span class=\"fc0\">/></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SynonymFilterFactory\"</span> <span class=\"fc2\">synonyms</span>=<span class=\"fc3\">\"synonyms.txt\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">expand</span>=",
    "hierarchy": [
    ],
    "pageId": 149
  },
  {
    "content": "Ê   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 149
  },
  {
    "content": "The first line in the example above contains the field type name, <span class=\"ff1 fs2\">text_general</span>, and the name of the\nimplementing class, <span class=\"ff1 fs2\">solr.TextField</span>.\nThe rest of the definition is about field analysis, described in <span class=\"link\">Understanding Analyzers, Tokenizers, and</span>\nFilters<span class=\"fc1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 149
  },
  {
    "content": "The implementing class is responsible for making sure the field is handled correctly. In the class names in\nschema.xml<span class=\"code\">, the string </span>solr<span class=\"code\"> is shorthand for </span>org.apache.solr.schema<span class=\"code\"> or </span>org.apache.solr.analysis<span class=\"code\">.</span>\nTherefore, <span class=\"ff1 fs2\">solr.TextField</span> is really <span class=\"ff1 fs2\">org.apache.solr.schema.TextField</span>.",
    "hierarchy": [
    ],
    "pageId": 149
  },
  {
    "content": "The field type <span class=\"ff1 fs2\">class</span> determines most of the behavior of a field type, but optional properties can also be\ndefined. For example, the following definition of a date field type defines two properties, <span class=\"ff1 fs2\">sortMissingLast</span>\nand <span class=\"ff1 fs2\">omitNorms</span>.",
    "hierarchy": [
      "Field Type Properties"
    ],
    "pageId": 149
  },
  {
    "content": "Ê          <span class=\"fc2\">sortMissingLast</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">omitNorms</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Field Type Properties"
    ],
    "pageId": 149
  },
  {
    "content": "The properties that can be specified for a given field type fall into three major categories:",
    "hierarchy": [
      "Field Type Properties"
    ],
    "pageId": 149
  },
  {
    "content": "Properties specific to the field type's class.",
    "hierarchy": [
      "Field Type Properties"
    ],
    "pageId": 149
  },
  {
    "content": "<span class=\"link\">General Properties<span class=\"fc1\"> Solr supports for any field type.</span></span>",
    "hierarchy": [
      "Field Type Properties"
    ],
    "pageId": 149
  },
  {
    "content": "<span class=\"link\">Field Default Properties<span class=\"fc1\"> that can be specified on the field type that will be inherited by fields that use this</span></span>\ntype instead of the default behavior.",
    "hierarchy": [
      "Field Type Properties"
    ],
    "pageId": 149
  },
  {
    "content": "These are the general properties for fields",
    "hierarchy": [
      "Field Type Properties",
      "General Properties"
    ],
    "pageId": 149
  },
  {
    "content": "name\nThe name of the fieldType. This value gets used in field definitions, in the \"type\" attribute. It is strongly\nrecommended that names consist of alphanumeric or underscore characters only and not start with a\ndigit. This is not currently strictly enforced.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "class\nThe class name that gets used to store and index the data for this type. Note that you may prefix included\nclass names with \"solr.\" and Solr will automatically figure out which packages to search for the class - so\nsolr.TextField<span class=\"ff2 fs1\"> will work.</span>",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "If you are using a third-party class, you will probably need to have a fully qualified class name. The fully\nqualified equivalent for <span class=\"ff1 fs0\">solr.TextField</span> is <span class=\"ff1 fs0\">org.apache.solr.schema.TextField</span>.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "positionIncrementGap\nFor multivalued fields, specifies a distance between multiple values, which prevents spurious phrase\nmatches.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "autoGeneratePhraseQueries\nFor text fields. If <span class=\"ff1 fs0\">true</span>, Solr automatically generates phrase queries for adjacent terms. If <span class=\"ff1 fs0\">false</span>, terms\nmust be enclosed in double-quotes to be treated as phrases.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "synonymQueryStyle\nQuery used to combine scores of overlapping query terms (i.e., synonyms). Consider a search for \"blue\ntee\" with query-time synonyms <span class=\"ff1 fs0\">tshirt,tee</span>.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "Use <span class=\"ff1 fs0\">as_same_term</span> (default) to blend terms, i.e., <span class=\"ff1 fs0\">SynonymQuery(tshirt,tee)</span> where each term will be\ntreated as equally important. Use <span class=\"ff1 fs0\">pick_best</span> to select the most significant synonym when scoring\nDismax(tee,tshirt)<span class=\"ff2 fs1\">. Use </span>as_distinct_terms<span class=\"ff2 fs1\"> to bias scoring towards the most significant synonym</span>\n(pants OR slacks)<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "as_same_term<span class=\"ff2 fs1\"> is appropriate when terms are true synonyms (television, tv). Use </span>pick_best<span class=\"ff2 fs1\"> or</span>\nas_distinct_terms<span class=\"ff2 fs1\"> when synonyms are expanding to hyponyms </span>(q=jeans w/ jeans=>jeans,pants)\nand you want exact to come before parent and sibling concepts. See this <span class=\"link\">blog article</span>.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "enableGraphQueries\nFor text fields, applicable when querying with <span class=\"ff1 fs0\">sow=false</span> (which is the default for the <span class=\"ff1 fs0\">sow</span> parameter). Use\ntrue<span class=\"ff2 fs1\">, the default, for field types with query analyzers including graph-aware filters, e.g., <span class=\"link\">Synonym Graph</span></span>\nFilter<span class=\"fc0\"> and </span>Word Delimiter Graph Filter<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "Use <span class=\"ff1 fs0\">false</span> for field types with query analyzers including filters that can match docs when some tokens are\nmissing, e.g., <span class=\"link\">Shingle Filter</span>.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "docValuesFormat\nDefines a custom <span class=\"ff1 fs0\">DocValuesFormat</span> to use for fields of this type. This requires that a schema-aware codec,\nsuch as the <span class=\"ff1 fs0\">SchemaCodecFactory</span> has been configured in <span class=\"ff1 fs0\">solrconfig.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "postingsFormat\nDefines a custom <span class=\"ff1 fs0\">PostingsFormat</span> to use for fields of this type. This requires that a schema-aware codec,\nsuch as the <span class=\"ff1 fs0\">SchemaCodecFactory</span> has been configured in <span class=\"ff1 fs0\">solrconfig.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 150
  },
  {
    "content": "Lucene index back-compatibility is only supported for the default codec. If you choose to\ncustomize the <span class=\"code\">postingsFormat</span> or <span class=\"code\">docValuesFormat</span> in your <span class=\"code\">schema.xml</span>, upgrading to a\nfuture version of Solr may require you to either switch back to the default codec and\noptimize your index to rewrite it into the default codec before upgrading, or re-build your\nentire index from scratch after upgrading.",
    "hierarchy": [
    ],
    "pageId": 151
  },
  {
    "content": "These are properties that can be specified either on the field types, or on individual fields to override the\nvalues provided by the field types.",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "The default values for each property depend on the underlying <span class=\"code\">FieldType</span> class, which in turn may depend\non the <span class=\"code\">version</span> attribute of the <span class=\"code\"><schema/></span>. The table below includes the default value for most <span class=\"code\">FieldType</span>\nimplementations provided by Solr, assuming a <span class=\"code\">schema.xml</span> that declares <span class=\"code\">version=\"1.6\"</span>.",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "indexedIf true, the value of the field can be used\nin queries to retrieve matching\ndocuments.\ntrue or falsetrue",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "storedIf true, the actual value of the field can be\nretrieved by queries.\ntrue or falsetrue",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "docValuesIf true, the value of the field will be put in\na column-oriented <span class=\"link\">DocValues</span> structure.\ntrue or falsefalse",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "sortMissingFirst\nsortMissingLast\nControl the placement of documents\nwhen a sort field is not present.\ntrue or falsefalse",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "multiValuedIf true, indicates that a single document\nmight contain multiple values for this field\ntype.\ntrue or falsefalse",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "omitNormsIf true, omits the norms associated with\nthis field (this disables length\nnormalization for the field, and saves\nsome memory). <span class=\"ff4\">Defaults to true for all</span>\nprimitive (non-analyzed) field types,\nsuch as int, float, data, bool, and string.\nOnly full-text fields or fields need norms.\ntrue or false*",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "omitTermFreqAndP\nositions\nIf true, omits term frequency, positions,\nand payloads from postings for this field.\nThis can be a performance boost for fields\nthat don't require that information. It also\nreduces the storage space required for\nthe index. Queries that rely on position\nthat are issued on a field with this option\nwill silently fail to find documents. <span class=\"ff4\">This</span>\nproperty defaults to true for all field\ntypes that are not text fields.\ntrue or false*",
    "hierarchy": [
      "Field Default Properties"
    ],
    "pageId": 151
  },
  {
    "content": "omitPositionsSimilar to <span class=\"code\">omitTermFreqAndPositions</span> but\npreserves term frequency information.\ntrue or false*",
    "hierarchy": [
    ],
    "pageId": 152
  },
  {
    "content": "termVectors\ntermPositions\ntermOffsets\ntermPayloads\nThese options instruct Solr to maintain full\nterm vectors for each document,\noptionally including position, offset and\npayload information for each term\noccurrence in those vectors. These can be\nused to accelerate highlighting and other\nancillary functionality, but impose a\nsubstantial cost in terms of index size.\nThey are not necessary for typical uses of\nSolr.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 152
  },
  {
    "content": "requiredInstructs Solr to reject any attempts to\nadd a document which does not have a\nvalue for this field. This property defaults\nto false.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 152
  },
  {
    "content": "useDocValuesAsStor\ned\nIf the field has <span class=\"link\">docValues</span> enabled, setting\nthis to true would allow the field to be\nreturned as if it were a stored field (even\nif it has <span class=\"code\">stored=false</span>) when matching\n“*” in an <span class=\"link\">fl parameter</span>.\ntrue or falsetrue",
    "hierarchy": [
    ],
    "pageId": 152
  },
  {
    "content": "largeLarge fields are always lazy loaded and\nwill only take up space in the document\ncache if the actual value is < 512KB. This\noption requires <span class=\"code\">stored=\"true\"</span> and\nmultiValued=\"false\"<span class=\"ff2 fs0\">. It's intended for</span>\nfields that might have very large values so\nthat they don’t get cached in memory.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 152
  },
  {
    "content": "A field type may optionally specify a <span class=\"code\"><similarity/></span> that will be used when scoring documents that refer to\nfields with this type, as long as the \"global\" similarity for the collection allows it.",
    "hierarchy": [
      "Field Type Similarity"
    ],
    "pageId": 152
  },
  {
    "content": "By default, any field type which does not define a similarity, uses <span class=\"code\">BM25Similarity</span>. For more details, and\nexamples of configuring both global & per-type Similarities, please see <span class=\"link\">Other Schema Elements</span>.",
    "hierarchy": [
      "Field Type Similarity"
    ],
    "pageId": 152
  },
  {
    "content": "The following table lists the field types that are available in Solr. The <span class=\"code\">org.apache.solr.schema</span> package\nincludes all the classes listed in this table.",
    "hierarchy": [
      "Field Types Included with Solr"
    ],
    "pageId": 152
  },
  {
    "content": "BinaryFieldBinary data.",
    "hierarchy": [
      "Field Types Included with Solr"
    ],
    "pageId": 152
  },
  {
    "content": "BoolFieldContains either true or false. Values of <span class=\"code\">1</span>, <span class=\"code\">t</span>, or <span class=\"code\">T</span> in the first character are\ninterpreted as <span class=\"code\">true</span>. Any other values in the first character are interpreted as\nfalse<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "CollationFieldSupports Unicode collation for sorting and range queries. The ICUCollationField\nis a better choice if you can use ICU4J. See the section <span class=\"link\">Unicode Collation</span> for\nmore information.",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "CurrencyField<span class=\"ff1\">Deprecated</span>. Use CurrencyFieldType instead.",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "CurrencyFieldTypeSupports currencies and exchange rates. See the section <span class=\"link\">Working with</span>\nCurrencies and Exchange Rates<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "DateRangeFieldSupports indexing date ranges, to include point in time date instances as well\n(single-millisecond durations). See the section <span class=\"link\">Working with Dates</span> for more\ndetail on using this field type. Consider using this field type even if it's just for\ndate instances, particularly when the queries typically fall on UTC\nyear/month/day/hour, etc., boundaries.",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "DatePointFieldDate field. Represents a point in time with millisecond precision, encoded using\na \"Dimensional Points\" based data structure that allows for very efficient\nsearches for specific values, or ranges of values. See the section <span class=\"link\">Working with</span>\nDates<span class=\"fc0\"> for more details on the supported syntax. For single valued fields,</span>\ndocValues=\"true\"<span class=\"ff2 fs0\"> must be used to enable sorting.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "DoublePointFieldDouble field (64-bit IEEE floating point). This class encodes double values using\na \"Dimensional Points\" based data structure that allows for very efficient\nsearches for specific values, or ranges of values. For single valued fields,\ndocValues=\"true\"<span class=\"ff2 fs0\"> must be used to enable sorting.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "ExternalFileFieldPulls values from a file on disk. See the section <span class=\"link\">Working with External Files and</span>\nProcesses<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "EnumField<span class=\"ff1\">Deprecated</span>. Use EnumFieldType instead.",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "EnumFieldTypeAllows defining an enumerated set of values which may not be easily sorted by\neither alphabetic or numeric order (such as a list of severities, for example). This\nfield type takes a configuration file, which lists the proper order of the field\nvalues. See the section <span class=\"link\">Working with Enum Fields</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "FloatPointFieldFloating point field (32-bit IEEE floating point). This class encodes float values\nusing a \"Dimensional Points\" based data structure that allows for very efficient\nsearches for specific values, or ranges of values. For single valued fields,\ndocValues=\"true\"<span class=\"ff2 fs0\"> must be used to enable sorting.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "ICUCollationFieldSupports Unicode collation for sorting and range queries. See the section\nUnicode Collation<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "IntPointFieldInteger field (32-bit signed integer). This class encodes int values using a\n\"Dimensional Points\" based data structure that allows for very efficient\nsearches for specific values, or ranges of values. For single valued fields,\ndocValues=\"true\"<span class=\"ff2 fs0\"> must be used to enable sorting.</span>",
    "hierarchy": [
    ],
    "pageId": 153
  },
  {
    "content": "LatLonPointSpatialFieldA latitude/longitude coordinate pair; possibly multi-valued for multiple points.\nUsually it's specified as \"lat,lon\" order with a comma. See the section <span class=\"link\">Spatial</span>\nSearch<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "LatLonType<span class=\"ff1\">Deprecated</span>. Consider using the LatLonPointSpatialField instead. A single-\nvalued latitude/longitude coordinate pair. Usually it's specified as \"lat,lon\" order\nwith a comma. See the section <span class=\"link\">Spatial Search</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "LongPointFieldLong field (64-bit signed integer). This class encodes foo values using a\n\"Dimensional Points\" based data structure that allows for very efficient\nsearches for specific values, or ranges of values. For single valued fields,\ndocValues=\"true\"<span class=\"ff2 fs0\"> must be used to enable sorting.</span>",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "PointTypeA single-valued n-dimensional point. It's both for sorting spatial data that is <span class=\"ff4\">not</span>\nlat-lon, and for some more rare use-cases. (NOTE: this is <span class=\"ff4\">not</span> related to the\n\"Point\" based numeric fields). See <span class=\"link\">Spatial Search</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "PreAnalyzedFieldProvides a way to send to Solr serialized token streams, optionally with\nindependent stored values of a field, and have this information stored and\nindexed without any additional text processing.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "Configuration and usage of PreAnalyzedField is documented in the section\nWorking with External Files and Processes<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "RandomSortFieldDoes not contain a value. Queries that sort on this field type will return results in\nrandom order. Use a dynamic field to use this feature.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "SpatialRecursivePrefixTre\neFieldType\n(RPT for short) Accepts latitude comma longitude strings or other shapes in\nWKT format. See <span class=\"link\">Spatial Search</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "StrFieldString (UTF-8 encoded string or Unicode). Strings are intended for small fields\nand are <span class=\"ff4\">not</span> tokenized or analyzed in any way. They have a hard limit of slightly\nless than 32K.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "SortableTextFieldA specialized version of TextField that allows (and defaults to)\ndocValues=\"true\"<span class=\"ff2 fs0\"> for sorting on the first 1024 characters of the original string</span>\nprior to analysis. The number of characters used for sorting can be overridden\nwith the <span class=\"code\">maxCharsForDocValues</span> attribute.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TextFieldText, usually multiple words or tokens.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TrieDateField<span class=\"ff1\">Deprecated</span>. Use DatePointField instead.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TrieDoubleField<span class=\"ff1\">Deprecated</span>. Use DoublePointField instead.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TrieFloatField<span class=\"ff1\">Deprecated</span>. Use FloatPointField instead.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TrieIntField<span class=\"ff1\">Deprecated</span>. Use IntPointField instead.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TrieLongField<span class=\"ff1\">Deprecated</span>. Use LongPointField instead.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "TrieField<span class=\"ff1\">Deprecated</span>. This field takes a <span class=\"code\">type</span> parameter to define the specific class of\nTrie* field to use; Use an appropriate Point Field type instead.",
    "hierarchy": [
    ],
    "pageId": 154
  },
  {
    "content": "UUIDFieldUniversally Unique Identifier (UUID). Pass in a value of <span class=\"code\">NEW</span> and Solr will create a\nnew UUID.",
    "hierarchy": [
    ],
    "pageId": 155
  },
  {
    "content": "Note<span class=\"ff2\">: configuring a UUIDField instance with a default value of <span class=\"code\">NEW</span> is not</span>\nadvisable for most users when using SolrCloud (and not possible if the UUID\nvalue is configured as the unique key field) since the result will be that each\nreplica of each document will get a unique UUID value. Using\nUUIDUpdateProcessorFactory to generate UUID values when documents are\nadded is recommended instead.",
    "hierarchy": [
    ],
    "pageId": 155
  },
  {
    "content": "All Trie* numeric and date field types have been deprecated in favor of *Point field types.\nPoint field types are better at range queries (speed, memory, disk), however simple\nfield:value queries underperform relative to Trie. Either accept this, or continue to use Trie\nfields. This shortcoming may be addressed in a future release.",
    "hierarchy": [
    ],
    "pageId": 155
  },
  {
    "content": "The <span class=\"code\">currency</span> FieldType provides support for monetary values to Solr/Lucene with query-time currency\nconversion and exchange rates. The following features are supported:",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Point queries",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Range queries",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Function range queries",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Sorting",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Currency parsing by either currency code or symbol",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Symmetric & asymmetric exchange rates (asymmetric exchange rates are useful if there are fees\nassociated with exchanging the currency)",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "Range faceting (using either <span class=\"code\">facet.range</span> or <span class=\"code\">type:range</span> in <span class=\"code\">json.facet</span>) as long as the <span class=\"code\">start</span> and <span class=\"code\">end</span>\nvalues are specified in the same Currency.",
    "hierarchy": [
      "Working with Currencies and Exchange Rates"
    ],
    "pageId": 155
  },
  {
    "content": "CurrencyField has been deprecated in favor of CurrencyFieldType; all configuration\nexamples below use CurrencyFieldType.",
    "hierarchy": [
      "Working with Currencies and Exchange Rates",
      "Configuring Currencies"
    ],
    "pageId": 155
  },
  {
    "content": "The <span class=\"code\">currency</span> field type is defined in <span class=\"code\">schema.xml</span>. This is the default configuration of this type.",
    "hierarchy": [
      "Working with Currencies and Exchange Rates",
      "Configuring Currencies"
    ],
    "pageId": 155
  },
  {
    "content": "Ê          <span class=\"fc6\">amountLongSuffix</span>=<span class=\"fc7\">\"_l_ns\"</span> <span class=\"fc6\">codeStrSuffix</span>=<span class=\"fc7\">\"_s_ns\"</span>\nÊ          <span class=\"fc6\">defaultCurrency</span>=<span class=\"fc7\">\"USD\"</span> <span class=\"fc6\">currencyConfig</span>=<span class=\"fc7\">\"currency.xml\"</span> <span class=\"fc5\">/></span>",
    "hierarchy": [
      "Working with Currencies and Exchange Rates",
      "Configuring Currencies"
    ],
    "pageId": 155
  },
  {
    "content": "In this example, we have defined the name and class of the field type, and defined the <span class=\"code\">defaultCurrency</span> as\n\"USD\", for U.S. Dollars. We have also defined a <span class=\"code\">currencyConfig</span> to use a file called \"currency.xml\". This is a",
    "hierarchy": [
      "Working with Currencies and Exchange Rates",
      "Configuring Currencies"
    ],
    "pageId": 155
  },
  {
    "content": "file of exchange rates between our default currency to other currencies. There is an alternate\nimplementation that would allow regular downloading of currency data. See <span class=\"link\">Exchange Rates</span> below for\nmore.",
    "hierarchy": [
    ],
    "pageId": 156
  },
  {
    "content": "Many of the example schemas that ship with Solr include a <span class=\"link\">dynamic field</span> that uses this type, such as this\nexample:",
    "hierarchy": [
    ],
    "pageId": 156
  },
  {
    "content": "Ê   <span class=\"fc2\"><dynamicField</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"*_c\"</span>   <span class=\"fc3\">type</span>=<span class=\"fc4\">\"currency\"</span> <span class=\"fc3\">indexed</span>=<span class=\"fc4\">\"true\"</span>  <span class=\"fc3\">stored</span>=<span class=\"fc4\">\"true\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 156
  },
  {
    "content": "This dynamic field would match any field that ends in <span class=\"ff2 fs1\">_c</span> and make it a currency typed field.",
    "hierarchy": [
    ],
    "pageId": 156
  },
  {
    "content": "At indexing time, money fields can be indexed in a native currency. For example, if a product on an e-\ncommerce site is listed in Euros, indexing the price field as \"1000,EUR\" will index it appropriately. The price\nshould be separated from the currency by a comma, and the price must be encoded with a floating point\nvalue (a decimal point).",
    "hierarchy": [
    ],
    "pageId": 156
  },
  {
    "content": "During query processing, range and point queries are both supported.",
    "hierarchy": [
    ],
    "pageId": 156
  },
  {
    "content": "You must specify parameters <span class=\"ff2 fs1\">amountLongSuffix</span> and <span class=\"ff2 fs1\">codeStrSuffix</span>, corresponding to dynamic fields to be\nused for the raw amount and the currency dynamic sub-fields, e.g.:",
    "hierarchy": [
      "Sub-field Suffixes"
    ],
    "pageId": 156
  },
  {
    "content": "Ê          <span class=\"fc3\">amountLongSuffix</span>=<span class=\"fc4\">\"_l_ns\"</span> <span class=\"fc3\">codeStrSuffix</span>=<span class=\"fc4\">\"_s_ns\"</span>\nÊ          <span class=\"fc3\">defaultCurrency</span>=<span class=\"fc4\">\"USD\"</span> <span class=\"fc3\">currencyConfig</span>=<span class=\"fc4\">\"currency.xml\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
      "Sub-field Suffixes"
    ],
    "pageId": 156
  },
  {
    "content": "In the above example, the raw amount field will use the <span class=\"ff2 fs1\">\"*_l_ns\"</span> dynamic field, which must exist in the\nschema and use a long field type, i.e., one that extends <span class=\"ff2 fs1\">LongValueFieldType</span>. The currency code field will\nuse the <span class=\"ff2 fs1\">\"*_s_ns\"</span> dynamic field, which must exist in the schema and use a string field type, i.e., one that is or\nextends <span class=\"ff2 fs1\">StrField</span>.",
    "hierarchy": [
      "Sub-field Suffixes"
    ],
    "pageId": 156
  },
  {
    "content": "As noted on <span class=\"link\">Updating Parts of Documents</span>, stored dynamic sub-fields will cause indexing to\nfail when you use Atomic Updates. To avoid this problem, specify <span class=\"ff2 fs1\">stored=\"false\"</span> on those\ndynamic fields.",
    "hierarchy": [
      "Sub-field Suffixes"
    ],
    "pageId": 156
  },
  {
    "content": "You configure exchange rates by specifying a provider. Natively, two provider types are supported:\nFileExchangeRateProvider<span class=\"ff1 fs0\"> or </span>OpenExchangeRatesOrgProvider<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Exchange Rates"
    ],
    "pageId": 156
  },
  {
    "content": "This provider requires you to provide a file of exchange rates. It is the default, meaning that to use this\nprovider you only need to specify the file path and name as a value for <span class=\"ff2 fs1\">currencyConfig</span> in the definition for\nthis type.",
    "hierarchy": [
      "Exchange Rates",
      "FileExchangeRateProvider"
    ],
    "pageId": 156
  },
  {
    "content": "There is a sample <span class=\"ff2 fs1\">currency.xml</span> file included with Solr, found in the same directory as the <span class=\"ff2 fs1\">schema.xml</span> file.",
    "hierarchy": [
      "Exchange Rates",
      "FileExchangeRateProvider"
    ],
    "pageId": 156
  },
  {
    "content": "Here is a small snippet from this file:",
    "hierarchy": [
    ],
    "pageId": 157
  },
  {
    "content": "Ê <span class=\"fc1\"><rates></span>\nÊ   <span class=\"fc4\"><!-- Updated from http://www.exchangerate.com/ at 2011-09-27 --></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"USD\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"ARS\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"4.333871\"</span> <span class=\"fc2\">comment</span>=<span class=\"fc3\">\"ARGENTINA Peso\"</span> <span class=\"fc1\">/></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"USD\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"AUD\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"1.025768\"</span> <span class=\"fc2\">comment</span>=<span class=\"fc3\">\"AUSTRALIA Dollar\"</span> <span class=\"fc1\">/></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"USD\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"EUR\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"0.743676\"</span> <span class=\"fc2\">comment</span>=<span class=\"fc3\">\"European Euro\"</span> <span class=\"fc1\">/></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"USD\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"CAD\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"1.030815\"</span> <span class=\"fc2\">comment</span>=<span class=\"fc3\">\"CANADA Dollar\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 157
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- Cross-rates for some common currencies --></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"EUR\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"GBP\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"0.869914\"</span> <span class=\"fc1\">/></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"EUR\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"NOK\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"7.800095\"</span> <span class=\"fc1\">/></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"GBP\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"NOK\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"8.966508\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 157
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- Asymmetrical rates --></span>\nÊ   <span class=\"fc1\"><rate</span> <span class=\"fc2\">from</span>=<span class=\"fc3\">\"EUR\"</span> <span class=\"fc2\">to</span>=<span class=\"fc3\">\"USD\"</span> <span class=\"fc2\">rate</span>=<span class=\"fc3\">\"0.5\"</span> <span class=\"fc1\">/></span>\nÊ <span class=\"fc1\"></rates></span>",
    "hierarchy": [
    ],
    "pageId": 157
  },
  {
    "content": "You can configure Solr to download exchange rates from <span class=\"fc6\">OpenExchangeRates.Org</span>, with updates rates\nbetween USD and 170 currencies hourly. These rates are symmetrical only.",
    "hierarchy": [
      "OpenExchangeRatesOrgProvider"
    ],
    "pageId": 157
  },
  {
    "content": "In this case, you need to specify the <span class=\"ff2 fs1\">providerClass</span> in the definitions for the field type and sign up for an API\nkey. Here is an example:",
    "hierarchy": [
      "OpenExchangeRatesOrgProvider"
    ],
    "pageId": 157
  },
  {
    "content": "Ê          <span class=\"fc2\">amountLongSuffix</span>=<span class=\"fc3\">\"_l_ns\"</span> <span class=\"fc2\">codeStrSuffix</span>=<span class=\"fc3\">\"_s_ns\"</span>\nÊ          <span class=\"fc2\">providerClass</span>=<span class=\"fc3\">\"solr.OpenExchangeRatesOrgProvider\"</span>\nÊ          <span class=\"fc2\">refreshInterval</span>=<span class=\"fc3\">\"60\"</span>\nÊ          <span class=\"fc2\">ratesFileLocation</span>=",
    "hierarchy": [
      "OpenExchangeRatesOrgProvider"
    ],
    "pageId": 157
  },
  {
    "content": "The <span class=\"ff2 fs1\">refreshInterval</span> is minutes, so the above example will download the newest rates every 60 minutes.\nThe refresh interval may be increased, but not decreased.",
    "hierarchy": [
      "OpenExchangeRatesOrgProvider"
    ],
    "pageId": 157
  },
  {
    "content": "Solr's date fields (<span class=\"ff2 fs1\">DatePointField</span>, <span class=\"ff2 fs1\">DateRangeField</span> and the deprecated <span class=\"ff2 fs1\">TrieDateField</span>) represent \"dates\"\nas a point in time with millisecond precision. The format used is a restricted form of the canonical\nrepresentation of dateTime in the <span class=\"fc6\">XML Schema specification</span> – a restricted subset of <span class=\"fc6\">ISO-8601</span>. For those\nfamiliar with Java 8, Solr uses <span class=\"fc6\">DateTimeFormatter.ISO_INSTANT</span> for formatting, and parsing too with\n\"leniency\".",
    "hierarchy": [
      "Working with Dates",
      "Date Formatting"
    ],
    "pageId": 157
  },
  {
    "content": "YYYY-MM-DDThh:mm:ssZ",
    "hierarchy": [
      "Working with Dates",
      "Date Formatting"
    ],
    "pageId": 157
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">YYYY</span><span class=\"ls1\"> is the year.</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">MM</span><span class=\"ls1\"> is the month.</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">DD</span><span class=\"ls1\"> is the day of the month.</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">hh</span><span class=\"ls1\"> is the hour of the day as on a 24-hour clock.</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">mm</span><span class=\"ls1\"> is minutes.</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">ss</span><span class=\"ls1\"> is seconds.</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">Z</span><span class=\"ls1\"> is a literal 'Z' character indicating that this string representation of the date is in UTC</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "Note that no time zone can be specified; the String representations of dates is always expressed in\nCoordinated Universal Time (UTC). Here is an example value:",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "1972-05-20T17:33:18Z",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "You can optionally include fractional seconds if you wish, although any precision beyond milliseconds will be\nignored. Here are example values with sub-seconds:",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "\n1972-05-20T17:33:18.772Z",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "\n1972-05-20T17:33:18.77Z",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "\n1972-05-20T17:33:18.7Z",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "There must be a leading <span class=\"ff2 fs1\">'-'</span> for dates prior to year 0000, and Solr will format dates with a leading <span class=\"ff2 fs1\">'+'</span> for\nyears after 9999. Year 0000 is considered year 1 BC; there is no such thing as year 0 AD or BC.",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "As you can see, the date format includes colon characters separating the hours, minutes,\nand seconds. Because the colon is a special character to Solr's most common query\nparsers, escaping is sometimes required, depending on exactly what you are trying to do.",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "This is normally an invalid query: <span class=\"ff2 fs1\">datefield:1972-05-20T17:33:18.772Z</span>",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "These are valid queries:\ndatefield:1972-05-20T17\\:33\\:18.772Z\ndatefield:\"1972-05-20T17:33:18.772Z\"\ndatefield:[1972-05-20T17:33:18.772Z TO *]",
    "hierarchy": [
    ],
    "pageId": 158
  },
  {
    "content": "Solr's <span class=\"ff2 fs1\">DateRangeField</span> supports the same point in time date syntax described above (with <span class=\"ff4\">date math</span>\ndescribed below) and more to express date ranges. One class of examples is truncated dates, which\nrepresent the entire date span to the precision indicated. The other class uses the range syntax (<span class=\"ff2 fs1\">[ TO ]</span>).\nHere are some examples:",
    "hierarchy": [
      "Date Range Formatting"
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">2000-11</span><span class=\"ls1\"> – The entire month of November, 2000.</span>",
    "hierarchy": [
      "Date Range Formatting"
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">2000-11T13</span><span class=\"ls1\"> – Likewise but for an hour of the day (1300 to before 1400, i.e., 1pm to 2pm).</span>",
    "hierarchy": [
      "Date Range Formatting"
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">-0009</span><span class=\"ls1\"> – The year 10 BC. A 0 in the year position is 0 AD, and is also considered 1 BC.</span>",
    "hierarchy": [
      "Date Range Formatting"
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">[2000-11-01 TO 2014-12-01]</span><span class=\"ls1\"> – The specified date range at a day resolution.</span>",
    "hierarchy": [
      "Date Range Formatting"
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">[2014 TO 2014-12-01]</span><span class=\"ls1\"> – From the start of 2014 till the end of the first day of December.</span>",
    "hierarchy": [
      "Date Range Formatting"
    ],
    "pageId": 158
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">[* TO 2014-12-01]</span><span class=\"ls1\"> – From the earliest representable time thru till the end of the day on 2014-12-01.</span>",
    "hierarchy": [
    ],
    "pageId": 159
  },
  {
    "content": "Limitations: The range syntax doesn't support embedded date math. If you specify a date instance\nsupported by DatePointField with date math truncating it, like <span class=\"ff2 fs1\">NOW/DAY</span>, you still get the first millisecond of\nthat day, not the entire day’s range. Exclusive ranges (using <span class=\"ff2 fs1\">{</span> & <span class=\"ff2 fs1\">}</span>) work in <span class=\"code\">queries</span> but not for <span class=\"code\">indexing</span>\nranges.",
    "hierarchy": [
    ],
    "pageId": 159
  },
  {
    "content": "Solr's date field types also supports <span class=\"code\">date math</span> expressions, which makes it easy to create times relative to\nfixed moments in time, include the current time which can be represented using the special value of “<span class=\"ff2 fs1\">NOW</span>”.",
    "hierarchy": [
      "Date Math"
    ],
    "pageId": 159
  },
  {
    "content": "Date math expressions consist either adding some quantity of time in a specified unit, or rounding the\ncurrent time by a specified unit. expressions can be chained and are evaluated left to right.",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "For example: this represents a point in time two months from now:",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "NOW+2MONTHS",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "This is one day ago:",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "NOW-1DAY",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "A slash is used to indicate rounding. This represents the beginning of the current hour:",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "NOW/HOUR",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "The following example computes (with millisecond precision) the point in time six months and three days\ninto the future and then rounds that time to the beginning of that day:",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "NOW+6MONTHS+3DAYS/DAY",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "Note that while date math is most commonly used relative to <span class=\"ff2 fs1\">NOW</span> it can be applied to any fixed moment in\ntime as well:",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "1972-05-20T17:33:18.772Z+6MONTHS+3DAYS/DAY",
    "hierarchy": [
      "Date Math",
      "Date Math Syntax"
    ],
    "pageId": 159
  },
  {
    "content": "The <span class=\"ff2 fs1\">NOW</span> parameter is used internally by Solr to ensure consistent date math expression parsing across\nmultiple nodes in a distributed request. But it can be specified to instruct Solr to use an arbitrary moment in\ntime (past or future) to override for all situations where the the special value of “<span class=\"ff2 fs1\">NOW</span>” would impact date\nmath expressions.",
    "hierarchy": [
      "Date Math",
      "Request Parameters That Affect Date Math",
      "NOW"
    ],
    "pageId": 159
  },
  {
    "content": "It must be specified as a (long valued) milliseconds since epoch",
    "hierarchy": [
      "Date Math",
      "Request Parameters That Affect Date Math",
      "NOW"
    ],
    "pageId": 159
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Date Math",
      "Request Parameters That Affect Date Math",
      "NOW"
    ],
    "pageId": 159
  },
  {
    "content": "q=solr&fq=start_date:[* TO NOW]&NOW=1384387200000",
    "hierarchy": [
      "Date Math",
      "Request Parameters That Affect Date Math",
      "NOW"
    ],
    "pageId": 159
  },
  {
    "content": "By default, all date math expressions are evaluated relative to the UTC TimeZone, but the <span class=\"code\">TZ</span> parameter can\nbe specified to override this behaviour, by forcing all date based addition and rounding to be relative to the\nspecified <span class=\"link\">time zone</span>.",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "For example, the following request will use range faceting to facet over the current month, \"per day\"\nrelative UTC:",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "http://localhost:8983/solr/my_collection/select?q=*:*&facet.range=my_date_field&facet=true&facet.\nrange.start=NOW/MONTH&facet.range.end=NOW/MONTH%2B1MONTH&facet.range.gap=%2B1DAY&wt=xml",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "...",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "While in this example, the \"days\" will be computed relative to the specified time zone - including any\napplicable Daylight Savings Time adjustments:",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "http://localhost:8983/solr/my_collection/select?q=*:*&facet.range=my_date_field&facet=true&facet.\nrange.start=NOW/MONTH&facet.range.end=NOW/MONTH%2B1MONTH&facet.range.gap=%2B1DAY&TZ=America/Los_A\nngeles&wt=xml",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "...",
    "hierarchy": [
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "DateRangeField<span class=\"ff2 fs1\"> is almost a drop-in replacement for places where </span>DatePointField<span class=\"ff2 fs1\"> is used. The only</span>\ndifference is that Solr's XML or SolrJ response formats will expose the stored data as a String instead of a\nDate. The underlying index data for this field will be a bit larger. Queries that align to units of time a second\non up should be faster than TrieDateField, especially if it’s in UTC.",
    "hierarchy": [
      "More DateRangeField Details",
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "The main point of <span class=\"code\">DateRangeField</span>, as its name suggests, is to allow indexing date ranges. To do that, simply\nsupply strings in the format shown above. It also supports specifying 3 different relational predicates\nbetween the indexed data, and the query range:",
    "hierarchy": [
      "More DateRangeField Details",
      "TZ"
    ],
    "pageId": 160
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">Intersects</span><span class=\"ls1\"> (default)</span>",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "\nContains",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "\nWithin",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "You can specify the predicate by querying using the <span class=\"ff2 fs1\">op</span> local-params parameter like so:",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "fq={!field f=dateRange op=Contains}[2013 TO 2018]",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "Unlike most local parameters, <span class=\"ff2 fs1\">op</span> is actually <span class=\"code\">not</span> defined by any query parser (<span class=\"ff2 fs1\">field</span>), it is defined by the field\ntype, in this case <span class=\"ff2 fs1\">DateRangeField</span>. In the above example, it would find documents with indexed ranges that\ncontain<span class=\"ff1\"> (or equals) the range 2013 thru 2018. Multi-valued overlapping indexed ranges in a document are</span>\neffectively coalesced.",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "For a DateRangeField example use-case, see <span class=\"link\">see Solr's community wiki</span>.",
    "hierarchy": [
    ],
    "pageId": 161
  },
  {
    "content": "EnumFieldType allows defining a field whose values are a closed set, and the sort order is pre-determined\nbut is not alphabetic nor numeric. Examples of this are severity lists, or risk definitions.",
    "hierarchy": [
      "Working with Enum Fields"
    ],
    "pageId": 161
  },
  {
    "content": "EnumField has been deprecated in favor of EnumFieldType; all configuration examples\nbelow use EnumFieldType.",
    "hierarchy": [
      "Working with Enum Fields"
    ],
    "pageId": 161
  },
  {
    "content": "The EnumFieldType type definition is quite simple, as in this example defining field types for \"priorityLevel\"\nand \"riskLevel\" enumerations:",
    "hierarchy": [
      "Working with Enum Fields",
      "Defining an EnumFieldType in schema.xml"
    ],
    "pageId": 161
  },
  {
    "content": "Besides the <span class=\"ff2 fs1\">name</span> and the <span class=\"ff2 fs1\">class</span>, which are common to all field types, this type also takes two additional\nparameters:",
    "hierarchy": [
      "Working with Enum Fields",
      "Defining an EnumFieldType in schema.xml"
    ],
    "pageId": 161
  },
  {
    "content": "enumsConfig\nthe name of a configuration file that contains the <span class=\"ff2 fs1\"><enum/></span> list of field values and their order that you wish\nto use with this field type. If a path to the file is not defined specified, the file should be in the <span class=\"ff2 fs1\">conf</span>\ndirectory for the collection.",
    "hierarchy": [
      "Working with Enum Fields",
      "Defining an EnumFieldType in schema.xml"
    ],
    "pageId": 161
  },
  {
    "content": "enumName\nthe name of the specific enumeration in the <span class=\"ff2 fs1\">enumsConfig</span> file to use for this type.",
    "hierarchy": [
      "Working with Enum Fields",
      "Defining an EnumFieldType in schema.xml"
    ],
    "pageId": 161
  },
  {
    "content": "Note that <span class=\"ff2 fs1\">docValues=\"true\"</span> must be specified either in the EnumFieldType fieldType or field specification.",
    "hierarchy": [
      "Working with Enum Fields",
      "Defining an EnumFieldType in schema.xml"
    ],
    "pageId": 161
  },
  {
    "content": "The file named with the <span class=\"code\">enumsConfig</span> parameter can contain multiple enumeration value lists with different\nnames if there are multiple uses for enumerations in your Solr schema.",
    "hierarchy": [
      "Defining the EnumFieldType Configuration File"
    ],
    "pageId": 162
  },
  {
    "content": "In this example, there are two value lists defined. Each list is between <span class=\"code\">enum</span> opening and closing tags:",
    "hierarchy": [
      "Defining the EnumFieldType Configuration File"
    ],
    "pageId": 162
  },
  {
    "content": "<?xml version=\"1.0\" ?>",
    "hierarchy": [
      "Defining the EnumFieldType Configuration File"
    ],
    "pageId": 162
  },
  {
    "content": "Ê <span class=\"fc2\"><enum</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"priority\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><value></span>Not Available<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Low<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Medium<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>High<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Urgent<span class=\"fc2\"></value></span>\nÊ <span class=\"fc2\"></enum></span>\nÊ <span class=\"fc2\"><enum</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"risk\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><value></span>Unknown<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Very Low<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Low<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Medium<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>High<span class=\"fc2\"></value></span>\nÊ   <span class=\"fc2\"><value></span>Critical<span class=\"fc2\"></value></span>\nÊ <span class=\"fc2\"></enum></span>",
    "hierarchy": [
      "Defining the EnumFieldType Configuration File"
    ],
    "pageId": 162
  },
  {
    "content": "You cannot change the order, or remove, existing values in an <span class=\"code\"><enum/></span> without reindexing.",
    "hierarchy": [
      "Defining the EnumFieldType Configuration File"
    ],
    "pageId": 162
  },
  {
    "content": "You can however add new values to the end.",
    "hierarchy": [
      "Defining the EnumFieldType Configuration File"
    ],
    "pageId": 162
  },
  {
    "content": "The <span class=\"code\">ExternalFileField</span> type makes it possible to specify the values for a field in a file outside the Solr index.\nFor such a field, the file contains mappings from a key field to the field value. Another way to think of this is\nthat, instead of specifying the field in documents as they are indexed, Solr finds values for this field in the\nexternal file.",
    "hierarchy": [
      "Working with External Files and Processes",
      "The ExternalFileField Type"
    ],
    "pageId": 162
  },
  {
    "content": "External fields are not searchable. They can be used only for function queries or display.\nFor more information on function queries, see the section on <span class=\"fc7\">Function Queries</span>.",
    "hierarchy": [
      "Working with External Files and Processes",
      "The ExternalFileField Type"
    ],
    "pageId": 162
  },
  {
    "content": "The <span class=\"code\">ExternalFileField</span> type is handy for cases where you want to update a particular field in many\ndocuments more often than you want to update the rest of the documents. For example, suppose you have\nimplemented a document rank based on the number of views. You might want to update the rank of all the\ndocuments daily or hourly, while the rest of the contents of the documents might be updated much less\nfrequently. Without <span class=\"code\">ExternalFileField</span>, you would need to update each document just to change the rank.",
    "hierarchy": [
      "Working with External Files and Processes",
      "The ExternalFileField Type"
    ],
    "pageId": 162
  },
  {
    "content": "Using <span class=\"ff2 fs1\">ExternalFileField</span> is much more efficient because all document values for a particular field are\nstored in an external file that can be updated as frequently as you wish.",
    "hierarchy": [
    ],
    "pageId": 163
  },
  {
    "content": "In <span class=\"ff2 fs1\">schema.xml</span>, the definition of this field type might look like this:",
    "hierarchy": [
    ],
    "pageId": 163
  },
  {
    "content": "The <span class=\"ff2 fs1\">keyField</span> attribute defines the key that will be defined in the external file. It is usually the unique key for\nthe index, but it doesn't need to be as long as the <span class=\"ff2 fs1\">keyField</span> can be used to identify documents in the index.\nA <span class=\"ff2 fs1\">defVal</span> defines a default value that will be used if there is no entry in the external file for a particular\ndocument.",
    "hierarchy": [
    ],
    "pageId": 163
  },
  {
    "content": "The file itself is located in Solr's index directory, which by default is <span class=\"ff2 fs1\">$SOLR_HOME/data</span>. The name of the file\nshould be <span class=\"ff2 fs1\">external_fieldname_</span> or <span class=\"ff2 fs1\">external_fieldname_.*</span>. For the example above, then, the file could be\nnamed <span class=\"ff2 fs1\">external_entryRankFile</span> or <span class=\"ff2 fs1\">external_entryRankFile.txt</span>.",
    "hierarchy": [
      "Format of the External File"
    ],
    "pageId": 163
  },
  {
    "content": "If any files using the name pattern <span class=\"ff2 fs1\">.*</span> (such as <span class=\"ff2 fs1\">.txt</span>) appear, the last (after being sorted by\nname) will be used and previous versions will be deleted. This behavior supports\nimplementations on systems where one may not be able to overwrite a file (for example,\non Windows, if the file is in use).",
    "hierarchy": [
      "Format of the External File"
    ],
    "pageId": 163
  },
  {
    "content": "The file contains entries that map a key field, on the left of the equals sign, to a value, on the right. Here are\na few example entries:",
    "hierarchy": [
      "Format of the External File"
    ],
    "pageId": 163
  },
  {
    "content": "doc33=1.414\ndoc34=3.14159\ndoc40=42",
    "hierarchy": [
      "Format of the External File"
    ],
    "pageId": 163
  },
  {
    "content": "The keys listed in this file do not need to be unique. The file does not need to be sorted, but Solr will be able\nto perform the lookup faster if it is.",
    "hierarchy": [
      "Format of the External File"
    ],
    "pageId": 163
  },
  {
    "content": "It's possible to define an event listener to reload an external file when either a searcher is reloaded or when\na new searcher is started. See the section <span class=\"fc6\">Query-Related Listeners</span> for more information, but a sample\ndefinition in <span class=\"ff2 fs1\">solrconfig.xml</span> might look like this:",
    "hierarchy": [
      "Reloading an External File"
    ],
    "pageId": 163
  },
  {
    "content": "The <span class=\"ff2 fs1\">PreAnalyzedField</span> type provides a way to send to Solr serialized token streams, optionally with\nindependent stored values of a field, and have this information stored and indexed without any additional\ntext processing applied in Solr. This is useful if user wants to submit field content that was already processed",
    "hierarchy": [
      "The PreAnalyzedField Type"
    ],
    "pageId": 163
  },
  {
    "content": "by some existing external text processing pipeline (e.g., it has been tokenized, annotated, stemmed,\nsynonyms inserted, etc.), while using all the rich attributes that Lucene's TokenStream provides (per-token\nattributes).",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "The serialization format is pluggable using implementations of PreAnalyzedParser interface. There are two\nout-of-the-box implementations:",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "<span class=\"link\">JsonPreAnalyzedParser<span class=\"fc0\">: as the name suggests, it parses content that uses JSON to represent field's</span></span>\ncontent. This is the default parser to use if the field type is not configured otherwise.",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "<span class=\"link\">SimplePreAnalyzedParser<span class=\"fc0\">: uses a simple strict plain text format, which in some situations may be easier</span></span>\nto create than JSON.",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "There is only one configuration parameter, <span class=\"ff2 fs1\">parserImpl</span>. The value of this parameter should be a fully\nqualified class name of a class that implements PreAnalyzedParser interface. The default value of this\nparameter is <span class=\"ff2 fs1\">org.apache.solr.schema.JsonPreAnalyzedParser</span>.",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "By default, the query-time analyzer for fields of this type will be the same as the index-time analyzer, which\nexpects serialized pre-analyzed text. You must add a query type analyzer to your fieldType in order to\nperform analysis on non-pre-analyzed queries. In the example below, the index-time analyzer expects the\ndefault JSON serialization format, and the query-time analyzer will employ\nStandardTokenizer/LowerCaseFilter:",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer</span> <span class=\"fc3\">type</span>=<span class=\"fc4\">\"query\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 164
  },
  {
    "content": "This is the default serialization format used by PreAnalyzedField type. It uses a top-level JSON map with the\nfollowing keys:",
    "hierarchy": [
      "JsonPreAnalyzedParser"
    ],
    "pageId": 164
  },
  {
    "content": "v\nVersion key. Currently the supported version is <span class=\"ff2 fs1\">1</span>.required",
    "hierarchy": [
      "JsonPreAnalyzedParser"
    ],
    "pageId": 164
  },
  {
    "content": "str\nStored string value of a field. You can use at most one of <span class=\"ff2 fs1\">str</span> or\nbin<span class=\"ff1 fs0\">.</span>\noptional",
    "hierarchy": [
      "JsonPreAnalyzedParser"
    ],
    "pageId": 164
  },
  {
    "content": "bin\nStored binary value of a field. The binary value has to be Base64\nencoded.\noptional",
    "hierarchy": [
      "JsonPreAnalyzedParser"
    ],
    "pageId": 164
  },
  {
    "content": "tokens\nserialized token stream. This is a JSON list.optional",
    "hierarchy": [
      "JsonPreAnalyzedParser"
    ],
    "pageId": 164
  },
  {
    "content": "Any other top-level key is silently ignored.",
    "hierarchy": [
      "JsonPreAnalyzedParser"
    ],
    "pageId": 164
  },
  {
    "content": "The token stream is expressed as a JSON list of JSON maps. The map for each token consists of the following",
    "hierarchy": [
      "JsonPreAnalyzedParser",
      "Token Stream Serialization"
    ],
    "pageId": 164
  },
  {
    "content": "keys and values:",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "t\ntoken<span class=\"link\">CharTermAttribute</span>UTF-8 string representing the\ncurrent token\nrequired",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "s\nstart offset<span class=\"link\">OffsetAttribute</span>Non-negative integeroptional",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "e\nend offsetOffsetAttributeNon-negative integeroptional",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "i\nposition increment<span class=\"link\">PositionIncrementAt</span>\ntribute\nNon-negative integer - default\nis <span class=\"code\">1</span>\noptional",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "p\npayload<span class=\"link\">PayloadAttribute</span>Base64 encoded payloadoptional",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "y\nlexical type<span class=\"link\">TypeAttribute</span>UTF-8 stringoptional",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "f\nflags<span class=\"link\">FlagsAttribute</span>String representing an integer\nvalue in hexadecimal format\noptional",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "Any other key is silently ignored.",
    "hierarchy": [
    ],
    "pageId": 165
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"v\"</span>:<span class=\"fc4\">\"1\"</span>,\nÊ <span class=\"fc3\">\"str\"</span>:<span class=\"fc4\">\"test <span class=\"ff4\">ąćęłń</span>ó<span class=\"ff4\">śźż</span>\"</span>,\nÊ <span class=\"fc3\">\"tokens\"</span>: [\nÊ   {<span class=\"fc3\">\"t\"</span>:<span class=\"fc4\">\"one\"</span>,<span class=\"fc3\">\"s\"</span>:<span class=\"fc5\">123</span>,<span class=\"fc3\">\"e\"</span>:<span class=\"fc5\">128</span>,<span class=\"fc3\">\"i\"</span>:<span class=\"fc5\">22</span>,<span class=\"fc3\">\"p\"</span>:<span class=\"fc4\">\"DQ4KDQsODg8=\"</span>,<span class=\"fc3\">\"y\"</span>:<span class=\"fc4\">\"word\"</span>},\nÊ   {<span class=\"fc3\">\"t\"</span>:<span class=\"fc4\">\"two\"</span>,<span class=\"fc3\">\"s\"</span>:<span class=\"fc5\">5</span>,<span class=\"fc3\">\"e\"</span>:<span class=\"fc5\">8</span>,<span class=\"fc3\">\"i\"</span>:<span class=\"fc5\">1</span>,<span class=\"fc3\">\"y\"</span>:<span class=\"fc4\">\"word\"</span>},\nÊ   {<span class=\"fc3\">\"t\"</span>:<span class=\"fc4\">\"three\"</span>,<span class=\"fc3\">\"s\"</span>:<span class=\"fc5\">20</span>,<span class=\"fc3\">\"e\"</span>:<span class=\"fc5\">22</span>,<span class=\"fc3\">\"i\"</span>:<span class=\"fc5\">1</span>,<span class=\"fc3\">\"y\"</span>:<span class=\"fc4\">\"foobar\"</span>}\nÊ ]\n}",
    "hierarchy": [
      "JsonPreAnalyzedParser Example"
    ],
    "pageId": 165
  },
  {
    "content": "The fully qualified class name to use when specifying this format via the <span class=\"code\">parserImpl</span> configuration\nparameter is <span class=\"code\">org.apache.solr.schema.SimplePreAnalyzedParser</span>.",
    "hierarchy": [
      "SimplePreAnalyzedParser",
      "JsonPreAnalyzedParser Example"
    ],
    "pageId": 165
  },
  {
    "content": "The serialization format supported by this parser is as follows:",
    "hierarchy": [
      "SimplePreAnalyzedParser",
      "SimplePreAnalyzedParser Syntax"
    ],
    "pageId": 165
  },
  {
    "content": "content ::= version (stored)? tokens\nversion ::= digit+ \" \"\n; stored field value - any \"=\" inside must be escaped!\nstored ::= \"=\" text \"=\"\ntokens ::= (token ((\" \") + token)*)*\ntoken ::= text (\",\" attrib)*\nattrib ::= name '=' value\nname ::= text\nvalue ::= text",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "Special characters in \"text\" values can be escaped using the escape character <span class=\"ff2 fs1\">\\</span>. The following escape\nsequences are recognized:",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\\nliteral space character",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\,\nliteral <span class=\"ff2 fs1\">,</span> character",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\=\nliteral <span class=\"ff2 fs1\">=</span> character",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\\\\nliteral <span class=\"ff2 fs1\">\\</span> character",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\n\nnewline",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\r\ncarriage return",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "\\t\nhorizontal tab",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "Please note that Unicode sequences (e.g., <span class=\"ff2 fs1\">\\u0001</span>) are not supported.",
    "hierarchy": [
    ],
    "pageId": 166
  },
  {
    "content": "The following token attributes are supported, and identified with short symbolic names:",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "i\nposition increment<span class=\"link\">PositionIncrementAttribute</span>integer",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "s\nstart offset<span class=\"link\">OffsetAttribute</span>integer",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "e\nend offsetOffsetAttributeinteger",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "y\nlexical type<span class=\"link\">TypeAttribute</span>string",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "f\nflags<span class=\"link\">FlagsAttribute</span>hexadecimal integer",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "p\npayload<span class=\"link\">PayloadAttribute</span>bytes in hexadecimal format;\nwhitespace is ignored",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "Token positions are tracked and implicitly added to the token stream - the start and end offsets consider\nonly the term text and whitespace, and exclude the space taken by token attributes.",
    "hierarchy": [
      "Supported Attributes"
    ],
    "pageId": 166
  },
  {
    "content": "1 one two three",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "version: 1",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "stored: null",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">one</span>,startOffset=0,endOffset=3)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">two</span>,startOffset=4,endOffset=7)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">three</span>,startOffset=8,endOffset=13)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "1 one  two    three",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "version: 1",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "stored: null",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">one</span>,startOffset=0,endOffset=3)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">two</span>,startOffset=5,endOffset=8)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">three</span>,startOffset=11,endOffset=16)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "1 one,s=123,e=128,i=22 two three,s=20,e=22",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "version: 1",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "stored: null",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">one</span>,positionIncrement=22,startOffset=123,endOffset=128)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">two</span>,positionIncrement=1,startOffset=5,endOffset=8)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">three</span>,positionIncrement=1,startOffset=20,endOffset=22)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "1 \\ one\\ \\,,i=22,a=\\, two\\=",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "\\n,\\ =\\ \\",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "version: 1",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "stored: null",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">one ,</span>,positionIncrement=22,startOffset=0,endOffset=6)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">two=</span> ,positionIncrement=1,startOffset=7,endOffset=15)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "token: (term=<span class=\"ff2 fs2\">\\</span>,positionIncrement=1,startOffset=17,endOffset=18)",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "Note that unknown attributes and their values are ignored, so in this example, the “<span class=\"ff2 fs2\">a</span>” attribute on the first\ntoken and the \" \" (escaped space) attribute on the second token are ignored, along with their values,\nbecause they are not among the supported attribute names.",
    "hierarchy": [
      "Example Token Streams"
    ],
    "pageId": 167
  },
  {
    "content": "1 ,i=22 ,i=33,s=2,e=20 ,",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "version: 1",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "stored: null",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "token: (term=,positionIncrement=22,startOffset=0,endOffset=0)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "token: (term=,positionIncrement=33,startOffset=2,endOffset=20)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "token: (term=,positionIncrement=1,startOffset=2,endOffset=2)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "1 =This is the stored part with \\=\n\\n \\t escapes.=one two three",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "version: 1",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "stored: <span class=\"ff1 fs1\">This is the stored part with = \\t escapes.</span>",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "token: (term=<span class=\"ff1 fs1\">one</span>,startOffset=0,endOffset=3)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "token: (term=<span class=\"ff1 fs1\">two</span>,startOffset=4,endOffset=7)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "token: (term=<span class=\"ff1 fs1\">three</span>,startOffset=8,endOffset=13)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "Note that the <span class=\"ff1 fs1\">\\t</span> in the above stored value is not literal; it's shown that way to visually indicate the actual tab\nchar that is in the stored value.",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "1 ==",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "version: 1",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "stored: \"\"",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "(no tokens)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "1 =this is a test.=",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "version: 1",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "stored: <span class=\"ff1 fs1\">this is a test.</span>",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "(no tokens)",
    "hierarchy": [
    ],
    "pageId": 168
  },
  {
    "content": "Here is a summary of common use cases, and the attributes the fields or field types should have to support\nthe case. An entry of true or false in the table indicates that the option must be set to the given value for the\nuse case to function correctly. If no entry is provided, the setting of that attribute has no impact on the case.",
    "hierarchy": [
      "Field Properties by Use Case"
    ],
    "pageId": 168
  },
  {
    "content": "search within\nfield\ntrue",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "retrieve\ncontents\ntrue\ntrue",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "use as unique\nkey\ntruefalse",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "sort on fieldtrue\nfalse\ntrue \ntrue",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "highlightingtrue\ntruetrue\ntrue ",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "faceting \ntrue\ntrue",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "add multiple\nvalues,\nmaintaining\norder\ntrue",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "field length\naffects doc\nscore\nfalse",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "MoreLikeThis \ntrue ",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "Notes:",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "1.Recommended but not necessary.\n2.Will be used if present, but not necessary.\n3.(if termVectors=true)\n4.A tokenizer must be defined for the field, but it doesn't need to be indexed.\n5.Described in <span class=\"link\">Understanding Analyzers, Tokenizers, and Filters</span>.\n6.Term vectors are not mandatory here. If not true, then a stored field is analyzed. So term vectors are\nrecommended, but only required if <span class=\"code\">stored=false</span>.",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "7.For most field types, either <span class=\"code\">indexed</span> or <span class=\"code\">docValues</span> must be true, but both are not required. <span class=\"link\">DocValues</span> can\nbe more efficient in many cases. For <span class=\"code\">[Int/Long/Float/Double/Date]PointFields</span>, <span class=\"code\">docValues=true</span> is\nrequired.",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "8.Stored content will be used by default, but docValues can alternatively be used. See <span class=\"link\">DocValues</span>.\n9.Multi-valued sorting may be performed on docValues-enabled fields using the two-argument <span class=\"code\">field()</span>\nfunction, e.g., <span class=\"code\">field(myfield,min)</span>; see the <span class=\"link\">field() function in Function Queries</span>.",
    "hierarchy": [
    ],
    "pageId": 169
  },
  {
    "content": "Fields are defined in the fields element of <span class=\"code\">schema.xml</span>. Once you have the field types set up, defining the\nfields themselves is simple.",
    "hierarchy": [
      "Defining Fields"
    ],
    "pageId": 170
  },
  {
    "content": "The following example defines a field named <span class=\"code\">price</span> with a type named <span class=\"code\">float</span> and a default value of <span class=\"code\">0.0</span>; the\nindexed<span class=\"ff2 fs1\"> and </span>stored<span class=\"ff2 fs1\"> properties are explicitly set to </span>true<span class=\"ff2 fs1\">, while any other properties specified on the </span>float\nfield type are inherited.",
    "hierarchy": [
      "Defining Fields",
      "Example Field Definition"
    ],
    "pageId": 170
  },
  {
    "content": "Field definitions can have the following properties:",
    "hierarchy": [
      "Defining Fields",
      "Field Properties"
    ],
    "pageId": 170
  },
  {
    "content": "name\nThe name of the field. Field names should consist of alphanumeric or underscore characters only and not\nstart with a digit. This is not currently strictly enforced, but other field names will not have first class\nsupport from all components and back compatibility is not guaranteed. Names with both leading and\ntrailing underscores (e.g., <span class=\"code\">_version_</span>) are reserved. Every field must have a <span class=\"code\">name</span>.",
    "hierarchy": [
      "Defining Fields",
      "Field Properties"
    ],
    "pageId": 170
  },
  {
    "content": "type\nThe name of the <span class=\"code\">fieldType</span> for this field. This will be found in the <span class=\"code\">name</span> attribute on the <span class=\"code\">fieldType</span>\ndefinition. Every field must have a <span class=\"code\">type</span>.",
    "hierarchy": [
      "Defining Fields",
      "Field Properties"
    ],
    "pageId": 170
  },
  {
    "content": "default\nA default value that will be added automatically to any document that does not have a value in this field\nwhen it is indexed. If this property is not specified, there is no default.",
    "hierarchy": [
      "Defining Fields",
      "Field Properties"
    ],
    "pageId": 170
  },
  {
    "content": "Fields can have many of the same properties as field types. Properties from the table below which are\nspecified on an individual field will override any explicit value for that property specified on the the\nfieldType<span class=\"ff2 fs1\"> of the field, or any implicit default property value provided by the underlying </span>fieldType\nimplementation. The table below is reproduced from <span class=\"link\">Field Type Definitions and Properties</span>, which has more\ndetails:",
    "hierarchy": [
      "Defining Fields",
      "Optional Field Type Override Properties"
    ],
    "pageId": 170
  },
  {
    "content": "indexedIf true, the value of the field can be used\nin queries to retrieve matching\ndocuments.\ntrue or falsetrue",
    "hierarchy": [
      "Defining Fields",
      "Optional Field Type Override Properties"
    ],
    "pageId": 170
  },
  {
    "content": "storedIf true, the actual value of the field can be\nretrieved by queries.\ntrue or falsetrue",
    "hierarchy": [
      "Defining Fields",
      "Optional Field Type Override Properties"
    ],
    "pageId": 170
  },
  {
    "content": "docValuesIf true, the value of the field will be put in\na column-oriented <span class=\"link\">DocValues</span> structure.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "sortMissingFirst\nsortMissingLast\nControl the placement of documents\nwhen a sort field is not present.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "multiValuedIf true, indicates that a single document\nmight contain multiple values for this field\ntype.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "omitNormsIf true, omits the norms associated with\nthis field (this disables length\nnormalization for the field, and saves\nsome memory). <span class=\"ff1\">Defaults to true for all</span>\nprimitive (non-analyzed) field types,\nsuch as int, float, data, bool, and string.\nOnly full-text fields or fields need norms.\ntrue or false*",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "omitTermFreqAndP\nositions\nIf true, omits term frequency, positions,\nand payloads from postings for this field.\nThis can be a performance boost for fields\nthat don't require that information. It also\nreduces the storage space required for\nthe index. Queries that rely on position\nthat are issued on a field with this option\nwill silently fail to find documents. <span class=\"ff1\">This</span>\nproperty defaults to true for all field\ntypes that are not text fields.\ntrue or false*",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "omitPositionsSimilar to <span class=\"code\">omitTermFreqAndPositions</span> but\npreserves term frequency information.\ntrue or false*",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "termVectors\ntermPositions\ntermOffsets\ntermPayloads\nThese options instruct Solr to maintain full\nterm vectors for each document,\noptionally including position, offset and\npayload information for each term\noccurrence in those vectors. These can be\nused to accelerate highlighting and other\nancillary functionality, but impose a\nsubstantial cost in terms of index size.\nThey are not necessary for typical uses of\nSolr.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "requiredInstructs Solr to reject any attempts to\nadd a document which does not have a\nvalue for this field. This property defaults\nto false.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 171
  },
  {
    "content": "useDocValuesAsStor\ned\nIf the field has <span class=\"link\">docValues</span> enabled, setting\nthis to true would allow the field to be\nreturned as if it were a stored field (even\nif it has <span class=\"code\">stored=false</span>) when matching\n“*” in an <span class=\"link\">fl parameter</span>.\ntrue or falsetrue",
    "hierarchy": [
    ],
    "pageId": 172
  },
  {
    "content": "largeLarge fields are always lazy loaded and\nwill only take up space in the document\ncache if the actual value is < 512KB. This\noption requires <span class=\"code\">stored=\"true\"</span> and\nmultiValued=\"false\"<span class=\"ff2 fs0\">. It's intended for</span>\nfields that might have very large values so\nthat they don’t get cached in memory.\ntrue or falsefalse",
    "hierarchy": [
    ],
    "pageId": 172
  },
  {
    "content": "You might want to interpret some document fields in more than one way. Solr has a mechanism for making\ncopies of fields so that you can apply several distinct field types to a single piece of incoming information.",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "The name of the field you want to copy is the <span class=\"code\">source</span>, and the name of the copy is the <span class=\"code\">destination</span>. In\nschema.xml<span class=\"ff2 fs1\">, it's very simple to make copies of fields:</span>",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "In this example, we want Solr to copy the <span class=\"ff4 fs2\">cat</span> field to a field named <span class=\"ff4 fs2\">text</span>. Fields are copied before <span class=\"link\">analysis</span> is\ndone, meaning you can have two fields with identical original content, but which use different analysis\nchains and are stored in the index differently.",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "In the example above, if the <span class=\"ff4 fs2\">text</span> destination field has data of its own in the input documents, the contents\nof the <span class=\"ff4 fs2\">cat</span> field will be added as additional values – just as if all of the values had originally been specified by\nthe client. Remember to configure your fields as <span class=\"ff4 fs2\">multivalued=\"true\"</span> if they will ultimately get multiple\nvalues (either from a multivalued source or from multiple <span class=\"ff4 fs2\">copyField</span> directives).",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "A common usage for this functionality is to create a single \"search\" field that will serve as the default query\nfield when users or clients do not specify a field to query. For example, <span class=\"ff4 fs2\">title</span>, <span class=\"ff4 fs2\">author</span>, <span class=\"ff4 fs2\">keywords</span>, and <span class=\"ff4 fs2\">body</span>\nmay all be fields that should be searched by default, with copy field rules for each field to copy to a <span class=\"ff4 fs2\">catchall</span>\nfield (for example, it could be named anything). Later you can set a rule in <span class=\"ff4 fs2\">solrconfig.xml</span> to search the\ncatchall<span class=\"ff2 fs1\"> field by default. One caveat to this is your index will grow when using copy fields. However,</span>\nwhether this becomes problematic for you and the final size will depend on the number of fields being\ncopied, the number of destination fields being copied to, the analysis in use, and the available disk space.",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "The <span class=\"ff4 fs2\">maxChars</span> parameter, an <span class=\"ff4 fs2\">int</span> parameter, establishes an upper limit for the number of characters to be\ncopied from the source value when constructing the value added to the destination field. This limit is useful\nfor situations in which you want to copy some data from the source field, but also control the size of index\nfiles.",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "Both the source and the destination of <span class=\"ff4 fs2\">copyField</span> can contain either leading or trailing asterisks, which will\nmatch anything. For example, the following line will copy the contents of all incoming fields that match the\nwildcard pattern <span class=\"ff4 fs2\">*_t</span> to the text field.:",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "The <span class=\"ff4 fs2\">copyField</span> command can use a wildcard (*) character in the <span class=\"ff4 fs2\">dest</span> parameter only if the\nsource<span class=\"ff2 fs1\"> parameter contains one as well. </span>copyField<span class=\"ff2 fs1\"> uses the matching glob from the source</span>\nfield for the <span class=\"ff4 fs2\">dest</span> field name into which the source content is copied.",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "Copying is done at the stream source level and no copy feeds into another copy. This means that copy fields\ncannot be chained i.e., <span class=\"code\">you cannot</span> copy from <span class=\"ff4 fs2\">here</span> to <span class=\"ff4 fs2\">there</span> and then from <span class=\"ff4 fs2\">there</span> to <span class=\"ff4 fs2\">elsewhere</span>. However, the\nsame source field can be copied to multiple destination fields:",
    "hierarchy": [
      "Copying Fields"
    ],
    "pageId": 173
  },
  {
    "content": "Dynamic fields<span class=\"code\"> allow Solr to index fields that you did not explicitly define in your schema.</span>",
    "hierarchy": [
      "Dynamic Fields"
    ],
    "pageId": 175
  },
  {
    "content": "This is useful if you discover you have forgotten to define one or more fields. Dynamic fields can make your\napplication less brittle by providing some flexibility in the documents you can add to Solr.",
    "hierarchy": [
      "Dynamic Fields"
    ],
    "pageId": 175
  },
  {
    "content": "A dynamic field is just like a regular field except it has a name with a wildcard in it. When you are indexing\ndocuments, a field that does not match any explicitly defined fields can be matched with a dynamic field.",
    "hierarchy": [
      "Dynamic Fields"
    ],
    "pageId": 175
  },
  {
    "content": "For example, suppose your schema includes a dynamic field with a name of <span class=\"ff4 fs2\">*_i</span>. If you attempt to index a\ndocument with a <span class=\"ff4 fs2\">cost_i</span> field, but no explicit <span class=\"ff4 fs2\">cost_i</span> field is defined in the schema, then the <span class=\"ff4 fs2\">cost_i</span> field will\nhave the field type and analysis defined for <span class=\"ff4 fs2\">*_i</span>.",
    "hierarchy": [
      "Dynamic Fields"
    ],
    "pageId": 175
  },
  {
    "content": "Like regular fields, dynamic fields have a name, a field type, and options.",
    "hierarchy": [
      "Dynamic Fields"
    ],
    "pageId": 175
  },
  {
    "content": "It is recommended that you include basic dynamic field mappings (like that shown above) in your\nschema.xml<span class=\"code\">. The mappings can be very useful.</span>",
    "hierarchy": [
      "Dynamic Fields"
    ],
    "pageId": 175
  },
  {
    "content": "This section describes several other important elements of <span class=\"code\">schema.xml</span> not covered in earlier sections.",
    "hierarchy": [
      "Other Schema Elements"
    ],
    "pageId": 176
  },
  {
    "content": "The <span class=\"code\">uniqueKey</span> element specifies which field is a unique identifier for documents. Although <span class=\"code\">uniqueKey</span> is not\nrequired, it is nearly always warranted by your application design. For example, <span class=\"code\">uniqueKey</span> should be used if\nyou will ever update a document in the index.",
    "hierarchy": [
      "Other Schema Elements",
      "Unique Key"
    ],
    "pageId": 176
  },
  {
    "content": "You can define the unique key field by naming it:",
    "hierarchy": [
      "Other Schema Elements",
      "Unique Key"
    ],
    "pageId": 176
  },
  {
    "content": "Schema defaults and <span class=\"code\">copyFields</span> cannot be used to populate the <span class=\"code\">uniqueKey</span> field. The <span class=\"code\">fieldType</span> of\nuniqueKey<span class=\"ff2 fs1\"> must not be analyzed. You can use </span>UUIDUpdateProcessorFactory<span class=\"ff2 fs1\"> to have </span>uniqueKey<span class=\"ff2 fs1\"> values</span>\ngenerated automatically.",
    "hierarchy": [
      "Other Schema Elements",
      "Unique Key"
    ],
    "pageId": 176
  },
  {
    "content": "Further, the operation will fail if the <span class=\"code\">uniqueKey</span> field is used, but is multivalued (or inherits the multivalue-\nness from the <span class=\"code\">fieldtype</span>). However, <span class=\"code\">uniqueKey</span> will continue to work, as long as the field is properly used.",
    "hierarchy": [
      "Other Schema Elements",
      "Unique Key"
    ],
    "pageId": 176
  },
  {
    "content": "Similarity is a Lucene class used to score a document in searching.",
    "hierarchy": [
      "Other Schema Elements",
      "Similarity"
    ],
    "pageId": 176
  },
  {
    "content": "Each collection has one \"global\" Similarity, and by default Solr uses an implicit <span class=\"code\">SchemaSimilarityFactory</span>\nwhich allows individual field types to be configured with a \"per-type\" specific Similarity and implicitly uses\nBM25Similarity<span class=\"ff2 fs1\"> for any field type which does not have an explicit Similarity.</span>",
    "hierarchy": [
      "Other Schema Elements",
      "Similarity"
    ],
    "pageId": 176
  },
  {
    "content": "This default behavior can be overridden by declaring a top level <span class=\"code\"><similarity/></span> element in your <span class=\"code\">schema.xml</span>,\noutside of any single field type. This similarity declaration can either refer directly to the name of a class with\na no-argument constructor, such as in this example showing <span class=\"code\">BM25Similarity</span>:",
    "hierarchy": [
      "Other Schema Elements",
      "Similarity"
    ],
    "pageId": 176
  },
  {
    "content": "or by referencing a <span class=\"code\">SimilarityFactory</span> implementation, which may take optional initialization parameters:",
    "hierarchy": [
      "Other Schema Elements",
      "Similarity"
    ],
    "pageId": 176
  },
  {
    "content": "Ê <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"basicModel\"<span class=\"fc2\">></span></span>P<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"afterEffect\"<span class=\"fc2\">></span></span>L<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"normalization\"<span class=\"fc2\">></span></span>H2<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"><float</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"c\"<span class=\"fc2\">></span></span>7<span class=\"fc2\"></float></span>",
    "hierarchy": [
      "Other Schema Elements",
      "Similarity"
    ],
    "pageId": 176
  },
  {
    "content": "In most cases, specifying global level similarity like this will cause an error if your <span class=\"code\">schema.xml</span> also includes\nfield type specific <span class=\"code\"><similarity/></span> declarations. One key exception to this is that you may explicitly declare a\nSchemaSimilarityFactory<span class=\"ff2 fs1\"> and specify what that default behavior will be for all field types that do not</span>",
    "hierarchy": [
      "Other Schema Elements",
      "Similarity"
    ],
    "pageId": 176
  },
  {
    "content": "declare an explicit Similarity using the name of field type (specified by <span class=\"ff2 fs1\">defaultSimFromFieldType</span>) that <span class=\"code\">is</span>\nconfigured with a specific similarity:",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaultSimFromFieldType\"<span class=\"fc1\">></span></span>text_dfr<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "Ê <span class=\"fc1\"><analyzer</span> <span class=\"fc2\">...</span> <span class=\"fc1\">/></span>\nÊ <span class=\"fc1\"><similarity</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DFRSimilarityFactory\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"basicModel\"<span class=\"fc1\">></span></span>I(F)<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"afterEffect\"<span class=\"fc1\">></span></span>B<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"normalization\"<span class=\"fc1\">></span></span>H3<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><float</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mu\"<span class=\"fc1\">></span></span>900<span class=\"fc1\"></float></span>\nÊ <span class=\"fc1\"></similarity></span>",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "Ê <span class=\"fc1\"><analyzer</span> <span class=\"fc2\">...</span> <span class=\"fc1\">/></span>\nÊ <span class=\"fc1\"><similarity</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.IBSimilarityFactory\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"distribution\"<span class=\"fc1\">></span></span>SPL<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"lambda\"<span class=\"fc1\">></span></span>DF<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"normalization\"<span class=\"fc1\">></span></span>H2<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></similarity></span>",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "Ê <span class=\"fc1\"><analyzer</span> <span class=\"fc2\">...</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "In the example above <span class=\"ff2 fs1\">IBSimilarityFactory</span> (using the Information-Based model) will be used for any fields\nof type <span class=\"ff2 fs1\">text_ib</span>, while <span class=\"ff2 fs1\">DFRSimilarityFactory</span> (divergence from random) will be used for any fields of type\ntext_dfr<span class=\"ff1 fs0\">, as well as any fields using a type that does not explicitly specify a </span><similarity/><span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "If <span class=\"ff2 fs1\">SchemaSimilarityFactory</span> is explicitly declared without configuring a <span class=\"ff2 fs1\">defaultSimFromFieldType</span>, then\nBM25Similarity<span class=\"ff1 fs0\"> is implicitly used as the default.</span>",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "In addition to the various factories mentioned on this page, there are several other similarity\nimplementations that can be used such as the <span class=\"ff2 fs1\">SweetSpotSimilarityFactory</span>, <span class=\"ff2 fs1\">ClassicSimilarityFactory</span>,\netc. For details, see the Solr Javadocs for the <span class=\"link\">similarity factories</span>.",
    "hierarchy": [
    ],
    "pageId": 177
  },
  {
    "content": "The Schema API allows you to use an HTTP API to manage many of the elements of your schema.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "The Schema API utilizes the ManagedIndexSchemaFactory class, which is the default schema factory in\nmodern Solr versions. See the section <span class=\"link\">Schema Factory Definition in SolrConfig</span> for more information about\nchoosing a schema factory for your index.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "This API provides read and write access to the Solr schema for each collection (or core, when using\nstandalone Solr). Read access to all schema elements is supported. Fields, dynamic fields, field types and\ncopyField rules may be added, removed or replaced. Future Solr releases will extend write access to allow\nmore schema elements to be modified.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "The file named \"managed-schema\" in the example configurations may include a note that\nrecommends never hand-editing the file. Before the Schema API existed, such edits were\nthe only way to make changes to the schema, and users may have a strong desire to\ncontinue making changes this way.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "The reason that this is discouraged is because hand-edits of the schema may be lost if the\nSchema API described here is later used to make a change, unless the core or collection is\nreloaded or Solr is restarted before using the Schema API. If care is taken to always reload\nor restart after a manual edit, then there is no problem at all with doing those edits.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "The API allows two output modes for all calls: JSON or XML. When requesting the complete schema, there is\nanother output mode which is XML modeled after the managed-schema file itself, which is in XML format.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "When modifying the schema with the API, a core reload will automatically occur in order for the changes to\nbe available immediately for documents indexed thereafter. Previously indexed documents will <span class=\"ff1\">not</span> be\nautomatically updated - they <span class=\"ff1\">must</span> be re-indexed if existing index data uses schema elements that you\nchanged.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "If you modify your schema, you will likely need to re-index all documents. If you do not, you\nmay lose access to documents, or not be able to interpret them properly, e.g., after\nreplacing a field type.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "Modifying your schema will never modify any documents that are already indexed. You\nmust re-index documents in order to apply schema changes to them. Queries and updates\nmade after the change may encounter errors that were not present before the change.\nCompletely deleting the index and rebuilding it is usually the only option to fix such errors.",
    "hierarchy": [
      "Schema API"
    ],
    "pageId": 178
  },
  {
    "content": "To add, remove or replace fields, dynamic field rules, copy field rules, or new field types, you can send a\nPOST request to the <span class=\"ff5 fs4\">/collection/schema/</span> endpoint with a sequence of commands to perform the\nrequested actions. The following commands are supported:",
    "hierarchy": [
      "Schema API",
      "Modify the Schema"
    ],
    "pageId": 178
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">add-field</span><span class=\"ls1\">: add a new field with parameters you provide.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">delete-field</span><span class=\"ls1\">: delete a field.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">replace-field</span><span class=\"ls1\">: replace an existing field with one that is differently configured.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">add-dynamic-field</span><span class=\"ls1\">: add a new dynamic field rule with parameters you provide.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">delete-dynamic-field</span><span class=\"ls1\">: delete a dynamic field rule.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">replace-dynamic-field</span><span class=\"ls1\">: replace an existing dynamic field rule with one that is differently configured.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">add-field-type</span><span class=\"ls1\">: add a new field type with parameters you provide.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">delete-field-type</span><span class=\"ls1\">: delete a field type.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">replace-field-type</span><span class=\"ls1\">: replace an existing field type with one that is differently configured.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">add-copy-field</span><span class=\"ls1\">: add a new copy field rule.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">delete-copy-field</span><span class=\"ls1\">: delete a copy field rule.</span>",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "These commands can be issued in separate POST requests or in the same POST request. Commands are\nexecuted in the order in which they are specified.",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "In each case, the response will include the status and the time to process the request, but will not include\nthe entire schema.",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "When modifying the schema with the API, a core reload will automatically occur in order for the changes to\nbe available immediately for documents indexed thereafter. Previously indexed documents will <span class=\"code\">not</span> be\nautomatically handled - they <span class=\"code\">must</span> be re-indexed if they used schema elements that you changed.",
    "hierarchy": [
    ],
    "pageId": 179
  },
  {
    "content": "The <span class=\"ff2 fs1\">add-field</span> command adds a new field definition to your schema. If a field with the same name exists an\nerror is thrown.",
    "hierarchy": [
      "Add a New Field"
    ],
    "pageId": 179
  },
  {
    "content": "All of the properties available when defining a field with manual <span class=\"ff2 fs1\">schema.xml</span> edits can be passed via the API.\nThese request attributes are described in detail in the section <span class=\"link\">Defining Fields</span>.",
    "hierarchy": [
      "Add a New Field"
    ],
    "pageId": 179
  },
  {
    "content": "For example, to define a new stored field named \"sell_by\", of type \"pdate\", you would POST the following\nrequest:",
    "hierarchy": [
      "Add a New Field"
    ],
    "pageId": 179
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field\":{\nÊ    \"name\":\"sell_by\",\nÊ    \"type\":\"pdate\",\nÊ    \"stored\":true }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Add a New Field"
    ],
    "pageId": 179
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field\":{\nÊ    \"name\":\"sell_by\",\nÊ    \"type\":\"pdate\",\nÊ    \"stored\":true }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 180
  },
  {
    "content": "The <span class=\"ff2 fs2\">delete-field</span> command removes a field definition from your schema. If the field does not exist in the\nschema, or if the field is the source or destination of a copy field rule, an error is thrown.",
    "hierarchy": [
      "Delete a Field"
    ],
    "pageId": 180
  },
  {
    "content": "For example, to delete a field named \"sell_by\", you would POST the following request:",
    "hierarchy": [
      "Delete a Field"
    ],
    "pageId": 180
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-field\" : { \"name\":\"sell_by\" }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Delete a Field"
    ],
    "pageId": 180
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-field\" : { \"name\":\"sell_by\" }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
      "Delete a Field"
    ],
    "pageId": 180
  },
  {
    "content": "The <span class=\"ff2 fs2\">replace-field</span> command replaces a field's definition. Note that you must supply the full definition for a\nfield - this command will <span class=\"ff1\">not</span> partially modify a field’s definition. If the field does not exist in the schema an\nerror is thrown.",
    "hierarchy": [
      "Replace a Field"
    ],
    "pageId": 180
  },
  {
    "content": "All of the properties available when defining a field with manual <span class=\"ff2 fs2\">schema.xml</span> edits can be passed via the API.\nThese request attributes are described in detail in the section <span class=\"link\">Defining Fields</span>.",
    "hierarchy": [
      "Replace a Field"
    ],
    "pageId": 180
  },
  {
    "content": "For example, to replace the definition of an existing field \"sell_by\", to make it be of type \"date\" and to not be\nstored, you would POST the following request:",
    "hierarchy": [
      "Replace a Field"
    ],
    "pageId": 180
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"replace-field\":{\nÊ    \"name\":\"sell_by\",\nÊ    \"type\":\"date\",\nÊ    \"stored\":false }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 181
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"replace-field\":{\nÊ    \"name\":\"sell_by\",\nÊ    \"type\":\"date\",\nÊ    \"stored\":false }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 181
  },
  {
    "content": "The <span class=\"ff2 fs2\">add-dynamic-field</span> command adds a new dynamic field rule to your schema.",
    "hierarchy": [
      "Add a Dynamic Field Rule"
    ],
    "pageId": 181
  },
  {
    "content": "All of the properties available when editing <span class=\"ff2 fs2\">schema.xml</span> can be passed with the POST request. The section\nDynamic Fields<span class=\"fc0\"> has details on all of the attributes that can be defined for a dynamic field rule.</span>",
    "hierarchy": [
      "Add a Dynamic Field Rule"
    ],
    "pageId": 181
  },
  {
    "content": "For example, to create a new dynamic field rule where all incoming fields ending with \"_s\" would be stored\nand have field type \"string\", you can POST a request like this:",
    "hierarchy": [
      "Add a Dynamic Field Rule"
    ],
    "pageId": 181
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-dynamic-field\":{\nÊ    \"name\":\"*_s\",\nÊ    \"type\":\"string\",\nÊ    \"stored\":true }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Add a Dynamic Field Rule"
    ],
    "pageId": 181
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-dynamic-field\":{\nÊ    \"name\":\"*_s\",\nÊ    \"type\":\"string\",\nÊ    \"stored\":true }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 182
  },
  {
    "content": "The <span class=\"ff2 fs2\">delete-dynamic-field</span> command deletes a dynamic field rule from your schema. If the dynamic field\nrule does not exist in the schema, or if the schema contains a copy field rule with a target or destination that\nmatches only this dynamic field rule, an error is thrown.",
    "hierarchy": [
      "Delete a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "For example, to delete a dynamic field rule matching \"*_s\", you can POST a request like this:",
    "hierarchy": [
      "Delete a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-dynamic-field\":{ \"name\":\"*_s\" }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Delete a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-dynamic-field\":{ \"name\":\"*_s\" }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
      "Delete a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "The <span class=\"ff2 fs2\">replace-dynamic-field</span> command replaces a dynamic field rule in your schema. Note that you must\nsupply the full definition for a dynamic field rule - this command will <span class=\"ff1\">not</span> partially modify a dynamic field\nrule's definition. If the dynamic field rule does not exist in the schema an error is thrown.",
    "hierarchy": [
      "Replace a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "All of the properties available when editing <span class=\"ff2 fs2\">schema.xml</span> can be passed with the POST request. The section\nDynamic Fields<span class=\"fc0\"> has details on all of the attributes that can be defined for a dynamic field rule.</span>",
    "hierarchy": [
      "Replace a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "For example, to replace the definition of the \"*_s\" dynamic field rule with one where the field type is\n\"text_general\" and it's not stored, you can POST a request like this:",
    "hierarchy": [
      "Replace a Dynamic Field Rule"
    ],
    "pageId": 182
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"replace-dynamic-field\":{\nÊ    \"name\":\"*_s\",\nÊ    \"type\":\"text_general\",\nÊ    \"stored\":false }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 183
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"replace-dynamic-field\":{\nÊ    \"name\":\"*_s\",\nÊ    \"type\":\"text_general\",\nÊ    \"stored\":false }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 183
  },
  {
    "content": "The <span class=\"ff2 fs2\">add-field-type</span> command adds a new field type to your schema.",
    "hierarchy": [
      "Add a New Field Type"
    ],
    "pageId": 183
  },
  {
    "content": "All of the field type properties available when editing <span class=\"ff2 fs2\">schema.xml</span> by hand are available for use in a POST\nrequest. The structure of the command is a json mapping of the standard field type definition, including the\nname, class, index and query analyzer definitions, etc. Details of all of the available options are described in\nthe section <span class=\"link\">Solr Field Types</span>.",
    "hierarchy": [
      "Add a New Field Type"
    ],
    "pageId": 183
  },
  {
    "content": "For example, to create a new field type named \"myNewTxtField\", you can POST a request as follows:",
    "hierarchy": [
      "Add a New Field Type"
    ],
    "pageId": 183
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field-type\" : {\nÊ    \"name\":\"myNewTxtField\",\nÊ    \"class\":\"solr.TextField\",\nÊ    \"positionIncrementGap\":\"100\",\nÊ    \"analyzer\" : {\nÊ       \"charFilters\":[{\nÊ          \"class\":\"solr.PatternReplaceCharFilterFactory\",\nÊ          \"replacement\":\"$1$1\",\nÊ          \"pattern\":\"([a-zA-Z])\\\\\\\\1+\" }],\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.WhitespaceTokenizerFactory\" },\nÊ       \"filters\":[{\nÊ          \"class\":\"solr.WordDelimiterFilterFactory\",\nÊ          \"preserveOriginal\":\"0\" }]}}\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 184
  },
  {
    "content": "Note in this example that we have only defined a single analyzer section that will apply to index analysis\nand query analysis.",
    "hierarchy": [
    ],
    "pageId": 184
  },
  {
    "content": "If we wanted to define separate analysis, we would replace the <span class=\"ff2 fs1\">analyzer</span> section in the above example\nwith separate sections for <span class=\"ff2 fs1\">indexAnalyzer</span> and <span class=\"ff2 fs1\">queryAnalyzer</span>. As in this example:",
    "hierarchy": [
    ],
    "pageId": 184
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field-type\":{\nÊ    \"name\":\"myNewTextField\",\nÊ    \"class\":\"solr.TextField\",\nÊ    \"indexAnalyzer\":{\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.PathHierarchyTokenizerFactory\",\nÊ          \"delimiter\":\"/\" }},\nÊ    \"queryAnalyzer\":{\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.KeywordTokenizerFactory\" }}}\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 184
  },
  {
    "content": "To define two analyzers with the V2 API, we just use a different endpoint:",
    "hierarchy": [
    ],
    "pageId": 185
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field-type\":{\nÊ    \"name\":\"myNewTextField\",\nÊ    \"class\":\"solr.TextField\",\nÊ    \"indexAnalyzer\":{\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.PathHierarchyTokenizerFactory\",\nÊ          \"delimiter\":\"/\" }},\nÊ    \"queryAnalyzer\":{\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.KeywordTokenizerFactory\" }}}\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 185
  },
  {
    "content": "The <span class=\"code\">delete-field-type</span> command removes a field type from your schema. If the field type does not exist in\nthe schema, or if any field or dynamic field rule in the schema uses the field type, an error is thrown.",
    "hierarchy": [
      "Delete a Field Type"
    ],
    "pageId": 185
  },
  {
    "content": "For example, to delete the field type named \"myNewTxtField\", you can make a POST request as follows:",
    "hierarchy": [
      "Delete a Field Type"
    ],
    "pageId": 185
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-field-type\":{ \"name\":\"myNewTxtField\" }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Delete a Field Type"
    ],
    "pageId": 185
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-field-type\":{ \"name\":\"myNewTxtField\" }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
      "Delete a Field Type"
    ],
    "pageId": 185
  },
  {
    "content": "The <span class=\"code\">replace-field-type</span> command replaces a field type in your schema. Note that you must supply the full\ndefinition for a field type - this command will <span class=\"ff1\">not</span> partially modify a field type's definition. If the field type\ndoes not exist in the schema an error is thrown.",
    "hierarchy": [
      "Replace a Field Type"
    ],
    "pageId": 185
  },
  {
    "content": "All of the field type properties available when editing <span class=\"code\">schema.xml</span> by hand are available for use in a POST\nrequest. The structure of the command is a json mapping of the standard field type definition, including the",
    "hierarchy": [
      "Replace a Field Type"
    ],
    "pageId": 185
  },
  {
    "content": "name, class, index and query analyzer definitions, etc. Details of all of the available options are described in\nthe section <span class=\"link\">Solr Field Types</span>.",
    "hierarchy": [
    ],
    "pageId": 186
  },
  {
    "content": "For example, to replace the definition of a field type named \"myNewTxtField\", you can make a POST request\nas follows:",
    "hierarchy": [
    ],
    "pageId": 186
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"replace-field-type\":{\nÊ    \"name\":\"myNewTxtField\",\nÊ    \"class\":\"solr.TextField\",\nÊ    \"positionIncrementGap\":\"100\",\nÊ    \"analyzer\":{\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.StandardTokenizerFactory\" }}}\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 186
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"replace-field-type\":{\nÊ    \"name\":\"myNewTxtField\",\nÊ    \"class\":\"solr.TextField\",\nÊ    \"positionIncrementGap\":\"100\",\nÊ    \"analyzer\":{\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.StandardTokenizerFactory\" }}}\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 186
  },
  {
    "content": "The <span class=\"code\">add-copy-field</span> command adds a new copy field rule to your schema.",
    "hierarchy": [
      "Add a New Copy Field Rule"
    ],
    "pageId": 186
  },
  {
    "content": "The attributes supported by the command are the same as when creating copy field rules by manually\nediting the <span class=\"code\">schema.xml</span>, as below:",
    "hierarchy": [
      "Add a New Copy Field Rule"
    ],
    "pageId": 186
  },
  {
    "content": "source\nThe source field. This parameter is required.",
    "hierarchy": [
      "Add a New Copy Field Rule"
    ],
    "pageId": 186
  },
  {
    "content": "dest\nA field or an array of fields to which the source field will be copied. This parameter is required.",
    "hierarchy": [
      "Add a New Copy Field Rule"
    ],
    "pageId": 186
  },
  {
    "content": "maxChars\nThe upper limit for the number of characters to be copied. The section <span class=\"link\">Copying Fields</span> has more details.",
    "hierarchy": [
      "Add a New Copy Field Rule"
    ],
    "pageId": 186
  },
  {
    "content": "For example, to define a rule to copy the field \"shelf\" to the \"location\" and \"catchall\" fields, you would POST",
    "hierarchy": [
      "Add a New Copy Field Rule"
    ],
    "pageId": 186
  },
  {
    "content": "the following request:",
    "hierarchy": [
    ],
    "pageId": 187
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-copy-field\":{\nÊ    \"source\":\"shelf\",\nÊ    \"dest\":[ \"location\", \"catchall\" ]}\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 187
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-copy-field\":{\nÊ    \"source\":\"shelf\",\nÊ    \"dest\":[ \"location\", \"catchall\" ]}\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 187
  },
  {
    "content": "The <span class=\"code\">delete-copy-field</span> command deletes a copy field rule from your schema. If the copy field rule does not\nexist in the schema an error is thrown.",
    "hierarchy": [
      "Delete a Copy Field Rule"
    ],
    "pageId": 187
  },
  {
    "content": "The <span class=\"code\">source</span> and <span class=\"code\">dest</span> attributes are required by this command.",
    "hierarchy": [
      "Delete a Copy Field Rule"
    ],
    "pageId": 187
  },
  {
    "content": "For example, to delete a rule to copy the field \"shelf\" to the \"location\" field, you would POST the following\nrequest:",
    "hierarchy": [
      "Delete a Copy Field Rule"
    ],
    "pageId": 187
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-copy-field\":{ \"source\":\"shelf\", \"dest\":\"location\" }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Delete a Copy Field Rule"
    ],
    "pageId": 187
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"delete-copy-field\":{ \"source\":\"shelf\", \"dest\":\"location\" }\n}' http://localhost:8983/api/cores/gettingstarted/schema",
    "hierarchy": [
      "Delete a Copy Field Rule"
    ],
    "pageId": 187
  },
  {
    "content": "It is possible to perform one or more add requests in a single command. The API is transactional and all\ncommands in a single call either succeed or fail together.",
    "hierarchy": [
      "Multiple Commands in a Single POST"
    ],
    "pageId": 188
  },
  {
    "content": "The commands are executed in the order in which they are specified. This means that if you want to create a\nnew field type and in the same request use the field type on a new field, the section of the request that\ncreates the field type must come before the section that creates the new field. Similarly, since a field must\nexist for it to be used in a copy field rule, a request to add a field must come before a request for the field to\nbe used as either the source or the destination for a copy field rule.",
    "hierarchy": [
      "Multiple Commands in a Single POST"
    ],
    "pageId": 188
  },
  {
    "content": "The syntax for making multiple requests supports several approaches. First, the commands can simply be\nmade serially, as in this request to create a new field type and then a field that uses that type:",
    "hierarchy": [
      "Multiple Commands in a Single POST"
    ],
    "pageId": 188
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field-type\":{\nÊ    \"name\":\"myNewTxtField\",\nÊ    \"class\":\"solr.TextField\",\nÊ    \"positionIncrementGap\":\"100\",\nÊ    \"analyzer\":{\nÊ       \"charFilters\":[{\nÊ          \"class\":\"solr.PatternReplaceCharFilterFactory\",\nÊ          \"replacement\":\"$1$1\",\nÊ          \"pattern\":\"([a-zA-Z])\\\\\\\\1+\" }],\nÊ       \"tokenizer\":{\nÊ          \"class\":\"solr.WhitespaceTokenizerFactory\" },\nÊ       \"filters\":[{\nÊ          \"class\":\"solr.WordDelimiterFilterFactory\",\nÊ          \"preserveOriginal\":\"0\" }]}},\nÊ  \"add-field\" : {\nÊ     \"name\":\"sell_by\",\nÊ     \"type\":\"myNewTxtField\",\nÊ     \"stored\":true }\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Multiple Commands in a Single POST"
    ],
    "pageId": 188
  },
  {
    "content": "Or, the same command can be repeated, as in this example:",
    "hierarchy": [
      "Multiple Commands in a Single POST"
    ],
    "pageId": 188
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field\":{\nÊ    \"name\":\"shelf\",\nÊ    \"type\":\"myNewTxtField\",\nÊ    \"stored\":true },\nÊ \"add-field\":{\nÊ    \"name\":\"location\",\nÊ    \"type\":\"myNewTxtField\",\nÊ    \"stored\":true },\nÊ \"add-copy-field\":{\nÊ    \"source\":\"shelf\",\nÊ     \"dest\":[ \"location\", \"catchall\" ]}\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 189
  },
  {
    "content": "Finally, repeated commands can be sent as an array:",
    "hierarchy": [
    ],
    "pageId": 189
  },
  {
    "content": "curl -X POST -H 'Content-type:application/json' --data-binary '{\nÊ \"add-field\":[\nÊ    { \"name\":\"shelf\",\nÊ      \"type\":\"myNewTxtField\",\nÊ      \"stored\":true },\nÊ    { \"name\":\"location\",\nÊ      \"type\":\"myNewTxtField\",\nÊ      \"stored\":true }]\n}' http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
    ],
    "pageId": 189
  },
  {
    "content": "When running in SolrCloud mode, changes made to the schema on one node will propagate to all replicas in\nthe collection.",
    "hierarchy": [
      "Schema Changes among Replicas"
    ],
    "pageId": 189
  },
  {
    "content": "You can pass the <span class=\"ff1 fs2\">updateTimeoutSecs</span> parameter with your request to set the number of seconds to wait\nuntil all replicas confirm they applied the schema updates. This helps your client application be more robust\nin that you can be sure that all replicas have a given schema change within a defined amount of time.",
    "hierarchy": [
      "Schema Changes among Replicas"
    ],
    "pageId": 189
  },
  {
    "content": "If agreement is not reached by all replicas in the specified time, then the request fails and the error message\nwill include information about which replicas had trouble. In most cases, the only option is to re-try the\nchange after waiting a brief amount of time. If the problem persists, then you'll likely need to investigate the\nserver logs on the replicas that had trouble applying the changes.",
    "hierarchy": [
      "Schema Changes among Replicas"
    ],
    "pageId": 189
  },
  {
    "content": "If you do not supply an <span class=\"ff1 fs2\">updateTimeoutSecs</span> parameter, the default behavior is for the receiving node to\nreturn immediately after persisting the updates to ZooKeeper. All other replicas will apply the updates\nasynchronously. Consequently, without supplying a timeout, your client application cannot be sure that all\nreplicas have applied the changes.",
    "hierarchy": [
      "Schema Changes among Replicas"
    ],
    "pageId": 189
  },
  {
    "content": "The following endpoints allow you to read how your schema has been defined. You can GET the entire\nschema, or only portions of it as needed.",
    "hierarchy": [
      "Retrieve Schema Information"
    ],
    "pageId": 189
  },
  {
    "content": "To modify the schema, see the previous section <span class=\"link\">Modify the Schema</span>.",
    "hierarchy": [
    ],
    "pageId": 190
  },
  {
    "content": "GET /collection/schema",
    "hierarchy": [
      "Retrieve the Entire Schema"
    ],
    "pageId": 190
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Parameters"
    ],
    "pageId": 190
  },
  {
    "content": "The query parameters should be added to the API request after '?'.",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Parameters"
    ],
    "pageId": 190
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff2\">json</span>, <span class=\"ff2\">xml</span> or <span class=\"ff2\">schema.xml</span>. If not specified, JSON will\nbe returned by default.",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Parameters"
    ],
    "pageId": 190
  },
  {
    "content": "The output will include all fields, field types, dynamic rules and copy field rules, in the format requested\n(JSON or XML). The schema name and version are also included.",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Response"
    ],
    "pageId": 190
  },
  {
    "content": "Get the entire schema in JSON.",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Examples"
    ],
    "pageId": 190
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Examples"
    ],
    "pageId": 190
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc3\">\"status\"</span>:<span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">\"QTime\"</span>:<span class=\"fc4\">5</span>},\nÊ <span class=\"fc3\">\"schema\"</span>:{\nÊ   <span class=\"fc3\">\"name\"</span>:<span class=\"fc5\">\"example\"</span>,\nÊ   <span class=\"fc3\">\"version\"</span>:<span class=\"fc4\">1.5</span>,\nÊ   <span class=\"fc3\">\"uniqueKey\"</span>:<span class=\"fc5\">\"id\"</span>,\nÊ   <span class=\"fc3\">\"fieldTypes\"</span>:[{\nÊ       <span class=\"fc3\">\"name\"</span>:<span class=\"fc5\">\"alphaOnlySort\"</span>,\nÊ       <span class=\"fc3\">\"class\"</span>:<span class=\"fc5\">\"solr.TextField\"</span>,\nÊ       <span class=\"fc3\">\"sortMissingLast\"</span>:<span class=\"fc6\">true</span>,\nÊ       <span class=\"fc3\">\"omitNorms\"</span>:<span class=\"fc6\">true</span>,\nÊ       <span class=\"fc3\">\"analyzer\"</span>:{\nÊ         <span class=\"fc3\">\"tokenizer\"</span>:{\nÊ           <span class=\"fc3\">\"class\"</span>:<span class=\"fc5\">\"solr.KeywordTokenizerFactory\"</span>},\nÊ         <span class=\"fc3\">\"filters\"</span>:[{",
    "hierarchy": [
      "Retrieve the Entire Schema",
      "Retrieve Schema Examples"
    ],
    "pageId": 190
  },
  {
    "content": "Ê             <span class=\"fc1\">\"class\"</span>:<span class=\"fc2\">\"solr.LowerCaseFilterFactory\"</span>},\nÊ           {\nÊ             <span class=\"fc1\">\"class\"</span>:<span class=\"fc2\">\"solr.TrimFilterFactory\"</span>},\nÊ           {\nÊ             <span class=\"fc1\">\"class\"</span>:<span class=\"fc2\">\"solr.PatternReplaceFilterFactory\"</span>,\nÊ             <span class=\"fc1\">\"replace\"</span>:<span class=\"fc2\">\"all\"</span>,\nÊ             <span class=\"fc1\">\"replacement\"</span>:<span class=\"fc2\">\"\"</span>,\nÊ             <span class=\"fc1\">\"pattern\"</span>:<span class=\"fc2\">\"([^a-z])\"</span>}]}}],\nÊ   <span class=\"fc1\">\"fields\"</span>:[{\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"_version_\"</span>,\nÊ       <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"long\"</span>,\nÊ       <span class=\"fc1\">\"indexed\"</span>:<span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"stored\"</span>:<span class=\"fc3\">true</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"author\"</span>,\nÊ       <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"text_general\"</span>,\nÊ       <span class=\"fc1\">\"indexed\"</span>:<span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"stored\"</span>:<span class=\"fc3\">true</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"cat\"</span>,\nÊ       <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"string\"</span>,\nÊ       <span class=\"fc1\">\"multiValued\"</span>:<span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"indexed\"</span>:<span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"stored\"</span>:<span class=\"fc3\">true</span>}],\nÊ   <span class=\"fc1\">\"copyFields\"</span>:[{\nÊ       <span class=\"fc1\">\"source\"</span>:<span class=\"fc2\">\"author\"</span>,\nÊ       <span class=\"fc1\">\"dest\"</span>:<span class=\"fc2\">\"text\"</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"source\"</span>:<span class=\"fc2\">\"cat\"</span>,\nÊ       <span class=\"fc1\">\"dest\"</span>:<span class=\"fc2\">\"text\"</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"source\"</span>:<span class=\"fc2\">\"content\"</span>,\nÊ       <span class=\"fc1\">\"dest\"</span>:<span class=\"fc2\">\"text\"</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"source\"</span>:<span class=\"fc2\">\"author\"</span>,\nÊ       <span class=\"fc1\">\"dest\"</span>:<span class=\"fc2\">\"author_s\"</span>}]}}",
    "hierarchy": [
    ],
    "pageId": 191
  },
  {
    "content": "Get the entire schema in XML.",
    "hierarchy": [
    ],
    "pageId": 191
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema?wt=xml",
    "hierarchy": [
    ],
    "pageId": 191
  },
  {
    "content": "Ê <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>5<span class=\"fc0\"></int></span>",
    "hierarchy": [
    ],
    "pageId": 192
  },
  {
    "content": "Ê <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">></span></span>example<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"><float</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"version\"<span class=\"fc0\">></span></span>1.5<span class=\"fc0\"></float></span>\nÊ <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc0\">></span></span>id<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fieldTypes\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">></span></span>alphaOnlySort<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"class\"<span class=\"fc0\">></span></span>solr.TextField<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sortMissingLast\"<span class=\"fc0\">></span></span>true<span class=\"fc0\"></bool></span>\nÊ     <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"omitNorms\"<span class=\"fc0\">></span></span>true<span class=\"fc0\"></bool></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"analyzer\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"tokenizer\"<span class=\"fc0\">></span></span>\nÊ         <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"class\"<span class=\"fc0\">></span></span>solr.KeywordTokenizerFactory<span class=\"fc0\"></str></span>\nÊ       <span class=\"fc0\"></lst></span>\nÊ       <span class=\"fc0\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filters\"<span class=\"fc0\">></span></span>\nÊ         <span class=\"fc0\"><lst></span>\nÊ           <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"class\"<span class=\"fc0\">></span></span>solr.LowerCaseFilterFactory<span class=\"fc0\"></str></span>\nÊ         <span class=\"fc0\"></lst></span>\nÊ         <span class=\"fc0\"><lst></span>\nÊ           <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"class\"<span class=\"fc0\">></span></span>solr.TrimFilterFactory<span class=\"fc0\"></str></span>\nÊ         <span class=\"fc0\"></lst></span>\nÊ         <span class=\"fc0\"><lst></span>\nÊ           <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"class\"<span class=\"fc0\">></span></span>solr.PatternReplaceFilterFactory<span class=\"fc0\"></str></span>\nÊ           <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replace\"<span class=\"fc0\">></span></span>all<span class=\"fc0\"></str></span>\nÊ           <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replacement\"<span class=\"fc0\">/></span></span>\nÊ           <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pattern\"<span class=\"fc0\">></span></span>([^a-z])<span class=\"fc0\"></str></span>\nÊ         <span class=\"fc0\"></lst></span>\nÊ       <span class=\"fc0\"></arr></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\n...\nÊ   <span class=\"fc0\"><lst></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"source\"<span class=\"fc0\">></span></span>author<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dest\"<span class=\"fc0\">></span></span>author_s<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></arr></span>",
    "hierarchy": [
    ],
    "pageId": 192
  },
  {
    "content": "Get the entire schema in \"schema.xml\" format.",
    "hierarchy": [
    ],
    "pageId": 192
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema?wt=schema.xml",
    "hierarchy": [
    ],
    "pageId": 192
  },
  {
    "content": "Ê <span class=\"fc0\"><uniqueKey></span>id<span class=\"fc0\"></uniqueKey></span>\nÊ <span class=\"fc0\"><types></span>\nÊ   <span class=\"fc0\"><fieldType</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"alphaOnlySort\"</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TextField\"</span> <span class=\"fc2\">sortMissingLast</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">omitNorms</span>=<span class=\"fc3\">\"</span>",
    "hierarchy": [
    ],
    "pageId": 193
  },
  {
    "content": "Ê     <span class=\"fc0\"><analyzer></span>\nÊ       <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeywordTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ       <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ       <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TrimFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ       <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternReplaceFilterFactory\"</span> <span class=\"fc2\">replace</span>=<span class=\"fc3\">\"all\"</span> <span class=\"fc2\">replacement</span>=<span class=\"fc3\">\"\"</span> <span class=\"fc2\">pattern</span>=",
    "hierarchy": [
    ],
    "pageId": 193
  },
  {
    "content": "Ê     <span class=\"fc0\"></analyzer></span>\nÊ   <span class=\"fc0\"></fieldType></span>\n...\nÊ <span class=\"fc0\"><copyField</span> <span class=\"fc2\">source</span>=<span class=\"fc3\">\"url\"</span> <span class=\"fc2\">dest</span>=<span class=\"fc3\">\"text\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><copyField</span> <span class=\"fc2\">source</span>=<span class=\"fc3\">\"price\"</span> <span class=\"fc2\">dest</span>=<span class=\"fc3\">\"price_c\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><copyField</span> <span class=\"fc2\">source</span>=<span class=\"fc3\">\"author\"</span> <span class=\"fc2\">dest</span>=<span class=\"fc3\">\"author_s\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 193
  },
  {
    "content": "GET /collection/schema/fields",
    "hierarchy": [
      "List Fields"
    ],
    "pageId": 193
  },
  {
    "content": "GET /collection/schema/fields/fieldname",
    "hierarchy": [
      "List Fields"
    ],
    "pageId": 193
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "fieldname\nThe specific fieldname (if limiting the request to a single field).",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff1 fs2\">json</span> or <span class=\"ff1 fs2\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "fl\nComma- or space-separated list of one or more fields to return. If not specified, all fields will be returned\nby default.",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "includeDynamic\nIf <span class=\"ff1 fs2\">true</span>, and if the <span class=\"ff1 fs2\">fl</span> query parameter is specified or the <span class=\"ff1 fs2\">fieldname</span> path parameter is used, matching\ndynamic fields are included in the response and identified with the <span class=\"ff1 fs2\">dynamicBase</span> property.",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "If neither the <span class=\"ff1 fs2\">fl</span> query parameter nor the <span class=\"ff1 fs2\">fieldname</span> path parameter is specified, the <span class=\"ff1 fs2\">includeDynamic</span>",
    "hierarchy": [
      "List Fields",
      "List Fields Parameters"
    ],
    "pageId": 193
  },
  {
    "content": "query parameter is ignored.",
    "hierarchy": [
    ],
    "pageId": 194
  },
  {
    "content": "If <span class=\"ff2 fs1\">false</span>, the default, matching dynamic fields will not be returned.",
    "hierarchy": [
    ],
    "pageId": 194
  },
  {
    "content": "showDefaults\nIf <span class=\"ff2 fs1\">true</span>, all default field properties from each field's field type will be included in the response (e.g.,\ntokenized<span class=\"ff1 fs0\"> for </span>solr.TextField<span class=\"ff1 fs0\">). If </span>false<span class=\"ff1 fs0\">, the default, only explicitly specified field properties will be</span>\nincluded.",
    "hierarchy": [
    ],
    "pageId": 194
  },
  {
    "content": "The output will include each field and any defined configuration for each field. The defined configuration can\nvary for each field, but will minimally include the field <span class=\"ff2 fs1\">name</span>, the <span class=\"ff2 fs1\">type</span>, if it is <span class=\"ff2 fs1\">indexed</span> and if it is <span class=\"ff2 fs1\">stored</span>.",
    "hierarchy": [
      "List Fields Response"
    ],
    "pageId": 194
  },
  {
    "content": "If <span class=\"ff2 fs1\">multiValued</span> is defined as either true or false (most likely true), that will also be shown. See the section\nDefining Fields<span class=\"fc0\"> for more information about each parameter.</span>",
    "hierarchy": [
      "List Fields Response"
    ],
    "pageId": 194
  },
  {
    "content": "Get a list of all fields.",
    "hierarchy": [
      "List Fields Examples"
    ],
    "pageId": 194
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/fields",
    "hierarchy": [
      "List Fields Examples"
    ],
    "pageId": 194
  },
  {
    "content": "The sample output below has been truncated to only show a few fields.",
    "hierarchy": [
      "List Fields Examples"
    ],
    "pageId": 194
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"fields\"</span>: [\nÊ       {\nÊ           <span class=\"fc1\">\"indexed\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"_version_\"</span>,\nÊ           <span class=\"fc1\">\"stored\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"long\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"indexed\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"author\"</span>,\nÊ           <span class=\"fc1\">\"stored\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"text_general\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"indexed\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"multiValued\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"cat\"</span>,\nÊ           <span class=\"fc1\">\"stored\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"string\"</span>\nÊ       },",
    "hierarchy": [
    ],
    "pageId": 195
  },
  {
    "content": "Ê   ],\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc4\">1</span>,\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc4\">0</span>\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 195
  },
  {
    "content": "GET /collection/schema/dynamicfields",
    "hierarchy": [
      "List Dynamic Fields"
    ],
    "pageId": 195
  },
  {
    "content": "GET /collection/schema/dynamicfields/name",
    "hierarchy": [
      "List Dynamic Fields"
    ],
    "pageId": 195
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "List Dynamic Fields",
      "List Dynamic Field Parameters"
    ],
    "pageId": 195
  },
  {
    "content": "name\nThe name of the dynamic field rule (if limiting request to a single dynamic field rule).",
    "hierarchy": [
      "List Dynamic Fields",
      "List Dynamic Field Parameters"
    ],
    "pageId": 195
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "List Dynamic Fields",
      "List Dynamic Field Parameters"
    ],
    "pageId": 195
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff1 fs2\">json</span> or <span class=\"ff1 fs2\">xml</span>. If not specified, JSON will be returned by",
    "hierarchy": [
      "List Dynamic Fields",
      "List Dynamic Field Parameters"
    ],
    "pageId": 195
  },
  {
    "content": "default.",
    "hierarchy": [
    ],
    "pageId": 196
  },
  {
    "content": "showDefaults\nIf <span class=\"ff2 fs1\">true</span>, all default field properties from each dynamic field's field type will be included in the response\n(e.g., <span class=\"ff2 fs1\">tokenized</span> for <span class=\"ff2 fs1\">solr.TextField</span>). If <span class=\"ff2 fs1\">false</span>, the default, only explicitly specified field properties will be\nincluded.",
    "hierarchy": [
    ],
    "pageId": 196
  },
  {
    "content": "The output will include each dynamic field rule and the defined configuration for each rule. The defined\nconfiguration can vary for each rule, but will minimally include the dynamic field <span class=\"ff2 fs1\">name</span>, the <span class=\"ff2 fs1\">type</span>, if it is\nindexed<span class=\"ff1 fs0\"> and if it is </span>stored<span class=\"ff1 fs0\">. See the section <span class=\"link\">Dynamic Fields</span> for more information about each parameter.</span>",
    "hierarchy": [
      "List Dynamic Field Response"
    ],
    "pageId": 196
  },
  {
    "content": "Get a list of all dynamic field declarations:",
    "hierarchy": [
      "List Dynamic Field Examples"
    ],
    "pageId": 196
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/dynamicfields",
    "hierarchy": [
      "List Dynamic Field Examples"
    ],
    "pageId": 196
  },
  {
    "content": "The sample output below has been truncated.",
    "hierarchy": [
      "List Dynamic Field Examples"
    ],
    "pageId": 196
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"dynamicFields\"</span>: [\nÊ       {\nÊ           <span class=\"fc1\">\"indexed\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"*_coordinate\"</span>,\nÊ           <span class=\"fc1\">\"stored\"</span>: <span class=\"fc2\">false</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"tdouble\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"multiValued\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"ignored_*\"</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"ignored\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"random_*\"</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"random\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"indexed\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"multiValued\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"attr_*\"</span>,\nÊ           <span class=\"fc1\">\"stored\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"text_general\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"indexed\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"multiValued\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc3\">\"*_txt\"</span>,\nÊ           <span class=\"fc1\">\"stored\"</span>: <span class=\"fc2\">true</span>,\nÊ           <span class=\"fc1\">\"type\"</span>: <span class=\"fc3\">\"text_general\"</span>\nÊ       }",
    "hierarchy": [
    ],
    "pageId": 197
  },
  {
    "content": "Ê   ],\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc4\">1</span>,\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc4\">0</span>\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 197
  },
  {
    "content": "GET /collection/schema/fieldtypes",
    "hierarchy": [
      "List Field Types"
    ],
    "pageId": 197
  },
  {
    "content": "GET /collection/schema/fieldtypes/name",
    "hierarchy": [
      "List Field Types"
    ],
    "pageId": 197
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "List Field Types",
      "List Field Type Parameters"
    ],
    "pageId": 197
  },
  {
    "content": "name\nThe name of the field type (if limiting request to a single field type).",
    "hierarchy": [
    ],
    "pageId": 198
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
    ],
    "pageId": 198
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff1 fs0\">json</span> or <span class=\"ff1 fs0\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
    ],
    "pageId": 198
  },
  {
    "content": "showDefaults\nIf <span class=\"ff1 fs0\">true</span>, all default field properties from each dynamic field's field type will be included in the response\n(e.g., <span class=\"ff1 fs0\">tokenized</span> for <span class=\"ff1 fs0\">solr.TextField</span>). If <span class=\"ff1 fs0\">false</span>, the default, only explicitly specified field properties will be\nincluded.",
    "hierarchy": [
    ],
    "pageId": 198
  },
  {
    "content": "The output will include each field type and any defined configuration for the type. The defined configuration\ncan vary for each type, but will minimally include the field type <span class=\"ff1 fs0\">name</span> and the <span class=\"ff1 fs0\">class</span>. If query or index\nanalyzers, tokenizers, or filters are defined, those will also be shown with other defined parameters. See the\nsection <span class=\"link\">Solr Field Types</span> for more information about how to configure various types of fields.",
    "hierarchy": [
      "List Field Type Response"
    ],
    "pageId": 198
  },
  {
    "content": "Get a list of all field types.",
    "hierarchy": [
      "List Field Type Examples"
    ],
    "pageId": 198
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/fieldtypes",
    "hierarchy": [
      "List Field Type Examples"
    ],
    "pageId": 198
  },
  {
    "content": "The sample output below has been truncated to show a few different field types from different parts of the\nlist.",
    "hierarchy": [
      "List Field Type Examples"
    ],
    "pageId": 198
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"fieldTypes\"</span>: [\nÊ       {\nÊ           <span class=\"fc1\">\"analyzer\"</span>: {\nÊ               <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.TokenizerChain\"</span>,\nÊ               <span class=\"fc1\">\"filters\"</span>: [\nÊ                   {\nÊ                       <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.LowerCaseFilterFactory\"</span>\nÊ                   },\nÊ                   {\nÊ                       <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.TrimFilterFactory\"</span>\nÊ                   },\nÊ                   {\nÊ                       <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.PatternReplaceFilterFactory\"</span>,\nÊ                       <span class=\"fc1\">\"pattern\"</span>: <span class=\"fc2\">\"([^a-z])\"</span>,\nÊ                       <span class=\"fc1\">\"replace\"</span>: <span class=\"fc2\">\"all\"</span>,\nÊ                       <span class=\"fc1\">\"replacement\"</span>: <span class=\"fc2\">\"\"</span>\nÊ                   }\nÊ               ],\nÊ               <span class=\"fc1\">\"tokenizer\"</span>: {\nÊ                   <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.KeywordTokenizerFactory\"</span>\nÊ               }\nÊ           },\nÊ           <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.TextField\"</span>,\nÊ           <span class=\"fc1\">\"dynamicFields\"</span>: [],\nÊ           <span class=\"fc1\">\"fields\"</span>: [],\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"alphaOnlySort\"</span>,\nÊ           <span class=\"fc1\">\"omitNorms\"</span>: <span class=\"fc3\">true</span>,\nÊ           <span class=\"fc1\">\"sortMissingLast\"</span>: <span class=\"fc3\">true</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.FloatPointField\"</span>,\nÊ           <span class=\"fc1\">\"dynamicFields\"</span>: [\nÊ               <span class=\"fc2\">\"*_fs\"</span>,\nÊ               <span class=\"fc2\">\"*_f\"</span>\nÊ           ],\nÊ           <span class=\"fc1\">\"fields\"</span>: [\nÊ               <span class=\"fc2\">\"price\"</span>,\nÊ               <span class=\"fc2\">\"weight\"</span>\nÊ           ],\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"float\"</span>,\nÊ           <span class=\"fc1\">\"positionIncrementGap\"</span>: <span class=\"fc2\">\"0\"</span>,\nÊ       }]\n}",
    "hierarchy": [
    ],
    "pageId": 199
  },
  {
    "content": "GET /collection/schema/copyfields",
    "hierarchy": [
      "List Copy Fields"
    ],
    "pageId": 199
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "List Copy Field Parameters"
    ],
    "pageId": 200
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "List Copy Field Parameters"
    ],
    "pageId": 200
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff2 fs1\">json</span> or <span class=\"ff2 fs1\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
      "List Copy Field Parameters"
    ],
    "pageId": 200
  },
  {
    "content": "source.fl\nComma- or space-separated list of one or more copyField source fields to include in the response -\ncopyField directives with all other source fields will be excluded from the response. If not specified, all\ncopyField-s will be included in the response.",
    "hierarchy": [
      "List Copy Field Parameters"
    ],
    "pageId": 200
  },
  {
    "content": "dest.fl\nComma- or space-separated list of one or more copyField destination fields to include in the response.\ncopyField directives with all other <span class=\"ff2 fs1\">dest</span> fields will be excluded. If not specified, all copyField-s will be\nincluded in the response.",
    "hierarchy": [
      "List Copy Field Parameters"
    ],
    "pageId": 200
  },
  {
    "content": "The output will include the <span class=\"ff2 fs1\">source</span> and <span class=\"ff2 fs1\">dest</span> (destination) of each copy field rule defined in <span class=\"ff2 fs1\">schema.xml</span>. For\nmore information about copying fields, see the section <span class=\"link\">Copying Fields</span>.",
    "hierarchy": [
      "List Copy Field Response"
    ],
    "pageId": 200
  },
  {
    "content": "Get a list of all copyFields.",
    "hierarchy": [
      "List Copy Field Examples"
    ],
    "pageId": 200
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/copyfields",
    "hierarchy": [
      "List Copy Field Examples"
    ],
    "pageId": 200
  },
  {
    "content": "The sample output below has been truncated to the first few copy definitions.",
    "hierarchy": [
      "List Copy Field Examples"
    ],
    "pageId": 200
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"copyFields\"</span>: [\nÊ       {\nÊ           <span class=\"fc1\">\"dest\"</span>: <span class=\"fc2\">\"text\"</span>,\nÊ           <span class=\"fc1\">\"source\"</span>: <span class=\"fc2\">\"author\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"dest\"</span>: <span class=\"fc2\">\"text\"</span>,\nÊ           <span class=\"fc1\">\"source\"</span>: <span class=\"fc2\">\"cat\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"dest\"</span>: <span class=\"fc2\">\"text\"</span>,\nÊ           <span class=\"fc1\">\"source\"</span>: <span class=\"fc2\">\"content\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc1\">\"dest\"</span>: <span class=\"fc2\">\"text\"</span>,\nÊ           <span class=\"fc1\">\"source\"</span>: <span class=\"fc2\">\"content_type\"</span>\nÊ       },\nÊ   ],\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc3\">3</span>,\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc3\">0</span>\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 201
  },
  {
    "content": "GET /collection/schema/name",
    "hierarchy": [
      "Show Schema Name"
    ],
    "pageId": 201
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "Show Schema Name",
      "Show Schema Parameters"
    ],
    "pageId": 201
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "Show Schema Name",
      "Show Schema Parameters"
    ],
    "pageId": 201
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff1 fs2\">json</span> or <span class=\"ff1 fs2\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
      "Show Schema Name",
      "Show Schema Parameters"
    ],
    "pageId": 201
  },
  {
    "content": "The output will be simply the name given to the schema.",
    "hierarchy": [
      "Show Schema Name",
      "Show Schema Response"
    ],
    "pageId": 201
  },
  {
    "content": "Get the schema name.",
    "hierarchy": [
      "Show Schema Name",
      "Show Schema Examples"
    ],
    "pageId": 201
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/name",
    "hierarchy": [
    ],
    "pageId": 202
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">1</span>},\nÊ <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"example\"</span>}",
    "hierarchy": [
    ],
    "pageId": 202
  },
  {
    "content": "GET /collection/schema/version",
    "hierarchy": [
      "Show the Schema Version"
    ],
    "pageId": 202
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Parameters"
    ],
    "pageId": 202
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Parameters"
    ],
    "pageId": 202
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff1 fs2\">json</span> or <span class=\"ff1 fs2\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Parameters"
    ],
    "pageId": 202
  },
  {
    "content": "The output will simply be the schema version in use.",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Response"
    ],
    "pageId": 202
  },
  {
    "content": "Get the schema version",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Example"
    ],
    "pageId": 202
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/version",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Example"
    ],
    "pageId": 202
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">2</span>},\nÊ <span class=\"fc1\">\"version\"</span>:<span class=\"fc2\">1.5</span>}",
    "hierarchy": [
      "Show the Schema Version",
      "Show Schema Version Example"
    ],
    "pageId": 202
  },
  {
    "content": "GET /collection/schema/uniquekey",
    "hierarchy": [
      "List UniqueKey"
    ],
    "pageId": 202
  },
  {
    "content": "|<span class=\"ff2 fs1\">collection</span>\nThe collection (or core) name.",
    "hierarchy": [
      "List UniqueKey Parameters"
    ],
    "pageId": 203
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "List UniqueKey Parameters"
    ],
    "pageId": 203
  },
  {
    "content": "|<span class=\"ff2 fs1\">wt</span>\nDefines the format of the response. The options are <span class=\"ff2 fs1\">json</span> or <span class=\"ff2 fs1\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
      "List UniqueKey Parameters"
    ],
    "pageId": 203
  },
  {
    "content": "The output will include simply the field name that is defined as the uniqueKey for the index.",
    "hierarchy": [
      "List UniqueKey Response"
    ],
    "pageId": 203
  },
  {
    "content": "List the uniqueKey.",
    "hierarchy": [
      "List UniqueKey Example"
    ],
    "pageId": 203
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/uniquekey",
    "hierarchy": [
      "List UniqueKey Example"
    ],
    "pageId": 203
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>:<span class=\"fc3\">2</span>},\nÊ <span class=\"fc2\">\"uniqueKey\"</span>:<span class=\"fc4\">\"id\"</span>}",
    "hierarchy": [
      "List UniqueKey Example"
    ],
    "pageId": 203
  },
  {
    "content": "GET /collection/schema/similarity",
    "hierarchy": [
      "Show Global Similarity"
    ],
    "pageId": 203
  },
  {
    "content": "collection\nThe collection (or core) name.",
    "hierarchy": [
      "Show Global Similarity",
      "Show Global Similarity Parameters"
    ],
    "pageId": 203
  },
  {
    "content": "The query parameters can be added to the API request after a '?'.",
    "hierarchy": [
      "Show Global Similarity",
      "Show Global Similarity Parameters"
    ],
    "pageId": 203
  },
  {
    "content": "wt\nDefines the format of the response. The options are <span class=\"ff2 fs1\">json</span> or <span class=\"ff2 fs1\">xml</span>. If not specified, JSON will be returned by\ndefault.",
    "hierarchy": [
      "Show Global Similarity",
      "Show Global Similarity Parameters"
    ],
    "pageId": 203
  },
  {
    "content": "The output will include the class name of the global similarity defined (if any).",
    "hierarchy": [
      "Show Global Similary Response"
    ],
    "pageId": 204
  },
  {
    "content": "Get the similarity implementation.",
    "hierarchy": [
      "Show Global Similarity Example"
    ],
    "pageId": 204
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/schema/similarity",
    "hierarchy": [
      "Show Global Similarity Example"
    ],
    "pageId": 204
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>:<span class=\"fc3\">1</span>},\nÊ <span class=\"fc2\">\"similarity\"</span>:{\nÊ   <span class=\"fc2\">\"class\"</span>:<span class=\"fc4\">\"org.apache.solr.search.similarities.DefaultSimilarityFactory\"</span>}}",
    "hierarchy": [
      "Show Global Similarity Example"
    ],
    "pageId": 204
  },
  {
    "content": "The <span class=\"link\">Managed Resources</span> REST API provides a mechanism for any Solr plugin to expose resources that should\nsupport CRUD (Create, Read, Update, Delete) operations. Depending on what Field Types and Analyzers are\nconfigured in your Schema, additional <span class=\"code\">/schema/</span> REST API paths may exist. See the <span class=\"link\">Managed Resources</span>\nsection for more information and examples.",
    "hierarchy": [
      "Manage Resource Data"
    ],
    "pageId": 204
  },
  {
    "content": "At the highest level, <span class=\"code\">schema.xml</span> is structured as follows.",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "This example is not real XML, but it gives you an idea of the structure of the file.",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "Ê <span class=\"fc2\"><types></span>\nÊ <span class=\"fc2\"><fields></span>\nÊ <span class=\"fc2\"><uniqueKey></span>\nÊ <span class=\"fc2\"><copyField></span>",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "Obviously, most of the excitement is in <span class=\"code\">types</span> and <span class=\"code\">fields</span>, where the field types and the actual field\ndefinitions live.",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "These are supplemented by <span class=\"code\">copyFields</span>.",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "The <span class=\"code\">uniqueKey</span> must always be defined.",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "Note that the <span class=\"code\">types</span> and <span class=\"code\">fields</span> sections are optional, meaning you are free to mix <span class=\"code\">field</span>,\ndynamicField<span class=\"ff2 fs1\">, </span>copyField<span class=\"ff2 fs1\"> and </span>fieldType<span class=\"ff2 fs1\"> definitions on the top level. This allows for a more</span>\nlogical grouping of related tags in your schema.",
    "hierarchy": [
      "Putting the Pieces Together"
    ],
    "pageId": 205
  },
  {
    "content": "For general numeric needs, consider using one of the <span class=\"code\">IntPointField</span>, <span class=\"code\">LongPointField</span>, <span class=\"code\">FloatPointField</span>, or\nDoublePointField<span class=\"ff2 fs1\"> classes, depending on the specific values you expect. These \"Dimensional Point\" based</span>\nnumeric classes use specially encoded data structures to support efficient range queries regardless of the\nsize of the ranges used. Enable <span class=\"link\">DocValues</span> on these fields as needed for sorting and/or faceting.",
    "hierarchy": [
      "Putting the Pieces Together",
      "Choosing Appropriate Numeric Types"
    ],
    "pageId": 205
  },
  {
    "content": "Some Solr features may not yet work with \"Dimensional Points\", in which case you may want to consider the\nequivalent <span class=\"code\">TrieIntField</span>, <span class=\"code\">TrieLongField</span>, <span class=\"code\">TrieFloatField</span>, and <span class=\"code\">TrieDoubleField</span> classes. These field types\nare deprecated and are likely to be removed in a future major Solr release, but they can still be used if\nnecessary. Configure a <span class=\"code\">precisionStep=\"0\"</span> if you wish to minimize index size, but if you expect users to\nmake frequent range queries on numeric types, use the default <span class=\"code\">precisionStep</span> (by not specifying it) or\nspecify it as <span class=\"code\">precisionStep=\"8\"</span> (which is the default). This offers faster speed for range queries at the\nexpense of increasing index size.",
    "hierarchy": [
      "Putting the Pieces Together",
      "Choosing Appropriate Numeric Types"
    ],
    "pageId": 205
  },
  {
    "content": "Handling text properly will make your users happy by providing them with the best possible results for text\nsearches.",
    "hierarchy": [
      "Putting the Pieces Together",
      "Working With Text"
    ],
    "pageId": 205
  },
  {
    "content": "One technique is using a text field as a catch-all for keyword searching. Most users are not sophisticated\nabout their searches and the most common search is likely to be a simple keyword search. You can use\ncopyField<span class=\"ff2 fs1\"> to take a variety of fields and funnel them all into a single text field for keyword searches.</span>",
    "hierarchy": [
      "Putting the Pieces Together",
      "Working With Text"
    ],
    "pageId": 205
  },
  {
    "content": "In the <span class=\"ff2 fs1\">schema.xml</span> file for the “<span class=\"ff2 fs1\">techproducts</span>” example included with Solr, <span class=\"ff2 fs1\">copyField</span> declarations are used\nto dump the contents of <span class=\"ff2 fs1\">cat</span>, <span class=\"ff2 fs1\">name</span>, <span class=\"ff2 fs1\">manu</span>, <span class=\"ff2 fs1\">features</span>, and <span class=\"ff2 fs1\">includes</span> into a single field, <span class=\"ff2 fs1\">text</span>. In addition, it\ncould be a good idea to copy <span class=\"ff2 fs1\">ID</span> into <span class=\"ff2 fs1\">text</span> in case users wanted to search for a particular product by passing\nits product number to a keyword search.",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "Another technique is using <span class=\"ff2 fs1\">copyField</span> to use the same field in different ways. Suppose you have a field that\nis a list of authors, like this:",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "Schildt, Herbert; Wolpert, Lewis; Davies, P.",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "For searching by author, you could tokenize the field, convert to lower case, and strip out punctuation:",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "schildt / herbert / wolpert / lewis / davies / p",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "For sorting, just use an untokenized field, converted to lower case, with punctuation stripped:",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "schildt herbert wolpert lewis davies p",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "Finally, for faceting, use the primary author only via a <span class=\"ff2 fs1\">StrField</span>:",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "Schildt, Herbert",
    "hierarchy": [
    ],
    "pageId": 206
  },
  {
    "content": "DocValues are a way of recording field values internally that is more efficient for some purposes, such as\nsorting and faceting, than traditional indexing.",
    "hierarchy": [
      "DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "The standard way that Solr builds the index is with an <span class=\"code\">inverted index</span>. This style builds a list of terms found in\nall the documents in the index and next to each term is a list of documents that the term appears in (as well\nas how many times the term appears in that document). This makes search very fast - since users search by\nterms, having a ready list of term-to-document values makes the query process faster.",
    "hierarchy": [
      "DocValues",
      "Why DocValues?"
    ],
    "pageId": 207
  },
  {
    "content": "For other features that we now commonly associate with search, such as sorting, faceting, and highlighting,\nthis approach is not very efficient. The faceting engine, for example, must look up each term that appears in\neach document that will make up the result set and pull the document IDs in order to build the facet list. In\nSolr, this is maintained in memory, and can be slow to load (depending on the number of documents, terms,\netc.).",
    "hierarchy": [
      "DocValues",
      "Why DocValues?"
    ],
    "pageId": 207
  },
  {
    "content": "In Lucene 4.0, a new approach was introduced. DocValue fields are now column-oriented fields with a\ndocument-to-value mapping built at index time. This approach promises to relieve some of the memory\nrequirements of the fieldCache and make lookups for faceting, sorting, and grouping much faster.",
    "hierarchy": [
      "DocValues",
      "Why DocValues?"
    ],
    "pageId": 207
  },
  {
    "content": "To use docValues, you only need to enable it for a field that you will use it with. As with all schema design,\nyou need to define a field type and then define fields of that type with docValues enabled. All of these\nactions are done in <span class=\"ff4 fs3\">schema.xml</span>.",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "Enabling a field for docValues only requires adding <span class=\"ff4 fs3\">docValues=\"true\"</span> to the field (or field type) definition,\nas in this example from the <span class=\"ff4 fs3\">schema.xml</span> of Solr's <span class=\"ff4 fs3\">sample_techproducts_configs</span> <span class=\"link\">config set</span>:",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "If you have already indexed data into your Solr index, you will need to completely re-index\nyour content after changing your field definitions in <span class=\"ff4 fs3\">schema.xml</span> in order to successfully use\ndocValues.",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "DocValues are only available for specific field types. The types chosen determine the underlying Lucene\ndocValue type that will be used. The available Solr field types are:",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "StrField and <span class=\"ff4 fs3\">UUIDField</span>:",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "◦If the field is single-valued (i.e., multi-valued is false), Lucene will use the <span class=\"ff4 fs3\">SORTED</span> type.\n◦If the field is multi-valued, Lucene will use the <span class=\"ff4 fs3\">SORTED_SET</span> type.\nBoolField:",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "◦If the field is single-valued (i.e., multi-valued is false), Lucene will use the <span class=\"ff4 fs3\">SORTED</span> type.\n◦If the field is multi-valued, Lucene will use the <span class=\"ff4 fs3\">SORTED_BINARY</span> type.",
    "hierarchy": [
      "DocValues",
      "Enabling DocValues"
    ],
    "pageId": 207
  },
  {
    "content": "<span class=\"ls1\">Any <span class=\"ff2 fs1\">*PointField</span> Numeric or Date fields, <span class=\"ff2 fs1\">EnumFieldType</span>, and <span class=\"ff2 fs1\">CurrencyFieldType</span>:</span>",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "◦<span class=\"ff1 ls1\">If the field is single-valued (i.e., multi-valued is false), Lucene will use the <span class=\"ff2 fs1\">NUMERIC</span> type.</span>\n◦<span class=\"ff1 ls1\">If the field is multi-valued, Lucene will use the <span class=\"ff2 fs1\">SORTED_NUMERIC</span> type.</span>\n<span class=\"ls1\">Any of the deprecated <span class=\"ff2 fs1\">Trie*</span> Numeric or Date fields, <span class=\"ff2 fs1\">EnumField</span> and <span class=\"ff2 fs1\">CurrencyField</span>:</span>",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "◦<span class=\"ff1 ls1\">If the field is single-valued (i.e., multi-valued is false), Lucene will use the <span class=\"ff2 fs1\">NUMERIC</span> type.</span>\n◦<span class=\"ff1 ls1\">If the field is multi-valued, Lucene will use the <span class=\"ff2 fs1\">SORTED_SET</span> type.</span>",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "These Lucene types are related to how the <span class=\"link\">values are sorted and stored</span>.",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "There is an additional configuration option available, which is to modify the <span class=\"ff2 fs1\">docValuesFormat</span> <span class=\"link\">used by the</span>\nfield type<span class=\"fc0\">. The default implementation employs a mixture of loading some things into memory and keeping</span>\nsome on disk. In some cases, however, you may choose to specify an alternative <span class=\"link\">DocValuesFormat</span>\nimplementation<span class=\"fc0\">. For example, you could choose to keep everything in memory by specifying</span>\ndocValuesFormat=\"Memory\"<span class=\"ff1 fs0\"> on a field type:</span>",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "Please note that the <span class=\"ff2 fs1\">docValuesFormat</span> option may change in future releases.",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "Lucene index back-compatibility is only supported for the default codec. If you choose to\ncustomize the <span class=\"ff2 fs1\">docValuesFormat</span> in your <span class=\"ff2 fs1\">schema.xml</span>, upgrading to a future version of Solr\nmay require you to either switch back to the default codec and optimize your index to\nrewrite it into the default codec before upgrading, or re-build your entire index from\nscratch after upgrading.",
    "hierarchy": [
    ],
    "pageId": 208
  },
  {
    "content": "If <span class=\"ff2 fs1\">docValues=\"true\"</span> for a field, then DocValues will automatically be used any time the field is used for\nsorting<span class=\"fc0\">, </span>faceting<span class=\"fc0\"> or </span>function queries<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Using DocValues",
      "Sorting, Faceting & Functions"
    ],
    "pageId": 208
  },
  {
    "content": "Field values retrieved during search queries are typically returned from stored values. However, non-stored\ndocValues fields will be also returned along with other stored fields when all fields (or pattern matching\nglobs) are specified to be returned (e.g., “fl=*”) for search queries depending on the effective value of the\nuseDocValuesAsStored<span class=\"ff1 fs0\"> parameter for each field. For schema versions >= 1.6, the implicit default is</span>\nuseDocValuesAsStored=\"true\"<span class=\"ff1 fs0\">. See <span class=\"link\">Field Type Definitions and Properties</span> & <span class=\"link\">Defining Fields</span> for more details.</span>",
    "hierarchy": [
      "Using DocValues",
      "Retrieving DocValues During Search"
    ],
    "pageId": 208
  },
  {
    "content": "When <span class=\"ff2 fs1\">useDocValuesAsStored=\"false\"</span>, non-stored DocValues fields can still be explicitly requested by name\nin the <span class=\"link\">fl param</span>, but will not match glob patterns (<span class=\"ff2 fs1\">\"*\"</span>). Note that returning DocValues along with \"regular\"\nstored fields at query time has performance implications that stored fields may not because DocValues are\ncolumn-oriented and may therefore incur additional cost to retrieve for each returned document. Also note\nthat while returning non-stored fields from DocValues, the values of a multi-valued field are returned in",
    "hierarchy": [
      "Using DocValues",
      "Retrieving DocValues During Search"
    ],
    "pageId": 208
  },
  {
    "content": "sorted order (and not insertion order). If you require the multi-valued fields to be returned in the original\ninsertion order, then make your multi-valued field as stored (such a change requires re-indexing).",
    "hierarchy": [
    ],
    "pageId": 209
  },
  {
    "content": "In cases where the query is returning <span class=\"ff2\">only</span> docValues fields performance may improve since returning stored\nfields requires disk reads and decompression whereas returning docValues fields in the fl list only requires\nmemory access.",
    "hierarchy": [
    ],
    "pageId": 209
  },
  {
    "content": "When retrieving fields from their docValues form (using the <span class=\"link\">/export handler</span>, <span class=\"link\">streaming expressions</span> or if the\nfield is requested in the <span class=\"code\">fl</span> parameter), two important differences between regular stored fields and\ndocValues fields must be understood:",
    "hierarchy": [
    ],
    "pageId": 209
  },
  {
    "content": "1.Order is <span class=\"ff2\">not</span> preserved. For simply retrieving stored fields, the insertion order is the return order. For\ndocValues, it is the <span class=\"ff2\">sorted</span> order.",
    "hierarchy": [
    ],
    "pageId": 209
  },
  {
    "content": "2.For field types using <span class=\"code\">SORTED_SET</span>, multiple identical entries are collapsed into a single value. Thus if I\ninsert values 4, 5, 2, 4, 1, my return will be 1, 2, 4, 5.",
    "hierarchy": [
    ],
    "pageId": 209
  },
  {
    "content": "Schemaless Mode is a set of Solr features that, when used together, allow users to rapidly construct an\neffective schema by simply indexing sample data, without having to manually edit the schema.",
    "hierarchy": [
      "Schemaless Mode"
    ],
    "pageId": 210
  },
  {
    "content": "These Solr features, all controlled via <span class=\"code\">solrconfig.xml</span>, are:",
    "hierarchy": [
      "Schemaless Mode"
    ],
    "pageId": 210
  },
  {
    "content": "1.Managed schema: Schema modifications are made at runtime through Solr APIs, which requires the use\nof a <span class=\"code\">schemaFactory</span> that supports these changes. See the section <span class=\"link\">Schema Factory Definition in SolrConfig</span>\nfor more details.",
    "hierarchy": [
      "Schemaless Mode"
    ],
    "pageId": 210
  },
  {
    "content": "2.Field value class guessing: Previously unseen fields are run through a cascading set of value-based\nparsers, which guess the Java class of field values - parsers for Boolean, Integer, Long, Float, Double, and\nDate are currently available.",
    "hierarchy": [
      "Schemaless Mode"
    ],
    "pageId": 210
  },
  {
    "content": "3.Automatic schema field addition, based on field value class(es): Previously unseen fields are added to the\nschema, based on field value Java classes, which are mapped to schema field types - see <span class=\"link\">Solr Field Types</span>.",
    "hierarchy": [
      "Schemaless Mode"
    ],
    "pageId": 210
  },
  {
    "content": "The three features of schemaless mode are pre-configured in the <span class=\"code\">_default</span> <span class=\"link\">config set</span> in the Solr\ndistribution. To start an example instance of Solr using these configs, run the following command:",
    "hierarchy": [
      "Schemaless Mode",
      "Using the Schemaless Example"
    ],
    "pageId": 210
  },
  {
    "content": "bin/solr start -e schemaless",
    "hierarchy": [
      "Schemaless Mode",
      "Using the Schemaless Example"
    ],
    "pageId": 210
  },
  {
    "content": "This will launch a single Solr server, and automatically create a collection (named “<span class=\"code\">gettingstarted</span>”) that\ncontains only three fields in the initial schema: <span class=\"code\">id</span>, <span class=\"code\">_version_</span>, and <span class=\"code\">_text_</span>.",
    "hierarchy": [
      "Schemaless Mode",
      "Using the Schemaless Example"
    ],
    "pageId": 210
  },
  {
    "content": "You can use the <span class=\"code\">/schema/fields</span> <span class=\"link\">Schema API</span> to confirm this: <span class=\"code\">curl</span>\nhttp://localhost:8983/solr/gettingstarted/schema/fields<span class=\"ff2 fs1\"> will output:</span>",
    "hierarchy": [
      "Schemaless Mode",
      "Using the Schemaless Example"
    ],
    "pageId": 210
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">1</span>},\nÊ <span class=\"fc1\">\"fields\"</span>:[{\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"_text_\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"text_general\"</span>,\nÊ     <span class=\"fc1\">\"multiValued\"</span>:<span class=\"fc4\">true</span>,\nÊ     <span class=\"fc1\">\"indexed\"</span>:<span class=\"fc4\">true</span>,\nÊ     <span class=\"fc1\">\"stored\"</span>:<span class=\"fc4\">false</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"_version_\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"long\"</span>,\nÊ     <span class=\"fc1\">\"indexed\"</span>:<span class=\"fc4\">true</span>,\nÊ     <span class=\"fc1\">\"stored\"</span>:<span class=\"fc4\">true</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"id\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"string\"</span>,\nÊ     <span class=\"fc1\">\"multiValued\"</span>:<span class=\"fc4\">false</span>,\nÊ     <span class=\"fc1\">\"indexed\"</span>:<span class=\"fc4\">true</span>,\nÊ     <span class=\"fc1\">\"required\"</span>:<span class=\"fc4\">true</span>,\nÊ     <span class=\"fc1\">\"stored\"</span>:<span class=\"fc4\">true</span>,\nÊ     <span class=\"fc1\">\"uniqueKey\"</span>:<span class=\"fc4\">true</span>}]}",
    "hierarchy": [
    ],
    "pageId": 211
  },
  {
    "content": "As described above, there are three configuration elements that need to be in place to use Solr in\nschemaless mode. In the <span class=\"ff1 fs2\">_default</span> config set included with Solr these are already configured. If, however,\nyou would like to implement schemaless on your own, you should make the following changes.",
    "hierarchy": [
      "Configuring Schemaless Mode"
    ],
    "pageId": 211
  },
  {
    "content": "As described in the section <span class=\"fc6\">Schema Factory Definition in SolrConfig</span>, Managed Schema support is enabled by\ndefault, unless your configuration specifies that <span class=\"ff1 fs2\">ClassicIndexSchemaFactory</span> should be used.",
    "hierarchy": [
      "Configuring Schemaless Mode",
      "Enable Managed Schema"
    ],
    "pageId": 211
  },
  {
    "content": "You can configure the <span class=\"ff1 fs2\">ManagedIndexSchemaFactory</span> (and control the resource file used, or disable future\nmodifications) by adding an explicit <span class=\"ff1 fs2\"><schemaFactory/></span> like the one below, please see <span class=\"fc6\">Schema Factory</span>\nDefinition in SolrConfig<span class=\"fc0\"> for more details on the options available.</span>",
    "hierarchy": [
      "Configuring Schemaless Mode",
      "Enable Managed Schema"
    ],
    "pageId": 211
  },
  {
    "content": "Ê <span class=\"fc7\"><bool</span> <span class=\"fc8\">name</span>=<span class=\"fc3\">\"mutable\"<span class=\"fc7\">></span></span>true<span class=\"fc7\"></bool></span>\nÊ <span class=\"fc7\"><str</span> <span class=\"fc8\">name</span>=<span class=\"fc3\">\"managedSchemaResourceName\"<span class=\"fc7\">></span></span>managed-schema<span class=\"fc7\"></str></span>",
    "hierarchy": [
      "Configuring Schemaless Mode",
      "Enable Managed Schema"
    ],
    "pageId": 211
  },
  {
    "content": "In Solr, an <span class=\"fc6\">UpdateRequestProcessorChain</span> defines a chain of plugins that are applied to documents before or\nwhile they are indexed.",
    "hierarchy": [
      "Configuring Schemaless Mode",
      "Enable Field Class Guessing"
    ],
    "pageId": 211
  },
  {
    "content": "The field guessing aspect of Solr's schemaless mode uses a specially-defined UpdateRequestProcessorChain\nthat allows Solr to guess field types. You can also define the default field type classes to use.",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "To start, you should define it as follows (see the javadoc links below for update processor factory\ndocumentation):",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.UUIDUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uuid\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RemoveBlankFieldUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"remove-blank\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FieldNameMutatingUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"field-name-</span>",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pattern\"<span class=\"fc1\">></span></span>[^\\w-\\.]<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replacement\"<span class=\"fc1\">></span></span>_<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></updateProcessor></span>",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ParseLongFieldUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"parse-long\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ParseDoubleFieldUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"parse-double\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ParseDateFieldUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"parse-date\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"format\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm:ss.SSSZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm:ss,SSSZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm:ss.SSS<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm:ss,SSS<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm:ssZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm:ss<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mmZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd'T'HH:mm<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm:ss.SSSZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm:ss,SSSZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm:ss.SSS<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm:ss,SSS<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm:ssZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm:ss<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mmZ<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd HH:mm<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str></span>yyyy-MM-dd<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></arr></span>\nÊ <span class=\"fc1\"></updateProcessor></span>\nÊ <span class=\"fc1\"><updateProcessor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.AddSchemaFieldsUpdateProcessorFactory\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"add-schema-fields\"<span class=\"fc1\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"typeMapping\"<span class=\"fc1\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fieldType\"<span class=\"fc1\">></span></span>text_general<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê       <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dest\"<span class=\"fc1\">></span></span>*_str<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxChars\"<span class=\"fc1\">></span></span>256<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc4\"><!-- Use as default mapping instead of defaultFieldType --></span>\nÊ     <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"default\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></bool></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"typeMapping\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"valueClass\"<span class=\"fc1\">></span></span>java.lang.Boolean<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fieldType\"<span class=\"fc1\">></span></span>booleans<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 212
  },
  {
    "content": "Ê   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"typeMapping\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"valueClass\"<span class=\"fc1\">></span></span>java.util.Date<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fieldType\"<span class=\"fc1\">></span></span>pdates<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"typeMapping\"<span class=\"fc1\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "Ê     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"valueClass\"<span class=\"fc1\">></span></span>java.lang.Integer<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fieldType\"<span class=\"fc1\">></span></span>plongs<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"typeMapping\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"valueClass\"<span class=\"fc1\">></span></span>java.lang.Number<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fieldType\"<span class=\"fc1\">></span></span>pdoubles<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></updateProcessor></span>",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- The update.autoCreateFields property can be turned to false to disable schemaless mode --></span>\nÊ <span class=\"fc1\"><updateRequestProcessorChain</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"add-unknown-fields-to-the-schema\"</span> <span class=\"fc2\">default</span>=",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "Ê          <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"uuid,remove-blank,field-name-mutating,parse-boolean,parse-long,parse-</span>",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "Ê   <span class=\"fc1\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LogUpdateProcessorFactory\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DistributedUpdateProcessorFactory\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RunUpdateProcessorFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"></updateRequestProcessorChain></span>",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "There are many things defined in this chain. Let's step through a few of them.",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "First, we're using the FieldNameMutatingUpdateProcessorFactory to lower-case all field names. Note\nthat this and every following <span class=\"ff1 fs2\"><processor></span> element include a <span class=\"ff1 fs2\">name</span>. These names will be used in the final\nchain definition at the end of this example.\nNext we add several update request processors to parse different field types. Note the\nParseDateFieldUpdateProcessorFactory includes a long list of possible date formations that would be\nparsed into valid Solr dates. If you have a custom date, you could add it to this list (see the link to the\nJavadocs below to get information on how).\nOnce the fields have been parsed, we define the field types that will be assigned to those fields. You can\nmodify any of these that you would like to change.\nIn this definition, if the parsing step decides the incoming data in a field is a string, we will put this into a\nfield in Solr with the field type <span class=\"ff1 fs2\">text_general</span>. This field type by default allows Solr to query on this field.\nAfter we’ve added the <span class=\"ff1 fs2\">text_general</span> field, we have also defined a copy field rule that will copy all data\nfrom the new <span class=\"ff1 fs2\">text_general</span> field to a field with the same name suffixed with <span class=\"ff1 fs2\">_str</span>. This is done by Solr’s\ndynamic fields feature. By defining the target of the copy field rule as a dynamic field in this way, you\ncan control the field type used in your schema. The default selection allows Solr to facet, highlight, and\nsort on these fields.\nThis is another example of a mapping rule. In this case we define that when either of the <span class=\"ff1 fs2\">Long</span> or\nInteger<span class=\"code\"> field parsers identify a field, they should both map their fields to the </span>plongs<span class=\"code\"> field type.</span>\nFinally, we add a chain definition that calls the list of plugins. These plugins are each called by the names\nwe gave to them when we defined them. We can also add other processors to the chain, as shown here.",
    "hierarchy": [
    ],
    "pageId": 213
  },
  {
    "content": "Note we have also given the entire chain a <span class=\"ff2 fs1\">name</span> (\"add-unknown-fields-to-the-schema\"). We'll use this\nname in the next section to specify that our update request handler should use this chain definition.",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "This chain definition will make a number of copy field rules for string fields to be created\nfrom corresponding text fields. If your data causes you to end up with a lot of copy field\nrules, indexing may be slowed down noticeably, and your index size will be larger. To\ncontrol for these issues, it's recommended that you review the copy field rules that are\ncreated, and remove any which you do not need for faceting, sorting, highlighting, etc.",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "If you're interested in more information about the classes used in this chain, here are links to the Javadocs\nfor update processor factories mentioned above:",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">UUIDUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">RemoveBlankFieldUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">FieldNameMutatingUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">ParseBooleanFieldUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">ParseLongFieldUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">ParseDoubleFieldUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">ParseDateFieldUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "<span class=\"link\">AddSchemaFieldsUpdateProcessorFactory</span>",
    "hierarchy": [
    ],
    "pageId": 214
  },
  {
    "content": "Once the UpdateRequestProcessorChain has been defined, you must instruct your UpdateRequestHandlers\nto use it when working with index updates (i.e., adding, removing, replacing documents).",
    "hierarchy": [
      "Set the Default UpdateRequestProcessorChain"
    ],
    "pageId": 214
  },
  {
    "content": "There are two ways to do this. The update chain shown above has a <span class=\"ff2 fs1\">default=true</span> attribute which will use it\nfor any update handler.",
    "hierarchy": [
      "Set the Default UpdateRequestProcessorChain"
    ],
    "pageId": 214
  },
  {
    "content": "An alternative, more explicit way is to use <span class=\"link\">InitParams</span> to set the defaults on all <span class=\"ff2 fs1\">/update</span> request handlers:",
    "hierarchy": [
      "Set the Default UpdateRequestProcessorChain"
    ],
    "pageId": 214
  },
  {
    "content": "Ê <span class=\"fc4\"><lst</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"defaults\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"update.chain\"<span class=\"fc4\">></span></span>add-unknown-fields-to-the-schema<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"></lst></span>",
    "hierarchy": [
      "Set the Default UpdateRequestProcessorChain"
    ],
    "pageId": 214
  },
  {
    "content": "After all of these changes have been made, Solr should be restarted or the cores reloaded.",
    "hierarchy": [
      "Set the Default UpdateRequestProcessorChain"
    ],
    "pageId": 214
  },
  {
    "content": "Automatic field creation can be disabled with the <span class=\"ff2 fs1\">update.autoCreateFields</span> property. To do this, you can\nuse the <span class=\"link\">Config API</span> with a command such as:",
    "hierarchy": [
      "Disabling Automatic Field Guessing"
    ],
    "pageId": 214
  },
  {
    "content": "curl http://host:8983/solr/mycollection/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
    ],
    "pageId": 215
  },
  {
    "content": "Once the schemaless mode has been enabled (whether you configured it manually or are using the\n_default<span class=\"code\"> configset), documents that include fields that are not defined in your schema will be indexed,</span>\nusing the guessed field types which are automatically added to the schema.",
    "hierarchy": [
      "Examples of Indexed Documents"
    ],
    "pageId": 215
  },
  {
    "content": "For example, adding a CSV document will cause unknown fields to be added, with fieldTypes based on\nvalues:",
    "hierarchy": [
      "Examples of Indexed Documents"
    ],
    "pageId": 215
  },
  {
    "content": "curl \"http://localhost:8983/solr/gettingstarted/update?commit=true&wt=xml\" -H \"Content-\ntype:application/csv\" -d '\nid,Artist,Album,Released,Rating,FromDistributor,Sold\n44C,Old Shews,Mead for Walking,1988-08-13,0.01,14,0'",
    "hierarchy": [
      "Examples of Indexed Documents"
    ],
    "pageId": 215
  },
  {
    "content": "Output indicating success:",
    "hierarchy": [
      "Examples of Indexed Documents"
    ],
    "pageId": 215
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">><int</span></span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>106<span class=\"fc2\"></int></lst></span>",
    "hierarchy": [
      "Examples of Indexed Documents"
    ],
    "pageId": 215
  },
  {
    "content": "The fields now in the schema (output from <span class=\"ff1 fs2\">curl</span>\nhttp://localhost:8983/solr/gettingstarted/schema/fields<span class=\"code\"> ):</span>",
    "hierarchy": [
      "Examples of Indexed Documents"
    ],
    "pageId": 215
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">2</span>},\nÊ <span class=\"fc1\">\"fields\"</span>:[{\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Album\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"text_general\"</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Artist\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"text_general\"</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"FromDistributor\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"plongs\"</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Rating\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"pdoubles\"</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Released\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"pdates\"</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Sold\"</span>,\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"plongs\"</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"_root_\"</span>, ...},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"_text_\"</span>, ...},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"_version_\"</span>, ...},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"id\"</span>, ...}\n]}",
    "hierarchy": [
    ],
    "pageId": 216
  },
  {
    "content": "In addition string versions of the text fields are indexed, using copyFields to a <span class=\"ff1 fs1\">*_str</span> dynamic field: (output\nfrom <span class=\"ff1 fs1\">curl http://localhost:8983/solr/gettingstarted/schema/copyfields</span> ):",
    "hierarchy": [
    ],
    "pageId": 216
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">0</span>},\nÊ <span class=\"fc1\">\"copyFields\"</span>:[{\nÊ     <span class=\"fc1\">\"source\"</span>:<span class=\"fc3\">\"Artist\"</span>,\nÊ     <span class=\"fc1\">\"dest\"</span>:<span class=\"fc3\">\"Artist_str\"</span>,\nÊ     <span class=\"fc1\">\"maxChars\"</span>:<span class=\"fc2\">256</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"source\"</span>:<span class=\"fc3\">\"Album\"</span>,\nÊ     <span class=\"fc1\">\"dest\"</span>:<span class=\"fc3\">\"Album_str\"</span>,\nÊ     <span class=\"fc1\">\"maxChars\"</span>:<span class=\"fc2\">256</span>}]}",
    "hierarchy": [
    ],
    "pageId": 216
  },
  {
    "content": "Even if you want to use schemaless mode for most fields, you can still use the <span class=\"link\">Schema API</span>\nto pre-emptively create some fields, with explicit types, before you index documents that\nuse them.",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "Internally, the Schema API and the Schemaless Update Processors both use the same\nManaged Schema<span class=\"fc2\"> functionality.</span>",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "Also, if you do not need the <span class=\"ff4 fs2\">*_str</span> version of a text field, you can simply remove the\ncopyField<span class=\"code\"> definition from the auto-generated schema and it will not be re-added since the</span>\noriginal field is now defined.",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "Once a field has been added to the schema, its field type is fixed. As a consequence, adding documents with\nfield value(s) that conflict with the previously guessed field type will fail. For example, after adding the above\ndocument, the “<span class=\"ff4 fs2\">Sold</span>” field has the fieldType <span class=\"ff4 fs2\">plongs</span>, but the document below has a non-integral decimal\nvalue in this field:",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "curl \"http://localhost:8983/solr/gettingstarted/update?commit=true&wt=xml\" -H \"Content-\ntype:application/csv\" -d '\nid,Description,Sold\n19F,Cassettes by the pound,4.93'",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "This document will fail, as shown in this output:",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "Ê <span class=\"fc4\"><lst</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"responseHeader\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><int</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"status\"<span class=\"fc4\">></span></span>400<span class=\"fc4\"></int></span>\nÊ   <span class=\"fc4\"><int</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"QTime\"<span class=\"fc4\">></span></span>7<span class=\"fc4\"></int></span>\nÊ <span class=\"fc4\"></lst></span>\nÊ <span class=\"fc4\"><lst</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"error\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"msg\"<span class=\"fc4\">></span></span>ERROR: [doc=19F] Error adding field 'Sold'='4.93' msg=For input string:\n\"4.93\"<span class=\"fc4\"></str></span>\nÊ   <span class=\"fc4\"><int</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"code\"<span class=\"fc4\">></span></span>400<span class=\"fc4\"></int></span>\nÊ <span class=\"fc4\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 217
  },
  {
    "content": "The following sections describe how Solr breaks down and works with textual data. There are three main\nconcepts to understand: analyzers, tokenizers, and filters.",
    "hierarchy": [
      "Filters"
    ],
    "pageId": 218
  },
  {
    "content": "<span class=\"link\">Field analyzers<span class=\"fc1\"> are used both during ingestion, when a document is indexed, and at query time. An</span></span>\nanalyzer examines the text of fields and generates a token stream. Analyzers may be a single class or\nthey may be composed of a series of tokenizer and filter classes.",
    "hierarchy": [
      "Filters"
    ],
    "pageId": 218
  },
  {
    "content": "<span class=\"link\">Tokenizers<span class=\"fc1\"> break field data into lexical units, or <span class=\"code\">tokens</span>.</span></span>",
    "hierarchy": [
      "Filters"
    ],
    "pageId": 218
  },
  {
    "content": "<span class=\"link\">Filters<span class=\"fc1\"> examine a stream of tokens and keep them, transform or discard them, or create new ones.</span></span>\nTokenizers and filters may be combined to form pipelines, or <span class=\"code\">chains</span>, where the output of one is input to\nthe next. Such a sequence of tokenizers and filters is called an <span class=\"code\">analyzer</span> and the resulting output of an\nanalyzer is used to match query results or build indices.",
    "hierarchy": [
      "Filters"
    ],
    "pageId": 218
  },
  {
    "content": "Although the analysis process is used for both indexing and querying, the same analysis process need not\nbe used for both operations. For indexing, you often want to simplify, or normalize, words. For example,\nsetting all letters to lowercase, eliminating punctuation and accents, mapping words to their stems, and so\non. Doing so can increase recall because, for example, \"ram\", \"Ram\" and \"RAM\" would all match a query for\n\"ram\". To increase query-time precision, a filter could be employed to narrow the matches by, for example,\nignoring all-cap acronyms if you're interested in male sheep, but not Random Access Memory.",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters"
    ],
    "pageId": 219
  },
  {
    "content": "The tokens output by the analysis process define the values, or <span class=\"code\">terms</span>, of that field and are used either to\nbuild an index of those terms when a new document is added, or to identify which documents contain the\nterms you are querying for.",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters"
    ],
    "pageId": 219
  },
  {
    "content": "These sections will show you how to configure field analyzers and also serves as a reference for the details\nof configuring each of the available tokenizer and filter classes. It also serves as a guide so that you can\nconfigure your own analysis classes if you have special needs that cannot be met with the included filters or\ntokenizers.",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">Analyzers<span class=\"fc1\">: Detailed conceptual information about Solr analyzers.</span></span>",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">Running Your Analyzer<span class=\"fc1\">: Detailed information about testing and running your Solr analyzer.</span></span>",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">About Tokenizers<span class=\"fc1\">: Detailed conceptual information about Solr tokenizers.</span></span>",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">Tokenizers<span class=\"fc1\">: Information about configuring tokenizers, and about the tokenizer factory classes included</span></span>\nin this distribution of Solr.",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">About Filters<span class=\"fc1\">: Detailed conceptual information about Solr filters.</span></span>",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">Filter Descriptions<span class=\"fc1\">: Information about configuring filters, and about the filter factory classes included in</span></span>\nthis distribution of Solr.",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">CharFilterFactories<span class=\"fc1\">: Information about filters for pre-processing input characters.</span></span>",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "<span class=\"link\">Language Analysis<span class=\"fc1\">: Information about tokenizers and filters for character set conversion or for use with</span></span>\nspecific languages.",
    "hierarchy": [
      "Using Analyzers, Tokenizers, and Filters",
      "For More Information"
    ],
    "pageId": 219
  },
  {
    "content": "An analyzer examines the text of fields and generates a token stream.",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "Analyzers are specified as a child of the <span class=\"code\"><fieldType></span> element in the <span class=\"code\">schema.xml</span> configuration file (in the\nsame <span class=\"code\">conf/</span> directory as <span class=\"code\">solrconfig.xml</span>).",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "In normal usage, only fields of type <span class=\"code\">solr.TextField</span> or <span class=\"code\">solr.SortableTextField</span> will specify an analyzer.\nThe simplest way to configure an analyzer is with a single <span class=\"code\"><analyzer></span> element whose class attribute is a fully\nqualified Java class name. The named class must derive from <span class=\"code\">org.apache.lucene.analysis.Analyzer</span>. For\nexample:",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "In this case a single class, <span class=\"code\">WhitespaceAnalyzer</span>, is responsible for analyzing the content of the named text\nfield and emitting the corresponding tokens. For simple cases, such as plain English prose, a single analyzer\nclass like this may be sufficient. But it's often necessary to do more complex analysis of the field content.",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "Even the most complex analysis requirements can usually be decomposed into a series of discrete, relatively\nsimple processing steps. As you will soon discover, the Solr distribution comes with a large selection of\ntokenizers and filters that covers most scenarios you are likely to encounter. Setting up an analyzer chain is\nvery straightforward; you specify a simple <span class=\"code\"><analyzer></span> element (no class attribute) with child elements that\nname factory classes for the tokenizer and filters to use, in the order you want them to run.",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StopFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.EnglishPorterFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "Note that classes in the <span class=\"code\">org.apache.solr.analysis</span> package may be referred to here with the shorthand\nsolr.<span class=\"ff2 fs1\"> prefix.</span>",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "In this case, no Analyzer class was specified on the <span class=\"code\"><analyzer></span> element. Rather, a sequence of more\nspecialized classes are wired together and collectively act as the Analyzer for the field. The text of the field is\npassed to the first item in the list (<span class=\"code\">solr.StandardTokenizerFactory</span>), and the tokens that emerge from the\nlast one (<span class=\"code\">solr.EnglishPorterFilterFactory</span>) are the terms that are used for indexing or querying any\nfields that use the \"nametext\" <span class=\"code\">fieldType</span>.",
    "hierarchy": [
      "Analyzers"
    ],
    "pageId": 220
  },
  {
    "content": "The output of an Analyzer affects the <span class=\"ff2\">terms</span> indexed in a given field (and the terms used\nwhen parsing queries against those fields) but it has no impact on the <span class=\"ff2\">stored</span> value for the\nfields. For example: an analyzer might split \"Brown Cow\" into two indexed terms \"brown\"\nand \"cow\", but the stored value will still be a single String: \"Brown Cow\"",
    "hierarchy": [
    ],
    "pageId": 221
  },
  {
    "content": "Analysis takes place in two contexts. At index time, when a field is being created, the token stream that\nresults from analysis is added to an index and defines the set of terms (including positions, sizes, and so on)\nfor the field. At query time, the values being searched for are analyzed and the terms that result are\nmatched against those that are stored in the field's index.",
    "hierarchy": [
      "Analysis Phases"
    ],
    "pageId": 221
  },
  {
    "content": "In many cases, the same analysis should be applied to both phases. This is desirable when you want to\nquery for exact string matches, possibly with case-insensitivity, for example. In other cases, you may want to\napply slightly different analysis steps during indexing than those used at query time.",
    "hierarchy": [
      "Analysis Phases"
    ],
    "pageId": 221
  },
  {
    "content": "If you provide a simple <span class=\"ff5 fs3\"><analyzer></span> definition for a field type, as in the examples above, then it will be used\nfor both indexing and queries. If you want distinct analyzers for each phase, you may include two\n<analyzer><span class=\"code\"> definitions distinguished with a type attribute. For example:</span>",
    "hierarchy": [
      "Analysis Phases"
    ],
    "pageId": 221
  },
  {
    "content": "Ê <span class=\"fc4\"><analyzer</span> <span class=\"fc5\">type</span>=<span class=\"fc6\">\"index\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.StandardTokenizerFactory\"<span class=\"fc4\">/></span></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.LowerCaseFilterFactory\"<span class=\"fc4\">/></span></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.KeepWordFilterFactory\"</span> <span class=\"fc5\">words</span>=<span class=\"fc6\">\"keepwords.txt\"<span class=\"fc4\">/></span></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.SynonymFilterFactory\"</span> <span class=\"fc5\">synonyms</span>=<span class=\"fc6\">\"syns.txt\"<span class=\"fc4\">/></span></span>\nÊ <span class=\"fc4\"></analyzer></span>\nÊ <span class=\"fc4\"><analyzer</span> <span class=\"fc5\">type</span>=<span class=\"fc6\">\"query\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.StandardTokenizerFactory\"<span class=\"fc4\">/></span></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.LowerCaseFilterFactory\"<span class=\"fc4\">/></span></span>\nÊ <span class=\"fc4\"></analyzer></span>",
    "hierarchy": [
      "Analysis Phases"
    ],
    "pageId": 221
  },
  {
    "content": "In this theoretical example, at index time the text is tokenized, the tokens are set to lowercase, any that are\nnot listed in <span class=\"ff5 fs3\">keepwords.txt</span> are discarded and those that remain are mapped to alternate values as defined\nby the synonym rules in the file <span class=\"ff5 fs3\">syns.txt</span>. This essentially builds an index from a restricted set of possible\nvalues and then normalizes them to values that may not even occur in the original text.",
    "hierarchy": [
      "Analysis Phases"
    ],
    "pageId": 221
  },
  {
    "content": "At query time, the only normalization that happens is to convert the query terms to lowercase. The filtering\nand mapping steps that occur at index time are not applied to the query terms. Queries must then, in this\nexample, be very precise, using only the normalized terms that were stored at index time.",
    "hierarchy": [
      "Analysis Phases"
    ],
    "pageId": 221
  },
  {
    "content": "In some types of queries (i.e., Prefix, Wildcard, Regex, etc.) the input provided by the user is not natural\nlanguage intended for Analysis. Things like Synonyms or Stop word filtering do not work in a logical way in\nthese types of Queries.",
    "hierarchy": [
      "Analysis Phases",
      "Analysis for Multi-Term Expansion"
    ],
    "pageId": 221
  },
  {
    "content": "The analysis factories that <span class=\"ff2\">can</span> work in these types of queries (such as Lowercasing, or Normalizing\nFactories) are known as <span class=\"code\">MultiTermAwareComponents</span>. When Solr needs to perform analysis for a query that\nresults in Multi-Term expansion, only the <span class=\"code\">MultiTermAwareComponents</span> used in the <span class=\"code\">query</span> analyzer are used,\nFactory that is not Multi-Term aware will be skipped.",
    "hierarchy": [
    ],
    "pageId": 222
  },
  {
    "content": "For most use cases, this provides the best possible behavior, but if you wish for absolute control over the\nanalysis performed on these types of queries, you may explicitly define a <span class=\"code\">multiterm</span> analyzer to use, such as\nin the following example:",
    "hierarchy": [
    ],
    "pageId": 222
  },
  {
    "content": "Ê <span class=\"fc1\"><analyzer</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"index\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeepWordFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"keepwords.txt\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SynonymFilterFactory\"</span> <span class=\"fc2\">synonyms</span>=<span class=\"fc3\">\"syns.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"></analyzer></span>\nÊ <span class=\"fc1\"><analyzer</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"query\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"></analyzer></span>\nÊ <span class=\"fc4\"><!-- No analysis at all when doing queries that involved Multi-Term expansion --></span>\nÊ <span class=\"fc1\"><analyzer</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"multiterm\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeywordTokenizerFactory\"</span> <span class=\"fc1\">/></span>\nÊ <span class=\"fc1\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 222
  },
  {
    "content": "The job of a <span class=\"link\">tokenizer</span> is to break up a stream of text into tokens, where each token is (usually) a sub-\nsequence of the characters in the text. An analyzer is aware of the field it is configured for, but a tokenizer is\nnot. Tokenizers read from a character stream (a Reader) and produce a sequence of Token objects (a\nTokenStream).",
    "hierarchy": [
      "About Tokenizers"
    ],
    "pageId": 223
  },
  {
    "content": "Characters in the input stream may be discarded, such as whitespace or other delimiters. They may also be\nadded to or replaced, such as mapping aliases or abbreviations to normalized forms. A token contains\nvarious metadata in addition to its text value, such as the location at which the token occurs in the field.\nBecause a tokenizer may produce tokens that diverge from the input text, you should not assume that the\ntext of the token is the same text that occurs in the field, or that its length is the same as the original text.\nIt's also possible for more than one token to have the same position or refer to the same offset in the\noriginal text. Keep this in mind if you use token metadata for things like highlighting search results in the\nfield text.",
    "hierarchy": [
      "About Tokenizers"
    ],
    "pageId": 223
  },
  {
    "content": "Ê <span class=\"fc3\"><analyzer></span>\nÊ   <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"></analyzer></span>",
    "hierarchy": [
      "About Tokenizers"
    ],
    "pageId": 223
  },
  {
    "content": "The class named in the tokenizer element is not the actual tokenizer, but rather a class that implements the\nTokenizerFactory<span class=\"ff2 fs1\"> API. This factory class will be called upon to create new tokenizer instances as needed.</span>\nObjects created by the factory must derive from <span class=\"code\">Tokenizer</span>, which indicates that they produce sequences of\ntokens. If the tokenizer produces tokens that are usable as is, it may be the only component of the analyzer.\nOtherwise, the tokenizer's output tokens will serve as input to the first filter stage in the pipeline.",
    "hierarchy": [
      "About Tokenizers"
    ],
    "pageId": 223
  },
  {
    "content": "A <span class=\"code\">TypeTokenFilterFactory</span> is available that creates a <span class=\"code\">TypeTokenFilter</span> that filters tokens based on their\nTypeAttribute, which is set in <span class=\"code\">factory.getStopTypes</span>.",
    "hierarchy": [
      "About Tokenizers"
    ],
    "pageId": 223
  },
  {
    "content": "For a complete list of the available TokenFilters, see the section <span class=\"link\">Tokenizers</span>.",
    "hierarchy": [
      "About Tokenizers"
    ],
    "pageId": 223
  },
  {
    "content": "There are several pairs of CharFilters and TokenFilters that have related (i.e., <span class=\"code\">MappingCharFilter</span> and\nASCIIFoldingFilter<span class=\"ff2 fs1\">) or nearly identical (i.e., </span>PatternReplaceCharFilterFactory<span class=\"ff2 fs1\"> and</span>\nPatternReplaceFilterFactory<span class=\"ff2 fs1\">) functionality and it may not always be obvious which is the best choice.</span>",
    "hierarchy": [
      "About Tokenizers",
      "When to Use a CharFilter vs. a TokenFilter"
    ],
    "pageId": 223
  },
  {
    "content": "The decision about which to use depends largely on which Tokenizer you are using, and whether you need\nto preprocess the stream of characters.",
    "hierarchy": [
      "About Tokenizers",
      "When to Use a CharFilter vs. a TokenFilter"
    ],
    "pageId": 223
  },
  {
    "content": "For example, suppose you have a tokenizer such as <span class=\"code\">StandardTokenizer</span> and although you are pretty happy\nwith how it works overall, you want to customize how some specific characters behave. You could modify the\nrules and re-build your own tokenizer with JFlex, but it might be easier to simply map some of the characters\nbefore tokenization with a <span class=\"code\">CharFilter</span>.",
    "hierarchy": [
      "About Tokenizers",
      "When to Use a CharFilter vs. a TokenFilter"
    ],
    "pageId": 223
  },
  {
    "content": "Like <span class=\"link\">tokenizers</span>, <span class=\"link\">filters</span> consume input and produce a stream of tokens. Filters also derive from\norg.apache.lucene.analysis.TokenStream<span class=\"ff2 fs1\">. Unlike tokenizers, a filter's input is another TokenStream. The</span>\njob of a filter is usually easier than that of a tokenizer since in most cases a filter looks at each token in the\nstream sequentially and decides whether to pass it along, replace it or discard it.",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "A filter may also do more complex analysis by looking ahead to consider multiple tokens at once, although\nthis is less common. One hypothetical use for such a filter might be to normalize state names that would be\ntokenized as two words. For example, the single token \"california\" would be replaced with \"CA\", while the\ntoken pair \"rhode\" followed by \"island\" would become the single token \"RI\".",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "Because filters consume one <span class=\"code\">TokenStream</span> and produce a new <span class=\"code\">TokenStream</span>, they can be chained one after\nanother indefinitely. Each filter in the chain in turn processes the tokens produced by its predecessor. The\norder in which you specify the filters is therefore significant. Typically, the most general filtering is done first,\nand later filtering stages are more specialized.",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "Ê <span class=\"fc3\"><analyzer></span>\nÊ   <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ   <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ   <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LowerCaseFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ   <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.EnglishPorterFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"></analyzer></span>",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "This example starts with Solr's standard tokenizer, which breaks the field’s text into tokens. Those tokens\nthen pass through Solr’s standard filter, which removes dots from acronyms, and performs a few other\ncommon operations. All the tokens are then set to lowercase, which will facilitate case-insensitive matching\nat query time.",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "The last filter in the above example is a stemmer filter that uses the Porter stemming algorithm. A stemmer\nis basically a set of mapping rules that maps the various forms of a word back to the base, or <span class=\"ff4\">stem</span>, word\nfrom which they derive. For example, in English the words \"hugs\", \"hugging\" and \"hugged\" are all forms of\nthe stem word \"hug\". The stemmer will replace all of these terms with \"hug\", which is what will be indexed.\nThis means that a query for \"hug\" will match the term \"hugged\", but not \"huge\".",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "Conversely, applying a stemmer to your query terms will allow queries containing non stem terms, like\n\"hugging\", to match documents with different variations of the same stem word, such as \"hugged\". This\nworks because both the indexer and the query will map to the same stem (\"hug\").",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "Word stemming is, obviously, very language specific. Solr includes several language-specific stemmers\ncreated by the <span class=\"link\">Snowball</span> generator that are based on the Porter stemming algorithm. The generic Snowball\nPorter Stemmer Filter can be used to configure any of these language stemmers. Solr also includes a\nconvenience wrapper for the English Snowball stemmer. There are also several purpose-built stemmers for\nnon-English languages. These stemmers are described in <span class=\"link\">Language Analysis</span>.",
    "hierarchy": [
      "About Filters"
    ],
    "pageId": 224
  },
  {
    "content": "Tokenizers are responsible for breaking field data into lexical units, or <span class=\"code\">tokens</span>.",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "You configure the tokenizer for a text field type in <span class=\"ff4 fs2\">schema.xml</span> with a <span class=\"ff4 fs2\"><tokenizer></span> element, as a child of\n<analyzer><span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer</span> <span class=\"fc3\">type</span>=<span class=\"fc4\">\"index\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "The class attribute names a factory class that will instantiate a tokenizer object when needed. Tokenizer\nfactory classes implement the <span class=\"ff4 fs2\">org.apache.solr.analysis.TokenizerFactory</span>. A TokenizerFactory's\ncreate()<span class=\"ff2 fs1\"> method accepts a Reader and returns a TokenStream. When Solr creates the tokenizer it passes a</span>\nReader object that provides the content of the text field.",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "Arguments may be passed to tokenizer factories by setting attributes on the <span class=\"ff4 fs2\"><tokenizer></span> element.",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer</span> <span class=\"fc3\">type</span>=<span class=\"fc4\">\"query\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.PatternTokenizerFactory\"</span> <span class=\"fc3\">pattern</span>=<span class=\"fc4\">\"; \"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "The following sections describe the tokenizer factory classes included in this release of Solr.",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "For user tips about Solr's tokenizers, see <span class=\"link\">http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters</span>.",
    "hierarchy": [
      "Tokenizers"
    ],
    "pageId": 225
  },
  {
    "content": "This tokenizer splits the text field into tokens, treating whitespace and punctuation as delimiters. Delimiter\ncharacters are discarded, with the following exceptions:",
    "hierarchy": [
      "Tokenizers",
      "Standard Tokenizer"
    ],
    "pageId": 225
  },
  {
    "content": "Periods (dots) that are not followed by whitespace are kept as part of the token, including Internet\ndomain names.",
    "hierarchy": [
      "Tokenizers",
      "Standard Tokenizer"
    ],
    "pageId": 225
  },
  {
    "content": "The \"@\" character is among the set of token-splitting punctuation, so email addresses are <span class=\"ff1\">not</span> preserved\nas single tokens.",
    "hierarchy": [
      "Tokenizers",
      "Standard Tokenizer"
    ],
    "pageId": 225
  },
  {
    "content": "Note that words are split at hyphens.",
    "hierarchy": [
      "Tokenizers",
      "Standard Tokenizer"
    ],
    "pageId": 225
  },
  {
    "content": "The Standard Tokenizer supports <span class=\"link\">Unicode standard annex UAX#29</span> word boundaries with the following\ntoken types: <span class=\"ff4 fs2\"><ALPHANUM></span>, <span class=\"ff4 fs2\"><NUM></span>, <span class=\"ff4 fs2\"><SOUTHEAST_ASIAN></span>, <span class=\"ff4 fs2\"><IDEOGRAPHIC></span>, and <span class=\"ff4 fs2\"><HIRAGANA></span>.",
    "hierarchy": [
      "Tokenizers",
      "Standard Tokenizer"
    ],
    "pageId": 225
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"ff4 fs2\">solr.StandardTokenizerFactory</span></span>",
    "hierarchy": [
      "Tokenizers",
      "Standard Tokenizer"
    ],
    "pageId": 225
  },
  {
    "content": "maxTokenLength<span class=\"ff2 fs1\">: (integer, default 255) Solr ignores tokens that exceed the number of characters specified</span>\nby <span class=\"ff1 fs0\">maxTokenLength</span>.",
    "hierarchy": [
    ],
    "pageId": 226
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 226
  },
  {
    "content": "In:<span class=\"ff2\"> \"Please, email <span class=\"link\">john.doe@foo.com</span> by 03-09, re: m37-xq.\"</span>",
    "hierarchy": [
    ],
    "pageId": 226
  },
  {
    "content": "Out:<span class=\"ff2\"> \"Please\", \"email\", \"john.doe\", \"foo.com\", \"by\", \"03\", \"09\", \"re\", \"m37\", \"xq\"</span>",
    "hierarchy": [
    ],
    "pageId": 226
  },
  {
    "content": "The Classic Tokenizer preserves the same behavior as the Standard Tokenizer of Solr versions 3.1 and\nprevious. It does not use the <span class=\"link\">Unicode standard annex UAX#29</span> word boundary rules that the Standard\nTokenizer uses. This tokenizer splits the text field into tokens, treating whitespace and punctuation as\ndelimiters. Delimiter characters are discarded, with the following exceptions:",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Periods (dots) that are not followed by whitespace are kept as part of the token.",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Words are split at hyphens, unless there is a number in the word, in which case the token is not split and\nthe numbers and hyphen(s) are preserved.",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Recognizes Internet domain names and email addresses and preserves them as a single token.",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"ff1 fs0\">solr.ClassicTokenizerFactory</span></span>",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "maxTokenLength<span class=\"ff2 fs1\">: (integer, default 255) Solr ignores tokens that exceed the number of characters specified</span>\nby <span class=\"ff1 fs0\">maxTokenLength</span>.",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ClassicTokenizerFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "In:<span class=\"ff2\"> \"Please, email <span class=\"link\">john.doe@foo.com</span> by 03-09, re: m37-xq.\"</span>",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Out:<span class=\"ff2\"> \"Please\", \"email\", \"<span class=\"link\">john.doe@foo.com</span>\", \"by\", \"03-09\", \"re\", \"m37-xq\"</span>",
    "hierarchy": [
      "Classic Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "This tokenizer treats the entire text field as a single token.",
    "hierarchy": [
      "Keyword Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"ff1 fs0\">solr.KeywordTokenizerFactory</span></span>",
    "hierarchy": [
      "Keyword Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Keyword Tokenizer"
    ],
    "pageId": 226
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeywordTokenizerFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 227
  },
  {
    "content": "In:<span class=\"code\"> \"Please, email <span class=\"link\">john.doe@foo.com</span> by 03-09, re: m37-xq.\"</span>",
    "hierarchy": [
    ],
    "pageId": 227
  },
  {
    "content": "Out:<span class=\"code\"> \"Please, email <span class=\"link\">john.doe@foo.com</span> by 03-09, re: m37-xq.\"</span>",
    "hierarchy": [
    ],
    "pageId": 227
  },
  {
    "content": "This tokenizer creates tokens from strings of contiguous letters, discarding all non-letter characters.",
    "hierarchy": [
      "Letter Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.LetterTokenizerFactory</span></span>",
    "hierarchy": [
      "Letter Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Letter Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LetterTokenizerFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Letter Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "In:<span class=\"code\"> \"I can't.\"</span>",
    "hierarchy": [
      "Letter Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Out:<span class=\"code\"> \"I\", \"can\", \"t\"</span>",
    "hierarchy": [
      "Letter Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Tokenizes the input stream by delimiting at non-letters and then converting all letters to lowercase.\nWhitespace and non-letters are discarded.",
    "hierarchy": [
      "Lower Case Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.LowerCaseTokenizerFactory</span></span>",
    "hierarchy": [
      "Lower Case Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Lower Case Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseTokenizerFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Lower Case Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "In:<span class=\"code\"> \"I just *LOVE* my iPhone!\"</span>",
    "hierarchy": [
      "Lower Case Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Out:<span class=\"code\"> \"i\", \"just\", \"love\", \"my\", \"iphone\"</span>",
    "hierarchy": [
      "Lower Case Tokenizer"
    ],
    "pageId": 227
  },
  {
    "content": "Reads the field text and generates n-gram tokens of sizes in the given range.",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.NGramTokenizerFactory</span></span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "minGramSize<span class=\"ff2 fs1\">: (integer, default 1) The minimum n-gram size, must be > 0.</span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "maxGramSize<span class=\"ff2 fs1\">: (integer, default 2) The maximum n-gram size, must be >= </span>minGramSize<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Default behavior. Note that this tokenizer operates over the whole field. It does not break the field at\nwhitespace. As a result, the space character is included in the encoding.",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.NGramTokenizerFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "In:<span class=\"ff2\"> \"hey man\"</span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Out:<span class=\"ff2\"> \"h\", \"e\", \"y\", \" \", \"m\", \"a\", \"n\", \"he\", \"ey\", \"y \", \" m\", \"ma\", \"an\"</span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "With an n-gram size range of 4 to 5:",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.NGramTokenizerFactory\"</span> <span class=\"fc3\">minGramSize</span>=<span class=\"fc4\">\"4\"</span> <span class=\"fc3\">maxGramSize</span>=<span class=\"fc4\">\"5\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "In:<span class=\"ff2\"> \"bicycle\"</span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Out:<span class=\"ff2\"> \"bicy\", \"bicyc\", \"icyc\", \"icycl\", \"cycl\", \"cycle\", \"ycle\"</span>",
    "hierarchy": [
      "N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Reads the field text and generates edge n-gram tokens of sizes in the given range.",
    "hierarchy": [
      "Edge N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.EdgeNGramTokenizerFactory</span></span>",
    "hierarchy": [
      "Edge N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "minGramSize<span class=\"ff2 fs1\">: (integer, default is 1) The minimum n-gram size, must be > 0.</span>",
    "hierarchy": [
      "Edge N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "maxGramSize<span class=\"ff2 fs1\">: (integer, default is 1) The maximum n-gram size, must be >= </span>minGramSize<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Edge N-Gram Tokenizer"
    ],
    "pageId": 228
  },
  {
    "content": "Default behavior (min and max default to 1):",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.EdgeNGramTokenizerFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "In:<span class=\"ff1\"> \"babaloo\"</span>",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "Out:<span class=\"ff1\"> \"b\"</span>",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "Edge n-gram range of 2 to 5",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.EdgeNGramTokenizerFactory\"</span> <span class=\"fc2\">minGramSize</span>=<span class=\"fc3\">\"2\"</span> <span class=\"fc2\">maxGramSize</span>=<span class=\"fc3\">\"5\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "In:<span class=\"ff1\"> \"babaloo\"</span>",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "Out:<span class=\"ff1\">\"ba\", \"bab\", \"baba\", \"babal\"</span>",
    "hierarchy": [
    ],
    "pageId": 229
  },
  {
    "content": "This tokenizer processes multilingual text and tokenizes it appropriately based on its script attribute.",
    "hierarchy": [
      "ICU Tokenizer"
    ],
    "pageId": 229
  },
  {
    "content": "You can customize this tokenizer's behavior by specifying <span class=\"link\">per-script rule files</span>. To add per-script rules, add a\nrulefiles<span class=\"ff1 fs0\"> argument, which should contain a comma-separated list of </span>code:rulefile<span class=\"ff1 fs0\"> pairs in the following</span>\nformat: four-letter ISO 15924 script code, followed by a colon, then a resource path. For example, to specify\nrules for Latin (script code \"Latn\") and Cyrillic (script code \"Cyrl\"), you would enter\nLatn:my.Latin.rules.rbbi,Cyrl:my.Cyrillic.rules.rbbi<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "ICU Tokenizer"
    ],
    "pageId": 229
  },
  {
    "content": "The default configuration for <span class=\"ff2 fs2\">solr.ICUTokenizerFactory</span> provides UAX#29 word break rules tokenization\n(like <span class=\"ff2 fs2\">solr.StandardTokenizer</span>), but also includes custom tailorings for Hebrew (specializing handling of\ndouble and single quotation marks), for syllable tokenization for Khmer, Lao, and Myanmar, and dictionary-\nbased word segmentation for CJK characters.",
    "hierarchy": [
      "ICU Tokenizer"
    ],
    "pageId": 229
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs2\">solr.ICUTokenizerFactory</span></span>",
    "hierarchy": [
      "ICU Tokenizer"
    ],
    "pageId": 229
  },
  {
    "content": "rulefile<span class=\"ff1 fs0\">: a comma-separated list of </span>code:rulefile<span class=\"ff1 fs0\"> pairs in the following format: four-letter ISO 15924</span>\nscript code, followed by a colon, then a resource path.",
    "hierarchy": [
      "ICU Tokenizer"
    ],
    "pageId": 229
  },
  {
    "content": "Ê <span class=\"fc2\"><!-- no customization --></span>\nÊ <span class=\"fc0\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ICUTokenizerFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 230
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ICUTokenizerFactory\"</span>\nÊ            <span class=\"fc3\">rulefiles</span>=<span class=\"fc4\">\"Latn:my.Latin.rules.rbbi,Cyrl:my.Cyrillic.rules.rbbi\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 230
  },
  {
    "content": "To use this tokenizer, you must add additional .jars to Solr's classpath (as described in the\nsection <span class=\"fc6\">Lib Directives in SolrConfig</span>). See the <span class=\"ff1 fs2\">solr/contrib/analysis-extras/README.txt</span>\nfor information on which jars you need to add to your <span class=\"ff1 fs2\">SOLR_HOME/lib</span>.",
    "hierarchy": [
    ],
    "pageId": 230
  },
  {
    "content": "This tokenizer creates synonyms from file path hierarchies.",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.PathHierarchyTokenizerFactory</span></span>",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "delimiter<span class=\"code\">: (character, no default) You can specify the file path delimiter and replace it with a delimiter you</span>\nprovide. This can be useful for working with backslash delimiters.",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "replace<span class=\"code\">: (character, no default) Specifies the delimiter character Solr uses in the tokenized output.</span>",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.PathHierarchyTokenizerFactory\"</span> <span class=\"fc3\">delimiter</span>=<span class=\"fc4\">\"\\\"</span> <span class=\"fc3\">replace</span>=<span class=\"fc4\">\"/\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "In:<span class=\"code\"> \"c:\\usr\\local\\apache\"</span>",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "Out:<span class=\"code\"> \"c:\", \"c:/usr\", \"c:/usr/local\", \"c:/usr/local/apache\"</span>",
    "hierarchy": [
      "Path Hierarchy Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "This tokenizer uses a Java regular expression to break the input text stream into tokens. The expression\nprovided by the pattern argument can be interpreted either as a delimiter that separates tokens, or to\nmatch patterns that should be extracted from the text as tokens.",
    "hierarchy": [
      "Regular Expression Pattern Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "See <span class=\"fc6\">the Javadocs for </span><span class=\"ff1 fs2\">java.util.regex.Pattern</span> for more information on Java regular expression syntax.",
    "hierarchy": [
      "Regular Expression Pattern Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.PatternTokenizerFactory</span></span>",
    "hierarchy": [
      "Regular Expression Pattern Tokenizer"
    ],
    "pageId": 230
  },
  {
    "content": "pattern<span class=\"code\">: (Required) The regular expression, as defined by in </span>java.util.regex.Pattern<span class=\"code\">.</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "group<span class=\"code\">: (Optional, default -1) Specifies which regex group to extract as the token(s). The value -1 means the</span>\nregex should be treated as a delimiter that separates tokens. Non-negative group numbers (>= 0) indicate\nthat character sequences matching that regex group should be converted to tokens. Group zero refers to\nthe entire regex, groups greater than zero refer to parenthesized sub-expressions of the regex, counted\nfrom left to right.",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "A comma separated list. Tokens are separated by a sequence of zero or more spaces, a comma, and zero or\nmore spaces.",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternTokenizerFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"\\s*,\\s*\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "In:<span class=\"code\"> \"fee,fie, foe , fum, foo\"</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Out:<span class=\"code\"> \"fee\", \"fie\", \"foe\", \"fum\", \"foo\"</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Extract simple, capitalized words. A sequence of at least one capital letter followed by zero or more letters of\neither case is extracted as a token.",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternTokenizerFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"[A-Z][A-Za-z]*\"</span> <span class=\"fc2\">group</span>=<span class=\"fc3\">\"0\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "In:<span class=\"code\"> \"Hello. My name is Inigo Montoya. You killed my father. Prepare to die.\"</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Out:<span class=\"code\"> \"Hello\", \"My\", \"Inigo\", \"Montoya\", \"You\", \"Prepare\"</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Extract part numbers which are preceded by \"SKU\", \"Part\" or \"Part Number\", case sensitive, with an\noptional semi-colon separator. Part numbers must be all numeric digits, with an optional hyphen. Regex\ncapture groups are numbered by counting left parenthesis from left to right. Group 3 is the subexpression\n\"[0-9-]+\", which matches one or more digits or hyphens.",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternTokenizerFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"(SKU|Part(\\sNumber)?):?\\s(\\[0-9-\\]+)\"</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "In:<span class=\"code\"> \"SKU: 1234, Part Number 5678, Part: 126-987\"</span>",
    "hierarchy": [
    ],
    "pageId": 231
  },
  {
    "content": "Out:<span class=\"ff2\"> \"1234\", \"5678\", \"126-987\"</span>",
    "hierarchy": [
    ],
    "pageId": 232
  },
  {
    "content": "This tokenizer is similar to the <span class=\"code\">PatternTokenizerFactory</span> described above, but uses Lucene <span class=\"code\">RegExp</span> pattern\nmatching to construct distinct tokens for the input stream. The syntax is more limited than\nPatternTokenizerFactory<span class=\"ff2 fs0\">, but the tokenization is quite a bit faster.</span>",
    "hierarchy": [
      "Simplified Regular Expression Pattern Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.SimplePatternTokenizerFactory</span></span>",
    "hierarchy": [
      "Simplified Regular Expression Pattern Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "pattern<span class=\"ff2 fs0\">: (Required) The regular expression, as defined by in the </span>RegExp<span class=\"ff2 fs0\"> javadocs, identifying the characters</span>\nto include in tokens. The matching is greedy such that the longest token matching at a given point is\ncreated. Empty tokens are never created.",
    "hierarchy": [
      "Simplified Regular Expression Pattern Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "maxDeterminizedStates<span class=\"ff2 fs0\">: (Optional, default 10000) the limit on total state count for the determined</span>\nautomaton computed from the regexp.",
    "hierarchy": [
      "Simplified Regular Expression Pattern Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "To match tokens delimited by simple whitespace characters:",
    "hierarchy": [
      "Simplified Regular Expression Pattern Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.SimplePatternTokenizerFactory\"</span> <span class=\"fc3\">pattern</span>=<span class=\"fc4\">\"[^ \\t\\r\\n]+\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Simplified Regular Expression Pattern Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "This tokenizer is similar to the <span class=\"code\">SimplePatternTokenizerFactory</span> described above, but uses Lucene <span class=\"code\">RegExp</span>\npattern matching to identify sequences of characters that should be used to split tokens. The syntax is more\nlimited than <span class=\"code\">PatternTokenizerFactory</span>, but the tokenization is quite a bit faster.",
    "hierarchy": [
      "Simplified Regular Expression Pattern Splitting Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.SimplePatternSplitTokenizerFactory</span></span>",
    "hierarchy": [
      "Simplified Regular Expression Pattern Splitting Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "pattern<span class=\"ff2 fs0\">: (Required) The regular expression, as defined by in the </span>RegExp<span class=\"ff2 fs0\"> javadocs, identifying the characters</span>\nthat should split tokens. The matching is greedy such that the longest token separator matching at a given\npoint is matched. Empty tokens are never created.",
    "hierarchy": [
      "Simplified Regular Expression Pattern Splitting Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "maxDeterminizedStates<span class=\"ff2 fs0\">: (Optional, default 10000) the limit on total state count for the determined</span>\nautomaton computed from the regexp.",
    "hierarchy": [
      "Simplified Regular Expression Pattern Splitting Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "To match tokens delimited by simple whitespace characters:",
    "hierarchy": [
      "Simplified Regular Expression Pattern Splitting Tokenizer"
    ],
    "pageId": 232
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SimplePatternSplitTokenizerFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"[ \\t\\r\\n]+\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 233
  },
  {
    "content": "This tokenizer splits the text field into tokens, treating whitespace and punctuation as delimiters. Delimiter\ncharacters are discarded, with the following exceptions:",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Periods (dots) that are not followed by whitespace are kept as part of the token.",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Words are split at hyphens, unless there is a number in the word, in which case the token is not split and\nthe numbers and hyphen(s) are preserved.",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Recognizes and preserves as single tokens the following:",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "◦Internet domain names containing top-level domains validated against the white list in the <span class=\"link\">IANA Root</span>\nZone Database<span class=\"fc1\"> when the tokenizer was generated</span>\n◦email addresses\n◦file://<span class=\"code\">, </span>http(s)://<span class=\"code\">, and </span>ftp://<span class=\"code\"> URLs</span>\n◦IPv4 and IPv6 addresses",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "The UAX29 URL Email Tokenizer supports <span class=\"link\">Unicode standard annex UAX#29</span> word boundaries with the\nfollowing token types: <span class=\"ff1 fs2\"><ALPHANUM></span>, <span class=\"ff1 fs2\"><NUM></span>, <span class=\"ff1 fs2\"><URL></span>, <span class=\"ff1 fs2\"><EMAIL></span>, <span class=\"ff1 fs2\"><SOUTHEAST_ASIAN></span>, <span class=\"ff1 fs2\"><IDEOGRAPHIC></span>, and\n<HIRAGANA><span class=\"code\">.</span>",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.UAX29URLEmailTokenizerFactory</span></span>",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "maxTokenLength<span class=\"code\">: (integer, default 255) Solr ignores tokens that exceed the number of characters specified</span>\nby <span class=\"ff1 fs2\">maxTokenLength</span>.",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.UAX29URLEmailTokenizerFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "In:<span class=\"code\"> \"Visit <span class=\"link\">http://accarol.com/contact.htm?from=external&a=10</span> or e-mail <span class=\"link\">bob.cratchet@accarol.com</span>\"</span>",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Out:<span class=\"code\"> \"Visit\", \"http://accarol.com/contact.htm?from=external&a=10\", \"or\", \"e\", \"mail\",</span>\n\"<span class=\"link\">bob.cratchet@accarol.com</span>\"",
    "hierarchy": [
      "UAX29 URL Email Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Simple tokenizer that splits the text stream on whitespace and returns sequences of non-whitespace\ncharacters as tokens. Note that any punctuation <span class=\"ff5\">will</span> be included in the tokens.",
    "hierarchy": [
      "White Space Tokenizer"
    ],
    "pageId": 233
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.WhitespaceTokenizerFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 234
  },
  {
    "content": "rule\nSpecifies how to define whitespace for the purpose of tokenization. Valid values:",
    "hierarchy": [
    ],
    "pageId": 234
  },
  {
    "content": "java: (Default) Uses <span class=\"link\">Character.isWhitespace(int)</span>\n•unicode: Uses Unicode's WHITESPACE property",
    "hierarchy": [
    ],
    "pageId": 234
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.WhitespaceTokenizerFactory\"</span> <span class=\"fc3\">rule</span>=<span class=\"fc4\">\"java\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
    ],
    "pageId": 234
  },
  {
    "content": "In:<span class=\"ff2\"> \"To be, or what?\"</span>",
    "hierarchy": [
    ],
    "pageId": 234
  },
  {
    "content": "Out:<span class=\"ff2\"> \"To\", \"be,\", \"or\", \"what?\"</span>",
    "hierarchy": [
    ],
    "pageId": 234
  },
  {
    "content": "See <span class=\"link\">OpenNLP Integration</span> for information about using the OpenNLP Tokenizer, along with information about\navailable OpenNLP token filters.",
    "hierarchy": [
      "OpenNLP Tokenizer and OpenNLP Filters"
    ],
    "pageId": 234
  },
  {
    "content": "Filters examine a stream of tokens and keep them, transform them or discard them, depending on the filter\ntype being used.",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "You configure each filter with a <span class=\"code\"><filter></span> element in <span class=\"code\">schema.xml</span> as a child of <span class=\"code\"><analyzer></span>, following the\n<tokenizer><span class=\"ff2 fs1\"> element. Filter definitions should follow a tokenizer or another filter definition because they</span>\ntake a <span class=\"code\">TokenStream</span> as input. For example:",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer</span> <span class=\"fc3\">type</span>=<span class=\"fc4\">\"index\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>...\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "The class attribute names a factory class that will instantiate a filter object as needed. Filter factory classes\nmust implement the <span class=\"code\">org.apache.solr.analysis.TokenFilterFactory</span> interface. Like tokenizers, filters are\nalso instances of TokenStream and thus are producers of tokens. Unlike tokenizers, filters also consume\ntokens from a TokenStream. This allows you to mix and match filters, in any order you prefer, downstream\nof a tokenizer.",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "Arguments may be passed to tokenizer factories to modify their behavior by setting attributes on the\n<filter><span class=\"ff2 fs1\"> element. For example:</span>",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer</span> <span class=\"fc3\">type</span>=<span class=\"fc4\">\"query\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.PatternTokenizerFactory\"</span> <span class=\"fc3\">pattern</span>=<span class=\"fc4\">\"; \"</span> <span class=\"fc2\">/></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LengthFilterFactory\"</span> <span class=\"fc3\">min</span>=<span class=\"fc4\">\"2\"</span> <span class=\"fc3\">max</span>=<span class=\"fc4\">\"7\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "The following sections describe the filter factories that are included in this release of Solr.",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "For user tips about Solr's filters, see <span class=\"link\">http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters</span>.",
    "hierarchy": [
      "Filter Descriptions"
    ],
    "pageId": 235
  },
  {
    "content": "This filter converts alphabetic, numeric, and symbolic Unicode characters which are not in the Basic Latin\nUnicode block (the first 127 ASCII characters) to their ASCII equivalents, if one exists. This filter converts\ncharacters from the following Unicode blocks:",
    "hierarchy": [
      "Filter Descriptions",
      "ASCII Folding Filter"
    ],
    "pageId": 235
  },
  {
    "content": "<span class=\"link\">C1 Controls and Latin-1 Supplement<span class=\"fc1\"> (PDF)</span></span>",
    "hierarchy": [
      "Filter Descriptions",
      "ASCII Folding Filter"
    ],
    "pageId": 235
  },
  {
    "content": "<span class=\"link\">Latin Extended-A<span class=\"fc1\"> (PDF)</span></span>",
    "hierarchy": [
      "Filter Descriptions",
      "ASCII Folding Filter"
    ],
    "pageId": 235
  },
  {
    "content": "<span class=\"link\">Latin Extended-B<span class=\"fc1\"> (PDF)</span></span>",
    "hierarchy": [
      "Filter Descriptions",
      "ASCII Folding Filter"
    ],
    "pageId": 235
  },
  {
    "content": "<span class=\"link\">Latin Extended Additional<span class=\"fc1\"> (PDF)</span></span>",
    "hierarchy": [
      "Filter Descriptions",
      "ASCII Folding Filter"
    ],
    "pageId": 235
  },
  {
    "content": "<span class=\"link\">Latin Extended-C<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Latin Extended-D<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">IPA Extensions<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Phonetic Extensions<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Phonetic Extensions Supplement<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">General Punctuation<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Superscripts and Subscripts<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Enclosed Alphanumerics<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Dingbats<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Supplemental Punctuation<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Alphabetic Presentation Forms<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "<span class=\"link\">Halfwidth and Fullwidth Forms<span class=\"fc0\"> (PDF)</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.ASCIIFoldingFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "preserveOriginal\n(boolean, default false) If true, the original token is preserved: \"thé\" -> \"the\", \"thé\"",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.WhitespaceTokenizer\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ASCIIFoldingFilterFactory\"</span> <span class=\"fc3\">preserveOriginal</span>=<span class=\"fc4\">\"false\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "In:<span class=\"ff1\"> \"á\" (Unicode character 00E1)</span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "Out:<span class=\"ff1\"> \"a\" (ASCII character 97)</span>",
    "hierarchy": [
    ],
    "pageId": 236
  },
  {
    "content": "Implements the Beider-Morse Phonetic Matching (BMPM) algorithm, which allows identification of similar\nnames, even if they are spelled differently or in different languages. More information about how this works\nis available in the section on <span class=\"link\">Phonetic Matching</span>.",
    "hierarchy": [
      "Beider-Morse Filter"
    ],
    "pageId": 236
  },
  {
    "content": "BeiderMorseFilter changed its behavior in Solr 5.0 due to an update to version 3.04 of the\nBMPM algorithm. Older version of Solr implemented BMPM version 3.00 (see\nhttp://stevemorse.org/phoneticinfo.htm<span class=\"fc0\">). Any index built using this filter with earlier</span>\nversions of Solr will need to be rebuilt.",
    "hierarchy": [
      "Beider-Morse Filter"
    ],
    "pageId": 236
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.BeiderMorseFilterFactory</span></span>",
    "hierarchy": [
      "Beider-Morse Filter"
    ],
    "pageId": 236
  },
  {
    "content": "nameType\nTypes of names. Valid values are GENERIC, ASHKENAZI, or SEPHARDIC. If not processing Ashkenazi or\nSephardic names, use GENERIC.",
    "hierarchy": [
    ],
    "pageId": 237
  },
  {
    "content": "ruleType\nTypes of rules to apply. Valid values are APPROX or EXACT.",
    "hierarchy": [
    ],
    "pageId": 237
  },
  {
    "content": "concat\nDefines if multiple possible matches should be combined with a pipe (\"|\").",
    "hierarchy": [
    ],
    "pageId": 237
  },
  {
    "content": "languageSet\nThe language set to use. The value \"auto\" will allow the Filter to identify the language, or a comma-\nseparated list can be supplied.",
    "hierarchy": [
    ],
    "pageId": 237
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.BeiderMorseFilterFactory\"</span> <span class=\"fc2\">nameType</span>=<span class=\"fc3\">\"GENERIC\"</span> <span class=\"fc2\">ruleType</span>=<span class=\"fc3\">\"APPROX\"</span> <span class=\"fc2\">concat</span>=<span class=\"fc3\">\"</span>",
    "hierarchy": [
    ],
    "pageId": 237
  },
  {
    "content": "Ê <span class=\"fc1\"></filter></span>",
    "hierarchy": [
    ],
    "pageId": 237
  },
  {
    "content": "This filter takes the output of the <span class=\"link\">Classic Tokenizer</span> and strips periods from acronyms and \"'s\" from\npossessives.",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"ff1 fs0\">solr.ClassicFilterFactory</span></span>",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ClassicTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ClassicFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "In:<span class=\"ff2\"> \"I.B.M. cat's can’t\"</span>",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"I.B.M\", \"cat's\", \"can’t\"</span>",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "Out:<span class=\"ff2\"> \"IBM\", \"cat\", \"can't\"</span>",
    "hierarchy": [
      "Classic Filter"
    ],
    "pageId": 237
  },
  {
    "content": "This filter creates word shingles by combining common tokens such as stop words with regular tokens. This\nis useful for creating phrase queries containing common words, such as \"the cat.\" Solr normally ignores",
    "hierarchy": [
      "Common Grams Filter"
    ],
    "pageId": 237
  },
  {
    "content": "stop words in queried phrases, so searching for \"the cat\" would return all matches for the word \"cat.\"",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.CommonGramsFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "words\n(a common word file in .txt format) Provide the name of a common word file, such as <span class=\"code\">stopwords.txt</span>.",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "format\n(optional) If the stopwords list has been formatted for Snowball, you can specify <span class=\"code\">format=\"snowball\"</span> so\nSolr can read the stopwords file.",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "ignoreCase\n(boolean) If true, the filter ignores the case of words when comparing them to the common word file. The\ndefault is false.",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CommonGramsFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"stopwords.txt\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "In:<span class=\"ff1\"> \"the Cat\"</span>",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"the\", \"Cat\"</span>",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "Out:<span class=\"ff1\"> \"the_cat\"</span>",
    "hierarchy": [
    ],
    "pageId": 238
  },
  {
    "content": "Collation allows sorting of text in a language-sensitive way. It is usually used for sorting, but can also be\nused with advanced searches. We've covered this in much more detail in the section on <span class=\"link\">Unicode Collation</span>.",
    "hierarchy": [
      "Collation Key Filter"
    ],
    "pageId": 238
  },
  {
    "content": "Implements the Daitch-Mokotoff Soundex algorithm, which allows identification of similar names, even if\nthey are spelled differently. More information about how this works is available in the section on <span class=\"link\">Phonetic</span>\nMatching<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Daitch-Mokotoff Soundex Filter"
    ],
    "pageId": 238
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.DaitchMokotoffSoundexFilterFactory</span></span>",
    "hierarchy": [
      "Daitch-Mokotoff Soundex Filter"
    ],
    "pageId": 238
  },
  {
    "content": "inject\n(true/false) If true (the default), then new phonetic tokens are added to the stream. Otherwise, tokens\nare replaced with the phonetic equivalent. Setting this to false will enable phonetic matching, but the\nexact spelling of the target word may not match.",
    "hierarchy": [
      "Daitch-Mokotoff Soundex Filter"
    ],
    "pageId": 238
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DaitchMokotoffSoundexFilterFactory\"</span> <span class=\"fc2\">inject</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 239
  },
  {
    "content": "This filter creates tokens using the <span class=\"ff1 fs2\">DoubleMetaphone</span> encoding algorithm from commons-codec. For more\ninformation, see the <span class=\"link\">Phonetic Matching</span> section.",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.DoubleMetaphoneFilterFactory</span></span>",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "inject\n(true/false) If true (the default), then new phonetic tokens are added to the stream. Otherwise, tokens\nare replaced with the phonetic equivalent. Setting this to false will enable phonetic matching, but the\nexact spelling of the target word may not match.",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "maxCodeLength\n(integer) The maximum length of the code to be generated.",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Default behavior for inject (true): keep the original token and add phonetic token(s) at the same position.",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DoubleMetaphoneFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "In:<span class=\"code\"> \"four score and Kuczewski\"</span>",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"four\"(1), \"score\"(2), \"and\"(3), \"Kuczewski\"(4)</span>",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Out:<span class=\"code\"> \"four\"(1), \"FR\"(1), \"score\"(2), \"SKR\"(2), \"and\"(3), \"ANT\"(3), \"Kuczewski\"(4), \"KSSK\"(4), \"KXFS\"(4)</span>",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "The phonetic tokens have a position increment of 0, which indicates that they are at the same position as the\ntoken they were derived from (immediately preceding). Note that \"Kuczewski\" has two encodings, which are\nadded at the same position.",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Discard original token (<span class=\"ff1 fs2\">inject=\"false\"</span>).",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DoubleMetaphoneFilterFactory\"</span> <span class=\"fc2\">inject</span>=<span class=\"fc3\">\"false\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Double Metaphone Filter"
    ],
    "pageId": 239
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score and Kuczewski\"</span>",
    "hierarchy": [
    ],
    "pageId": 240
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\"(1), \"score\"(2), \"and\"(3), \"Kuczewski\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 240
  },
  {
    "content": "Out:<span class=\"ff2\"> \"FR\"(1), \"SKR\"(2), \"ANT\"(3), \"KSSK\"(4), \"KXFS\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 240
  },
  {
    "content": "Note that \"Kuczewski\" has two encodings, which are added at the same position.",
    "hierarchy": [
    ],
    "pageId": 240
  },
  {
    "content": "This filter generates edge n-gram tokens of sizes within the given range.",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.EdgeNGramFilterFactory</span></span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "minGramSize\n(integer, default 1) The minimum gram size.",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "maxGramSize\n(integer, default 1) The maximum gram size.",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Default behavior.",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.EdgeNGramFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score and twenty\"</span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\", \"score\", \"and\", \"twenty\"</span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Out:<span class=\"ff2\"> \"f\", \"s\", \"a\", \"t\"</span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "A range of 1 to 4.",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.EdgeNGramFilterFactory\"</span> <span class=\"fc3\">minGramSize</span>=<span class=\"fc4\">\"1\"</span> <span class=\"fc3\">maxGramSize</span>=<span class=\"fc4\">\"4\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score\"</span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\", \"score\"</span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "Out:<span class=\"ff2\"> \"f\", \"fo\", \"fou\", \"four\", \"s\", \"sc\", \"sco\", \"scor\"</span>",
    "hierarchy": [
      "Edge N-Gram Filter"
    ],
    "pageId": 240
  },
  {
    "content": "A range of 4 to 6.",
    "hierarchy": [
    ],
    "pageId": 241
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.EdgeNGramFilterFactory\"</span> <span class=\"fc2\">minGramSize</span>=<span class=\"fc3\">\"4\"</span> <span class=\"fc2\">maxGramSize</span>=<span class=\"fc3\">\"6\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 241
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score and twenty\"</span>",
    "hierarchy": [
    ],
    "pageId": 241
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\", \"score\", \"and\", \"twenty\"</span>",
    "hierarchy": [
    ],
    "pageId": 241
  },
  {
    "content": "Out:<span class=\"ff2\"> \"four\", \"scor\", \"score\", \"twen\", \"twent\", \"twenty\"</span>",
    "hierarchy": [
    ],
    "pageId": 241
  },
  {
    "content": "This filter stems plural English words to their singular form.",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.EnglishMinimalStemFilterFactory</span></span>",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.EnglishMinimalStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "In:<span class=\"ff2\"> \"dogs cats\"</span>",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"dogs\", \"cats\"</span>",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Out:<span class=\"ff2\"> \"dog\", \"cat\"</span>",
    "hierarchy": [
      "English Minimal Stem Filter"
    ],
    "pageId": 241
  },
  {
    "content": "This filter removes singular possessives (trailing <span class=\"ff1\">'s</span>) from words. Note that plural possessives, e.g., the <span class=\"ff1\">s'</span> in\n\"divers' snorkels\", are not removed by this filter.",
    "hierarchy": [
      "English Possessive Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.EnglishPossessiveFilterFactory</span></span>",
    "hierarchy": [
      "English Possessive Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "English Possessive Filter"
    ],
    "pageId": 241
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.EnglishPossessiveFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 242
  },
  {
    "content": "In:<span class=\"code\"> \"Man's dog bites dogs' man\"</span>",
    "hierarchy": [
    ],
    "pageId": 242
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"Man's\", \"dog\", \"bites\", \"dogs'\", \"man\"</span>",
    "hierarchy": [
    ],
    "pageId": 242
  },
  {
    "content": "Out:<span class=\"code\"> \"Man\", \"dog\", \"bites\", \"dogs'\", \"man\"</span>",
    "hierarchy": [
    ],
    "pageId": 242
  },
  {
    "content": "This filter outputs a single token which is a concatenation of the sorted and de-duplicated set of input\ntokens. This can be useful for clustering/linking use cases.",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.FingerprintFilterFactory</span></span>",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "separator\nThe character used to separate tokens combined into the single output token. Defaults to \" \" (a space\ncharacter).",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "maxOutputTokenSize\nThe maximum length of the summarized output token. If exceeded, no output token is emitted. Defaults\nto 1024.",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FingerprintFilterFactory\"</span> <span class=\"fc2\">separator</span>=<span class=\"fc3\">\"_\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "In:<span class=\"code\"> \"the quick brown fox jumped over the lazy dog\"</span>",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"</span>",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "Out:<span class=\"code\"> \"brown_dog_fox_jumped_lazy_over_quick_the\"</span>",
    "hierarchy": [
      "Fingerprint Filter"
    ],
    "pageId": 242
  },
  {
    "content": "This filter must be included on index-time analyzer specifications that include at least one graph-aware filter,\nincluding Synonym Graph Filter and Word Delimiter Graph Filter.",
    "hierarchy": [
      "Flatten Graph Filter"
    ],
    "pageId": 242
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.FlattenGraphFilterFactory</span></span>",
    "hierarchy": [
      "Flatten Graph Filter"
    ],
    "pageId": 242
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Flatten Graph Filter"
    ],
    "pageId": 242
  },
  {
    "content": "See the examples below for <span class=\"link\">Synonym Graph Filter</span> and <span class=\"link\">Word Delimiter Graph Filter</span>.",
    "hierarchy": [
    ],
    "pageId": 243
  },
  {
    "content": "The <span class=\"code\">Hunspell Stem Filter</span> provides support for several languages. You must provide the dictionary (<span class=\"code\">.dic</span>)\nand rules (<span class=\"code\">.aff</span>) files for each language you wish to use with the Hunspell Stem Filter. You can download\nthose language files <span class=\"link\">here</span>.",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "Be aware that your results will vary widely based on the quality of the provided dictionary and rules files. For\nexample, some languages have only a minimal word list with no morphological information. On the other\nhand, for languages that have no stemmer but do have an extensive dictionary file, the Hunspell stemmer\nmay be a good choice.",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.HunspellStemFilterFactory</span></span>",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "dictionary\n(required) The path of a dictionary file.",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "affix\n(required) The path of a rules file.",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "ignoreCase\n(boolean) controls whether matching is case sensitive or not. The default is false.",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "strictAffixParsing\n(boolean) controls whether the affix parsing is strict or not. If true, an error while reading an affix rule\ncauses a ParseException, otherwise is ignored. The default is true.",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.HunspellStemFilterFactory\"</span>\nÊ   <span class=\"fc4\">dictionary</span>=<span class=\"fc5\">\"en_GB.dic\"</span>\nÊ   <span class=\"fc4\">affix</span>=<span class=\"fc5\">\"en_GB.aff\"</span>\nÊ   <span class=\"fc4\">ignoreCase</span>=<span class=\"fc5\">\"true\"</span>\nÊ   <span class=\"fc4\">strictAffixParsing</span>=<span class=\"fc5\">\"true\"</span> <span class=\"fc3\">/></span>",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "In:<span class=\"ff1\"> \"jump jumping jumped\"</span>",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"jump\", \"jumping\", \"jumped\"</span>",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "Out:<span class=\"ff1\"> \"jump\", \"jump\", \"jump\"</span>",
    "hierarchy": [
      "Hunspell Stem Filter"
    ],
    "pageId": 243
  },
  {
    "content": "This filter reconstructs hyphenated words that have been tokenized as two tokens because of a line break or",
    "hierarchy": [
      "Hyphenated Words Filter"
    ],
    "pageId": 243
  },
  {
    "content": "other intervening whitespace in the field test. If a token ends with a hyphen, it is joined with the following\ntoken and the hyphen is discarded.",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "Note that for this filter to work properly, the upstream tokenizer must not remove trailing hyphen\ncharacters. This filter is generally only useful at index time.",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.HyphenatedWordsFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.HyphenatedWordsFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "In:<span class=\"ff1\"> \"A hyphen- ated word\"</span>",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"A\", \"hyphen-\", \"ated\", \"word\"</span>",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "Out:<span class=\"ff1\"> \"A\", \"hyphenated\", \"word\"</span>",
    "hierarchy": [
    ],
    "pageId": 244
  },
  {
    "content": "This filter is a custom Unicode normalization form that applies the foldings specified in <span class=\"link\">Unicode Technical</span>\nReport 30<span class=\"fc0\"> in addition to the <span class=\"code\">NFKC_Casefold</span> normalization form as described in </span>ICU Normalizer 2 Filter<span class=\"fc0\">. This</span>\nfilter is a better substitute for the combined behavior of the <span class=\"link\">ASCII Folding Filter</span>, <span class=\"link\">Lower Case Filter</span>, and <span class=\"link\">ICU</span>\nNormalizer 2 Filter<span class=\"fc0\">.</span>",
    "hierarchy": [
      "ICU Folding Filter"
    ],
    "pageId": 244
  },
  {
    "content": "To use this filter, see <span class=\"code\">solr/contrib/analysis-extras/README.txt</span> for instructions on which jars you need\nto add to your <span class=\"code\">solr_home/lib</span>. For more information about adding jars, see the section <span class=\"link\">Lib Directives in</span>\nSolrconfig<span class=\"fc0\">.</span>",
    "hierarchy": [
      "ICU Folding Filter"
    ],
    "pageId": 244
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.ICUFoldingFilterFactory</span></span>",
    "hierarchy": [
      "ICU Folding Filter"
    ],
    "pageId": 244
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
      "ICU Folding Filter"
    ],
    "pageId": 244
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ICUFoldingFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "ICU Folding Filter"
    ],
    "pageId": 244
  },
  {
    "content": "For detailed information on this normalization form, see <span class=\"link\">http://www.unicode.org/reports/tr30/tr30-4.html</span>.",
    "hierarchy": [
      "ICU Folding Filter"
    ],
    "pageId": 244
  },
  {
    "content": "This filter factory normalizes text according to one of five Unicode Normalization Forms as described in",
    "hierarchy": [
      "ICU Normalizer 2 Filter"
    ],
    "pageId": 244
  },
  {
    "content": "Unicode Standard Annex #15<span class=\"fc1\">:</span>",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "NFC: (name=\"nfc\" mode=\"compose\") Normalization Form C, canonical decomposition",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "NFD: (name=\"nfc\" mode=\"decompose\") Normalization Form D, canonical decomposition, followed by\ncanonical composition",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "NFKC: (name=\"nfkc\" mode=\"compose\") Normalization Form KC, compatibility decomposition",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "NFKD: (name=\"nfkc\" mode=\"decompose\") Normalization Form KD, compatibility decomposition,\nfollowed by canonical composition",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "NFKC_Casefold: (name=\"nfkc_cf\" mode=\"compose\") Normalization Form KC, with additional Unicode\ncase folding. Using the ICU Normalizer 2 Filter is a better-performing substitution for the <span class=\"fc0\">Lower Case</span>\nFilter<span class=\"fc1\"> and NFKC normalization.</span>",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.ICUNormalizer2FilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "name\n(string) The name of the normalization form; <span class=\"code\">nfc</span>, <span class=\"code\">nfd</span>, <span class=\"code\">nfkc</span>, <span class=\"code\">nfkd</span>, <span class=\"code\">nfkc_cf</span>",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "mode\n(string) The mode of Unicode character composition and decomposition; <span class=\"code\">compose</span> or <span class=\"code\">decompose</span>",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ICUNormalizer2FilterFactory\"</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"nfkc_cf\"</span> <span class=\"fc3\">mode</span>=<span class=\"fc4\">\"compose\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "For detailed information about these Unicode Normalization Forms, see <span class=\"fc0\">http://unicode.org/reports/tr15/</span>.",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "To use this filter, see <span class=\"code\">solr/contrib/analysis-extras/README.txt</span> for instructions on which jars you need\nto add to your <span class=\"code\">solr_home/lib</span>.",
    "hierarchy": [
    ],
    "pageId": 245
  },
  {
    "content": "This filter applies <span class=\"fc0\">ICU Tranforms</span> to text. This filter supports only ICU System Transforms. Custom rule sets\nare not supported.",
    "hierarchy": [
      "ICU Transform Filter"
    ],
    "pageId": 245
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.ICUTransformFilterFactory</span></span>",
    "hierarchy": [
      "ICU Transform Filter"
    ],
    "pageId": 245
  },
  {
    "content": "id\n(string) The identifier for the ICU System Transform you wish to apply with this filter. For a full list of ICU\nSystem Transforms, see <span class=\"fc0\">http://demo.icu-project.org/icu-bin/translit?TEMPLATE_FILE=data/</span>\ntranslit_rule_main.html<span class=\"fc1\">.</span>",
    "hierarchy": [
      "ICU Transform Filter"
    ],
    "pageId": 245
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ICUTransformFilterFactory\"</span> <span class=\"fc2\">id</span>=<span class=\"fc3\">\"Traditional-Simplified\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 246
  },
  {
    "content": "For detailed information about ICU Transforms, see <span class=\"link\">http://userguide.icu-project.org/transforms/general</span>.",
    "hierarchy": [
    ],
    "pageId": 246
  },
  {
    "content": "To use this filter, see <span class=\"ff1 fs1\">solr/contrib/analysis-extras/README.txt</span> for instructions on which jars you need\nto add to your <span class=\"ff1 fs1\">solr_home/lib</span>.",
    "hierarchy": [
    ],
    "pageId": 246
  },
  {
    "content": "This filter discards all tokens except those that are listed in the given word list. This is the inverse of the Stop\nWords Filter. This filter can be useful for building specialized indices for a constrained set of terms.",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"ff1 fs1\">solr.KeepWordFilterFactory</span></span>",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "words\n(required) Path of a text file containing the list of keep words, one per line. Blank lines and lines that\nbegin with \"#\" are ignored. This may be an absolute path, or a simple filename in the Solr <span class=\"ff1 fs1\">conf</span> directory.",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "ignoreCase\n(true/false) If <span class=\"code\">true</span> then comparisons are done case-insensitively. If this argument is true, then the words\nfile is assumed to contain only lowercase words. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "Where <span class=\"ff1 fs1\">keepwords.txt</span> contains:",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "happy funny silly",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeepWordFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"keepwords.txt\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "In:<span class=\"ff2\"> \"Happy, sad or funny\"</span>",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"Happy\", \"sad\", \"or\", \"funny\"</span>",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "Out:<span class=\"ff2\"> \"funny\"</span>",
    "hierarchy": [
      "Keep Word Filter"
    ],
    "pageId": 246
  },
  {
    "content": "Same <span class=\"ff2 fs1\">keepwords.txt</span>, case insensitive:",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeepWordFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"keepwords.txt\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "In:<span class=\"ff1\"> \"Happy, sad or funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"Happy\", \"sad\", \"or\", \"funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Out:<span class=\"ff1\"> \"Happy\", \"funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Using LowerCaseFilterFactory before filtering for keep words, no <span class=\"ff2 fs1\">ignoreCase</span> flag.",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeepWordFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"keepwords.txt\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "In:<span class=\"ff1\"> \"Happy, sad or funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"Happy\", \"sad\", \"or\", \"funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Filter to Filter:<span class=\"ff1\"> \"happy\", \"sad\", \"or\", \"funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "Out:<span class=\"ff1\"> \"happy\", \"funny\"</span>",
    "hierarchy": [
    ],
    "pageId": 247
  },
  {
    "content": "KStem is an alternative to the Porter Stem Filter for developers looking for a less aggressive stemmer. KStem\nwas written by Bob Krovetz, ported to Lucene by Sergio Guzman-Lara (UMASS Amherst). This stemmer is\nonly appropriate for English language text.",
    "hierarchy": [
      "KStem Filter"
    ],
    "pageId": 247
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs1\">solr.KStemFilterFactory</span></span>",
    "hierarchy": [
      "KStem Filter"
    ],
    "pageId": 247
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
      "KStem Filter"
    ],
    "pageId": 247
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory \"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "KStem Filter"
    ],
    "pageId": 247
  },
  {
    "content": "In:<span class=\"ff1\"> \"jump jumping jumped\"</span>",
    "hierarchy": [
      "KStem Filter"
    ],
    "pageId": 247
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"jump\", \"jumping\", \"jumped\"</span>",
    "hierarchy": [
    ],
    "pageId": 248
  },
  {
    "content": "Out:<span class=\"ff2\"> \"jump\", \"jump\", \"jump\"</span>",
    "hierarchy": [
    ],
    "pageId": 248
  },
  {
    "content": "This filter passes tokens whose length falls within the min/max limit specified. All other tokens are\ndiscarded.",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.LengthFilterFactory</span></span>",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "min\n(integer, required) Minimum token length. Tokens shorter than this are discarded.",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "max\n(integer, required, must be >= min) Maximum token length. Tokens longer than this are discarded.",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LengthFilterFactory\"</span> <span class=\"fc3\">min</span>=<span class=\"fc4\">\"3\"</span> <span class=\"fc3\">max</span>=<span class=\"fc4\">\"7\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "In:<span class=\"ff2\"> \"turn right at Albuquerque\"</span>",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"turn\", \"right\", \"at\", \"Albuquerque\"</span>",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "Out:<span class=\"ff2\"> \"turn\", \"right\"</span>",
    "hierarchy": [
      "Length Filter"
    ],
    "pageId": 248
  },
  {
    "content": "This filter limits the number of accepted tokens, typically useful for index analysis.",
    "hierarchy": [
      "Limit Token Count Filter"
    ],
    "pageId": 248
  },
  {
    "content": "By default, this filter ignores any tokens in the wrapped <span class=\"code\">TokenStream</span> once the limit has been reached, which\ncan result in <span class=\"code\">reset()</span> being called prior to <span class=\"code\">incrementToken()</span> returning <span class=\"code\">false</span>. For most <span class=\"code\">TokenStream</span>\nimplementations this should be acceptable, and faster then consuming the full stream. If you are wrapping\na <span class=\"code\">TokenStream</span> which requires that the full stream of tokens be exhausted in order to function properly, use\nthe <span class=\"code\">consumeAllTokens=\"true\"</span> option.",
    "hierarchy": [
      "Limit Token Count Filter"
    ],
    "pageId": 248
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.LimitTokenCountFilterFactory</span></span>",
    "hierarchy": [
      "Limit Token Count Filter"
    ],
    "pageId": 248
  },
  {
    "content": "maxTokenCount\n(integer, required) Maximum token count. After this limit has been reached, tokens are discarded.",
    "hierarchy": [
    ],
    "pageId": 249
  },
  {
    "content": "consumeAllTokens\n(boolean, defaults to false) Whether to consume (and discard) previous token filters' tokens after the\nmaximum token count has been reached. See description above.",
    "hierarchy": [
    ],
    "pageId": 249
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LimitTokenCountFilterFactory\"</span> <span class=\"fc2\">maxTokenCount</span>=<span class=\"fc3\">\"10\"</span>\nÊ         <span class=\"fc2\">consumeAllTokens</span>=<span class=\"fc3\">\"false\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 249
  },
  {
    "content": "In:<span class=\"ff2\"> \"1 2 3 4 5 6 7 8 9 10 11 12\"</span>",
    "hierarchy": [
    ],
    "pageId": 249
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"</span>",
    "hierarchy": [
    ],
    "pageId": 249
  },
  {
    "content": "Out:<span class=\"ff2\"> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"</span>",
    "hierarchy": [
    ],
    "pageId": 249
  },
  {
    "content": "This filter limits tokens to those before a configured maximum start character offset. This can be useful to\nlimit highlighting, for example.",
    "hierarchy": [
      "Limit Token Offset Filter"
    ],
    "pageId": 249
  },
  {
    "content": "By default, this filter ignores any tokens in the wrapped <span class=\"ff1 fs0\">TokenStream</span> once the limit has been reached, which\ncan result in <span class=\"ff1 fs0\">reset()</span> being called prior to <span class=\"ff1 fs0\">incrementToken()</span> returning <span class=\"ff1 fs0\">false</span>. For most <span class=\"ff1 fs0\">TokenStream</span>\nimplementations this should be acceptable, and faster then consuming the full stream. If you are wrapping\na <span class=\"ff1 fs0\">TokenStream</span> which requires that the full stream of tokens be exhausted in order to function properly, use\nthe <span class=\"ff1 fs0\">consumeAllTokens=\"true\"</span> option.",
    "hierarchy": [
      "Limit Token Offset Filter"
    ],
    "pageId": 249
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"ff1 fs0\">solr.LimitTokenOffsetFilterFactory</span></span>",
    "hierarchy": [
      "Limit Token Offset Filter"
    ],
    "pageId": 249
  },
  {
    "content": "maxStartOffset\n(integer, required) Maximum token start character offset. After this limit has been reached, tokens are\ndiscarded.",
    "hierarchy": [
      "Limit Token Offset Filter"
    ],
    "pageId": 249
  },
  {
    "content": "consumeAllTokens\n(boolean, defaults to false) Whether to consume (and discard) previous token filters' tokens after the\nmaximum start offset has been reached. See description above.",
    "hierarchy": [
      "Limit Token Offset Filter"
    ],
    "pageId": 249
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LimitTokenOffsetFilterFactory\"</span> <span class=\"fc2\">maxStartOffset</span>=<span class=\"fc3\">\"10\"</span>\nÊ         <span class=\"fc2\">consumeAllTokens</span>=<span class=\"fc3\">\"false\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
    ],
    "pageId": 250
  },
  {
    "content": "In:<span class=\"code\"> \"0 2 4 6 8 A C E\"</span>",
    "hierarchy": [
    ],
    "pageId": 250
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"0\", \"2\", \"4\", \"6\", \"8\", \"A\", \"C\", \"E\"</span>",
    "hierarchy": [
    ],
    "pageId": 250
  },
  {
    "content": "Out:<span class=\"code\"> \"0\", \"2\", \"4\", \"6\", \"8\", \"A\"</span>",
    "hierarchy": [
    ],
    "pageId": 250
  },
  {
    "content": "This filter limits tokens to those before a configured maximum token position.",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "By default, this filter ignores any tokens in the wrapped <span class=\"ff1 fs2\">TokenStream</span> once the limit has been reached, which\ncan result in <span class=\"ff1 fs2\">reset()</span> being called prior to <span class=\"ff1 fs2\">incrementToken()</span> returning <span class=\"ff1 fs2\">false</span>. For most <span class=\"ff1 fs2\">TokenStream</span>\nimplementations this should be acceptable, and faster then consuming the full stream. If you are wrapping\na <span class=\"ff1 fs2\">TokenStream</span> which requires that the full stream of tokens be exhausted in order to function properly, use\nthe <span class=\"ff1 fs2\">consumeAllTokens=\"true\"</span> option.",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.LimitTokenPositionFilterFactory</span></span>",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "maxTokenPosition\n(integer, required) Maximum token position. After this limit has been reached, tokens are discarded.",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "consumeAllTokens\n(boolean, defaults to false) Whether to consume (and discard) previous token filters' tokens after the\nmaximum start offset has been reached. See description above.",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LimitTokenPositionFilterFactory\"</span> <span class=\"fc2\">maxTokenPosition</span>=<span class=\"fc3\">\"3\"</span>\nÊ         <span class=\"fc2\">consumeAllTokens</span>=<span class=\"fc3\">\"false\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "In:<span class=\"code\"> \"1 2 3 4 5\"</span>",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"1\", \"2\", \"3\", \"4\", \"5\"</span>",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "Out:<span class=\"code\"> \"1\", \"2\", \"3\"</span>",
    "hierarchy": [
      "Limit Token Position Filter"
    ],
    "pageId": 250
  },
  {
    "content": "Converts any uppercase letters in a token to the equivalent lowercase token. All other characters are left",
    "hierarchy": [
      "Lower Case Filter"
    ],
    "pageId": 250
  },
  {
    "content": "unchanged.",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.LowerCaseFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "In:<span class=\"ff1\"> \"Down With CamelCase\"</span>",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"Down\", \"With\", \"CamelCase\"</span>",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "Out:<span class=\"ff1\"> \"down\", \"with\", \"camelcase\"</span>",
    "hierarchy": [
    ],
    "pageId": 251
  },
  {
    "content": "This is specialized version of the <span class=\"link\">Stop Words Filter Factory</span> that uses a set of stop words that are <span class=\"link\">managed</span>\nfrom a REST API.",
    "hierarchy": [
      "Managed Stop Filter"
    ],
    "pageId": 251
  },
  {
    "content": "managed\nThe name that should be used for this set of stop words in the managed REST API.",
    "hierarchy": [
      "Managed Stop Filter"
    ],
    "pageId": 251
  },
  {
    "content": "Example:<span class=\"ff1\"> With this configuration the set of words is named \"english\" and can be managed via</span>\n/solr/collection_name/schema/analysis/stopwords/english",
    "hierarchy": [
      "Managed Stop Filter"
    ],
    "pageId": 251
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ManagedStopFilterFactory\"</span> <span class=\"fc2\">managed</span>=<span class=\"fc3\">\"english\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Managed Stop Filter"
    ],
    "pageId": 251
  },
  {
    "content": "See <span class=\"link\">Stop Filter</span> for example input/output.",
    "hierarchy": [
      "Managed Stop Filter"
    ],
    "pageId": 251
  },
  {
    "content": "This is specialized version of the <span class=\"link\">Synonym Filter</span> that uses a mapping on synonyms that is <span class=\"link\">managed from a</span>\nREST API.",
    "hierarchy": [
      "Managed Synonym Filter"
    ],
    "pageId": 251
  },
  {
    "content": "Managed Synonym Filter has been deprecated in favor of Managed Synonym Graph Filter,\nwhich is required for multi-term synonym support.",
    "hierarchy": [
      "Managed Synonym Filter"
    ],
    "pageId": 251
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.ManagedSynonymFilterFactory</span></span>",
    "hierarchy": [
      "Managed Synonym Filter"
    ],
    "pageId": 251
  },
  {
    "content": "For arguments and examples, see the <span class=\"link\">Synonym Graph Filter</span> below.",
    "hierarchy": [
    ],
    "pageId": 252
  },
  {
    "content": "This is specialized version of the <span class=\"link\">Synonym Graph Filter</span> that uses a mapping on synonyms that is <span class=\"link\">managed</span>\nfrom a REST API.",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "This filter maps single- or multi-token synonyms, producing a fully correct graph output. This filter is a\nreplacement for the Managed Synonym Filter, which produces incorrect graphs for multi-token synonyms.",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Although this filter produces correct token graphs, it cannot consume an input token graph\ncorrectly.",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "managed\nThe name that should be used for this mapping on synonyms in the managed REST API.",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Example:<span class=\"ff1\"> With this configuration the set of mappings is named \"english\" and can be managed via</span>\n/solr/collection_name/schema/analysis/synonyms/english",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Ê <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.StandardTokenizerFactory\"<span class=\"fc4\">/></span></span>\nÊ <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.ManagedSynonymGraphFilterFactory\"</span> <span class=\"fc5\">managed</span>=<span class=\"fc6\">\"english\"<span class=\"fc4\">/></span></span>\nÊ <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.FlattenGraphFilterFactory\"<span class=\"fc4\">/></span></span> <span class=\"fc7\"><!-- required on index analyzers after graph</span>",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Ê <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.StandardTokenizerFactory\"<span class=\"fc4\">/></span></span>\nÊ <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.ManagedSynonymGraphFilterFactory\"</span> <span class=\"fc5\">managed</span>=<span class=\"fc6\">\"english\"<span class=\"fc4\">/></span></span>",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "See <span class=\"link\">Synonym Graph Filter</span> below for example input/output.",
    "hierarchy": [
      "Managed Synonym Graph Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Generates n-gram tokens of sizes in the given range. Note that tokens are ordered by position and then by\ngram size.",
    "hierarchy": [
      "N-Gram Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff4 fs3\">solr.NGramFilterFactory</span></span>",
    "hierarchy": [
      "N-Gram Filter"
    ],
    "pageId": 252
  },
  {
    "content": "minGramSize\n(integer, default 1) The minimum gram size.",
    "hierarchy": [
      "N-Gram Filter"
    ],
    "pageId": 252
  },
  {
    "content": "maxGramSize\n(integer, default 2) The maximum gram size.",
    "hierarchy": [
      "N-Gram Filter"
    ],
    "pageId": 252
  },
  {
    "content": "Default behavior.",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NGramFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "In:<span class=\"ff1\"> \"four score\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"four\", \"score\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Out:<span class=\"ff1\"> \"f\", \"o\", \"u\", \"r\", \"fo\", \"ou\", \"ur\", \"s\", \"c\", \"o\", \"r\", \"e\", \"sc\", \"co\", \"or\", \"re\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "A range of 1 to 4.",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NGramFilterFactory\"</span> <span class=\"fc2\">minGramSize</span>=<span class=\"fc3\">\"1\"</span> <span class=\"fc2\">maxGramSize</span>=<span class=\"fc3\">\"4\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "In:<span class=\"ff1\"> \"four score\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"four\", \"score\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Out:<span class=\"ff1\"> \"f\", \"fo\", \"fou\", \"four\", \"o\", \"ou\", \"our\", \"u\", \"ur\", \"r\", \"s\", \"sc\", \"sco\", \"scor\", \"c\", \"co\", \"cor\", \"core\",</span>\n\"o\", \"or\", \"ore\", \"r\", \"re\", \"e\"",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "A range of 3 to 5.",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NGramFilterFactory\"</span> <span class=\"fc2\">minGramSize</span>=<span class=\"fc3\">\"3\"</span> <span class=\"fc2\">maxGramSize</span>=<span class=\"fc3\">\"5\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "In:<span class=\"ff1\"> \"four score\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"four\", \"score\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "Out:<span class=\"ff1\"> \"fou\", \"four\", \"our\", \"sco\", \"scor\", \"score\", \"cor\", \"core\", \"ore\"</span>",
    "hierarchy": [
    ],
    "pageId": 253
  },
  {
    "content": "This filter adds a numeric floating point payload value to tokens that match a given type. Refer to the\nJavadoc for the <span class=\"ff2 fs2\">org.apache.lucene.analysis.Token</span> class for more information about token types and\npayloads.",
    "hierarchy": [
      "Numeric Payload Token Filter"
    ],
    "pageId": 253
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.NumericPayloadTokenFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "payload\n(required) A floating point value that will be added to all matching tokens.",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "typeMatch\n(required) A token type name string. Tokens with a matching type name will have their payload set to the\nabove floating point value.",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NumericPayloadTokenFilterFactory\"</span> <span class=\"fc2\">payload</span>=<span class=\"fc3\">\"0.75\"</span> <span class=\"fc2\">typeMatch</span>=<span class=\"fc3\">\"word\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "In:<span class=\"ff2\"> \"bing bang boom\"</span>",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"bing\", \"bang\", \"boom\"</span>",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "Out:<span class=\"ff2\"> \"bing\"[0.75], \"bang\"[0.75], \"boom\"[0.75]</span>",
    "hierarchy": [
    ],
    "pageId": 254
  },
  {
    "content": "This filter applies a regular expression to each token and, for those that match, substitutes the given\nreplacement string in place of the matched pattern. Tokens which do not match are passed though\nunchanged.",
    "hierarchy": [
      "Pattern Replace Filter"
    ],
    "pageId": 254
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.PatternReplaceFilterFactory</span></span>",
    "hierarchy": [
      "Pattern Replace Filter"
    ],
    "pageId": 254
  },
  {
    "content": "pattern\n(required) The regular expression to test against each token, as per <span class=\"code\">java.util.regex.Pattern</span>.",
    "hierarchy": [
      "Pattern Replace Filter"
    ],
    "pageId": 254
  },
  {
    "content": "replacement\n(required) A string to substitute in place of the matched pattern. This string may contain references to\ncapture groups in the regex pattern. See the Javadoc for <span class=\"code\">java.util.regex.Matcher</span>.",
    "hierarchy": [
      "Pattern Replace Filter"
    ],
    "pageId": 254
  },
  {
    "content": "replace\n(\"all\" or \"first\", default \"all\") Indicates whether all occurrences of the pattern in the token should be\nreplaced, or only the first.",
    "hierarchy": [
      "Pattern Replace Filter"
    ],
    "pageId": 254
  },
  {
    "content": "Simple string replace:",
    "hierarchy": [
      "Pattern Replace Filter"
    ],
    "pageId": 254
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternReplaceFilterFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"cat\"</span> <span class=\"fc2\">replacement</span>=<span class=\"fc3\">\"dog\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "In:<span class=\"code\"> \"cat concatenate catycat\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"cat\", \"concatenate\", \"catycat\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Out:<span class=\"code\"> \"dog\", \"condogenate\", \"dogydog\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "String replacement, first occurrence only:",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternReplaceFilterFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"cat\"</span> <span class=\"fc2\">replacement</span>=<span class=\"fc3\">\"dog\"</span> <span class=\"fc2\">replace</span>=<span class=\"fc3\">\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "In:<span class=\"code\"> \"cat concatenate catycat\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"cat\", \"concatenate\", \"catycat\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Out:<span class=\"code\"> \"dog\", \"condogenate\", \"dogycat\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "More complex pattern with capture group reference in the replacement. Tokens that start with non-numeric\ncharacters and end with digits will have an underscore inserted before the numbers. Otherwise the token is\npassed through.",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternReplaceFilterFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"(\\D+)(\\d+)$\"</span> <span class=\"fc2\">replacement</span>=<span class=\"fc3\">\"$1_$2\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "In:<span class=\"code\"> \"cat foo1234 9987 blah1234foo\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"cat\", \"foo1234\", \"9987\", \"blah1234foo\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "Out:<span class=\"code\"> \"cat\", \"foo_1234\", \"9987\", \"blah1234foo\"</span>",
    "hierarchy": [
    ],
    "pageId": 255
  },
  {
    "content": "This filter creates tokens using one of the phonetic encoding algorithms in the\norg.apache.commons.codec.language<span class=\"code\"> package. For more information, see the section on <span class=\"link\">Phonetic</span></span>\nMatching<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Phonetic Filter"
    ],
    "pageId": 255
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.PhoneticFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "encoder\n(required) The name of the encoder to use. The encoder name must be one of the following (case\ninsensitive): <span class=\"link\">DoubleMetaphone</span>, <span class=\"link\">Metaphone</span>, <span class=\"link\">Soundex</span>, <span class=\"link\">RefinedSoundex</span>, <span class=\"link\">Caverphone</span> (v2.0),\nColognePhonetic<span class=\"ff2 fs0 fc0\">, or </span>Nysiis<span class=\"ff2 fs0 fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "inject\n(true/false) If true (the default), then new phonetic tokens are added to the stream. Otherwise, tokens\nare replaced with the phonetic equivalent. Setting this to false will enable phonetic matching, but the\nexact spelling of the target word may not match.",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "maxCodeLength\n(integer) The maximum length of the code to be generated by the Metaphone or Double Metaphone\nencoders.",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Default behavior for DoubleMetaphone encoding.",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.PhoneticFilterFactory\"</span> <span class=\"fc3\">encoder</span>=<span class=\"fc4\">\"DoubleMetaphone\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score and twenty\"</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\"(1), \"score\"(2), \"and\"(3), \"twenty\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Out:<span class=\"ff2\"> \"four\"(1), \"FR\"(1), \"score\"(2), \"SKR\"(2), \"and\"(3), \"ANT\"(3), \"twenty\"(4), \"TNT\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "The phonetic tokens have a position increment of 0, which indicates that they are at the same position as the\ntoken they were derived from (immediately preceding).",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Discard original token.",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.PhoneticFilterFactory\"</span> <span class=\"fc3\">encoder</span>=<span class=\"fc4\">\"DoubleMetaphone\"</span> <span class=\"fc3\">inject</span>=<span class=\"fc4\">\"false\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score and twenty\"</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\"(1), \"score\"(2), \"and\"(3), \"twenty\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Out:<span class=\"ff2\"> \"FR\"(1), \"SKR\"(2), \"ANT\"(3), \"TWNT\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 256
  },
  {
    "content": "Default Soundex encoder.",
    "hierarchy": [
    ],
    "pageId": 257
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PhoneticFilterFactory\"</span> <span class=\"fc2\">encoder</span>=<span class=\"fc3\">\"Soundex\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 257
  },
  {
    "content": "In:<span class=\"ff2\"> \"four score and twenty\"</span>",
    "hierarchy": [
    ],
    "pageId": 257
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"four\"(1), \"score\"(2), \"and\"(3), \"twenty\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 257
  },
  {
    "content": "Out:<span class=\"ff2\"> \"four\"(1), \"F600\"(1), \"score\"(2), \"S600\"(2), \"and\"(3), \"A530\"(3), \"twenty\"(4), \"T530\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 257
  },
  {
    "content": "This filter applies the Porter Stemming Algorithm for English. The results are similar to using the Snowball\nPorter Stemmer with the <span class=\"code\">language=\"English\"</span> argument. But this stemmer is coded directly in Java and is\nnot based on Snowball. It does not accept a list of protected words and is only appropriate for English\nlanguage text. However, it has been benchmarked as <span class=\"link\">four times faster</span> than the English Snowball stemmer,\nso can provide a performance enhancement.",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.PorterStemFilterFactory</span></span>",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory \"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PorterStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "In:<span class=\"ff2\"> \"jump jumping jumped\"</span>",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"jump\", \"jumping\", \"jumped\"</span>",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Out:<span class=\"ff2\"> \"jump\", \"jump\", \"jump\"</span>",
    "hierarchy": [
      "Porter Stem Filter"
    ],
    "pageId": 257
  },
  {
    "content": "The filter removes duplicate tokens in the stream. Tokens are considered to be duplicates ONLY if they have\nthe same text and position values.",
    "hierarchy": [
      "Remove Duplicates Token Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Because positions must be the same, this filter might not do what a user expects it to do based on its name.\nIt is a very specialized filter that is only useful in very specific circumstances. It has been so named for\nbrevity, even though it is potentially misleading.",
    "hierarchy": [
      "Remove Duplicates Token Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.RemoveDuplicatesTokenFilterFactory</span></span>",
    "hierarchy": [
      "Remove Duplicates Token Filter"
    ],
    "pageId": 257
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "One example of where <span class=\"code\">RemoveDuplicatesTokenFilterFactory</span> is useful in situations where a synonym file is\nbeing used in conjunction with a stemmer. In these situations, both the stemmer and the synonym filter can\ncause completely identical terms with the same positions to end up in the stream, increasing index size with\nno benefit.",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "Consider the following entry from a <span class=\"code\">synonyms.txt</span> file:",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "ÊTelevision, Televisions, TV, TVs",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "When used in the following configuration:",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SynonymGraphFilterFactory\"</span> <span class=\"fc2\">synonyms</span>=<span class=\"fc3\">\"synonyms.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.EnglishMinimalStemFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RemoveDuplicatesTokenFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "In:<span class=\"ff2\"> \"Watch TV\"</span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "Tokenizer to Synonym Filter:<span class=\"ff2\"> \"Watch\"(1) \"TV\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "Synonym Filter to Stem Filter:<span class=\"ff2\"> \"Watch\"(1) \"Television\"(2) \"Televisions\"(2) \"TV\"(2) \"TVs\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "Stem Filter to Remove Dups Filter:<span class=\"ff2\"> \"Watch\"(1) \"Television\"(2) \"Television\"(2) \"TV\"(2) \"TV\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "Out:<span class=\"ff2\"> \"Watch\"(1) \"Television\"(2) \"TV\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 258
  },
  {
    "content": "This filter reverses tokens to provide faster leading wildcard and prefix queries. Tokens without wildcards\nare not reversed.",
    "hierarchy": [
      "Reversed Wildcard Filter"
    ],
    "pageId": 258
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.ReversedWildcardFilterFactory</span></span>",
    "hierarchy": [
      "Reversed Wildcard Filter"
    ],
    "pageId": 258
  },
  {
    "content": "withOriginal\n(boolean) If true, the filter produces both original and reversed tokens at the same positions. If false,\nproduces only reversed tokens.",
    "hierarchy": [
      "Reversed Wildcard Filter"
    ],
    "pageId": 258
  },
  {
    "content": "maxPosAsterisk\n(integer, default = 2) The maximum position of the asterisk wildcard ('*') that triggers the reversal of the\nquery term. Terms with asterisks at positions above this value are not reversed.",
    "hierarchy": [
      "Reversed Wildcard Filter"
    ],
    "pageId": 258
  },
  {
    "content": "maxPosQuestion",
    "hierarchy": [
      "Reversed Wildcard Filter"
    ],
    "pageId": 258
  },
  {
    "content": "(integer, default = 1) The maximum position of the question mark wildcard ('?') that triggers the reversal\nof query term. To reverse only pure suffix queries (queries with a single leading asterisk), set this to 0 and\nmaxPosAsterisk<span class=\"ff1 fs0\"> to 1.</span>",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "maxFractionAsterisk\n(float, default = 0.0) An additional parameter that triggers the reversal if asterisk ('*') position is less than\nthis fraction of the query token length.",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "minTrailing\n(integer, default = 2) The minimum number of trailing characters in a query token after the last wildcard\ncharacter. For good performance this should be set to a value larger than 1.",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ReversedWildcardFilterFactory\"</span> <span class=\"fc2\">withOriginal</span>=<span class=\"fc3\">\"true\"</span>\nÊ   <span class=\"fc2\">maxPosAsterisk</span>=<span class=\"fc3\">\"2\"</span> <span class=\"fc2\">maxPosQuestion</span>=<span class=\"fc3\">\"1\"</span> <span class=\"fc2\">minTrailing</span>=<span class=\"fc3\">\"2\"</span> <span class=\"fc2\">maxFractionAsterisk</span>=<span class=\"fc3\">\"0\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "In:<span class=\"ff1\"> \"*foo *bar\"</span>",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"*foo\", \"*bar\"</span>",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "Out:<span class=\"ff1\"> \"oof*\", \"rab*\"</span>",
    "hierarchy": [
    ],
    "pageId": 259
  },
  {
    "content": "This filter constructs shingles, which are token n-grams, from the token stream. It combines runs of tokens\ninto a single token.",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs1\">solr.ShingleFilterFactory</span></span>",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "minShingleSize\n(integer, must be >= 2, default 2) The minimum number of tokens per shingle.",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "maxShingleSize\n(integer, must be >= <span class=\"ff2 fs1\">minShingleSize</span>, default 2) The maximum number of tokens per shingle.",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "outputUnigrams\n(boolean, default true) If true, then each individual token is also included at its original position.",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "outputUnigramsIfNoShingles\n(boolean, default false) If true, then individual tokens will be output if no shingles are possible.",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "tokenSeparator\n(string, default is \" \") The string to use when joining adjacent tokens to form a shingle.",
    "hierarchy": [
      "Shingle Filter"
    ],
    "pageId": 259
  },
  {
    "content": "Default behavior.",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ShingleFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "In:<span class=\"ff1\"> \"To be, or what?\"</span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"To\"(1), \"be\"(2), \"or\"(3), \"what\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "Out:<span class=\"ff1\"> \"To\"(1), \"To be\"(1), \"be\"(2), \"be or\"(2), \"or\"(3), \"or what\"(3), \"what\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "A shingle size of four, do not include original token.",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ShingleFilterFactory\"</span> <span class=\"fc2\">maxShingleSize</span>=<span class=\"fc3\">\"4\"</span> <span class=\"fc2\">outputUnigrams</span>=<span class=\"fc3\">\"false\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "In:<span class=\"ff1\"> \"To be, or not to be.\"</span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"To\"(1), \"be\"(2), \"or\"(3), \"not\"(4), \"to\"(5), \"be\"(6)</span>",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "Out:<span class=\"ff1\"> \"To be\"(1), \"To be or\"(1), \"To be or not\"(1), \"be or\"(2), \"be or not\"(2), \"be or not to\"(2), \"or not\"(3), \"or</span>\nnot to\"(3), \"or not to be\"(3), \"not to\"(4), \"not to be\"(4), \"to be\"(5)",
    "hierarchy": [
    ],
    "pageId": 260
  },
  {
    "content": "This filter factory instantiates a language-specific stemmer generated by Snowball. Snowball is a software\npackage that generates pattern-based word stemmers. This type of stemmer is not as accurate as a table-\nbased stemmer, but is faster and less complex. Table-driven stemmers are labor intensive to create and\nmaintain and so are typically commercial products.",
    "hierarchy": [
      "Snowball Porter Stemmer Filter"
    ],
    "pageId": 260
  },
  {
    "content": "Solr contains Snowball stemmers for Armenian, Basque, Catalan, Danish, Dutch, English, Finnish, French,\nGerman, Hungarian, Italian, Norwegian, Portuguese, Romanian, Russian, Spanish, Swedish and Turkish. For\nmore information on Snowball, visit <span class=\"link\">http://snowball.tartarus.org/</span>.",
    "hierarchy": [
      "Snowball Porter Stemmer Filter"
    ],
    "pageId": 260
  },
  {
    "content": "StopFilterFactory<span class=\"ff1 fs0\">, </span>CommonGramsFilterFactory<span class=\"ff1 fs0\">, and </span>CommonGramsQueryFilterFactory<span class=\"ff1 fs0\"> can optionally read</span>\nstopwords in Snowball format (specify <span class=\"ff2 fs2\">format=\"snowball\"</span> in the configuration of those FilterFactories).",
    "hierarchy": [
      "Snowball Porter Stemmer Filter"
    ],
    "pageId": 260
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs2\">solr.SnowballPorterFilterFactory</span></span>",
    "hierarchy": [
      "Snowball Porter Stemmer Filter"
    ],
    "pageId": 260
  },
  {
    "content": "language\n(default \"English\") The name of a language, used to select the appropriate Porter stemmer to use. Case is\nsignificant. This string is used to select a package name in the <span class=\"ff2 fs2\">org.tartarus.snowball.ext</span> class",
    "hierarchy": [
      "Snowball Porter Stemmer Filter"
    ],
    "pageId": 260
  },
  {
    "content": "hierarchy.",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "protected\nPath of a text file containing a list of protected words, one per line. Protected words will not be stemmed.\nBlank lines and lines that begin with \"#\" are ignored. This may be an absolute path, or a simple file name\nin the Solr <span class=\"ff2 fs1\">conf</span> directory.",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Default behavior:",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "In:<span class=\"ff1\"> \"flip flipped flipping\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"flip\", \"flipped\", \"flipping\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Out:<span class=\"ff1\"> \"flip\", \"flip\", \"flip\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "French stemmer, English words:",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc2\">language</span>=<span class=\"fc3\">\"French\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "In:<span class=\"ff1\"> \"flip flipped flipping\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"flip\", \"flipped\", \"flipping\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Out:<span class=\"ff1\"> \"flip\", \"flipped\", \"flipping\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Spanish stemmer, Spanish words:",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc2\">language</span>=<span class=\"fc3\">\"Spanish\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "In:<span class=\"ff1\"> \"cante canta\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"cante\", \"canta\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "Out:<span class=\"ff1\"> \"cant\", \"cant\"</span>",
    "hierarchy": [
    ],
    "pageId": 261
  },
  {
    "content": "This filter removes dots from acronyms and the substring \"'s\" from the end of tokens. This filter depends on\nthe tokens being tagged with the appropriate term-type to recognize acronyms and words with\napostrophes.",
    "hierarchy": [
      "Standard Filter"
    ],
    "pageId": 262
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.StandardFilterFactory</span></span>",
    "hierarchy": [
      "Standard Filter"
    ],
    "pageId": 262
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Standard Filter"
    ],
    "pageId": 262
  },
  {
    "content": "This filter is no longer operational in Solr when the <span class=\"code\">luceneMatchVersion</span> (in\nsolrconfig.xml<span class=\"ff2 fs1\">) is higher than \"3.1\".</span>",
    "hierarchy": [
      "Standard Filter"
    ],
    "pageId": 262
  },
  {
    "content": "This filter discards, or <span class=\"ff5\">stops</span> analysis of, tokens that are on the given stop words list. A standard stop words\nlist is included in the Solr <span class=\"code\">conf</span> directory, named <span class=\"code\">stopwords.txt</span>, which is appropriate for typical English\nlanguage text.",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.StopFilterFactory</span></span>",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "words\n(optional) The path to a file that contains a list of stop words, one per line. Blank lines and lines that begin\nwith \"#\" are ignored. This may be an absolute path, or path relative to the Solr <span class=\"code\">conf</span> directory.",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "format\n(optional) If the stopwords list has been formatted for Snowball, you can specify <span class=\"code\">format=\"snowball\"</span> so\nSolr can read the stopwords file.",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "ignoreCase\n(true/false, default false) Ignore case when testing for stop words. If true, the stop list should contain\nlowercase words.",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "Case-sensitive matching, capitalized words not stopped. Token positions skip stopped words.",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StopFilterFactory\"</span> <span class=\"fc4\">words</span>=<span class=\"fc5\">\"stopwords.txt\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "In:<span class=\"ff2\"> \"To be or what?\"</span>",
    "hierarchy": [
      "Stop Filter"
    ],
    "pageId": 262
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"To\"(1), \"be\"(2), \"or\"(3), \"what\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 263
  },
  {
    "content": "Out:<span class=\"ff2\"> \"To\"(1), \"what\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 263
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"stopwords.txt\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 263
  },
  {
    "content": "In:<span class=\"ff2\"> \"To be or what?\"</span>",
    "hierarchy": [
    ],
    "pageId": 263
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"To\"(1), \"be\"(2), \"or\"(3), \"what\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 263
  },
  {
    "content": "Out:<span class=\"ff2\"> \"what\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 263
  },
  {
    "content": "Like <span class=\"link\">Stop Filter</span>, this filter discards, or <span class=\"ff4\">stops</span> analysis of, tokens that are on the given stop words list.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "Suggest Stop Filter differs from Stop Filter in that it will not remove the last token unless it is followed by a\ntoken separator. For example, a query <span class=\"code\">\"find the\"</span> would preserve the <span class=\"code\">'the'</span> since it was not followed by a\nspace, punctuation etc., and mark it as a <span class=\"code\">KEYWORD</span> so that following filters will not change or remove it.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "By contrast, a query like “find the popsicle” would remove ‘the' as a stopword, since it’s followed by a space.\nWhen using one of the analyzing suggesters, you would normally use the ordinary <span class=\"code\">StopFilterFactory</span> in\nyour index analyzer and then SuggestStopFilter in your query analyzer.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.SuggestStopFilterFactory</span></span>",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "words\n(optional; default: <span class=\"code\">StopAnalyzer#ENGLISH_STOP_WORDS_SET</span> ) The name of a stopwords file to parse.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "format\n(optional; default: <span class=\"code\">wordset</span>) Defines how the words file will be parsed. If <span class=\"code\">words</span> is not specified, then\nformat<span class=\"ff2 fs0\"> must not be specified. The valid values for the format option are:</span>",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "wordset\nThis is the default format, which supports one word per line (including any intra-word whitespace) and\nallows whole line comments beginning with the <span class=\"code\">#</span> character. Blank lines are ignored.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "snowball\nThis format allows for multiple words specified on each line, and trailing comments may be specified\nusing the vertical line (<span class=\"code\">|</span>). Blank lines are ignored.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "ignoreCase\n(optional; default: <span class=\"ff1\">false</span>) If <span class=\"ff1\">true</span>, matching is case-insensitive.",
    "hierarchy": [
      "Suggest Stop Filter"
    ],
    "pageId": 263
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SuggestStopFilterFactory\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span>\nÊ         <span class=\"fc2\">words</span>=<span class=\"fc3\">\"stopwords.txt\"</span> <span class=\"fc2\">format</span>=<span class=\"fc3\">\"wordset\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 264
  },
  {
    "content": "In:<span class=\"code\"> \"The The\"</span>",
    "hierarchy": [
    ],
    "pageId": 264
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"the\"(1), \"the\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 264
  },
  {
    "content": "Out:<span class=\"code\"> \"the\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 264
  },
  {
    "content": "This filter does synonym mapping. Each token is looked up in the list of synonyms and if a match is found,\nthen the synonym is emitted in place of the token. The position value of the new tokens are set such they all\noccur at the same position as the original token.",
    "hierarchy": [
      "Synonym Filter"
    ],
    "pageId": 264
  },
  {
    "content": "Synonym Filter has been deprecated in favor of Synonym Graph Filter, which is required for\nmulti-term synonym support.",
    "hierarchy": [
      "Synonym Filter"
    ],
    "pageId": 264
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs3\">solr.SynonymFilterFactory</span></span>",
    "hierarchy": [
      "Synonym Filter"
    ],
    "pageId": 264
  },
  {
    "content": "For arguments and examples, see the Synonym Graph Filter below.",
    "hierarchy": [
      "Synonym Filter"
    ],
    "pageId": 264
  },
  {
    "content": "This filter maps single- or multi-token synonyms, producing a fully correct graph output. This filter is a\nreplacement for the Synonym Filter, which produces incorrect graphs for multi-token synonyms.",
    "hierarchy": [
      "Synonym Graph Filter"
    ],
    "pageId": 264
  },
  {
    "content": "If you use this filter during indexing, you must follow it with a Flatten Graph Filter to squash tokens on top of\none another like the Synonym Filter, because the indexer can't directly consume a graph. To get fully correct\npositional queries when your synonym replacements are multiple tokens, you should instead apply\nsynonyms using this filter at query time.",
    "hierarchy": [
      "Synonym Graph Filter"
    ],
    "pageId": 264
  },
  {
    "content": "Although this filter produces correct token graphs, it cannot consume an input token graph\ncorrectly.",
    "hierarchy": [
      "Synonym Graph Filter"
    ],
    "pageId": 264
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs3\">solr.SynonymGraphFilterFactory</span></span>",
    "hierarchy": [
      "Synonym Graph Filter"
    ],
    "pageId": 264
  },
  {
    "content": "synonyms\n(required) The path of a file that contains a list of synonyms, one per line. In the (default) <span class=\"ff2 fs3\">solr</span> format -\nsee the <span class=\"ff2 fs3\">format</span> argument below for alternatives - blank lines and lines that begin with “#” are ignored.",
    "hierarchy": [
      "Synonym Graph Filter"
    ],
    "pageId": 264
  },
  {
    "content": "This may be a comma-separated list of absolute paths, or paths relative to the Solr config directory.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "There are two ways to specify synonym mappings:",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "A comma-separated list of words. If the token matches any of the words, then all the words in the list\nare substituted, which will include the original token.\n•Two comma-separated lists of words with the symbol \"=>\" between them. If the token matches any\nword on the left, then the list on the right is substituted. The original token will not be included unless\nit is also in the list on the right.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "ignoreCase\n(optional; default: <span class=\"ff2 fs1\">false</span>) If <span class=\"ff2 fs1\">true</span>, synonyms will be matched case-insensitively.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "expand\n(optional; default: <span class=\"ff2 fs1\">true</span>) If <span class=\"ff2 fs1\">true</span>, a synonym will be expanded to all equivalent synonyms. If <span class=\"ff2 fs1\">false</span>, all\nequivalent synonyms will be reduced to the first in the list.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "format\n(optional; default: <span class=\"ff2 fs1\">solr</span>) Controls how the synonyms will be parsed. The short names <span class=\"ff2 fs1\">solr</span> (for\nSolrSynonymParser)<span class=\"ff1 fs0\"> and </span>wordnet<span class=\"ff1 fs0\"> (for </span>WordnetSynonymParser<span class=\"ff1 fs0\"> ) are supported, or you may alternatively</span>\nsupply the name of your own <span class=\"ff2 fs1\">SynonymMap.Builder</span> subclass.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "tokenizerFactory\n(optional; default: <span class=\"ff2 fs1\">WhitespaceTokenizerFactory</span>) The name of the tokenizer factory to use when parsing\nthe synonyms file. Arguments with the name prefix <span class=\"ff2 fs1\">tokenizerFactory.*</span> will be supplied as init params\nto the specified tokenizer factory.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "Any arguments not consumed by the synonym filter factory, including those without the\ntokenizerFactory.*<span class=\"ff1 fs0\"> prefix, will also be supplied as init params to the tokenizer factory.</span>",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "If <span class=\"ff2 fs1\">tokenizerFactory</span> is specified, then <span class=\"ff2 fs1\">analyzer</span> may not be, and vice versa.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "analyzer\n(optional; default: <span class=\"ff2 fs1\">WhitespaceTokenizerFactory</span>) The name of the analyzer class to use when parsing the\nsynonyms file. If <span class=\"ff2 fs1\">analyzer</span> is specified, then <span class=\"ff2 fs1\">tokenizerFactory</span> may not be, and vice versa.",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "For the following examples, assume a synonyms file named <span class=\"ff2 fs1\">mysynonyms.txt</span>:",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "couch,sofa,divan\nteh => the\nhuge,ginormous,humungous => large\nsmall => tiny,teeny,weeny",
    "hierarchy": [
    ],
    "pageId": 265
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SynonymGraphFilterFactory\"</span> <span class=\"fc2\">synonyms</span>=<span class=\"fc3\">\"mysynonyms.txt\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FlattenGraphFilterFactory\"<span class=\"fc0\">/></span></span> <span class=\"fc4\"><!-- required on index analyzers after graph</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SynonymGraphFilterFactory\"</span> <span class=\"fc2\">synonyms</span>=<span class=\"fc3\">\"mysynonyms.txt\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "In:<span class=\"code\"> \"teh small couch\"</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"teh\"(1), \"small\"(2), \"couch\"(3)</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "Out:<span class=\"code\"> \"the\"(1), \"tiny\"(2), \"teeny\"(2), \"weeny\"(2), \"couch\"(3), \"sofa\"(3), \"divan\"(3)</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "In:<span class=\"code\"> \"teh ginormous, humungous sofa\"</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"teh\"(1), \"ginormous\"(2), \"humungous\"(3), \"sofa\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "Out:<span class=\"code\"> \"the\"(1), \"large\"(2), \"large\"(3), \"couch\"(4), \"sofa\"(4), \"divan\"(4)</span>",
    "hierarchy": [
    ],
    "pageId": 266
  },
  {
    "content": "This filter adds the numeric character offsets of the token as a payload value for that token.",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.TokenOffsetPayloadTokenFilterFactory</span></span>",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TokenOffsetPayloadTokenFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "In:<span class=\"code\"> \"bing bang boom\"</span>",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"bing\", \"bang\", \"boom\"</span>",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "Out:<span class=\"code\"> \"bing\"[0,4], \"bang\"[5,9], \"boom\"[10,14]</span>",
    "hierarchy": [
      "Token Offset Payload Filter"
    ],
    "pageId": 266
  },
  {
    "content": "This filter trims leading and/or trailing whitespace from tokens. Most tokenizers break tokens at whitespace,\nso this filter is most often used for special situations.",
    "hierarchy": [
      "Trim Filter"
    ],
    "pageId": 266
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.TrimFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 267
  },
  {
    "content": "The PatternTokenizerFactory configuration used here splits the input on simple commas, it does not remove\nwhitespace.",
    "hierarchy": [
    ],
    "pageId": 267
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternTokenizerFactory\"</span> <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\",\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TrimFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 267
  },
  {
    "content": "In:<span class=\"ff2\"> \"one, two , three ,four \"</span>",
    "hierarchy": [
    ],
    "pageId": 267
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"one\", \" two \", \" three \", \"four \"</span>",
    "hierarchy": [
    ],
    "pageId": 267
  },
  {
    "content": "Out:<span class=\"ff2\"> \"one\", \"two\", \"three\", \"four\"</span>",
    "hierarchy": [
    ],
    "pageId": 267
  },
  {
    "content": "This filter adds the token's type, as an encoded byte sequence, as its payload.",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.TypeAsPayloadTokenFilterFactory</span></span>",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeAsPayloadTokenFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "In:<span class=\"ff2\"> \"Pay Bob's I.O.U.\"</span>",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"Pay\", \"Bob's\", \"I.O.U.\"</span>",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "Out:<span class=\"ff2\"> \"Pay\"[<ALPHANUM>], \"Bob's\"[<APOSTROPHE>], \"I.O.U.\"[<ACRONYM>]</span>",
    "hierarchy": [
      "Type As Payload Filter"
    ],
    "pageId": 267
  },
  {
    "content": "This filter adds the token's type, as a token at the same position as the token, optionally with a configurable\nprefix prepended.",
    "hierarchy": [
      "Type As Synonym Filter"
    ],
    "pageId": 267
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.TypeAsSynonymFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 268
  },
  {
    "content": "prefix\n(optional) The prefix to prepend to the token's type.",
    "hierarchy": [
    ],
    "pageId": 268
  },
  {
    "content": "With the example below, each token's type will be emitted verbatim at the same position:",
    "hierarchy": [
    ],
    "pageId": 268
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeAsSynonymFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 268
  },
  {
    "content": "With the example below, for a token \"example.com\" with type <span class=\"code\"><URL></span>, the token emitted at the same position\nwill be \"_type_<URL>\":",
    "hierarchy": [
    ],
    "pageId": 268
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.UAX29URLEmailTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeAsSynonymFilterFactory\"</span> <span class=\"fc2\">prefix</span>=<span class=\"fc3\">\"_type_\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 268
  },
  {
    "content": "This filter blacklists or whitelists a specified list of token types, assuming the tokens have type metadata\nassociated with them. For example, the <span class=\"link\">UAX29 URL Email Tokenizer</span> emits \"<URL>\" and \"<EMAIL>\" typed\ntokens, as well as other types. This filter would allow you to pull out only e-mail addresses from text as\ntokens, if you wish.",
    "hierarchy": [
      "Type Token Filter"
    ],
    "pageId": 268
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.TypeTokenFilterFactory</span></span>",
    "hierarchy": [
      "Type Token Filter"
    ],
    "pageId": 268
  },
  {
    "content": "types\nDefines the location of a file of types to filter.",
    "hierarchy": [
      "Type Token Filter"
    ],
    "pageId": 268
  },
  {
    "content": "useWhitelist\nIf <span class=\"ff1\">true</span>, the file defined in <span class=\"code\">types</span> should be used as include list. If <span class=\"ff1\">false</span>, or undefined, the file defined in\ntypes<span class=\"ff2 fs0\"> is used as a blacklist.</span>",
    "hierarchy": [
      "Type Token Filter"
    ],
    "pageId": 268
  },
  {
    "content": "Ê <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc2\">types</span>=<span class=\"fc3\">\"stoptypes.txt\"</span> <span class=\"fc2\">useWhitelist</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 269
  },
  {
    "content": "This filter splits tokens at word delimiters.",
    "hierarchy": [
      "Word Delimiter Filter"
    ],
    "pageId": 269
  },
  {
    "content": "Word Delimiter Filter has been deprecated in favor of Word Delimiter Graph Filter, which is\nrequired to produce a correct token graph so that e.g., phrase queries can work correctly.",
    "hierarchy": [
      "Word Delimiter Filter"
    ],
    "pageId": 269
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs3\">solr.WordDelimiterFilterFactory</span></span>",
    "hierarchy": [
      "Word Delimiter Filter"
    ],
    "pageId": 269
  },
  {
    "content": "For a full description, including arguments and examples, see the Word Delimiter Graph Filter below.",
    "hierarchy": [
      "Word Delimiter Filter"
    ],
    "pageId": 269
  },
  {
    "content": "This filter splits tokens at word delimiters.",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "If you use this filter during indexing, you must follow it with a Flatten Graph Filter to squash tokens on top of\none another like the Word Delimiter Filter, because the indexer can't directly consume a graph. To get fully\ncorrect positional queries when tokens are split, you should instead use this filter at query time.",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "Note: although this filter produces correct token graphs, it cannot consume an input token graph correctly.",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "The rules for determining delimiters are determined as follows:",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "A change in case within a word: \"CamelCase\" -> \"Camel\", \"Case\". This can be disabled by setting\nsplitOnCaseChange=\"0\"<span class=\"code\">.</span>\n•A transition from alpha to numeric characters or vice versa: \"Gonzo5000\" -> \"Gonzo\", \"5000\" \"4500XL\" ->\n\"4500\", \"XL\". This can be disabled by setting <span class=\"ff1 fs3\">splitOnNumerics=\"0\"</span>.\n•Non-alphanumeric characters (discarded): \"hot-spot\" -> \"hot\", \"spot\"",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "A trailing \"'s\" is removed: \"O'Reilly’s\" -> \"O\", \"Reilly\"",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "Any leading or trailing delimiters are discarded: \"--hot-spot--\" -> \"hot\", \"spot\"",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs3\">solr.WordDelimiterGraphFilterFactory</span></span>",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "generateWordParts\n(integer, default 1) If non-zero, splits words at delimiters. For example:\"CamelCase\", \"hot-spot\" ->\n\"Camel\", \"Case\", \"hot\", \"spot\"",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "generateNumberParts\n(integer, default 1) If non-zero, splits numeric strings at delimiters:\"1947-32\" ->*\"1947\", \"32\"",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "splitOnCaseChange",
    "hierarchy": [
      "Word Delimiter Graph Filter"
    ],
    "pageId": 269
  },
  {
    "content": "(integer, default 1) If 0, words are not split on camel-case changes:\"BugBlaster-XL\" -> \"BugBlaster\", \"XL\".\nExample 1 below illustrates the default (non-zero) splitting behavior.",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "splitOnNumerics\n(integer, default 1) If 0, don't split words on transitions from alpha to numeric:\"FemBot3000\" -> \"Fem\",\n\"Bot3000\"",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "catenateWords\n(integer, default 0) If non-zero, maximal runs of word parts will be joined: \"hot-spot-sensor's\" ->\n\"hotspotsensor\"",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "catenateNumbers\n(integer, default 0) If non-zero, maximal runs of number parts will be joined: 1947-32\" -> \"194732\"",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "catenateAll\n(0/1, default 0) If non-zero, runs of word and number parts will be joined: \"Zap-Master-9000\" ->\n\"ZapMaster9000\"",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "preserveOriginal\n(integer, default 0) If non-zero, the original token is preserved: \"Zap-Master-9000\" -> \"Zap-Master-9000\",\n\"Zap\", \"Master\", \"9000\"",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "protected\n(optional) The pathname of a file that contains a list of protected words that should be passed through\nwithout splitting.",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "stemEnglishPossessive\n(integer, default 1) If 1, strips the possessive <span class=\"ff2 fs1\">'s</span> from each subword.",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "types\n(optional) The pathname of a file that contains <span class=\"code\">character => type</span> mappings, which enable customization\nof this filter's splitting behavior. Recognized character types: <span class=\"ff2 fs1\">LOWER</span>, <span class=\"ff2 fs1\">UPPER</span>, <span class=\"ff2 fs1\">ALPHA</span>, <span class=\"ff2 fs1\">DIGIT</span>, <span class=\"ff2 fs1\">ALPHANUM</span>, and\nSUBWORD_DELIM<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "The default for any character without a customized mapping is computed from Unicode character\nproperties. Blank lines and comment lines starting with '#' are ignored. An example file:",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "# Don't split numbers at '$', '.' or ','\n$ => DIGIT\n. => DIGIT\n\\u002C => DIGIT",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "# Don't split on ZWJ: http://en.wikipedia.org/wiki/Zero-width_joiner\n\\u200D => ALPHANUM",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "Default behavior. The whitespace tokenizer is used here to preserve non-alphanumeric characters.",
    "hierarchy": [
    ],
    "pageId": 270
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WordDelimiterGraphFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FlattenGraphFilterFactory\"<span class=\"fc0\">/></span></span> <span class=\"fc4\"><!-- required on index analyzers after graph</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WordDelimiterGraphFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "In:<span class=\"code\"> \"hot-spot RoboBlaster/9000 100XL\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"hot-spot\", \"RoboBlaster/9000\", \"100XL\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Out:<span class=\"code\"> \"hot\", \"spot\", \"Robo\", \"Blaster\", \"9000\", \"100\", \"XL\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Do not split on case changes, and do not generate number parts. Note that by not generating number parts,\ntokens containing only numeric parts are ultimately discarded.",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WordDelimiterGraphFilterFactory\"</span> <span class=\"fc2\">generateNumberParts</span>=<span class=\"fc3\">\"0\"</span> <span class=\"fc2\">splitOnCaseChange</span>\n=<span class=\"fc3\">\"0\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "In:<span class=\"code\"> \"hot-spot RoboBlaster/9000 100-42\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"hot-spot\", \"RoboBlaster/9000\", \"100-42\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Out:<span class=\"code\"> \"hot\", \"spot\", \"RoboBlaster\", \"9000\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Concatenate word parts and number parts, but not word and number parts that occur in the same token.",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WordDelimiterGraphFilterFactory\"</span> <span class=\"fc2\">catenateWords</span>=<span class=\"fc3\">\"1\"</span> <span class=\"fc2\">catenateNumbers</span>=<span class=\"fc3\">\"1\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "In:<span class=\"code\"> \"hot-spot 100+42 XL40\"</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"hot-spot\"(1), \"100+42\"(2), \"XL40\"(3)</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Out:<span class=\"code\"> \"hot\"(1), \"spot\"(2), \"hotspot\"(2), \"100\"(3), \"42\"(4), \"10042\"(4), \"XL\"(5), \"40\"(6)</span>",
    "hierarchy": [
    ],
    "pageId": 271
  },
  {
    "content": "Concatenate all. Word and/or number parts are joined together.",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WordDelimiterGraphFilterFactory\"</span> <span class=\"fc2\">catenateAll</span>=<span class=\"fc3\">\"1\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "In:<span class=\"ff2\"> \"XL-4000/ES\"</span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"XL-4000/ES\"(1)</span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Out:<span class=\"ff2\"> \"XL\"(1), \"4000\"(2), \"ES\"(3), \"XL4000ES\"(3)</span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Using a protected words list that contains \"AstroBlaster\" and \"XL-5000\" (among others).",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WordDelimiterGraphFilterFactory\"</span> <span class=\"fc2\">protected</span>=<span class=\"fc3\">\"protwords.txt\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "In:<span class=\"ff2\"> \"FooBar AstroBlaster XL-5000 ==ES-34-\"</span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"FooBar\", \"AstroBlaster\", \"XL-5000\", \"==ES-34-\"</span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "Out:<span class=\"ff2\"> \"FooBar\", \"FooBar\", \"AstroBlaster\", \"XL-5000\", \"ES\", \"34\"</span>",
    "hierarchy": [
    ],
    "pageId": 272
  },
  {
    "content": "CharFilter is a component that pre-processes input characters.",
    "hierarchy": [
      "CharFilterFactories"
    ],
    "pageId": 273
  },
  {
    "content": "CharFilters can be chained like Token Filters and placed in front of a Tokenizer. CharFilters can add, change,\nor remove characters while preserving the original character offsets to support features like highlighting.",
    "hierarchy": [
      "CharFilterFactories"
    ],
    "pageId": 273
  },
  {
    "content": "This filter creates <span class=\"code\">org.apache.lucene.analysis.MappingCharFilter</span>, which can be used for changing one\nstring to another (for example, for normalizing <span class=\"code\">é</span> to <span class=\"code\">e</span>.).",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "This filter requires specifying a <span class=\"code\">mapping</span> argument, which is the path and name of a file containing the\nmappings to perform.",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "Example:",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "Ê <span class=\"fc2\"><charFilter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.MappingCharFilterFactory\"</span> <span class=\"fc3\">mapping</span>=<span class=\"fc4\">\"mapping-FoldToASCII.txt\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">...<span class=\"fc2\">></span></span>\nÊ [...]",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "Mapping file syntax:",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "Comment lines beginning with a hash mark (<span class=\"code\">#</span>), as well as blank lines, are ignored.",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "Each non-comment, non-blank line consists of a mapping of the form: <span class=\"code\">\"source\" => \"target\"</span>",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "◦Double-quoted source string, optional whitespace, an arrow (<span class=\"code\">=></span>), optional whitespace, double-quoted\ntarget string.\nTrailing comments on mapping lines are not allowed.",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "The source string must contain at least one character, but the target string may be empty.",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "The following character escape sequences are recognized within source and target strings:",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\\\\\\nU+005C\n\"\\\\\" => \"/\"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\\"\"\nU+0022\n\"\\\"and\\\"\" => \"'and'\"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\b\nbackspace (BS)U+0008\n\"\\b\" => \" \"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\t\ntab (HT)U+0009\n\"\\t\" => \",\"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\n\nnewline (LF)U+000A\n\"\\n\" => \"<br>\"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\f\nform feed (FF)U+000C\n\"\\f\" => \"\\n\"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\r\ncarriage return (CR)U+000D\n\"\\r\" => \"/carriage-\nreturn/\"",
    "hierarchy": [
      "CharFilterFactories",
      "solr.MappingCharFilterFactory"
    ],
    "pageId": 273
  },
  {
    "content": "\\uXXXX\nUnicode char referenced by\nthe 4 hex digits\nU+XXXX\n\"\\uFEFF\" => \"\"",
    "hierarchy": [
    ],
    "pageId": 274
  },
  {
    "content": "◦A backslash followed by any other character is interpreted as if the character were present without\nthe backslash.",
    "hierarchy": [
    ],
    "pageId": 274
  },
  {
    "content": "This filter creates <span class=\"ff2 fs1\">org.apache.solr.analysis.HTMLStripCharFilter</span>. This CharFilter strips HTML from the\ninput stream and passes the result to another CharFilter or a Tokenizer.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "This filter:",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Removes HTML/XML tags while preserving other content.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Removes attributes within tags and supports optional attribute quoting.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Removes XML processing instructions, such as: <?foo bar?>",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Removes XML comments.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Removes XML elements starting with <!>.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Removes contents of <script> and <style> elements.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Handles XML comments inside these elements (normal comment processing will not always work).",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Replaces numeric character entities references like <span class=\"ff2 fs1\">&#65</span>; or <span class=\"ff2 fs1\">&#x7f</span>; with the corresponding character.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "The terminating ';' is optional if the entity reference at the end of the input; otherwise the terminating ';'\nis mandatory, to avoid false matches on something like \"Alpha&Omega Corp\".",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Replaces all named character entity references with the corresponding character.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "&nbsp; is replaced with a space instead of the 0xa0 character.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Newlines are substituted for block-level elements.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "<CDATA> sections are recognized.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Inline tags, such as <span class=\"ff2 fs1\"><b></span>, <span class=\"ff2 fs1\"><i></span>, or <span class=\"ff2 fs1\"><span></span> will be removed.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "Uppercase character entities like <span class=\"ff2 fs1\">quot</span>, <span class=\"ff2 fs1\">gt</span>, <span class=\"ff2 fs1\">lt</span> and <span class=\"ff2 fs1\">amp</span> are recognized and handled as lowercase.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "The input need not be an HTML document. The filter removes only constructs that look like\nHTML. If the input doesn't include anything that looks like HTML, the filter won’t remove\nany input.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "The table below presents examples of HTML stripping.",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "my <a href=\"www.foo.bar\">link</a>\nmy link",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "<br>hello<!--comment-->\nhello",
    "hierarchy": [
      "solr.HTMLStripCharFilterFactory"
    ],
    "pageId": 274
  },
  {
    "content": "hello<script><!-- f('<!--internal--\n></script>'); --></script>\nhello",
    "hierarchy": [
    ],
    "pageId": 275
  },
  {
    "content": "if a<b then print a;\nif a<b then print a;",
    "hierarchy": [
    ],
    "pageId": 275
  },
  {
    "content": "hello <td height=22 nowrap align=\"left\">\nhello",
    "hierarchy": [
    ],
    "pageId": 275
  },
  {
    "content": "a<b &#65 Alpha&Omega<span class=\"code\"> Ωa<b A Alpha&Omega Ω</span>",
    "hierarchy": [
    ],
    "pageId": 275
  },
  {
    "content": "Example:",
    "hierarchy": [
    ],
    "pageId": 275
  },
  {
    "content": "Ê <span class=\"fc1\"><charFilter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.HTMLStripCharFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">...<span class=\"fc1\">></span></span>\nÊ [...]",
    "hierarchy": [
    ],
    "pageId": 275
  },
  {
    "content": "This filter performs pre-tokenization Unicode normalization using <span class=\"link\">ICU4J</span>.",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "Arguments:",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "name\nA <span class=\"link\">Unicode Normalization Form</span>, one of <span class=\"ff2 fs1\">nfc</span>, <span class=\"ff2 fs1\">nfkc</span>, <span class=\"ff2 fs1\">nfkc_cf</span>. Default is <span class=\"ff2 fs1\">nfkc_cf</span>.",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "mode\nEither <span class=\"ff2 fs1\">compose</span> or <span class=\"ff2 fs1\">decompose</span>. Default is <span class=\"ff2 fs1\">compose</span>. Use <span class=\"ff2 fs1\">decompose</span> with <span class=\"ff2 fs1\">name=\"nfc\"</span> or <span class=\"ff2 fs1\">name=\"nfkc\"</span> to get\nNFD or NFKD, respectively.",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "filter\nA <span class=\"link\">UnicodeSet</span> pattern. Codepoints outside the set are always left unchanged. Default is <span class=\"ff2 fs1\">[]</span> (the null set, no\nfiltering - all codepoints are subject to normalization).",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "Example:",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "Ê <span class=\"fc1\"><charFilter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ICUNormalizer2CharFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">...<span class=\"fc1\">></span></span>\nÊ [...]",
    "hierarchy": [
      "solr.ICUNormalizer2CharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "This filter uses <span class=\"link\">regular expressions</span> to replace or change character patterns.",
    "hierarchy": [
      "solr.PatternReplaceCharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "Arguments:",
    "hierarchy": [
      "solr.PatternReplaceCharFilterFactory"
    ],
    "pageId": 275
  },
  {
    "content": "pattern\nthe regular expression pattern to apply to the incoming text.",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "replacement\nthe text to use to replace matching patterns.",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "You can configure this filter in <span class=\"ff1 fs0\">schema.xml</span> like this:",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "Ê <span class=\"fc1\"><charFilter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PatternReplaceCharFilterFactory\"</span>\nÊ            <span class=\"fc2\">pattern</span>=<span class=\"fc3\">\"([nN][oO]\\.)\\s*(\\d+)\"</span> <span class=\"fc2\">replacement</span>=<span class=\"fc3\">\"$1$2\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">...<span class=\"fc1\">></span></span>\nÊ [...]",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "The table below presents examples of regex-based pattern replacement:",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "see-ing looking\n(\\w+)(ing)$1\nsee-ing lookRemoves \"ing\" from the end of\nword.",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "see-ing looking\n(\\w+)ing$1\nsee-ing lookSame as above. 2nd\nparentheses can be omitted.",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "No.1 NO. no. 543\n[nN][oO]\\.\\s*(\\d+\n)\n#$1\n#1 NO. #543Replace some string literals",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "abc=1234=5678\n(\\w+)=(\\d+)=(\\d+)$3=$1=$2\n5678=abc=1234Change the order of the\ngroups.",
    "hierarchy": [
    ],
    "pageId": 276
  },
  {
    "content": "This section contains information about tokenizers and filters related to character set conversion or for use\nwith specific languages.",
    "hierarchy": [
      "Language Analysis"
    ],
    "pageId": 277
  },
  {
    "content": "For the European languages, tokenization is fairly straightforward. Tokens are delimited by white space\nand/or a relatively small set of punctuation characters.",
    "hierarchy": [
      "Language Analysis"
    ],
    "pageId": 277
  },
  {
    "content": "In other languages the tokenization rules are often not so simple. Some European languages may also\nrequire special tokenization rules, such as rules for decompounding German words.",
    "hierarchy": [
      "Language Analysis"
    ],
    "pageId": 277
  },
  {
    "content": "For information about language detection at index time, see <span class=\"link\">Detecting Languages During Indexing</span>.",
    "hierarchy": [
      "Language Analysis"
    ],
    "pageId": 277
  },
  {
    "content": "Protects words from being modified by stemmers. A customized protected word list may be specified with\nthe \"protected\" attribute in the schema. Any words in the protected word list will not be modified by any\nstemmer in Solr.",
    "hierarchy": [
      "Language Analysis",
      "KeywordMarkerFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "A sample Solr <span class=\"code\">protwords.txt</span> with comments can be found in the <span class=\"code\">sample_techproducts_configs</span> <span class=\"link\">config set</span>\ndirectory:",
    "hierarchy": [
      "Language Analysis",
      "KeywordMarkerFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "Ê <span class=\"fc3\"><analyzer></span>\nÊ   <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ   <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.KeywordMarkerFilterFactory\"</span> <span class=\"fc4\">protected</span>=<span class=\"fc5\">\"protwords.txt\"</span> <span class=\"fc3\">/></span>\nÊ   <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.PorterStemFilterFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"></analyzer></span>",
    "hierarchy": [
      "Language Analysis",
      "KeywordMarkerFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "Emits each token twice, one with the <span class=\"code\">KEYWORD</span> attribute and once without.",
    "hierarchy": [
      "Language Analysis",
      "KeywordRepeatFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "If placed before a stemmer, the result will be that you will get the unstemmed token preserved on the same\nposition as the stemmed one. Queries matching the original exact term will get a better score while still\nmaintaining the recall benefit of stemming. Another advantage of keeping the original token is that wildcard\ntruncation will work as expected.",
    "hierarchy": [
      "Language Analysis",
      "KeywordRepeatFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "To configure, add the <span class=\"code\">KeywordRepeatFilterFactory</span> early in the analysis chain. It is recommended to also\ninclude <span class=\"code\">RemoveDuplicatesTokenFilterFactory</span> to avoid duplicates when tokens are not stemmed.",
    "hierarchy": [
      "Language Analysis",
      "KeywordRepeatFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "A sample fieldType configuration could look like this:",
    "hierarchy": [
      "Language Analysis",
      "KeywordRepeatFilterFactory"
    ],
    "pageId": 277
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeywordRepeatFilterFactory\"</span> <span class=\"fc0\">/></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PorterStemFilterFactory\"</span> <span class=\"fc0\">/></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RemoveDuplicatesTokenFilterFactory\"</span> <span class=\"fc0\">/></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 278
  },
  {
    "content": "When adding the same token twice, it will also score twice (double), so you may have to re-\ntune your ranking rules.",
    "hierarchy": [
    ],
    "pageId": 278
  },
  {
    "content": "Overrides stemming algorithms by applying a custom mapping, then protecting these terms from being\nmodified by stemmers.",
    "hierarchy": [
      "StemmerOverrideFilterFactory"
    ],
    "pageId": 278
  },
  {
    "content": "A customized mapping of words to stems, in a tab-separated file, can be specified to the \"dictionary\"\nattribute in the schema. Words in this mapping will be stemmed to the stems from the file, and will not be\nfurther changed by any stemmer.",
    "hierarchy": [
      "StemmerOverrideFilterFactory"
    ],
    "pageId": 278
  },
  {
    "content": "A sample <span class=\"fc6\">stemdict.txt</span> with comments can be found in the Source Repository.",
    "hierarchy": [
      "StemmerOverrideFilterFactory"
    ],
    "pageId": 278
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.WhitespaceTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StemmerOverrideFilterFactory\"</span> <span class=\"fc2\">dictionary</span>=<span class=\"fc3\">\"stemdict.txt\"</span> <span class=\"fc0\">/></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PorterStemFilterFactory\"</span> <span class=\"fc0\">/></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
      "StemmerOverrideFilterFactory"
    ],
    "pageId": 278
  },
  {
    "content": "This filter splits, or <span class=\"ff5\">decompounds</span>, compound words into individual words using a dictionary of the\ncomponent words. Each input token is passed through unchanged. If it can also be decompounded into\nsubwords, each subword is also added to the stream at the same logical position.",
    "hierarchy": [
      "Dictionary Compound Word Token Filter"
    ],
    "pageId": 278
  },
  {
    "content": "Compound words are most commonly found in Germanic languages.",
    "hierarchy": [
      "Dictionary Compound Word Token Filter"
    ],
    "pageId": 278
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs3\">solr.DictionaryCompoundWordTokenFilterFactory</span></span>",
    "hierarchy": [
      "Dictionary Compound Word Token Filter"
    ],
    "pageId": 278
  },
  {
    "content": "dictionary\n(required) The path of a file that contains a list of simple words, one per line. Blank lines and lines that\nbegin with \"#\" are ignored. This path may be an absolute path, or path relative to the Solr config\ndirectory.",
    "hierarchy": [
      "Dictionary Compound Word Token Filter"
    ],
    "pageId": 278
  },
  {
    "content": "minWordSize\n(integer, default 5) Any token shorter than this is not decompounded.",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "minSubwordSize\n(integer, default 2) Subwords shorter than this are not emitted as tokens.",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "maxSubwordSize\n(integer, default 15) Subwords longer than this are not emitted as tokens.",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "onlyLongestMatch\n(true/false) If true (the default), only the longest matching subwords will generate new tokens.",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "Assume that <span class=\"ff1 fs0\">germanwords.txt</span> contains at least the following words: <span class=\"ff1 fs0\">dumm kopf donau dampf schiff</span>",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DictionaryCompoundWordTokenFilterFactory\"</span> <span class=\"fc2\">dictionary</span>=<span class=\"fc3\">\"germanwords.txt\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "In:<span class=\"ff2\"> \"Donaudampfschiff dummkopf\"</span>",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"Donaudampfschiff\"(1), \"dummkopf\"(2),</span>",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "Out:<span class=\"ff2\"> \"Donaudampfschiff\"(1), \"Donau\"(1), \"dampf\"(1), \"schiff\"(1), \"dummkopf\"(2), \"dumm\"(2), \"kopf\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 279
  },
  {
    "content": "Unicode Collation is a language-sensitive method of sorting text that can also be used for advanced search\npurposes.",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "Unicode Collation in Solr is fast, because all the work is done at index time.",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "Rather than specifying an analyzer within <span class=\"ff1 fs0\"><fieldtype … class=\"solr.TextField\"></span>, the\nsolr.CollationField<span class=\"ff2 fs1\"> and </span>solr.ICUCollationField<span class=\"ff2 fs1\"> field type classes provide this functionality.</span>\nsolr.ICUCollationField<span class=\"ff2 fs1\">, which is backed by <span class=\"link\">the ICU4J library</span>, provides more flexible configuration, has</span>\nmore locales, is significantly faster, and requires less memory and less index space, since its keys are smaller\nthan those produced by the JDK implementation that backs <span class=\"ff1 fs0\">solr.CollationField</span>.",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "solr.ICUCollationField<span class=\"ff2 fs1\"> is included in the Solr </span>analysis-extras<span class=\"ff2 fs1\"> contrib - see </span>solr/contrib/analysis-\nextras/README.txt<span class=\"ff2 fs1\"> for instructions on which jars you need to add to your </span>SOLR_HOME/lib<span class=\"ff2 fs1\"> in order to use it.</span>",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "solr.ICUCollationField<span class=\"ff2 fs1\"> and </span>solr.CollationField<span class=\"ff2 fs1\"> fields can be created in two ways:</span>",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "Based upon a system collator associated with a Locale.",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "Based upon a tailored <span class=\"ff1 fs0\">RuleBasedCollator</span> ruleset.",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "Using a System collator:",
    "hierarchy": [
      "Unicode Collation"
    ],
    "pageId": 279
  },
  {
    "content": "locale\n(required) <span class=\"link\">RFC 3066</span> locale ID. See <span class=\"link\">the ICU locale explorer</span> for a list of supported locales.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "strength\nValid values are <span class=\"ff1 fs0\">primary</span>, <span class=\"ff1 fs0\">secondary</span>, <span class=\"ff1 fs0\">tertiary</span>, <span class=\"ff1 fs0\">quaternary</span>, or <span class=\"ff1 fs0\">identical</span>. See <span class=\"link\">Comparison Levels in ICU</span>\nCollation Concepts<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "decomposition\nValid values are <span class=\"ff1 fs0\">no</span> or <span class=\"ff1 fs0\">canonical</span>. See <span class=\"link\">Normalization in ICU Collation Concepts</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "Using a Tailored ruleset:",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "custom\n(required) Path to a UTF-8 text file containing rules supported by the ICU <span class=\"ff1 fs0\">RuleBasedCollator</span>",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "strength\nValid values are <span class=\"ff1 fs0\">primary</span>, <span class=\"ff1 fs0\">secondary</span>, <span class=\"ff1 fs0\">tertiary</span>, <span class=\"ff1 fs0\">quaternary</span>, or <span class=\"ff1 fs0\">identical</span>. See <span class=\"link\">Comparison Levels in ICU</span>\nCollation Concepts<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "decomposition\nValid values are <span class=\"ff1 fs0\">no</span> or <span class=\"ff1 fs0\">canonical</span>. See <span class=\"link\">Normalization in ICU Collation Concepts</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "Expert options:",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "alternate\nValid values are <span class=\"ff1 fs0\">shifted</span> or <span class=\"ff1 fs0\">non-ignorable</span>. Can be used to ignore punctuation/whitespace.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "caseLevel\n(true/false) If true, in combination with <span class=\"ff1 fs0\">strength=\"primary\"</span>, accents are ignored but case is taken into\naccount. The default is false. See <span class=\"link\">CaseLevel in ICU Collation Concepts</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "caseFirst\nValid values are <span class=\"ff1 fs0\">lower</span> or <span class=\"ff1 fs0\">upper</span>. Useful to control which is sorted first when case is not ignored.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "numeric\n(true/false) If true, digits are sorted according to numeric value, e.g., foobar-9 sorts before foobar-10. The\ndefault is false.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "variableTop\nSingle character or contraction. Controls what is variable for <span class=\"ff1 fs0\">alternate</span>.",
    "hierarchy": [
    ],
    "pageId": 280
  },
  {
    "content": "In this example, text is sorted according to the default German rules provided by ICU4J.",
    "hierarchy": [
      "Sorting Text for a Specific Language"
    ],
    "pageId": 280
  },
  {
    "content": "Locales are typically defined as a combination of language and country, but you can specify just the\nlanguage if you want. For example, if you specify \"de\" as the language, you will get sorting that works well\nfor the German language. If you specify \"de\" as the language and \"CH\" as the country, you will get German\nsorting specifically tailored for Switzerland.",
    "hierarchy": [
      "Sorting Text for a Specific Language"
    ],
    "pageId": 280
  },
  {
    "content": "Ê          <span class=\"fc3\">locale</span>=<span class=\"fc4\">\"de\"</span>\nÊ          <span class=\"fc3\">strength</span>=<span class=\"fc4\">\"primary\"</span> <span class=\"fc1\">/></span>\n...",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "In the example above, we defined the strength as \"primary\". The strength of the collation determines how\nstrict the sort order will be, but it also depends upon the language. For example, in English, \"primary\"\nstrength ignores differences in case and accents.",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "Another example:",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "Ê          <span class=\"fc3\">locale</span>=<span class=\"fc4\">\"pl_PL\"</span>\nÊ          <span class=\"fc3\">strength</span>=<span class=\"fc4\">\"secondary\"</span> <span class=\"fc1\">/></span>\n...",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "The type will be used for the fields where the data contains Polish text. The \"secondary\" strength will ignore\ncase differences, but, unlike \"primary\" strength, a letter with diacritic(s) will be sorted differently from the\nsame base letter without diacritics.",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "An example using the \"city_sort\" field to sort:",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "q=*:*&fl=city&sort=city_sort+asc",
    "hierarchy": [
    ],
    "pageId": 281
  },
  {
    "content": "There are two approaches to supporting multiple languages: if there is a small list of languages you wish to\nsupport, consider defining collated fields for each language and using <span class=\"ff1 fs2\">copyField</span>. However, adding a large\nnumber of sort fields can increase disk and indexing costs. An alternative approach is to use the Unicode\ndefault<span class=\"ff2 fs0\"> collator.</span>",
    "hierarchy": [
      "Sorting Text for Multiple Languages"
    ],
    "pageId": 281
  },
  {
    "content": "The Unicode <span class=\"ff1 fs2\">default</span> or <span class=\"ff1 fs2\">ROOT</span> locale has rules that are designed to work well for most languages. To use the\ndefault<span class=\"ff2 fs0\"> locale, simply define the locale as the empty string. This Unicode default sort is still significantly</span>\nmore advanced than the standard Solr sort.",
    "hierarchy": [
      "Sorting Text for Multiple Languages"
    ],
    "pageId": 281
  },
  {
    "content": "Ê          <span class=\"fc2\">locale</span>=<span class=\"fc3\">\"\"</span>\nÊ          <span class=\"fc2\">strength</span>=<span class=\"fc3\">\"primary\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
    ],
    "pageId": 282
  },
  {
    "content": "You can define your own set of sorting rules. It's easiest to take existing rules that are close to what you\nwant and customize them.",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "In the example below, we create a custom rule set for German called DIN 5007-2. This rule set treats umlauts\nin German differently: it treats ö as equivalent to oe, ä as equivalent to ae, and ü as equivalent to ue. For\nmore information, see the <span class=\"link\">ICU RuleBasedCollator javadocs</span>.",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "This example shows how to create a custom rule set for <span class=\"ff1 fs2\">solr.ICUCollationField</span> and dump it to a file:",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "));",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "Ê   <span class=\"fc3\">\"& ae , a\\u0308 & AE , A\\u0308\"</span>+\nÊ   <span class=\"fc3\">\"& oe , o\\u0308 & OE , O\\u0308\"</span>+\nÊ   <span class=\"fc3\">\"& ue , u\\u0308 & UE , u\\u0308\"</span>;",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "DIN5007_2_tailorings);",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "IOUtils.write(tailoredRules, os, <span class=\"fc3\">\"UTF-8\"</span>);",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "This rule set can now be used for custom collation in Solr:",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "Ê          <span class=\"fc2\">custom</span>=<span class=\"fc3\">\"customRules.dat\"</span>\nÊ          <span class=\"fc2\">strength</span>=<span class=\"fc3\">\"primary\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
      "Sorting Text with Custom Rules"
    ],
    "pageId": 282
  },
  {
    "content": "As mentioned above, ICU Unicode Collation is better in several ways than JDK Collation, but if you cannot use\nICU4J for some reason, you can use <span class=\"ff1 fs2\">solr.CollationField</span>.",
    "hierarchy": [
      "JDK Collation"
    ],
    "pageId": 282
  },
  {
    "content": "The principles of JDK Collation are the same as those of ICU Collation; you just specify <span class=\"ff1 fs2\">language</span>, <span class=\"ff1 fs2\">country</span>",
    "hierarchy": [
      "JDK Collation"
    ],
    "pageId": 282
  },
  {
    "content": "and <span class=\"ff2 fs1\">variant</span> arguments instead of the combined <span class=\"ff2 fs1\">locale</span> argument.",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "Using a System collator (see <span class=\"link\">Oracle's list of locales supported in Java 8</span>):",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "language\n(required) <span class=\"link\">ISO-639</span> language code",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "country\nISO-3166<span class=\"fc0\"> country code</span>",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "variant\nVendor or browser-specific code",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "strength\nValid values are <span class=\"ff2 fs1\">primary</span>, <span class=\"ff2 fs1\">secondary</span>, <span class=\"ff2 fs1\">tertiary</span> or <span class=\"ff2 fs1\">identical</span>. See <span class=\"link\">Oracle Java 8 Collator javadocs</span> for more\ninformation.",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "decomposition\nValid values are <span class=\"ff2 fs1\">no</span>, <span class=\"ff2 fs1\">canonical</span>, or <span class=\"ff2 fs1\">full</span>. See <span class=\"link\">Oracle Java 8 Collator javadocs</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "Using a Tailored ruleset:",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "custom\n(required) Path to a UTF-8 text file containing rules supported by the <span class=\"ff2 fs1\">JDK RuleBasedCollator</span>",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "strength\nValid values are <span class=\"ff2 fs1\">primary</span>, <span class=\"ff2 fs1\">secondary</span>, <span class=\"ff2 fs1\">tertiary</span> or <span class=\"ff2 fs1\">identical</span>. See <span class=\"link\">Oracle Java 8 Collator javadocs</span> for more\ninformation.",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "decomposition\nValid values are <span class=\"ff2 fs1\">no</span>, <span class=\"ff2 fs1\">canonical</span>, or <span class=\"ff2 fs1\">full</span>. See <span class=\"link\">Oracle Java 8 Collator javadocs</span> for more information.",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "Ê          <span class=\"fc4\">language</span>=<span class=\"fc5\">\"de\"</span>\nÊ          <span class=\"fc4\">country</span>=<span class=\"fc5\">\"DE\"</span>\nÊ          <span class=\"fc4\">strength</span>=<span class=\"fc5\">\"primary\"</span> <span class=\"fc3\">/></span> <span class=\"fc6\"><!-- ignore Umlauts and letter case when sorting --></span>\n...",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 283
  },
  {
    "content": "This filter converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII\ncharacters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists. Only those characters",
    "hierarchy": [
      "ASCII & Decimal Folding Filters",
      "ASCII Folding"
    ],
    "pageId": 283
  },
  {
    "content": "with reasonable ASCII alternatives are converted.",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "This can increase recall by causing more matches. On the other hand, it can reduce precision because\nlanguage-specific character differences may be lost.",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.ASCIIFoldingFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ASCIIFoldingFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "In:<span class=\"ff1\"> \"Björn Ångström\"</span>",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"Björn\", \"Ångström\"</span>",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "Out:<span class=\"ff1\"> \"Bjorn\", \"Angstrom\"</span>",
    "hierarchy": [
    ],
    "pageId": 284
  },
  {
    "content": "This filter converts any character in the Unicode \"Decimal Number\" general category (<span class=\"code\">Nd</span>) into their\nequivalent Basic Latin digits (0-9).",
    "hierarchy": [
      "Decimal Digit Folding"
    ],
    "pageId": 284
  },
  {
    "content": "This can increase recall by causing more matches. On the other hand, it can reduce precision because\nlanguage-specific character differences may be lost.",
    "hierarchy": [
      "Decimal Digit Folding"
    ],
    "pageId": 284
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"code\">solr.DecimalDigitFilterFactory</span></span>",
    "hierarchy": [
      "Decimal Digit Folding"
    ],
    "pageId": 284
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
      "Decimal Digit Folding"
    ],
    "pageId": 284
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.DecimalDigitFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Decimal Digit Folding"
    ],
    "pageId": 284
  },
  {
    "content": "The <span class=\"code\">lucene/analysis/opennlp</span> module provides OpenNLP integration via several analysis components: a\ntokenizer, a part-of-speech tagging filter, a phrase chunking filter, and a lemmatization filter. In addition to\nthese analysis components, Solr also provides an update request processor to extract named entities - see\nUpdate Processor Factories That Can Be Loaded as Plugins<span class=\"fc0\">.</span>",
    "hierarchy": [
      "OpenNLP Integration"
    ],
    "pageId": 284
  },
  {
    "content": "The <span class=\"link\">OpenNLP Tokenizer</span> must be used with all other OpenNLP analysis components, for\ntwo reasons: first, the OpenNLP Tokenizer detects and marks the sentence boundaries\nrequired by all the OpenNLP filters; and second, since the pre-trained OpenNLP models\nused by these filters were trained using the corresponding language-specific sentence-\ndetection/tokenization models, the same tokenization, using the same models, must be\nused at runtime for optimal performance.",
    "hierarchy": [
    ],
    "pageId": 285
  },
  {
    "content": "See <span class=\"code\">solr/contrib/analysis-extras/README.txt</span> for information on which jars you need to add to your\nSOLR_HOME/lib<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 285
  },
  {
    "content": "The OpenNLP Tokenizer takes two language-specific binary model files as parameters: a sentence detector\nmodel and a tokenizer model. The last token in each sentence is flagged, so that following OpenNLP-based\nfilters can use this information to apply operations to tokens one sentence at a time. See the <span class=\"link\">OpenNLP</span>\nwebsite<span class=\"fc1\"> for information on downloading pre-trained models.</span>",
    "hierarchy": [
      "OpenNLP Tokenizer"
    ],
    "pageId": 285
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.OpenNLPTokenizerFactory</span></span>",
    "hierarchy": [
      "OpenNLP Tokenizer"
    ],
    "pageId": 285
  },
  {
    "content": "sentenceModel\n(required) The path of a language-specific OpenNLP sentence detection model file. This path may be an\nabsolute path, or path relative to the Solr config directory.",
    "hierarchy": [
      "OpenNLP Tokenizer"
    ],
    "pageId": 285
  },
  {
    "content": "tokenizerModel\n(required) The path of a language-specific OpenNLP tokenization model file. This path may be an\nabsolute path, or path relative to the Solr config directory.",
    "hierarchy": [
      "OpenNLP Tokenizer"
    ],
    "pageId": 285
  },
  {
    "content": "Ê <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc5\">sentenceModel</span>=<span class=\"fc6\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc5\">tokenizerModel</span>=<span class=\"fc6\">\"en-tokenizer.bin\"<span class=\"fc4\">/></span></span>",
    "hierarchy": [
      "OpenNLP Tokenizer"
    ],
    "pageId": 285
  },
  {
    "content": "This filter sets each token's type attribute to the part of speech (POS) assigned by the configured model. See\nthe <span class=\"link\">OpenNLP website</span> for information on downloading pre-trained models.",
    "hierarchy": [
      "OpenNLP Part-Of-Speech Filter"
    ],
    "pageId": 285
  },
  {
    "content": "Lucene currently does not index token types, so if you want to keep this information, you\nhave to preserve it either in a payload or as a synonym; see the examples below.",
    "hierarchy": [
      "OpenNLP Part-Of-Speech Filter"
    ],
    "pageId": 285
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.OpenNLPPOSFilterFactory</span></span>",
    "hierarchy": [
      "OpenNLP Part-Of-Speech Filter"
    ],
    "pageId": 285
  },
  {
    "content": "posTaggerModel\n(required) The path of a language-specific OpenNLP POS tagger model file. This path may be an absolute\npath, or path relative to the Solr config directory.",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "The OpenNLP tokenizer will tokenize punctuation, which is useful for following token filters, but ordinarily\nyou don't want to include punctuation in your index, so the <span class=\"ff1 fs0\">TypeTokenFilter</span> (<span class=\"link\">described here</span>) is included in\nthe examples below, with <span class=\"ff1 fs0\">stop.pos.txt</span> containing the following:",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "#\n$\n''\n``\n,\n-LRB-\n-RRB-\n:\n.",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "Index the POS for each token as a payload:",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc4\">sentenceModel</span>=<span class=\"fc5\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc4\">tokenizerModel</span>=<span class=\"fc5\">\"en-tokenizer.bin\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc4\">posTaggerModel</span>=<span class=\"fc5\">\"en-pos-maxent.bin\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.TypeAsPayloadFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc4\">types</span>=<span class=\"fc5\">\"stop.pos.txt\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "Index the POS for each token as a synonym, after prefixing the POS with \"@\" (see the <span class=\"link\">TypeAsSynonymFilter</span>\ndescription<span class=\"fc0\">):</span>",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc4\">sentenceModel</span>=<span class=\"fc5\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc4\">tokenizerModel</span>=<span class=\"fc5\">\"en-tokenizer.bin\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc4\">posTaggerModel</span>=<span class=\"fc5\">\"en-pos-maxent.bin\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.TypeAsSynonymFilterFactory\"</span> <span class=\"fc4\">prefix</span>=<span class=\"fc5\">\"@\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc4\">types</span>=<span class=\"fc5\">\"stop.pos.txt\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "Only index nouns - the <span class=\"ff1 fs0\">keep.pos.txt</span> file contains lines <span class=\"ff1 fs0\">NN</span>, <span class=\"ff1 fs0\">NNS</span>, <span class=\"ff1 fs0\">NNP</span> and <span class=\"ff1 fs0\">NNPS</span>:",
    "hierarchy": [
    ],
    "pageId": 286
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc2\">sentenceModel</span>=<span class=\"fc3\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc2\">tokenizerModel</span>=<span class=\"fc3\">\"en-tokenizer.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc2\">posTaggerModel</span>=<span class=\"fc3\">\"en-pos-maxent.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc2\">types</span>=<span class=\"fc3\">\"keep.pos.txt\"</span> <span class=\"fc2\">useWhitelist</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 287
  },
  {
    "content": "This filter sets each token's type attribute based on the output of an OpenNLP phrase chunking model. The\nchunk labels replace the POS tags that previously were in each token’s type attribute. See the <span class=\"link\">OpenNLP</span>\nwebsite<span class=\"fc1\"> for information on downloading pre-trained models.</span>",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Prerequisite: the <span class=\"link\">OpenNLP Tokenizer</span> and the <span class=\"link\">OpenNLP Part-Of-Speech Filter</span> must precede this filter.",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Lucene currently does not index token types, so if you want to keep this information, you\nhave to preserve it either in a payload or as a synonym; see the examples below.",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs3\">solr.OpenNLPChunkerFilter</span></span>",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "chunkerModel\n(required) The path of a language-specific OpenNLP phrase chunker model file. This path may be an\nabsolute path, or path relative to the Solr config directory.",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Examples<span class=\"code\">:</span>",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Index the phrase chunk label for each token as a payload:",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc2\">sentenceModel</span>=<span class=\"fc3\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc2\">tokenizerModel</span>=<span class=\"fc3\">\"en-tokenizer.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc2\">posTaggerModel</span>=<span class=\"fc3\">\"en-pos-maxent.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPChunkerFactory\"</span> <span class=\"fc2\">chunkerModel</span>=<span class=\"fc3\">\"en-chunker.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeAsPayloadFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Index the phrase chunk label for each token as a synonym, after prefixing it with \"#\" (see the\nTypeAsSynonymFilter description<span class=\"fc1\">):</span>",
    "hierarchy": [
      "OpenNLP Phrase Chunking Filter"
    ],
    "pageId": 287
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc2\">sentenceModel</span>=<span class=\"fc3\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc2\">tokenizerModel</span>=<span class=\"fc3\">\"en-tokenizer.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc2\">posTaggerModel</span>=<span class=\"fc3\">\"en-pos-maxent.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPChunkerFactory\"</span> <span class=\"fc2\">chunkerModel</span>=<span class=\"fc3\">\"en-chunker.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeAsSynonymFilterFactory\"</span> <span class=\"fc2\">prefix</span>=<span class=\"fc3\">\"#\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 288
  },
  {
    "content": "This filter replaces the text of each token with its lemma. Both a dictionary-based lemmatizer and a model-\nbased lemmatizer are supported. If both are configured, the dictionary-based lemmatizer is tried first, and\nthen the model-based lemmatizer is consulted for out-of-vocabulary tokens. See the <span class=\"link\">OpenNLP website</span> for\ninformation on downloading pre-trained models.",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.OpenNLPLemmatizerFilter</span></span>",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "Either <span class=\"ff1 fs2\">dictionary</span> or <span class=\"ff1 fs2\">lemmatizerModel</span> must be provided, and both may be provided - see the examples\nbelow:",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "dictionary\n(optional) The path of a lemmatization dictionary file. This path may be an absolute path, or path relative\nto the Solr config directory. The dictionary file must be encoded as UTF-8, with one entry per line, in the\nform <span class=\"ff1 fs2\">word[tab]lemma[tab]part-of-speech</span>, e.g., <span class=\"ff1 fs2\">wrote[tab]write[tab]VBD</span>.",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "lemmatizerModel\n(optional) The path of a language-specific OpenNLP lemmatizer model file. This path may be an absolute\npath, or path relative to the Solr config directory.",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "Perform dictionary-based lemmatization, and fall back to model-based lemmatization for out-of-vocabulary\ntokens (see the <span class=\"link\">OpenNLP Part-Of-Speech Filter</span> section above for information about using <span class=\"ff1 fs2\">TypeTokenFilter</span>\nto avoid indexing punctuation):",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc2\">sentenceModel</span>=<span class=\"fc3\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc2\">tokenizerModel</span>=<span class=\"fc3\">\"en-tokenizer.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc2\">posTaggerModel</span>=<span class=\"fc3\">\"en-pos-maxent.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPLemmatizerFilterFactory\"</span>\nÊ         <span class=\"fc2\">dictionary</span>=<span class=\"fc3\">\"lemmas.txt\"</span>\nÊ         <span class=\"fc2\">lemmatizerModel</span>=<span class=\"fc3\">\"en-lemmatizer.bin\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc2\">types</span>=<span class=\"fc3\">\"stop.pos.txt\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "OpenNLP Lemmatizer Filter"
    ],
    "pageId": 288
  },
  {
    "content": "Perform dictionary-based lemmatization only:",
    "hierarchy": [
    ],
    "pageId": 289
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc2\">sentenceModel</span>=<span class=\"fc3\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc2\">tokenizerModel</span>=<span class=\"fc3\">\"en-tokenizer.bin\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc2\">posTaggerModel</span>=<span class=\"fc3\">\"en-pos-maxent.bin\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPLemmatizerFilterFactory\"</span> <span class=\"fc2\">dictionary</span>=<span class=\"fc3\">\"lemmas.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc2\">types</span>=<span class=\"fc3\">\"stop.pos.txt\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 289
  },
  {
    "content": "Perform model-based lemmatization only, preserving the original token and emitting the lemma as a\nsynonym (see the <span class=\"link\">KeywordRepeatFilterFactory description</span>)):",
    "hierarchy": [
    ],
    "pageId": 289
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPTokenizerFactory\"</span>\nÊ            <span class=\"fc2\">sentenceModel</span>=<span class=\"fc3\">\"en-sent.bin\"</span>\nÊ            <span class=\"fc2\">tokenizerModel</span>=<span class=\"fc3\">\"en-tokenizer.bin\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPPOSFilterFactory\"</span> <span class=\"fc2\">posTaggerModel</span>=<span class=\"fc3\">\"en-pos-maxent.bin\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeywordRepeatFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.OpenNLPLemmatizerFilterFactory\"</span> <span class=\"fc2\">lemmatizerModel</span>=<span class=\"fc3\">\"en-lemmatizer.bin\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RemoveDuplicatesTokenFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TypeTokenFilterFactory\"</span> <span class=\"fc2\">types</span>=<span class=\"fc3\">\"stop.pos.txt\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 289
  },
  {
    "content": "These factories are each designed to work with specific languages. The languages covered here are:",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Arabic</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Brazilian Portuguese</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Bulgarian</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Catalan</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Traditional Chinese</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Simplified Chinese</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Czech</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Danish</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Dutch</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Finnish</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">French</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Galician</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">German</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Greek</span>",
    "hierarchy": [
      "Language-Specific Factories"
    ],
    "pageId": 289
  },
  {
    "content": "<span class=\"link\">Hebrew, Lao, Myanmar, Khmer</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Hindi</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Indonesian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Italian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Irish</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Japanese</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Latvian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Norwegian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Persian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Polish</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Portuguese</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Romanian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Russian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Scandinavian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Serbian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Spanish</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Swedish</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Thai</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Turkish</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "<span class=\"link\">Ukrainian</span>",
    "hierarchy": [
    ],
    "pageId": 290
  },
  {
    "content": "Solr provides support for the <span class=\"link\">Light-10</span> (PDF) stemming algorithm, and Lucene includes an example stopword\nlist.",
    "hierarchy": [
      "Arabic"
    ],
    "pageId": 290
  },
  {
    "content": "This algorithm defines both character normalization and stemming, so these are split into two filters to\nprovide more flexibility.",
    "hierarchy": [
      "Arabic"
    ],
    "pageId": 290
  },
  {
    "content": "Factory classes:<span class=\"ff1\"> <span class=\"code\">solr.ArabicStemFilterFactory</span>, <span class=\"code\">solr.ArabicNormalizationFilterFactory</span></span>",
    "hierarchy": [
      "Arabic"
    ],
    "pageId": 290
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
      "Arabic"
    ],
    "pageId": 290
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.ArabicNormalizationFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.ArabicStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Arabic"
    ],
    "pageId": 290
  },
  {
    "content": "This is a Java filter written specifically for stemming the Brazilian dialect of the Portuguese language. It uses\nthe Lucene class <span class=\"code\">org.apache.lucene.analysis.br.BrazilianStemmer</span>. Although that stemmer can be\nconfigured to use a list of protected words (which should not be stemmed), this factory does not accept any\narguments to specify such a list.",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.BrazilianStemFilterFactory</span></span>",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.BrazilianStemFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "In:<span class=\"ff2\"> \"praia praias\"</span>",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"praia\", \"praias\"</span>",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "Out:<span class=\"ff2\"> \"pra\", \"pra\"</span>",
    "hierarchy": [
      "Brazilian Portuguese"
    ],
    "pageId": 291
  },
  {
    "content": "Solr includes a light stemmer for Bulgarian, following <span class=\"link\">this algorithm</span> (PDF), and Lucene includes an example\nstopword list.",
    "hierarchy": [
      "Bulgarian"
    ],
    "pageId": 291
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.BulgarianStemFilterFactory</span></span>",
    "hierarchy": [
      "Bulgarian"
    ],
    "pageId": 291
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Bulgarian"
    ],
    "pageId": 291
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.BulgarianStemFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Bulgarian"
    ],
    "pageId": 291
  },
  {
    "content": "Solr can stem Catalan using the Snowball Porter Stemmer with an argument of <span class=\"code\">language=\"Catalan\"</span>. Solr\nincludes a set of contractions for Catalan, which can be stripped using <span class=\"code\">solr.ElisionFilterFactory</span>.",
    "hierarchy": [
      "Catalan"
    ],
    "pageId": 291
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.SnowballPorterFilterFactory</span></span>",
    "hierarchy": [
      "Catalan"
    ],
    "pageId": 291
  },
  {
    "content": "language\n(required) stemmer language, \"Catalan\" in this case",
    "hierarchy": [
    ],
    "pageId": 292
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ElisionFilterFactory\"</span>\nÊ         <span class=\"fc2\">articles</span>=<span class=\"fc3\">\"lang/contractions_ca.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc2\">language</span>=<span class=\"fc3\">\"Catalan\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 292
  },
  {
    "content": "In:<span class=\"ff2\"> \"llengües llengua\"</span>",
    "hierarchy": [
    ],
    "pageId": 292
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"llengües\"(1) \"llengua\"(2),</span>",
    "hierarchy": [
    ],
    "pageId": 292
  },
  {
    "content": "Out:<span class=\"ff2\"> \"llengu\"(1), \"llengu\"(2)</span>",
    "hierarchy": [
    ],
    "pageId": 292
  },
  {
    "content": "The default configuration of the <span class=\"link\">ICU Tokenizer</span> is suitable for Traditional Chinese text. It follows the Word\nBreak rules from the Unicode Text Segmentation algorithm for non-Chinese text, and uses a dictionary to\nsegment Chinese words. To use this tokenizer, you must add additional .jars to Solr's classpath (as described\nin the section <span class=\"link\">Lib Directives in SolrConfig</span>). See the <span class=\"ff1 fs0\">solr/contrib/analysis-extras/README.txt</span> for\ninformation on which jars you need to add to your <span class=\"ff1 fs0\">SOLR_HOME/lib</span>.",
    "hierarchy": [
      "Traditional Chinese"
    ],
    "pageId": 292
  },
  {
    "content": "Standard Tokenizer<span class=\"fc0\"> can also be used to tokenize Traditional Chinese text. Following the Word Break rules</span>\nfrom the Unicode Text Segmentation algorithm, it produces one token per Chinese character. When\ncombined with <span class=\"link\">CJK Bigram Filter</span>, overlapping bigrams of Chinese characters are formed.",
    "hierarchy": [
      "Traditional Chinese"
    ],
    "pageId": 292
  },
  {
    "content": "CJK Width Filter<span class=\"fc0\"> folds fullwidth ASCII variants into the equivalent Basic Latin forms.</span>",
    "hierarchy": [
      "Traditional Chinese"
    ],
    "pageId": 292
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ICUTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CJKWidthFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Traditional Chinese"
    ],
    "pageId": 292
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CJKBigramFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CJKWidthFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Traditional Chinese"
    ],
    "pageId": 292
  },
  {
    "content": "Forms bigrams (overlapping 2-character sequences) of CJK characters that are generated from <span class=\"link\">Standard</span>\nTokenizer<span class=\"fc1\"> or </span>ICU Tokenizer<span class=\"fc1\">.</span>",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "By default, all CJK characters produce bigrams, but finer grained control is available by specifying\northographic type arguments <span class=\"code\">han</span>, <span class=\"code\">hiragana</span>, <span class=\"code\">katakana</span>, and <span class=\"code\">hangul</span>. When set to <span class=\"code\">false</span>, characters of the\ncorresponding type will be passed through as unigrams, and will not be included in any bigrams.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "When a CJK character has no adjacent characters to form a bigram, it is output in unigram form. If you want\nto always output both unigrams and bigrams, set the <span class=\"code\">outputUnigrams</span> argument to <span class=\"code\">true</span>.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "In all cases, all non-CJK input is passed through unmodified.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "han\n(true/false) If false, Han (Chinese) characters will not form bigrams. Default is true.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "hiragana\n(true/false) If false, Hiragana (Japanese) characters will not form bigrams. Default is true.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "katakana\n(true/false) If false, Katakana (Japanese) characters will not form bigrams. Default is true.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "hangul\n(true/false) If false, Hangul (Korean) characters will not form bigrams. Default is true.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "outputUnigrams\n(true/false) If true, in addition to forming bigrams, all characters are also passed through as unigrams.\nDefault is false.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "See the example under <span class=\"link\">Traditional Chinese</span>.",
    "hierarchy": [
      "CJK Bigram Filter"
    ],
    "pageId": 293
  },
  {
    "content": "For Simplified Chinese, Solr provides support for Chinese sentence and word segmentation with the <span class=\"link\">HMM</span>\nChinese Tokenizer<span class=\"fc1\">. This component includes a large dictionary and segments Chinese text into words with</span>\nthe Hidden Markov Model. To use this tokenizer, you must add additional .jars to Solr's classpath (as\ndescribed in the section <span class=\"link\">Lib Directives in SolrConfig</span>). See the <span class=\"code\">solr/contrib/analysis-extras/README.txt</span>\nfor information on which jars you need to add to your <span class=\"code\">SOLR_HOME/lib</span>.",
    "hierarchy": [
      "Simplified Chinese"
    ],
    "pageId": 293
  },
  {
    "content": "The default configuration of the <span class=\"link\">ICU Tokenizer</span> is also suitable for Simplified Chinese text. It follows the Word\nBreak rules from the Unicode Text Segmentation algorithm for non-Chinese text, and uses a dictionary to\nsegment Chinese words. To use this tokenizer, you must add additional .jars to Solr's classpath (as described\nin the section <span class=\"link\">Lib Directives in SolrConfig</span>). See the <span class=\"code\">solr/contrib/analysis-extras/README.txt</span> for\ninformation on which jars you need to add to your <span class=\"code\">SOLR_HOME/lib</span>.",
    "hierarchy": [
      "Simplified Chinese"
    ],
    "pageId": 293
  },
  {
    "content": "Also useful for Chinese analysis:",
    "hierarchy": [
      "Simplified Chinese"
    ],
    "pageId": 293
  },
  {
    "content": "CJK Width Filter<span class=\"fc1\"> folds fullwidth ASCII variants into the equivalent Basic Latin forms, and folds halfwidth</span>\nKatakana variants into their equivalent fullwidth forms.",
    "hierarchy": [
      "Simplified Chinese"
    ],
    "pageId": 293
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.HMMChineseTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CJKWidthFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span>\nÊ         <span class=\"fc2\">words</span>=<span class=\"fc3\">\"org/apache/lucene/analysis/cn/smart/stopwords.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.PorterStemFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 294
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ICUTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CJKWidthFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span>\nÊ         <span class=\"fc2\">words</span>=<span class=\"fc3\">\"org/apache/lucene/analysis/cn/smart/stopwords.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 294
  },
  {
    "content": "For Simplified Chinese, Solr provides support for Chinese sentence and word segmentation with the\nsolr.HMMChineseTokenizerFactory<span class=\"code\"> in the </span>analysis-extras<span class=\"code\"> contrib module. This component includes a</span>\nlarge dictionary and segments Chinese text into words with the Hidden Markov Model. To use this tokenizer,\nsee <span class=\"ff2 fs2\">solr/contrib/analysis-extras/README.txt</span> for instructions on which jars you need to add to your\nsolr_home/lib<span class=\"code\">.</span>",
    "hierarchy": [
      "HMM Chinese Tokenizer"
    ],
    "pageId": 294
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.HMMChineseTokenizerFactory</span></span>",
    "hierarchy": [
      "HMM Chinese Tokenizer"
    ],
    "pageId": 294
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "HMM Chinese Tokenizer"
    ],
    "pageId": 294
  },
  {
    "content": "To use the default setup with fallback to English Porter stemmer for English words, use:",
    "hierarchy": [
      "HMM Chinese Tokenizer"
    ],
    "pageId": 294
  },
  {
    "content": "<analyzer class=\"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer\"/>",
    "hierarchy": [
      "HMM Chinese Tokenizer"
    ],
    "pageId": 294
  },
  {
    "content": "Or to configure your own analysis setup, use the <span class=\"ff2 fs2\">solr.HMMChineseTokenizerFactory</span> along with your\ncustom filter setup. See an example of this in the <span class=\"link\">Simplified Chinese</span> section.",
    "hierarchy": [
      "HMM Chinese Tokenizer"
    ],
    "pageId": 294
  },
  {
    "content": "Solr includes a light stemmer for Czech, following <span class=\"link\">this algorithm</span>, and Lucene includes an example stopword\nlist.",
    "hierarchy": [
      "Czech"
    ],
    "pageId": 294
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.CzechStemFilterFactory</span></span>",
    "hierarchy": [
      "Czech"
    ],
    "pageId": 294
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Czech"
    ],
    "pageId": 294
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CzechStemFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 295
  },
  {
    "content": "In:<span class=\"code\"> \"preziden<span class=\"ff4\">š</span>tí, prezidenta, prezidentského\"</span>",
    "hierarchy": [
    ],
    "pageId": 295
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"preziden<span class=\"ff4\">š</span>tí\", \"prezidenta\", \"prezidentského\"</span>",
    "hierarchy": [
    ],
    "pageId": 295
  },
  {
    "content": "Out:<span class=\"code\"> \"preziden\", \"preziden\", \"preziden\"</span>",
    "hierarchy": [
    ],
    "pageId": 295
  },
  {
    "content": "Solr can stem Danish using the Snowball Porter Stemmer with an argument of <span class=\"ff1 fs2\">language=\"Danish\"</span>.",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "Also relevant are the <span class=\"link\">Scandinavian normalization filters</span>.",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.SnowballPorterFilterFactory</span></span>",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "language\n(required) stemmer language, \"Danish\" in this case",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc2\">language</span>=<span class=\"fc3\">\"Danish\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "In:<span class=\"code\"> \"undersøg undersøgelse\"</span>",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"undersøg\"(1) \"undersøgelse\"(2),</span>",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "Out:<span class=\"code\"> \"undersøg\"(1), \"undersøg\"(2)</span>",
    "hierarchy": [
      "Danish"
    ],
    "pageId": 295
  },
  {
    "content": "Solr can stem Dutch using the Snowball Porter Stemmer with an argument of <span class=\"ff1 fs2\">language=\"Dutch\"</span>.",
    "hierarchy": [
      "Dutch"
    ],
    "pageId": 295
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.SnowballPorterFilterFactory</span></span>",
    "hierarchy": [
      "Dutch"
    ],
    "pageId": 295
  },
  {
    "content": "language\n(required) stemmer language, \"Dutch\" in this case",
    "hierarchy": [
      "Dutch"
    ],
    "pageId": 295
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc2\">language</span>=<span class=\"fc3\">\"Dutch\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 296
  },
  {
    "content": "In:<span class=\"code\"> \"kanaal kanalen\"</span>",
    "hierarchy": [
    ],
    "pageId": 296
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"kanaal\", \"kanalen\"</span>",
    "hierarchy": [
    ],
    "pageId": 296
  },
  {
    "content": "Out:<span class=\"code\"> \"kanal\", \"kanal\"</span>",
    "hierarchy": [
    ],
    "pageId": 296
  },
  {
    "content": "Solr includes support for stemming Finnish, and Lucene includes an example stopword list.",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.FinnishLightStemFilterFactory</span></span>",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FinnishLightStemFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "In:<span class=\"code\"> \"kala kalat\"</span>",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"kala\", \"kalat\"</span>",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "Out:<span class=\"code\"> \"kala\", \"kala\"</span>",
    "hierarchy": [
      "Finnish"
    ],
    "pageId": 296
  },
  {
    "content": "Removes article elisions from a token stream. This filter can be useful for languages such as French, Catalan,\nItalian, and Irish.",
    "hierarchy": [
      "French",
      "Elision Filter"
    ],
    "pageId": 296
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.ElisionFilterFactory</span></span>",
    "hierarchy": [
      "French",
      "Elision Filter"
    ],
    "pageId": 296
  },
  {
    "content": "articles\nThe pathname of a file that contains a list of articles, one per line, to be stripped. Articles are words such\nas \"le\", which are commonly abbreviated, such as in <span class=\"ff4\">l'avion</span> (the plane). This file should include the\nabbreviated form, which precedes the apostrophe. In this case, simply \"<span class=\"ff4\">l</span>\". If no <span class=\"ff1 fs2\">articles</span> attribute is\nspecified, a default set of French articles is used.",
    "hierarchy": [
      "French",
      "Elision Filter"
    ],
    "pageId": 296
  },
  {
    "content": "ignoreCase\n(boolean) If true, the filter ignores the case of words when comparing them to the common word file.\nDefaults to <span class=\"ff1 fs0\">false</span>",
    "hierarchy": [
    ],
    "pageId": 297
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ElisionFilterFactory\"</span>\nÊ         <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span>\nÊ         <span class=\"fc2\">articles</span>=<span class=\"fc3\">\"lang/contractions_fr.txt\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 297
  },
  {
    "content": "In:<span class=\"ff2\"> \"L'histoire d’art\"</span>",
    "hierarchy": [
    ],
    "pageId": 297
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"L'histoire\", \"d’art\"</span>",
    "hierarchy": [
    ],
    "pageId": 297
  },
  {
    "content": "Out:<span class=\"ff2\"> \"histoire\", \"art\"</span>",
    "hierarchy": [
    ],
    "pageId": 297
  },
  {
    "content": "Solr includes three stemmers for French: one in the <span class=\"ff1 fs0\">solr.SnowballPorterFilterFactory</span>, a lighter stemmer\ncalled <span class=\"ff1 fs0\">solr.FrenchLightStemFilterFactory</span>, and an even less aggressive stemmer called\nsolr.FrenchMinimalStemFilterFactory<span class=\"ff2 fs1\">. Lucene includes an example stopword list.</span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "Factory classes:<span class=\"ff2\"> <span class=\"ff1 fs0\">solr.FrenchLightStemFilterFactory</span>, <span class=\"ff1 fs0\">solr.FrenchMinimalStemFilterFactory</span></span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ElisionFilterFactory\"</span>\nÊ         <span class=\"fc2\">articles</span>=<span class=\"fc3\">\"lang/contractions_fr.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FrenchLightStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ElisionFilterFactory\"</span>\nÊ         <span class=\"fc2\">articles</span>=<span class=\"fc3\">\"lang/contractions_fr.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.FrenchMinimalStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "In:<span class=\"ff2\"> \"le chat, les chats\"</span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"le\", \"chat\", \"les\", \"chats\"</span>",
    "hierarchy": [
      "French Light Stem Filter"
    ],
    "pageId": 297
  },
  {
    "content": "Out:<span class=\"ff2\"> \"le\", \"chat\", \"le\", \"chat\"</span>",
    "hierarchy": [
    ],
    "pageId": 298
  },
  {
    "content": "Solr includes a stemmer for Galician following <span class=\"link\">this algorithm</span>, and Lucene includes an example stopword list.",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.GalicianStemFilterFactory</span></span>",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LowerCaseFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.GalicianStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "In:<span class=\"ff2\"> \"felizmente Luzes\"</span>",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"felizmente\", \"luzes\"</span>",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "Out:<span class=\"ff2\"> \"feliz\", \"luz\"</span>",
    "hierarchy": [
      "Galician"
    ],
    "pageId": 298
  },
  {
    "content": "Solr includes four stemmers for German: one in the <span class=\"code\">solr.SnowballPorterFilterFactory</span>\nlanguage=\"German\"<span class=\"ff2 fs0\">, a stemmer called </span>solr.GermanStemFilterFactory<span class=\"ff2 fs0\">, a lighter stemmer called</span>\nsolr.GermanLightStemFilterFactory<span class=\"ff2 fs0\">, and an even less aggressive stemmer called</span>\nsolr.GermanMinimalStemFilterFactory<span class=\"ff2 fs0\">. Lucene includes an example stopword list.</span>",
    "hierarchy": [
      "German"
    ],
    "pageId": 298
  },
  {
    "content": "Factory classes:<span class=\"ff2\"> <span class=\"code\">solr.GermanStemFilterFactory</span>, <span class=\"code\">solr.LightGermanStemFilterFactory</span>,</span>\nsolr.MinimalGermanStemFilterFactory",
    "hierarchy": [
      "German"
    ],
    "pageId": 298
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "German"
    ],
    "pageId": 298
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory \"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.GermanStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "German"
    ],
    "pageId": 298
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.GermanLightStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "German"
    ],
    "pageId": 298
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory \"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.GermanMinimalStemFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 299
  },
  {
    "content": "In:<span class=\"code\"> \"haus häuser\"</span>",
    "hierarchy": [
    ],
    "pageId": 299
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"haus\", \"häuser\"</span>",
    "hierarchy": [
    ],
    "pageId": 299
  },
  {
    "content": "Out:<span class=\"code\"> \"haus\", \"haus\"</span>",
    "hierarchy": [
    ],
    "pageId": 299
  },
  {
    "content": "This filter converts uppercase letters in the Greek character set to the equivalent lowercase character.",
    "hierarchy": [
      "Greek"
    ],
    "pageId": 299
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.GreekLowerCaseFilterFactory</span></span>",
    "hierarchy": [
      "Greek"
    ],
    "pageId": 299
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Greek"
    ],
    "pageId": 299
  },
  {
    "content": "Use of custom charsets is no longer supported as of Solr 3.1. If you need to index text in\nthese encodings, please use Java's character set conversion facilities (InputStreamReader,\netc.) during I/O, so that Lucene can analyze this text as Unicode instead.",
    "hierarchy": [
      "Greek"
    ],
    "pageId": 299
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.GreekLowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Greek"
    ],
    "pageId": 299
  },
  {
    "content": "Solr includes support for stemming Hindi following <span class=\"fc6\">this algorithm</span> (PDF), support for common spelling\ndifferences through the <span class=\"ff1 fs2\">solr.HindiNormalizationFilterFactory</span>, support for encoding differences\nthrough the <span class=\"ff1 fs2\">solr.IndicNormalizationFilterFactory</span> following <span class=\"fc6\">this algorithm</span>, and Lucene includes an\nexample stopword list.",
    "hierarchy": [
      "Hindi"
    ],
    "pageId": 299
  },
  {
    "content": "Factory classes:<span class=\"code\"> <span class=\"ff1 fs2\">solr.IndicNormalizationFilterFactory</span>, <span class=\"ff1 fs2\">solr.HindiNormalizationFilterFactory</span>,</span>\nsolr.HindiStemFilterFactory",
    "hierarchy": [
      "Hindi"
    ],
    "pageId": 299
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Hindi"
    ],
    "pageId": 299
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.IndicNormalizationFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.HindiNormalizationFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.HindiStemFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 300
  },
  {
    "content": "Solr includes support for stemming Indonesian (Bahasa Indonesia) following <span class=\"link\">this algorithm</span> (PDF), and\nLucene includes an example stopword list.",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.IndonesianStemFilterFactory</span></span>",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.IndonesianStemFilterFactory\"</span> <span class=\"fc2\">stemDerivational</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "In:<span class=\"code\"> \"sebagai sebagainya\"</span>",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"sebagai\", \"sebagainya\"</span>",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "Out:<span class=\"code\"> \"bagai\", \"bagai\"</span>",
    "hierarchy": [
      "Indonesian"
    ],
    "pageId": 300
  },
  {
    "content": "Solr includes two stemmers for Italian: one in the <span class=\"ff1 fs2\">solr.SnowballPorterFilterFactory</span>\nlanguage=\"Italian\"<span class=\"code\">, and a lighter stemmer called </span>solr.ItalianLightStemFilterFactory<span class=\"code\">. Lucene includes</span>\nan example stopword list.",
    "hierarchy": [
      "Italian"
    ],
    "pageId": 300
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.ItalianStemFilterFactory</span></span>",
    "hierarchy": [
      "Italian"
    ],
    "pageId": 300
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Italian"
    ],
    "pageId": 300
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ElisionFilterFactory\"</span>\nÊ         <span class=\"fc2\">articles</span>=<span class=\"fc3\">\"lang/contractions_it.txt\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ItalianLightStemFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Italian"
    ],
    "pageId": 300
  },
  {
    "content": "In:<span class=\"ff2\"> \"propaga propagare propagamento\"</span>",
    "hierarchy": [
    ],
    "pageId": 301
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"propaga\", \"propagare\", \"propagamento\"</span>",
    "hierarchy": [
    ],
    "pageId": 301
  },
  {
    "content": "Out:<span class=\"ff2\"> \"propag\", \"propag\", \"propag\"</span>",
    "hierarchy": [
    ],
    "pageId": 301
  },
  {
    "content": "Solr can stem Irish using the Snowball Porter Stemmer with an argument of <span class=\"code\">language=\"Irish\"</span>. Solr\nincludes <span class=\"code\">solr.IrishLowerCaseFilterFactory</span>, which can handle Irish-specific constructs. Solr also includes\na set of contractions for Irish which can be stripped using <span class=\"code\">solr.ElisionFilterFactory</span>.",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.SnowballPorterFilterFactory</span></span>",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "language\n(required) stemmer language, \"Irish\" in this case",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ElisionFilterFactory\"</span>\nÊ         <span class=\"fc3\">articles</span>=<span class=\"fc4\">\"lang/contractions_ga.txt\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.IrishLowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc3\">language</span>=<span class=\"fc4\">\"Irish\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "In:<span class=\"ff2\"> \"siopadóireacht síceapatacha b'fhearr m’athair\"</span>",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"siopadóireacht\", \"síceapatacha\", \"b'fhearr\", \"m’athair\"</span>",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "Out:<span class=\"ff2\"> \"siopadóir\", \"síceapaite\", \"fearr\", \"athair\"</span>",
    "hierarchy": [
      "Irish"
    ],
    "pageId": 301
  },
  {
    "content": "Solr includes support for analyzing Japanese, via the Lucene Kuromoji morphological analyzer, which\nincludes several analysis components - more details on each below:",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "JapaneseIterationMarkCharFilter normalizes Japanese horizontal iteration marks (odoriji) to their\nexpanded form.",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "JapaneseTokenizer tokenizes Japanese using morphological analysis, and annotates each term with\npart-of-speech, base form (a.k.a. lemma), reading and pronunciation.",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "JapaneseBaseFormFilter replaces original terms with their base forms (a.k.a. lemmas).",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "JapanesePartOfSpeechStopFilter removes terms that have one of the configured parts-of-speech.",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "JapaneseKatakanaStemFilter normalizes common katakana spelling variations ending in a long sound\ncharacter (U+30FC) by removing the long sound character.",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "Also useful for Japanese analysis, from lucene-analyzers-common:",
    "hierarchy": [
      "Japanese"
    ],
    "pageId": 301
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">CJKWidthFilter</span><span class=\"ls1\"> folds fullwidth ASCII variants into the equivalent Basic Latin forms, and folds halfwidth</span>\nKatakana variants into their equivalent fullwidth forms.",
    "hierarchy": [
    ],
    "pageId": 302
  },
  {
    "content": "Normalizes horizontal Japanese iteration marks (odoriji) to their expanded form. Vertical iteration marks are\nnot supported.",
    "hierarchy": [
      "Japanese Iteration Mark CharFilter"
    ],
    "pageId": 302
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs1\">JapaneseIterationMarkCharFilterFactory</span></span>",
    "hierarchy": [
      "Japanese Iteration Mark CharFilter"
    ],
    "pageId": 302
  },
  {
    "content": "normalizeKanji\nset to <span class=\"ff2 fs1\">false</span> to not normalize kanji iteration marks (default is <span class=\"ff2 fs1\">true</span>)",
    "hierarchy": [
      "Japanese Iteration Mark CharFilter"
    ],
    "pageId": 302
  },
  {
    "content": "normalizeKana\nset to <span class=\"ff2 fs1\">false</span> to not normalize kana iteration marks (default is <span class=\"ff2 fs1\">true</span>)",
    "hierarchy": [
      "Japanese Iteration Mark CharFilter"
    ],
    "pageId": 302
  },
  {
    "content": "Tokenizer for Japanese that uses morphological analysis, and annotates each term with part-of-speech, base\nform (a.k.a. lemma), reading and pronunciation.",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "JapaneseTokenizer<span class=\"ff1 fs0\"> has a </span>search<span class=\"ff1 fs0\"> mode (the default) that does segmentation useful for search: a heuristic is</span>\nused to segment compound terms into their constituent parts while also keeping the original compound\nterms as synonyms.",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs1\">solr.JapaneseTokenizerFactory</span></span>",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "mode\nUse <span class=\"ff2 fs1\">search</span> mode to get a noun-decompounding effect useful for search. <span class=\"ff2 fs1\">search</span> mode improves\nsegmentation for search at the expense of part-of-speech accuracy. Valid values for <span class=\"ff2 fs1\">mode</span> are:",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">normal</span><span class=\"ls1\">: default segmentation</span>\n•<span class=\"ff2 fs1 ls1\">search</span><span class=\"ls1\">: segmentation useful for search (extra compound splitting)</span>\n•<span class=\"ff2 fs1 ls1\">extended</span><span class=\"ls1\">: search mode plus unigramming of unknown words (experimental)</span>",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "For some applications it might be good to use <span class=\"ff2 fs1\">search</span> mode for indexing and <span class=\"ff2 fs1\">normal</span> mode for\nqueries to increase precision and prevent parts of compounds from being matched and highlighted.",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "userDictionary\nfilename for a user dictionary, which allows overriding the statistical model with your own entries for\nsegmentation, part-of-speech tags and readings without a need to specify weights. See\nlang/userdict_ja.txt<span class=\"ff1 fs0\"> for a sample user dictionary file.</span>",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "userDictionaryEncoding\nuser dictionary encoding (default is UTF-8)",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "discardPunctuation\nset to <span class=\"ff2 fs1\">false</span> to keep punctuation, <span class=\"ff2 fs1\">true</span> to discard (the default)",
    "hierarchy": [
      "Japanese Tokenizer"
    ],
    "pageId": 302
  },
  {
    "content": "Replaces original terms' text with the corresponding base form (lemma). (<span class=\"code\">JapaneseTokenizer</span> annotates\neach term with its base form.)",
    "hierarchy": [
      "Japanese Base Form Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">JapaneseBaseFormFilterFactory</span></span>",
    "hierarchy": [
      "Japanese Base Form Filter"
    ],
    "pageId": 303
  },
  {
    "content": "(no arguments)",
    "hierarchy": [
      "Japanese Base Form Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Removes terms with one of the configured parts-of-speech. <span class=\"code\">JapaneseTokenizer</span> annotates terms with parts-\nof-speech.",
    "hierarchy": [
      "Japanese Part Of Speech Stop Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Factory class<span class=\"ff2\"> </span>:<span class=\"ff2\"> <span class=\"code\">JapanesePartOfSpeechStopFilterFactory</span></span>",
    "hierarchy": [
      "Japanese Part Of Speech Stop Filter"
    ],
    "pageId": 303
  },
  {
    "content": "tags\nfilename for a list of parts-of-speech for which to remove terms; see <span class=\"code\">conf/lang/stoptags_ja.txt</span> in the\nsample_techproducts_config<span class=\"ff2 fs0\"> <span class=\"link\">config set</span> for an example.</span>",
    "hierarchy": [
      "Japanese Part Of Speech Stop Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Normalizes common katakana spelling variations ending in a long sound character (U+30FC) by removing\nthe long sound character.",
    "hierarchy": [
      "Japanese Katakana Stem Filter"
    ],
    "pageId": 303
  },
  {
    "content": "solr.CJKWidthFilterFactory<span class=\"ff2 fs0\"> should be specified prior to this filter to normalize half-width katakana to full-</span>\nwidth.",
    "hierarchy": [
      "Japanese Katakana Stem Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">JapaneseKatakanaStemFilterFactory</span></span>",
    "hierarchy": [
      "Japanese Katakana Stem Filter"
    ],
    "pageId": 303
  },
  {
    "content": "minimumLength\nterms below this length will not be stemmed. Default is 4, value must be 2 or more.",
    "hierarchy": [
      "Japanese Katakana Stem Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Folds fullwidth ASCII variants into the equivalent Basic Latin forms, and folds halfwidth Katakana variants\ninto their equivalent fullwidth forms.",
    "hierarchy": [
      "CJK Width Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">CJKWidthFilterFactory</span></span>",
    "hierarchy": [
      "CJK Width Filter"
    ],
    "pageId": 303
  },
  {
    "content": "(no arguments)",
    "hierarchy": [
      "CJK Width Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Example:",
    "hierarchy": [
      "CJK Width Filter"
    ],
    "pageId": 303
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc4\"><!-- Uncomment if you need to handle iteration marks: --></span>\nÊ   <span class=\"fc4\"><!-- <charFilter class=\"solr.JapaneseIterationMarkCharFilterFactory\" /> --></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.JapaneseTokenizerFactory\"</span> <span class=\"fc2\">mode</span>=<span class=\"fc3\">\"search\"</span> <span class=\"fc2\">userDictionary</span>=",
    "hierarchy": [
    ],
    "pageId": 304
  },
  {
    "content": "Ê   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.JapaneseBaseFormFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.JapanesePartOfSpeechStopFilterFactory\"</span> <span class=\"fc2\">tags</span>=<span class=\"fc3\">\"lang/stoptags_ja.txt\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CJKWidthFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"lang/stopwords_ja.txt\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.JapaneseKatakanaStemFilterFactory\"</span> <span class=\"fc2\">minimumLength</span>=<span class=\"fc3\">\"4\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 304
  },
  {
    "content": "Lucene provides support, in addition to UAX#29 word break rules, for Hebrew's use of the double and single\nquote characters, and for segmenting Lao, Myanmar, and Khmer into syllables with the\nsolr.ICUTokenizerFactory<span class=\"code\"> in the </span>analysis-extras<span class=\"code\"> contrib module. To use this tokenizer, see</span>\nsolr/contrib/analysis-extras/README.txt for<span class=\"code\"> instructions on which jars you need to add to your</span>\nsolr_home/lib<span class=\"code\">.</span>",
    "hierarchy": [
      "Hebrew, Lao, Myanmar, Khmer"
    ],
    "pageId": 304
  },
  {
    "content": "See <span class=\"fc6\">the ICUTokenizer</span> for more information.",
    "hierarchy": [
      "Hebrew, Lao, Myanmar, Khmer"
    ],
    "pageId": 304
  },
  {
    "content": "Solr includes support for stemming Latvian, and Lucene includes an example stopword list.",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.LatvianStemFilterFactory</span></span>",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LatvianStemFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "In:<span class=\"code\"> \"tirgiem tirgus\"</span>",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"tirgiem\", \"tirgus\"</span>",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "Out:<span class=\"code\"> \"tirg\", \"tirg\"</span>",
    "hierarchy": [
      "Latvian"
    ],
    "pageId": 304
  },
  {
    "content": "Solr includes two classes for stemming Norwegian, <span class=\"code\">NorwegianLightStemFilterFactory</span> and\nNorwegianMinimalStemFilterFactory<span class=\"ff2 fs1\">. Lucene includes an example stopword list.</span>",
    "hierarchy": [
      "Norwegian"
    ],
    "pageId": 305
  },
  {
    "content": "Another option is to use the Snowball Porter Stemmer with an argument of language=\"Norwegian\".",
    "hierarchy": [
      "Norwegian"
    ],
    "pageId": 305
  },
  {
    "content": "Also relevant are the <span class=\"link\">Scandinavian normalization filters</span>.",
    "hierarchy": [
      "Norwegian"
    ],
    "pageId": 305
  },
  {
    "content": "The <span class=\"code\">NorwegianLightStemFilterFactory</span> requires a \"two-pass\" sort for the -dom and -het endings. This\nmeans that in the first pass the word \"kristendom\" is stemmed to \"kristen\", and then all the general rules\napply so it will be further stemmed to \"krist\". The effect of this is that \"kristen,\" \"kristendom,\"\n\"kristendommen,\" and \"kristendommens\" will all be stemmed to \"krist.\"",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "The second pass is to pick up -dom and -het endings. Consider this example:",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "forlegenforlegforlegenforleg",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "forlegenhetforlegenforlegenhetforleg",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "forlegenhetenforlegenforlegenhetenforleg",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "forlegenhetensforlegenforlegenhetensforleg",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "firkantetfirkantfirkantetfirkant",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "firkantethetfirkantetfirkantethetfirkant",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "firkantethetenfirkantetfirkantethetenfirkant",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.NorwegianLightStemFilterFactory</span></span>",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "variant\nChoose the Norwegian language variant to use. Valid values are:",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "nb: Bokmål (default)\n•nn: Nynorsk\n•no: both",
    "hierarchy": [
      "Norwegian",
      "Norwegian Light Stemmer"
    ],
    "pageId": 305
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"lang/stopwords_no.txt\"</span>",
    "hierarchy": [
    ],
    "pageId": 306
  },
  {
    "content": "Ê   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NorwegianLightStemFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 306
  },
  {
    "content": "In:<span class=\"code\"> \"Forelskelsen\"</span>",
    "hierarchy": [
    ],
    "pageId": 306
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"forelskelsen\"</span>",
    "hierarchy": [
    ],
    "pageId": 306
  },
  {
    "content": "Out:<span class=\"code\"> \"forelske\"</span>",
    "hierarchy": [
    ],
    "pageId": 306
  },
  {
    "content": "The <span class=\"ff1 fs1\">NorwegianMinimalStemFilterFactory</span> stems plural forms of Norwegian nouns only.",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs1\">solr.NorwegianMinimalStemFilterFactory</span></span>",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "variant\nChoose the Norwegian language variant to use. Valid values are:",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "nb: Bokmål (default)\n•nn: Nynorsk\n•no: both",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "Ê <span class=\"fc0\"><analyzer></span>\nÊ   <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">ignoreCase</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"lang/stopwords_no.txt\"</span>",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "Ê   <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NorwegianMinimalStemFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"></analyzer></span>",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "In:<span class=\"code\"> \"Bilens\"</span>",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"bilens\"</span>",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "Out:<span class=\"code\"> \"bil\"</span>",
    "hierarchy": [
      "Norwegian Minimal Stemmer"
    ],
    "pageId": 306
  },
  {
    "content": "Solr includes support for normalizing Persian, and Lucene includes an example stopword list.",
    "hierarchy": [
      "Persian",
      "Persian Filter Factories"
    ],
    "pageId": 307
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.PersianNormalizationFilterFactory</span></span>",
    "hierarchy": [
      "Persian",
      "Persian Filter Factories"
    ],
    "pageId": 307
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Persian",
      "Persian Filter Factories"
    ],
    "pageId": 307
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ArabicNormalizationFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.PersianNormalizationFilterFactory\"<span class=\"fc2\">></span></span>",
    "hierarchy": [
      "Persian",
      "Persian Filter Factories"
    ],
    "pageId": 307
  },
  {
    "content": "Solr provides support for Polish stemming with the <span class=\"code\">solr.StempelPolishStemFilterFactory</span>, and\nsolr.MorphologikFilterFactory<span class=\"ff2 fs1\"> for lemmatization, in the </span>contrib/analysis-extras<span class=\"ff2 fs1\"> module. The</span>\nsolr.StempelPolishStemFilterFactory<span class=\"ff2 fs1\"> component includes an algorithmic stemmer with tables for Polish.</span>\nTo use either of these filters, see <span class=\"code\">solr/contrib/analysis-extras/README.txt</span> for instructions on which jars\nyou need to add to your <span class=\"code\">solr_home/lib</span>.",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.StempelPolishStemFilterFactory</span> and <span class=\"code\">solr.MorfologikFilterFactory</span></span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StempelPolishStemFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.MorfologikFilterFactory\"</span> <span class=\"fc3\">dictionary</span>=<span class=\"fc4\">\"</span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Ê <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "In:<span class=\"ff2\"> \"\"studenta studenci\"</span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"studenta\", \"studenci\"</span>",
    "hierarchy": [
      "Polish"
    ],
    "pageId": 307
  },
  {
    "content": "Out:<span class=\"ff2\"> \"student\", \"student\"</span>",
    "hierarchy": [
    ],
    "pageId": 308
  },
  {
    "content": "More information about the Stempel stemmer is available in <span class=\"link\">the Lucene javadocs</span>.",
    "hierarchy": [
    ],
    "pageId": 308
  },
  {
    "content": "Note the lower case filter is applied <span class=\"code\">after</span> the Morfologik stemmer; this is because the Polish dictionary\ncontains proper names and then proper term case may be important to resolve disambiguities (or even\nlookup the correct lemma at all).",
    "hierarchy": [
    ],
    "pageId": 308
  },
  {
    "content": "The Morfologik dictionary parameter value is a constant specifying which dictionary to choose. The\ndictionary resource must be named <span class=\"ff4 fs1\">path/to/language.dict</span> and have an associated <span class=\"ff4 fs1\">.info</span> metadata file.\nSee <span class=\"link\">the Morfologik project</span> for details. If the dictionary attribute is not provided, the Polish dictionary is\nloaded and used by default.",
    "hierarchy": [
    ],
    "pageId": 308
  },
  {
    "content": "Solr includes four stemmers for Portuguese: one in the <span class=\"ff4 fs1\">solr.SnowballPorterFilterFactory</span>, an alternative\nstemmer called <span class=\"ff4 fs1\">solr.PortugueseStemFilterFactory</span>, a lighter stemmer called\nsolr.PortugueseLightStemFilterFactory<span class=\"ff2 fs0\">, and an even less aggressive stemmer called</span>\nsolr.PortugueseMinimalStemFilterFactory<span class=\"ff2 fs0\">. Lucene includes an example stopword list.</span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Factory classes:<span class=\"ff2\"> <span class=\"ff4 fs1\">solr.PortugueseStemFilterFactory</span>, <span class=\"ff4 fs1\">solr.PortugueseLightStemFilterFactory</span>,</span>\nsolr.PortugueseMinimalStemFilterFactory",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LowerCaseFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.PortugueseStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LowerCaseFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.PortugueseLightStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Ê <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LowerCaseFilterFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><filter</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.PortugueseMinimalStemFilterFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "In:<span class=\"ff2\"> \"praia praias\"</span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff2\"> \"praia\", \"praias\"</span>",
    "hierarchy": [
      "Portuguese"
    ],
    "pageId": 308
  },
  {
    "content": "Out:<span class=\"ff2\"> \"pra\", \"pra\"</span>",
    "hierarchy": [
    ],
    "pageId": 309
  },
  {
    "content": "Solr can stem Romanian using the Snowball Porter Stemmer with an argument of <span class=\"code\">language=\"Romanian\"</span>.",
    "hierarchy": [
      "Romanian"
    ],
    "pageId": 309
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.SnowballPorterFilterFactory</span></span>",
    "hierarchy": [
      "Romanian"
    ],
    "pageId": 309
  },
  {
    "content": "language\n(required) stemmer language, \"Romanian\" in this case",
    "hierarchy": [
      "Romanian"
    ],
    "pageId": 309
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc3\">language</span>=<span class=\"fc4\">\"Romanian\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
      "Romanian"
    ],
    "pageId": 309
  },
  {
    "content": "Solr includes two stemmers for Russian: one in the <span class=\"code\">solr.SnowballPorterFilterFactory</span>\nlanguage=\"Russian\"<span class=\"ff2 fs0\">, and a lighter stemmer called </span>solr.RussianLightStemFilterFactory<span class=\"ff2 fs0\">. Lucene includes</span>\nan example stopword list.",
    "hierarchy": [
      "Russian",
      "Russian Stem Filter"
    ],
    "pageId": 309
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.RussianLightStemFilterFactory</span></span>",
    "hierarchy": [
      "Russian",
      "Russian Stem Filter"
    ],
    "pageId": 309
  },
  {
    "content": "Arguments:<span class=\"ff2\"> None</span>",
    "hierarchy": [
      "Russian",
      "Russian Stem Filter"
    ],
    "pageId": 309
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.RussianLightStemFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Russian",
      "Russian Stem Filter"
    ],
    "pageId": 309
  },
  {
    "content": "Scandinavian is a language group spanning three languages <span class=\"link\">Norwegian</span>, <span class=\"link\">Swedish</span> and <span class=\"link\">Danish</span> which are very\nsimilar.",
    "hierarchy": [
      "Scandinavian"
    ],
    "pageId": 309
  },
  {
    "content": "Swedish å, ä, ö are in fact the same letters as Norwegian and Danish å, æ, ø and thus interchangeable when\nused between these languages. They are however folded differently when people type them on a keyboard\nlacking these characters.",
    "hierarchy": [
      "Scandinavian"
    ],
    "pageId": 309
  },
  {
    "content": "In that situation almost all Swedish people use a, a, o instead of å, ä, ö. Norwegians and Danes on the other\nhand usually type aa, ae and oe instead of å, æ and ø. Some do however use a, a, o, oo, ao and sometimes\npermutations of everything above.",
    "hierarchy": [
    ],
    "pageId": 310
  },
  {
    "content": "There are two filters for helping with normalization between Scandinavian languages: one is\nsolr.ScandinavianNormalizationFilterFactory<span class=\"ff1 fs0\"> trying to preserve the special characters (æäöå) and</span>\nanother <span class=\"ff2 fs1\">solr.ScandinavianFoldingFilterFactory</span> which folds these to the more broad ø/ö->o etc.",
    "hierarchy": [
    ],
    "pageId": 310
  },
  {
    "content": "See also each language section for other relevant filters.",
    "hierarchy": [
    ],
    "pageId": 310
  },
  {
    "content": "This filter normalize use of the interchangeable Scandinavian characters æÆä<span class=\"ff4\">Ä</span>öÖøØ and folded variants\n(aa, ao, ae, oe and oo) by transforming them to åÅæÆøØ.",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "It's a semantically less destructive solution than <span class=\"ff2 fs1\">ScandinavianFoldingFilter</span>, most useful when a person\nwith a Norwegian or Danish keyboard queries a Swedish index and vice versa. This filter does <span class=\"code\">not</span> perform\nthe common Swedish folds of å and ä to a nor ö to o.",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs1\">solr.ScandinavianNormalizationFilterFactory</span></span>",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Ê <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.ScandinavianNormalizationFilterFactory\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "In:<span class=\"ff1\"> \"blåbærsyltetøj blåbärsyltetöj blaabaarsyltetoej blabarsyltetoj\"</span>",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Tokenizer to Filter:<span class=\"ff1\"> \"blåbærsyltetøj\", \"blåbärsyltetöj\", \"blaabaersyltetoej\", \"blabarsyltetoj\"</span>",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Out:<span class=\"ff1\"> \"blåbærsyltetøj\", \"blåbærsyltetøj\", \"blåbærsyltetøj\", \"blabarsyltetoj\"</span>",
    "hierarchy": [
      "Scandinavian Normalization Filter"
    ],
    "pageId": 310
  },
  {
    "content": "This filter folds Scandinavian characters åÅäæ<span class=\"ff4\">Ä</span>Æ->a and öÖøØ->o. It also discriminate against use of double\nvowels aa, ae, ao, oe and oo, leaving just the first one.",
    "hierarchy": [
      "Scandinavian Folding Filter"
    ],
    "pageId": 310
  },
  {
    "content": "It's a semantically more destructive solution than <span class=\"ff2 fs1\">ScandinavianNormalizationFilter</span>, but can in addition\nhelp with matching raksmorgas as räksmörgås.",
    "hierarchy": [
      "Scandinavian Folding Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Factory class:<span class=\"ff1\"> <span class=\"ff2 fs1\">solr.ScandinavianFoldingFilterFactory</span></span>",
    "hierarchy": [
      "Scandinavian Folding Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Arguments:<span class=\"ff1\"> None</span>",
    "hierarchy": [
      "Scandinavian Folding Filter"
    ],
    "pageId": 310
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ScandinavianFoldingFilterFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 311
  },
  {
    "content": "In:<span class=\"code\"> \"blåbærsyltetøj blåbärsyltetöj blaabaarsyltetoej blabarsyltetoj\"</span>",
    "hierarchy": [
    ],
    "pageId": 311
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"blåbærsyltetøj\", \"blåbärsyltetöj\", \"blaabaersyltetoej\", \"blabarsyltetoj\"</span>",
    "hierarchy": [
    ],
    "pageId": 311
  },
  {
    "content": "Out:<span class=\"code\"> \"blabarsyltetoj\", \"blabarsyltetoj\", \"blabarsyltetoj\", \"blabarsyltetoj\"</span>",
    "hierarchy": [
    ],
    "pageId": 311
  },
  {
    "content": "Solr includes a filter that normalizes Serbian Cyrillic and Latin characters. Note that this filter only works with\nlowercased input.",
    "hierarchy": [
      "Serbian",
      "Serbian Normalization Filter"
    ],
    "pageId": 311
  },
  {
    "content": "See the Solr wiki for tips & advice on using this filter: <span class=\"link\">https://wiki.apache.org/solr/SerbianLanguageSupport</span>",
    "hierarchy": [
      "Serbian",
      "Serbian Normalization Filter"
    ],
    "pageId": 311
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.SerbianNormalizationFilterFactory</span></span>",
    "hierarchy": [
      "Serbian",
      "Serbian Normalization Filter"
    ],
    "pageId": 311
  },
  {
    "content": "haircut\nSelect the extend of normalization. Valid values are:",
    "hierarchy": [
      "Serbian",
      "Serbian Normalization Filter"
    ],
    "pageId": 311
  },
  {
    "content": "bald: (Default behavior) Cyrillic characters are first converted to Latin; then, Latin characters have\ntheir diacritics removed, with the exception of <span class=\"link\">LATIN SMALL LETTER D WITH STROKE</span> (U+0111) which is\nconverted to “<span class=\"ff1 fs2\">dj</span>”\n•regular: Only Cyrillic to Latin normalization will be applied, preserving the Latin diatrics",
    "hierarchy": [
      "Serbian",
      "Serbian Normalization Filter"
    ],
    "pageId": 311
  },
  {
    "content": "Ê <span class=\"fc0\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SerbianNormalizationFilterFactory\"</span> <span class=\"fc2\">haircut</span>=<span class=\"fc3\">\"bald\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
      "Serbian",
      "Serbian Normalization Filter"
    ],
    "pageId": 311
  },
  {
    "content": "Solr includes two stemmers for Spanish: one in the <span class=\"ff1 fs2\">solr.SnowballPorterFilterFactory</span>\nlanguage=\"Spanish\"<span class=\"code\">, and a lighter stemmer called </span>solr.SpanishLightStemFilterFactory<span class=\"code\">. Lucene includes</span>\nan example stopword list.",
    "hierarchy": [
      "Spanish"
    ],
    "pageId": 311
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff1 fs2\">solr.SpanishStemFilterFactory</span></span>",
    "hierarchy": [
      "Spanish"
    ],
    "pageId": 311
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Spanish"
    ],
    "pageId": 311
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SpanishLightStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 312
  },
  {
    "content": "In:<span class=\"code\"> \"torear toreara torearlo\"</span>",
    "hierarchy": [
    ],
    "pageId": 312
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"torear\", \"toreara\", \"torearlo\"</span>",
    "hierarchy": [
    ],
    "pageId": 312
  },
  {
    "content": "Out:<span class=\"code\"> \"tor\", \"tor\", \"tor\"</span>",
    "hierarchy": [
    ],
    "pageId": 312
  },
  {
    "content": "Solr includes two stemmers for Swedish: one in the <span class=\"ff2 fs2\">solr.SnowballPorterFilterFactory</span>\nlanguage=\"Swedish\"<span class=\"code\">, and a lighter stemmer called </span>solr.SwedishLightStemFilterFactory<span class=\"code\">. Lucene includes</span>\nan example stopword list.",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "Also relevant are the <span class=\"link\">Scandinavian normalization filters</span>.",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.SwedishStemFilterFactory</span></span>",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SwedishLightStemFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "In:<span class=\"code\"> \"kloke klokhet klokheten\"</span>",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "Tokenizer to Filter:<span class=\"code\"> \"kloke\", \"klokhet\", \"klokheten\"</span>",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "Out:<span class=\"code\"> \"klok\", \"klok\", \"klok\"</span>",
    "hierarchy": [
      "Swedish",
      "Swedish Stem Filter"
    ],
    "pageId": 312
  },
  {
    "content": "This filter converts sequences of Thai characters into individual Thai words. Unlike European languages, Thai\ndoes not use whitespace to delimit words.",
    "hierarchy": [
      "Thai"
    ],
    "pageId": 312
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.ThaiTokenizerFactory</span></span>",
    "hierarchy": [
      "Thai"
    ],
    "pageId": 312
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Thai"
    ],
    "pageId": 312
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ThaiTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 313
  },
  {
    "content": "Solr includes support for stemming Turkish with the <span class=\"ff2 fs2\">solr.SnowballPorterFilterFactory</span>; support for case-\ninsensitive search with the <span class=\"ff2 fs2\">solr.TurkishLowerCaseFilterFactory</span>; support for stripping apostrophes and\nfollowing suffixes with <span class=\"ff2 fs2\">solr.ApostropheFilterFactory</span> (see <span class=\"link\">Role of Apostrophes in Turkish Information</span>\nRetrieval<span class=\"fc0\">); support for a form of stemming that truncating tokens at a configurable maximum length</span>\nthrough the <span class=\"ff2 fs2\">solr.TruncateTokenFilterFactory</span> (see <span class=\"link\">Information Retrieval on Turkish Texts</span>); and Lucene\nincludes an example stopword list.",
    "hierarchy": [
      "Turkish"
    ],
    "pageId": 313
  },
  {
    "content": "Factory class:<span class=\"code\"> <span class=\"ff2 fs2\">solr.TurkishLowerCaseFilterFactory</span></span>",
    "hierarchy": [
      "Turkish"
    ],
    "pageId": 313
  },
  {
    "content": "Arguments:<span class=\"code\"> None</span>",
    "hierarchy": [
      "Turkish"
    ],
    "pageId": 313
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ApostropheFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TurkishLowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SnowballPorterFilterFactory\"</span> <span class=\"fc2\">language</span>=<span class=\"fc3\">\"Turkish\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Turkish"
    ],
    "pageId": 313
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ApostropheFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TurkishLowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.ASCIIFoldingFilterFactory\"</span> <span class=\"fc2\">preserveOriginal</span>=<span class=\"fc3\">\"true\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.KeywordRepeatFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.TruncateTokenFilterFactory\"</span> <span class=\"fc2\">prefixLength</span>=<span class=\"fc3\">\"5\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RemoveDuplicatesTokenFilterFactory\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "Turkish"
    ],
    "pageId": 313
  },
  {
    "content": "Solr provides support for Ukrainian lemmatization with the <span class=\"ff2 fs2\">solr.MorphologikFilterFactory</span>, in the\ncontrib/analysis-extras<span class=\"code\"> module. To use this filter, see </span>solr/contrib/analysis-extras/README.txt<span class=\"code\"> for</span>\ninstructions on which jars you need to add to your <span class=\"ff2 fs2\">solr_home/lib</span>.",
    "hierarchy": [
      "Ukrainian"
    ],
    "pageId": 313
  },
  {
    "content": "Lucene also includes an example Ukrainian stopword list, in the <span class=\"ff2 fs2\">lucene-analyzers-morfologik</span> jar.",
    "hierarchy": [
      "Ukrainian"
    ],
    "pageId": 313
  },
  {
    "content": "Factory class:<span class=\"ff2\"> <span class=\"code\">solr.MorfologikFilterFactory</span></span>",
    "hierarchy": [
    ],
    "pageId": 314
  },
  {
    "content": "dictionary\n(required) lemmatizer dictionary - the <span class=\"code\">lucene-analyzers-morfologik</span> jar contains a Ukrainian dictionary\nat <span class=\"code\">org/apache/lucene/analysis/uk/ukrainian.dict</span>.",
    "hierarchy": [
    ],
    "pageId": 314
  },
  {
    "content": "Ê <span class=\"fc1\"><tokenizer</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StandardTokenizerFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.StopFilterFactory\"</span> <span class=\"fc2\">words</span>=<span class=\"fc3\">\"org/apache/lucene/analysis/uk/stopwords.txt\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LowerCaseFilterFactory\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><filter</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.MorfologikFilterFactory\"</span> <span class=\"fc2\">dictionary</span>=",
    "hierarchy": [
    ],
    "pageId": 314
  },
  {
    "content": "The Morfologik <span class=\"code\">dictionary</span> parameter value is a constant specifying which dictionary to choose. The\ndictionary resource must be named <span class=\"code\">path/to/language.dict</span> and have an associated <span class=\"code\">.info</span> metadata file.\nSee <span class=\"link\">the Morfologik project</span> for details. If the dictionary attribute is not provided, the Polish dictionary is\nloaded and used by default.",
    "hierarchy": [
    ],
    "pageId": 314
  },
  {
    "content": "Phonetic matching algorithms may be used to encode tokens so that two different spellings that are\npronounced similarly will match.",
    "hierarchy": [
      "Phonetic Matching"
    ],
    "pageId": 315
  },
  {
    "content": "For overviews of and comparisons between algorithms, see <span class=\"link\">http://en.wikipedia.org/wiki/Phonetic_algorithm</span>\nand <span class=\"link\">http://ntz-develop.blogspot.com/2011/03/phonetic-algorithms.html</span>",
    "hierarchy": [
      "Phonetic Matching"
    ],
    "pageId": 315
  },
  {
    "content": "For examples of how to use this encoding in your analyzer, see <span class=\"link\">Beider Morse Filter</span> in the Filter Descriptions\nsection.",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Beider-Morse Phonetic Matching (BMPM) is a \"soundalike\" tool that lets you search using a new phonetic\nmatching system. BMPM helps you search for personal names (or just surnames) in a Solr/Lucene index,\nand is far superior to the existing phonetic codecs, such as regular soundex, metaphone, caverphone, etc.",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "In general, phonetic matching lets you search a name list for names that are phonetically equivalent to the\ndesired name. BMPM is similar to a soundex search in that an exact spelling is not required. Unlike soundex,\nit does not generate a large quantity of false hits.",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "From the spelling of the name, BMPM attempts to determine the language. It then applies phonetic rules for\nthat particular language to transliterate the name into a phonetic alphabet. If it is not possible to determine\nthe language with a fair degree of certainty, it uses generic phonetic instead. Finally, it applies language-\nindependent rules regarding such things as voiced and unvoiced consonants and vowels to further insure\nthe reliability of the matches.",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "For example, assume that the matches found when searching for Stephen in a database are \"Stefan\",\n\"Steph\", \"Stephen\", \"Steve\", \"Steven\", \"Stove\", and \"Stuffin\". \"Stefan\", \"Stephen\", and \"Steven\" are\nprobably relevant, and are names that you want to see. \"Stuffin\", however, is probably not relevant. Also\nrejected were \"Steph\", \"Steve\", and \"Stove\". Of those, \"Stove\" is probably not one that we would have\nwanted. But \"Steph\" and \"Steve\" are possibly ones that you might be interested in.",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "For Solr, BMPM searching is available for the following languages:",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "English",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "French",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "German",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Greek",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Hebrew written in Hebrew letters",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Hungarian",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Italian",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Polish",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Romanian",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Russian written in Cyrillic letters",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "Russian transliterated into English letters",
    "hierarchy": [
      "Phonetic Matching",
      "Beider-Morse Phonetic Matching (BMPM)"
    ],
    "pageId": 315
  },
  {
    "content": "<span class=\"ls1\">Spanish</span>",
    "hierarchy": [
    ],
    "pageId": 316
  },
  {
    "content": "<span class=\"ls1\">Turkish</span>",
    "hierarchy": [
    ],
    "pageId": 316
  },
  {
    "content": "The name matching is also applicable to non-Jewish surnames from the countries in which those languages\nare spoken.",
    "hierarchy": [
    ],
    "pageId": 316
  },
  {
    "content": "For more information, see here: <span class=\"link\">http://stevemorse.org/phoneticinfo.htm</span> and\nhttp://stevemorse.org/phonetics/bmpm.htm.",
    "hierarchy": [
    ],
    "pageId": 316
  },
  {
    "content": "To use this encoding in your analyzer, see <span class=\"link\">Daitch-Mokotoff Soundex Filter</span> in the Filter Descriptions section.",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "The Daitch-Mokotoff Soundex algorithm is a refinement of the Russel and American Soundex algorithms,\nyielding greater accuracy in matching especially Slavic and Yiddish surnames with similar pronunciation but\ndifferences in spelling.",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "The main differences compared to the other soundex variants are:",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "<span class=\"ls1\">coded names are 6 digits long</span>",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "<span class=\"ls1\">initial character of the name is coded</span>",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "<span class=\"ls1\">rules to encoded multi-character n-grams</span>",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "<span class=\"ls1\">multiple possible encodings for the same name (branching)</span>",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "Note: the implementation used by Solr (commons-codec's <span class=\"code\">DaitchMokotoffSoundex</span> ) has additional\nbranching rules compared to the original description of the algorithm.",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "For more information, see <span class=\"link\">http://en.wikipedia.org/wiki/Daitch%E2%80%93Mokotoff_Soundex</span> and\nhttp://www.avotaynu.com/soundex.htm",
    "hierarchy": [
      "Daitch-Mokotoff Soundex"
    ],
    "pageId": 316
  },
  {
    "content": "To use this encoding in your analyzer, see <span class=\"link\">Double Metaphone Filter</span> in the Filter Descriptions section.\nAlternatively, you may specify <span class=\"code\">encoder=\"DoubleMetaphone\"</span> with the <span class=\"link\">Phonetic Filter</span>, but note that the\nPhonetic Filter version will <span class=\"ff2\">not</span> provide the second (\"alternate\") encoding that is generated by the Double\nMetaphone Filter for some tokens.",
    "hierarchy": [
      "Double Metaphone"
    ],
    "pageId": 316
  },
  {
    "content": "Encodes tokens using the double metaphone algorithm by Lawrence Philips. See the original article at\nhttp://www.drdobbs.com/the-double-metaphone-search-algorithm/184401251?pgno=2",
    "hierarchy": [
      "Double Metaphone"
    ],
    "pageId": 316
  },
  {
    "content": "To use this encoding in your analyzer, specify <span class=\"code\">encoder=\"Metaphone\"</span> with the <span class=\"link\">Phonetic Filter</span>.",
    "hierarchy": [
      "Metaphone"
    ],
    "pageId": 316
  },
  {
    "content": "Encodes tokens using the Metaphone algorithm by Lawrence Philips, described in \"Hanging on the\nMetaphone\" in Computer Language, Dec. 1990.",
    "hierarchy": [
      "Metaphone"
    ],
    "pageId": 316
  },
  {
    "content": "Another reference for more information is <span class=\"link\">Double Metaphone Search Algorithm</span>, by Lawrence Philips.",
    "hierarchy": [
      "Metaphone"
    ],
    "pageId": 316
  },
  {
    "content": "To use this encoding in your analyzer, specify <span class=\"code\">encoder=\"Soundex\"</span> with the <span class=\"link\">Phonetic Filter</span>.",
    "hierarchy": [
      "Soundex"
    ],
    "pageId": 317
  },
  {
    "content": "Encodes tokens using the Soundex algorithm, which is used to relate similar names, but can also be used as\na general purpose scheme to find words with similar phonemes.",
    "hierarchy": [
      "Soundex"
    ],
    "pageId": 317
  },
  {
    "content": "See also <span class=\"link\">http://en.wikipedia.org/wiki/Soundex</span>.",
    "hierarchy": [
      "Soundex"
    ],
    "pageId": 317
  },
  {
    "content": "To use this encoding in your analyzer, specify <span class=\"code\">encoder=\"RefinedSoundex\"</span> with the <span class=\"link\">Phonetic Filter</span>.",
    "hierarchy": [
      "Refined Soundex"
    ],
    "pageId": 317
  },
  {
    "content": "Encodes tokens using an improved version of the Soundex algorithm.",
    "hierarchy": [
      "Refined Soundex"
    ],
    "pageId": 317
  },
  {
    "content": "See <span class=\"link\">http://en.wikipedia.org/wiki/Soundex</span>.",
    "hierarchy": [
      "Refined Soundex"
    ],
    "pageId": 317
  },
  {
    "content": "To use this encoding in your analyzer, specify <span class=\"code\">encoder=\"Caverphone\"</span> with the <span class=\"link\">Phonetic Filter</span>.",
    "hierarchy": [
      "Caverphone"
    ],
    "pageId": 317
  },
  {
    "content": "Caverphone is an algorithm created by the Caversham Project at the University of Otago. The algorithm is\noptimised for accents present in the southern part of the city of Dunedin, New Zealand.",
    "hierarchy": [
      "Caverphone"
    ],
    "pageId": 317
  },
  {
    "content": "See <span class=\"link\">http://en.wikipedia.org/wiki/Caverphone</span> and the Caverphone 2.0 specification at\nhttp://caversham.otago.ac.nz/files/working/ctp150804.pdf",
    "hierarchy": [
      "Caverphone"
    ],
    "pageId": 317
  },
  {
    "content": "To use this encoding in your analyzer, specify <span class=\"code\">encoder=\"ColognePhonetic\"</span> with the <span class=\"link\">Phonetic Filter</span>.",
    "hierarchy": [
      "Kölner Phonetik a.k.a. Cologne Phonetic"
    ],
    "pageId": 317
  },
  {
    "content": "The Kölner Phonetik, an algorithm published by Hans Joachim Postel in 1969, is optimized for the German\nlanguage.",
    "hierarchy": [
      "Kölner Phonetik a.k.a. Cologne Phonetic"
    ],
    "pageId": 317
  },
  {
    "content": "See <span class=\"link\">http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik</span>",
    "hierarchy": [
      "Kölner Phonetik a.k.a. Cologne Phonetic"
    ],
    "pageId": 317
  },
  {
    "content": "To use this encoding in your analyzer, specify <span class=\"code\">encoder=\"Nysiis\"</span> with the <span class=\"link\">Phonetic Filter</span>.",
    "hierarchy": [
      "NYSIIS"
    ],
    "pageId": 317
  },
  {
    "content": "NYSIIS is an encoding used to relate similar names, but can also be used as a general purpose scheme to\nfind words with similar phonemes.",
    "hierarchy": [
      "NYSIIS"
    ],
    "pageId": 317
  },
  {
    "content": "See <span class=\"link\">http://en.wikipedia.org/wiki/NYSIIS</span> and <span class=\"link\">http://www.dropby.com/NYSIIS.html</span>",
    "hierarchy": [
      "NYSIIS"
    ],
    "pageId": 317
  },
  {
    "content": "Once you've <span class=\"link\">defined a field type in your Schema</span>, and specified the analysis steps that you want applied to it,\nyou should test it out to make sure that it behaves the way you expect it to.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "Luckily, there is a very handy page in the Solr <span class=\"link\">admin interface</span> that lets you do just that. You can invoke the\nanalyzer for any text field, provide sample input, and display the resulting token stream.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "For example, let's look at some of the \"Text\" field types available in the <span class=\"code\">bin/solr -e techproducts</span>\nexample configuration, and use the <span class=\"link\">Analysis Screen</span>\n(<span class=\"code\">http://localhost:8983/solr/#/techproducts/analysis</span>) to compare how the tokens produced at index\ntime for the sentence \"Running an Analyzer\" match up with a slightly different query text of \"run my\nanalyzer\"",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "We can begin with “<span class=\"code\">text_ws</span>” - one of the most simplified Text field types available:",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "By looking at the start and end positions for each term, we can see that the only thing this field type does is\ntokenize text on whitespace. Notice in this image that the term \"Running\" has a start position of 0 and an\nend position of 7, while \"an\" has a start position of 8 and an end position of 10, and \"Analyzer\" starts at 11\nand ends at 19. If the whitespace between the terms was also included, the count would be 21; since it is 19,\nwe know that whitespace has been removed from this query.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "Note also that the indexed terms and the query terms are still very different. \"Running\" doesn't match\n\"run\", \"Analyzer\" doesn’t match \"analyzer\" (to a computer), and obviously \"an\" and \"my\" are totally\ndifferent words. If our objective is to allow queries like \"run my analyzer\" to match indexed text like\n\"Running an Analyzer\" then we will evidently need to pick a different field type with index & query time text\nanalysis that does more processing of the inputs.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "In particular we will want:",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "Case insensitivity, so \"Analyzer\" and \"analyzer\" match.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "Stemming, so words like \"Run\" and \"Running\" are considered equivalent terms.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "Stop Word Pruning, so small words like \"an\" and \"my\" don't affect the query.",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "For our next attempt, let's try the “<span class=\"code\">text_general</span>” field type:",
    "hierarchy": [
      "Running Your Analyzer"
    ],
    "pageId": 318
  },
  {
    "content": "With the verbose output enabled, we can see how each stage of our new analyzers modify the tokens they\nreceive before passing them on to the next stage. As we scroll down to the final output, we can see that we\ndo start to get a match on \"analyzer\" from each input string, thanks to the \"LCF\" stage<span class=\"ff2\"> </span>—<span class=\"ff2\"> </span>which if you hover\nover with your mouse, you'll see is the “<span class=\"code\">LowerCaseFilter</span>”:",
    "hierarchy": [
    ],
    "pageId": 319
  },
  {
    "content": "The “<span class=\"code\">text_general</span>” field type is designed to be generally useful for any language, and it has definitely\ngotten us closer to our objective than “<span class=\"code\">text_ws</span>” from our first example by solving the problem of case\nsensitivity. It's still not quite what we are looking for because we don’t see stemming or stopword rules\nbeing applied. So now let us try the “<span class=\"code\">text_en</span>” field type:",
    "hierarchy": [
    ],
    "pageId": 319
  },
  {
    "content": "Now we can see the \"SF\" (<span class=\"ff2 fs1\">StopFilter</span>) stage of the analyzers solving the problem of removing Stop Words\n(\"an\"), and as we scroll down, we also see the \"PSF\" (<span class=\"ff2 fs1\">PorterStemFilter</span>) stage apply stemming rules\nsuitable for our English language input, such that the terms produced by our \"index analyzer\" and the terms\nproduced by our \"query analyzer\" match the way we expect.",
    "hierarchy": [
    ],
    "pageId": 320
  },
  {
    "content": "At this point, we can continue to experiment with additional inputs, verifying that our analyzers produce\nmatching tokens when we expect them to match, and disparate tokens when we do not expect them to\nmatch, as we iterate and tweak our field type configuration.",
    "hierarchy": [
    ],
    "pageId": 320
  },
  {
    "content": "This section describes how Solr adds data to its index. It covers the following topics:",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Introduction to Solr Indexing</span>: An overview of Solr's indexing process.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Post Tool</span>: Information about using <span class=\"code\">post.jar</span> to quickly upload some content to your system.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Uploading Data with Index Handlers</span>: Information about using Solr's Index Handlers to upload\nXML/XSLT, JSON and CSV data.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Transforming and Indexing Custom JSON</span>: Index any JSON of your choice",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Uploading Data with Solr Cell using Apache Tika</span>: Information about using the Solr Cell framework to\nupload data for indexing.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Uploading Structured Data Store Data with the Data Import Handler</span>: Information about uploading\nand indexing data from a structured data store.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Updating Parts of Documents</span>: Information about how to use atomic updates and optimistic\nconcurrency with Solr.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Detecting Languages During Indexing</span>: Information about using language identification during the\nindexing process.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">De-Duplication</span>: Information about configuring Solr to mark duplicate documents as they are indexed.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">Content Streams</span>: Information about streaming content to Solr Request Handlers.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "<span class=\"link\">UIMA Integration</span>: Information about integrating Solr with Apache's Unstructured Information\nManagement Architecture (UIMA). UIMA lets you define custom pipelines of Analysis Engines that\nincrementally add metadata to your documents as annotations.",
    "hierarchy": [
      "Indexing and Basic Data Operations"
    ],
    "pageId": 321
  },
  {
    "content": "Using client APIs, such as <span class=\"link\">SolrJ</span>, from your applications is an important option for updating Solr indexes. See\nthe <span class=\"link\">Client APIs</span> section for more information.",
    "hierarchy": [
      "Indexing Using Client APIs"
    ],
    "pageId": 322
  },
  {
    "content": "This section describes the process of indexing: adding content to a Solr index and, if necessary, modifying\nthat content or deleting it.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "By adding content to an index, we make it searchable by Solr.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "A Solr index can accept data from many different sources, including XML files, comma-separated value (CSV)\nfiles, data extracted from tables in a database, and files in common file formats such as Microsoft Word or\nPDF.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "Here are the three most common ways of loading data into a Solr index:",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "Using the <span class=\"link\">Solr Cell</span> framework built on Apache Tika for ingesting binary files or structured files such as\nOffice, Word, PDF, and other proprietary formats.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "Uploading XML files by sending HTTP requests to the Solr server from any environment where such\nrequests can be generated.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "Writing a custom Java application to ingest data through Solr's Java Client API (which is described in\nmore detail in <span class=\"link\">Client APIs</span>). Using the Java API may be the best choice if you’re working with an\napplication, such as a Content Management System (CMS), that offers a Java API.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "Regardless of the method used to ingest data, there is a common basic data structure for data being fed\ninto a Solr index: a <span class=\"code\">document</span> containing multiple <span class=\"code\">fields,</span> each with a <span class=\"code\">name</span> and containing <span class=\"code\">content,</span> which may\nbe empty. One of the fields is usually designated as a unique ID field (analogous to a primary key in a\ndatabase), although the use of a unique ID field is not strictly required by Solr.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "If the field name is defined in the Schema that is associated with the index, then the analysis steps\nassociated with that field will be applied to its content when the content is tokenized. Fields that are not\nexplicitly defined in the Schema will either be ignored or mapped to a dynamic field definition (see\nDocuments, Fields, and Schema Design<span class=\"fc1\">), if one matching the field name exists.</span>",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "For more information on indexing in Solr, see the <span class=\"link\">Solr Wiki</span>.",
    "hierarchy": [
      "Introduction to Solr Indexing"
    ],
    "pageId": 323
  },
  {
    "content": "When starting Solr with the \"-e\" option, the <span class=\"ff4 fs3\">example/</span> directory will be used as base directory for the\nexample Solr instances that are created. This directory also includes an <span class=\"ff4 fs3\">example/exampledocs/</span> subdirectory\ncontaining sample documents in a variety of formats that you can use to experiment with indexing into the\nvarious examples.",
    "hierarchy": [
      "Introduction to Solr Indexing",
      "The Solr Example Directory"
    ],
    "pageId": 323
  },
  {
    "content": "Many of the instructions and examples in this section make use of the <span class=\"ff4 fs3\">curl</span> utility for transferring content\nthrough a URL. <span class=\"ff4 fs3\">curl</span> posts and retrieves data over HTTP, FTP, and many other protocols. Most Linux\ndistributions include a copy of <span class=\"ff4 fs3\">curl</span>. You'll find curl downloads for Linux, Windows, and many other\noperating systems at <span class=\"link\">http://curl.haxx.se/download.html</span>. Documentation for <span class=\"ff4 fs3\">curl</span> is available here:\nhttp://curl.haxx.se/docs/manpage.html<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Introduction to Solr Indexing",
      "The curl Utility for Transferring Files"
    ],
    "pageId": 323
  },
  {
    "content": "Using <span class=\"code\">curl</span> or other command line tools for posting data is just fine for examples or tests,\nbut it's not the recommended method for achieving the best performance for updates in\nproduction environments. You will achieve better performance with Solr Cell or the other\nmethods described in this section.",
    "hierarchy": [
    ],
    "pageId": 324
  },
  {
    "content": "Instead of <span class=\"code\">curl</span>, you can use utilities such as GNU <span class=\"code\">wget</span> (<span class=\"link\">http://www.gnu.org/software/</span>\nwget/<span class=\"fc1\">) or manage GETs and POSTS with Perl, although the command line options will</span>\ndiffer.",
    "hierarchy": [
    ],
    "pageId": 324
  },
  {
    "content": "Solr includes a simple command line tool for POSTing various types of content to a Solr server.",
    "hierarchy": [
      "Post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "The tool is <span class=\"code\">bin/post</span>. The bin/post tool is a Unix shell script; for Windows (non-Cygwin) usage, see the\nsection <span class=\"link\">Post Tool Windows Support</span> below.",
    "hierarchy": [
      "Post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "To run it, open a window and enter:",
    "hierarchy": [
      "Post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "bin/post -c gettingstarted example/films/films.json",
    "hierarchy": [
      "Post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "This will contact the server at <span class=\"code\">localhost:8983</span>. Specifying the <span class=\"code\">collection/core name</span> is <span class=\"ff1\">mandatory</span>. The\n-help<span class=\"ff2 fs1\"> (or simply </span>-h<span class=\"ff2 fs1\">) option will output information on its usage (i.e., </span>bin/post -help)<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "Specifying either the <span class=\"code\">collection/core name</span> or the full update <span class=\"code\">url</span> is <span class=\"ff1\">mandatory</span> when using <span class=\"code\">bin/post</span>.",
    "hierarchy": [
      "Post Tool",
      "Using the bin/post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "The basic usage of <span class=\"code\">bin/post</span> is:",
    "hierarchy": [
      "Post Tool",
      "Using the bin/post Tool"
    ],
    "pageId": 325
  },
  {
    "content": "$ bin/post -h\nUsage: post -c <collection> [OPTIONS] <files|directories|urls|-d [\"...\",...]>\nÊ   or post -help",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "Ê  collection name defaults to DEFAULT_SOLR_COLLECTION if not specified",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "OPTIONS\n=======\nÊ Solr options:\nÊ   -url <base Solr update URL> (overrides collection, host, and port)\nÊ   -host <host> (default: localhost)\nÊ   -p or -port <port> (default: 8983)\nÊ   -commit yes|no (default: yes)\nÊ   -u or -user <user:pass> (sets BasicAuth credentials)",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "Ê Web crawl options:\nÊ   -recursive <depth> (default: 1)\nÊ   -delay <seconds> (default: 10)",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "Ê Directory crawl options:\nÊ   -delay <seconds> (default: 0)",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "Ê stdin/args options:\nÊ   -type <content/type> (default: application/xml)",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "Ê Other options:\nÊ   -filetypes <type>[,<type>,...] (default:\nxml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log)\nÊ   -params \"<key>=<value>[&<key>=<value>...]\" (values must be URL-encoded; these pass through to\nSolr update request)\nÊ   -out yes|no (default: no; yes outputs Solr response to console)\n...",
    "hierarchy": [
    ],
    "pageId": 326
  },
  {
    "content": "There are several ways to use <span class=\"ff1 fs2\">bin/post</span>. This section presents several examples.",
    "hierarchy": [
      "Examples Using bin/post"
    ],
    "pageId": 326
  },
  {
    "content": "Add all documents with file extension <span class=\"ff1 fs2\">.xml</span> to collection or core named <span class=\"ff1 fs2\">gettingstarted</span>.",
    "hierarchy": [
      "Examples Using bin/post",
      "Indexing XML"
    ],
    "pageId": 326
  },
  {
    "content": "bin/post -c gettingstarted *.xml",
    "hierarchy": [
      "Examples Using bin/post",
      "Indexing XML"
    ],
    "pageId": 326
  },
  {
    "content": "Add all documents with file extension <span class=\"ff1 fs2\">.xml</span> to the <span class=\"ff1 fs2\">gettingstarted</span> collection/core on Solr running on port\n8984<span class=\"code\">.</span>",
    "hierarchy": [
      "Examples Using bin/post",
      "Indexing XML"
    ],
    "pageId": 326
  },
  {
    "content": "bin/post -c gettingstarted -p 8984 *.xml",
    "hierarchy": [
    ],
    "pageId": 327
  },
  {
    "content": "Send XML arguments to delete a document from <span class=\"ff1 fs1\">gettingstarted</span>.",
    "hierarchy": [
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c gettingstarted -d '<delete><id>42</id></delete>'",
    "hierarchy": [
    ],
    "pageId": 327
  },
  {
    "content": "Index all CSV files into <span class=\"ff1 fs1\">gettingstarted</span>:",
    "hierarchy": [
      "Indexing CSV"
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c gettingstarted *.csv",
    "hierarchy": [
      "Indexing CSV"
    ],
    "pageId": 327
  },
  {
    "content": "Index a tab-separated file into <span class=\"ff1 fs1\">gettingstarted</span>:",
    "hierarchy": [
      "Indexing CSV"
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c signals -params \"separator=%09\" -type text/csv data.tsv",
    "hierarchy": [
      "Indexing CSV"
    ],
    "pageId": 327
  },
  {
    "content": "The content type (<span class=\"ff1 fs1\">-type</span>) parameter is required to treat the file as the proper type, otherwise it will be\nignored and a WARNING logged as it does not know what type of content a .tsv file is. The <span class=\"link\">CSV handler</span>\nsupports the <span class=\"ff1 fs1\">separator</span> parameter, and is passed through using the <span class=\"ff1 fs1\">-params</span> setting.",
    "hierarchy": [
      "Indexing CSV"
    ],
    "pageId": 327
  },
  {
    "content": "Index all JSON files into <span class=\"ff1 fs1\">gettingstarted</span>.",
    "hierarchy": [
      "Indexing JSON"
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c gettingstarted *.json",
    "hierarchy": [
      "Indexing JSON"
    ],
    "pageId": 327
  },
  {
    "content": "Index a PDF file into <span class=\"ff1 fs1\">gettingstarted</span>.",
    "hierarchy": [
      "Indexing Rich Documents (PDF, Word, HTML, etc.)"
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c gettingstarted a.pdf",
    "hierarchy": [
      "Indexing Rich Documents (PDF, Word, HTML, etc.)"
    ],
    "pageId": 327
  },
  {
    "content": "Automatically detect content types in a folder, and recursively scan it for documents for indexing into\ngettingstarted<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Indexing Rich Documents (PDF, Word, HTML, etc.)"
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c gettingstarted afolder/",
    "hierarchy": [
      "Indexing Rich Documents (PDF, Word, HTML, etc.)"
    ],
    "pageId": 327
  },
  {
    "content": "Automatically detect content types in a folder, but limit it to PPT and HTML files and index into\ngettingstarted<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Indexing Rich Documents (PDF, Word, HTML, etc.)"
    ],
    "pageId": 327
  },
  {
    "content": "bin/post -c gettingstarted -filetypes ppt,html afolder/",
    "hierarchy": [
      "Indexing Rich Documents (PDF, Word, HTML, etc.)"
    ],
    "pageId": 327
  },
  {
    "content": "Index a PDF as the user \"solr\" with password \"SolrRocks\":",
    "hierarchy": [
      "Indexing to a Password Protected Solr (Basic Auth)"
    ],
    "pageId": 328
  },
  {
    "content": "bin/post -u solr:SolrRocks -c gettingstarted a.pdf",
    "hierarchy": [
      "Indexing to a Password Protected Solr (Basic Auth)"
    ],
    "pageId": 328
  },
  {
    "content": "bin/post<span class=\"ff2 fs1\"> exists currently only as a Unix shell script, however it delegates its work to a cross-platform</span>\ncapable Java program. The <span class=\"link\">SimplePostTool</span> can be run directly in supported environments, including\nWindows.",
    "hierarchy": [
      "Post Tool Windows Support"
    ],
    "pageId": 328
  },
  {
    "content": "The <span class=\"code\">bin/post</span> script currently delegates to a standalone Java program called <span class=\"code\">SimplePostTool</span>.",
    "hierarchy": [
      "SimplePostTool"
    ],
    "pageId": 328
  },
  {
    "content": "This tool, bundled into a executable JAR, can be run directly using <span class=\"code\">java -jar</span>\nexample/exampledocs/post.jar<span class=\"ff2 fs1\">. See the help output and take it from there to post files, recurse a website</span>\nor file system folder, or send direct commands to a Solr server.",
    "hierarchy": [
      "SimplePostTool"
    ],
    "pageId": 328
  },
  {
    "content": "$ java -jar example/exampledocs/post.jar -h\nSimplePostTool version 5.0.0\nUsage: java [SystemProperties] -jar post.jar [-h|-] [<file|folder|url|arg>\n[<file|folder|url|arg>...]]\n.\n.\n.",
    "hierarchy": [
      "SimplePostTool"
    ],
    "pageId": 328
  },
  {
    "content": "Index Handlers are Request Handlers designed to add, delete and update documents to the index. In\naddition to having plugins for importing rich documents <span class=\"link\">using Tika</span> or from structured data sources using\nthe <span class=\"link\">Data Import Handler</span>, Solr natively supports indexing structured documents in XML, CSV and JSON.",
    "hierarchy": [
      "Uploading Data with Index Handlers"
    ],
    "pageId": 329
  },
  {
    "content": "The recommended way to configure and use request handlers is with path based names that map to paths\nin the request url. However, request handlers can also be specified with the <span class=\"code\">qt</span> (query type) parameter if the\nrequestDispatcher<span class=\"ff2 fs1\"> is appropriately configured. It is possible to access the same handler using more than</span>\none name, which can be useful if you wish to specify different sets of default options.",
    "hierarchy": [
      "Uploading Data with Index Handlers"
    ],
    "pageId": 329
  },
  {
    "content": "A single unified update request handler supports XML, CSV, JSON, and javabin update requests, delegating\nto the appropriate <span class=\"code\">ContentStreamLoader</span> based on the <span class=\"code\">Content-Type</span> of the <span class=\"link\">ContentStream</span>.",
    "hierarchy": [
      "Uploading Data with Index Handlers"
    ],
    "pageId": 329
  },
  {
    "content": "The default configuration file has the update request handler configured by default.",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "UpdateRequestHandler Configuration"
    ],
    "pageId": 329
  },
  {
    "content": "Index update commands can be sent as XML message to the update handler using <span class=\"code\">Content-type:</span>\napplication/xml<span class=\"ff2 fs1\"> or </span>Content-type: text/xml<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "XML Formatted Index Updates"
    ],
    "pageId": 329
  },
  {
    "content": "The XML schema recognized by the update handler for adding documents is very straightforward:",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "XML Formatted Index Updates",
      "Adding Documents"
    ],
    "pageId": 329
  },
  {
    "content": "The <span class=\"code\"><add></span> element introduces one more documents to be added.",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "XML Formatted Index Updates",
      "Adding Documents"
    ],
    "pageId": 329
  },
  {
    "content": "The <span class=\"code\"><doc></span> element introduces the fields making up a document.",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "XML Formatted Index Updates",
      "Adding Documents"
    ],
    "pageId": 329
  },
  {
    "content": "The <span class=\"code\"><field></span> element presents the content for a specific field.",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "XML Formatted Index Updates",
      "Adding Documents"
    ],
    "pageId": 329
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Uploading Data with Index Handlers",
      "XML Formatted Index Updates",
      "Adding Documents"
    ],
    "pageId": 329
  },
  {
    "content": "Ê <span class=\"fc0\"><doc></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"authors\"<span class=\"fc0\">></span></span>Patrick Eagar<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"subject\"<span class=\"fc0\">></span></span>Sports<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dd\"<span class=\"fc0\">></span></span>796.35<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"numpages\"<span class=\"fc0\">></span></span>128<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"desc\"<span class=\"fc0\">></field></span></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"price\"<span class=\"fc0\">></span></span>12.40<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"title\"<span class=\"fc0\">></span></span>Summer of the all-rounder: Test and championship cricket in England\n1982<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"isbn\"<span class=\"fc0\">></span></span>0002166313<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"yearpub\"<span class=\"fc0\">></span></span>1982<span class=\"fc0\"></field></span>\nÊ   <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"publisher\"<span class=\"fc0\">></span></span>Collins<span class=\"fc0\"></field></span>\nÊ <span class=\"fc0\"></doc></span>\nÊ <span class=\"fc0\"><doc></span>\nÊ ...\nÊ <span class=\"fc0\"></doc></span>",
    "hierarchy": [
    ],
    "pageId": 330
  },
  {
    "content": "The add command supports some optional attributes which may be specified.",
    "hierarchy": [
    ],
    "pageId": 330
  },
  {
    "content": "commitWithin\nAdd the document within the specified number of milliseconds.",
    "hierarchy": [
    ],
    "pageId": 330
  },
  {
    "content": "overwrite\nDefault is <span class=\"ff1 fs1\">true</span>. Indicates if the unique key constraints should be checked to overwrite previous versions\nof the same document (see below).",
    "hierarchy": [
    ],
    "pageId": 330
  },
  {
    "content": "If the document schema defines a unique key, then by default an <span class=\"ff1 fs1\">/update</span> operation to add a document will\noverwrite (i.e., replace) any document in the index with the same unique key. If no unique key has been\ndefined, indexing performance is somewhat faster, as no check has to be made for an existing documents to\nreplace.",
    "hierarchy": [
    ],
    "pageId": 330
  },
  {
    "content": "If you have a unique key field, but you feel confident that you can safely bypass the uniqueness check (e.g.,\nyou build your indexes in batch, and your indexing code guarantees it never adds the same document more\nthan once) you can specify the <span class=\"ff1 fs1\">overwrite=\"false\"</span> option when adding your documents.",
    "hierarchy": [
    ],
    "pageId": 330
  },
  {
    "content": "The <span class=\"ff1 fs1\"><commit></span> operation writes all documents loaded since the last commit to one or more segment files on\nthe disk. Before a commit has been issued, newly indexed content is not visible to searches. The commit\noperation opens a new searcher, and triggers any event listeners that have been configured.",
    "hierarchy": [
      "XML Update Commands",
      "Commit and Optimize During Updates"
    ],
    "pageId": 330
  },
  {
    "content": "Commits may be issued explicitly with a <span class=\"ff1 fs1\"><commit/></span> message, and can also be triggered from <span class=\"ff1 fs1\"><autocommit></span>\nparameters in <span class=\"ff1 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
      "XML Update Commands",
      "Commit and Optimize During Updates"
    ],
    "pageId": 330
  },
  {
    "content": "The <span class=\"ff1 fs1\"><optimize></span> operation requests Solr to merge internal data structures. For a large index, optimization\nwill take some time to complete, but by merging many small segment files into a larger one, search",
    "hierarchy": [
      "XML Update Commands",
      "Commit and Optimize During Updates"
    ],
    "pageId": 330
  },
  {
    "content": "performance may improve. If you are using Solr's replication mechanism to distribute searches across many\nsystems, be aware that after an optimize, a complete index will need to be transferred.",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "You should only consider using optimize on static indexes, i.e., indexes that can be\noptimized as part of the regular update process (say once-a-day updates). Applications\nrequiring NRT functionalty are discouraged from using optimize.",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "The <span class=\"code\"><commit></span> and <span class=\"code\"><optimize></span> elements accept these optional attributes:",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "waitSearcher\nDefault is <span class=\"code\">true</span>. Blocks until a new searcher is opened and registered as the main query searcher, making\nthe changes visible.",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "expungeDeletes\n(commit only) Default is <span class=\"code\">false</span>. Merges segments that have more than 10% deleted docs, expunging\nthem in the process.",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "expungeDeletes is \"less expensive\" than optimize, but the same warnings apply.",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "maxSegments\n(optimize only) Default is <span class=\"code\">1</span>. Merges the segments down to no more than this number of segments.",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "Here are examples of <commit> and <optimize> using optional attributes:",
    "hierarchy": [
    ],
    "pageId": 331
  },
  {
    "content": "Documents can be deleted from the index in two ways. \"Delete by ID\" deletes the document with the\nspecified ID, and can be used only if a UniqueID field has been defined in the schema. \"Delete by Query\"\ndeletes all documents matching a specified query, although <span class=\"code\">commitWithin</span> is ignored for a Delete by Query.\nA single delete message can contain multiple delete operations.",
    "hierarchy": [
      "Delete Operations"
    ],
    "pageId": 331
  },
  {
    "content": "Ê <span class=\"fc2\"><id></span>0002166313<span class=\"fc2\"></id></span>\nÊ <span class=\"fc2\"><id></span>0031745983<span class=\"fc2\"></id></span>\nÊ <span class=\"fc2\"><query></span>subject:sport<span class=\"fc2\"></query></span>\nÊ <span class=\"fc2\"><query></span>publisher:penguin<span class=\"fc2\"></query></span>",
    "hierarchy": [
      "Delete Operations"
    ],
    "pageId": 331
  },
  {
    "content": "When using the Join query parser in a Delete By Query, you should use the <span class=\"code\">score</span>\nparameter with a value of \"none\" to avoid a <span class=\"code\">ClassCastException</span>. See the section on the\nJoin Query Parser<span class=\"fc0\"> for more details on the <span class=\"code\">score</span> parameter.</span>",
    "hierarchy": [
      "Delete Operations"
    ],
    "pageId": 331
  },
  {
    "content": "The rollback command rolls back all add and deletes made to the index since the last commit. It neither calls",
    "hierarchy": [
      "Rollback Operations"
    ],
    "pageId": 331
  },
  {
    "content": "any event listeners nor creates a new searcher. Its syntax is simple: <span class=\"ff2 fs1\"><rollback/></span>.",
    "hierarchy": [
    ],
    "pageId": 332
  },
  {
    "content": "You can post several commands in a single XML file by grouping them with the surrounding <span class=\"ff2 fs1\"><update></span>\nelement.",
    "hierarchy": [
      "Grouping Operations"
    ],
    "pageId": 332
  },
  {
    "content": "Ê <span class=\"fc2\"><add></span>\nÊ   <span class=\"fc2\"><doc><span class=\"fc3\"><!-- doc 1 content --></span></doc></span>\nÊ <span class=\"fc2\"></add></span>\nÊ <span class=\"fc2\"><add></span>\nÊ   <span class=\"fc2\"><doc><span class=\"fc3\"><!-- doc 2 content --></span></doc></span>\nÊ <span class=\"fc2\"></add></span>\nÊ <span class=\"fc2\"><delete></span>\nÊ   <span class=\"fc2\"><id></span>0002166313<span class=\"fc2\"></id></span>\nÊ <span class=\"fc2\"></delete></span>",
    "hierarchy": [
      "Grouping Operations"
    ],
    "pageId": 332
  },
  {
    "content": "You can use the <span class=\"ff2 fs1\">curl</span> utility to perform any of the above commands, using its <span class=\"ff2 fs1\">--data-binary</span> option to\nappend the XML message to the <span class=\"ff2 fs1\">curl</span> command, and generating a HTTP POST request. For example:",
    "hierarchy": [
      "Using curl to Perform Updates"
    ],
    "pageId": 332
  },
  {
    "content": "curl http://localhost:8983/solr/my_collection/update -H \"Content-Type: text/xml\" --data-binary '\n<add>\nÊ <doc>\nÊ   <field name=\"authors\">Patrick Eagar</field>\nÊ   <field name=\"subject\">Sports</field>\nÊ   <field name=\"dd\">796.35</field>\nÊ   <field name=\"isbn\">0002166313</field>\nÊ   <field name=\"yearpub\">1982</field>\nÊ   <field name=\"publisher\">Collins</field>\nÊ </doc>\n</add>'",
    "hierarchy": [
      "Using curl to Perform Updates"
    ],
    "pageId": 332
  },
  {
    "content": "For posting XML messages contained in a file, you can use the alternative form:",
    "hierarchy": [
      "Using curl to Perform Updates"
    ],
    "pageId": 332
  },
  {
    "content": "curl http://localhost:8983/solr/my_collection/update -H \"Content-Type: text/xml\" --data-binary\n@myfile.xml",
    "hierarchy": [
      "Using curl to Perform Updates"
    ],
    "pageId": 332
  },
  {
    "content": "The approach above works well, but using the <span class=\"ff2 fs1\">--data-binary</span> option causes <span class=\"ff2 fs1\">curl</span> to load the whole\nmyfile.xml<span class=\"ff1 fs0\"> into memory before posting it to server. This may be problematic when dealing with multi-</span>\ngigabyte files. This alternative <span class=\"ff2 fs1\">curl</span> command performs equivalent operations but with minimal <span class=\"ff2 fs1\">curl</span>\nmemory usage:",
    "hierarchy": [
      "Using curl to Perform Updates"
    ],
    "pageId": 332
  },
  {
    "content": "curl http://localhost:8983/solr/my_collection/update -H \"Content-Type: text/xml\" -T \"myfile.xml\"\n-X POST",
    "hierarchy": [
    ],
    "pageId": 333
  },
  {
    "content": "Short requests can also be sent using a HTTP GET command, if enabled in <span class=\"link\">RequestDispatcher in SolrConfig</span>\nelement, URL-encoding the request, as in the following. Note the escaping of \"<\" and \">\":",
    "hierarchy": [
    ],
    "pageId": 333
  },
  {
    "content": "curl http://localhost:8983/solr/my_collection/update?stream.body=%3Ccommit/%3E&wt=xml",
    "hierarchy": [
    ],
    "pageId": 333
  },
  {
    "content": "Responses from Solr take the form shown here:",
    "hierarchy": [
    ],
    "pageId": 333
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>127<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 333
  },
  {
    "content": "The status field will be non-zero in case of failure.",
    "hierarchy": [
    ],
    "pageId": 333
  },
  {
    "content": "The UpdateRequestHandler allows you to index any arbitrary XML using the <span class=\"ff1 fs2\"><tr></span> parameter to apply an <span class=\"link\">XSL</span>\ntransformation<span class=\"fc0\">. You must have an XSLT stylesheet in the <span class=\"ff1 fs2\">conf/xslt</span> directory of your </span>config set<span class=\"fc0\"> that can</span>\ntransform the incoming data to the expected <span class=\"ff1 fs2\"><add><doc/></add></span> format, and use the <span class=\"ff1 fs2\">tr</span> parameter to\nspecify the name of that stylesheet.",
    "hierarchy": [
      "Using XSLT to Transform XML Index Updates"
    ],
    "pageId": 333
  },
  {
    "content": "Here is an example XSLT stylesheet:",
    "hierarchy": [
      "Using XSLT to Transform XML Index Updates"
    ],
    "pageId": 333
  },
  {
    "content": "Ê <span class=\"fc0\"><xsl:output</span> <span class=\"fc2\">media-type</span>=<span class=\"fc3\">\"text/xml\"</span> <span class=\"fc2\">method</span>=<span class=\"fc3\">\"xml\"</span> <span class=\"fc2\">indent</span>=<span class=\"fc3\">\"yes\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><xsl:template</span> <span class=\"fc2\">match</span>=<span class=\"fc3\">'/'<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><add></span>\nÊ     <span class=\"fc0\"><xsl:apply-templates</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"response/result/doc\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"></add></span>\nÊ <span class=\"fc0\"></xsl:template></span>\nÊ <span class=\"fc4\"><!-- Ignore score (makes no sense to index) --></span>\nÊ <span class=\"fc0\"><xsl:template</span> <span class=\"fc2\">match</span>=<span class=\"fc3\">\"doc/*[@name='score']\"</span> <span class=\"fc2\">priority</span>=<span class=\"fc3\">\"100\"<span class=\"fc0\">></xsl:template></span></span>\nÊ <span class=\"fc0\"><xsl:template</span> <span class=\"fc2\">match</span>=<span class=\"fc3\">\"doc\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><xsl:variable</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pos\"</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"position()\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><doc></span>\nÊ     <span class=\"fc0\"><xsl:apply-templates></span>\nÊ       <span class=\"fc0\"><xsl:with-param</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pos\"<span class=\"fc0\">><xsl:value-of</span></span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"$pos\"<span class=\"fc0\">/></xsl:with-param></span></span>\nÊ     <span class=\"fc0\"></xsl:apply-templates></span>\nÊ   <span class=\"fc0\"></doc></span>\nÊ <span class=\"fc0\"></xsl:template></span>\nÊ <span class=\"fc4\"><!-- Flatten arrays to duplicate field lines --></span>\nÊ <span class=\"fc0\"><xsl:template</span> <span class=\"fc2\">match</span>=<span class=\"fc3\">\"doc/arr\"</span> <span class=\"fc2\">priority</span>=<span class=\"fc3\">\"100\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><xsl:variable</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fn\"</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"@name\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"><xsl:for-each</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"*\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><xsl:element</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"field\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><xsl:attribute</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">><xsl:value-of</span></span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"$fn\"<span class=\"fc0\">/></xsl:attribute></span></span>\nÊ       <span class=\"fc0\"><xsl:value-of</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\".\"<span class=\"fc0\">/></span></span>\nÊ     <span class=\"fc0\"></xsl:element></span>\nÊ   <span class=\"fc0\"></xsl:for-each></span>\nÊ <span class=\"fc0\"></xsl:template></span>\nÊ <span class=\"fc0\"><xsl:template</span> <span class=\"fc2\">match</span>=<span class=\"fc3\">\"doc/*\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><xsl:variable</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fn\"</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"@name\"<span class=\"fc0\">/></span></span>\nÊ     <span class=\"fc0\"><xsl:element</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"field\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><xsl:attribute</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">><xsl:value-of</span></span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\"$fn\"<span class=\"fc0\">/></xsl:attribute></span></span>\nÊ     <span class=\"fc0\"><xsl:value-of</span> <span class=\"fc2\">select</span>=<span class=\"fc3\">\".\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"></xsl:element></span>\nÊ <span class=\"fc0\"></xsl:template></span>\nÊ <span class=\"fc0\"><xsl:template</span> <span class=\"fc2\">match</span>=<span class=\"fc3\">\"*\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 334
  },
  {
    "content": "This stylesheet transforms Solr's XML search result format into Solr’s Update XML syntax. One example\nusage would be to copy a Solr 1.3 index (which does not have CSV response writer) into a format which can\nbe indexed into another Solr file (provided that all fields are stored):",
    "hierarchy": [
    ],
    "pageId": 334
  },
  {
    "content": "http://localhost:8983/solr/my_collection/select?q=*:*&wt=xslt&tr=updateXml.xsl&rows=1000",
    "hierarchy": [
    ],
    "pageId": 334
  },
  {
    "content": "You can also use the stylesheet in <span class=\"ff1 fs1\">XsltUpdateRequestHandler</span> to transform an index when updating:",
    "hierarchy": [
    ],
    "pageId": 334
  },
  {
    "content": "curl \"http://localhost:8983/solr/my_collection/update?commit=true&tr=updateXml.xsl\" -H \"Content-\nType: text/xml\" --data-binary @myexporteddata.xml",
    "hierarchy": [
    ],
    "pageId": 334
  },
  {
    "content": "Solr can accept JSON that conforms to a defined structure, or can accept arbitrary JSON-formatted\ndocuments. If sending arbitrarily formatted JSON, there are some additional parameters that need to be\nsent with the update request, described below in the section <span class=\"link\">Transforming and Indexing Custom JSON</span>.",
    "hierarchy": [
      "JSON Formatted Index Updates"
    ],
    "pageId": 335
  },
  {
    "content": "JSON formatted update requests may be sent to Solr's <span class=\"code\">/update</span> handler using <span class=\"code\">Content-Type:</span>\napplication/json<span class=\"ff2 fs1\"> or </span>Content-Type: text/json<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON"
    ],
    "pageId": 335
  },
  {
    "content": "JSON formatted updates can take 3 basic forms, described in depth below:",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON"
    ],
    "pageId": 335
  },
  {
    "content": "<span class=\"link\">A single document to add<span class=\"fc1\">, expressed as a top level JSON Object. To differentiate this from a set of</span></span>\ncommands, the <span class=\"code\">json.command=false</span> request parameter is required.",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON"
    ],
    "pageId": 335
  },
  {
    "content": "<span class=\"link\">A list of documents to add<span class=\"fc1\">, expressed as a top level JSON Array containing a JSON Object per document.</span></span>",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON"
    ],
    "pageId": 335
  },
  {
    "content": "<span class=\"link\">A sequence of update commands<span class=\"fc1\">, expressed as a top level JSON Object (aka: Map).</span></span>",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON"
    ],
    "pageId": 335
  },
  {
    "content": "The simplest way to add Documents via JSON is to send each document individually as a JSON Object, using\nthe <span class=\"code\">/update/json/docs</span> path:",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON",
      "Adding a Single JSON Document"
    ],
    "pageId": 335
  },
  {
    "content": "curl -X POST -H 'Content-Type: application/json'\n'http://localhost:8983/solr/my_collection/update/json/docs' --data-binary '\n{\nÊ \"id\": \"1\",\nÊ \"title\": \"Doc 1\"\n}'",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON",
      "Adding a Single JSON Document"
    ],
    "pageId": 335
  },
  {
    "content": "Adding multiple documents at one time via JSON can be done via a JSON Array of JSON Objects, where each\nobject represents a document:",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON",
      "Adding Multiple JSON Documents"
    ],
    "pageId": 335
  },
  {
    "content": "curl -X POST -H 'Content-Type: application/json'\n'http://localhost:8983/solr/my_collection/update' --data-binary '\n[\nÊ {\nÊ   \"id\": \"1\",\nÊ   \"title\": \"Doc 1\"\nÊ },\nÊ {\nÊ   \"id\": \"2\",\nÊ   \"title\": \"Doc 2\"\nÊ }\n]'",
    "hierarchy": [
      "JSON Formatted Index Updates",
      "Solr-Style JSON",
      "Adding Multiple JSON Documents"
    ],
    "pageId": 335
  },
  {
    "content": "A sample JSON file is provided at <span class=\"ff2 fs1\">example/exampledocs/books.json</span> and contains an array of objects that\nyou can add to the Solr <span class=\"ff2 fs1\">techproducts</span> example:",
    "hierarchy": [
    ],
    "pageId": 336
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update?commit=true' --data-binary\n@example/exampledocs/books.json -H 'Content-type:application/json'",
    "hierarchy": [
    ],
    "pageId": 336
  },
  {
    "content": "In general, the JSON update syntax supports all of the update commands that the XML update handler\nsupports, through a straightforward mapping. Multiple commands, adding and deleting documents, may be\ncontained in one message:",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "curl -X POST -H 'Content-Type: application/json'\n'http://localhost:8983/solr/my_collection/update' --data-binary '\n{\nÊ \"add\": {\nÊ   \"doc\": {\nÊ     \"id\": \"DOC1\",\nÊ     \"my_field\": 2.3,",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "Ê   }\nÊ },\nÊ \"add\": {",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "Ê   \"doc\": {",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "Ê     \"f1\": \"v2\"\nÊ   }\nÊ },",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "Ê \"commit\": {},\nÊ \"optimize\": { \"waitSearcher\":false },",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "}'",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "Can use an array for a multi-valued field\nCommit this document within 5 seconds\nDon't check for existing documents with the same uniqueKey\nCan use repeated keys for a multi-valued field\nDelete by ID (uniqueKey field)\nDelete by Query",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "As with other update handlers, parameters such as <span class=\"ff2 fs1\">commit</span>, <span class=\"ff2 fs1\">commitWithin</span>, <span class=\"ff2 fs1\">optimize</span>, and <span class=\"ff2 fs1\">overwrite</span> may be\nspecified in the URL instead of in the body of the message.",
    "hierarchy": [
      "Sending JSON Update Commands"
    ],
    "pageId": 336
  },
  {
    "content": "The JSON update format allows for a simple delete-by-id. The value of a <span class=\"ff2 fs1\">delete</span> can be an array which\ncontains a list of zero or more specific document id's (not a range) to be deleted. For example, a single\ndocument:",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "{ <span class=\"fc1\">\"delete\"</span>:<span class=\"fc2\">\"myid\"</span> }",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "Or a list of document IDs:",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "{ <span class=\"fc1\">\"delete\"</span>:[<span class=\"fc2\">\"id1\"</span>,<span class=\"fc2\">\"id2\"</span>] }",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "The value of a \"delete\" can be an array which contains a list of zero or more id's to be deleted. It is not a\nrange (start and end).",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "You can also specify <span class=\"ff2 fs1\">_version_</span> with each \"delete\":",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"delete\"</span>:<span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">50</span>,\nÊ <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">12345</span>\n}",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "You can specify the version of deletes in the body of the update request as well.",
    "hierarchy": [
    ],
    "pageId": 337
  },
  {
    "content": "In addition to the <span class=\"ff2 fs1\">/update</span> handler, there are a few additional JSON specific request handler paths available\nby default in Solr, that implicitly override the behavior of some request parameters:",
    "hierarchy": [
      "JSON Update Convenience Paths"
    ],
    "pageId": 337
  },
  {
    "content": "/update/jsonstream.contentType=application/json",
    "hierarchy": [
      "JSON Update Convenience Paths"
    ],
    "pageId": 337
  },
  {
    "content": "/update/json/docs\nstream.contentType=application/json",
    "hierarchy": [
      "JSON Update Convenience Paths"
    ],
    "pageId": 337
  },
  {
    "content": "json.command=false",
    "hierarchy": [
      "JSON Update Convenience Paths"
    ],
    "pageId": 337
  },
  {
    "content": "The <span class=\"ff2 fs1\">/update/json</span> path may be useful for clients sending in JSON formatted update commands from\napplications where setting the Content-Type proves difficult, while the <span class=\"ff2 fs1\">/update/json/docs</span> path can be\nparticularly convenient for clients that always want to send in documents – either individually or as a list –\nwithout needing to worry about the full JSON command syntax.",
    "hierarchy": [
      "JSON Update Convenience Paths"
    ],
    "pageId": 337
  },
  {
    "content": "Solr can support custom JSON. This is covered in the section <span class=\"link\">Transforming and Indexing Custom JSON</span>.",
    "hierarchy": [
      "Custom JSON Documents"
    ],
    "pageId": 337
  },
  {
    "content": "CSV formatted update requests may be sent to Solr's <span class=\"ff2 fs1\">/update</span> handler using <span class=\"ff2 fs1\">Content-Type:</span>\napplication/csv<span class=\"ff1 fs0\"> or </span>Content-Type: text/csv<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "CSV Formatted Index Updates"
    ],
    "pageId": 337
  },
  {
    "content": "A sample CSV file is provided at <span class=\"ff2 fs1\">example/exampledocs/books.csv</span> that you can use to add some documents\nto the Solr <span class=\"ff2 fs1\">techproducts</span> example:",
    "hierarchy": [
    ],
    "pageId": 338
  },
  {
    "content": "curl 'http://localhost:8983/solr/my_collection/update?commit=true' --data-binary\n@example/exampledocs/books.csv -H 'Content-type:application/csv'",
    "hierarchy": [
    ],
    "pageId": 338
  },
  {
    "content": "The CSV handler allows the specification of many parameters in the URL in the form: <span class=\"ff2 fs1\">f.parameter</span>\n.optional_fieldname=value<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "The table below describes the parameters for the update handler.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "separator\nCharacter used as field separator; default is \",\". This parameter is global; for per-field usage, see the\nsplit<span class=\"ff1 fs0\"> parameter.</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">separator=%09</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "trim\nIf <span class=\"ff2 fs1\">true</span>, remove leading and trailing whitespace from values. The default is <span class=\"ff2 fs1\">false</span>. This parameter can be\neither global or per-field.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "Examples: <span class=\"ff2 fs1\">f.isbn.trim=true</span> or <span class=\"ff2 fs1\">trim=false</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "header\nSet to <span class=\"ff2 fs1\">true</span> if first line of input contains field names. These will be used if the <span class=\"ff2 fs1\">fieldnames</span> parameter is\nabsent. This parameter is global.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "fieldnames\nComma-separated list of field names to use when adding documents. This parameter is global.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">fieldnames=isbn,price,title</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "literal.field_name\nA literal value for a specified field name. This parameter is global.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">literal.color=red</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "skip\nComma separated list of field names to skip. This parameter is global.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">skip=uninteresting,shoesize</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "skipLines\nNumber of lines to discard in the input stream before the CSV data starts, including the header, if\npresent. Default=<span class=\"ff2 fs1\">0</span>. This parameter is global.",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">skipLines=5</span>",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "encapsulator\nThe character optionally used to surround values to preserve characters such as the CSV separator or",
    "hierarchy": [
      "CSV Update Parameters"
    ],
    "pageId": 338
  },
  {
    "content": "whitespace. This standard CSV format handles the encapsulator itself appearing in an encapsulated value\nby doubling the encapsulator.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "This parameter is global; for per-field usage, see <span class=\"ff2 fs1\">split</span>.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">encapsulator=\"</span>",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "escape\nThe character used for escaping CSV separators or other reserved characters. If an escape is specified,\nthe encapsulator is not used unless also explicitly specified since most formats use either encapsulation\nor escaping, not both. |g |",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">escape=\\</span>",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "keepEmpty\nKeep and index zero length (empty) fields. The default is <span class=\"ff2 fs1\">false</span>. This parameter can be global or per-field.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">f.price.keepEmpty=true</span>",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "map\nMap one value to another. Format is value:replacement (which can be empty). This parameter can be\nglobal or per-field.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">map=left:right</span> or <span class=\"ff2 fs1\">f.subject.map=history:bunk</span>",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "split\nIf <span class=\"ff2 fs1\">true</span>, split a field into multiple values by a separate parser. This parameter is used on a per-field basis.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "overwrite\nIf <span class=\"ff2 fs1\">true</span> (the default), check for and overwrite duplicate documents, based on the uniqueKey field declared\nin the Solr schema. If you know the documents you are indexing do not contain any duplicates then you\nmay see a considerable speed up setting this to <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "This parameter is global.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "commit\nIssues a commit after the data has been ingested. This parameter is global.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "commitWithin\nAdd the document within the specified number of milliseconds. This parameter is global.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">commitWithin=10000</span>",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "rowid\nMap the <span class=\"ff2 fs1\">rowid</span> (line number) to a field specified by the value of the parameter, for instance if your CSV\ndoesn't have a unique key and you want to use the row id as such. This parameter is global.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">rowid=id</span>",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "rowidOffset\nAdd the given offset (as an integer) to the <span class=\"ff2 fs1\">rowid</span> before adding it to the document. Default is <span class=\"ff2 fs1\">0</span>. This\nparameter is global.",
    "hierarchy": [
    ],
    "pageId": 339
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">rowidOffset=10</span>",
    "hierarchy": [
    ],
    "pageId": 340
  },
  {
    "content": "The same feature used to index CSV documents can also be easily used to index tab-delimited files (TSV files)\nand even handle backslash escaping rather than CSV encapsulation.",
    "hierarchy": [
      "Indexing Tab-Delimited files"
    ],
    "pageId": 340
  },
  {
    "content": "For example, one can dump a MySQL table to a tab delimited file with:",
    "hierarchy": [
      "Indexing Tab-Delimited files"
    ],
    "pageId": 340
  },
  {
    "content": "This file could then be imported into Solr by setting the <span class=\"ff2 fs1\">separator</span> to tab (%09) and the <span class=\"ff2 fs1\">escape</span> to backslash\n(%5c).",
    "hierarchy": [
      "Indexing Tab-Delimited files"
    ],
    "pageId": 340
  },
  {
    "content": "curl 'http://localhost:8983/solr/my_collection/update/csv?commit=true&separator=%09&escape=%5c'\n--data-binary @/tmp/result.txt",
    "hierarchy": [
      "Indexing Tab-Delimited files"
    ],
    "pageId": 340
  },
  {
    "content": "In addition to the <span class=\"ff2 fs1\">/update</span> handler, there is an additional CSV specific request handler path available by\ndefault in Solr, that implicitly override the behavior of some request parameters:",
    "hierarchy": [
      "CSV Update Convenience Paths"
    ],
    "pageId": 340
  },
  {
    "content": "/update/csvstream.contentType=application/csv",
    "hierarchy": [
      "CSV Update Convenience Paths"
    ],
    "pageId": 340
  },
  {
    "content": "The <span class=\"ff2 fs1\">/update/csv</span> path may be useful for clients sending in CSV formatted update commands from\napplications where setting the Content-Type proves difficult.",
    "hierarchy": [
      "CSV Update Convenience Paths"
    ],
    "pageId": 340
  },
  {
    "content": "Solr indexes nested documents in blocks as a way to model documents containing other documents, such as\na blog post parent document and comments as child documents<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>or products as parent documents and\nsizes, colors, or other variations as child documents. At query time, the <span class=\"link\">Block Join Query Parsers</span> can search\nthese relationships. In terms of performance, indexing the relationships between documents may be more\nefficient than attempting to do joins only at query time, since the relationships are already stored in the\nindex and do not need to be computed.",
    "hierarchy": [
      "Nested Child Documents"
    ],
    "pageId": 340
  },
  {
    "content": "Nested documents may be indexed via either the XML or JSON data syntax (or using <span class=\"link\">SolrJ)</span> - but regardless of\nsyntax, you must include a field that identifies the parent document as a parent; it can be any field that suits\nthis purpose, and it will be used as input for the <span class=\"link\">block join query parsers</span>.",
    "hierarchy": [
      "Nested Child Documents"
    ],
    "pageId": 340
  },
  {
    "content": "To support nested documents, the schema must include an indexed/non-stored field <span class=\"ff2 fs1\">_root_</span>. The value of\nthat field is populated automatically and is the same for all documents in the block, regardless of the\ninheritance depth.",
    "hierarchy": [
      "Nested Child Documents"
    ],
    "pageId": 340
  },
  {
    "content": "For example, here are two documents and their child documents:",
    "hierarchy": [
      "XML Examples"
    ],
    "pageId": 341
  },
  {
    "content": "Ê <span class=\"fc2\"><doc></span>\nÊ <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></field></span>\nÊ <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"title\"<span class=\"fc2\">></span></span>Solr adds block join support<span class=\"fc2\"></field></span>\nÊ <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"content_type\"<span class=\"fc2\">></span></span>parentDocument<span class=\"fc2\"></field></span>\nÊ   <span class=\"fc2\"><doc></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc2\">></span></span>2<span class=\"fc2\"></field></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"comments\"<span class=\"fc2\">></span></span>SolrCloud supports it too!<span class=\"fc2\"></field></span>\nÊ   <span class=\"fc2\"></doc></span>\nÊ <span class=\"fc2\"></doc></span>\nÊ <span class=\"fc2\"><doc></span>\nÊ   <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc2\">></span></span>3<span class=\"fc2\"></field></span>\nÊ   <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"title\"<span class=\"fc2\">></span></span>New Lucene and Solr release is out<span class=\"fc2\"></field></span>\nÊ   <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"content_type\"<span class=\"fc2\">></span></span>parentDocument<span class=\"fc2\"></field></span>\nÊ   <span class=\"fc2\"><doc></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc2\">></span></span>4<span class=\"fc2\"></field></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"comments\"<span class=\"fc2\">></span></span>Lots of new features<span class=\"fc2\"></field></span>\nÊ   <span class=\"fc2\"></doc></span>\nÊ <span class=\"fc2\"></doc></span>",
    "hierarchy": [
      "XML Examples"
    ],
    "pageId": 341
  },
  {
    "content": "In this example, we have indexed the parent documents with the field <span class=\"code\">content_type</span>, which has the value\n\"parentDocument\". We could have also used a boolean field, such as <span class=\"code\">isParent</span>, with a value of \"true\", or any\nother similar approach.",
    "hierarchy": [
      "XML Examples"
    ],
    "pageId": 341
  },
  {
    "content": "This example is equivalent to the XML example above, note the special <span class=\"code\">_childDocuments_</span> key need to\nindicate the nested documents in JSON.",
    "hierarchy": [
      "JSON Examples"
    ],
    "pageId": 341
  },
  {
    "content": "[\nÊ {\nÊ   <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"1\"</span>,\nÊ   <span class=\"fc1\">\"title\"</span>: <span class=\"fc2\">\"Solr adds block join support\"</span>,\nÊ   <span class=\"fc1\">\"content_type\"</span>: <span class=\"fc2\">\"parentDocument\"</span>,\nÊ   <span class=\"fc1\">\"_childDocuments_\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"2\"</span>,\nÊ       <span class=\"fc1\">\"comments\"</span>: <span class=\"fc2\">\"SolrCloud supports it too!\"</span>\nÊ     }\nÊ   ]\nÊ },\nÊ {\nÊ   <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"3\"</span>,\nÊ   <span class=\"fc1\">\"title\"</span>: <span class=\"fc2\">\"New Lucene and Solr release is out\"</span>,\nÊ   <span class=\"fc1\">\"content_type\"</span>: <span class=\"fc2\">\"parentDocument\"</span>,\nÊ   <span class=\"fc1\">\"_childDocuments_\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"4\"</span>,\nÊ       <span class=\"fc1\">\"comments\"</span>: <span class=\"fc2\">\"Lots of new features\"</span>\nÊ     }\nÊ   ]\nÊ }\n]",
    "hierarchy": [
    ],
    "pageId": 342
  },
  {
    "content": "One limitation of indexing nested documents is that the whole block of parent-children\ndocuments must be updated together whenever any changes are required. In other words,\neven if a single child document or the parent document is changed, the whole block of\nparent-child documents must be indexed together.",
    "hierarchy": [
    ],
    "pageId": 342
  },
  {
    "content": "If you have JSON documents that you would like to index without transforming them into Solr's structure,\nyou can add them to Solr by including some parameters with the update request.",
    "hierarchy": [
      "Transforming and Indexing Custom JSON"
    ],
    "pageId": 342
  },
  {
    "content": "These parameters provide information on how to split a single JSON file into multiple Solr documents and\nhow to map fields to Solr's schema. One or more valid JSON documents can be sent to the\n/update/json/docs<span class=\"ff4 fs0\"> path with the configuration params.</span>",
    "hierarchy": [
      "Transforming and Indexing Custom JSON"
    ],
    "pageId": 342
  },
  {
    "content": "These parameters allow you to define how a JSON file should be read for multiple Solr documents.",
    "hierarchy": [
      "Transforming and Indexing Custom JSON",
      "Mapping Parameters"
    ],
    "pageId": 342
  },
  {
    "content": "split\nDefines the path at which to split the input JSON into multiple Solr documents and is required if you have\nmultiple documents in a single JSON file. If the entire JSON makes a single Solr document, the path must\nbe “<span class=\"ff1 fs3\">/</span>”.",
    "hierarchy": [
      "Transforming and Indexing Custom JSON",
      "Mapping Parameters"
    ],
    "pageId": 342
  },
  {
    "content": "It is possible to pass multiple <span class=\"ff2 fs1\">split</span> paths by separating them with a pipe <span class=\"ff2 fs1\">(|)</span>, for example:\nsplit=/|/foo|/foo/bar<span class=\"ff1 fs0\">. If one path is a child of another, they automatically become a child document.</span>",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "f\nProvides multivalued mapping to map document field names to Solr field names. The format of the\nparameter is <span class=\"ff2 fs1\">target-field-name:json-path</span>, as in <span class=\"ff2 fs1\">f=first:/first</span>. The <span class=\"ff2 fs1\">json-path</span> is required. The\ntarget-field-name<span class=\"ff1 fs0\"> is the Solr document field name, and is optional. If not specified, it is automatically</span>\nderived from the input JSON. The default target field name is the fully qualified name of the field.",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "Wildcards can be used here, see <span class=\"link\">Using Wildcards for Field Names</span> below for more information.",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "mapUniqueKeyOnly\n(boolean) This parameter is particularly convenient when the fields in the input JSON are not available in\nthe schema and <span class=\"link\">schemaless mode</span> is not enabled. This will index all the fields into the default search field\n(using the <span class=\"ff2 fs1\">df</span> parameter, below) and only the <span class=\"ff2 fs1\">uniqueKey</span> field is mapped to the corresponding field in the\nschema. If the input JSON does not have a value for the <span class=\"ff2 fs1\">uniqueKey</span> field then a UUID is generated for the\nsame.",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "df\nIf the <span class=\"ff2 fs1\">mapUniqueKeyOnly</span> flag is used, the update handler needs a field where the data should be indexed\nto. This is the same field that other handlers use as a default search field.",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "srcField\nThis is the name of the field to which the JSON source will be stored into. This can only be used if <span class=\"ff2 fs1\">split=/</span>\n(i.e., you want your JSON input file to be indexed as a single Solr document). Note that atomic updates\nwill cause the field to be out-of-sync with the document.",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "echo\nThis is for debugging purpose only. Set it to <span class=\"ff2 fs1\">true</span> if you want the docs to be returned as a response.\nNothing will be indexed.",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "For example, if we have a JSON file that includes two documents, we could define an update request like this:",
    "hierarchy": [
    ],
    "pageId": 343
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=first:/first'\\\n'&f=last:/last'\\\n'&f=grade:/grade'\\\n'&f=subject:/exams/subject'\\\n'&f=test:/exams/test'\\\n'&f=marks:/exams/marks'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 344
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=first:/first'\\\n'&f=last:/last'\\\n'&f=grade:/grade'\\\n'&f=subject:/exams/subject'\\\n'&f=test:/exams/test'\\\n'&f=marks:/exams/marks'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 345
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=first:/first'\\\n'&f=last:/last'\\\n'&f=grade:/grade'\\\n'&f=subject:/exams/subject'\\\n'&f=test:/exams/test'\\\n'&f=marks:/exams/marks'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 346
  },
  {
    "content": "With this request, we have defined that \"exams\" contains multiple documents. In addition, we have mapped\nseveral fields from the input document to Solr fields.",
    "hierarchy": [
    ],
    "pageId": 346
  },
  {
    "content": "When the update request is complete, the following two documents will be added to the index:",
    "hierarchy": [
    ],
    "pageId": 346
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"first\"</span>:<span class=\"fc2\">\"John\"</span>,\nÊ <span class=\"fc1\">\"last\"</span>:<span class=\"fc2\">\"Doe\"</span>,\nÊ <span class=\"fc1\">\"marks\"</span>:<span class=\"fc3\">90</span>,\nÊ <span class=\"fc1\">\"test\"</span>:<span class=\"fc2\">\"term1\"</span>,\nÊ <span class=\"fc1\">\"subject\"</span>:<span class=\"fc2\">\"Maths\"</span>,\nÊ <span class=\"fc1\">\"grade\"</span>:<span class=\"fc3\">8</span>\n}\n{\nÊ <span class=\"fc1\">\"first\"</span>:<span class=\"fc2\">\"John\"</span>,\nÊ <span class=\"fc1\">\"last\"</span>:<span class=\"fc2\">\"Doe\"</span>,\nÊ <span class=\"fc1\">\"marks\"</span>:<span class=\"fc3\">86</span>,\nÊ <span class=\"fc1\">\"test\"</span>:<span class=\"fc2\">\"term1\"</span>,\nÊ <span class=\"fc1\">\"subject\"</span>:<span class=\"fc2\">\"Biology\"</span>,\nÊ <span class=\"fc1\">\"grade\"</span>:<span class=\"fc3\">8</span>\n}",
    "hierarchy": [
    ],
    "pageId": 346
  },
  {
    "content": "In the prior example, all of the fields we wanted to use in Solr had the same names as they did in the input\nJSON. When that is the case, we can simplify the request by only specifying the <span class=\"ff2 fs1\">json-path</span> portion of the <span class=\"ff2 fs1\">f</span>\nparameter, as in this example:",
    "hierarchy": [
    ],
    "pageId": 347
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=/first'\\\n'&f=/last'\\\n'&f=/grade'\\\n'&f=/exams/subject'\\\n'&f=/exams/test'\\\n'&f=/exams/marks'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 347
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=/first'\\\n'&f=/last'\\\n'&f=/grade'\\\n'&f=/exams/subject'\\\n'&f=/exams/test'\\\n'&f=/exams/marks'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 348
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=/first'\\\n'&f=/last'\\\n'&f=/grade'\\\n'&f=/exams/subject'\\\n'&f=/exams/test'\\\n'&f=/exams/marks'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 349
  },
  {
    "content": "In this example, we simply named the field paths (such as <span class=\"ff2 fs1\">/exams/test</span>). Solr will automatically attempt to\nadd the content of the field from the JSON input to the index in a field with the same name.",
    "hierarchy": [
    ],
    "pageId": 349
  },
  {
    "content": "Documents will be rejected during indexing if the fields do not exist in the schema before\nindexing. So, if you are NOT using schemaless mode, you must pre-create all fields. If you\nare working in <span class=\"link\">Schemaless Mode</span>, however, fields that don't exist will be created on the fly\nwith Solr’s best guess for the field type.",
    "hierarchy": [
    ],
    "pageId": 349
  },
  {
    "content": "You can store and re-use parameters with Solr's <span class=\"link\">Request Parameters API</span>.",
    "hierarchy": [
      "Reusing Parameters in Multiple Requests"
    ],
    "pageId": 349
  },
  {
    "content": "Say we wanted to define parameters to split documents at the <span class=\"ff2 fs1\">exams</span> field, and map several other fields. We\ncould make an API request such as:",
    "hierarchy": [
      "Reusing Parameters in Multiple Requests"
    ],
    "pageId": 349
  },
  {
    "content": "Êcurl http://localhost:8983/solr/techproducts/config/params -H 'Content-\ntype:application/json' -d '{\nÊ\"set\": {\nÊ  \"my_params\": {\nÊ    \"split\": \"/exams\",\nÊ    \"f\":\n[\"first:/first\",\"last:/last\",\"grade:/grade\",\"subject:/exams/subject\",\"test:/exams/test\"]\nÊ}}}'",
    "hierarchy": [
    ],
    "pageId": 350
  },
  {
    "content": "curl http://localhost:8983/api/cores/techproducts/config/params -H 'Content-\ntype:application/json' -d '{\nÊ\"set\": {\nÊ  \"my_params\": {\nÊ    \"split\": \"/exams\",\nÊ    \"f\":\n[\"first:/first\",\"last:/last\",\"grade:/grade\",\"subject:/exams/subject\",\"test:/exams/test\"]\nÊ}}}'",
    "hierarchy": [
    ],
    "pageId": 350
  },
  {
    "content": "curl http://localhost:8983/api/collections/techproducts/config/params -H 'Content-\ntype:application/json' -d '{\nÊ\"set\": {\nÊ  \"my_params\": {\nÊ    \"split\": \"/exams\",\nÊ    \"f\":\n[\"first:/first\",\"last:/last\",\"grade:/grade\",\"subject:/exams/subject\",\"test:/exams/test\"]\nÊ}}}'",
    "hierarchy": [
    ],
    "pageId": 350
  },
  {
    "content": "When we send the documents, we'd use the <span class=\"ff2 fs1\">useParams</span> parameter with the name of the parameter set we\ndefined:",
    "hierarchy": [
    ],
    "pageId": 350
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs?useParams=my_params' -H\n'Content-type:application/json' -d '{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [{\nÊ     \"subject\": \"Maths\",\nÊ     \"test\": \"term1\",\nÊ     \"marks\": 90\nÊ   },\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\": \"term1\",\nÊ     \"marks\": 86\nÊ   }\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 351
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json?useParams=my_params' -H\n'Content-type:application/json' -d '{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [{\nÊ     \"subject\": \"Maths\",\nÊ     \"test\": \"term1\",\nÊ     \"marks\": 90\nÊ   },\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\": \"term1\",\nÊ     \"marks\": 86\nÊ   }\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 351
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json?useParams=my_params' -H\n'Content-type:application/json' -d '{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [{\nÊ     \"subject\": \"Maths\",\nÊ     \"test\": \"term1\",\nÊ     \"marks\": 90\nÊ   },\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\": \"term1\",\nÊ     \"marks\": 86\nÊ   }\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 352
  },
  {
    "content": "Instead of specifying all the field names explicitly, it is possible to specify wildcards to map fields\nautomatically.",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "There are two restrictions: wildcards can only be used at the end of the <span class=\"ff2 fs2\">json-path</span>, and the split path cannot\nuse wildcards.",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "A single asterisk <span class=\"ff2 fs2\">*</span> maps only to direct children, and a double asterisk <span class=\"ff2 fs2\">**</span> maps recursively to all descendants.\nThe following are example wildcard path mappings:",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "f=$FQN:/**: maps all fields to the fully qualified name (<span class=\"ff2 fs2\">$FQN</span>) of the JSON field. The fully qualified name is\nobtained by concatenating all the keys in the hierarchy with a period (<span class=\"ff2 fs2\">.</span>) as a delimiter. This is the default\nbehavior if no <span class=\"ff2 fs2\">f</span> path mappings are specified.",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "f=/docs/*: maps all the fields under docs and in the name as given in json",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "f=/docs/**: maps all the fields under docs and its children in the name as given in json",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "f=searchField:/docs/*: maps all fields under /docs to a single field called ‘searchField'",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "f=searchField:/docs/**: maps all fields under /docs and its children to searchField",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "With wildcards we can further simplify our previous example as follows:",
    "hierarchy": [
      "Using Wildcards for Field Names"
    ],
    "pageId": 352
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs'\\\n'?split=/exams'\\\n'&f=/**'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 353
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json'\\\n'?split=/exams'\\\n'&f=/**'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 353
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json'\\\n'?split=/exams'\\\n'&f=/**'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 354
  },
  {
    "content": "Because we want the fields to be indexed with the field names as they are found in the JSON input, the\ndouble wildcard in <span class=\"ff2 fs1\">f=/**</span> will map all fields and their descendants to the same fields in Solr.",
    "hierarchy": [
    ],
    "pageId": 354
  },
  {
    "content": "It is also possible to send all the values to a single field and do a full text search on that. This is a good option\nto blindly index and query JSON documents without worrying about fields and schema.",
    "hierarchy": [
    ],
    "pageId": 354
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs'\\\n'?split=/'\\\n'&f=txt:/**'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 355
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json'\\\n'?split=/'\\\n'&f=txt:/**'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 355
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json'\\\n'?split=/'\\\n'&f=txt:/**'\\\nÊ-H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 356
  },
  {
    "content": "In the above example, we've said all of the fields should be added to a field in Solr named 'txt'. This will add\nmultiple fields to a single field, so whatever field you choose should be multi-valued.",
    "hierarchy": [
    ],
    "pageId": 356
  },
  {
    "content": "The default behavior is to use the fully qualified name (FQN) of the node. So, if we don't define any field\nmappings, like this:",
    "hierarchy": [
    ],
    "pageId": 356
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs?split=/exams'\\\nÊ   -H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 356
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json?split=/exams'\\\nÊ   -H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 357
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json?split=/exams'\\\nÊ   -H 'Content-type:application/json' -d '\n{\nÊ \"first\": \"John\",\nÊ \"last\": \"Doe\",\nÊ \"grade\": 8,\nÊ \"exams\": [\nÊ   {\nÊ     \"subject\": \"Maths\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 90},\nÊ   {\nÊ     \"subject\": \"Biology\",\nÊ     \"test\"   : \"term1\",\nÊ     \"marks\"  : 86}\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 357
  },
  {
    "content": "The indexed documents would be added to the index with fields that look like this:",
    "hierarchy": [
    ],
    "pageId": 357
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"first\"</span>:<span class=\"fc2\">\"John\"</span>,\nÊ <span class=\"fc1\">\"last\"</span>:<span class=\"fc2\">\"Doe\"</span>,\nÊ <span class=\"fc1\">\"grade\"</span>:<span class=\"fc3\">8</span>,\nÊ <span class=\"fc1\">\"exams.subject\"</span>:<span class=\"fc2\">\"Maths\"</span>,\nÊ <span class=\"fc1\">\"exams.test\"</span>:<span class=\"fc2\">\"term1\"</span>,\nÊ <span class=\"fc1\">\"exams.marks\"</span>:<span class=\"fc3\">90</span>},\n{\nÊ <span class=\"fc1\">\"first\"</span>:<span class=\"fc2\">\"John\"</span>,\nÊ <span class=\"fc1\">\"last\"</span>:<span class=\"fc2\">\"Doe\"</span>,\nÊ <span class=\"fc1\">\"grade\"</span>:<span class=\"fc3\">8</span>,\nÊ <span class=\"fc1\">\"exams.subject\"</span>:<span class=\"fc2\">\"Biology\"</span>,\nÊ <span class=\"fc1\">\"exams.test\"</span>:<span class=\"fc2\">\"term1\"</span>,\nÊ <span class=\"fc1\">\"exams.marks\"</span>:<span class=\"fc3\">86</span>}",
    "hierarchy": [
    ],
    "pageId": 358
  },
  {
    "content": "This functionality supports documents in the <span class=\"link\">JSON Lines</span> format (<span class=\"ff1 fs2\">.jsonl</span>), which specifies one document per\nline.",
    "hierarchy": [
      "Multiple Documents in a Single Payload"
    ],
    "pageId": 358
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Multiple Documents in a Single Payload"
    ],
    "pageId": 358
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs' -H 'Content-\ntype:application/json' -d '\n{ \"first\":\"Steve\", \"last\":\"Jobs\", \"grade\":1, \"subject\":\"Social Science\", \"test\":\"term1\",\n\"marks\":90}\n{ \"first\":\"Steve\", \"last\":\"Woz\", \"grade\":1, \"subject\":\"Political Science\", \"test\":\"term1\",\n\"marks\":86}'",
    "hierarchy": [
      "Multiple Documents in a Single Payload"
    ],
    "pageId": 358
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json' -H 'Content-\ntype:application/json' -d '\n{ \"first\":\"Steve\", \"last\":\"Jobs\", \"grade\":1, \"subject\":\"Social Science\", \"test\":\"term1\",\n\"marks\":90}\n{ \"first\":\"Steve\", \"last\":\"Woz\", \"grade\":1, \"subject\":\"Political Science\", \"test\":\"term1\",\n\"marks\":86}'",
    "hierarchy": [
      "Multiple Documents in a Single Payload"
    ],
    "pageId": 358
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json' -H 'Content-\ntype:application/json' -d '\n{ \"first\":\"Steve\", \"last\":\"Jobs\", \"grade\":1, \"subject\":\"Social Science\", \"test\":\"term1\",\n\"marks\":90}\n{ \"first\":\"Steve\", \"last\":\"Woz\", \"grade\":1, \"subject\":\"Political Science\", \"test\":\"term1\",\n\"marks\":86}'",
    "hierarchy": [
    ],
    "pageId": 359
  },
  {
    "content": "Or even an array of documents, as in this example:",
    "hierarchy": [
    ],
    "pageId": 359
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs' -H 'Content-\ntype:application/json' -d '[\n{\"first\":\"Steve\", \"last\":\"Jobs\", \"grade\":1, \"subject\":\"Computer Science\", \"test\":\"term1\",\n\"marks\":90},\n{\"first\":\"Steve\", \"last\":\"Woz\", \"grade\":1, \"subject\":\"Calculus\", \"test\":\"term1\",\n\"marks\":86}]'",
    "hierarchy": [
    ],
    "pageId": 359
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json' -H 'Content-\ntype:application/json' -d '[\n{\"first\":\"Steve\", \"last\":\"Jobs\", \"grade\":1, \"subject\":\"Computer Science\", \"test\":\"term1\",\n\"marks\":90},\n{\"first\":\"Steve\", \"last\":\"Woz\", \"grade\":1, \"subject\":\"Calculus\", \"test\":\"term1\",\n\"marks\":86}]'",
    "hierarchy": [
    ],
    "pageId": 359
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json' -H 'Content-\ntype:application/json' -d '[\n{\"first\":\"Steve\", \"last\":\"Jobs\", \"grade\":1, \"subject\":\"Computer Science\", \"test\":\"term1\",\n\"marks\":90},\n{\"first\":\"Steve\", \"last\":\"Woz\", \"grade\":1, \"subject\":\"Calculus\", \"test\":\"term1\",\n\"marks\":86}]'",
    "hierarchy": [
    ],
    "pageId": 359
  },
  {
    "content": "The following is an example of indexing nested documents:",
    "hierarchy": [
      "Indexing Nested Documents"
    ],
    "pageId": 359
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json/docs?split=/|/orgs'\\\nÊ   -H 'Content-type:application/json' -d '{\nÊ \"name\": \"Joe Smith\",\nÊ \"phone\": 876876687,\nÊ \"orgs\": [\nÊ   {\nÊ     \"name\": \"Microsoft\",\nÊ     \"city\": \"Seattle\",\nÊ     \"zip\": 98052\nÊ   },\nÊ   {\nÊ     \"name\": \"Apple\",\nÊ     \"city\": \"Cupertino\",\nÊ     \"zip\": 95014\nÊ   }\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 360
  },
  {
    "content": "curl 'http://localhost:8983/api/cores/techproducts/update/json?split=/|/orgs'\\\nÊ   -H 'Content-type:application/json' -d '{\nÊ \"name\": \"Joe Smith\",\nÊ \"phone\": 876876687,\nÊ \"orgs\": [\nÊ   {\nÊ     \"name\": \"Microsoft\",\nÊ     \"city\": \"Seattle\",\nÊ     \"zip\": 98052\nÊ   },\nÊ   {\nÊ     \"name\": \"Apple\",\nÊ     \"city\": \"Cupertino\",\nÊ     \"zip\": 95014\nÊ   }\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 360
  },
  {
    "content": "curl 'http://localhost:8983/api/collections/techproducts/update/json?split=/|/orgs'\\\nÊ   -H 'Content-type:application/json' -d '{\nÊ \"name\": \"Joe Smith\",\nÊ \"phone\": 876876687,\nÊ \"orgs\": [\nÊ   {\nÊ     \"name\": \"Microsoft\",\nÊ     \"city\": \"Seattle\",\nÊ     \"zip\": 98052\nÊ   },\nÊ   {\nÊ     \"name\": \"Apple\",\nÊ     \"city\": \"Cupertino\",\nÊ     \"zip\": 95014\nÊ   }\nÊ ]\n}'",
    "hierarchy": [
    ],
    "pageId": 361
  },
  {
    "content": "With this example, the documents indexed would be, as follows:",
    "hierarchy": [
    ],
    "pageId": 361
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"Joe Smith\"</span>,\nÊ <span class=\"fc1\">\"phone\"</span>:<span class=\"fc3\">876876687</span>,\nÊ <span class=\"fc1\">\"_childDocuments_\"</span>:[\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"Microsoft\"</span>,\nÊ     <span class=\"fc1\">\"city\"</span>:<span class=\"fc2\">\"Seattle\"</span>,\nÊ     <span class=\"fc1\">\"zip\"</span>:<span class=\"fc3\">98052</span>},\nÊ   {\nÊ     <span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"Apple\"</span>,\nÊ     <span class=\"fc1\">\"city\"</span>:<span class=\"fc2\">\"Cupertino\"</span>,\nÊ     <span class=\"fc1\">\"zip\"</span>:<span class=\"fc3\">95014</span>}]}",
    "hierarchy": [
    ],
    "pageId": 361
  },
  {
    "content": "1.Schemaless mode: This handles field creation automatically. The field guessing may not be exactly as you\nexpect, but it works. The best thing to do is to setup a local server in schemaless mode, index a few\nsample docs and create those fields in your real setup with proper field types before indexing",
    "hierarchy": [
      "Tips for Custom JSON Indexing"
    ],
    "pageId": 361
  },
  {
    "content": "2.Pre-created Schema: Post your docs to the <span class=\"ff2 fs2\">/update/json/docs</span> endpoint with <span class=\"ff2 fs2\">echo=true</span>. This gives you\nthe list of field names you need to create. Create the fields before you actually index",
    "hierarchy": [
      "Tips for Custom JSON Indexing"
    ],
    "pageId": 361
  },
  {
    "content": "3.No schema, only full-text search: All you need to do is to do full-text search on your JSON. Set the\nconfiguration as given in the Setting JSON Defaults section.",
    "hierarchy": [
      "Tips for Custom JSON Indexing"
    ],
    "pageId": 361
  },
  {
    "content": "It is possible to send any JSON to the <span class=\"code\">/update/json/docs</span> endpoint and the default configuration of the\ncomponent is as follows:",
    "hierarchy": [
      "Setting JSON Defaults"
    ],
    "pageId": 362
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc5\"><!-- this ensures that the entire JSON doc will be stored verbatim into one field --></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"srcField\"<span class=\"fc2\">></span></span>_src_<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc5\"><!-- This means a the uniqueKeyField will be extracted from the fields and</span>",
    "hierarchy": [
      "Setting JSON Defaults"
    ],
    "pageId": 362
  },
  {
    "content": "Ê   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"mapUniqueKeyOnly\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc5\"><!-- The default search field where all the values are indexed to --></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"df\"<span class=\"fc2\">></span></span>text<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Setting JSON Defaults"
    ],
    "pageId": 362
  },
  {
    "content": "So, if no params are passed, the entire JSON file would get indexed to the <span class=\"code\">_src_</span> field and all the values in the\ninput JSON would go to a field named <span class=\"code\">text</span>. If there is a value for the uniqueKey it is stored and if no value\ncould be obtained from the input JSON, a UUID is created and used as the uniqueKey field value.",
    "hierarchy": [
      "Setting JSON Defaults"
    ],
    "pageId": 362
  },
  {
    "content": "Alternately, use the Request Parameters feature to set these parameters, as shown earlier in the section\nReusing Parameters in Multiple Requests<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Setting JSON Defaults"
    ],
    "pageId": 362
  },
  {
    "content": "Êcurl http://localhost:8983/solr/techproducts/config/params -H 'Content-\ntype:application/json' -d '{\n\"set\": {\nÊ \"full_txt\": {\nÊ   \"srcField\": \"_src_\",\nÊ   \"mapUniqueKeyOnly\" : true,\nÊ   \"df\": \"text\"\n}}}'",
    "hierarchy": [
      "Setting JSON Defaults"
    ],
    "pageId": 362
  },
  {
    "content": "Êcurl http://localhost:8983/api/cores/techproducts/config/params -H 'Content-\ntype:application/json' -d '{\n\"set\": {\nÊ \"full_txt\": {\nÊ   \"srcField\": \"_src_\",\nÊ   \"mapUniqueKeyOnly\" : true,\nÊ   \"df\": \"text\"\n}}}'",
    "hierarchy": [
    ],
    "pageId": 363
  },
  {
    "content": "Êcurl http://localhost:8983/api/collections/techproducts/config/params -H 'Content-\ntype:application/json' -d '{\n\"set\": {\nÊ \"full_txt\": {\nÊ   \"srcField\": \"_src_\",\nÊ   \"mapUniqueKeyOnly\" : true,\nÊ   \"df\": \"text\"\n}}}'",
    "hierarchy": [
    ],
    "pageId": 363
  },
  {
    "content": "To use these parameters, send the parameter <span class=\"ff2 fs1\">useParams=full_txt</span> with each request.",
    "hierarchy": [
    ],
    "pageId": 363
  },
  {
    "content": "Solr uses code from the <span class=\"link\">Apache Tika</span> project to provide a framework for incorporating many different file-\nformat parsers such as <span class=\"link\">Apache PDFBox</span> and <span class=\"link\">Apache POI</span> into Solr itself. Working with this framework, Solr's\nExtractingRequestHandler<span class=\"ff2 fs1\"> can use Tika to support uploading binary files, including files in popular formats</span>\nsuch as Word and PDF, for data extraction and indexing.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika"
    ],
    "pageId": 364
  },
  {
    "content": "When this framework was under development, it was called the Solr Content Extraction Library or CEL; from\nthat abbreviation came this framework's name: Solr Cell.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika"
    ],
    "pageId": 364
  },
  {
    "content": "If you want to supply your own <span class=\"code\">ContentHandler</span> for Solr to use, you can extend the\nExtractingRequestHandler<span class=\"ff2 fs1\"> and override the </span>createFactory()<span class=\"ff2 fs1\"> method. This factory is responsible for</span>\nconstructing the <span class=\"code\">SolrContentHandler</span> that interacts with Tika, and allows literals to override Tika-parsed\nvalues. Set the parameter <span class=\"code\">literalsOverride</span>, which normally defaults to <span class=\"code\">true</span>, to <span class=\"code\">false</span> to append Tika-\nparsed values to literal values.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika"
    ],
    "pageId": 364
  },
  {
    "content": "When using the Solr Cell framework, it is helpful to keep the following in mind:",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "Tika will automatically attempt to determine the input document type (Word, PDF, HTML) and extract the\ncontent appropriately. If you like, you can explicitly specify a MIME type for Tika with the <span class=\"code\">stream.type</span>\nparameter.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "Tika works by producing an XHTML stream that it feeds to a SAX ContentHandler. SAX is a common\ninterface implemented for many different XML parsers. For more information, see\nhttp://www.saxproject.org/quickstart.html<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "Solr then responds to Tika's SAX events and creates the fields to index.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "Tika produces metadata such as Title, Subject, and Author according to specifications such as the\nDublinCore. See <span class=\"link\">http://tika.apache.org/1.16/formats.html</span> for the file types supported.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "Tika adds all the extracted text to the <span class=\"code\">content</span> field.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "You can map Tika's metadata fields to Solr fields.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "You can pass in literals for field values. Literals will override Tika-parsed values, including fields in the\nTika metadata object, the Tika content field, and any \"captured content\" fields.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "You can apply an XPath expression to the Tika XHTML to restrict the content that is produced.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "While Apache Tika is quite powerful, it is not perfect and fails on some files. PDF files are\nparticularly problematic, mostly due to the PDF format itself. In case of a failure processing\nany file, the <span class=\"code\">ExtractingRequestHandler</span> does not have a secondary mechanism to try to\nextract some text from the file; it will throw an exception and fail.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Key Solr Cell Concepts"
    ],
    "pageId": 364
  },
  {
    "content": "You can try out the Tika framework using the <span class=\"code\">techproducts</span> example included in Solr.",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Trying out Tika with the Solr techproducts Example"
    ],
    "pageId": 364
  },
  {
    "content": "Start the example:",
    "hierarchy": [
      "Uploading Data with Solr Cell using Apache Tika",
      "Trying out Tika with the Solr techproducts Example"
    ],
    "pageId": 364
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "You can now use curl to send a sample PDF file via HTTP POST:",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/extract?literal.id=doc1&commit=true' -F\n\"myfile=@example/exampledocs/solr-word.pdf\"",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "The URL above calls the Extracting Request Handler, uploads the file <span class=\"ff1 fs1\">solr-word.pdf</span> and assigns it the\nunique ID <span class=\"ff1 fs1\">doc1</span>. Here's a closer look at the components of this command:",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "The <span class=\"ff1 fs1\">literal.id=doc1</span> parameter provides the necessary unique ID for the document being indexed.",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "The <span class=\"ff1 fs1\">commit=true parameter</span> causes Solr to perform a commit after indexing the document, making it\nimmediately searchable. For optimum performance when loading many documents, don't call the\ncommit command until you are done.",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "The <span class=\"ff1 fs1\">-F</span> flag instructs curl to POST data using the Content-Type <span class=\"ff1 fs1\">multipart/form-data</span> and supports the\nuploading of binary files. The @ symbol instructs curl to upload the attached file.",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "The argument <span class=\"ff1 fs1\">myfile=@tutorial.html</span> needs a valid path, which can be absolute or relative.",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "You can also use <span class=\"ff1 fs1\">bin/post</span> to send a PDF file into Solr (without the params, the <span class=\"ff1 fs1\">literal.id</span> parameter\nwould be set to the absolute path to the file):",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "bin/post -c techproducts example/exampledocs/solr-word.pdf -params \"literal.id=a\"",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "Now you should be able to execute a query and find that document. You can make a request like\nhttp://localhost:8983/solr/techproducts/select?q=pdf<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "You may notice that although the content of the sample document has been indexed and stored, there are\nnot a lot of metadata fields associated with this document. This is because unknown fields are ignored\naccording to the default parameters configured for the <span class=\"ff1 fs1\">/update/extract</span> handler in <span class=\"ff1 fs1\">solrconfig.xml</span>, and\nthis behavior can be easily changed or overridden. For example, to store and see all metadata and content,\nexecute the following:",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "bin/post -c techproducts example/exampledocs/solr-word.pdf -params\n\"literal.id=doc1&uprefix=attr_\"",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "In this command, the <span class=\"ff1 fs1\">uprefix=attr_</span> parameter causes all generated fields that aren't defined in the\nschema to be prefixed with <span class=\"ff1 fs1\">attr_</span>, which is a dynamic field that is stored and indexed.",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "This command allows you to query the document using an attribute, as in:\nhttp://localhost:8983/solr/techproducts/select?q=attr_meta:microsoft<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 365
  },
  {
    "content": "The table below describes the parameters accepted by the Extracting Request Handler.",
    "hierarchy": [
      "Solr Cell Input Parameters"
    ],
    "pageId": 365
  },
  {
    "content": "capture\nCaptures XHTML elements with the specified name for a supplementary addition to the Solr document.\nThis parameter can be useful for copying chunks of the XHTML into a separate field. For instance, it could\nbe used to grab paragraphs (<span class=\"ff1 fs0\"><p></span>) and index them into a separate field. Note that content is still also\ncaptured into the overall \"content\" field.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "captureAttr\nIndexes attributes of the Tika XHTML elements into separate fields, named after the element. If set to\ntrue, for example, when extracting from HTML, Tika can return the href attributes in <a> tags as fields\nnamed \"a\". See the examples below.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "commitWithin\nAdd the document within the specified number of milliseconds.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "date.formats\nDefines the date format patterns to identify in the documents.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "defaultField\nIf the <span class=\"ff1 fs0\">uprefix</span> parameter (see below) is not specified and a field cannot be determined, the default field\nwill be used.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "extractOnly\nDefault is <span class=\"ff1 fs0\">false</span>. If <span class=\"ff1 fs0\">true</span>, returns the extracted content from Tika without indexing the document. This\nliterally includes the extracted XHTML as a string in the response. When viewing manually, it may be\nuseful to use a response format other than XML to aid in viewing the embedded XHTML tags. For an\nexample, see <span class=\"link\">http://wiki.apache.org/solr/TikaExtractOnlyExampleOutput</span>.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "extractFormat\nThe default is <span class=\"ff1 fs0\">xml</span>, but the other option is <span class=\"ff1 fs0\">text</span>. Controls the serialization format of the extract content.\nThe <span class=\"ff1 fs0\">xml</span> format is actually XHTML, the same format that results from passing the <span class=\"ff1 fs0\">-x</span> command to the Tika\ncommand line application, while the text format is like that produced by Tika's <span class=\"ff1 fs0\">-t</span> command. This\nparameter is valid only if <span class=\"ff1 fs0\">extractOnly</span> is set to true.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "fmap.source_field\nMaps (moves) one field name to another. The <span class=\"ff1 fs0\">source_field</span> must be a field in incoming documents, and\nthe value is the Solr field to map to. Example: <span class=\"ff1 fs0\">fmap.content=text</span> causes the data in the <span class=\"ff1 fs0\">content</span> field\ngenerated by Tika to be moved to the Solr's <span class=\"ff1 fs0\">text</span> field.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "ignoreTikaException\nIf <span class=\"ff1 fs0\">true</span>, exceptions found during processing will be skipped. Any metadata available, however, will be\nindexed.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "literal.fieldname\nPopulates a field with the name supplied with the specified value for each document. The data can be\nmultivalued if the field is multivalued.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "literalsOverride\nIf <span class=\"ff1 fs0\">true</span> (the default), literal field values will override other values with the same field name. If <span class=\"ff1 fs0\">false</span>, literal\nvalues defined with <span class=\"ff1 fs0\">literal.fieldname</span> will be appended to data already in the fields extracted from\nTika. If setting <span class=\"ff1 fs0\">literalsOverride</span> to <span class=\"ff1 fs0\">false</span>, the field must be multivalued.",
    "hierarchy": [
    ],
    "pageId": 366
  },
  {
    "content": "lowernames\nValues are <span class=\"ff1 fs0\">true</span> or <span class=\"ff1 fs0\">false</span>. If <span class=\"ff1 fs0\">true</span>, all field names will be mapped to lowercase with underscores, if\nneeded. For example, \"Content-Type\" would be mapped to \"content_type.\"",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "multipartUploadLimitInKB\nUseful if uploading very large documents, this defines the KB size of documents to allow.",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "passwordsFile\nDefines a file path and name for a file of file name to password mappings.",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "resource.name\nSpecifies the optional name of the file. Tika can use it as a hint for detecting a file's MIME type.",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "resource.password\nDefines a password to use for a password-protected PDF or OOXML file",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "tika.config\nDefines a file path and name to a customized Tika configuration file. This is only required if you have\ncustomized your Tika implementation.",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "uprefix\nPrefixes all fields that are not defined in the schema with the given prefix. This is very useful when\ncombined with dynamic field definitions. Example: <span class=\"ff1 fs0\">uprefix=ignored_</span> would effectively ignore all\nunknown fields generated by Tika given the example schema contains <span class=\"ff1 fs0\"><dynamicField</span>\nname=\"ignored_*\" type=\"ignored\"/>",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "xpath\nWhen extracting, only return Tika XHTML content that satisfies the given XPath expression. See\nhttp://tika.apache.org/1.16/index.html<span class=\"fc0\"> for details on the format of Tika XHTML. See also</span>\nhttp://wiki.apache.org/solr/TikaExtractOnlyExampleOutput<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 367
  },
  {
    "content": "Here is the order in which the Solr Cell framework, using the Extracting Request Handler and Tika, processes\nits input.",
    "hierarchy": [
      "Order of Operations"
    ],
    "pageId": 367
  },
  {
    "content": "1.Tika generates fields or passes them in as literals specified by <span class=\"ff1 fs0\">literal.<fieldname>=<value></span>. If\nliteralsOverride=false<span class=\"ff2 fs1\">, literals will be appended as multi-value to the Tika-generated field.</span>",
    "hierarchy": [
      "Order of Operations"
    ],
    "pageId": 367
  },
  {
    "content": "2.If <span class=\"ff1 fs0\">lowernames=true</span>, Tika maps fields to lowercase.\n3.Tika applies the mapping rules specified by <span class=\"ff1 fs0\">fmap.source=target</span> parameters.\n4.If <span class=\"ff1 fs0\">uprefix</span> is specified, any unknown field names are prefixed with that value, else if <span class=\"ff1 fs0\">defaultField</span> is\nspecified, any unknown fields are copied to the default field.",
    "hierarchy": [
      "Order of Operations"
    ],
    "pageId": 367
  },
  {
    "content": "If you are not working with the supplied <span class=\"ff1 fs0\">sample_techproducts_configs</span> or <span class=\"ff1 fs0\">_default</span> <span class=\"link\">config set</span>, you must\nconfigure your own <span class=\"ff1 fs0\">solrconfig.xml</span> to know about the Jar's containing the <span class=\"ff1 fs0\">ExtractingRequestHandler</span> and\nits dependencies:",
    "hierarchy": [
      "Configuring the Solr ExtractingRequestHandler"
    ],
    "pageId": 367
  },
  {
    "content": "Ê <span class=\"fc1\"><lib</span> <span class=\"fc2\">dir</span>=<span class=\"fc3\">\"${solr.install.dir:../../..}/contrib/extraction/lib\"</span> <span class=\"fc2\">regex</span>=<span class=\"fc3\">\".*\\.jar\"</span> <span class=\"fc1\">/></span>\nÊ <span class=\"fc1\"><lib</span> <span class=\"fc2\">dir</span>=<span class=\"fc3\">\"${solr.install.dir:../../..}/dist/\"</span> <span class=\"fc2\">regex</span>=<span class=\"fc3\">\"solr-cell-\\d.*\\.jar\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "You can then configure the <span class=\"ff1 fs1\">ExtractingRequestHandler</span> in <span class=\"ff1 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fmap.Last-Modified\"<span class=\"fc1\">></span></span>last_modified<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uprefix\"<span class=\"fc1\">></span></span>ignored_<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc4\"><!--Optional.  Specify a path to a tika configuration file. See the Tika docs for details.--></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"tika.config\"<span class=\"fc1\">></span></span>/my/path/to/tika.config<span class=\"fc1\"></str></span>\nÊ <span class=\"fc4\"><!-- Optional. Specify one or more date formats to parse. See DateUtil.DEFAULT_DATE_FORMATS</span>",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"date.formats\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str></span>yyyy-MM-dd<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc4\"><!-- Optional. Specify an external file containing parser-specific properties.</span>",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"parseContext.config\"<span class=\"fc1\">></span></span>parseContext.xml<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "In the defaults section, we are mapping Tika's Last-Modified Metadata attribute to a field named\nlast_modified<span class=\"ff2 fs0\">. We are also telling it to ignore undeclared fields. These are all overridden parameters.</span>",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "The <span class=\"ff1 fs1\">tika.config</span> entry points to a file containing a Tika configuration. The <span class=\"ff1 fs1\">date.formats</span> allows you to\nspecify various <span class=\"ff1 fs1\">java.text.SimpleDateFormats</span> date formats for working with transforming extracted input\nto a Date. Solr comes configured with the following date formats (see the <span class=\"ff1 fs1\">DateUtil</span> in Solr):",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nyyyy-MM-dd'T’HH:mm:ss’Z'",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nyyyy-MM-dd'T’HH:mm:ss",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nyyyy-MM-dd",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nyyyy-MM-dd hh:mm:ss",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nyyyy-MM-dd HH:mm:ss",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nEEE MMM d hh:mm:ss z yyyy",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nEEE, dd MMM yyyy HH:mm:ss zzz",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nEEEE, dd-MMM-yy HH:mm:ss zzz",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "\nEEE MMM d HH:mm:ss yyyy",
    "hierarchy": [
    ],
    "pageId": 368
  },
  {
    "content": "Parsers used by Tika may have specific properties to govern how data is extracted. For instance, when using\nthe Tika library from a Java program, the PDFParserConfig class has a method <span class=\"ff1 fs1\">setSortByPosition(boolean)</span>\nthat can extract vertically oriented text. To access that method via configuration with the\nExtractingRequestHandler, one can add the <span class=\"ff1 fs1\">parseContext.config</span> property to the <span class=\"ff1 fs1\">solrconfig.xml</span> file (see\nabove) and then set properties in Tika's PDFParserConfig as below. Consult the Tika Java API documentation",
    "hierarchy": [
      "Parser-Specific Properties"
    ],
    "pageId": 368
  },
  {
    "content": "for configuration parameters that can be set for any particular parsers that require this level of control.",
    "hierarchy": [
    ],
    "pageId": 369
  },
  {
    "content": "Ê <span class=\"fc1\"><entry</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"org.apache.tika.parser.pdf.PDFParserConfig\"</span> <span class=\"fc2\">impl</span>=",
    "hierarchy": [
    ],
    "pageId": 369
  },
  {
    "content": "Ê   <span class=\"fc1\"><property</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"extractInlineImages\"</span> <span class=\"fc2\">value</span>=<span class=\"fc3\">\"true\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"><property</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sortByPosition\"</span> <span class=\"fc2\">value</span>=<span class=\"fc3\">\"true\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"></entry></span>\nÊ <span class=\"fc1\"><entry></span>...<span class=\"fc1\"></entry></span>",
    "hierarchy": [
    ],
    "pageId": 369
  },
  {
    "content": "For a multi-core configuration, you can specify <span class=\"ff2 fs2\">sharedLib='lib'</span> in the <span class=\"ff2 fs2\"><solr/></span> section of <span class=\"ff2 fs2\">solr.xml</span> and\nplace the necessary jar files there.",
    "hierarchy": [
      "Multi-Core Configuration"
    ],
    "pageId": 369
  },
  {
    "content": "For more information about Solr cores, see <span class=\"link\">The Well-Configured Solr Instance</span>.",
    "hierarchy": [
      "Multi-Core Configuration"
    ],
    "pageId": 369
  },
  {
    "content": "The ExtractingRequestHandler will decrypt encrypted files and index their content if you supply a password\nin either <span class=\"ff2 fs2\">resource.password</span> on the request, or in a <span class=\"ff2 fs2\">passwordsFile</span> file.",
    "hierarchy": [
      "ExtractingUpdateRequestHandler"
    ],
    "pageId": 369
  },
  {
    "content": "In the case of <span class=\"ff2 fs2\">passwordsFile</span>, the file supplied must be formatted so there is one line per rule. Each rule\ncontains a file name regular expression, followed by \"=\", then the password in clear-text. Because the\npasswords are in clear-text, the file should have strict access restrictions.",
    "hierarchy": [
      "ExtractingUpdateRequestHandler"
    ],
    "pageId": 369
  },
  {
    "content": "# This is a comment\nmyFileName = myPassword\n.*\\.docx$ = myWordPassword\n.*\\.pdf$ = myPdfPassword",
    "hierarchy": [
      "ExtractingUpdateRequestHandler"
    ],
    "pageId": 369
  },
  {
    "content": "As mentioned before, Tika produces metadata about the document. Metadata describes different aspects of\na document, such as the author's name, the number of pages, the file size, and so on. The metadata\nproduced depends on the type of document submitted. For instance, PDFs have different metadata than\nWord documents do.",
    "hierarchy": [
      "Solr Cell Examples",
      "Metadata Created by Tika"
    ],
    "pageId": 369
  },
  {
    "content": "In addition to Tika's metadata, Solr adds the following metadata (defined in\nExtractingMetadataConstants<span class=\"ff1 fs0\">):</span>",
    "hierarchy": [
      "Solr Cell Examples",
      "Metadata Created by Tika"
    ],
    "pageId": 369
  },
  {
    "content": "stream_name\nThe name of the Content Stream as uploaded to Solr. Depending on how the file is uploaded, this may or",
    "hierarchy": [
      "Solr Cell Examples",
      "Metadata Created by Tika"
    ],
    "pageId": 369
  },
  {
    "content": "may not be set.",
    "hierarchy": [
    ],
    "pageId": 370
  },
  {
    "content": "stream_source_info\nAny source info about the stream. (See the section on Content Streams later in this section.)",
    "hierarchy": [
    ],
    "pageId": 370
  },
  {
    "content": "stream_size\nThe size of the stream in bytes.",
    "hierarchy": [
    ],
    "pageId": 370
  },
  {
    "content": "stream_content_type\nThe content type of the stream, if available.",
    "hierarchy": [
    ],
    "pageId": 370
  },
  {
    "content": "We recommend that you try using the <span class=\"ff2 fs1\">extractOnly</span> option to discover which values Solr is\nsetting for these metadata elements.",
    "hierarchy": [
    ],
    "pageId": 370
  },
  {
    "content": "The command below captures <span class=\"ff2 fs1\"><div></span> tags separately, and then maps all the instances of that field to a\ndynamic field named <span class=\"ff2 fs1\">foo_t</span>.",
    "hierarchy": [
      "Examples of Uploads Using the Extracting Request Handler",
      "Capture and Mapping"
    ],
    "pageId": 370
  },
  {
    "content": "bin/post -c techproducts example/exampledocs/sample.html -params\n\"literal.id=doc2&captureAttr=true&defaultField=_text_&fmap.div=foo_t&capture=div\"",
    "hierarchy": [
      "Examples of Uploads Using the Extracting Request Handler",
      "Capture and Mapping"
    ],
    "pageId": 370
  },
  {
    "content": "To add in your own metadata, pass in the literal parameter along with the file:",
    "hierarchy": [
      "Examples of Uploads Using the Extracting Request Handler",
      "Using Literals to Define Your Own Metadata"
    ],
    "pageId": 370
  },
  {
    "content": "bin/post -c techproducts -params\n\"literal.id=doc4&captureAttr=true&defaultField=text&capture=div&fmap.div=foo_t&literal.blah_s=Bah\n\" example/exampledocs/sample.html",
    "hierarchy": [
      "Examples of Uploads Using the Extracting Request Handler",
      "Using Literals to Define Your Own Metadata"
    ],
    "pageId": 370
  },
  {
    "content": "The example below passes in an XPath expression to restrict the XHTML returned by Tika:",
    "hierarchy": [
      "Examples of Uploads Using the Extracting Request Handler",
      "XPath Expressions"
    ],
    "pageId": 370
  },
  {
    "content": "bin/post -c techproducts -params\n\"literal.id=doc5&captureAttr=true&defaultField=text&capture=div&fmap.div=foo_t&xpath=/xhtml:html/\nxhtml:body/xhtml:div//node()\" example/exampledocs/sample.html",
    "hierarchy": [
      "Examples of Uploads Using the Extracting Request Handler",
      "XPath Expressions"
    ],
    "pageId": 370
  },
  {
    "content": "Solr allows you to extract data without indexing. You might want to do this if you're using Solr solely as an\nextraction server or if you’re interested in testing Solr extraction.",
    "hierarchy": [
      "Extracting Data without Indexing It"
    ],
    "pageId": 370
  },
  {
    "content": "The example below sets the <span class=\"ff2 fs1\">extractOnly=true</span> parameter to extract data without indexing it.",
    "hierarchy": [
      "Extracting Data without Indexing It"
    ],
    "pageId": 370
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/update/extract?&extractOnly=true\" --data-binary\n@example/exampledocs/sample.html -H 'Content-type:text/html'",
    "hierarchy": [
    ],
    "pageId": 371
  },
  {
    "content": "The output includes XML generated by Tika (and further escaped by Solr's XML) using a different output\nformat to make it more readable (<span class=\"ff1 fs1\">-out yes</span> instructs the tool to echo Solr’s output to the console):",
    "hierarchy": [
    ],
    "pageId": 371
  },
  {
    "content": "bin/post -c techproducts -params \"extractOnly=true&wt=ruby&indent=true\" -out yes\nexample/exampledocs/sample.html",
    "hierarchy": [
    ],
    "pageId": 371
  },
  {
    "content": "The example below streams the file as the body of the POST, which does not, then, provide information to\nSolr about the name of the file.",
    "hierarchy": [
      "Sending Documents to Solr with a POST"
    ],
    "pageId": 371
  },
  {
    "content": "curl\n\"http://localhost:8983/solr/techproducts/update/extract?literal.id=doc6&defaultField=text&commit=\ntrue\" --data-binary @example/exampledocs/sample.html -H 'Content-type:text/html'",
    "hierarchy": [
      "Sending Documents to Solr with a POST"
    ],
    "pageId": 371
  },
  {
    "content": "SolrJ is a Java client that you can use to add documents to the index, update the index, or query the index.\nYou'll find more information on SolrJ in <span class=\"link\">Client APIs</span>.",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "Here's an example of using Solr Cell and SolrJ to add documents to a Solr index.",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "First, let's use SolrJ to create a new SolrClient, then we’ll construct a request containing a ContentStream\n(essentially a wrapper around a file) and sent it to Solr:",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "Ê <span class=\"fc3\">public</span> <span class=\"fc3\">static</span> <span class=\"fc4\">void</span> main (<span class=\"fc4\">String[]</span> args) <span class=\"fc3\">throws</span> IOException, SolrServerException {\nÊ   SolrClient client = <span class=\"fc3\">new</span> HttpSolrClient.Builder(<span class=\"fc6\">\"http://localhost:8983/solr/my_collection\"</span>)\n.build();\nÊ   ContentStreamUpdateRequest req = <span class=\"fc3\">new</span> ContentStreamUpdateRequest(<span class=\"fc6\">\"/update/extract\"</span>);\nÊ   req.addFile(<span class=\"fc3\">new</span> <span class=\"fc4\">File</span>(<span class=\"fc6\">\"my-file.pdf\"</span>));\nÊ   req.setParam(ExtractingParams.EXTRACT_ONLY, <span class=\"fc6\">\"true\"</span>);\nÊ   NamedList<<span class=\"fc4\">Object</span>> result = client.request(req);\nÊ   <span class=\"fc4\">System</span>.out.println(<span class=\"fc6\">\"Result: \"</span> + result);\n}",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "This operation streams the file <span class=\"ff1 fs1\">my-file.pdf</span> into the Solr index for <span class=\"ff1 fs1\">my_collection</span>.",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "The sample code above calls the extract command, but you can easily substitute other commands that are\nsupported by Solr Cell. The key class to use is the <span class=\"ff1 fs1\">ContentStreamUpdateRequest</span>, which makes sure the\nContentStreams are set properly. SolrJ takes care of the rest.",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "Note that the <span class=\"ff1 fs1\">ContentStreamUpdateRequest</span> is not just specific to Solr Cell. You can send CSV to the CSV",
    "hierarchy": [
      "Sending Documents to Solr with Solr Cell and SolrJ"
    ],
    "pageId": 371
  },
  {
    "content": "Update handler and to any other Request Handler that works with Content Streams for updates.",
    "hierarchy": [
    ],
    "pageId": 372
  },
  {
    "content": "Many search applications store the content to be indexed in a structured data store, such as a relational\ndatabase. The Data Import Handler (DIH) provides a mechanism for importing content from a data store\nand indexing it.",
    "hierarchy": [
      "Import Handler"
    ],
    "pageId": 373
  },
  {
    "content": "In addition to relational databases, DIH can index content from HTTP based data sources such as RSS and\nATOM feeds, e-mail repositories, and structured XML where an XPath processor is used to generate fields.",
    "hierarchy": [
      "Import Handler"
    ],
    "pageId": 373
  },
  {
    "content": "Descriptions of the Data Import Handler use several familiar terms, such as entity and processor, in specific\nways, as explained in the table below.",
    "hierarchy": [
      "Import Handler",
      "DIH Concepts and Terminology"
    ],
    "pageId": 373
  },
  {
    "content": "Datasource\nAs its name suggests, a datasource defines the location of the data of interest. For a database, it's a DSN.\nFor an HTTP datasource, it’s the base URL.",
    "hierarchy": [
      "Import Handler",
      "DIH Concepts and Terminology"
    ],
    "pageId": 373
  },
  {
    "content": "Entity\nConceptually, an entity is processed to generate a set of documents, containing multiple fields, which\n(after optionally being transformed in various ways) are sent to Solr for indexing. For a RDBMS data\nsource, an entity is a view or table, which would be processed by one or more SQL statements to\ngenerate a set of rows (documents) with one or more columns (fields).",
    "hierarchy": [
      "Import Handler",
      "DIH Concepts and Terminology"
    ],
    "pageId": 373
  },
  {
    "content": "Processor\nAn entity processor does the work of extracting content from a data source, transforming it, and adding it\nto the index. Custom entity processors can be written to extend or replace the ones supplied.",
    "hierarchy": [
      "Import Handler",
      "DIH Concepts and Terminology"
    ],
    "pageId": 373
  },
  {
    "content": "Transformer\nEach set of fields fetched by the entity may optionally be transformed. This process can modify the fields,\ncreate new fields, or generate multiple rows/documents form a single row. There are several built-in\ntransformers in the DIH, which perform functions such as modifying dates and stripping HTML. It is\npossible to write custom transformers using the publicly available interface.",
    "hierarchy": [
      "Import Handler",
      "DIH Concepts and Terminology"
    ],
    "pageId": 373
  },
  {
    "content": "The <span class=\"code\">example/example-DIH</span> directory contains several collections to demonstrate many of the features of the\ndata import handler. These are available with the <span class=\"code\">dih</span> example from the <span class=\"link\">Solr Control Script</span>:",
    "hierarchy": [
      "Import Handler",
      "Solr's DIH Examples"
    ],
    "pageId": 373
  },
  {
    "content": "bin/solr -e dih",
    "hierarchy": [
      "Import Handler",
      "Solr's DIH Examples"
    ],
    "pageId": 373
  },
  {
    "content": "This launches a standalone Solr instance with several collections that correspond to detailed examples. The\navailable examples are <span class=\"code\">atom</span>, <span class=\"code\">db</span>, <span class=\"code\">mail</span>, <span class=\"code\">solr</span>, and <span class=\"code\">tika</span>.",
    "hierarchy": [
      "Import Handler",
      "Solr's DIH Examples"
    ],
    "pageId": 373
  },
  {
    "content": "All examples in this section assume you are running the DIH example server.",
    "hierarchy": [
      "Import Handler",
      "Solr's DIH Examples"
    ],
    "pageId": 373
  },
  {
    "content": "The Data Import Handler has to be registered in <span class=\"code\">solrconfig.xml</span>. For example:",
    "hierarchy": [
      "Configuring DIH",
      "Configuring solrconfig.xml for DIH"
    ],
    "pageId": 374
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"config\"<span class=\"fc2\">></span></span>/path/to/my/DIHconfigfile.xml<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Configuring DIH",
      "Configuring solrconfig.xml for DIH"
    ],
    "pageId": 374
  },
  {
    "content": "The only required parameter is the <span class=\"code\">config</span> parameter, which specifies the location of the DIH configuration\nfile that contains specifications for the data source, how to fetch data, what data to fetch, and how to\nprocess it to generate the Solr documents to be posted to the index.",
    "hierarchy": [
      "Configuring DIH",
      "Configuring solrconfig.xml for DIH"
    ],
    "pageId": 374
  },
  {
    "content": "You can have multiple DIH configuration files. Each file would require a separate definition in the\nsolrconfig.xml<span class=\"ff2 fs2\"> file, specifying a path to the file.</span>",
    "hierarchy": [
      "Configuring DIH",
      "Configuring solrconfig.xml for DIH"
    ],
    "pageId": 374
  },
  {
    "content": "An annotated configuration file, based on the <span class=\"code\">db</span> collection in the <span class=\"code\">dih</span> example server, is shown below (this\nfile is located in <span class=\"code\">example/example-DIH/solr/db/conf/db-data-config.xml</span>).",
    "hierarchy": [
      "Configuring DIH",
      "Configuring the DIH Configuration File"
    ],
    "pageId": 374
  },
  {
    "content": "This example shows how to extract fields from four tables defining a simple product database. More\ninformation about the parameters and options shown here will be described in the sections following.",
    "hierarchy": [
      "Configuring DIH",
      "Configuring the DIH Configuration File"
    ],
    "pageId": 374
  },
  {
    "content": "Ê   <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"item\"</span> <span class=\"fc2\">query</span>=<span class=\"fc3\">\"select * from item\"</span>\nÊ           <span class=\"fc2\">deltaQuery</span>=<span class=\"fc3\">\"select id from item where last_modified </span>>",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "Ê     <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"NAME\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "Ê     <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"feature\"</span>\nÊ             <span class=\"fc2\">query</span>=<span class=\"fc3\">\"select DESCRIPTION from FEATURE where ITEM_ID='${item.ID}'\"</span>\nÊ             <span class=\"fc2\">deltaQuery</span>=<span class=\"fc3\">\"select ITEM_ID from FEATURE where last_modified </span>>\n'${dataimporter.last_index_time}'\"",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "Ê       <span class=\"fc0\"><field</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"features\"</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"DESCRIPTION\"</span> <span class=\"fc0\">/></span>\nÊ     <span class=\"fc0\"></entity></span>",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "Ê     <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"item_category\"</span>\nÊ             <span class=\"fc2\">query</span>=<span class=\"fc3\">\"select CATEGORY_ID from item_category where ITEM_ID='${item.ID}'\"</span>\nÊ             <span class=\"fc2\">deltaQuery</span>=<span class=\"fc3\">\"select ITEM_ID, CATEGORY_ID from item_category where last_modified </span>>\n'${dataimporter.last_index_time}'\"\nÊ             parentDeltaQuery=\"select ID from item where ID=${item_category.ITEM_ID}\">\nÊ       <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"category\"</span>\nÊ               <span class=\"fc2\">query</span>=<span class=\"fc3\">\"select DESCRIPTION from category where ID =</span>",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "Ê               <span class=\"fc2\">deltaQuery</span>=<span class=\"fc3\">\"select ID from category where last_modified </span>>\n'${dataimporter.last_index_time}'\"\nÊ               parentDeltaQuery=\"select ITEM_ID, CATEGORY_ID from item_category where\nCATEGORY_ID=${category.ID}\">\nÊ         <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"description\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"cat\"</span> <span class=\"fc0\">/></span>\nÊ       <span class=\"fc0\"></entity></span>\nÊ     <span class=\"fc0\"></entity></span>\nÊ   <span class=\"fc0\"></entity></span>\nÊ <span class=\"fc0\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "The first element is the <span class=\"ff1 fs2\">dataSource</span>, in this case an HSQLDB database. The path to the JDBC driver and\nthe JDBC URL and login credentials are all specified here. Other permissible attributes include whether\nor not to autocommit to Solr, the batchsize used in the JDBC connection, and a <span class=\"ff1 fs2\">readOnly</span> flag.\nThe password attribute is optional if there is no password set for the DB. Alternately, the password can\nbe encrypted; the section <span class=\"link\">Encrypting a Database Password</span> below describes how to do this.\nA <span class=\"ff1 fs2\">document</span> element follows, containing multiple <span class=\"ff1 fs2\">entity</span> elements. Note that <span class=\"ff1 fs2\">entity</span> elements can be\nnested, and this allows the entity relationships in the sample database to be mirrored here, so that we\ncan generate a denormalized Solr record which may include multiple features for one item, for instance.\nThe possible attributes for the <span class=\"ff1 fs2\">entity</span> element are described in later sections. Entity elements may\ncontain one or more <span class=\"ff1 fs2\">field</span> elements, which map the data source field names to Solr fields, and\noptionally specify per-field transformations. This entity is the <span class=\"ff1 fs2\">root</span> entity.\nThis entity is nested and reflects the one-to-many relationship between an item and its multiple",
    "hierarchy": [
    ],
    "pageId": 375
  },
  {
    "content": "features. Note the use of variables; <span class=\"ff2 fs1\">${item.ID}</span> is the value of the column 'ID' for the current item (<span class=\"ff2 fs1\">item</span>\nreferring to the entity name).",
    "hierarchy": [
    ],
    "pageId": 376
  },
  {
    "content": "Datasources can still be specified in <span class=\"ff2 fs1\">solrconfig.xml</span>. These must be specified in the defaults section of the\nhandler in <span class=\"ff2 fs1\">solrconfig.xml</span>. However, these are not parsed until the main configuration is loaded.",
    "hierarchy": [
    ],
    "pageId": 376
  },
  {
    "content": "The entire configuration itself can be passed as a request parameter using the <span class=\"ff2 fs1\">dataConfig</span> parameter rather\nthan using a file. When configuration errors are encountered, the error message is returned in XML format.",
    "hierarchy": [
    ],
    "pageId": 376
  },
  {
    "content": "A <span class=\"ff2 fs1\">reload-config</span> command is also supported, which is useful for validating a new configuration file, or if you\nwant to specify a file, load it, and not have it reloaded again on import. If there is an <span class=\"ff2 fs1\">xml</span> mistake in the\nconfiguration a user-friendly message is returned in <span class=\"ff2 fs1\">xml</span> format. You can then fix the problem and do a\nreload-config<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 376
  },
  {
    "content": "You can also view the DIH configuration in the Solr Admin UI from the <span class=\"link\">Dataimport Screen</span>.\nIt includes an interface to import content.",
    "hierarchy": [
    ],
    "pageId": 376
  },
  {
    "content": "Request parameters can be substituted in configuration with placeholder\n${dataimporter.request.paramname}<span class=\"ff1 fs0\">, as in this example:</span>",
    "hierarchy": [
      "DIH Request Parameters"
    ],
    "pageId": 376
  },
  {
    "content": "Ê           <span class=\"fc5\">url</span>=<span class=\"fc6\">\"${dataimporter.request.jdbcurl}\"</span>\nÊ           <span class=\"fc5\">user</span>=<span class=\"fc6\">\"${dataimporter.request.jdbcuser}\"</span>\nÊ           <span class=\"fc5\">password</span>=<span class=\"fc6\">\"${dataimporter.request.jdbcpassword}\"</span> <span class=\"fc4\">/></span>",
    "hierarchy": [
      "DIH Request Parameters"
    ],
    "pageId": 376
  },
  {
    "content": "These parameters can then be passed to the <span class=\"ff2 fs1\">full-import</span> command or defined in the <span class=\"ff2 fs1\"><defaults></span> section in\nsolrconfig.xml<span class=\"ff1 fs0\">. This example shows the parameters with the full-import command:</span>",
    "hierarchy": [
      "DIH Request Parameters"
    ],
    "pageId": 376
  },
  {
    "content": "http://localhost:8983/solr/dih/dataimport?command=full-import&jdbcurl=jdbc:hsqldb:./example-\nDIH/hsqldb/ex&jdbcuser=sa&jdbcpassword=secret",
    "hierarchy": [
      "DIH Request Parameters"
    ],
    "pageId": 376
  },
  {
    "content": "The database password can be encrypted if necessary to avoid plaintext passwords being exposed in\nunsecured files. To do this, follow these steps:",
    "hierarchy": [
      "Encrypting a Database Password"
    ],
    "pageId": 376
  },
  {
    "content": "1.In a terminal window, run the command <span class=\"ff2 fs1\">openssl enc -aes-128-cbc -a -salt -in pwd.txt</span>. ..This\nassumes the password is in a file named <span class=\"ff2 fs1\">pwd.txt</span>. If you don't have the password in this file yet, you can\ndo <span class=\"ff2 fs1\">echo \"mypassword\" > pwd.txt</span>.",
    "hierarchy": [
      "Encrypting a Database Password"
    ],
    "pageId": 376
  },
  {
    "content": "a.The openssl session will ask for a password to use for the decryption. You will use this file with a\nencryptKeyFile<span class=\"ff1 fs0\"> parameter in </span>data-config.xml<span class=\"ff1 fs0\">.</span>\nb.The output of the process will be a long string such as\nU2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=<span class=\"ff1 fs0\">. This will be the password you put in your </span>data-\nconfig.xml<span class=\"ff1 fs0\"> file.</span>\n2.Save the password you used as the decryption password in the previous step to a file, and determine the\nlocation of the file on the Solr server. You could use a command such as <span class=\"ff2 fs1\">echo myencrypfilepwd ></span>",
    "hierarchy": [
      "Encrypting a Database Password"
    ],
    "pageId": 376
  },
  {
    "content": "/location/of/encryptionkey<span class=\"ff2 fs1\">. Replace \"myencrypfilepwd\" with the password you used while</span>\ngenerating the key.",
    "hierarchy": [
    ],
    "pageId": 377
  },
  {
    "content": "3.If the file is not yet on the Solr server, move it there. Also make sure the encryption key file permissions\ndo not allow it to be read by unauthorized users. The <span class=\"ff1 fs0\">chmod 0600</span> command should set the permissions\nsufficiently.",
    "hierarchy": [
    ],
    "pageId": 377
  },
  {
    "content": "4.In your <span class=\"ff1 fs0\">data-config.xml</span>, you'll add the <span class=\"ff1 fs0\">password</span> and <span class=\"ff1 fs0\">encryptKeyFile</span> parameters to the <span class=\"ff1 fs0\"><datasource></span>\nconfiguration, as in this example:",
    "hierarchy": [
    ],
    "pageId": 377
  },
  {
    "content": "Ê   <span class=\"fc2\">url</span>=<span class=\"fc3\">\"jdbc:hsqldb:./example-DIH/hsqldb/ex\"</span>\nÊ   <span class=\"fc2\">user</span>=<span class=\"fc3\">\"sa\"</span> <span class=\"fc2\">password</span>=<span class=\"fc3\">\"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\"</span>\nÊ   <span class=\"fc2\">encryptKeyFile</span>=<span class=\"fc3\">\"/location/of/encryptionkey /</span>>",
    "hierarchy": [
    ],
    "pageId": 377
  },
  {
    "content": "DIH commands are sent to Solr via an HTTP request. The following operations are supported.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "abort\nAborts an ongoing operation. For example:\nhttp://localhost:8983/solr/dih/dataimport?command=abort<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "delta-import\nFor incremental imports and change detection. Only the <span class=\"link\">SqlEntityProcessor</span> supports delta imports.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "For example: <span class=\"ff1 fs0\">http://localhost:8983/solr/dih/dataimport?command=delta-import</span>.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "This command supports the same <span class=\"ff1 fs0\">clean</span>, <span class=\"ff1 fs0\">commit</span>, <span class=\"ff1 fs0\">optimize</span> and <span class=\"ff1 fs0\">debug</span> parameters as <span class=\"ff1 fs0\">full-import</span>\ncommand described below.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "full-import\nA Full Import operation can be started with a URL such as\nhttp://localhost:8983/solr/dih/dataimport?command=full-import<span class=\"ff2 fs1\">. The command returns</span>\nimmediately.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "The operation will be started in a new thread and the <span class=\"ff4\">status</span> attribute in the response should be shown as\nbusy<span class=\"ff2\">. The operation may take some time depending on the size of dataset. Queries to Solr are not</span>\nblocked during full-imports.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "When a <span class=\"ff1 fs0\">full-import</span> command is executed, it stores the start time of the operation in a file located at\nconf/dataimport.properties<span class=\"ff2 fs1\">. This stored timestamp is used when a </span>delta-import<span class=\"ff2 fs1\"> operation is</span>\nexecuted.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "Commands available to <span class=\"ff1 fs0\">full-import</span> are:",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "clean\nDefault is true. Tells whether to clean up the index before the indexing is started.",
    "hierarchy": [
      "DataImportHandler Commands"
    ],
    "pageId": 377
  },
  {
    "content": "Default is true. Tells whether to commit after the operation.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "debug\nDefault is false. Runs the command in debug mode and is used by the interactive development mode.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "Note that in debug mode, documents are never committed automatically. If you want to run debug\nmode and commit the results too, add <span class=\"code\">commit=true</span> as a request parameter.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "entity\nThe name of an entity directly under the <span class=\"code\"><document></span> tag in the configuration file. Use this to execute\none or more entities selectively.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "Multiple \"entity\" parameters can be passed on to run multiple entities at once. If nothing is passed, all\nentities are executed.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "optimize\nDefault is true. Tells Solr whether to optimize after the operation.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "synchronous\nBlocks request until import is completed. Default is false.",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "reload-config\nIf the configuration file has been changed and you wish to reload it without restarting Solr, run the\ncommand <span class=\"code\">http://localhost:8983/solr/dih/dataimport?command=reload-config</span>",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "status\nThis command returns statistics on the number of documents created, deleted, queries run, rows\nfetched, status, and so on. For example:\nhttp://localhost:8983/solr/dih/dataimport?command=status<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "show-config\nThis command responds with configuration:\nhttp://localhost:8983/solr/dih/dataimport?command=show-config<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 378
  },
  {
    "content": "The <span class=\"code\">propertyWriter</span> element defines the date format and locale for use with delta queries. It is an optional\nconfiguration. Add the element to the DIH configuration file, directly under the <span class=\"code\">dataConfig</span> element.",
    "hierarchy": [
      "Property Writer"
    ],
    "pageId": 378
  },
  {
    "content": "Ê               <span class=\"fc3\">directory</span>=<span class=\"fc4\">\"data\"</span> <span class=\"fc3\">filename</span>=<span class=\"fc4\">\"my_dih.properties\"</span> <span class=\"fc3\">locale</span>=<span class=\"fc4\">\"en-US\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
      "Property Writer"
    ],
    "pageId": 378
  },
  {
    "content": "The parameters available are:",
    "hierarchy": [
      "Property Writer"
    ],
    "pageId": 378
  },
  {
    "content": "dateFormat\nA <span class=\"code\">java.text.SimpleDateFormat</span> to use when converting the date to text. The default is <span class=\"code\">yyyy-MM-dd</span>\nHH:mm:ss<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Property Writer"
    ],
    "pageId": 378
  },
  {
    "content": "The implementation class. Use <span class=\"ff2 fs1\">SimplePropertiesWriter</span> for non-SolrCloud installations. If using\nSolrCloud, use <span class=\"ff2 fs1\">ZKPropertiesWriter</span>.",
    "hierarchy": [
    ],
    "pageId": 379
  },
  {
    "content": "If this is not specified, it will default to the appropriate class depending on if SolrCloud mode is enabled.",
    "hierarchy": [
    ],
    "pageId": 379
  },
  {
    "content": "directory\nUsed with the <span class=\"ff2 fs1\">SimplePropertiesWriter</span> only. The directory for the properties file. If not specified, the\ndefault is <span class=\"ff2 fs1\">conf</span>.",
    "hierarchy": [
    ],
    "pageId": 379
  },
  {
    "content": "filename\nUsed with the <span class=\"ff2 fs1\">SimplePropertiesWriter</span> only. The name of the properties file.",
    "hierarchy": [
    ],
    "pageId": 379
  },
  {
    "content": "If not specified, the default is the requestHandler name (as defined in <span class=\"ff2 fs1\">solrconfig.xml</span>, appended by\n\".properties\" (such as, <span class=\"ff2 fs1\">dataimport.properties</span>).",
    "hierarchy": [
    ],
    "pageId": 379
  },
  {
    "content": "locale\nThe locale. If not defined, the ROOT locale is used. It must be specified as language-country (<span class=\"link\">BCP 47</span>\nlanguage tag<span class=\"fc0\">). For example, <span class=\"ff2 fs1\">en-US</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 379
  },
  {
    "content": "A data source specifies the origin of data and its type. Somewhat confusingly, some data sources are\nconfigured within the associated entity processor. Data sources can also be specified in <span class=\"ff2 fs1\">solrconfig.xml</span>,\nwhich is useful when you have multiple environments (for example, development, QA, and production)\ndiffering only in their data sources.",
    "hierarchy": [
      "Data Sources"
    ],
    "pageId": 379
  },
  {
    "content": "You can create a custom data source by writing a class that extends\norg.apache.solr.handler.dataimport.DataSource<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Data Sources"
    ],
    "pageId": 379
  },
  {
    "content": "The mandatory attributes for a data source definition are its name and type. The name identifies the data\nsource to an Entity element.",
    "hierarchy": [
      "Data Sources"
    ],
    "pageId": 379
  },
  {
    "content": "The types of data sources available are described below.",
    "hierarchy": [
      "Data Sources"
    ],
    "pageId": 379
  },
  {
    "content": "This takes the POST data as the data source. This can be used with any EntityProcessor that uses a\nDataSource<Reader><span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Data Sources",
      "ContentStreamDataSource"
    ],
    "pageId": 379
  },
  {
    "content": "This can be used where a database field contains XML which you wish to process using the\nXPathEntityProcessor. You would set up a configuration with both JDBC and FieldReader data sources, and\ntwo entities, as follows:",
    "hierarchy": [
      "Data Sources",
      "FieldReaderDataSource"
    ],
    "pageId": 379
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- processor for database --></span>\nÊ <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span> =<span class=\"fc3\">\"e1\"</span> <span class=\"fc2\">dataSource</span>=<span class=\"fc3\">\"a1\"</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"SqlEntityProcessor\"</span> <span class=\"fc2\">pk</span>=<span class=\"fc3\">\"docid\"</span>\nÊ         <span class=\"fc2\">query</span>=<span class=\"fc3\">\"select * from t1 ...\"<span class=\"fc0\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 380
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- nested XpathEntity; the field in the parent which is to be used for</span>",
    "hierarchy": [
    ],
    "pageId": 380
  },
  {
    "content": "Ê   <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"e2\"</span> <span class=\"fc2\">dataSource</span>=<span class=\"fc3\">\"a2\"</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"XPathEntityProcessor\"</span>\nÊ           <span class=\"fc2\">dataField</span>=<span class=\"fc3\">\"e1.fieldToUseForXPath\"<span class=\"fc0\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 380
  },
  {
    "content": "Ê     <span class=\"fc4\"><!-- XPath configuration follows --></span>\nÊ     ...\nÊ   <span class=\"fc0\"></entity></span>\nÊ <span class=\"fc0\"></entity></span>",
    "hierarchy": [
    ],
    "pageId": 380
  },
  {
    "content": "The <span class=\"ff1 fs1\">FieldReaderDataSource</span> can take an <span class=\"ff1 fs1\">encoding</span> parameter, which will default to \"UTF-8\" if not specified.\nIt must be specified as language-country. For example, <span class=\"ff1 fs1\">en-US</span>.",
    "hierarchy": [
    ],
    "pageId": 380
  },
  {
    "content": "This can be used like a <span class=\"fc6\">URLDataSource</span>, but is used to fetch content from files on disk. The only difference\nfrom <span class=\"ff1 fs1\">URLDataSource</span>, when accessing disk files, is how a pathname is specified.",
    "hierarchy": [
      "FileDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "This data source accepts these optional attributes.",
    "hierarchy": [
      "FileDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "basePath\nThe base path relative to which the value is evaluated if it is not absolute.",
    "hierarchy": [
      "FileDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "encoding\nDefines the character encoding to use. If not defined, UTF-8 is used.",
    "hierarchy": [
      "FileDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "This is the default datasource. It's used with the <span class=\"fc6\">SqlEntityProcessor</span>. See the example in the\nFieldReaderDataSource<span class=\"fc1\"> section for details on configuration. <span class=\"ff1 fs1\">JdbcDatasource</span> supports at least the following</span>\nattributes:",
    "hierarchy": [
      "JdbcDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "driver, url, user, password, encryptKeyFile\nUsual JDBC connection properties.",
    "hierarchy": [
      "JdbcDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "batchSize\nPassed to <span class=\"ff1 fs1\">Statement#setFetchSize</span>, default value 500.",
    "hierarchy": [
      "JdbcDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "For MySQL driver, which doesn't honor fetchSize and pulls whole resultSet, which often lead to\nOutOfMemoryError.",
    "hierarchy": [
      "JdbcDataSource"
    ],
    "pageId": 380
  },
  {
    "content": "In this case, set <span class=\"ff2 fs1\">batchSize=-1</span> that pass setFetchSize(Integer.MIN_VALUE), and switch result set to pull\nrow by row",
    "hierarchy": [
    ],
    "pageId": 381
  },
  {
    "content": "All of them substitute properties via <span class=\"ff2 fs1\">${placeholders}</span>.",
    "hierarchy": [
    ],
    "pageId": 381
  },
  {
    "content": "This data source is often used with <span class=\"link\">XPathEntityProcessor</span> to fetch content from an underlying <span class=\"ff2 fs1\">file://</span> or\nhttp://<span class=\"ff1 fs0\"> location. Here's an example:</span>",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "Ê           <span class=\"fc4\">type</span>=<span class=\"fc5\">\"URLDataSource\"</span>\nÊ           <span class=\"fc4\">baseUrl</span>=<span class=\"fc5\">\"http://host:port/\"</span>\nÊ           <span class=\"fc4\">encoding</span>=<span class=\"fc5\">\"UTF-8\"</span>\nÊ           <span class=\"fc4\">connectionTimeout</span>=<span class=\"fc5\">\"5000\"</span>\nÊ           <span class=\"fc4\">readTimeout</span>=<span class=\"fc5\">\"10000\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "The URLDataSource type accepts these optional parameters:",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "baseURL\nSpecifies a new baseURL for pathnames. You can use this to specify host/port changes between\nDev/QA/Prod environments. Using this attribute isolates the changes to be made to the <span class=\"ff2 fs1\">solrconfig.xml</span>",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "connectionTimeout\nSpecifies the length of time in milliseconds after which the connection should time out. The default value\nis 5000ms.",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "encoding\nBy default the encoding in the response header is used. You can use this property to override the default\nencoding.",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "readTimeout\nSpecifies the length of time in milliseconds after which a read operation should time out. The default\nvalue is 10000ms.",
    "hierarchy": [
      "URLDataSource"
    ],
    "pageId": 381
  },
  {
    "content": "Entity processors extract data, transform it, and add it to a Solr index. Examples of entities include views or\ntables in a data store.",
    "hierarchy": [
      "Entity Processors"
    ],
    "pageId": 381
  },
  {
    "content": "Each processor has its own set of attributes, described in its own section below. In addition, there are\nseveral attributes common to all entities which may be specified:",
    "hierarchy": [
      "Entity Processors"
    ],
    "pageId": 381
  },
  {
    "content": "dataSource\nThe name of a data source. If there are multiple data sources defined, use this attribute with the name of\nthe data source for this entity.",
    "hierarchy": [
      "Entity Processors"
    ],
    "pageId": 381
  },
  {
    "content": "name\nRequired. The unique name used to identify an entity.",
    "hierarchy": [
      "Entity Processors"
    ],
    "pageId": 381
  },
  {
    "content": "pk\nThe primary key for the entity. It is optional, and required only when using delta-imports. It has no\nrelation to the uniqueKey defined in <span class=\"code\">schema.xml</span> but they can both be the same.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "This attribute is mandatory if you do delta-imports and then refer to the column name in\n${dataimporter.delta.<column-name>}<span class=\"ff2 fs0\"> which is used as the primary key.</span>",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "processor\nDefault is <span class=\"link\">SqlEntityProcessor</span>. Required only if the datasource is not RDBMS.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "onError\nDefines what to do if an error is encountered.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "Permissible values are:",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "abort\nStops the import.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "skip\nSkips the current document.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "continue\nIgnores the error and processing continues.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "preImportDeleteQuery\nBefore a <span class=\"code\">full-import</span> command, use this query this to cleanup the index instead of using <span class=\"code\">*:*</span>. This is\nhonored only on an entity that is an immediate sub-child of <span class=\"code\"><document></span>.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "postImportDeleteQuery\nSimilar to <span class=\"code\">preImportDeleteQuery</span>, but it executes after the import has completed.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "rootEntity\nBy default the entities immediately under <span class=\"code\"><document></span> are root entities. If this attribute is set to false, the\nentity directly falling under that entity will be treated as the root entity (and so on). For every row\nreturned by the root entity, a document is created in Solr.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "transformer\nOptional. One or more transformers to be applied on this entity.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "cacheImpl\nOptional. A class (which must implement <span class=\"code\">DIHCache</span>) to use for caching this entity when doing lookups\nfrom an entity which wraps it. Provided implementation is <span class=\"code\">SortedMapBackedCache</span>.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "cacheKey\nThe name of a property of this entity to use as a cache key if <span class=\"code\">cacheImpl</span> is specified.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "cacheLookup\nAn entity + property name that will be used to lookup cached instances of this entity if <span class=\"code\">cacheImpl</span> is\nspecified.",
    "hierarchy": [
    ],
    "pageId": 382
  },
  {
    "content": "where\nAn alternative way to specify <span class=\"code\">cacheKey</span> and <span class=\"code\">cacheLookup</span> concatenated with '='.",
    "hierarchy": [
    ],
    "pageId": 383
  },
  {
    "content": "For example, <span class=\"code\">where=\"CODE=People.COUNTRY_CODE\"</span> is equivalent to <span class=\"code\">cacheKey=\"CODE\"</span>\ncacheLookup=\"People.COUNTRY_CODE\"",
    "hierarchy": [
    ],
    "pageId": 383
  },
  {
    "content": "child=\"true\"\nEnables indexing document blocks aka <span class=\"link\">Nested Child Documents</span> for searching with <span class=\"link\">Block Join Query</span>\nParsers<span class=\"fc0\">. It can be only specified on the <span class=\"code\"><entity></span> element under another root entity. It switches from</span>\ndefault behavior (merging field values) to nesting documents as children documents.",
    "hierarchy": [
    ],
    "pageId": 383
  },
  {
    "content": "Note: parent <span class=\"code\"><entity></span> should add a field which is used as a parent filter in query time.",
    "hierarchy": [
    ],
    "pageId": 383
  },
  {
    "content": "join=\"zipper\"\nEnables merge join, aka \"zipper\" algorithm, for joining parent and child entities without cache. It should\nbe specified at child (nested) <span class=\"code\"><entity></span>. It implies that parent and child queries return results ordered by\nkeys, otherwise it throws an exception. Keys should be specified either with <span class=\"code\">where</span> attribute or with\ncacheKey<span class=\"ff2 fs0\"> and </span>cacheLookup<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 383
  },
  {
    "content": "Caching of entities in DIH is provided to avoid repeated lookups for same entities again and again. The\ndefault <span class=\"code\">SortedMapBackedCache</span> is a <span class=\"code\">HashMap</span> where a key is a field in the row and the value is a bunch of rows\nfor that same key.",
    "hierarchy": [
      "Entity Caching"
    ],
    "pageId": 383
  },
  {
    "content": "In the example below, each <span class=\"code\">manufacturer</span> entity is cached using the <span class=\"code\">id</span> property as a cache key. Cache\nlookups will be performed for each <span class=\"code\">product</span> entity based on the product's <span class=\"code\">manu</span> property. When the cache\nhas no data for a particular key, the query is run and the cache is populated",
    "hierarchy": [
      "Entity Caching"
    ],
    "pageId": 383
  },
  {
    "content": "Ê <span class=\"fc3\"><entity</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"manufacturer\"</span> <span class=\"fc4\">query</span>=<span class=\"fc5\">\"select id, name from manufacturer\"</span>\nÊ         <span class=\"fc4\">cacheKey</span>=<span class=\"fc5\">\"id\"</span> <span class=\"fc4\">cacheLookup</span>=<span class=\"fc5\">\"product.manu\"</span> <span class=\"fc4\">cacheImpl</span>=<span class=\"fc5\">\"SortedMapBackedCache\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Entity Caching"
    ],
    "pageId": 383
  },
  {
    "content": "The SqlEntityProcessor is the default processor. The associated <span class=\"link\">JdbcDataSource</span> should be a JDBC URL.",
    "hierarchy": [
      "The SQL Entity Processor"
    ],
    "pageId": 383
  },
  {
    "content": "The entity attributes specific to this processor are shown in the table below. These are in addition to the\nattributes common to all entity processors described above.",
    "hierarchy": [
      "The SQL Entity Processor"
    ],
    "pageId": 383
  },
  {
    "content": "query\nRequired. The SQL query used to select rows.",
    "hierarchy": [
      "The SQL Entity Processor"
    ],
    "pageId": 383
  },
  {
    "content": "deltaQuery\nSQL query used if the operation is delta-import. This query selects the primary keys of the rows which will\nbe parts of the delta-update. The pks will be available to the deltaImportQuery through the variable\n${dataimporter.delta.<column-name>}<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "The SQL Entity Processor"
    ],
    "pageId": 383
  },
  {
    "content": "parentDeltaQuery\nSQL query used if the operation is <span class=\"code\">delta-import</span>.",
    "hierarchy": [
    ],
    "pageId": 384
  },
  {
    "content": "deletedPkQuery\nSQL query used if the operation is <span class=\"code\">delta-import</span>.",
    "hierarchy": [
    ],
    "pageId": 384
  },
  {
    "content": "deltaImportQuery\nSQL query used if the operation is <span class=\"code\">delta-import</span>. If this is not present, DIH tries to construct the import\nquery by (after identifying the delta) modifying the 'query' (this is error prone).",
    "hierarchy": [
    ],
    "pageId": 384
  },
  {
    "content": "There is a namespace <span class=\"code\">${dataimporter.delta.<column-name>}</span> which can be used in this query. For\nexample, <span class=\"code\">select * from tbl where id=${dataimporter.delta.id}</span>.",
    "hierarchy": [
    ],
    "pageId": 384
  },
  {
    "content": "This processor is used when indexing XML formatted data. The data source is typically <span class=\"link\">URLDataSource</span> or\nFileDataSource<span class=\"fc0\">. XPath can also be used with the </span>FileListEntityProcessor<span class=\"fc0\"> described below, to generate a</span>\ndocument from each file.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "The entity attributes unique to this processor are shown below. These are in addition to the attributes\ncommon to all entity processors described above.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "Processor\nRequired. Must be set to <span class=\"code\">XpathEntityProcessor</span>.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "url\nRequired. The HTTP URL or file location.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "stream\nOptional: Set to true for a large file or download.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "forEach\nRequired unless you define <span class=\"code\">useSolrAddSchema</span>. The XPath expression which demarcates each record. This\nwill be used to set up the processing loop.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "xsl\nOptional: Its value (a URL or filesystem path) is the name of a resource used as a preprocessor for\napplying the XSL transformation.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "useSolrAddSchema\nSet this to true if the content is in the form of the standard Solr update XML schema.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "Each <span class=\"code\"><field></span> element in the entity can have the following attributes as well as the default ones.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "xpath\nRequired. The XPath expression which will extract the content from the record for this field. Only a subset\nof XPath syntax is supported.",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "commonField\nOptional. If true, then when this field is encountered in a record it will be copied to future records when",
    "hierarchy": [
      "The XPathEntityProcessor"
    ],
    "pageId": 384
  },
  {
    "content": "creating a Solr document.",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "flatten\nOptional. If set to true, then any children text nodes are collected to form the value of a field.",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "The default value is false, meaning that if there are any sub-elements of the node\npointed to by the XPath expression, they will be quietly omitted.",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Here is an example from the <span class=\"ff4 fs2\">atom</span> collection in the <span class=\"ff4 fs2\">dih</span> example (data-config file found at <span class=\"ff4 fs2\">example/example-</span>\nDIH/solr/atom/conf/atom-data-config.xml<span class=\"ff1 fs0\">):</span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê <span class=\"fc2\"><dataSource</span> <span class=\"fc3\">type</span>=<span class=\"fc4\">\"URLDataSource\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"><document></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê   <span class=\"fc2\"><entity</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"stackoverflow\"</span>\nÊ           <span class=\"fc3\">url</span>=<span class=\"fc4\">\"https://stackoverflow.com/feeds/tag/solr\"</span>\nÊ           <span class=\"fc3\">processor</span>=<span class=\"fc4\">\"XPathEntityProcessor\"</span>\nÊ           <span class=\"fc3\">forEach</span>=<span class=\"fc4\">\"/feed|/feed/entry\"</span>\nÊ           <span class=\"fc3\">transformer</span>=<span class=\"fc4\">\"HTMLStripTransformer,RegexTransformer\"<span class=\"fc2\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc5\"><!-- Pick this value up from the feed level and apply to all documents --></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"lastchecked_dt\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/updated\"</span> <span class=\"fc3\">commonField</span>=<span class=\"fc4\">\"true\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc5\"><!-- Keep only the final numeric part of the URL --></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"id\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/id\"</span> <span class=\"fc3\">regex</span>=<span class=\"fc4\">\".*/\"</span> <span class=\"fc3\">replaceWith</span>=<span class=\"fc4\">\"\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"title\"</span>    <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/title\"<span class=\"fc2\">/></span></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"author\"</span>   <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/author/name\"<span class=\"fc2\">/></span></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"category\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/category/@term\"<span class=\"fc2\">/></span></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"link\"</span>     <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/link[@rel='alternate']/@href\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc5\"><!-- Use transformers to convert HTML into plain text.</span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"summary\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/summary\"</span> <span class=\"fc3\">stripHTML</span>=<span class=\"fc4\">\"true\"</span> <span class=\"fc3\">regex</span>=<span class=\"fc4\">\"( |\\n)+\"</span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc5\"><!-- Ignore namespaces when matching XPath --></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"rank\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/rank\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"published_dt\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/published\"<span class=\"fc2\">/></span></span>\nÊ     <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"updated_dt\"</span> <span class=\"fc3\">xpath</span>=<span class=\"fc4\">\"/feed/entry/updated\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"></entity></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "Ê <span class=\"fc2\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 385
  },
  {
    "content": "The MailEntityProcessor uses the Java Mail API to index email messages using the IMAP protocol.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "The MailEntityProcessor works by connecting to a specified mailbox using a username and password,\nfetching the email headers for each message, and then fetching the full email contents to construct a\ndocument (one document for each mail message).",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "The entity attributes unique to the MailEntityProcessor are shown below. These are in addition to the\nattributes common to all entity processors described above.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "processor\nRequired. Must be set to <span class=\"code\">MailEntityProcessor</span>.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "user\nRequired. Username for authenticating to the IMAP server; this is typically the email address of the\nmailbox owner.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "password\nRequired. Password for authenticating to the IMAP server.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "host\nRequired. The IMAP server to connect to.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "protocol\nRequired. The IMAP protocol to use, valid values are: imap, imaps, gimap, and gimaps.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "fetchMailsSince\nOptional. Date/time used to set a filter to import messages that occur after the specified date; expected\nformat is: <span class=\"code\">yyyy-MM-dd HH:mm:ss</span>.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "folders\nRequired. Comma-delimited list of folder names to pull messages from, such as \"inbox\".",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "recurse\nOptional. Default is true. Flag to indicate if the processor should recurse all child folders when looking for\nmessages to import.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "include\nOptional. Comma-delimited list of folder patterns to include when processing folders (can be a literal\nvalue or regular expression).",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "exclude\nOptional. Comma-delimited list of folder patterns to exclude when processing folders (can be a literal\nvalue or regular expression). Excluded folder patterns take precedence over include folder patterns.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "processAttachement or processAttachments\nOptional. Default is true. Use Tika to process message attachments.",
    "hierarchy": [
      "The MailEntityProcessor"
    ],
    "pageId": 386
  },
  {
    "content": "Optional. Default is true. Include the message body when constructing Solr documents for indexing.",
    "hierarchy": [
    ],
    "pageId": 387
  },
  {
    "content": "Here is an example from the <span class=\"ff2 fs1\">mail</span> collection of the <span class=\"ff2 fs1\">dih</span> example (data-config file found at <span class=\"ff2 fs1\">example/example-</span>\nDIH/mail/conf/mail-data-config.xml<span class=\"ff1 fs0\">):</span>",
    "hierarchy": [
    ],
    "pageId": 387
  },
  {
    "content": "Ê <span class=\"fc1\"><document></span>\nÊ     <span class=\"fc1\"><entity</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"MailEntityProcessor\"</span>\nÊ             <span class=\"fc2\">user</span>=<span class=\"fc3\">\"email@gmail.com\"</span>\nÊ             <span class=\"fc2\">password</span>=<span class=\"fc3\">\"password\"</span>\nÊ             <span class=\"fc2\">host</span>=<span class=\"fc3\">\"imap.gmail.com\"</span>\nÊ             <span class=\"fc2\">protocol</span>=<span class=\"fc3\">\"imaps\"</span>\nÊ             <span class=\"fc2\">fetchMailsSince</span>=<span class=\"fc3\">\"2014-06-30 00:00:00\"</span>\nÊ             <span class=\"fc2\">batchSize</span>=<span class=\"fc3\">\"20\"</span>\nÊ             <span class=\"fc2\">folders</span>=<span class=\"fc3\">\"inbox\"</span>\nÊ             <span class=\"fc2\">processAttachement</span>=<span class=\"fc3\">\"false\"</span>\nÊ             <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mail_entity\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 387
  },
  {
    "content": "After running a full import, the MailEntityProcessor keeps track of the timestamp of the previous import so\nthat subsequent imports can use the fetchMailsSince filter to only pull new messages from the mail server.\nThis occurs automatically using the DataImportHandler <span class=\"ff2 fs1\">dataimport.properties</span> file (stored in <span class=\"ff2 fs1\">conf</span>).",
    "hierarchy": [
      "Importing New Emails Only"
    ],
    "pageId": 387
  },
  {
    "content": "For instance, if you set <span class=\"ff2 fs1\">fetchMailsSince=\"2014-08-22 00:00:00\"</span> in your <span class=\"ff2 fs1\">mail-data-config.xml</span>, then all\nmail messages that occur after this date will be imported on the first run of the importer. Subsequent\nimports will use the date of the previous import as the <span class=\"ff2 fs1\">fetchMailsSince</span> filter, so that only new emails since\nthe last import are indexed each time.",
    "hierarchy": [
      "Importing New Emails Only"
    ],
    "pageId": 387
  },
  {
    "content": "When connecting to a GMail account, you can improve the efficiency of the MailEntityProcessor by setting\nthe protocol to <span class=\"code\">gimap</span> or <span class=\"code\">gimaps</span>.",
    "hierarchy": [
      "GMail Extensions"
    ],
    "pageId": 387
  },
  {
    "content": "This allows the processor to send the <span class=\"ff2 fs1\">fetchMailsSince</span> filter to the GMail server to have the date filter\napplied on the server, which means the processor only receives new messages from the server. However,\nGMail only supports date granularity, so the server-side filter may return previously seen messages if run\nmore than once a day.",
    "hierarchy": [
      "GMail Extensions"
    ],
    "pageId": 387
  },
  {
    "content": "The TikaEntityProcessor uses Apache Tika to process incoming documents. This is similar to <span class=\"link\">Uploading Data</span>\nwith Solr Cell using Apache Tika<span class=\"fc0\">, but using DataImportHandler options instead.</span>",
    "hierarchy": [
      "The TikaEntityProcessor"
    ],
    "pageId": 387
  },
  {
    "content": "The parameters for this processor are described in the table below. These are in addition to the attributes\ncommon to all entity processors described above.",
    "hierarchy": [
      "The TikaEntityProcessor"
    ],
    "pageId": 387
  },
  {
    "content": "dataSource\nThis parameter defines the data source and an optional name which can be referred to in later parts of",
    "hierarchy": [
      "The TikaEntityProcessor"
    ],
    "pageId": 387
  },
  {
    "content": "the configuration if needed. This is the same <span class=\"ff2 fs1\">dataSource</span> explained in the description of general entity\nprocessor attributes above.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "The available data source types for this processor are:",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "BinURLDataSource: used for HTTP resources, but can also be used for files.\n•BinContentStreamDataSource: used for uploading content as a stream.\n•BinFileDataSource: used for content on the local filesystem.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "url\nRequired. The path to the source file(s), as a file path or a traditional internet URL.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "htmlMapper\nOptional. Allows control of how Tika parses HTML. If this parameter is defined, it must be either <span class=\"code\">default</span>\nor <span class=\"code\">identity</span>; if it is absent, \"default\" is assumed.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "The \"default\" mapper strips much of the HTML from documents while the \"identity\" mapper passes all\nHTML as-is with no modifications.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "format\nThe output format. The options are <span class=\"code\">text</span>, <span class=\"code\">xml</span>, <span class=\"code\">html</span> or <span class=\"code\">none</span>. The default is \"text\" if not defined. The\nformat \"none\" can be used if metadata only should be indexed and not the body of the documents.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "parser\nOptional. The default parser is <span class=\"ff2 fs1\">org.apache.tika.parser.AutoDetectParser</span>. If a custom or other parser\nshould be used, it should be entered as a fully-qualified name of the class and path.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "fields\nThe list of fields from the input documents and how they should be mapped to Solr fields. If the attribute\nmeta<span class=\"ff1 fs0\"> is defined as \"true\", the field will be obtained from the metadata of the document and not parsed</span>\nfrom the body of the main text.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "extractEmbedded\nInstructs the TikaEntityProcessor to extract embedded documents or attachments when <span class=\"code\">true</span>. If false,\nembedded documents and attachments will be ignored.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "onError\nBy default, the TikaEntityProcessor will stop processing documents if it finds one that generates an error.\nIf you define <span class=\"ff2 fs1\">onError</span> to \"skip\", the TikaEntityProcessor will instead skip documents that fail processing\nand log a message that the document was skipped.",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "Here is an example from the <span class=\"ff2 fs1\">tika</span> collection of the <span class=\"ff2 fs1\">dih</span> example (data-config file found in <span class=\"ff2 fs1\">example/example-</span>\nDIH/tika/conf/tika-data-config.xml<span class=\"ff1 fs0\">):</span>",
    "hierarchy": [
    ],
    "pageId": 388
  },
  {
    "content": "Ê <span class=\"fc0\"><dataSource</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"BinFileDataSource\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><document></span>\nÊ   <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"file\"</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"FileListEntityProcessor\"</span> <span class=\"fc2\">dataSource</span>=<span class=\"fc3\">\"null\"</span>\nÊ           <span class=\"fc2\">baseDir</span>=<span class=\"fc3\">\"${solr.install.dir}/example/exampledocs\"</span> <span class=\"fc2\">fileName</span>=<span class=\"fc3\">\".*pdf\"</span>\nÊ           <span class=\"fc2\">rootEntity</span>=<span class=\"fc3\">\"false\"<span class=\"fc0\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "Ê     <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"file\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "Ê     <span class=\"fc0\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pdf\"</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"TikaEntityProcessor\"</span>\nÊ             <span class=\"fc2\">url</span>=<span class=\"fc3\">\"${file.fileAbsolutePath}\"</span> <span class=\"fc2\">format</span>=<span class=\"fc3\">\"text\"<span class=\"fc0\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "Ê       <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"Author\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"author\"</span> <span class=\"fc2\">meta</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>\nÊ       <span class=\"fc4\"><!-- in the original PDF, the Author meta-field name is upper-cased,</span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "Ê       <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"title\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"title\"</span> <span class=\"fc2\">meta</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>\nÊ       <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"dc:format\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"format\"</span> <span class=\"fc2\">meta</span>=<span class=\"fc3\">\"true\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "Ê       <span class=\"fc0\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"text\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"text\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "Ê     <span class=\"fc0\"></entity></span>\nÊ   <span class=\"fc0\"></entity></span>\nÊ <span class=\"fc0\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 389
  },
  {
    "content": "This processor is basically a wrapper, and is designed to generate a set of files satisfying conditions specified\nin the attributes which can then be passed to another processor, such as the <span class=\"fc6\">XPathEntityProcessor</span>.",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "The entity information for this processor would be nested within the FileListEntity entry. It generates five\nimplicit fields: <span class=\"ff1 fs2\">fileAbsolutePath</span>, <span class=\"ff1 fs2\">fileDir</span>, <span class=\"ff1 fs2\">fileSize</span>, <span class=\"ff1 fs2\">fileLastModified</span>, and <span class=\"ff1 fs2\">file</span>, which can be used in the\nnested processor. This processor does not use a data source.",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "The attributes specific to this processor are described in the table below:",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "fileName\nRequired. A regular expression pattern to identify files to be included.",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "basedir\nRequired. The base directory (absolute path).",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "recursive\nWhether to search directories recursively. Default is 'false'.",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "excludes\nA regular expression pattern to identify files which will be excluded.",
    "hierarchy": [
      "The FileListEntityProcessor"
    ],
    "pageId": 389
  },
  {
    "content": "newerThan\nA date in the format <span class=\"code\">yyyy-MM-ddHH:mm:ss</span> or a date math expression (<span class=\"code\">NOW - 2YEARS</span>).",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "olderThan\nA date, using the same formats as newerThan.",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "rootEntity\nThis should be set to false. This ensures that each row (filepath) emitted by this processor is considered\nto be a document.",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "dataSource\nMust be set to null.",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "The example below shows the combination of the FileListEntityProcessor with another processor which will\ngenerate a set of fields from each file found.",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "Ê <span class=\"fc1\"><dataSource</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"FileDataSource\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><document></span>\nÊ   <span class=\"fc4\"><!-- this outer processor generates a list of files satisfying the conditions</span>",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "Ê   <span class=\"fc1\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"f\"</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"FileListEntityProcessor\"</span>\nÊ           <span class=\"fc2\">fileName</span>=<span class=\"fc3\">\".*xml\"</span>\nÊ           <span class=\"fc2\">newerThan</span>=<span class=\"fc3\">\"'NOW-30DAYS'\"</span>\nÊ           <span class=\"fc2\">recursive</span>=<span class=\"fc3\">\"true\"</span>\nÊ           <span class=\"fc2\">rootEntity</span>=<span class=\"fc3\">\"false\"</span>\nÊ           <span class=\"fc2\">dataSource</span>=<span class=\"fc3\">\"null\"</span>\nÊ           <span class=\"fc2\">baseDir</span>=<span class=\"fc3\">\"/my/document/directory\"<span class=\"fc1\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "Ê     <span class=\"fc4\"><!-- this processor extracts content using XPath from each file found --></span>",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "Ê     <span class=\"fc1\"><entity</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"nested\"</span> <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"XPathEntityProcessor\"</span>\nÊ             <span class=\"fc2\">forEach</span>=<span class=\"fc3\">\"/rootelement\"</span> <span class=\"fc2\">url</span>=<span class=\"fc3\">\"${f.fileAbsolutePath}\"</span> <span class=\"fc1\">></span>\nÊ       <span class=\"fc1\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"name\"</span> <span class=\"fc2\">xpath</span>=<span class=\"fc3\">\"/rootelement/name\"<span class=\"fc1\">/></span></span>\nÊ       <span class=\"fc1\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"number\"</span> <span class=\"fc2\">xpath</span>=<span class=\"fc3\">\"/rootelement/number\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"></entity></span>\nÊ   <span class=\"fc1\"></entity></span>\nÊ <span class=\"fc1\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 390
  },
  {
    "content": "This EntityProcessor reads all content from the data source on a line by line basis and returns a field called\nrawLine<span class=\"ff2 fs0\"> for each line read. The content is not parsed in any way; however, you may add transformers to</span>\nmanipulate the data within the <span class=\"code\">rawLine</span> field, or to create other additional fields.",
    "hierarchy": [
      "LineEntityProcessor"
    ],
    "pageId": 390
  },
  {
    "content": "The lines read can be filtered by two regular expressions specified with the <span class=\"code\">acceptLineRegex</span> and\nomitLineRegex<span class=\"ff2 fs0\"> attributes.</span>",
    "hierarchy": [
      "LineEntityProcessor"
    ],
    "pageId": 390
  },
  {
    "content": "The LineEntityProcessor has the following attributes:",
    "hierarchy": [
      "LineEntityProcessor"
    ],
    "pageId": 390
  },
  {
    "content": "url\nA required attribute that specifies the location of the input file in a way that is compatible with the\nconfigured data source. If this value is relative and you are using FileDataSource or URLDataSource, it\nassumed to be relative to baseLoc.",
    "hierarchy": [
    ],
    "pageId": 391
  },
  {
    "content": "acceptLineRegex\nAn optional attribute that if present discards any line which does not match the regular expression.",
    "hierarchy": [
    ],
    "pageId": 391
  },
  {
    "content": "omitLineRegex\nAn optional attribute that is applied after any <span class=\"code\">acceptLineRegex</span> and that discards any line which matches\nthis regular expression.",
    "hierarchy": [
    ],
    "pageId": 391
  },
  {
    "content": "For example:",
    "hierarchy": [
    ],
    "pageId": 391
  },
  {
    "content": "Ê       <span class=\"fc2\">processor</span>=<span class=\"fc3\">\"LineEntityProcessor\"</span>\nÊ       <span class=\"fc2\">acceptLineRegex</span>=<span class=\"fc3\">\"^.*\\.xml$\"</span>\nÊ       <span class=\"fc2\">omitLineRegex</span>=<span class=\"fc3\">\"/obsolete\"</span>\nÊ       <span class=\"fc2\">url</span>=<span class=\"fc3\">\"file:///Volumes/ts/files.lis\"</span>\nÊ       <span class=\"fc2\">rootEntity</span>=<span class=\"fc3\">\"false\"</span>\nÊ       <span class=\"fc2\">dataSource</span>=<span class=\"fc3\">\"myURIreader1\"</span>\nÊ       <span class=\"fc2\">transformer</span>=<span class=\"fc3\">\"RegexTransformer,DateFormatTransformer\"<span class=\"fc1\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 391
  },
  {
    "content": "While there are use cases where you might need to create a Solr document for each line read from a file, it is\nexpected that in most cases that the lines read by this processor will consist of a pathname, which in turn\nwill be consumed by another entity processor, such as the XPathEntityProcessor.",
    "hierarchy": [
    ],
    "pageId": 391
  },
  {
    "content": "This EntityProcessor reads all content from the data source into an single implicit field called <span class=\"code\">plainText</span>. The\ncontent is not parsed in any way, however you may add <span class=\"link\">transformers</span> to manipulate the data within the\nplainText<span class=\"ff2 fs0\"> as needed, or to create other additional fields.</span>",
    "hierarchy": [
      "PlainTextEntityProcessor"
    ],
    "pageId": 391
  },
  {
    "content": "For example:",
    "hierarchy": [
      "PlainTextEntityProcessor"
    ],
    "pageId": 391
  },
  {
    "content": "Ê <span class=\"fc6\"><!-- copies the text to a field called 'text' in Solr--></span>\nÊ <span class=\"fc1\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"plainText\"</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"text\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "PlainTextEntityProcessor"
    ],
    "pageId": 391
  },
  {
    "content": "Ensure that the dataSource is of type <span class=\"code\">DataSource<Reader></span> (<span class=\"code\">FileDataSource</span>, <span class=\"code\">URLDataSource</span>).",
    "hierarchy": [
      "PlainTextEntityProcessor"
    ],
    "pageId": 391
  },
  {
    "content": "This EntityProcessor imports data from different Solr instances and cores. The data is retrieved based on a\nspecified filter query. This EntityProcessor is useful in cases you want to copy your Solr index and want to\nmodify the data in the target index.",
    "hierarchy": [
      "SolrEntityProcessor"
    ],
    "pageId": 391
  },
  {
    "content": "The SolrEntityProcessor can only copy fields that are stored in the source index.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "The SolrEntityProcessor supports the following parameters:",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "url\nRequired. The URL of the source Solr instance and/or core.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "query\nRequired. The main query to execute on the source index.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "fq\nAny filter queries to execute on the source index. If more than one filter query is defined, they must be\nseparated by a comma.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "rows\nThe number of rows to return for each iteration. The default is 50 rows.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "fl\nA comma-separated list of fields to fetch from the source index. Note, these fields must be stored in the\nsource Solr instance.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "qt\nThe search handler to use, if not the default.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "wt\nThe response format to use, either <span class=\"ff2\">javabin</span> or <span class=\"ff2\">xml</span>.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "timeout\nThe query timeout in seconds. The default is 5 minutes (300 seconds).",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "cursorMark=\"true\"\nUse this to enable cursor for efficient result set scrolling",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "sort=\"id asc\"\nThis should be used to specify a sort parameter referencing the uniqueKey field of the source Solr\ninstance. See <span class=\"link\">Pagination of Results</span> for details.",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "Here is a simple example of a SolrEntityProcessor:",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "Ê <span class=\"fc2\"><document></span>\nÊ   <span class=\"fc2\"><entity</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"sep\"</span> <span class=\"fc3\">processor</span>=<span class=\"fc4\">\"SolrEntityProcessor\"</span>\nÊ           <span class=\"fc3\">url</span>=<span class=\"fc4\">\"http://127.0.0.1:8983/solr/db \"</span>\nÊ           <span class=\"fc3\">query</span>=<span class=\"fc4\">\"*:*\"</span>\nÊ           <span class=\"fc3\">fl</span>=<span class=\"fc4\">\"*,orig_version_l:_version_,ignored_price_c:price_c\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 392
  },
  {
    "content": "Transformers manipulate the fields in a document returned by an entity. A transformer can create new fields\nor modify existing ones. You must tell the entity which transformers your import operation will be using, by\nadding an attribute containing a comma separated list to the <span class=\"code\"><entity></span> element.",
    "hierarchy": [
      "Transformers"
    ],
    "pageId": 393
  },
  {
    "content": "Specific transformation rules are then added to the attributes of a <span class=\"code\"><field></span> element, as shown in the\nexamples below. The transformers are applied in the order in which they are specified in the transformer\nattribute.",
    "hierarchy": [
      "Transformers"
    ],
    "pageId": 393
  },
  {
    "content": "The DataImportHandler contains several built-in transformers. You can also write your own custom\ntransformers, as described in the <span class=\"link\">DIHCustomTransformer</span> section of the Solr Wiki. The ScriptTransformer\n(described below) offers an alternative method for writing your own transformers.",
    "hierarchy": [
      "Transformers"
    ],
    "pageId": 393
  },
  {
    "content": "You can use the ClobTransformer to create a string out of a CLOB in a database. A <span class=\"link\">CLOB</span> is a character large\nobject: a collection of character data typically stored in a separate location that is referenced in the\ndatabase.",
    "hierarchy": [
      "Transformers",
      "ClobTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "The ClobTransformer accepts these attributes:",
    "hierarchy": [
      "Transformers",
      "ClobTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "clob\nBoolean value to signal if ClobTransformer should process this field or not. If this attribute is omitted,\nthen the corresponding field is not transformed.",
    "hierarchy": [
      "Transformers",
      "ClobTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "sourceColName\nThe source column to be used as input. If this is absent source and target are same",
    "hierarchy": [
      "Transformers",
      "ClobTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "Here's an example of invoking the ClobTransformer.",
    "hierarchy": [
      "Transformers",
      "ClobTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "Ê <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"hugeTextField\"</span> <span class=\"fc3\">clob</span>=<span class=\"fc4\">\"true\"</span> <span class=\"fc2\">/></span>\nÊ ...",
    "hierarchy": [
      "Transformers",
      "ClobTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "This transformer converts dates from one format to another. This would be useful, for example, in a\nsituation where you wanted to convert a field with a fully specified date/time into a less precise date format,\nfor use in faceting.",
    "hierarchy": [
      "Transformers",
      "The DateFormatTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "DateFormatTransformer applies only on the fields with an attribute <span class=\"code\">dateTimeFormat</span>. Other fields are not\nmodified.",
    "hierarchy": [
      "Transformers",
      "The DateFormatTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "This transformer recognizes the following attributes:",
    "hierarchy": [
      "Transformers",
      "The DateFormatTransformer"
    ],
    "pageId": 393
  },
  {
    "content": "dateTimeFormat\nThe format used for parsing this field. This must comply with the syntax of the <span class=\"link\">Java SimpleDateFormat</span>\nclass.",
    "hierarchy": [
    ],
    "pageId": 394
  },
  {
    "content": "sourceColName\nThe column on which the dateFormat is to be applied. If this is absent source and target are same.",
    "hierarchy": [
    ],
    "pageId": 394
  },
  {
    "content": "locale\nThe locale to use for date transformations. If not defined, the ROOT locale is used. It must be specified as\nlanguage-country (<span class=\"link\">BCP 47 language tag</span>). For example, <span class=\"code\">en-US</span>.",
    "hierarchy": [
    ],
    "pageId": 394
  },
  {
    "content": "Here is example code that returns the date rounded up to the month \"2007-JUL\":",
    "hierarchy": [
    ],
    "pageId": 394
  },
  {
    "content": "Ê ...\nÊ <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"date\"</span> <span class=\"fc3\">sourceColName</span>=<span class=\"fc4\">\"fulldate\"</span> <span class=\"fc3\">dateTimeFormat</span>=<span class=\"fc4\">\"yyyy-MMM\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 394
  },
  {
    "content": "You can use this transformer to strip HTML out of a field.",
    "hierarchy": [
      "The HTMLStripTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "There is one attribute for this transformer, <span class=\"code\">stripHTML</span>, which is a boolean value (true or false) to signal if the\nHTMLStripTransformer should process the field or not.",
    "hierarchy": [
      "The HTMLStripTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "For example:",
    "hierarchy": [
      "The HTMLStripTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "Ê <span class=\"fc2\"><field</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"htmlText\"</span> <span class=\"fc3\">stripHTML</span>=<span class=\"fc4\">\"true\"</span> <span class=\"fc2\">/></span>\nÊ ...",
    "hierarchy": [
      "The HTMLStripTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "You can use this transformer to log data to the console or log files. For example:",
    "hierarchy": [
      "The LogTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "Ê       <span class=\"fc3\">transformer</span>=<span class=\"fc4\">\"LogTransformer\"</span>\nÊ       <span class=\"fc3\">logTemplate</span>=<span class=\"fc4\">\"The name is ${e.name}\"</span> <span class=\"fc3\">logLevel</span>=<span class=\"fc4\">\"debug\"<span class=\"fc2\">></span></span>\nÊ ....",
    "hierarchy": [
      "The LogTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "Unlike other transformers, the LogTransformer does not apply to any field, so the attributes are applied on\nthe entity itself.",
    "hierarchy": [
      "The LogTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "Use this transformer to parse a number from a string, converting it into the specified format, and optionally",
    "hierarchy": [
      "The NumberFormatTransformer"
    ],
    "pageId": 394
  },
  {
    "content": "using a different locale.",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "NumberFormatTransformer will be applied only to fields with an attribute <span class=\"ff2 fs1\">formatStyle</span>.",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "This transformer recognizes the following attributes:",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "formatStyle\nThe format used for parsing this field. The value of the attribute must be one of <span class=\"ff2 fs1\">number</span>, <span class=\"ff2 fs1\">percent</span>,\ninteger<span class=\"ff1 fs0\">, or </span>currency<span class=\"ff1 fs0\">. This uses the semantics of the Java NumberFormat class.</span>",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "sourceColName\nThe column on which the NumberFormat is to be applied. This is attribute is absent. The source column\nand the target column are the same.",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "locale\nThe locale to be used for parsing the strings. The locale. If not defined, the ROOT locale is used. It must\nbe specified as language-country (<span class=\"link\">BCP 47 language tag</span>). For example, <span class=\"ff2 fs1\">en-US</span>.",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "For example:",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "Ê ...",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "Ê <span class=\"fc5\"><!-- treat this field as UK pounds --></span>",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "Ê <span class=\"fc2\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"price_uk\"</span> <span class=\"fc3\">column</span>=<span class=\"fc4\">\"price\"</span> <span class=\"fc3\">formatStyle</span>=<span class=\"fc4\">\"currency\"</span> <span class=\"fc3\">locale</span>=<span class=\"fc4\">\"en-UK\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 395
  },
  {
    "content": "The regex transformer helps in extracting or manipulating values from fields (from the source) using\nRegular Expressions. The actual class name is <span class=\"ff2 fs1\">org.apache.solr.handler.dataimport.RegexTransformer</span>.\nBut as it belongs to the default package the package-name can be omitted.",
    "hierarchy": [
      "The RegexTransformer"
    ],
    "pageId": 395
  },
  {
    "content": "The table below describes the attributes recognized by the regex transformer.",
    "hierarchy": [
      "The RegexTransformer"
    ],
    "pageId": 395
  },
  {
    "content": "regex\nThe regular expression that is used to match against the column or sourceColName's value(s). If\nreplaceWith is absent, each regex <span class=\"ff4\">group</span> is taken as a value and a list of values is returned.",
    "hierarchy": [
      "The RegexTransformer"
    ],
    "pageId": 395
  },
  {
    "content": "sourceColName\nThe column on which the regex is to be applied. If not present, then the source and target are identical.",
    "hierarchy": [
      "The RegexTransformer"
    ],
    "pageId": 395
  },
  {
    "content": "splitBy\nUsed to split a string. It returns a list of values. Note, this is a regular expression so it may need to be\nescaped (e.g., via back-slashes).",
    "hierarchy": [
      "The RegexTransformer"
    ],
    "pageId": 395
  },
  {
    "content": "groupNames\nA comma separated list of field column names, used where the regex contains groups and each group is\nto be saved to a different field. If some groups are not to be named leave a space between commas.",
    "hierarchy": [
      "The RegexTransformer"
    ],
    "pageId": 395
  },
  {
    "content": "replaceWith\nUsed along with regex. It is equivalent to the method <span class=\"code\">new</span>\nString(<sourceColVal>).replaceAll(<regex>, <replaceWith>)<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "Here is an example of configuring the regex transformer:",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "Ê <span class=\"fc1\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"firstName\"</span> <span class=\"fc2\">regex</span>=<span class=\"fc3\">\"Mr(\\w*)\\b.*\"</span> <span class=\"fc2\">sourceColName</span>=<span class=\"fc3\">\"full_name\"<span class=\"fc1\">/></span></span>\nÊ <span class=\"fc1\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"lastName\"</span> <span class=\"fc2\">regex</span>=<span class=\"fc3\">\"Mr.*?\\b(\\w*)\"</span> <span class=\"fc2\">sourceColName</span>=<span class=\"fc3\">\"full_name\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- another way of doing the same --></span>",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "Ê <span class=\"fc1\"><field</span> <span class=\"fc2\">column</span>=<span class=\"fc3\">\"fullName\"</span> <span class=\"fc2\">regex</span>=<span class=\"fc3\">\"Mr(\\w*)\\b(.*)\"</span> <span class=\"fc2\">groupNames</span>=<span class=\"fc3\">\"firstName,lastName\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "In this example, <span class=\"code\">regex</span> and <span class=\"code\">sourceColName</span> are custom attributes used by the transformer.\nThe transformer reads the field <span class=\"code\">full_name</span> from the result set and transforms it to two new target fields,\nfirstName<span class=\"ff2 fs0\"> and </span>lastName<span class=\"ff2 fs0\">. Even though the query returned only one column, </span>full_name<span class=\"ff2 fs0\">, in the result set,</span>\nthe Solr document gets two extra fields <span class=\"code\">firstName</span> and <span class=\"code\">lastName</span> which are \"derived\" fields. These new\nfields are only created if the regexp matches.\nThe <span class=\"code\">emailids</span> field in the table can be a comma-separated value. It ends up producing one or more\nemail IDs, and we expect the <span class=\"code\">mailId</span> to be a multivalued field in Solr.",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "Note that this transformer can be used to either split a string into tokens based on a splitBy pattern, or to\nperform a string substitution as per <span class=\"code\">replaceWith</span>, or it can assign groups within a pattern to a list of\ngroupNames<span class=\"ff2 fs0\">. It decides what it is to do based upon the above attributes </span>splitBy<span class=\"ff2 fs0\">, </span>replaceWith<span class=\"ff2 fs0\"> and</span>\ngroupNames<span class=\"ff2 fs0\"> which are looked for in order. This first one found is acted upon and other unrelated attributes</span>\nare ignored.",
    "hierarchy": [
    ],
    "pageId": 396
  },
  {
    "content": "The script transformer allows arbitrary transformer functions to be written in any scripting language\nsupported by Java, such as Javascript, JRuby, Jython, Groovy, or BeanShell. Javascript is integrated into Java 8;\nyou'll need to integrate other languages yourself.",
    "hierarchy": [
      "The ScriptTransformer"
    ],
    "pageId": 396
  },
  {
    "content": "Each function you write must accept a row variable (which corresponds to a <span class=\"code\">Java Map<String,Object></span>, thus\npermitting <span class=\"code\">get,put,remove</span> operations). Thus you can modify the value of an existing field or add new fields.\nThe return value of the function is the returned object.",
    "hierarchy": [
      "The ScriptTransformer"
    ],
    "pageId": 396
  },
  {
    "content": "The script is inserted into the DIH configuration file at the top level and is called once for each row.",
    "hierarchy": [
      "The ScriptTransformer"
    ],
    "pageId": 396
  },
  {
    "content": "Here is a simple example.",
    "hierarchy": [
      "The ScriptTransformer"
    ],
    "pageId": 396
  },
  {
    "content": "Ê <span class=\"fc2\"><!-- simple script to generate a new row, converting a temperature from Fahrenheit to</span>",
    "hierarchy": [
    ],
    "pageId": 397
  },
  {
    "content": "Ê <span class=\"fc0\"><script></span><![CDATA[\nÊ   <span class=\"fc3\">function</span> <span class=\"fc4\">f2c</span>(row) {\nÊ     <span class=\"fc3\">var</span> tempf, tempc;\nÊ     tempf = row.get(<span class=\"fc5\">'temp_f'</span>);\nÊ     <span class=\"fc3\">if</span> (tempf != null) {\nÊ       tempc = (tempf - <span class=\"fc6\">32.0</span>)*<span class=\"fc6\">5.0</span>/<span class=\"fc6\">9.0</span>;\nÊ       row.put(<span class=\"fc5\">'temp_c'</span>, temp_c);\nÊ     }\nÊ     <span class=\"fc3\">return</span> row;\nÊ   }\nÊ   ]]>\nÊ <span class=\"fc0\"></script></span>\nÊ <span class=\"fc0\"><document></span>",
    "hierarchy": [
    ],
    "pageId": 397
  },
  {
    "content": "Ê   <span class=\"fc2\"><!-- the function is specified as an entity attribute --></span>",
    "hierarchy": [
    ],
    "pageId": 397
  },
  {
    "content": "Ê   <span class=\"fc0\"><entity</span> <span class=\"fc7\">name</span>=<span class=\"fc5\">\"e1\"</span> <span class=\"fc7\">pk</span>=<span class=\"fc5\">\"id\"</span> <span class=\"fc7\">transformer</span>=<span class=\"fc5\">\"script:f2c\"</span> <span class=\"fc7\">query</span>=<span class=\"fc5\">\"select * from X\"<span class=\"fc0\">></span></span>\nÊ     ....\nÊ   <span class=\"fc0\"></entity></span>\nÊ <span class=\"fc0\"></document></span>",
    "hierarchy": [
    ],
    "pageId": 397
  },
  {
    "content": "You can use the template transformer to construct or modify a field value, perhaps using the value of other\nfields. You can insert extra text into the template.",
    "hierarchy": [
      "The TemplateTransformer"
    ],
    "pageId": 397
  },
  {
    "content": "Ê ...\nÊ <span class=\"fc2\"><!-- generate a full address from fields containing the component parts --></span>\nÊ <span class=\"fc0\"><field</span> <span class=\"fc7\">column</span>=<span class=\"fc5\">\"full_address\"</span> <span class=\"fc7\">template</span>=<span class=\"fc5\">\"${en.street},${en.city},${en.zip}\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
      "The TemplateTransformer"
    ],
    "pageId": 397
  },
  {
    "content": "You can pass special commands to the DIH by adding any of the variables listed below to any row returned\nby any component:",
    "hierarchy": [
      "Special Commands for DIH"
    ],
    "pageId": 397
  },
  {
    "content": "$skipDoc\nSkip the current document; that is, do not add it to Solr. The value can be the string <span class=\"ff1 fs3\">true</span> or <span class=\"ff1 fs3\">false</span>.",
    "hierarchy": [
      "Special Commands for DIH"
    ],
    "pageId": 397
  },
  {
    "content": "$skipRow\nSkip the current row. The document will be added with rows from other entities. The value can be the",
    "hierarchy": [
      "Special Commands for DIH"
    ],
    "pageId": 397
  },
  {
    "content": "string <span class=\"ff2 fs1\">true</span> or <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 398
  },
  {
    "content": "$deleteDocById\nDelete a document from Solr with this ID. The value has to be the <span class=\"ff2 fs1\">uniqueKey</span> value of the document.",
    "hierarchy": [
    ],
    "pageId": 398
  },
  {
    "content": "$deleteDocByQuery\nDelete documents from Solr using this query. The value must be a Solr Query.",
    "hierarchy": [
    ],
    "pageId": 398
  },
  {
    "content": "Once you have indexed the content you need in your Solr index, you will want to start thinking about your\nstrategy for dealing with changes to those documents. Solr supports three approaches to updating\ndocuments that have only partially changed.",
    "hierarchy": [
      "Updating Parts of Documents"
    ],
    "pageId": 399
  },
  {
    "content": "The first is <span class=\"link\">atomic updates</span>. This approach allows changing only one or more fields of a document without\nhaving to re-index the entire document.",
    "hierarchy": [
      "Updating Parts of Documents"
    ],
    "pageId": 399
  },
  {
    "content": "The second approach is known as <span class=\"link\">in-place updates</span>. This approach is similar to atomic updates (is a subset of\natomic updates in some sense), but can be used only for updating single valued non-indexed and non-\nstored docValue-based numeric fields.",
    "hierarchy": [
      "Updating Parts of Documents"
    ],
    "pageId": 399
  },
  {
    "content": "The third approach is known as <span class=\"link\">optimistic concurrency</span> or <span class=\"code\">optimistic locking</span>. It is a feature of many NoSQL\ndatabases, and allows conditional updating a document based on its version. This approach includes\nsemantics and rules for how to deal with version matches or mis-matches.",
    "hierarchy": [
      "Updating Parts of Documents"
    ],
    "pageId": 399
  },
  {
    "content": "Atomic Updates (and in-place updates) and Optimistic Concurrency may be used as independent strategies\nfor managing changes to documents, or they may be combined: you can use optimistic concurrency to\nconditionally apply an atomic update.",
    "hierarchy": [
      "Updating Parts of Documents"
    ],
    "pageId": 399
  },
  {
    "content": "Solr supports several modifiers that atomically update values of a document. This allows updating only\nspecific fields, which can help speed indexing processes in an environment where speed of index additions is\ncritical to the application.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "To use atomic updates, add a modifier to the field that needs to be updated. The content can be updated,\nadded to, or incrementally increased if the field has a numeric type.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "set\nSet or replace the field value(s) with the specified value(s), or remove the values if 'null' or empty list is\nspecified as the new value.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "May be specified as a single value, or as a list for multiValued fields.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "add\nAdds the specified values to a multiValued field. May be specified as a single value, or as a list.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "add-distinct\nAdds the specified values to a multiValued field, only if not already present. May be specified as a single\nvalue, or as a list.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "remove\nRemoves (all occurrences of) the specified values from a multiValued field. May be specified as a single\nvalue, or as a list.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "removeregex\nRemoves all occurrences of the specified regex from a multiValued field. May be specified as a single\nvalue, or as a list.",
    "hierarchy": [
      "Updating Parts of Documents",
      "Atomic Updates"
    ],
    "pageId": 399
  },
  {
    "content": "inc\nIncrements a numeric value by a specific amount. Must be specified as a single numeric value.",
    "hierarchy": [
    ],
    "pageId": 400
  },
  {
    "content": "The core functionality of atomically updating a document requires that all fields in your schema must be\nconfigured as stored (<span class=\"ff1 fs0\">stored=\"true\"</span>) or docValues (<span class=\"ff1 fs0\">docValues=\"true\"</span>) except for fields which are\n<copyField/><span class=\"ff2 fs1\"> destinations, which must be configured as </span>stored=\"false\"<span class=\"ff2 fs1\">. Atomic updates are applied to</span>\nthe document represented by the existing stored field values. All data in copyField destinations fields must\noriginate from ONLY copyField sources.",
    "hierarchy": [
      "Field Storage"
    ],
    "pageId": 400
  },
  {
    "content": "If <span class=\"ff1 fs0\"><copyField/></span> destinations are configured as stored, then Solr will attempt to index both the current value\nof the field as well as an additional copy from any source fields. If such fields contain some information that\ncomes from the indexing program and some information that comes from copyField, then the information\nwhich originally came from the indexing program will be lost when an atomic update is made.",
    "hierarchy": [
      "Field Storage"
    ],
    "pageId": 400
  },
  {
    "content": "There are other kinds of derived fields that must also be set so they aren't stored. Some spatial field types\nuse derived fields. Examples of this are solr.BBoxField and solr.LatLonType. CurrencyFieldType also uses\nderived fields. These types create additional fields which are normally specified by a dynamic field definition.\nThat dynamic field definition must be not stored, or indexing will fail.",
    "hierarchy": [
      "Field Storage"
    ],
    "pageId": 400
  },
  {
    "content": "If the following document exists in our collection:",
    "hierarchy": [
      "Example Updating Part of a Document"
    ],
    "pageId": 400
  },
  {
    "content": "{<span class=\"fc2\">\"id\"</span>:<span class=\"fc3\">\"mydoc\"</span>,\nÊ<span class=\"fc2\">\"price\"</span>:<span class=\"fc4\">10</span>,\nÊ<span class=\"fc2\">\"popularity\"</span>:<span class=\"fc4\">42</span>,\nÊ<span class=\"fc2\">\"categories\"</span>:[<span class=\"fc3\">\"kids\"</span>],\nÊ<span class=\"fc2\">\"sub_categories\"</span>:[<span class=\"fc3\">\"under_5\"</span>,<span class=\"fc3\">\"under_10\"</span>],\nÊ<span class=\"fc2\">\"promo_ids\"</span>:[<span class=\"fc3\">\"a123x\"</span>],\nÊ<span class=\"fc2\">\"tags\"</span>:[<span class=\"fc3\">\"free_to_try\"</span>,<span class=\"fc3\">\"buy_now\"</span>,<span class=\"fc3\">\"clearance\"</span>,<span class=\"fc3\">\"on_sale\"</span>]\n}",
    "hierarchy": [
      "Example Updating Part of a Document"
    ],
    "pageId": 400
  },
  {
    "content": "And we apply the following update command:",
    "hierarchy": [
      "Example Updating Part of a Document"
    ],
    "pageId": 400
  },
  {
    "content": "{<span class=\"fc2\">\"id\"</span>:<span class=\"fc3\">\"mydoc\"</span>,\nÊ<span class=\"fc2\">\"price\"</span>:{<span class=\"fc2\">\"set\"</span>:<span class=\"fc4\">99</span>},\nÊ<span class=\"fc2\">\"popularity\"</span>:{<span class=\"fc2\">\"inc\"</span>:<span class=\"fc4\">20</span>},\nÊ<span class=\"fc2\">\"categories\"</span>:{<span class=\"fc2\">\"add\"</span>:[<span class=\"fc3\">\"toys\"</span>,<span class=\"fc3\">\"games\"</span>]},\nÊ<span class=\"fc2\">\"sub_categories\"</span>:{<span class=\"fc2\">\"add-distinct\"</span>:<span class=\"fc3\">\"under_10\"</span>},\nÊ<span class=\"fc2\">\"promo_ids\"</span>:{<span class=\"fc2\">\"remove\"</span>:<span class=\"fc3\">\"a123x\"</span>},\nÊ<span class=\"fc2\">\"tags\"</span>:{<span class=\"fc2\">\"remove\"</span>:[<span class=\"fc3\">\"free_to_try\"</span>,<span class=\"fc3\">\"on_sale\"</span>]}\n}",
    "hierarchy": [
      "Example Updating Part of a Document"
    ],
    "pageId": 400
  },
  {
    "content": "The resulting document in our collection will be:",
    "hierarchy": [
      "Example Updating Part of a Document"
    ],
    "pageId": 400
  },
  {
    "content": "{<span class=\"fc1\">\"id\"</span>:<span class=\"fc2\">\"mydoc\"</span>,\nÊ<span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">99</span>,\nÊ<span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">62</span>,\nÊ<span class=\"fc1\">\"categories\"</span>:[<span class=\"fc2\">\"kids\"</span>,<span class=\"fc2\">\"toys\"</span>,<span class=\"fc2\">\"games\"</span>],\nÊ<span class=\"fc1\">\"sub_categories\"</span>:[<span class=\"fc2\">\"under_5\"</span>,<span class=\"fc2\">\"under_10\"</span>],\nÊ<span class=\"fc1\">\"tags\"</span>:[<span class=\"fc2\">\"buy_now\"</span>,<span class=\"fc2\">\"clearance\"</span>]\n}",
    "hierarchy": [
    ],
    "pageId": 401
  },
  {
    "content": "In-place updates are very similar to atomic updates; in some sense, this is a subset of atomic updates. In\nregular atomic updates, the entire document is re-indexed internally during the application of the update.\nHowever, in this approach, only the fields to be updated are affected and the rest of the documents are not\nre-indexed internally. Hence, the efficiency of updating in-place is unaffected by the size of the documents\nthat are updated (i.e., number of fields, size of fields, etc.). Apart from these internal differences, there is no\nfunctional difference between atomic updates and in-place updates.",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "An atomic update operation is performed using this approach only when the fields to be updated meet\nthese three conditions:",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "are non-indexed (<span class=\"ff1 fs2\">indexed=\"false\"</span>), non-stored (<span class=\"ff1 fs2\">stored=\"false\"</span>), single valued (\nmultiValued=\"false\"<span class=\"code\">) numeric docValues (</span>docValues=\"true\"<span class=\"code\">) fields;</span>",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "the <span class=\"ff1 fs2\">_version_</span> field is also a non-indexed, non-stored single valued docValues field; and,",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "copy targets of updated fields, if any, are also non-indexed, non-stored single valued numeric docValues\nfields.",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "To use in-place updates, add a modifier to the field that needs to be updated. The content can be updated or\nincrementally increased.",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "set\nSet or replace the field value(s) with the specified value(s). May be specified as a single value.",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "inc\nIncrements a numeric value by a specific amount. Must be specified as a single numeric value.",
    "hierarchy": [
      "In-Place Updates"
    ],
    "pageId": 401
  },
  {
    "content": "If the price and popularity fields are defined in the schema as:",
    "hierarchy": [
      "In-Place Updates",
      "In-Place Update Example"
    ],
    "pageId": 401
  },
  {
    "content": "<field name=\"price\" type=\"float\" indexed=\"false\" stored=\"false\" docValues=\"true\"/>",
    "hierarchy": [
      "In-Place Updates",
      "In-Place Update Example"
    ],
    "pageId": 401
  },
  {
    "content": "<field name=\"popularity\" type=\"float\" indexed=\"false\" stored=\"false\" docValues=\"true\"/>",
    "hierarchy": [
      "In-Place Updates",
      "In-Place Update Example"
    ],
    "pageId": 401
  },
  {
    "content": "If the following document exists in our collection:",
    "hierarchy": [
      "In-Place Updates",
      "In-Place Update Example"
    ],
    "pageId": 401
  },
  {
    "content": "{\nÊ<span class=\"fc1\">\"id\"</span>:<span class=\"fc2\">\"mydoc\"</span>,\nÊ<span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">10</span>,\nÊ<span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">42</span>,\nÊ<span class=\"fc1\">\"categories\"</span>:[<span class=\"fc2\">\"kids\"</span>],\nÊ<span class=\"fc1\">\"promo_ids\"</span>:[<span class=\"fc2\">\"a123x\"</span>],\nÊ<span class=\"fc1\">\"tags\"</span>:[<span class=\"fc2\">\"free_to_try\"</span>,<span class=\"fc2\">\"buy_now\"</span>,<span class=\"fc2\">\"clearance\"</span>,<span class=\"fc2\">\"on_sale\"</span>]\n}",
    "hierarchy": [
    ],
    "pageId": 402
  },
  {
    "content": "And we apply the following update command:",
    "hierarchy": [
    ],
    "pageId": 402
  },
  {
    "content": "{\nÊ<span class=\"fc1\">\"id\"</span>:<span class=\"fc2\">\"mydoc\"</span>,\nÊ<span class=\"fc1\">\"price\"</span>:{<span class=\"fc1\">\"set\"</span>:<span class=\"fc3\">99</span>},\nÊ<span class=\"fc1\">\"popularity\"</span>:{<span class=\"fc1\">\"inc\"</span>:<span class=\"fc3\">20</span>}\n}",
    "hierarchy": [
    ],
    "pageId": 402
  },
  {
    "content": "The resulting document in our collection will be:",
    "hierarchy": [
    ],
    "pageId": 402
  },
  {
    "content": "{\nÊ<span class=\"fc1\">\"id\"</span>:<span class=\"fc2\">\"mydoc\"</span>,\nÊ<span class=\"fc1\">\"price\"</span>:<span class=\"fc3\">99</span>,\nÊ<span class=\"fc1\">\"popularity\"</span>:<span class=\"fc3\">62</span>,\nÊ<span class=\"fc1\">\"categories\"</span>:[<span class=\"fc2\">\"kids\"</span>],\nÊ<span class=\"fc1\">\"promo_ids\"</span>:[<span class=\"fc2\">\"a123x\"</span>],\nÊ<span class=\"fc1\">\"tags\"</span>:[<span class=\"fc2\">\"free_to_try\"</span>,<span class=\"fc2\">\"buy_now\"</span>,<span class=\"fc2\">\"clearance\"</span>,<span class=\"fc2\">\"on_sale\"</span>]\n}",
    "hierarchy": [
    ],
    "pageId": 402
  },
  {
    "content": "Optimistic Concurrency is a feature of Solr that can be used by client applications which update/replace\ndocuments to ensure that the document they are replacing/updating has not been concurrently modified by\nanother client application. This feature works by requiring a <span class=\"ff1 fs2\">_version_</span> field on all documents in the index,\nand comparing that to a <span class=\"ff1 fs2\">_version_</span> specified as part of the update command. By default, Solr's Schema\nincludes a <span class=\"ff1 fs2\">_version_</span> field, and this field is automatically added to each new document.",
    "hierarchy": [
      "Optimistic Concurrency"
    ],
    "pageId": 402
  },
  {
    "content": "In general, using optimistic concurrency involves the following work flow:",
    "hierarchy": [
      "Optimistic Concurrency"
    ],
    "pageId": 402
  },
  {
    "content": "1.A client reads a document. In Solr, one might retrieve the document with the <span class=\"ff1 fs2\">/get</span> handler to be sure to\nhave the latest version.",
    "hierarchy": [
      "Optimistic Concurrency"
    ],
    "pageId": 402
  },
  {
    "content": "2.A client changes the document locally.\n3.The client resubmits the changed document to Solr, for example, perhaps with the <span class=\"ff1 fs2\">/update</span> handler.\n4.If there is a version conflict (HTTP error code 409), the client starts the process over.",
    "hierarchy": [
      "Optimistic Concurrency"
    ],
    "pageId": 402
  },
  {
    "content": "When the client resubmits a changed document to Solr, the <span class=\"ff1 fs2\">_version_</span> can be included with the update to\ninvoke optimistic concurrency control. Specific semantics are used to define when the document should be",
    "hierarchy": [
      "Optimistic Concurrency"
    ],
    "pageId": 402
  },
  {
    "content": "updated or when to report a conflict.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "If the content in the <span class=\"ff2 fs1\">_version_</span> field is greater than '1' (i.e., '12345'), then the <span class=\"ff2 fs1\">_version_</span> in the document\nmust match the <span class=\"ff2 fs1\">_version_</span> in the index.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "If the content in the <span class=\"ff2 fs1\">_version_</span> field is equal to '1', then the document must simply exist. In this case, no\nversion matching occurs, but if the document does not exist, the updates will be rejected.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "If the content in the <span class=\"ff2 fs1\">_version_</span> field is less than '0' (i.e., '-1'), then the document must <span class=\"code\">not</span> exist. In this\ncase, no version matching occurs, but if the document exists, the updates will be rejected.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "If the content in the <span class=\"ff2 fs1\">_version_</span> field is equal to '0', then it doesn't matter if the versions match or if the\ndocument exists or not. If it exists, it will be overwritten; if it does not exist, it will be added.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "If the document being updated does not include the <span class=\"ff2 fs1\">_version_</span> field, and atomic updates are not being\nused, the document will be treated by normal Solr rules, which is usually to discard the previous version.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "When using Optimistic Concurrency, clients can include an optional <span class=\"ff2 fs1\">versions=true</span> request parameter to\nindicate that the <span class=\"ff4\">new</span> versions of the documents being added should be included in the response. This allows\nclients to immediately know what the <span class=\"ff2 fs1\">_version_</span> is of every documented added without needing to make a\nredundant <span class=\"ff2 fs1\">/get</span><span class=\"link\"> request</span>.",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "For example:",
    "hierarchy": [
    ],
    "pageId": 403
  },
  {
    "content": "$ curl -X POST -H 'Content-Type: application/json'\n'http://localhost:8983/solr/techproducts/update?versions=true' --data-binary '\n[ { \"id\" : \"aaa\" },\nÊ { \"id\" : \"bbb\" } ]'\n{\"responseHeader\":{\"status\":0,\"QTime\":6},\nÊ\"adds\":[\"aaa\",1498562471222312960,\nÊ        \"bbb\",1498562471225458688]}\n$ curl -X POST -H 'Content-Type: application/json'\n'http://localhost:8983/solr/techproducts/update?_version_=999999&versions=true' --data-binary '\n[{ \"id\" : \"aaa\",\nÊ  \"foo_s\" : \"update attempt with wrong existing version\" }]'\n{\"responseHeader\":{\"status\":409,\"QTime\":3},\nÊ\"error\":{\"msg\":\"version conflict for aaa expected=999999 actual=1498562471222312960\",\nÊ         \"code\":409}}\n$ curl -X POST -H 'Content-Type: application/json'\n'http://localhost:8983/solr/techproducts/update?_version_=1498562471222312960&versions=true&commi\nt=true' --data-binary '\n[{ \"id\" : \"aaa\",\nÊ  \"foo_s\" : \"update attempt with correct existing version\" }]'\n{\"responseHeader\":{\"status\":0,\"QTime\":5},\nÊ\"adds\":[\"aaa\",1498562624496861184]}\n$ curl 'http://localhost:8983/solr/techproducts/query?q=*:*&fl=id,_version_'\n{\nÊ \"responseHeader\":{\nÊ   \"status\":0,\nÊ   \"QTime\":5,\nÊ   \"params\":{\nÊ     \"fl\":\"id,_version_\",\nÊ     \"q\":\"*:*\"}},\nÊ \"response\":{\"numFound\":2,\"start\":0,\"docs\":[\nÊ     {\nÊ       \"id\":\"bbb\",\nÊ       \"_version_\":1498562471225458688},\nÊ     {\nÊ       \"id\":\"aaa\",\nÊ       \"_version_\":1498562624496861184}]\nÊ }}",
    "hierarchy": [
    ],
    "pageId": 404
  },
  {
    "content": "For more information, please also see <span class=\"link\">Yonik Seeley's presentation on NoSQL features in Solr 4</span> from Apache\nLucene EuroCon 2012.",
    "hierarchy": [
    ],
    "pageId": 404
  },
  {
    "content": "Optimistic Concurrency is extremely powerful, and works very efficiently because it uses an internally\nassigned, globally unique values for the <span class=\"ff1 fs2\">_version_</span> field. However, In some situations users may want to\nconfigure their own document specific version field, where the version values are assigned on a per-\ndocument basis by an external system, and have Solr reject updates that attempt to replace a document\nwith an \"older\" version. In situations like this the <span class=\"ff1 fs2\">DocBasedVersionConstraintsProcessorFactory</span> can be\nuseful.",
    "hierarchy": [
      "Document Centric Versioning Constraints"
    ],
    "pageId": 404
  },
  {
    "content": "The basic usage of <span class=\"ff2 fs1\">DocBasedVersionConstraintsProcessorFactory</span> is to configure it in <span class=\"ff2 fs1\">solrconfig.xml</span> as\npart of the <span class=\"link\">UpdateRequestProcessorChain</span> and specify the name of your custom <span class=\"ff2 fs1\">versionField</span> in your\nschema that should be checked when validating updates:",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "Ê <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"versionField\"<span class=\"fc2\">></span></span>my_version_l<span class=\"fc2\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "Once configured, this update processor will reject (HTTP error code 409) any attempt to update an existing\ndocument where the value of the <span class=\"ff2 fs1\">my_version_l</span> field in the \"new\" document is not greater then the value of\nthat field in the existing document.",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "The <span class=\"ff2 fs1\">_version_</span> field used by Solr for its normal optimistic concurrency also has important\nsemantics in how updates are distributed to replicas in SolrCloud, and <span class=\"ff5\">MUST</span> be assigned\ninternally by Solr. Users can not re-purpose that field and specify it as the <span class=\"ff2 fs1\">versionField</span> for\nuse in the <span class=\"ff2 fs1\">DocBasedVersionConstraintsProcessorFactory</span> configuration.",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "DocBasedVersionConstraintsProcessorFactory<span class=\"ff1 fs0\"> supports two additional configuration params which are</span>\noptional:",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "ignoreOldUpdates - A boolean option which defaults to <span class=\"ff2 fs1\">false</span>. If set to <span class=\"ff2 fs1\">true</span> then instead of rejecting\nupdates where the <span class=\"ff2 fs1\">versionField</span> is too low, the update will be silently ignored (and return a status 200\nto the client).",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "deleteVersionParam - A String parameter that can be specified to indicate that this processor should\nalso inspect Delete By Id commands. The value of this configuration option should be the name of a\nrequest parameter that the processor will now consider mandatory for all attempts to Delete By Id, and\nmust be be used by clients to specify a value for the <span class=\"ff2 fs1\">versionField</span> which is greater then the existing\nvalue of the document to be deleted. When using this request param, any Delete By Id command with a\nhigh enough document version number to succeed will be internally converted into an Add Document\ncommand that replaces the existing document with a new one which is empty except for the Unique Key\nand <span class=\"ff2 fs1\">versionField</span> to keeping a record of the deleted version so future Add Document commands will\nfail if their \"new\" version is not high enough.",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "Please consult the <span class=\"link\">DocBasedVersionConstraintsProcessorFactory javadocs</span> and <span class=\"link\">test solrconfig.xml file</span> for\nadditional information and example usages.",
    "hierarchy": [
    ],
    "pageId": 405
  },
  {
    "content": "Solr can identify languages and map text to language-specific fields during indexing using the <span class=\"code\">langid</span>\nUpdateRequestProcessor.",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "Solr supports three implementations of this feature:",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "Tika's language detection feature: <span class=\"link\">https://tika.apache.org/1.17/detection.html</span>",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "LangDetect language detection: <span class=\"link\">https://github.com/shuyo/language-detection</span>",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "OpenNLP language detection: <span class=\"link\">http://opennlp.apache.org/docs/1.8.4/manual/opennlp.html#</span>\ntools.langdetect",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "You can see a comparison between the Tika and LangDetect implementations here:\nhttp://blog.mikemccandless.com/2011/10/accuracy-and-performance-of-googles.html<span class=\"fc1\">. In general, the</span>\nLangDetect implementation supports more languages with higher performance.",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "For specific information on each of these language identification implementations, including a list of\nsupported languages for each, see the relevant project websites.",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "For more information about language analysis in Solr, see <span class=\"link\">Language Analysis</span>.",
    "hierarchy": [
      "Detecting Languages During Indexing"
    ],
    "pageId": 406
  },
  {
    "content": "You can configure the <span class=\"code\">langid</span> UpdateRequestProcessor in <span class=\"code\">solrconfig.xml</span>. Both implementations take the\nsame parameters, which are described in the following section. At a minimum, you must specify the fields\nfor language identification and a field for the resulting language code.",
    "hierarchy": [
      "Detecting Languages During Indexing",
      "Configuring Language Detection"
    ],
    "pageId": 406
  },
  {
    "content": "Here is an example of a minimal Tika <span class=\"code\">langid</span> configuration in <span class=\"code\">solrconfig.xml</span>:",
    "hierarchy": [
      "Detecting Languages During Indexing",
      "Configuring Language Detection",
      "Configuring Tika Language Detection"
    ],
    "pageId": 406
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"langid.fl\"<span class=\"fc3\">></span></span>title,subject,text,keywords<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"langid.langField\"<span class=\"fc3\">></span></span>language_s<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Detecting Languages During Indexing",
      "Configuring Language Detection",
      "Configuring Tika Language Detection"
    ],
    "pageId": 406
  },
  {
    "content": "Here is an example of a minimal LangDetect <span class=\"code\">langid</span> configuration in <span class=\"code\">solrconfig.xml</span>:",
    "hierarchy": [
      "Detecting Languages During Indexing",
      "Configuring Language Detection",
      "Configuring LangDetect Language Detection"
    ],
    "pageId": 406
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"langid.fl\"<span class=\"fc0\">></span></span>title,subject,text,keywords<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"langid.langField\"<span class=\"fc0\">></span></span>language_s<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 407
  },
  {
    "content": "Here is an example of a minimal OpenNLP <span class=\"ff1 fs2\">langid</span> configuration in <span class=\"ff1 fs2\">solrconfig.xml</span>:",
    "hierarchy": [
      "Configuring OpenNLP Language Detection"
    ],
    "pageId": 407
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"langid.fl\"<span class=\"fc0\">></span></span>title,subject,text,keywords<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"langid.langField\"<span class=\"fc0\">></span></span>language_s<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"langid.model\"<span class=\"fc0\">></span></span>langdetect-183.bin<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
      "Configuring OpenNLP Language Detection"
    ],
    "pageId": 407
  },
  {
    "content": "langid.model\nAn OpenNLP language detection model. The OpenNLP project provides a pre-trained 103 language\nmodel on the <span class=\"link\">OpenNLP site's model dowload page</span>. Model training instructions are provided on the\nOpenNLP website<span class=\"fc1\">. This parameter is required.</span>",
    "hierarchy": [
      "Configuring OpenNLP Language Detection",
      "OpenNLP-specific Parameters"
    ],
    "pageId": 407
  },
  {
    "content": "OpenNLPLangDetectUpdateProcessor<span class=\"code\"> automatically converts the 3-letter ISO 639-3 codes detected by the</span>\nOpenNLP model into 2-letter ISO 639-1 codes.",
    "hierarchy": [
      "Configuring OpenNLP Language Detection",
      "OpenNLP Language Codes"
    ],
    "pageId": 407
  },
  {
    "content": "As previously mentioned, both implementations of the <span class=\"ff1 fs2\">langid</span> UpdateRequestProcessor take the same\nparameters.",
    "hierarchy": [
      "langid Parameters"
    ],
    "pageId": 407
  },
  {
    "content": "langid\nWhen <span class=\"ff1 fs2\">true</span>, the default, enables language detection.",
    "hierarchy": [
      "langid Parameters"
    ],
    "pageId": 407
  },
  {
    "content": "langid.fl\nA comma- or space-delimited list of fields to be processed by <span class=\"ff1 fs2\">langid</span>. This parameter is required.",
    "hierarchy": [
      "langid Parameters"
    ],
    "pageId": 407
  },
  {
    "content": "langid.langField\nSpecifies the field for the returned language code. This parameter is required.",
    "hierarchy": [
      "langid Parameters"
    ],
    "pageId": 407
  },
  {
    "content": "langid.langsField\nSpecifies the field for a list of returned language codes. If you use <span class=\"ff1 fs2\">langid.map.individual</span>, each detected\nlanguage will be added to this field.",
    "hierarchy": [
      "langid Parameters"
    ],
    "pageId": 407
  },
  {
    "content": "langid.overwrite\nSpecifies whether the content of the <span class=\"ff1 fs0\">langField</span> and <span class=\"ff1 fs0\">langsField</span> fields will be overwritten if they already\ncontain values. The default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.lcmap\nA space-separated list specifying colon delimited language code mappings to apply to the detected\nlanguages.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "For example, you might use this to map Chinese, Japanese, and Korean to a common <span class=\"ff1 fs0\">cjk</span> code, and map\nboth American and British English to a single <span class=\"ff1 fs0\">en</span> code by using <span class=\"ff1 fs0\">langid.lcmap=ja:cjk zh:cjk ko:cjk</span>\nen_GB:en en_US:en<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "This affects both the values put into the <span class=\"ff1 fs0\">langField</span> and <span class=\"ff1 fs0\">langsField</span> fields, as well as the field suffixes\nwhen using <span class=\"ff1 fs0\">langid.map</span>, unless overridden by <span class=\"ff1 fs0\">langid.map.lcmap</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.threshold\nSpecifies a threshold value between 0 and 1 that the language identification score must reach before\nlangid<span class=\"ff2 fs1\"> accepts it.</span>",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "With longer text fields, a high threshold such as <span class=\"ff1 fs0\">0.8</span> will give good results. For shorter text fields, you may\nneed to lower the threshold for language identification, though you will be risking somewhat lower\nquality results. We recommend experimenting with your data to tune your results.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "The default is <span class=\"ff1 fs0\">0.5</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.whitelist\nSpecifies a list of allowed language identification codes. Use this in combination with <span class=\"ff1 fs0\">langid.map</span> to\nensure that you only index documents into fields that are in your schema.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.map\nEnables field name mapping. If <span class=\"ff1 fs0\">true</span>, Solr will map field names for all fields listed in <span class=\"ff1 fs0\">langid.fl</span>. The\ndefault is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.map.fl\nA comma-separated list of fields for <span class=\"ff1 fs0\">langid.map</span> that is different than the fields specified in <span class=\"ff1 fs0\">langid.fl</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.map.keepOrig\nIf <span class=\"ff1 fs0\">true</span>, Solr will copy the field during the field name mapping process, leaving the original field in place.\nThe default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.map.individual\nIf <span class=\"ff1 fs0\">true</span>, Solr will detect and map languages for each field individually. The default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.map.individual.fl\nA comma-separated list of fields for use with <span class=\"ff1 fs0\">langid.map.individual</span> that is different than the fields\nspecified in <span class=\"ff1 fs0\">langid.fl</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.fallback\nSpecifies a language code to use if no language is detected or specified in <span class=\"ff1 fs0\">langid.fallbackFields</span>.",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "langid.fallbackFields\nIf no language is detected that meets the <span class=\"ff1 fs0\">langid.threshold</span> score, or if the detected language is not on",
    "hierarchy": [
    ],
    "pageId": 408
  },
  {
    "content": "the <span class=\"ff2 fs1\">langid.whitelist</span>, this field specifies language codes to be used as fallback values.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "If no appropriate fallback languages are found, Solr will use the language code specified in\nlangid.fallback<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "langid.map.lcmap\nA space-separated list specifying colon-delimited language code mappings to use when mapping field\nnames.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "For example, you might use this to make Chinese, Japanese, and Korean language fields use a common\n*_cjk<span class=\"ff1 fs0\"> suffix, and map both American and British English fields to a single </span>*_en<span class=\"ff1 fs0\"> by using</span>\nlangid.map.lcmap=ja:cjk zh:cjk ko:cjk en_GB:en en_US:en<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "A list defined with this parameter will override any configuration set with <span class=\"ff2 fs1\">langid.lcmap</span>.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "langid.map.pattern\nBy default, fields are mapped as <field>_<language>. To change this pattern, you can specify a Java\nregular expression in this parameter.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "langid.map.replace\nBy default, fields are mapped as <span class=\"ff2 fs1\"><field>_<language></span>. To change this pattern, you can specify a Java\nreplace in this parameter.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "langid.enforceSchema\nIf <span class=\"ff2 fs1\">false</span>, the <span class=\"ff2 fs1\">langid</span> processor does not validate field names against your schema. This may be useful if\nyou plan to rename or delete fields later in the UpdateChain.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
    ],
    "pageId": 409
  },
  {
    "content": "If duplicate, or near-duplicate documents are a concern in your index, de-duplication may be worth\nimplementing.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "Preventing duplicate or near duplicate documents from entering an index or tagging documents with a\nsignature/fingerprint for duplicate field collapsing can be efficiently achieved with a low collision or fuzzy\nhash algorithm. Solr natively supports de-duplication techniques of this type via the <span class=\"code\">Signature</span> class and\nallows for the easy addition of new hash/signature implementations. A Signature can be implemented in a\nfew ways:",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "MD5Signature: 128-bit hash used for exact duplicate detection.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "Lookup3Signature: 64-bit hash used for exact duplicate detection. This is much faster than MD5 and\nsmaller to index.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "<span class=\"link\">TextProfileSignature<span class=\"fc1\">: Fuzzy hashing implementation from Apache Nutch for near duplicate detection. It's</span></span>\ntunable but works best on longer text.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "Other, more sophisticated algorithms for fuzzy/near hashing can be added later.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "Adding in the de-duplication process will change the <span class=\"code\">allowDups</span> setting so that it applies to\nan update term (with <span class=\"code\">signatureField</span> in this case) rather than the unique field Term.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "Of course the <span class=\"code\">signatureField</span> could be the unique field, but generally you want the unique\nfield to be unique. When a document is added, a signature will automatically be generated\nand attached to the document in the specified <span class=\"code\">signatureField</span>.",
    "hierarchy": [
      "De-Duplication"
    ],
    "pageId": 410
  },
  {
    "content": "There are two places in Solr to configure de-duplication: in <span class=\"code\">solrconfig.xml</span> and in <span class=\"code\">schema.xml</span>.",
    "hierarchy": [
      "De-Duplication",
      "Configuration Options"
    ],
    "pageId": 410
  },
  {
    "content": "The <span class=\"code\">SignatureUpdateProcessorFactory</span> has to be registered in <span class=\"code\">solrconfig.xml</span> as part of an <span class=\"link\">Update</span>\nRequest Processor Chain<span class=\"fc1\">, as in this example:</span>",
    "hierarchy": [
      "De-Duplication",
      "Configuration Options",
      "In solrconfig.xml"
    ],
    "pageId": 410
  },
  {
    "content": "Ê <span class=\"fc4\"><processor</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.processor.SignatureUpdateProcessorFactory\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><bool</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"enabled\"<span class=\"fc4\">></span></span>true<span class=\"fc4\"></bool></span>\nÊ   <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"signatureField\"<span class=\"fc4\">></span></span>id<span class=\"fc4\"></str></span>\nÊ   <span class=\"fc4\"><bool</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"overwriteDupes\"<span class=\"fc4\">></span></span>false<span class=\"fc4\"></bool></span>\nÊ   <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"fields\"<span class=\"fc4\">></span></span>name,features,cat<span class=\"fc4\"></str></span>\nÊ   <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"signatureClass\"<span class=\"fc4\">></span></span>solr.processor.Lookup3Signature<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"></processor></span>\nÊ <span class=\"fc4\"><processor</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc4\">/></span>\nÊ <span class=\"fc4\"><processor</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc4\">/></span>",
    "hierarchy": [
      "De-Duplication",
      "Configuration Options",
      "In solrconfig.xml"
    ],
    "pageId": 410
  },
  {
    "content": "The <span class=\"code\">SignatureUpdateProcessorFactory</span> takes several properties:",
    "hierarchy": [
      "De-Duplication",
      "Configuration Options",
      "In solrconfig.xml"
    ],
    "pageId": 410
  },
  {
    "content": "signatureClass\nA Signature implementation for generating a signature hash. The default is\norg.apache.solr.update.processor.Lookup3Signature<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "The full classpath of the implementation must be specified. The available options are described above,\nthe associated classpaths to use are:",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "\norg.apache.solr.update.processor.Lookup3Signature\n•\norg.apache.solr.update.processor.MD5Signature\n•\norg.apache.solr.update.process.TextProfileSignature",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "fields\nThe fields to use to generate the signature hash in a comma separated list. By default, all fields on the\ndocument will be used.",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "signatureField\nThe name of the field used to hold the fingerprint/signature. The field should be defined in <span class=\"code\">schema.xml</span>.\nThe default is <span class=\"code\">signatureField</span>.",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "enabled\nSet to <span class=\"ff1\">false</span> to disable de-duplication processing. The default is <span class=\"ff1\">true</span>.",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "overwriteDupes\nIf true, the default, when a document exists that already matches this signature, it will be overwritten.",
    "hierarchy": [
    ],
    "pageId": 411
  },
  {
    "content": "If you are using a separate field for storing the signature, you must have it indexed:",
    "hierarchy": [
      "In schema.xml"
    ],
    "pageId": 411
  },
  {
    "content": "Be sure to change your update handlers to use the defined chain, as below:",
    "hierarchy": [
      "In schema.xml"
    ],
    "pageId": 411
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"update.chain\"<span class=\"fc2\">></span></span>dedupe<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>\n...",
    "hierarchy": [
      "In schema.xml"
    ],
    "pageId": 411
  },
  {
    "content": "This example assumes you have other sections of your request handler defined.",
    "hierarchy": [
      "In schema.xml"
    ],
    "pageId": 411
  },
  {
    "content": "The update processor can also be specified per request with a parameter of\nupdate.chain=dedupe<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "In schema.xml"
    ],
    "pageId": 411
  },
  {
    "content": "Content streams are bulk data passed with a request to Solr.",
    "hierarchy": [
      "Content Streams"
    ],
    "pageId": 412
  },
  {
    "content": "When Solr RequestHandlers are accessed using path based URLs, the <span class=\"code\">SolrQueryRequest</span> object containing\nthe parameters of the request may also contain a list of ContentStreams containing bulk data for the\nrequest. (The name SolrQueryRequest is a bit misleading: it is involved in all requests, regardless of whether\nit is a query request or an update request.)",
    "hierarchy": [
      "Content Streams"
    ],
    "pageId": 412
  },
  {
    "content": "Currently request handlers can get content streams in a variety of ways:",
    "hierarchy": [
      "Content Streams",
      "Content Stream Sources"
    ],
    "pageId": 412
  },
  {
    "content": "For multipart file uploads, each file is passed as a stream.",
    "hierarchy": [
      "Content Streams",
      "Content Stream Sources"
    ],
    "pageId": 412
  },
  {
    "content": "For POST requests where the content-type is not <span class=\"code\">application/x-www-form-urlencoded</span>, the raw POST\nbody is passed as a stream. The full POST body is parsed as parameters and included in the Solr\nparameters.",
    "hierarchy": [
      "Content Streams",
      "Content Stream Sources"
    ],
    "pageId": 412
  },
  {
    "content": "The contents of parameter <span class=\"code\">stream.body</span> is passed as a stream.",
    "hierarchy": [
      "Content Streams",
      "Content Stream Sources"
    ],
    "pageId": 412
  },
  {
    "content": "If remote streaming is enabled and URL content is called for during request handling, the contents of\neach <span class=\"code\">stream.url</span> and <span class=\"code\">stream.file</span> parameters are fetched and passed as a stream.",
    "hierarchy": [
      "Content Streams",
      "Content Stream Sources"
    ],
    "pageId": 412
  },
  {
    "content": "By default, curl sends a <span class=\"code\">contentType=\"application/x-www-form-urlencoded\"</span> header. If you need to test a\nSolrContentHeader content stream, you will need to set the content type with curl's <span class=\"code\">-H</span> flag.",
    "hierarchy": [
      "Content Streams",
      "Content Stream Sources"
    ],
    "pageId": 412
  },
  {
    "content": "Remote streaming lets you send the contents of a URL as a stream to a given Solr RequestHandler. You\ncould use remote streaming to send a remote or local file to an update plugin.",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "Remote streaming is disabled by default. Enabling it is not recommended in a production situation without\nadditional security between you and untrusted remote clients.",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "In <span class=\"code\">solrconfig.xml</span>, you can enable it by changing the following <span class=\"code\">enableRemoteStreaming</span> parameter to <span class=\"code\">true</span>:",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "Ê   *** WARNING ***\nÊ   Before enabling remote streaming, you should make sure your\nÊ   system has authentication enabled.",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "Ê   <span class=\"fc2\"><requestParsers</span> <span class=\"fc3\">enableRemoteStreaming</span>=<span class=\"fc4\">\"false\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "When <span class=\"code\">enableRemoteStreaming</span> is not specified in <span class=\"code\">solrconfig.xml</span>, the default behavior is to <span class=\"ff4\">not</span> allow\nremote streaming (i.e., <span class=\"code\">enableRemoteStreaming=\"false\"</span>).",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "Remote streaming can also be enabled through the <span class=\"link\">Config API</span> as follows:",
    "hierarchy": [
      "Content Streams",
      "Remote Streaming"
    ],
    "pageId": 412
  },
  {
    "content": "curl -H 'Content-type:application/json' -d '{\"set-property\":\n{\"requestDispatcher.requestParsers.enableRemoteStreaming\":true}}'\n'http://localhost:8983/solr/techproducts/config'",
    "hierarchy": [
    ],
    "pageId": 413
  },
  {
    "content": "curl -X POST -H 'Content-type: application/json' -d '{\"set-property\":\n{\"requestDispatcher.requestParsers.enableRemoteStreaming\":true}}'\n'http://localhost:8983/api/collections/techproducts/config'",
    "hierarchy": [
    ],
    "pageId": 413
  },
  {
    "content": "If <span class=\"ff2 fs2\">enableRemoteStreaming=\"true\"</span> is used, be aware that this allows <span class=\"ff5\">anyone</span> to send a\nrequest to any URL or local file. If the <span class=\"link\">DumpRequestHandler</span> is enabled, it will allow anyone\nto view any file on your system.",
    "hierarchy": [
    ],
    "pageId": 413
  },
  {
    "content": "The implicit \"dump\" RequestHandler (see <span class=\"link\">Implicit RequestHandlers</span>) simply outputs the contents of the Solr\nQueryRequest using the specified writer type <span class=\"ff2 fs2\">wt</span>. This is a useful tool to help understand what streams are\navailable to the RequestHandlers.",
    "hierarchy": [
      "Debugging Requests"
    ],
    "pageId": 413
  },
  {
    "content": "You can integrate the Apache Unstructured Information Management Architecture (<span class=\"link\">UIMA</span>) with Solr. UIMA\nlets you define custom pipelines of Analysis Engines that incrementally add metadata to your documents as\nannotations.",
    "hierarchy": [
      "UIMA Integration"
    ],
    "pageId": 414
  },
  {
    "content": "The SolrUIMA UpdateRequestProcessor is a custom update request processor that takes documents being\nindexed, sends them to a UIMA pipeline, and then returns the documents enriched with the specified\nmetadata. To configure UIMA for Solr, follow these steps:",
    "hierarchy": [
      "UIMA Integration",
      "Configuring UIMA"
    ],
    "pageId": 414
  },
  {
    "content": "1.Copy <span class=\"code\">solr-uima-VERSION.jar</span> (under <span class=\"code\">/solr-VERSION/dist/</span>) and its libraries (under <span class=\"code\">contrib/uima/lib</span>)\nto a Solr libraries directory, or set <span class=\"code\"><lib/></span> tags in <span class=\"code\">solrconfig.xml</span> appropriately to point to those jar files:",
    "hierarchy": [
      "UIMA Integration",
      "Configuring UIMA"
    ],
    "pageId": 414
  },
  {
    "content": "2.Modify <span class=\"code\">schema.xml</span>, adding your desired metadata fields specifying proper values for type, indexed,\nstored, and multiValued options. For example:",
    "hierarchy": [
      "UIMA Integration",
      "Configuring UIMA"
    ],
    "pageId": 414
  },
  {
    "content": "3.Add the following snippet to <span class=\"code\">solrconfig.xml</span>:",
    "hierarchy": [
      "UIMA Integration",
      "Configuring UIMA"
    ],
    "pageId": 414
  },
  {
    "content": "Ê <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorFactory\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"uimaConfig\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"runtimeParameters\"<span class=\"fc3\">></span></span>\nÊ       <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"keyword_apikey\"<span class=\"fc3\">></span></span>VALID_ALCHEMYAPI_KEY<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"concept_apikey\"<span class=\"fc3\">></span></span>VALID_ALCHEMYAPI_KEY<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"lang_apikey\"<span class=\"fc3\">></span></span>VALID_ALCHEMYAPI_KEY<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"cat_apikey\"<span class=\"fc3\">></span></span>VALID_ALCHEMYAPI_KEY<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"entities_apikey\"<span class=\"fc3\">></span></span>VALID_ALCHEMYAPI_KEY<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"oc_licenseID\"<span class=\"fc3\">></span></span>VALID_OPENCALAIS_KEY<span class=\"fc3\"></str></span>\nÊ     <span class=\"fc3\"></lst></span>\nÊ     <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"analysisEngine\"<span class=\"fc3\">></span></span>/org/apache/uima/desc/OverridingParamsExtServicesAE.xml<span class=\"fc3\"></str></span>\nÊ     <span class=\"fc6\"><!-- Set to true if you want to continue indexing even if text processing fails.</span>",
    "hierarchy": [
      "UIMA Integration",
      "Configuring UIMA"
    ],
    "pageId": 414
  },
  {
    "content": "Ê     <span class=\"fc3\"><bool</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"ignoreErrors\"<span class=\"fc3\">></span></span>true<span class=\"fc3\"></bool></span>\nÊ     <span class=\"fc6\"><!-- This is optional. It is used for logging when text processing fails.</span>",
    "hierarchy": [
      "UIMA Integration",
      "Configuring UIMA"
    ],
    "pageId": 414
  },
  {
    "content": "Ê     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"analyzeFields\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"merge\"<span class=\"fc2\">></span></span>false<span class=\"fc2\"></bool></span>\nÊ       <span class=\"fc2\"><arr</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"fields\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><str></span>text<span class=\"fc2\"></str></span>\nÊ       <span class=\"fc2\"></arr></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"fieldMappings\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"type\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc2\">></span></span>org.apache.uima.alchemy.ts.concept.ConceptFS<span class=\"fc2\"></str></span>\nÊ         <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"mapping\"<span class=\"fc2\">></span></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"feature\"<span class=\"fc2\">></span></span>text<span class=\"fc2\"></str></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>concept<span class=\"fc2\"></str></span>\nÊ         <span class=\"fc2\"></lst></span>\nÊ       <span class=\"fc2\"></lst></span>\nÊ       <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"type\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc2\">></span></span>org.apache.uima.alchemy.ts.language.LanguageFS<span class=\"fc2\"></str></span>\nÊ         <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"mapping\"<span class=\"fc2\">></span></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"feature\"<span class=\"fc2\">></span></span>language<span class=\"fc2\"></str></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>language<span class=\"fc2\"></str></span>\nÊ         <span class=\"fc2\"></lst></span>\nÊ       <span class=\"fc2\"></lst></span>\nÊ       <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"type\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc2\">></span></span>org.apache.uima.SentenceAnnotation<span class=\"fc2\"></str></span>\nÊ         <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"mapping\"<span class=\"fc2\">></span></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"feature\"<span class=\"fc2\">></span></span>coveredText<span class=\"fc2\"></str></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>sentence<span class=\"fc2\"></str></span>\nÊ         <span class=\"fc2\"></lst></span>\nÊ       <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"></processor></span>\nÊ <span class=\"fc2\"><processor</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc2\">/></span>\nÊ <span class=\"fc2\"><processor</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
    ],
    "pageId": 415
  },
  {
    "content": "◦VALID_ALCHEMYAPI_KEY<span class=\"ff4 fs0\"> is your AlchemyAPI Access Key. You need to register an</span>\nAlchemyAPI Access key to use AlchemyAPI services: <span class=\"fc6\">http://www.alchemyapi.com/</span>\napi/register.html<span class=\"fc1\">.</span>\n◦VALID_OPENCALAIS_KEY<span class=\"ff4 fs0\"> is your Calais Service Key. You need to register a Calais</span>\nService key to use the Calais services: <span class=\"fc6\">http://www.opencalais.com/apikey</span>.\n◦analysisEngine<span class=\"ff4 fs0\"> must contain an AE descriptor inside the specified path in the</span>\nclasspath.\n◦analyzeFields<span class=\"ff4 fs0\"> must contain the input fields that need to be analyzed by UIMA. If</span>\nmerge=true<span class=\"ff4 fs0\"> then their content will be merged and analyzed only once.</span>\n◦Field mapping describes which features of which types should go in a field.",
    "hierarchy": [
    ],
    "pageId": 415
  },
  {
    "content": "4.In your <span class=\"ff1 fs2\">solrconfig.xml</span> replace the existing default UpdateRequestHandler or create a new\nUpdateRequestHandler:",
    "hierarchy": [
    ],
    "pageId": 415
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"update.chain\"<span class=\"fc0\">></span></span>uima<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 416
  },
  {
    "content": "Once you are done with the configuration your documents will be automatically enriched with the specified\nfields when you index them.",
    "hierarchy": [
    ],
    "pageId": 416
  },
  {
    "content": "For more information about Solr UIMA integration, see <span class=\"link\">https://wiki.apache.org/solr/SolrUIMA</span>.",
    "hierarchy": [
    ],
    "pageId": 416
  },
  {
    "content": "This section describes how Solr works with search requests. It covers the following topics:",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Overview of Searching in Solr<span class=\"fc1\">: An introduction to searching with Solr.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Velocity Search UI<span class=\"fc1\">: A simple search UI using the VelocityResponseWriter.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Relevance<span class=\"fc1\">: Conceptual information about understanding relevance in search results.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Query Syntax and Parsing<span class=\"fc1\">: A brief conceptual overview of query syntax and parsing. It also contains the</span></span>\nfollowing sub-sections:",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "◦<span class=\"link\">Common Query Parameters<span class=\"fc1\">: No matter the query parser, there are several parameters that are</span></span>\ncommon to all of them.\n◦<span class=\"link\">The Standard Query Parser<span class=\"fc1\">: Detailed information about the standard Lucene query parser.</span></span>\n◦<span class=\"link\">The DisMax Query Parser<span class=\"fc1\">: Detailed information about Solr's DisMax query parser.</span></span>\n◦<span class=\"link\">The Extended DisMax Query Parser<span class=\"fc1\">: Detailed information about Solr’s Extended DisMax (eDisMax)</span></span>\nQuery Parser.\n◦<span class=\"link\">Function Queries<span class=\"fc1\">: Detailed information about parameters for generating relevancy scores using</span></span>\nvalues from one or more numeric fields.\n◦<span class=\"link\">Local Parameters in Queries<span class=\"fc1\">: How to add local arguments to queries.</span></span>\n◦<span class=\"link\">Other Parsers<span class=\"fc1\">: More parsers designed for use in specific situations.</span></span>\n<span class=\"link\">JSON Request API<span class=\"fc1\">: Overview of Solr’s JSON Request API.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "◦<span class=\"link\">JSON Query DSL<span class=\"fc1\">: Detailed information about a simple yet powerful query language for JSON Request</span></span>\nAPI.\n<span class=\"link\">JSON Facet API<span class=\"fc1\">: Overview of Solr's JSON Facet API.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Faceting<span class=\"fc1\">: Detailed information about categorizing search results based on indexed terms.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Highlighting<span class=\"fc1\">: Detailed information about Solr's highlighting capabilities, including multiple underlying</span></span>\nhighlighter implementations.",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Spell Checking<span class=\"fc1\">: Detailed information about Solr's spelling checker.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Query Re-Ranking<span class=\"fc1\">: Detailed information about re-ranking top scoring documents from simple queries</span></span>\nusing more complex scores.",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "◦<span class=\"link\">Learning To Rank<span class=\"fc1\">: How to use LTR to run machine learned ranking models in Solr.</span></span>\n<span class=\"link\">Transforming Result Documents<span class=\"fc1\">: Detailed information about using <span class=\"ff4 fs2\">DocTransformers</span> to add computed</span></span>\ninformation to individual documents",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Suggester<span class=\"fc1\">: Detailed information about Solr's powerful autosuggest component.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">MoreLikeThis<span class=\"fc1\">: Detailed information about Solr's similar results query component.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Pagination of Results<span class=\"fc1\">: Detailed information about fetching paginated results for display in a UI, or for</span></span>\nfetching all documents matching a query.",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Result Grouping<span class=\"fc1\">: Detailed information about grouping results based on common field values.</span></span>",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Result Clustering<span class=\"fc1\">: Detailed information about grouping search results based on cluster analysis applied</span></span>\nto text fields. A bit like \"unsupervised\" faceting.",
    "hierarchy": [
      "Searching"
    ],
    "pageId": 417
  },
  {
    "content": "<span class=\"link\">Spatial Search<span class=\"fc0\">: How to use Solr's spatial search capabilities.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">The Terms Component<span class=\"fc0\">: Detailed information about accessing indexed terms and the documents that</span></span>\ninclude them.",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">The Term Vector Component<span class=\"fc0\">: How to get term information about specific documents.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">The Stats Component<span class=\"fc0\">: How to return information from numeric fields within a document set.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">The Query Elevation Component<span class=\"fc0\">: How to force documents to the top of the results for certain queries.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">Response Writers<span class=\"fc0\">: Detailed information about configuring and using Solr's response writers.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">Near Real Time Searching<span class=\"fc0\">: How to include documents in search results nearly immediately after they are</span></span>\nindexed.",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">RealTime Get<span class=\"fc0\">: How to get the latest version of a document without opening a searcher.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">Exporting Result Sets<span class=\"fc0\">: Functionality to export large result sets out of Solr.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">Streaming Expressions<span class=\"fc0\">: A stream processing language for Solr, with a suite of functions to perform many</span></span>\ntypes of queries and parallel execution tasks.",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">Parallel SQL Interface<span class=\"fc0\">: An interface for sending SQL statements to Solr, and using advanced parallel</span></span>\nquery processing and relational algebra for complex data analysis.",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "<span class=\"link\">The Analytics Component<span class=\"fc0\">: A framework to compute complex analytics over a result set.</span></span>",
    "hierarchy": [
    ],
    "pageId": 418
  },
  {
    "content": "Solr offers a rich, flexible set of features for search. To understand the extent of this flexibility, it's helpful to\nbegin with an overview of the steps and components involved in a Solr search.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "When a user runs a search in Solr, the search query is processed by a <span class=\"ff1\">request handler</span>. A request handler is\na Solr plug-in that defines the logic to be used when Solr processes a request. Solr supports a variety of\nrequest handlers. Some are designed for processing search queries, while others manage tasks such as\nindex replication.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "Search applications select a particular request handler by default. In addition, applications can be configured\nto allow users to override the default selection in preference of a different request handler.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "To process a search query, a request handler calls a <span class=\"ff1\">query parser</span>, which interprets the terms and\nparameters of a query. Different query parsers support different syntax. Solr's default query parser is known\nas the <span class=\"link\">Standard Query Parser</span>,or more commonly just the \"lucene\" query parser. Solr also includes the\nDisMax<span class=\"fc1\">query parser, and the </span>Extended DisMax<span class=\"fc1\"> (eDisMax) query parser. The </span>standard<span class=\"fc1\"> query parser’s syntax</span>\nallows for greater precision in searches, but the DisMax query parser is much more tolerant of errors. The\nDisMax query parser is designed to provide an experience similar to that of popular search engines such as\nGoogle, which rarely display syntax errors to users. The Extended DisMax query parser is an improved\nversion of DisMax that handles the full Lucene query syntax while still tolerating syntax errors. It also\nincludes several additional features.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "In addition, there are <span class=\"link\">common query parameters</span> that are accepted by all query parsers.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "Input to a query parser can include:",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "search strings---that is, <span class=\"code\">terms</span> to search for in the index",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "parameters for fine-tuning the query<span class=\"ff2\"> by increasing the importance of particular strings or fields, by</span>\napplying Boolean logic among the search terms, or by excluding content from the search results",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "parameters for controlling the presentation of the query response<span class=\"ff2\">, such as specifying the order in which</span>\nresults are to be presented or limiting the response to particular fields of the search application's\nschema.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "Search parameters may also specify a <span class=\"ff1\">filter query</span>. As part of a search response, a filter query runs a query\nagainst the entire index and caches the results. Because Solr allocates a separate cache for filter queries, the\nstrategic use of filter queries can improve search performance. (Despite their similar names, query filters are\nnot related to analysis filters. Filter queries perform queries at search time against data already in the index,\nwhile analysis filters, such as Tokenizers, parse content for indexing, following specified rules).",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "A search query can request that certain terms be highlighted in the search response; that is, the selected\nterms will be displayed in colored boxes so that they \"jump out\" on the screen of search results.\nHighlighting<span class=\"ff2 fc1\"> can make it easier to find relevant passages in long documents returned in a search. Solr</span>\nsupports multi-term highlighting. Solr includes a rich set of search parameters for controlling how terms are\nhighlighted.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "Search responses can also be configured to include <span class=\"ff1\">snippets</span> (document excerpts) featuring highlighted\ntext. Popular search engines such as Google and Yahoo! return snippets in their search results: 3-4 lines of\ntext offering a description of a search result.",
    "hierarchy": [
      "Overview of Searching in Solr"
    ],
    "pageId": 419
  },
  {
    "content": "To help users zero in on the content they're looking for, Solr supports two special ways of grouping search\nresults to aid further exploration: faceting and clustering.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "Faceting<span class=\"ff1 fc0\"> is the arrangement of search results into categories (which are based on indexed terms). Within</span>\neach category, Solr reports on the number of hits for relevant term, which is called a facet constraint.\nFaceting makes it easy for users to explore search results on sites such as movie sites and product review\nsites, where there are many categories and many items within a category.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "The screen shot below shows an example of faceting from the CNET Web site (CBS Interactive Inc.), which\nwas the first site to use Solr.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "Faceting makes use of fields defined when the search applications were indexed. In the example above,\nthese fields include categories of information that are useful for describing digital cameras: manufacturer,\nresolution, and zoom range.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "Clustering<span class=\"ff1\"> groups search results by similarities discovered when a search is executed, rather than when</span>\ncontent is indexed. The results of clustering often lack the neat hierarchical organization found in faceted\nsearch results, but clustering can be useful nonetheless. It can reveal unexpected commonalities among\nsearch results, and it can help users rule out content that isn't pertinent to what they’re really searching for.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "Solr also supports a feature called <span class=\"link\">MoreLikeThis</span>, which enables users to submit new queries that focus on\nparticular terms returned in an earlier query. MoreLikeThis queries can make use of faceting or clustering to\nprovide additional aid to users.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "A Solr component called a <span class=\"link\">response writer</span> manages the final presentation of the query response. Solr\nincludes a variety of response writers, including an <span class=\"link\">XML Response Writer</span> and a <span class=\"link\">JSON Response Writer</span>.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "The diagram below summarizes some key elements of the search process.",
    "hierarchy": [
    ],
    "pageId": 420
  },
  {
    "content": "Solr includes a sample search UI based on the <span class=\"link\">VelocityResponseWriter</span> (also known as Solritas) that\ndemonstrates several useful features, such as searching, faceting, highlighting, autocomplete, and\ngeospatial searching.",
    "hierarchy": [
      "Velocity Search UI"
    ],
    "pageId": 422
  },
  {
    "content": "When using the <span class=\"code\">sample_techproducts_configs</span> config set, you can access the Velocity sample Search UI:\nhttp://localhost:8983/solr/techproducts/browse",
    "hierarchy": [
      "Velocity Search UI"
    ],
    "pageId": 422
  },
  {
    "content": "For more information about the Velocity Response Writer, see the <span class=\"link\">Response Writer page</span>.",
    "hierarchy": [
      "Velocity Search UI"
    ],
    "pageId": 422
  },
  {
    "content": "Relevance<span class=\"ff2\"> is the degree to which a query response satisfies a user who is searching for information.</span>",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "The relevance of a query response depends on the context in which the query was performed. A single\nsearch application may be used in different contexts by users with different needs and expectations. For\nexample, a search engine of climate data might be used by a university researcher studying long-term\nclimate trends, a farmer interested in calculating the likely date of the last frost of spring, a civil engineer\ninterested in rainfall patterns and the frequency of floods, and a college student planning a vacation to a\nregion and wondering what to pack. Because the motivations of these users vary, the relevance of any\nparticular response to a query will vary as well.",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "How comprehensive should query responses be? Like relevance in general, the answer to this question\ndepends on the context of a search. The cost of <span class=\"code\">not</span> finding a particular document in response to a query is\nhigh in some contexts, such as a legal e-discovery search in response to a subpoena, and quite low in others,\nsuch as a search for a cake recipe on a Web site with dozens or hundreds of cake recipes. When configuring\nSolr, you should weigh comprehensiveness against other factors such as timeliness and ease-of-use.",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "The e-discovery and recipe examples demonstrate the importance of two concepts related to relevance:",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "Precision<span class=\"ff2\"> is the percentage of documents in the returned results that are relevant.</span>",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "Recall<span class=\"ff2\"> is the percentage of relevant results returned out of all relevant results in the system. Obtaining</span>\nperfect recall is trivial: simply return every document in the collection for every query.",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "Returning to the examples above, it's important for an e-discovery search application to have 100% recall\nreturning all the documents that are relevant to a subpoena. It’s far less important that a recipe application\noffer this degree of precision, however. In some cases, returning too many results in casual contexts could\noverwhelm users. In some contexts, returning fewer results that have a higher likelihood of relevance may\nbe the best approach.",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "Using the concepts of precision and recall, it's possible to quantify relevance across users and queries for a\ncollection of documents. A perfect system would have 100% precision and 100% recall for every user and\nevery query. In other words, it would retrieve all the relevant documents and nothing else. In practical\nterms, when talking about precision and recall in real systems, it is common to focus on precision and recall\nat a certain number of results, the most common (and useful) being ten results.",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "Through faceting, query filters, and other search components, a Solr application can be configured with the\nflexibility to help users fine-tune their searches in order to return the most relevant results for users. That is,\nSolr can be configured to balance precision and recall to meet the needs of a particular user community.",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "The configuration of a Solr application should take into account:",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "the needs of the application's various users (which can include ease of use and speed of response, in\naddition to strictly informational needs)",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "the categories that are meaningful to these users in their various contexts (e.g., dates, product\ncategories, or regions)",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "any inherent relevance of documents (e.g., it might make sense to ensure that an official product\ndescription or FAQ is always returned near the top of the search results)",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "whether or not the age of documents matters significantly (in some contexts, the most recent",
    "hierarchy": [
      "Relevance"
    ],
    "pageId": 423
  },
  {
    "content": "documents might always be the most important)",
    "hierarchy": [
    ],
    "pageId": 424
  },
  {
    "content": "Keeping all these factors in mind, it's often helpful in the planning stages of a Solr deployment to sketch out\nthe types of responses you think the search application should return for sample queries. Once the\napplication is up and running, you can employ a series of testing methodologies, such as focus groups, in-\nhouse testing, <span class=\"link\">TREC</span> tests and A/B testing to fine tune the configuration of the application to best meet the\nneeds of its users.",
    "hierarchy": [
    ],
    "pageId": 424
  },
  {
    "content": "For more information about relevance, see Grant Ingersoll's tech article <span class=\"link\">Debugging Search Application</span>\nRelevance Issues<span class=\"fc0\"> which is available on SearchHub.org.</span>",
    "hierarchy": [
    ],
    "pageId": 424
  },
  {
    "content": "Solr supports several query parsers, offering search application designers great flexibility in controlling how\nqueries are parsed.",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "This section explains how to specify the query parser to be used. It also describes the syntax and features\nsupported by the main query parsers included with Solr and describes some other parsers that may be\nuseful for particular situations. There are some query parameters common to all Solr parsers; these are\ndiscussed in the section <span class=\"link\">Common Query Parameters</span>.",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "The parsers discussed in this Guide are:",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "<span class=\"link\">The Standard Query Parser</span>",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "<span class=\"link\">The DisMax Query Parser</span>",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "<span class=\"link\">The Extended DisMax Query Parser</span>",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "<span class=\"link\">Other Parsers</span>",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "The query parser plugins are all subclasses of <span class=\"link\">QParserPlugin</span>. If you have custom parsing needs, you may\nwant to extend that class to create your own query parser.",
    "hierarchy": [
      "Query Syntax and Parsing"
    ],
    "pageId": 425
  },
  {
    "content": "Several query parsers share supported query parameters.",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters"
    ],
    "pageId": 425
  },
  {
    "content": "The following sections describe Solr's common query parameters, which are supported by the <span class=\"link\">Search</span>\nRequestHandlers<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters"
    ],
    "pageId": 425
  },
  {
    "content": "The defType parameter selects the query parser that Solr should use to process the main query parameter\n(<span class=\"code\">q</span>) in the request. For example:",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "defType Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "defType=dismax",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "defType Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "If no <span class=\"code\">defType</span> parameter is specified, then by default, the <span class=\"link\">The Standard Query Parser</span> is used. (e.g.,\ndefType=lucene<span class=\"ff2 fs1\">)</span>",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "defType Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "The <span class=\"code\">sort</span> parameter arranges search results in either ascending (<span class=\"code\">asc</span>) or descending (<span class=\"code\">desc</span>) order. The\nparameter can be used with either numerical or alphabetical content. The directions can be entered in either\nall lowercase or all uppercase letters (i.e., both <span class=\"code\">asc</span> and <span class=\"code\">ASC</span> are accepted).",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "sort Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "Solr can sort query responses according to:",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "sort Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "Document scores",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "sort Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "<span class=\"link\">Function results</span>",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "sort Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "The value of any primitive field (numerics, string, boolean, dates, etc.) which has <span class=\"code\">docValues=\"true\"</span> (or\nmultiValued=\"false\"<span class=\"ff2 fs1\"> and </span>indexed=\"true\"<span class=\"ff2 fs1\">, in which case the indexed terms will used to build DocValue</span>",
    "hierarchy": [
      "Query Syntax and Parsing",
      "Common Query Parameters",
      "sort Parameter"
    ],
    "pageId": 425
  },
  {
    "content": "like structures on the fly at runtime)",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "A SortableTextField which implicitly uses <span class=\"ff2 fs1\">docValues=\"true\"</span> by default to allow sorting on the original\ninput string regardless of the analyzers used for Searching.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "A single-valued TextField that uses an analyzer (such as the KeywordTokenizer) that produces only a\nsingle term per document. TextField does not support <span class=\"ff2 fs1\">docValues=\"true\"</span>, but a DocValue-like structure\nwill be built on the fly at runtime.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "◦NOTE:<span class=\"ff1\"> If you want to be able to sort on a field whose contents you want to tokenize to facilitate</span>\nsearching, <span class=\"link\">use a </span><span class=\"ff2 fs1\">copyField</span><span class=\"link\"> directive</span> in the the Schema to clone the field. Then search on the field\nand sort on its clone.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "In the case of primitive fields, or SortableTextFields, that are <span class=\"ff2 fs1\">multiValued=\"true\"</span> the representative value\nused for each doc when sorting depends on the sort direction: The minimum value in each document is\nused for ascending (<span class=\"ff2 fs1\">asc</span>) sorting, while the maximal value in each document is used for descending (<span class=\"ff2 fs1\">desc</span>)\nsorting. This default behavior is equivilent to explicitly sorting using the 2 argument <span class=\"link\">field()</span> function:\nsort=field(name,min) asc<span class=\"ff1 fs0\"> and </span>sort=field(name,max) desc",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "The table below explains how Solr responds to various settings of the <span class=\"ff2 fs1\">sort</span> parameter.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "If the sort parameter is omitted, sorting is performed as though the\nparameter were set to <span class=\"ff2 fs1\">score desc</span>.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "score descSorts in descending order from the highest score to the lowest score.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "price ascSorts in ascending order of the price field",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "div(popularity,price) descSorts in descending order of the result of the function <span class=\"ff2 fs1\">popularity /</span>\nprice",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "inStock desc, price ascSorts by the contents of the <span class=\"ff2 fs1\">inStock</span> field in descending order, then when\nmultiple documents have the same value for the <span class=\"ff2 fs1\">inStock</span> field, those\nresults are sorted in ascending order by the contents of the price field.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "categories asc, price ascSorts by the lowest value of the (multivalued) <span class=\"ff2 fs1\">categories</span> field in\nascending order, then when multiple documents have the same lowest\ncategories<span class=\"ff1 fs0\"> value, those results are sorted in ascending order by the</span>\ncontents of the price field.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "Regarding the sort parameter's arguments:",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "A sort ordering must include a field name (or <span class=\"ff2 fs1\">score</span> as a pseudo field), followed by whitespace (escaped\nas + or <span class=\"ff2 fs1\">%20</span> in URL strings), followed by a sort direction (<span class=\"ff2 fs1\">asc</span> or <span class=\"ff2 fs1\">desc</span>).",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "Multiple sort orderings can be separated by a comma, using this syntax: <span class=\"ff2 fs1\">sort=<field</span>\nname><direction>,<field name><direction>],…",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "◦When more than one sort criteria is provided, the second entry will only be used if the first entry\nresults in a tie. If there is a third entry, it will only be used if the first AND second entries are tied. This\npattern continues with further entries.",
    "hierarchy": [
    ],
    "pageId": 426
  },
  {
    "content": "When specified, the <span class=\"code\">start</span> parameter specifies an offset into a query's result set and instructs Solr to begin\ndisplaying results from this offset.",
    "hierarchy": [
      "start Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "The default value is <span class=\"code\">0</span>. In other words, by default, Solr returns results without an offset, beginning where the\nresults themselves begin.",
    "hierarchy": [
      "start Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "Setting the <span class=\"code\">start</span> parameter to some other number, such as <span class=\"code\">3</span>, causes Solr to skip over the preceding\nrecords and start at the document identified by the offset.",
    "hierarchy": [
      "start Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "You can use the <span class=\"code\">start</span> parameter this way for paging. For example, if the <span class=\"code\">rows</span> parameter is set to 10, you\ncould display three successive pages of results by setting start to 0, then re-issuing the same query and\nsetting start to 10, then issuing the query again and setting start to 20.",
    "hierarchy": [
      "start Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "You can use the <span class=\"code\">rows</span> parameter to paginate results from a query. The parameter specifies the maximum\nnumber of documents from the complete result set that Solr should return to the client at one time.",
    "hierarchy": [
      "rows Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "The default value is <span class=\"code\">10</span>. That is, by default, Solr returns 10 documents at a time in response to a query.",
    "hierarchy": [
      "rows Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "The <span class=\"code\">fq</span> parameter defines a query that can be used to restrict the superset of documents that can be\nreturned, without influencing score. It can be very useful for speeding up complex queries, since the queries\nspecified with <span class=\"code\">fq</span> are cached independently of the main query. When a later query uses the same filter,\nthere's a cache hit, and filter results are returned quickly from the cache.",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "When using the <span class=\"code\">fq</span> parameter, keep in mind the following:",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "The <span class=\"code\">fq</span> parameter can be specified multiple times in a query. Documents will only be included in the\nresult if they are in the intersection of the document sets resulting from each instance of the parameter.\nIn the example below, only documents which have a popularity greater then 10 and have a section of 0\nwill match.",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "fq=popularity:[10 TO *]&fq=section:0",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "Filter queries can involve complicated Boolean queries. The above example could also be written as a\nsingle <span class=\"code\">fq</span> with two mandatory clauses like so:",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "fq=+popularity:[10 TO *] +section:0",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "The document sets from each filter query are cached independently. Thus, concerning the previous\nexamples: use a single <span class=\"code\">fq</span> containing two mandatory clauses if those clauses appear together often, and\nuse two separate <span class=\"code\">fq</span> parameters if they are relatively independent. (To learn about tuning cache sizes\nand making sure a filter cache actually exists, see <span class=\"link\">The Well-Configured Solr Instance</span>.)",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "It is also possible to use <span class=\"link\">filter(condition) syntax</span> inside the <span class=\"code\">fq</span> to cache clauses individually and - among",
    "hierarchy": [
      "fq (Filter Query) Parameter"
    ],
    "pageId": 427
  },
  {
    "content": "other things - to achieve union of cached filter queries.",
    "hierarchy": [
    ],
    "pageId": 428
  },
  {
    "content": "As with all parameters: special characters in an URL need to be properly escaped and encoded as hex\nvalues. Online tools are available to help you with URL-encoding. For example: <span class=\"link\">http://meyerweb.com/</span>\neric/tools/dencoder/<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 428
  },
  {
    "content": "The <span class=\"code\">fl</span> parameter limits the information included in a query response to a specified list of fields. The fields\nmust be either <span class=\"code\">stored=\"true\"</span> or <span class=\"code\">docValues=\"true\"`</span>.`",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "The field list can be specified as a space-separated or comma-separated list of field names. The string\n\"score\" can be used to indicate that the score of each document for the particular query should be returned\nas a field. The wildcard character <span class=\"code\">*</span> selects all the fields in the document which are either <span class=\"code\">stored=\"true\"</span> or\ndocValues=\"true\"<span class=\"ff1 fs0\"> and </span>useDocValuesAsStored=\"true\"<span class=\"ff1 fs0\"> (which is the default when docValues are enabled).</span>\nYou can also add pseudo-fields, functions and transformers to the field list request.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "This table shows some basic examples of how to use <span class=\"code\">fl</span>:",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "id name priceReturn only the id, name, and price fields.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "id,name,priceReturn only the id, name, and price fields.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "id name, priceReturn only the id, name, and price fields.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "id scoreReturn the id field and the score.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "*Return all the <span class=\"code\">stored</span> fields in each document, as well as any <span class=\"code\">docValues</span>\nfields that have <span class=\"code\">useDocValuesAsStored=\"true\"</span>. This is the default value of\nthe fl parameter.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "* scoreReturn all the fields in each document, along with each field's score.",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "*,dv_field_nameReturn all the <span class=\"code\">stored</span> fields in each document, and any <span class=\"code\">docValues</span> fields\nthat have <span class=\"code\">useDocValuesAsStored=\"true\"</span> and the docValues from\ndv_field_name even if it has <span class=\"code\">useDocValuesAsStored=\"false\"</span>",
    "hierarchy": [
      "fl (Field List) Parameter"
    ],
    "pageId": 428
  },
  {
    "content": "Functions<span class=\"fc0\"> can be computed for each document in the result and returned as a pseudo-field:</span>",
    "hierarchy": [
      "fl (Field List) Parameter",
      "Functions with fl"
    ],
    "pageId": 428
  },
  {
    "content": "fl=id,title,product(price,popularity)",
    "hierarchy": [
      "fl (Field List) Parameter",
      "Functions with fl"
    ],
    "pageId": 428
  },
  {
    "content": "Document Transformers<span class=\"fc0\"> can be used to modify the information returned about each documents in the</span>\nresults of a query:",
    "hierarchy": [
      "fl (Field List) Parameter",
      "Document Transformers with fl"
    ],
    "pageId": 428
  },
  {
    "content": "fl=id,title,[explain]",
    "hierarchy": [
      "fl (Field List) Parameter",
      "Document Transformers with fl"
    ],
    "pageId": 428
  },
  {
    "content": "You can change the key used to in the response for a field, function, or transformer by prefixing it with a\n`<span class=\"code\">\"displayName</span>:`\". For example:",
    "hierarchy": [
      "Field Name Aliases"
    ],
    "pageId": 429
  },
  {
    "content": "fl=id,sales_price:price,secret_sauce:prod(price,popularity),why_score:[explain style=nl]",
    "hierarchy": [
      "Field Name Aliases"
    ],
    "pageId": 429
  },
  {
    "content": "{",
    "hierarchy": [
      "Field Name Aliases"
    ],
    "pageId": 429
  },
  {
    "content": "Ê   <span class=\"fc2\">\"numFound\"</span>: <span class=\"fc3\">2</span>,\nÊ   <span class=\"fc2\">\"start\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"docs\"</span>: [{\nÊ       <span class=\"fc2\">\"id\"</span>: <span class=\"fc4\">\"6H500F0\"</span>,\nÊ       <span class=\"fc2\">\"secret_sauce\"</span>: <span class=\"fc3\">2100.0</span>,\nÊ       <span class=\"fc2\">\"sales_price\"</span>: <span class=\"fc3\">350.0</span>,\nÊ       <span class=\"fc2\">\"why_score\"</span>: {\nÊ           <span class=\"fc2\">\"match\"</span>: <span class=\"fc5\">true</span>,\nÊ           <span class=\"fc2\">\"value\"</span>: <span class=\"fc3\">1.052226</span>,\nÊ           <span class=\"fc2\">\"description\"</span>: <span class=\"fc4\">\"weight(features:cache in 2) [DefaultSimilarity], result of:\"</span>,\nÊ           <span class=\"fc2\">\"details\"</span>: [{\nÊ               <span class=\"fc4\">\"...\"</span>\n}]}}]}}",
    "hierarchy": [
      "Field Name Aliases"
    ],
    "pageId": 429
  },
  {
    "content": "The <span class=\"ff4 fs2\">debug</span> parameter can be specified multiple times and supports the following arguments:",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "debug=query: return debug information about the query only.",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "debug=timing: return debug information about how long the query took to process.",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "debug=results: return debug information about the score results (also known as \"explain\").",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "◦By default, score explanations are returned as large string values, using newlines and tab indenting\nfor structure & readability, but an additional <span class=\"ff4 fs2\">debug.explain.structured=true</span> parameter may be\nspecified to return this information as nested data structures native to the response format\nrequested by <span class=\"ff4 fs2\">wt</span>.\ndebug=all: return all available debug information about the request request. (alternatively usage:\ndebug=true<span class=\"ff2 fs0\">)</span>",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "For backwards compatibility with older versions of Solr, <span class=\"ff4 fs2\">debugQuery=true</span> may instead be specified as an\nalternative way to indicate <span class=\"ff4 fs2\">debug=all</span>",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "The default behavior is not to include debugging information.",
    "hierarchy": [
      "debug Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "The <span class=\"ff4 fs2\">explainOther</span> parameter specifies a Lucene query in order to identify a set of documents. If this\nparameter is included and is set to a non-blank value, the query will return debugging information, along\nwith the \"explain info\" of each document that matches the Lucene query, relative to the main query (which",
    "hierarchy": [
      "explainOther Parameter"
    ],
    "pageId": 429
  },
  {
    "content": "is specified by the q parameter). For example:",
    "hierarchy": [
    ],
    "pageId": 430
  },
  {
    "content": "q=supervillians&debugQuery=on&explainOther=id:juggernaut",
    "hierarchy": [
    ],
    "pageId": 430
  },
  {
    "content": "The query above allows you to examine the scoring explain info of the top matching documents, compare it\nto the explain info for documents matching <span class=\"ff2 fs1\">id:juggernaut</span>, and determine why the rankings are not as you\nexpect.",
    "hierarchy": [
    ],
    "pageId": 430
  },
  {
    "content": "The default value of this parameter is blank, which causes no extra \"explain info\" to be returned.",
    "hierarchy": [
    ],
    "pageId": 430
  },
  {
    "content": "This parameter specifies the amount of time, in milliseconds, allowed for a search to complete. If this time\nexpires before the search is complete, any partial results will be returned, but values such as <span class=\"ff2 fs1\">numFound</span>, <span class=\"link\">facet</span>\ncounts, and result <span class=\"link\">stats</span> may not be accurate for the entire result set.",
    "hierarchy": [
      "timeAllowed Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "This value is only checked at the time of:",
    "hierarchy": [
      "timeAllowed Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "1.Query Expansion, and\n2.Document collection",
    "hierarchy": [
      "timeAllowed Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "As this check is periodically performed, the actual time for which a request can be processed before it is\naborted would be marginally greater than or equal to the value of <span class=\"ff2 fs1\">timeAllowed</span>. If the request consumes\nmore time in other stages, custom components, etc., this parameter is not expected to abort the request.",
    "hierarchy": [
      "timeAllowed Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "This parameter may be set to either <span class=\"ff2 fs1\">true</span> or <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "segmentTerminateEarly Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "If set to <span class=\"ff2 fs1\">true</span>, and if <span class=\"link\">the mergePolicyFactory</span> for this collection is a <span class=\"ff2 fs1\">SortingMergePolicyFactory</span> which uses a\nsort<span class=\"ff1 fs0\"> option compatible with <span class=\"link\">the sort parameter</span> specified for this query, then Solr will attempt to use an</span>\nEarlyTerminatingSortingCollector<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "segmentTerminateEarly Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "If early termination is used, a <span class=\"ff2 fs1\">segmentTerminatedEarly</span> header will be included in the <span class=\"ff2 fs1\">responseHeader</span>.",
    "hierarchy": [
      "segmentTerminateEarly Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "Similar to using <span class=\"link\">the </span><span class=\"ff2 fs1\">timeAllowed</span><span class=\"link\"> Parameter</span>, when early segment termination happens values such as\nnumFound<span class=\"ff1 fs0\">, <span class=\"link\">Facet</span> counts, and result <span class=\"link\">Stats</span> may not be accurate for the entire result set.</span>",
    "hierarchy": [
      "segmentTerminateEarly Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "The default value of this parameter is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "segmentTerminateEarly Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "This parameter may be set to either <span class=\"ff2 fs1\">true</span> or <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "omitHeader Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "If set to <span class=\"ff2 fs1\">true</span>, this parameter excludes the header from the returned results. The header contains\ninformation about the request, such as the time it took to complete. The default value for this parameter is\nfalse<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "omitHeader Parameter"
    ],
    "pageId": 430
  },
  {
    "content": "The <span class=\"code\">wt</span> parameter selects the Response Writer that Solr should use to format the query's response. For\ndetailed descriptions of Response Writers, see <span class=\"link\">Response Writers</span>.",
    "hierarchy": [
      "wt Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "If you do not define the <span class=\"code\">wt</span> parameter in your queries, JSON will be returned as the format of the response.",
    "hierarchy": [
      "wt Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "Solr caches the results of all queries and filter queries by default. To disable result caching, set the\ncache=false<span class=\"ff2 fs1\"> parameter.</span>",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "You can also use the <span class=\"code\">cost</span> option to control the order in which non-cached filter queries are evaluated. This\nallows you to order less expensive non-cached filters before expensive non-cached filters.",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "For very high cost filters, if <span class=\"code\">cache=false</span> and <span class=\"code\">cost>=100</span> and the query implements the <span class=\"code\">PostFilter</span> interface,\na Collector will be requested from that query and used to filter documents after they have matched the main\nquery and all other filter queries. There can be multiple post filters; they are also ordered by cost.",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "For most queries the default behavior is <span class=\"code\">cost=0</span><span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>but some types of queries such as <span class=\"code\">{!frange}</span> default to\ncost=100<span class=\"ff2 fs1\">, because they are most efficient when used as a </span>PostFilter<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "For example:",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "This is an example of 3 regular filters, where all matching documents generated by each are computed up\nfront and cached independently:",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "q=some keywords\nfq=quantity_in_stock:[5 TO *]\nfq={!frange l=10 u=100}mul(popularity,price)\nfq={!frange cost=200 l=0}pow(mul(sum(1, query('tag:smartphone')), div(1,avg_rating)), 2.3)",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "These are the same filters run w/o caching. The simple range query on the <span class=\"code\">quantity_in_stock</span> field will be\nrun in parallel with the main query like a traditional lucene filter, while the 2 <span class=\"code\">frange</span> filters will only be\nchecked against each document has already matched the main query and the <span class=\"code\">quantity_in_stock</span> range\nquery<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>first the simpler <span class=\"code\">mul(popularity,price)</span> will be checked (because of it's implicit <span class=\"code\">cost=100</span>) and\nonly if it matches will the final very complex filter (with it’s higher <span class=\"code\">cost=200</span>) be checked.",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "q=some keywords\nfq={!cache=false}quantity_in_stock:[5 TO *]\nfq={!frange cache=false l=10 u=100}mul(popularity,price)\nfq={!frange cache=false cost=200 l=0}pow(mul(sum(1, query('tag:smartphone')), div(1,avg_rating)),\n2.3)",
    "hierarchy": [
      "cache Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "By default, Solr logs all parameters of requests. Set this parameter to restrict which parameters of a request\nare logged. This may help control logging to only those parameters considered important to your\norganization.",
    "hierarchy": [
      "logParamsList Parameter"
    ],
    "pageId": 431
  },
  {
    "content": "For example, you could define this like:",
    "hierarchy": [
    ],
    "pageId": 432
  },
  {
    "content": "logParamsList=q,fq",
    "hierarchy": [
    ],
    "pageId": 432
  },
  {
    "content": "And only the 'q' and 'fq' parameters will be logged.",
    "hierarchy": [
    ],
    "pageId": 432
  },
  {
    "content": "If no parameters should be logged, you can send <span class=\"ff2 fs1\">logParamsList</span> as empty (i.e., <span class=\"ff2 fs1\">logParamsList=</span>).",
    "hierarchy": [
    ],
    "pageId": 432
  },
  {
    "content": "This parameter not only applies to query requests, but to any kind of request to Solr.",
    "hierarchy": [
    ],
    "pageId": 432
  },
  {
    "content": "The <span class=\"ff2 fs1\">echoParams</span> parameter controls what information about request parameters is included in the response\nheader.",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "The <span class=\"ff2 fs1\">echoParams</span> parameter accepts the following values:",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "explicit: This is the default value. Only parameters included in the actual request, plus the <span class=\"ff2 fs1\">_</span> parameter\n(which is a 64-bit numeric timestamp) will be added to the params section of the response header.",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "all: Include all request parameters that contributed to the query. This will include everything defined in\nthe request handler definition found in <span class=\"ff2 fs1\">solrconfig.xml</span> as well as parameters included with the request,\nplus the <span class=\"ff2 fs1\">_</span> parameter. If a parameter is included in the request handler definition AND the request, it will\nappear multiple times in the response header.",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "none: Entirely removes the \"params\" section of the response header. No information about the request\nparameters will be available in the response.",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "Here is an example of a JSON response where the echoParams parameter was not included, so the default of\nexplicit<span class=\"ff1 fs0\"> is active. The request URL that created this response included three parameters - </span>q<span class=\"ff1 fs0\">, </span>wt<span class=\"ff1 fs0\">, and</span>\nindent<span class=\"ff1 fs0\">:</span>",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"responseHeader\"</span>: {\nÊ   <span class=\"fc3\">\"status\"</span>: <span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">\"QTime\"</span>: <span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">\"params\"</span>: {\nÊ     <span class=\"fc3\">\"q\"</span>: <span class=\"fc5\">\"solr\"</span>,\nÊ     <span class=\"fc3\">\"indent\"</span>: <span class=\"fc5\">\"true\"</span>,\nÊ     <span class=\"fc3\">\"wt\"</span>: <span class=\"fc5\">\"json\"</span>,\nÊ     <span class=\"fc3\">\"_\"</span>: <span class=\"fc5\">\"1458227751857\"</span>\nÊ   }\nÊ },\nÊ <span class=\"fc3\">\"response\"</span>: {\nÊ   <span class=\"fc3\">\"numFound\"</span>: <span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">\"start\"</span>: <span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">\"docs\"</span>: []\nÊ }\n}",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "This is what happens if a similar request is sent that adds <span class=\"ff2 fs1\">echoParams=all</span> to the three parameters used in\nthe previous example:",
    "hierarchy": [
      "echoParams Parameter"
    ],
    "pageId": 432
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ   <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"params\"</span>: {\nÊ     <span class=\"fc1\">\"q\"</span>: <span class=\"fc3\">\"solr\"</span>,\nÊ     <span class=\"fc1\">\"df\"</span>: <span class=\"fc3\">\"text\"</span>,\nÊ     <span class=\"fc1\">\"preferLocalShards\"</span>: <span class=\"fc3\">\"false\"</span>,\nÊ     <span class=\"fc1\">\"indent\"</span>: <span class=\"fc3\">\"true\"</span>,\nÊ     <span class=\"fc1\">\"echoParams\"</span>: <span class=\"fc3\">\"all\"</span>,\nÊ     <span class=\"fc1\">\"rows\"</span>: <span class=\"fc3\">\"10\"</span>,\nÊ     <span class=\"fc1\">\"wt\"</span>: <span class=\"fc3\">\"json\"</span>,\nÊ     <span class=\"fc1\">\"_\"</span>: <span class=\"fc3\">\"1458228887287\"</span>\nÊ   }\nÊ },\nÊ <span class=\"fc1\">\"response\"</span>: {\nÊ   <span class=\"fc1\">\"numFound\"</span>: <span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"start\"</span>: <span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"docs\"</span>: []\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 433
  },
  {
    "content": "Solr's default Query Parser is also known as the “<span class=\"ff1 fs2\">lucene</span>” parser.",
    "hierarchy": [
      "The Standard Query Parser"
    ],
    "pageId": 433
  },
  {
    "content": "The key advantage of the standard query parser is that it supports a robust and fairly intuitive syntax\nallowing you to create a variety of structured queries. The largest disadvantage is that it's very intolerant of\nsyntax errors, as compared with something like the <span class=\"link\">DisMax</span> query parser which is designed to throw as few\nerrors as possible.",
    "hierarchy": [
      "The Standard Query Parser"
    ],
    "pageId": 433
  },
  {
    "content": "In addition to the <span class=\"link\">Common Query Parameters</span>, <span class=\"link\">Faceting Parameters</span>, <span class=\"link\">Highlighting Parameters</span>, and\nMoreLikeThis Parameters<span class=\"fc0\">, the standard query parser supports the parameters described in the table below.</span>",
    "hierarchy": [
      "The Standard Query Parser",
      "Standard Query Parser Parameters"
    ],
    "pageId": 433
  },
  {
    "content": "q\nDefines a query using standard query syntax. This parameter is mandatory.",
    "hierarchy": [
      "The Standard Query Parser",
      "Standard Query Parser Parameters"
    ],
    "pageId": 433
  },
  {
    "content": "q.op\nSpecifies the default operator for query expressions, overriding the default operator specified in the\nSchema. Possible values are \"AND\" or \"OR\".",
    "hierarchy": [
      "The Standard Query Parser",
      "Standard Query Parser Parameters"
    ],
    "pageId": 433
  },
  {
    "content": "df\nSpecifies a default field, overriding the definition of a default field in the Schema.",
    "hierarchy": [
      "The Standard Query Parser",
      "Standard Query Parser Parameters"
    ],
    "pageId": 433
  },
  {
    "content": "sow\nSplit on whitespace. If set to <span class=\"ff1 fs2\">true</span>, text analysis is invoked separately for each individual whitespace-\nseparated term. The default is <span class=\"ff1 fs2\">false</span>; whitespace-separated term sequences will be provided to text\nanalysis in one shot, enabling proper function of analysis filters that operate over term sequences, e.g.,",
    "hierarchy": [
      "The Standard Query Parser",
      "Standard Query Parser Parameters"
    ],
    "pageId": 433
  },
  {
    "content": "multi-word synonyms and shingles.",
    "hierarchy": [
    ],
    "pageId": 434
  },
  {
    "content": "Default parameter values are specified in <span class=\"ff2 fs1\">solrconfig.xml</span>, or overridden by query-time values in the\nrequest.",
    "hierarchy": [
    ],
    "pageId": 434
  },
  {
    "content": "By default, the response from the standard query parser contains one <span class=\"ff2 fs1\"><result></span> block, which is unnamed. If\nthe <span class=\"ff2 fs1\">debug</span><span class=\"link\"> parameter</span> is used, then an additional <span class=\"ff2 fs1\"><lst></span> block will be returned, using the name \"debug\". This\nwill contain useful debugging info, including the original query string, the parsed query string, and explain\ninfo for each document in the <result> block. If the <span class=\"ff2 fs1\">explainOther</span><span class=\"link\"> parameter</span> is also used, then additional\nexplain info will be provided for all the documents matching that query.",
    "hierarchy": [
      "Standard Query Parser Response"
    ],
    "pageId": 434
  },
  {
    "content": "This section presents examples of responses from the standard query parser.",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "The URL below submits a simple query and requests the XML Response Writer to use indentation to make\nthe XML response more readable.",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=id:SP2514N&wt=xml",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "Results:",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "Ê<span class=\"fc3\"><doc></span>\nÊ <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"cat\"<span class=\"fc3\">><str></span></span>electronics<span class=\"fc3\"></str><str></span>hard drive<span class=\"fc3\"></str></arr></span>\nÊ <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"features\"<span class=\"fc3\">><str></span></span>7200RPM, 8MB cache, IDE Ultra ATA-133<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str></span>NoiseGuard, SilentSeek technology, Fluid Dynamic Bearing (FDB) motor<span class=\"fc3\"></str></arr></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>SP2514N<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><bool</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"inStock\"<span class=\"fc3\">></span></span>true<span class=\"fc3\"></bool></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"manu\"<span class=\"fc3\">></span></span>Samsung Electronics Co. Ltd.<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"name\"<span class=\"fc3\">></span></span>Samsung SpinPoint P120 SP2514N - hard drive - 250 GB - ATA-133<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"popularity\"<span class=\"fc3\">></span></span>6<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"><float</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"price\"<span class=\"fc3\">></span></span>92.0<span class=\"fc3\"></float></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"sku\"<span class=\"fc3\">></span></span>SP2514N<span class=\"fc3\"></str></span>\nÊ<span class=\"fc3\"></doc></span>",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "Here's an example of a query with a limited field list.",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=id:SP2514N&fl=id+name&wt=xml",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "Results:",
    "hierarchy": [
      "Standard Query Parser Response",
      "Sample Responses"
    ],
    "pageId": 434
  },
  {
    "content": "Ê<span class=\"fc0\"><doc></span>\nÊ <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc0\">></span></span>SP2514N<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">></span></span>Samsung SpinPoint P120 SP2514N - hard drive - 250 GB - ATA-133<span class=\"fc0\"></str></span>\nÊ<span class=\"fc0\"></doc></span>",
    "hierarchy": [
    ],
    "pageId": 435
  },
  {
    "content": "A query to the standard query parser is broken up into terms and operators. There are two types of terms:\nsingle terms and phrases.",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser"
    ],
    "pageId": 435
  },
  {
    "content": "A single term is a single word such as \"test\" or \"hello\"",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser"
    ],
    "pageId": 435
  },
  {
    "content": "A phrase is a group of words surrounded by double quotes such as \"hello dolly\"",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser"
    ],
    "pageId": 435
  },
  {
    "content": "Multiple terms can be combined together with Boolean operators to form more complex queries (as\ndescribed below).",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser"
    ],
    "pageId": 435
  },
  {
    "content": "It is important that the analyzer used for queries parses terms and phrases in a way that is\nconsistent with the way the analyzer used for indexing parses terms and phrases;\notherwise, searches may produce unexpected results.",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser"
    ],
    "pageId": 435
  },
  {
    "content": "Solr supports a variety of term modifiers that add flexibility or precision, as needed, to searches. These\nmodifiers include wildcard characters, characters for making a search \"fuzzy\" or more general, and so on.\nThe sections below describe these modifiers in detail.",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser",
      "Term Modifiers"
    ],
    "pageId": 435
  },
  {
    "content": "Solr's standard query parser supports single and multiple character wildcard searches within single terms.\nWildcard characters can be applied to single terms, but not to search phrases.",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser",
      "Wildcard Searches"
    ],
    "pageId": 435
  },
  {
    "content": "Single character (matches a\nsingle character)\n?The search string <span class=\"ff1 fs3\">te?t</span> would match both test and\ntext.",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser",
      "Wildcard Searches"
    ],
    "pageId": 435
  },
  {
    "content": "Multiple characters (matches\nzero or more sequential\ncharacters)\n*The wildcard search: <span class=\"ff1 fs3\">tes*</span> would match test, testing,\nand tester. You can also use wildcard characters in\nthe middle of a term. For example: <span class=\"ff1 fs3\">te*t</span> would\nmatch test and text. <span class=\"ff1 fs3\">*est</span> would match pest and test.",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser",
      "Wildcard Searches"
    ],
    "pageId": 435
  },
  {
    "content": "Solr's standard query parser supports fuzzy searches based on the Damerau-Levenshtein Distance or Edit\nDistance algorithm. Fuzzy searches discover terms that are similar to a specified term without necessarily",
    "hierarchy": [
      "Specifying Terms for the Standard Query Parser",
      "Fuzzy Searches"
    ],
    "pageId": 435
  },
  {
    "content": "being an exact match. To perform a fuzzy search, use the tilde ~ symbol at the end of a single-word term. For\nexample, to search for a term similar in spelling to \"roam,\" use the fuzzy search:",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "roam~",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "This search will match terms like roams, foam, & foams. It will also match the word \"roam\" itself.",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "An optional distance parameter specifies the maximum number of edits allowed, between 0 and 2,\ndefaulting to 2. For example:",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "roam~1",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "This will match terms like roams & foam - but not foams since it has an edit distance of \"2\".",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "In many cases, stemming (reducing terms to a common stem) can produce similar effects\nto fuzzy searches and wildcard searches.",
    "hierarchy": [
    ],
    "pageId": 436
  },
  {
    "content": "A proximity search looks for terms that are within a specific distance from one another.",
    "hierarchy": [
      "Proximity Searches"
    ],
    "pageId": 436
  },
  {
    "content": "To perform a proximity search, add the tilde character ~ and a numeric value to the end of a search phrase.\nFor example, to search for a \"apache\" and \"jakarta\" within 10 words of each other in a document, use the\nsearch:",
    "hierarchy": [
      "Proximity Searches"
    ],
    "pageId": 436
  },
  {
    "content": "\"jakarta apache\"~10",
    "hierarchy": [
      "Proximity Searches"
    ],
    "pageId": 436
  },
  {
    "content": "The distance referred to here is the number of term movements needed to match the specified phrase. In\nthe example above, if \"apache\" and \"jakarta\" were 10 spaces apart in a field, but \"apache\" appeared before\n\"jakarta\", more than 10 term movements would be required to move the terms together and position\n\"apache\" to the right of \"jakarta\" with a space in between.",
    "hierarchy": [
      "Proximity Searches"
    ],
    "pageId": 436
  },
  {
    "content": "A range search specifies a range of values for a field (a range with an upper bound and a lower bound). The\nquery matches documents whose values for the specified field or fields fall within the range. Range queries\ncan be inclusive or exclusive of the upper and lower bounds. Sorting is done lexicographically, except on\nnumeric fields. For example, the range query below matches all documents whose <span class=\"ff2 fs1\">popularity</span> field has a\nvalue between 52 and 10,000, inclusive.",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "popularity:[52 TO 10000]",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "Range queries are not limited to date fields or even numerical fields. You could also use range queries with\nnon-date fields:",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "title:{Aida TO Carmen}",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "This will find all documents whose titles are between Aida and Carmen, but not including Aida and Carmen.",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "The brackets around a query determine its inclusiveness.",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "Square brackets <span class=\"ff2 fs1\">[</span> & <span class=\"ff2 fs1\">]</span> denote an inclusive range query that matches values including the upper and\nlower bound.",
    "hierarchy": [
      "Range Searches"
    ],
    "pageId": 436
  },
  {
    "content": "<span class=\"ls1\">Curly brackets <span class=\"ff2 fs1\">{</span> & <span class=\"ff2 fs1\">}</span> denote an exclusive range query that matches values between the upper and lower</span>\nbounds, but excluding the upper and lower bounds themselves.",
    "hierarchy": [
    ],
    "pageId": 437
  },
  {
    "content": "<span class=\"ls1\">You can mix these types so one end of the range is inclusive and the other is exclusive. Here's an</span>\nexample: <span class=\"ff2 fs1\">count:{1 TO 10]</span>",
    "hierarchy": [
    ],
    "pageId": 437
  },
  {
    "content": "Lucene/Solr provides the relevance level of matching documents based on the terms found. To boost a term\nuse the caret symbol <span class=\"ff2 fs1\">^</span> with a boost factor (a number) at the end of the term you are searching. The higher\nthe boost factor, the more relevant the term will be.",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "Boosting allows you to control the relevance of a document by boosting its term. For example, if you are\nsearching for",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "\"jakarta apache\" and you want the term \"jakarta\" to be more relevant, you can boost it by adding the ^\nsymbol along with the boost factor immediately after the term. For example, you could type:",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "jakarta^4 apache",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "This will make documents with the term jakarta appear more relevant. You can also boost Phrase Terms as\nin the example:",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "\"jakarta apache\"^4 \"Apache Lucene\"",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "By default, the boost factor is 1. Although the boost factor must be positive, it can be less than 1 (for\nexample, it could be 0.2).",
    "hierarchy": [
      "Boosting a Term with \"^\""
    ],
    "pageId": 437
  },
  {
    "content": "Constant score queries are created with <span class=\"ff2 fs1\"><query_clause>^=<score></span>, which sets the entire clause to the\nspecified score for any documents matching that clause. This is desirable when you only care about matches\nfor a particular clause and don't want other relevancy factors such as term frequency (the number of times\nthe term appears in the field) or inverse document frequency (a measure across the whole index for how\nrare a term is in a field).",
    "hierarchy": [
      "Constant Score with \"^=\""
    ],
    "pageId": 437
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Constant Score with \"^=\""
    ],
    "pageId": 437
  },
  {
    "content": "(description:blue OR color:blue)^=1.0 text:shoes",
    "hierarchy": [
      "Constant Score with \"^=\""
    ],
    "pageId": 437
  },
  {
    "content": "Data indexed in Solr is organized in fields, which are <span class=\"link\">defined in the Solr Schema</span>. Searches can take\nadvantage of fields to add precision to queries. For example, you can search for a term only in a specific\nfield, such as a title field.",
    "hierarchy": [
      "Querying Specific Fields"
    ],
    "pageId": 437
  },
  {
    "content": "The Schema defines one field as a default field. If you do not specify a field in a query, Solr searches only the\ndefault field. Alternatively, you can specify a different field or a combination of fields in a query.",
    "hierarchy": [
      "Querying Specific Fields"
    ],
    "pageId": 437
  },
  {
    "content": "To specify a field, type the field name followed by a colon \":\" and then the term you are searching for within\nthe field.",
    "hierarchy": [
      "Querying Specific Fields"
    ],
    "pageId": 437
  },
  {
    "content": "For example, suppose an index contains two fields, title and text,and that text is the default field. If you want\nto find a document called \"The Right Way\" which contains the text \"don't go this way,\" you could include\neither of the following terms in your search query:",
    "hierarchy": [
    ],
    "pageId": 438
  },
  {
    "content": "title:\"The Right Way\" AND text:go",
    "hierarchy": [
    ],
    "pageId": 438
  },
  {
    "content": "title:\"Do it right\" AND go",
    "hierarchy": [
    ],
    "pageId": 438
  },
  {
    "content": "Since text is the default field, the field indicator is not required; hence the second query above omits it.",
    "hierarchy": [
    ],
    "pageId": 438
  },
  {
    "content": "The field is only valid for the term that it directly precedes, so the query <span class=\"ff2 fs1\">title:Do it right</span> will find only\n\"Do\" in the title field. It will find \"it\" and \"right\" in the default field (in this case the text field).",
    "hierarchy": [
    ],
    "pageId": 438
  },
  {
    "content": "Boolean operators allow you to apply Boolean logic to queries, requiring the presence or absence of specific\nterms or conditions in fields in order to match documents. The table below summarizes the Boolean\noperators supported by the standard query parser.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "AND\n&&\nRequires both terms on either side of the\nBoolean operator to be present for a\nmatch.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "NOT\n!\nRequires that the following term not be\npresent.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "OR\n||\nRequires that either term (or both terms)\nbe present for a match.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "+\nRequires that the following term be\npresent.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "-\nProhibits the following term (that is,\nmatches on fields or documents that do\nnot include that term). The <span class=\"ff2 fs1\">-</span> operator is\nfunctionally similar to the Boolean\noperator <span class=\"ff2 fs1\">!</span>. Because it's used by popular\nsearch engines such as Google, it may be\nmore familiar to some user communities.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "Boolean operators allow terms to be combined through logic operators. Lucene supports AND, “+”, OR, NOT\nand “-” as Boolean operators.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "When specifying Boolean operators with keywords such as AND or NOT, the keywords\nmust appear in all uppercase.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "The standard query parser supports all the Boolean operators listed in the table above. The\nDisMax query parser supports only <span class=\"ff2 fs1\">+</span> and <span class=\"ff2 fs1\">-</span>.",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "The OR operator is the default conjunction operator. This means that if there is no Boolean operator\nbetween two terms, the OR operator is used. The OR operator links two terms and finds a matching",
    "hierarchy": [
      "Boolean Operators Supported by the Standard Query Parser"
    ],
    "pageId": 438
  },
  {
    "content": "document if either of the terms exist in a document. This is equivalent to a union using sets. The symbol ||\ncan be used in place of the word OR.",
    "hierarchy": [
    ],
    "pageId": 439
  },
  {
    "content": "To search for documents that contain either \"jakarta apache\" or just \"jakarta,\" use the query:",
    "hierarchy": [
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" jakarta",
    "hierarchy": [
    ],
    "pageId": 439
  },
  {
    "content": "or",
    "hierarchy": [
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" OR jakarta",
    "hierarchy": [
    ],
    "pageId": 439
  },
  {
    "content": "The <span class=\"ff2 fs1\">+</span> symbol (also known as the \"required\" operator) requires that the term after the <span class=\"ff2 fs1\">+</span> symbol exist\nsomewhere in a field in at least one document in order for the query to return a match.",
    "hierarchy": [
      "The Boolean Operator \"+\""
    ],
    "pageId": 439
  },
  {
    "content": "For example, to search for documents that must contain \"jakarta\" and that may or may not contain\n\"lucene,\" use the following query:",
    "hierarchy": [
      "The Boolean Operator \"+\""
    ],
    "pageId": 439
  },
  {
    "content": "+jakarta lucene",
    "hierarchy": [
      "The Boolean Operator \"+\""
    ],
    "pageId": 439
  },
  {
    "content": "This operator is supported by both the standard query parser and the DisMax query parser.",
    "hierarchy": [
      "The Boolean Operator \"+\""
    ],
    "pageId": 439
  },
  {
    "content": "The AND operator matches documents where both terms exist anywhere in the text of a single document.\nThis is equivalent to an intersection using sets. The symbol <span class=\"ff2 fs1\">&&</span> can be used in place of the word AND.",
    "hierarchy": [
      "The Boolean Operator AND (\"&&\")"
    ],
    "pageId": 439
  },
  {
    "content": "To search for documents that contain \"jakarta apache\" and \"Apache Lucene,\" use either of the following\nqueries:",
    "hierarchy": [
      "The Boolean Operator AND (\"&&\")"
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" AND \"Apache Lucene\"",
    "hierarchy": [
      "The Boolean Operator AND (\"&&\")"
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" && \"Apache Lucene\"",
    "hierarchy": [
      "The Boolean Operator AND (\"&&\")"
    ],
    "pageId": 439
  },
  {
    "content": "The NOT operator excludes documents that contain the term after NOT. This is equivalent to a difference\nusing sets. The symbol <span class=\"ff2 fs1\">!</span> can be used in place of the word NOT.",
    "hierarchy": [
      "The Boolean Operator NOT (\"!\")"
    ],
    "pageId": 439
  },
  {
    "content": "The following queries search for documents that contain the phrase \"jakarta apache\" but do not contain the\nphrase \"Apache Lucene\":",
    "hierarchy": [
      "The Boolean Operator NOT (\"!\")"
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" NOT \"Apache Lucene\"",
    "hierarchy": [
      "The Boolean Operator NOT (\"!\")"
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" ! \"Apache Lucene\"",
    "hierarchy": [
      "The Boolean Operator NOT (\"!\")"
    ],
    "pageId": 439
  },
  {
    "content": "The <span class=\"ff2 fs1\">-</span> symbol or \"prohibit\" operator excludes documents that contain the term after the <span class=\"ff2 fs1\">-</span> symbol.",
    "hierarchy": [
      "The Boolean Operator \"-\""
    ],
    "pageId": 439
  },
  {
    "content": "For example, to search for documents that contain \"jakarta apache\" but not \"Apache Lucene,\" use the\nfollowing query:",
    "hierarchy": [
      "The Boolean Operator \"-\""
    ],
    "pageId": 439
  },
  {
    "content": "\"jakarta apache\" -\"Apache Lucene\"",
    "hierarchy": [
      "The Boolean Operator \"-\""
    ],
    "pageId": 439
  },
  {
    "content": "Solr gives the following characters special meaning when they appear in a query:",
    "hierarchy": [
      "Escaping Special Characters"
    ],
    "pageId": 440
  },
  {
    "content": "+<span class=\"ff2 fs0\"> </span>-<span class=\"ff2 fs0\"> </span>&&<span class=\"ff2 fs0\"> </span>||<span class=\"ff2 fs0\"> </span>!<span class=\"ff2 fs0\"> </span>(<span class=\"ff2 fs0\"> </span>)<span class=\"ff2 fs0\"> </span>{<span class=\"ff2 fs0\"> </span>}<span class=\"ff2 fs0\"> </span>[<span class=\"ff2 fs0\"> </span>]<span class=\"ff2 fs0\"> </span>^<span class=\"ff2 fs0\"> </span>\"<span class=\"ff2 fs0\"> </span>~<span class=\"ff2 fs0\"> </span>*<span class=\"ff2 fs0\"> </span>?<span class=\"ff2 fs0\"> </span>:<span class=\"ff2 fs0\"> </span>/",
    "hierarchy": [
      "Escaping Special Characters"
    ],
    "pageId": 440
  },
  {
    "content": "To make Solr interpret any of these characters literally, rather as a special character, precede the character\nwith a backslash character <span class=\"code\">\\</span>. For example, to search for (1+1):2 without having Solr interpret the plus sign\nand parentheses as special characters for formulating a sub-query with two terms, escape the characters by\npreceding each one with a backslash:",
    "hierarchy": [
      "Escaping Special Characters"
    ],
    "pageId": 440
  },
  {
    "content": "\\(1\\+1\\)\\:2",
    "hierarchy": [
      "Escaping Special Characters"
    ],
    "pageId": 440
  },
  {
    "content": "Lucene/Solr supports using parentheses to group clauses to form sub-queries. This can be very useful if you\nwant to control the Boolean logic for a query.",
    "hierarchy": [
      "Grouping Terms to Form Sub-Queries"
    ],
    "pageId": 440
  },
  {
    "content": "The query below searches for either \"jakarta\" or \"apache\" and \"website\":",
    "hierarchy": [
      "Grouping Terms to Form Sub-Queries"
    ],
    "pageId": 440
  },
  {
    "content": "(jakarta OR apache) AND website",
    "hierarchy": [
      "Grouping Terms to Form Sub-Queries"
    ],
    "pageId": 440
  },
  {
    "content": "This adds precision to the query, requiring that the term \"website\" exist, along with either term \"jakarta\"\nand \"apache.\"",
    "hierarchy": [
      "Grouping Terms to Form Sub-Queries"
    ],
    "pageId": 440
  },
  {
    "content": "To apply two or more Boolean operators to a single field in a search, group the Boolean clauses within\nparentheses. For example, the query below searches for a title field that contains both the word \"return\"\nand the phrase \"pink panther\":",
    "hierarchy": [
      "Grouping Terms to Form Sub-Queries",
      "Grouping Clauses within a Field"
    ],
    "pageId": 440
  },
  {
    "content": "title:(+return +\"pink panther\")",
    "hierarchy": [
      "Grouping Terms to Form Sub-Queries",
      "Grouping Clauses within a Field"
    ],
    "pageId": 440
  },
  {
    "content": "C-Style comments are supported in query strings.",
    "hierarchy": [
      "Comments in Queries"
    ],
    "pageId": 440
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Comments in Queries"
    ],
    "pageId": 440
  },
  {
    "content": "\"jakarta apache\" /* this is a comment in the middle of a normal query string */ OR jakarta",
    "hierarchy": [
      "Comments in Queries"
    ],
    "pageId": 440
  },
  {
    "content": "Comments may be nested.",
    "hierarchy": [
      "Comments in Queries"
    ],
    "pageId": 440
  },
  {
    "content": "Solr's standard query parser originated as a variation of Lucene’s \"classic\" QueryParser. It diverges in the\nfollowing ways:",
    "hierarchy": [
      "Parser"
    ],
    "pageId": 440
  },
  {
    "content": "A <span class=\"code\">*</span> may be used for either or both endpoints to specify an open-ended range query",
    "hierarchy": [
      "Parser"
    ],
    "pageId": 440
  },
  {
    "content": "◦field:[* TO 100]<span class=\"ff2 fs0\"> finds all field values less than or equal to 100</span>",
    "hierarchy": [
      "Parser"
    ],
    "pageId": 440
  },
  {
    "content": "◦<span class=\"ff2 fs1 ls1\">field:[100 TO *]<span class=\"code\"> finds all field values greater than or equal to 100</span></span>\n◦<span class=\"ff2 fs1 ls1\">field:[* TO *]<span class=\"code\"> matches all documents with the field</span></span>\n<span class=\"ls1\">Pure negative queries (all clauses prohibited) are allowed (only as a top-level clause)</span>",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "◦<span class=\"ff2 fs1 ls1\">-inStock:false<span class=\"code\"> finds all field values where inStock is not false</span></span>\n◦<span class=\"ff2 fs1 ls1\">-field:[* TO *]<span class=\"code\"> finds all documents without a value for field</span></span>\n<span class=\"ls1\">Support for embedded Solr queries (sub-queries) using any type of query parser as a nested clause</span>\nusing the local-params syntax.",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "◦\ninStock:true OR {!dismax qf='name manu' v='ipod'}",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "Gotcha: Be careful not to start your query with <span class=\"ff2 fs1\">{!</span> at the very beginning, which changes the parsing of\nthe entire query string, which may not be what you want if there are additional clauses. So flipping\nthe example above so the sub-query comes first would fail to work as expected without a leading\nspace.",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "Sub-queries can also be done with the magic field <span class=\"ff2 fs1\">_query_</span> and for function queries with the magic\nfield <span class=\"ff2 fs1\">_val_</span> but it should be considered deprecated since it is less clear. Example:\n_val_:\"recip(rord(myfield),1,2,3)\"",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "<span class=\"ls1\">Support for a special <span class=\"ff2 fs1\">filter(…)</span> syntax to indicate that some query clauses should be cached in the filter</span>\ncache (as a constant score boolean query). This allows sub-queries to be cached and re-used in other\nqueries. For example <span class=\"ff2 fs1\">inStock:true</span> will be cached and re-used in all three of the queries below:",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "◦\nq=features:songs OR filter(inStock:true)\n◦\nq=+manu:Apple +filter(inStock:true)\n◦\nq=+manu:Apple & fq=inStock:true",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "This can even be used to cache individual clauses of complex filter queries. In the first query below, 3\nitems will be added to the filter cache (the top level <span class=\"ff2 fs1\">fq</span> and both <span class=\"ff2 fs1\">filter(…)</span> clauses) and in the second\nquery, there will be 2 cache hits, and one new cache insertion (for the new top level <span class=\"ff2 fs1\">fq</span>):",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "◦\nq=features:songs & fq=+filter(inStock:true) +filter(price:[* TO 100])\n◦\nq=manu:Apple & fq=-filter(inStock:true) -filter(price:[* TO 100])\n<span class=\"ls1\">Range queries (\"[a TO z]\"), prefix queries (\"a*\"), and wildcard queries (\"a*b\") are constant-scoring (all</span>\nmatching documents get an equal score). The scoring factors TF, IDF, index boost, and \"coord\" are not\nused. There is no limitation on the number of terms that match (as there was in past versions of Lucene).",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "<span class=\"ls1\">Constant score queries are created with <span class=\"ff2 fs1\"><query_clause>^=<score></span>, which sets the entire clause to the</span>\nspecified score for any documents matching that clause:",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "◦\nq=(description:blue color:blue)^=1.0 title:blue^=5.0",
    "hierarchy": [
    ],
    "pageId": 441
  },
  {
    "content": "Queries against date based fields must use the <span class=\"link\">appropriate date formating</span>. Queries for exact date values\nwill require quoting or escaping since <span class=\"ff2 fs1\">:</span> is the parser syntax used to denote a field query:",
    "hierarchy": [
      "Specifying Dates and Times"
    ],
    "pageId": 441
  },
  {
    "content": "\ncreatedate:1976-03-06T23\\:59\\:59.999Z",
    "hierarchy": [
      "Specifying Dates and Times"
    ],
    "pageId": 441
  },
  {
    "content": "\ncreatedate:\"1976-03-06T23:59:59.999Z\"",
    "hierarchy": [
      "Specifying Dates and Times"
    ],
    "pageId": 441
  },
  {
    "content": "\ncreatedate:[1976-03-06T23:59:59.999Z TO *]",
    "hierarchy": [
      "Specifying Dates and Times"
    ],
    "pageId": 441
  },
  {
    "content": "\ncreatedate:[1995-12-31T23:59:59.999Z TO 2007-03-06T00:00:00Z]",
    "hierarchy": [
    ],
    "pageId": 442
  },
  {
    "content": "\ntimestamp:[* TO NOW]",
    "hierarchy": [
    ],
    "pageId": 442
  },
  {
    "content": "\npubdate:[NOW-1YEAR/DAY TO NOW/DAY+1DAY]",
    "hierarchy": [
    ],
    "pageId": 442
  },
  {
    "content": "\ncreatedate:[1976-03-06T23:59:59.999Z TO 1976-03-06T23:59:59.999Z+1YEAR]",
    "hierarchy": [
    ],
    "pageId": 442
  },
  {
    "content": "\ncreatedate:[1976-03-06T23:59:59.999Z/YEAR TO 1976-03-06T23:59:59.999Z]",
    "hierarchy": [
    ],
    "pageId": 442
  },
  {
    "content": "The DisMax query parser is designed to process simple phrases (without complex syntax) entered by users\nand to search for individual terms across several fields using different weighting (boosts) based on the\nsignificance of each field. Additional options enable users to influence the score based on rules specific to\neach use case (independent of user input).",
    "hierarchy": [
      "The DisMax Query Parser"
    ],
    "pageId": 442
  },
  {
    "content": "In general, the DisMax query parser's interface is more like that of Google than the interface of the 'lucene'\nSolr query parser. This similarity makes DisMax the appropriate query parser for many consumer\napplications. It accepts a simple syntax, and it rarely produces error messages.",
    "hierarchy": [
      "The DisMax Query Parser"
    ],
    "pageId": 442
  },
  {
    "content": "The DisMax query parser supports an extremely simplified subset of the Lucene QueryParser syntax. As in\nLucene, quotes can be used to group phrases, and +/- can be used to denote mandatory and optional\nclauses. All other Lucene query parser special characters (except AND and OR) are escaped to simplify the\nuser experience. The DisMax query parser takes responsibility for building a good query from the user's\ninput using Boolean clauses containing DisMax queries across fields and boosts specified by the user. It also\nlets the Solr administrator provide additional boosting queries, boosting functions, and filtering queries to\nartificially affect the outcome of all searches. These options can all be specified as default parameters for the\nrequest handler in the <span class=\"ff2 fs1\">solrconfig.xml</span> file or overridden in the Solr query URL.",
    "hierarchy": [
      "The DisMax Query Parser"
    ],
    "pageId": 442
  },
  {
    "content": "Interested in the technical concept behind the DisMax name? DisMax stands for Maximum Disjunction.\nHere's a definition of a Maximum Disjunction or \"DisMax\" query:",
    "hierarchy": [
      "The DisMax Query Parser"
    ],
    "pageId": 442
  },
  {
    "content": "Whether or not you remember this explanation, do remember that the DisMax Query Parser was primarily\ndesigned to be easy to use and to accept almost any input without returning an error.",
    "hierarchy": [
      "The DisMax Query Parser"
    ],
    "pageId": 442
  },
  {
    "content": "In addition to the common request parameters, highlighting parameters, and simple facet parameters, the\nDisMax query parser supports the parameters described below. Like the standard query parser, the DisMax\nquery parser allows default parameter values to be specified in <span class=\"ff2 fs1\">solrconfig.xml</span>, or overridden by query-\ntime values in the request.",
    "hierarchy": [
      "The DisMax Query Parser",
      "DisMax Query Parser Parameters"
    ],
    "pageId": 442
  },
  {
    "content": "The sections below explain these parameters in detail.",
    "hierarchy": [
      "The DisMax Query Parser",
      "DisMax Query Parser Parameters"
    ],
    "pageId": 442
  },
  {
    "content": "The <span class=\"ff2 fs1\">q</span> parameter defines the main \"query\" constituting the essence of the search. The parameter supports\nraw input strings provided by users with no special escaping. The + and - characters are treated as",
    "hierarchy": [
      "The DisMax Query Parser",
      "DisMax Query Parser Parameters",
      "q Parameter"
    ],
    "pageId": 442
  },
  {
    "content": "\"mandatory\" and \"prohibited\" modifiers for terms. Text wrapped in balanced quote characters (for\nexample, \"San Jose\") is treated as a phrase. Any query containing an odd number of quote characters is\nevaluated as if there were no quote characters at all.",
    "hierarchy": [
    ],
    "pageId": 443
  },
  {
    "content": "The <span class=\"code\">q</span> parameter does not support wildcard characters such as *.",
    "hierarchy": [
    ],
    "pageId": 443
  },
  {
    "content": "If specified, the <span class=\"code\">q.alt</span> parameter defines a query (which by default will be parsed using standard query\nparsing syntax) when the main q parameter is not specified or is blank. The <span class=\"code\">q.alt</span> parameter comes in\nhandy when you need something like a query to match all documents (don't forget <span class=\"code\">&rows=0</span> for that one!) in\norder to get collection-wide faceting counts.",
    "hierarchy": [
      "q.alt Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "The <span class=\"code\">qf</span> parameter introduces a list of fields, each of which is assigned a boost factor to increase or decrease\nthat particular field's importance in the query. For example, the query below:",
    "hierarchy": [
      "qf (Query Fields) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "qf=\"fieldOne^2.3 fieldTwo fieldThree^0.4\"",
    "hierarchy": [
      "qf (Query Fields) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "assigns <span class=\"code\">fieldOne</span> a boost of 2.3, leaves <span class=\"code\">fieldTwo</span> with the default boost (because no boost factor is\nspecified), and <span class=\"code\">fieldThree</span> a boost of 0.4. These boost factors make matches in <span class=\"code\">fieldOne</span> much more\nsignificant than matches in <span class=\"code\">fieldTwo</span>, which in turn are much more significant than matches in <span class=\"code\">fieldThree</span>.",
    "hierarchy": [
      "qf (Query Fields) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "When processing queries, Lucene/Solr recognizes three types of clauses: mandatory, prohibited, and\n\"optional\" (also known as \"should\" clauses). By default, all words or phrases specified in the <span class=\"code\">q</span> parameter\nare treated as \"optional\" clauses unless they are preceded by a \"+\" or a \"-\". When dealing with these\n\"optional\" clauses, the <span class=\"code\">mm</span> parameter makes it possible to say that a certain minimum number of those\nclauses must match. The DisMax query parser offers great flexibility in how the minimum number can be\nspecified.",
    "hierarchy": [
      "mm (Minimum Should Match) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "The table below explains the various ways that mm values can be specified.",
    "hierarchy": [
      "mm (Minimum Should Match) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "Positive integer3Defines the minimum number of clauses that must match,\nregardless of how many clauses there are in total.",
    "hierarchy": [
      "mm (Minimum Should Match) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "Negative integer-2Sets the minimum number of matching clauses to the total\nnumber of optional clauses, minus this value.",
    "hierarchy": [
      "mm (Minimum Should Match) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "Percentage75%Sets the minimum number of matching clauses to this\npercentage of the total number of optional clauses. The\nnumber computed from the percentage is rounded down and\nused as the minimum.",
    "hierarchy": [
      "mm (Minimum Should Match) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "Negative percentage-25%Indicates that this percent of the total number of optional\nclauses can be missing. The number computed from the\npercentage is rounded down, before being subtracted from the\ntotal to determine the minimum number.",
    "hierarchy": [
      "mm (Minimum Should Match) Parameter"
    ],
    "pageId": 443
  },
  {
    "content": "An expression beginning with a\npositive integer followed by a >\nor < sign and another value\n3<90%Defines a conditional expression indicating that if the number\nof optional clauses is equal to (or less than) the integer, they\nare all required, but if it's greater than the integer, the\nspecification applies. In this example: if there are 1 to 3 clauses\nthey are all required, but for 4 or more clauses only 90% are\nrequired.",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "Multiple conditional\nexpressions involving > or <\nsigns\n2<-25%\n9<-3\nDefines multiple conditions, each one being valid only for\nnumbers greater than the one before it. In the example at left,\nif there are 1 or 2 clauses, then both are required. If there are 3-\n9 clauses all but 25% are required. If there are more then 9\nclauses, all but three are required.",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "When specifying <span class=\"code\">mm</span> values, keep in mind the following:",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "When dealing with percentages, negative values can be used to get different behavior in edge cases. 75%\nand -25% mean the same thing when dealing with 4 clauses, but when dealing with 5 clauses 75% means\n3 are required, but -25% means 4 are required.",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "If the calculations based on the parameter arguments determine that no optional clauses are needed,\nthe usual rules about Boolean queries still apply at search time. (That is, a Boolean query containing no\nrequired clauses must still match at least one optional clause).",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "No matter what number the calculation arrives at, Solr will never use a value greater than the number of\noptional clauses, or a value less than 1. In other words, no matter how low or how high the calculated\nresult, the minimum number of required matches will never be less than 1 or greater than the number of\nclauses.",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "When searching across multiple fields that are configured with different query analyzers, the number of\noptional clauses may differ between the fields. In such a case, the value specified by mm applies to the\nmaximum number of optional clauses. For example, if a query clause is treated as stopword for one of\nthe fields, the number of optional clauses for that field will be smaller than for the other fields. A query\nwith such a stopword clause would not return a match in that field if mm is set to 100% because the\nremoved clause does not count as matched.",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "The default value of <span class=\"code\">mm</span> is 100% (meaning that all clauses must match).",
    "hierarchy": [
    ],
    "pageId": 444
  },
  {
    "content": "Once the list of matching documents has been identified using the <span class=\"code\">fq</span> and <span class=\"code\">qf</span> parameters, the <span class=\"code\">pf</span> parameter\ncan be used to \"boost\" the score of documents in cases where all of the terms in the q parameter appear in\nclose proximity.",
    "hierarchy": [
      "pf (Phrase Fields) Parameter"
    ],
    "pageId": 444
  },
  {
    "content": "The format is the same as that used by the <span class=\"code\">qf</span> parameter: a list of fields and \"boosts\" to associate with each\nof them when making phrase queries out of the entire q parameter.",
    "hierarchy": [
      "pf (Phrase Fields) Parameter"
    ],
    "pageId": 444
  },
  {
    "content": "The <span class=\"code\">ps</span> parameter specifies the amount of \"phrase slop\" to apply to queries specified with the pf parameter.\nPhrase slop is the number of positions one token needs to be moved in relation to another token in order to\nmatch a phrase specified in a query.",
    "hierarchy": [
      "ps (Phrase Slop) Parameter"
    ],
    "pageId": 444
  },
  {
    "content": "The <span class=\"code\">qs</span> parameter specifies the amount of slop permitted on phrase queries explicitly included in the user's\nquery string with the <span class=\"code\">qf</span> parameter. As explained above, slop refers to the number of positions one token\nneeds to be moved in relation to another token in order to match a phrase specified in a query.",
    "hierarchy": [
      "qs (Query Phrase Slop) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "The <span class=\"code\">tie</span> parameter specifies a float value (which should be something much less than 1) to use as tiebreaker\nin DisMax queries.",
    "hierarchy": [
      "The tie (Tie Breaker) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "When a term from the user's input is tested against multiple fields, more than one field may match. If so,\neach field will generate a different score based on how common that word is in that field (for each\ndocument relative to all other documents). The <span class=\"code\">tie</span> parameter lets you control how much the final score of\nthe query will be influenced by the scores of the lower scoring fields compared to the highest scoring field.",
    "hierarchy": [
      "The tie (Tie Breaker) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "A value of \"0.0\" - the default - makes the query a pure \"disjunction max query\": that is, only the maximum\nscoring subquery contributes to the final score. A value of \"1.0\" makes the query a pure \"disjunction sum\nquery\" where it doesn't matter what the maximum scoring sub query is, because the final score will be the\nsum of the subquery scores. Typically a low value, such as 0.1, is useful.",
    "hierarchy": [
      "The tie (Tie Breaker) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "The <span class=\"code\">bq</span> parameter specifies an additional, optional, query clause that will be added to the user's main query\nto influence the score. For example, if you wanted to add a relevancy boost for recent documents:",
    "hierarchy": [
      "bq (Boost Query) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "q=cheese\nbq=date:[NOW/DAY-1YEAR TO NOW/DAY]",
    "hierarchy": [
      "bq (Boost Query) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "You can specify multiple <span class=\"code\">bq</span> parameters. If you want your query to be parsed as separate clauses with\nseparate boosts, use multiple <span class=\"code\">bq</span> parameters.",
    "hierarchy": [
      "bq (Boost Query) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "The <span class=\"code\">bf</span> parameter specifies functions (with optional boosts) that will be used to construct FunctionQueries\nwhich will be added to the user's main query as optional clauses that will influence the score. Any function\nsupported natively by Solr can be used, along with a boost value. For example:",
    "hierarchy": [
      "bf (Boost Functions) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "recip(rord(myfield),1,2,3)^1.5",
    "hierarchy": [
      "bf (Boost Functions) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "Specifying functions with the bf parameter is essentially just shorthand for using the <span class=\"code\">bq</span> parameter\ncombined with the <span class=\"code\">{!func}</span> parser.",
    "hierarchy": [
      "bf (Boost Functions) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "For example, if you want to show the most recent documents first, you could use either of the following:",
    "hierarchy": [
      "bf (Boost Functions) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "bf=recip(rord(creationDate),1,1000,1000)\nÊ ...or...\nbq={!func}recip(rord(creationDate),1,1000,1000)",
    "hierarchy": [
      "bf (Boost Functions) Parameter"
    ],
    "pageId": 445
  },
  {
    "content": "All of the sample URLs in this section assume you are running Solr's \"techproducts\" example:",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "Results for the word \"video\" using the standard query parser, and we assume \"df\" is pointing to a field to\nsearch:",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=video&fl=name+score",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "The \"dismax\" parser is configured to search across the text, features, name, sku, id, manu, and cat fields all\nwith varying boosts designed to ensure that \"better\" matches appear first, specifically: documents which\nmatch on the name and cat fields get higher scores.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=video",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "Note that this instance is also configured with a default field list, which can be overridden in the URL.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=video&fl=*,score",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "You can also override which fields are searched on and how much boost each field gets.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=video&qf=features^20.0+text^\n0.3",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "You can boost results that have a field that matches a specific value.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=video&bq=cat:electronics^5.0",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "Another request handler is registered at \"/instock\" and has slightly different configuration options, notably:\na filter for (you guessed it) <span class=\"code\">inStock:true)</span>.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=video&fl=name,score,inStock",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/instock?defType=dismax&q=video&fl=name,score,inStock",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "One of the other really cool features in this parser is robust support for specifying the\n\"BooleanQuery.minimumNumberShouldMatch\" you want to be used based on how many terms are in your\nuser's query. These allows flexibility for typos and partial matches. For the dismax parser, one and two word\nqueries require that all of the optional clauses match, but for three to five word queries one missing word is\nallowed.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=belkin+ipod",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=belkin+ipod+gibberish",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=belkin+ipod+apple",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "Use the debugQuery option to see the parsed query, and the score explanations for each document.",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=belkin+ipod+gibberish&debugQ\nuery=true",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=dismax&q=video+card&debugQuery=true",
    "hierarchy": [
      "Examples of Queries Submitted to the DisMax Query Parser"
    ],
    "pageId": 446
  },
  {
    "content": "The Extended DisMax (eDisMax) query parser is an improved version of the <span class=\"link\">DisMax query parser</span>.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "In addition to supporting all the DisMax query parser parameters, Extended Dismax:",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "supports <span class=\"link\">Solr's standard query parser</span> syntax such as (non-exhaustive list):",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "◦boolean operators such as AND (+, &&), OR (||), NOT (-).\n◦optionally treats lowercase \"and\" and \"or\" as \"AND\" and \"OR\" in Lucene syntax mode\n◦optionally allows embedded queries using other query parsers or functions\nincludes improved smart partial escaping in the case of syntax errors; fielded queries, +/-, and phrase\nqueries are still supported in this mode.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "improves proximity boosting by using word shingles; you do not need the query to match all words in\nthe document before proximity boosting is applied.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "includes advanced stopword handling: stopwords are not required in the mandatory part of the query\nbut are still used in the proximity boosting part. If a query consists of all stopwords, such as \"to be or not\nto be\", then all words are required.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "includes improved boost function: in Extended DisMax, the <span class=\"ff4 fs2\">boost</span> function is a multiplier rather than an\naddend, improving your boost results; the additive boost functions of DisMax (<span class=\"ff4 fs2\">bf</span> and <span class=\"ff4 fs2\">bq</span>) are also\nsupported.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "supports pure negative nested queries: queries such as <span class=\"ff4 fs2\">+foo (-foo)</span> will match all documents.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "lets you specify which fields the end user is allowed to query, and to disallow direct fielded searches.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser"
    ],
    "pageId": 447
  },
  {
    "content": "In addition to all the <span class=\"link\">DisMax parameters</span>, Extended DisMax includes these query parameters:",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser",
      "Extended DisMax Parameters"
    ],
    "pageId": 447
  },
  {
    "content": "sow\nSplit on whitespace. If set to <span class=\"ff4 fs2\">true</span>, text analysis is invoked separately for each individual whitespace-\nseparated term. The default is <span class=\"ff4 fs2\">false</span>; whitespace-separated term sequences will be provided to text\nanalysis in one shot, enabling proper function of analysis filters that operate over term sequences, e.g.,\nmulti-word synonyms and shingles.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser",
      "Extended DisMax Parameters"
    ],
    "pageId": 447
  },
  {
    "content": "mm.autoRelax\nIf <span class=\"ff4 fs2\">true</span>, the number of clauses required (<span class=\"link\">minimum should match</span>) will automatically be relaxed if a clause\nis removed (by e.g., stopwords filter) from some but not all <span class=\"ff4 fs2\">qf</span> fields. Use this parameter as a workaround\nif you experience that queries return zero hits due to uneven stopword removal between the <span class=\"ff4 fs2\">qf</span> fields.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser",
      "Extended DisMax Parameters"
    ],
    "pageId": 447
  },
  {
    "content": "Note that relaxing <span class=\"ff4 fs2\">mm</span> may cause undesired side effects, such as hurting the precision of the search,\ndepending on the nature of your index content.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser",
      "Extended DisMax Parameters"
    ],
    "pageId": 447
  },
  {
    "content": "boost\nA multivalued list of strings parsed as queries with scores multiplied by the score from the main query for\nall matching documents. This parameter is shorthand for wrapping the query produced by eDisMax using\nthe <span class=\"ff4 fs2\">BoostQParserPlugin</span>.",
    "hierarchy": [
      "The Extended DisMax (eDismax) Query Parser",
      "Extended DisMax Parameters"
    ],
    "pageId": 447
  },
  {
    "content": "lowercaseOperators\nA Boolean parameter indicating if lowercase \"and\" and \"or\" should be treated the same as operators\n\"AND\" and \"OR\". Defaults to <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "ps\nPhrase Slop. The default amount of slop - distance between terms - on phrase queries built with <span class=\"ff1 fs0\">pf</span>, <span class=\"ff1 fs0\">pf2</span>\nand/or <span class=\"ff1 fs0\">pf3</span> fields (affects boosting). See also the section <span class=\"link\">Using 'Slop'</span> below.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "pf2\nA multivalued list of fields with optional weights. Similar to <span class=\"ff1 fs0\">pf</span>, but based on <span class=\"code\">pairs</span> of word shingles.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "ps2\nThis is similar to <span class=\"ff1 fs0\">ps</span> but overrides the slop factor used for <span class=\"ff1 fs0\">pf2</span>. If not specified, <span class=\"ff1 fs0\">ps</span> is used.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "pf3\nA multivalued list of fields with optional weights, based on triplets of word shingles. Similar to <span class=\"ff1 fs0\">pf</span>, except\nthat instead of building a phrase per field out of all the words in the input, it builds a set of phrases for\neach field out of each <span class=\"code\">triplet</span> of word shingles.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "ps3\nThis is similar to <span class=\"ff1 fs0\">ps</span> but overrides the slop factor used for <span class=\"ff1 fs0\">pf3</span>. If not specified, <span class=\"ff1 fs0\">ps</span> is used.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "stopwords\nA Boolean parameter indicating if the <span class=\"ff1 fs0\">StopFilterFactory</span> configured in the query analyzer should be\nrespected when parsing the query. If this is set to <span class=\"ff1 fs0\">false</span>, then the <span class=\"ff1 fs0\">StopFilterFactory</span> in the query\nanalyzer is ignored.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "uf\nSpecifies which schema fields the end user is allowed to explicitly query and to toggle whether embedded\nSolr queries are supported. This parameter supports wildcards. Multiple fields must be separated by a\nspace.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "The default is to allow all fields and no embedded Solr queries, equivalent to <span class=\"ff1 fs0\">uf=* -_query_</span>.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "To allow only title field, use <span class=\"ff1 fs0\">uf=title</span>.\n•To allow title and all fields ending with '_s', use <span class=\"ff1 fs0\">uf=title *_s</span>.\n•To allow all fields except title, use <span class=\"ff1 fs0\">uf=* -title</span>.\n•To disallow all fielded searches, use <span class=\"ff1 fs0\">uf=-*</span>.\n•To allow embedded Solr queries (e.g. <span class=\"ff1 fs0\">_query_:\"…\"</span> or <span class=\"ff1 fs0\">_val_:\"…\"</span> or <span class=\"ff1 fs0\">{!lucene …}</span>), you <span class=\"code\">must</span> expressly\nenable this by referring to the magic field <span class=\"ff1 fs0\">_query_</span> in <span class=\"ff1 fs0\">uf</span>.",
    "hierarchy": [
    ],
    "pageId": 448
  },
  {
    "content": "Per-field overrides of the <span class=\"ff1 fs0\">qf</span> parameter may be specified to provide 1-to-many aliasing from field names\nspecified in the query string, to field names used in the underlying query. By default, no aliasing is used and\nfield names specified in the query string are treated as literal field names in the index.",
    "hierarchy": [
      "Field Aliasing using Per-Field qf Overrides"
    ],
    "pageId": 448
  },
  {
    "content": "All of the sample URLs in this section assume you are running Solr's “<span class=\"ff1 fs0\">techproducts</span>” example:",
    "hierarchy": [
      "Examples of eDismax Queries"
    ],
    "pageId": 448
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "Boost the result of the query term \"hello\" based on the document's popularity:",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=edismax&q=hello&pf=text&qf=text&boost=popu\nlarity",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "Search for iPods OR video:",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?defType=edismax&q=ipod+OR+video",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "Search across multiple fields, specifying (via boosts) how important each field is relative each other:",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=video&defType=edismax&qf=features^20.0+text^0.3",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "You can boost results that have a field that matches a specific value:",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=video&defType=edismax&qf=features^20.0+text^0.3&\nbq=cat:electronics^5.0",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "Using the \"mm\" param, 1 and 2 word queries require that all of the optional clauses match, but for queries\nwith three or more clauses one missing clause is allowed:",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=belkin+ipod&defType=edismax&mm=2\nhttp://localhost:8983/solr/techproducts/select?q=belkin+ipod+gibberish&defType=edismax&mm=2\nhttp://localhost:8983/solr/techproducts/select?q=belkin+ipod+apple&defType=edismax&mm=2",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "In the example below, we see a per-field override of the <span class=\"ff1 fs1\">qf</span> parameter being used to alias \"name\" in the\nquery string to either the “<span class=\"ff1 fs1\">last_name</span>” and “<span class=\"ff1 fs1\">first_name</span>” fields:",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "defType=edismax\nq=sysadmin name:Mike\nqf=title text last_name first_name\nf.name.qf=last_name first_name",
    "hierarchy": [
    ],
    "pageId": 449
  },
  {
    "content": "Negative query boosts have been supported at the \"Query\" object level for a long time (resulting in negative\nscores for matching documents). Now the QueryParsers have been updated to handle this too.",
    "hierarchy": [
      "Using Negative Boost"
    ],
    "pageId": 449
  },
  {
    "content": "Dismax<span class=\"ff2 fs0\"> and </span>Edismax<span class=\"ff2 fs0\"> can run queries against all query fields, and also run a query in the form of a phrase</span>\nagainst the phrase fields. (This will work only for boosting documents, not actually for matching.) However,",
    "hierarchy": [
      "Using 'Slop'"
    ],
    "pageId": 449
  },
  {
    "content": "that phrase query can have a 'slop,' which is the distance between the terms of the query while still\nconsidering it a phrase match. For example:",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "q=foo bar\nqf=field1^5 field2^10\npf=field1^50 field2^20\ndefType=dismax",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "With these parameters, the Dismax Query Parser generates a query that looks something like this:",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "Ê(+(field1:foo^5 OR field2:foo^10) AND (field1:bar^5 OR field2:bar^10))",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "But it also generates another query that will only be used for boosting results:",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "field1:\"foo bar\"^50 OR field2:\"foo bar\"^20",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "Thus, any document that has the terms \"foo\" and \"bar\" will match; however if some of those documents\nhave both of the terms as a phrase, it will score much higher because it's more relevant.",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "If you add the parameter <span class=\"ff2 fs1\">ps</span> (phrase slop), the second query will instead be:",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "ps=10 field1:\"foo bar\"~10^50 OR field2:\"foo bar\"~10^20",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "This means that if the terms \"foo\" and \"bar\" appear in the document with less than 10 terms between each\nother, the phrase will match. For example the doc that says:",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "*Foo* term1 term2 term3 *bar*",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "will match the phrase query.",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "How does one use phrase slop? Usually it is configured in the request handler (in <span class=\"ff2 fs1\">solrconfig</span>).",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "With query slop (<span class=\"ff2 fs1\">qs</span>) the concept is similar, but it applies to explicit phrase queries from the user. For\nexample, if you want to search for a name, you could enter:",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "q=\"Hans Anderson\"",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "A document that contains \"Hans Anderson\" will match, but a document that contains the middle name\n\"Christian\" or where the name is written with the last name first (\"Anderson, Hans\") won't. For those cases\none could configure the query field <span class=\"ff2 fs1\">qs</span>, so that even if the user searches for an explicit phrase query, a slop is\napplied.",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "Finally, in addition to the phrase fields (<span class=\"ff2 fs1\">pf</span>) parameter, <span class=\"ff2 fs1\">edismax</span> also supports the <span class=\"ff2 fs1\">pf2</span> and <span class=\"ff2 fs1\">pf3</span> parameters,\nfor fields over which to create bigram and trigram phrase queries. The phrase slop for these parameters'\nqueries can be specified using the <span class=\"ff2 fs1\">ps2</span> and <span class=\"ff2 fs1\">ps3</span> parameters, respectively. If you use <span class=\"ff2 fs1\">pf2</span>/<span class=\"ff2 fs1\">pf3</span> but <span class=\"ff2 fs1\">ps2</span>/<span class=\"ff2 fs1\">ps3</span>,",
    "hierarchy": [
    ],
    "pageId": 450
  },
  {
    "content": "then the phrase slop for these parameters' queries will be taken from the <span class=\"ff2 fs1\">ps</span> parameter, if any.",
    "hierarchy": [
    ],
    "pageId": 451
  },
  {
    "content": "Function queries enable you to generate a relevancy score using the actual value of one or more numeric\nfields.",
    "hierarchy": [
      "Function Queries"
    ],
    "pageId": 451
  },
  {
    "content": "Function queries are supported by the <span class=\"link\">DisMax</span>, <span class=\"link\">Extended DisMax</span>, and <span class=\"link\">standard</span> query parsers.",
    "hierarchy": [
      "Function Queries"
    ],
    "pageId": 451
  },
  {
    "content": "Function queries use <span class=\"ff4\">functions</span>. The functions can be a constant (numeric or string literal), a field, another\nfunction or a parameter substitution argument. You can use these functions to modify the ranking of results\nfor users. These could be used to change the ranking of results based on a user's location, or some other\ncalculation.",
    "hierarchy": [
      "Function Queries"
    ],
    "pageId": 451
  },
  {
    "content": "Functions must be expressed as function calls (for example, <span class=\"ff2 fs1\">sum(a,b)</span> instead of simply <span class=\"ff2 fs1\">a+b</span>).",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "There are several ways of using function queries in a Solr query:",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "Via an explicit query parser that expects function arguments, such <span class=\"ff2 fs1\">func</span> or <span class=\"ff2 fs1\">frange</span>. For example:",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "q={!func}div(popularity,price)&fq={!frange l=1000}customer_ratings",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "In a Sort expression. For example:",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "sort=div(popularity,price) desc, score desc",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "Add the results of functions as pseudo-fields to documents in query results. For instance, for:",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "&fl=sum(x, y),id,a,b,c,score&wt=xml",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "the output would be:",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "...",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "...",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "Use in a parameter that is explicitly for specifying functions, such as the eDisMax query parser's <span class=\"ff2 fs1\">boost</span>\nparam, or DisMax query parser’s <span class=\"ff2 fs1\">bf</span><span class=\"link\"> (boost function) parameter</span>. (Note that the <span class=\"ff2 fs1\">bf</span> parameter actually\ntakes a list of function queries separated by white space and each with an optional boost. Make sure you\neliminate any internal white space in single function queries when using <span class=\"ff2 fs1\">bf</span>). For example:",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "q=dismax&bf=\"ord(popularity)^0.5 recip(rord(price),1,1000,1000)^0.3\"",
    "hierarchy": [
      "Function Queries",
      "Using Function Query"
    ],
    "pageId": 451
  },
  {
    "content": "<span class=\"ls1\">Introduce a function query inline in the Lucene query parser with the <span class=\"ff2 fs1\">_val_</span> keyword. For example:</span>",
    "hierarchy": [
    ],
    "pageId": 452
  },
  {
    "content": "q=_val_:mynumericfield _val_:\"recip(rord(myfield),1,2,3)\"",
    "hierarchy": [
    ],
    "pageId": 452
  },
  {
    "content": "Only functions with fast random access are recommended.",
    "hierarchy": [
    ],
    "pageId": 452
  },
  {
    "content": "The table below summarizes the functions available for function queries.",
    "hierarchy": [
      "Available Functions"
    ],
    "pageId": 452
  },
  {
    "content": "Returns the absolute value of the specified value or function.",
    "hierarchy": [
      "Available Functions",
      "abs Function"
    ],
    "pageId": 452
  },
  {
    "content": "\nabs(x)",
    "hierarchy": [
      "Available Functions",
      "abs Function"
    ],
    "pageId": 452
  },
  {
    "content": "\nabs(-5)",
    "hierarchy": [
      "Available Functions",
      "abs Function"
    ],
    "pageId": 452
  },
  {
    "content": "Returns the value of the given field for one of the matched child docs when searching by <span class=\"link\">{!parent}</span>. It can be\nused only in <span class=\"ff2 fs1\">sort</span> parameter.",
    "hierarchy": [
      "Available Functions",
      "childfield(field) Function"
    ],
    "pageId": 452
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">sort=childfield(name) asc</span><span class=\"ls1\"> implies <span class=\"ff2 fs1\">$q</span> as a second argument and therefore it assumes <span class=\"ff2 fs1\">q={!parent</span></span>\n..}..<span class=\"ff1 fs0\">;</span>",
    "hierarchy": [
      "Available Functions",
      "childfield(field) Function"
    ],
    "pageId": 452
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">sort=childfield(field,$bjq) asc</span><span class=\"ls1\"> refers to a separate parameter <span class=\"ff2 fs1\">bjq={!parent ..}..</span>;</span>",
    "hierarchy": [
      "Available Functions",
      "childfield(field) Function"
    ],
    "pageId": 452
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">sort=childfield(field,{!parent of=…}…) desc</span><span class=\"ls1\"> allows to inline block join parent query</span>",
    "hierarchy": [
      "Available Functions",
      "childfield(field) Function"
    ],
    "pageId": 452
  },
  {
    "content": "Concatenates the given string fields, literals and other functions.",
    "hierarchy": [
      "Available Functions",
      "concat Function"
    ],
    "pageId": 452
  },
  {
    "content": "\nconcat(name,\" \",$param,def(opt,\"-\"))",
    "hierarchy": [
      "Available Functions",
      "concat Function"
    ],
    "pageId": 452
  },
  {
    "content": "Specifies a floating point constant.",
    "hierarchy": [
      "Available Functions",
      "\"constant\" Function"
    ],
    "pageId": 452
  },
  {
    "content": "\n1.5",
    "hierarchy": [
      "Available Functions",
      "\"constant\" Function"
    ],
    "pageId": 452
  },
  {
    "content": "def<span class=\"ff1 fs0\"> is short for default. Returns the value of field \"field\", or if the field does not exist, returns the default</span>\nvalue specified. Yields the first value where <span class=\"ff2 fs1\">exists()==true</span>.",
    "hierarchy": [
      "Available Functions",
      "def Function"
    ],
    "pageId": 452
  },
  {
    "content": "def(rating,5): This <span class=\"code\">def()</span> function returns the rating, or if no rating specified in the doc, returns 5",
    "hierarchy": [
    ],
    "pageId": 453
  },
  {
    "content": "def(myfield, 1.0): equivalent to <span class=\"code\">if(exists(myfield),myfield,1.0)</span>",
    "hierarchy": [
    ],
    "pageId": 453
  },
  {
    "content": "Divides one value or function by another. <span class=\"code\">div(x,y)</span> divides <span class=\"code\">x</span> by <span class=\"code\">y</span>.",
    "hierarchy": [
      "div Function"
    ],
    "pageId": 453
  },
  {
    "content": "\ndiv(1,y)",
    "hierarchy": [
      "div Function"
    ],
    "pageId": 453
  },
  {
    "content": "\ndiv(sum(x,100),max(y,1))",
    "hierarchy": [
      "div Function"
    ],
    "pageId": 453
  },
  {
    "content": "Returns the distance between two vectors (points) in an n-dimensional space. Takes in the power, plus two\nor more ValueSource instances and calculates the distances between the two vectors. Each ValueSource\nmust be a number.",
    "hierarchy": [
      "dist Function"
    ],
    "pageId": 453
  },
  {
    "content": "There must be an even number of ValueSource instances passed in and the method assumes that the first\nhalf represent the first vector and the second half represent the second vector.",
    "hierarchy": [
      "dist Function"
    ],
    "pageId": 453
  },
  {
    "content": "dist(2, x, y, 0, 0): calculates the Euclidean distance between (0,0) and (x,y) for each document.",
    "hierarchy": [
      "dist Function"
    ],
    "pageId": 453
  },
  {
    "content": "dist(1, x, y, 0, 0): calculates the Manhattan (taxicab) distance between (0,0) and (x,y) for each\ndocument.",
    "hierarchy": [
      "dist Function"
    ],
    "pageId": 453
  },
  {
    "content": "dist(2, x,y,z,0,0,0): Euclidean distance between (0,0,0) and (x,y,z) for each document.",
    "hierarchy": [
      "dist Function"
    ],
    "pageId": 453
  },
  {
    "content": "dist(1,x,y,z,e,f,g): Manhattan distance between (x,y,z) and (e,f,g) where each letter is a field name.",
    "hierarchy": [
      "dist Function"
    ],
    "pageId": 453
  },
  {
    "content": "Returns the number of documents that contain the term in the field. This is a constant (the same value for all\ndocuments in the index).",
    "hierarchy": [
      "docfreq(field,val) Function"
    ],
    "pageId": 453
  },
  {
    "content": "You can quote the term if it's more complex, or do parameter substitution for the term value.",
    "hierarchy": [
      "docfreq(field,val) Function"
    ],
    "pageId": 453
  },
  {
    "content": "\ndocfreq(text,'solr')",
    "hierarchy": [
      "docfreq(field,val) Function"
    ],
    "pageId": 453
  },
  {
    "content": "…&defType=func <span class=\"code\">&q=docfreq(text,$myterm)&myterm=solr</span>",
    "hierarchy": [
      "docfreq(field,val) Function"
    ],
    "pageId": 453
  },
  {
    "content": "Returns the numeric docValues or indexed value of the field with the specified name. In its simplest (single\nargument) form, this function can only be used on single valued fields, and can be called using the name of\nthe field as a string, or for most conventional field names simply use the field name by itself without using\nthe <span class=\"code\">field(…)</span> syntax.",
    "hierarchy": [
      "field Function"
    ],
    "pageId": 453
  },
  {
    "content": "When using docValues, an optional 2nd argument can be specified to select the <span class=\"code\">min</span> or <span class=\"code\">max</span> value of",
    "hierarchy": [
      "field Function"
    ],
    "pageId": 453
  },
  {
    "content": "multivalued fields.",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "0 is returned for documents without a value in the field.",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "Syntax Examples<span class=\"ff1\"> These 3 examples are all equivalent:</span>",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "\nmyFloatFieldName",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "\nfield(myFloatFieldName)",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "\nfield(\"myFloatFieldName\")",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "The last form is convenient when your field name is atypical:",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "\nfield(\"my complex float fieldName\")",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "For multivalued docValues fields:",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "\nfield(myMultiValuedFloatField,min)",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "\nfield(myMultiValuedFloatField,max)",
    "hierarchy": [
    ],
    "pageId": 454
  },
  {
    "content": "The Haversine distance calculates the distance between two points on a sphere when traveling along the\nsphere. The values must be in radians. <span class=\"code\">hsin</span> also take a Boolean argument to specify whether the function\nshould convert its output to radians.",
    "hierarchy": [
      "hsin Function"
    ],
    "pageId": 454
  },
  {
    "content": "\nhsin(2, true, x, y, 0, 0)",
    "hierarchy": [
      "hsin Function"
    ],
    "pageId": 454
  },
  {
    "content": "Inverse document frequency; a measure of whether the term is common or rare across all documents.\nObtained by dividing the total number of documents by the number of documents containing the term, and\nthen taking the logarithm of that quotient. See also <span class=\"code\">tf</span>.",
    "hierarchy": [
      "idf Function"
    ],
    "pageId": 454
  },
  {
    "content": "idf(fieldName,'solr'): measures the inverse of the frequency of the occurrence of the term <span class=\"code\">'solr'</span> in\nfieldName<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "idf Function"
    ],
    "pageId": 454
  },
  {
    "content": "Enables conditional function queries. In <span class=\"code\">if(test,value1,value2)</span>:",
    "hierarchy": [
      "if Function"
    ],
    "pageId": 454
  },
  {
    "content": "test is or refers to a logical value or expression that returns a logical value (TRUE or FALSE).",
    "hierarchy": [
      "if Function"
    ],
    "pageId": 454
  },
  {
    "content": "value1 is the value that is returned by the function if <span class=\"code\">test</span> yields TRUE.",
    "hierarchy": [
      "if Function"
    ],
    "pageId": 454
  },
  {
    "content": "value2 is the value that is returned by the function if <span class=\"code\">test</span> yields FALSE.",
    "hierarchy": [
      "if Function"
    ],
    "pageId": 454
  },
  {
    "content": "An expression can be any function which outputs boolean values, or even functions returning numeric\nvalues, in which case value 0 will be interpreted as false, or strings, in which case empty string is interpreted\nas false.",
    "hierarchy": [
      "if Function"
    ],
    "pageId": 454
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">if(termfreq (cat,'electronics'),popularity,42)</span><span class=\"ls1\">: This function checks each document for to see if it</span>\ncontains the term \"electronics\" in the <span class=\"ff2 fs1\">cat</span> field. If it does, then the value of the <span class=\"ff2 fs1\">popularity</span> field is\nreturned, otherwise the value of <span class=\"ff2 fs1\">42</span> is returned.",
    "hierarchy": [
    ],
    "pageId": 455
  },
  {
    "content": "Implements <span class=\"ff2 fs1\">m*x+c</span> where <span class=\"ff2 fs1\">m</span> and <span class=\"ff2 fs1\">c</span> are constants and <span class=\"ff2 fs1\">x</span> is an arbitrary function. This is equivalent to\nsum(product(m,x),c)<span class=\"ff1 fs0\">, but slightly more efficient as it is implemented as a single function.</span>",
    "hierarchy": [
      "linear Function"
    ],
    "pageId": 455
  },
  {
    "content": "\nlinear(x,m,c)",
    "hierarchy": [
      "linear Function"
    ],
    "pageId": 455
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">linear(x,2,4)</span><span class=\"ls1\">: returns <span class=\"ff2 fs1\">2*x+4</span></span>",
    "hierarchy": [
      "linear Function"
    ],
    "pageId": 455
  },
  {
    "content": "Returns the log base 10 of the specified function.",
    "hierarchy": [
      "log Function"
    ],
    "pageId": 455
  },
  {
    "content": "\nlog(x)",
    "hierarchy": [
      "log Function"
    ],
    "pageId": 455
  },
  {
    "content": "\nlog(sum(x,100))",
    "hierarchy": [
      "log Function"
    ],
    "pageId": 455
  },
  {
    "content": "Maps any values of an input function <span class=\"ff2 fs1\">x</span> that fall within <span class=\"ff2 fs1\">min</span> and <span class=\"ff2 fs1\">max</span> inclusive to the specified <span class=\"ff2 fs1\">target</span>. The\narguments <span class=\"ff2 fs1\">min</span> and <span class=\"ff2 fs1\">max</span> must be constants. The arguments <span class=\"ff2 fs1\">target</span> and <span class=\"ff2 fs1\">default</span> can be constants or\nfunctions.",
    "hierarchy": [
      "map Function"
    ],
    "pageId": 455
  },
  {
    "content": "If the value of <span class=\"ff2 fs1\">x</span> does not fall between <span class=\"ff2 fs1\">min</span> and <span class=\"ff2 fs1\">max</span>, then either the value of <span class=\"ff2 fs1\">x</span> is returned, or a default value is\nreturned if specified as a 5th argument.",
    "hierarchy": [
      "map Function"
    ],
    "pageId": 455
  },
  {
    "content": "\nmap(x,min,max,target)",
    "hierarchy": [
      "map Function"
    ],
    "pageId": 455
  },
  {
    "content": "◦<span class=\"ff2 fs1 ls1\">map(x,0,0,1)<span class=\"ff1 fs0\">: Changes any values of 0 to 1. This can be useful in handling default 0 values.</span></span>\n\nmap(x,min,max,target,default)",
    "hierarchy": [
      "map Function"
    ],
    "pageId": 455
  },
  {
    "content": "◦<span class=\"ff2 fs1 ls1\">map(x,0,100,1,-1)<span class=\"ff1 fs0\">: Changes any values between </span>0<span class=\"ff1 fs0\"> and </span>100<span class=\"ff1 fs0\"> to </span>1<span class=\"ff1 fs0\">, and all other values to` -1`.</span></span>\n◦<span class=\"ff2 fs1 ls1\">map(x,0,100,sum(x,599),docfreq(text,solr))<span class=\"ff1 fs0\">: Changes any values between </span>0<span class=\"ff1 fs0\"> and </span>100<span class=\"ff1 fs0\"> to x+599,</span></span>\nand all other values to frequency of the term 'solr' in the field text.",
    "hierarchy": [
      "map Function"
    ],
    "pageId": 455
  },
  {
    "content": "Returns the maximum numeric value of multiple nested functions or constants, which are specified as\narguments: <span class=\"ff2 fs1\">max(x,y,…)</span>. The <span class=\"ff2 fs1\">max</span> function can also be useful for \"bottoming out\" another function or field at\nsome specified constant.",
    "hierarchy": [
      "max Function"
    ],
    "pageId": 455
  },
  {
    "content": "Use the <span class=\"ff2 fs1\">field(myfield,max)</span> syntax for <span class=\"link\">selecting the maximum value of a single multivalued field</span>.",
    "hierarchy": [
      "max Function"
    ],
    "pageId": 455
  },
  {
    "content": "\nmax(myfield,myotherfield,0)",
    "hierarchy": [
      "max Function"
    ],
    "pageId": 455
  },
  {
    "content": "Returns the number of documents in the index, including those that are marked as deleted but have not yet\nbeen purged. This is a constant (the same value for all documents in the index).",
    "hierarchy": [
      "maxdoc Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nmaxdoc()",
    "hierarchy": [
      "maxdoc Function"
    ],
    "pageId": 456
  },
  {
    "content": "Returns the minimum numeric value of multiple nested functions of constants, which are specified as\narguments: <span class=\"code\">min(x,y,…)</span>. The <span class=\"code\">min</span> function can also be useful for providing an \"upper bound\" on a function\nusing a constant.",
    "hierarchy": [
      "min Function"
    ],
    "pageId": 456
  },
  {
    "content": "Use the <span class=\"code\">field(myfield,min)</span> <span class=\"link\">syntax for selecting the minimum value of a single multivalued field</span>.",
    "hierarchy": [
      "min Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nmin(myfield,myotherfield,0)",
    "hierarchy": [
      "min Function"
    ],
    "pageId": 456
  },
  {
    "content": "Returns milliseconds of difference between its arguments. Dates are relative to the Unix or POSIX time\nepoch, midnight, January 1, 1970 UTC.",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "Arguments may be the name of a <span class=\"code\">DatePointField</span>, <span class=\"code\">TrieDateField</span>, or date math based on a <span class=\"link\">constant date</span>\nor <span class=\"code\">NOW</span><span class=\"fc1\">.</span>",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "ms(): Equivalent to <span class=\"code\">ms(NOW)</span>, number of milliseconds since the epoch.",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "ms(a): Returns the number of milliseconds since the epoch that the argument represents.",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "ms(a,b): Returns the number of milliseconds that b occurs before a (that is, a - b)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nms(NOW/DAY)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nms(2000-01-01T00:00:00Z)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nms(mydatefield)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nms(NOW,mydatefield)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nms(mydatefield, 2000-01-01T00:00:00Z)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nms(datefield1, datefield2)",
    "hierarchy": [
      "ms Function"
    ],
    "pageId": 456
  },
  {
    "content": "Returns the \"norm\" stored in the index for the specified field. This is the product of the index time boost and\nthe length normalization factor, according to the <span class=\"link\">Similarity</span> for the field.",
    "hierarchy": [
      "norm(<span class=\"ff4\">field</span>) Function"
    ],
    "pageId": 456
  },
  {
    "content": "\nnorm(fieldName)",
    "hierarchy": [
      "norm(<span class=\"ff4\">field</span>) Function"
    ],
    "pageId": 456
  },
  {
    "content": "Returns the number of documents in the index, not including those that are marked as deleted but have not\nyet been purged. This is a constant (the same value for all documents in the index).",
    "hierarchy": [
      "numdocs Function"
    ],
    "pageId": 457
  },
  {
    "content": "\nnumdocs()",
    "hierarchy": [
      "numdocs Function"
    ],
    "pageId": 457
  },
  {
    "content": "Returns the ordinal of the indexed field value within the indexed list of terms for that field in Lucene index\norder (lexicographically ordered by unicode value), starting at 1.",
    "hierarchy": [
      "ord Function"
    ],
    "pageId": 457
  },
  {
    "content": "In other words, for a given field, all values are ordered lexicographically; this function then returns the offset\nof a particular value in that ordering. The field must have a maximum of one value per document (not multi-\nvalued). <span class=\"code\">0</span> is returned for documents without a value in the field.",
    "hierarchy": [
      "ord Function"
    ],
    "pageId": 457
  },
  {
    "content": "ord()<span class=\"ff2 fs0\"> depends on the position in an index and can change when other documents are</span>\ninserted or deleted.",
    "hierarchy": [
      "ord Function"
    ],
    "pageId": 457
  },
  {
    "content": "See also <span class=\"code\">rord</span> below.",
    "hierarchy": [
      "ord Function"
    ],
    "pageId": 457
  },
  {
    "content": "\nord(myIndexedField)",
    "hierarchy": [
      "ord Function"
    ],
    "pageId": 457
  },
  {
    "content": "If there were only three values (\"apple\",\"banana\",\"pear\") for a particular field X, then <span class=\"code\">ord(X)</span> would be <span class=\"code\">1</span>\nfor documents containing \"apple\", <span class=\"code\">2</span> for documents containing \"banana\", etc.",
    "hierarchy": [
      "ord Function"
    ],
    "pageId": 457
  },
  {
    "content": "Returns the float value computed from the decoded payloads of the term specified.",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "The return value is computed using the <span class=\"code\">min</span>, <span class=\"code\">max</span>, or <span class=\"code\">average</span> of the decoded payloads. A special <span class=\"code\">first</span>\nfunction can be used instead of the others, to short-circuit term enumeration and return only the decoded\npayload of the first term.",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "The field specified must have float or integer payload encoding capability (via\nDelimitedPayloadTokenFilter<span class=\"ff2 fs0\"> or </span>NumericPayloadTokenFilter<span class=\"ff2 fs0\">). If no payload is found for the term, the</span>\ndefault value is returned.",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "payload(field_name,term): default value is 0.0, <span class=\"code\">average</span> function is used.",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "payload(field_name,term,default_value): default value can be a constant, field name, or another\nfloat returning function. <span class=\"code\">average</span> function used.",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "payload(field_name,term,default_value,function): function values can be <span class=\"code\">min</span>, <span class=\"code\">max</span>, <span class=\"code\">average</span>, or\nfirst<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "\npayload(payloaded_field_dpf,term,0.0,first)",
    "hierarchy": [
      "payload Function"
    ],
    "pageId": 457
  },
  {
    "content": "Raises the specified base to the specified power. <span class=\"code\">pow(x,y)</span> raises <span class=\"code\">x</span> to the power of <span class=\"code\">y</span>.",
    "hierarchy": [
      "pow Function"
    ],
    "pageId": 458
  },
  {
    "content": "\npow(x,y)",
    "hierarchy": [
      "pow Function"
    ],
    "pageId": 458
  },
  {
    "content": "\npow(x,log(y))",
    "hierarchy": [
      "pow Function"
    ],
    "pageId": 458
  },
  {
    "content": "pow(x,0.5): the same as <span class=\"code\">sqrt</span>",
    "hierarchy": [
      "pow Function"
    ],
    "pageId": 458
  },
  {
    "content": "Returns the product of multiple values or functions, which are specified in a comma-separated list. <span class=\"code\">mul(…)</span>\nmay also be used as an alias for this function.",
    "hierarchy": [
      "product Function"
    ],
    "pageId": 458
  },
  {
    "content": "\nproduct(x,y,…)",
    "hierarchy": [
      "product Function"
    ],
    "pageId": 458
  },
  {
    "content": "\nproduct(x,2)",
    "hierarchy": [
      "product Function"
    ],
    "pageId": 458
  },
  {
    "content": "\nmul(x,y)",
    "hierarchy": [
      "product Function"
    ],
    "pageId": 458
  },
  {
    "content": "Returns the score for the given subquery, or the default value for documents not matching the query. Any\ntype of subquery is supported through either parameter de-referencing <span class=\"code\">$otherparam</span> or direct specification\nof the query string in the <span class=\"link\">Local Parameters</span> through the <span class=\"code\">v</span> key.",
    "hierarchy": [
      "query Function"
    ],
    "pageId": 458
  },
  {
    "content": "\nquery(subquery, default)",
    "hierarchy": [
      "query Function"
    ],
    "pageId": 458
  },
  {
    "content": "q=product (popularity,query({!dismax v='solr rocks'}): returns the product of the popularity and\nthe score of the DisMax query.",
    "hierarchy": [
      "query Function"
    ],
    "pageId": 458
  },
  {
    "content": "q=product (popularity,query($qq))&qq={!dismax}solr rocks: equivalent to the previous query,\nusing parameter de-referencing.",
    "hierarchy": [
      "query Function"
    ],
    "pageId": 458
  },
  {
    "content": "q=product (popularity,query($qq,0.1))&qq={!dismax}solr rocks: specifies a default score of 0.1 for\ndocuments that don't match the DisMax query.",
    "hierarchy": [
      "query Function"
    ],
    "pageId": 458
  },
  {
    "content": "Performs a reciprocal function with <span class=\"code\">recip(x,m,a,b)</span> implementing <span class=\"code\">a/(m*x+b)</span> where <span class=\"code\">m,a,b</span> are constants,\nand <span class=\"code\">x</span> is any arbitrarily complex function.",
    "hierarchy": [
      "recip Function"
    ],
    "pageId": 458
  },
  {
    "content": "When <span class=\"code\">a</span> and <span class=\"code\">b</span> are equal, and <span class=\"code\">x>=0</span>, this function has a maximum value of <span class=\"code\">1</span> that drops as <span class=\"code\">x</span> increases.\nIncreasing the value of <span class=\"code\">a</span> and <span class=\"code\">b</span> together results in a movement of the entire function to a flatter part of the\ncurve. These properties can make this an ideal function for boosting more recent documents when x is\nrord(datefield)<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "recip Function"
    ],
    "pageId": 458
  },
  {
    "content": "\nrecip(myfield,m,a,b)",
    "hierarchy": [
      "recip Function"
    ],
    "pageId": 458
  },
  {
    "content": "recip(rord <span class=\"code\">(creationDate), 1,1000,1000)</span>",
    "hierarchy": [
      "recip Function"
    ],
    "pageId": 458
  },
  {
    "content": "Returns the reverse ordering of that returned by <span class=\"code\">ord</span>.",
    "hierarchy": [
      "rord Function"
    ],
    "pageId": 459
  },
  {
    "content": "\nrord(myDateField)",
    "hierarchy": [
      "rord Function"
    ],
    "pageId": 459
  },
  {
    "content": "Scales values of the function <span class=\"code\">x</span> such that they fall between the specified <span class=\"code\">minTarget</span> and <span class=\"code\">maxTarget</span> inclusive.\nThe current implementation traverses all of the function values to obtain the min and max, so it can pick the\ncorrect scale.",
    "hierarchy": [
      "scale Function"
    ],
    "pageId": 459
  },
  {
    "content": "The current implementation cannot distinguish when documents have been deleted or documents that have\nno value. It uses <span class=\"code\">0.0</span> values for these cases. This means that if values are normally all greater than <span class=\"code\">0.0</span>, one\ncan still end up with <span class=\"code\">0.0</span> as the <span class=\"code\">min</span> value to map from. In these cases, an appropriate <span class=\"code\">map()</span> function could\nbe used as a workaround to change <span class=\"code\">0.0</span> to a value in the real range, as shown here:\nscale(map(x,0,0,5),1,2)",
    "hierarchy": [
      "scale Function"
    ],
    "pageId": 459
  },
  {
    "content": "\nscale(x, minTarget, maxTarget)",
    "hierarchy": [
      "scale Function"
    ],
    "pageId": 459
  },
  {
    "content": "scale(x,1,2): scales the values of x such that all values will be between 1 and 2 inclusive.",
    "hierarchy": [
      "scale Function"
    ],
    "pageId": 459
  },
  {
    "content": "The Square Euclidean distance calculates the 2-norm (Euclidean distance) but does not take the square root,\nthus saving a fairly expensive operation. It is often the case that applications that care about Euclidean\ndistance do not need the actual distance, but instead can use the square of the distance. There must be an\neven number of ValueSource instances passed in and the method assumes that the first half represent the\nfirst vector and the second half represent the second vector.",
    "hierarchy": [
      "sqedist Function"
    ],
    "pageId": 459
  },
  {
    "content": "\nsqedist(x_td, y_td, 0, 0)",
    "hierarchy": [
      "sqedist Function"
    ],
    "pageId": 459
  },
  {
    "content": "Returns the square root of the specified value or function.",
    "hierarchy": [
      "sqrt Function"
    ],
    "pageId": 459
  },
  {
    "content": "\nsqrt(x)",
    "hierarchy": [
      "sqrt Function"
    ],
    "pageId": 459
  },
  {
    "content": "\nsqrt(100)",
    "hierarchy": [
      "sqrt Function"
    ],
    "pageId": 459
  },
  {
    "content": "\nsqrt(sum(x,100))",
    "hierarchy": [
      "sqrt Function"
    ],
    "pageId": 459
  },
  {
    "content": "Calculate the distance between two strings. Uses the Lucene spell checker <span class=\"code\">StringDistance</span> interface and\nsupports all of the implementations available in that package, plus allows applications to plug in their own\nvia Solr's resource loading capabilities. <span class=\"code\">strdist</span> takes (string1, string2, distance measure).",
    "hierarchy": [
      "strdist Function"
    ],
    "pageId": 459
  },
  {
    "content": "Possible values for distance measure are:",
    "hierarchy": [
    ],
    "pageId": 460
  },
  {
    "content": "jw: Jaro-Winkler",
    "hierarchy": [
    ],
    "pageId": 460
  },
  {
    "content": "edit: Levenstein or Edit distance",
    "hierarchy": [
    ],
    "pageId": 460
  },
  {
    "content": "ngram: The NGramDistance, if specified, can optionally pass in the ngram size too. Default is 2.",
    "hierarchy": [
    ],
    "pageId": 460
  },
  {
    "content": "FQN: Fully Qualified class Name for an implementation of the StringDistance interface. Must have a no-\narg constructor.",
    "hierarchy": [
    ],
    "pageId": 460
  },
  {
    "content": "\nstrdist(\"SOLR\",id,edit)",
    "hierarchy": [
    ],
    "pageId": 460
  },
  {
    "content": "Returns <span class=\"code\">x-y</span> from <span class=\"code\">sub(x,y)</span>.",
    "hierarchy": [
      "sub Function"
    ],
    "pageId": 460
  },
  {
    "content": "\nsub(myfield,myfield2)",
    "hierarchy": [
      "sub Function"
    ],
    "pageId": 460
  },
  {
    "content": "\nsub(100, sqrt(myfield))",
    "hierarchy": [
      "sub Function"
    ],
    "pageId": 460
  },
  {
    "content": "Returns the sum of multiple values or functions, which are specified in a comma-separated list. <span class=\"code\">add(…)</span> may\nbe used as an alias for this function.",
    "hierarchy": [
      "sum Function"
    ],
    "pageId": 460
  },
  {
    "content": "\nsum(x,y,…)",
    "hierarchy": [
      "sum Function"
    ],
    "pageId": 460
  },
  {
    "content": "\nsum(x,1)",
    "hierarchy": [
      "sum Function"
    ],
    "pageId": 460
  },
  {
    "content": "\nsum(sqrt(x),log(y),z,0.5)",
    "hierarchy": [
      "sum Function"
    ],
    "pageId": 460
  },
  {
    "content": "\nadd(x,y)",
    "hierarchy": [
      "sum Function"
    ],
    "pageId": 460
  },
  {
    "content": "Returns the sum of <span class=\"code\">totaltermfreq</span> values for all terms in the field in the entire index (i.e., the number of\nindexed tokens for that field). (Aliases <span class=\"code\">sumtotaltermfreq</span> to <span class=\"code\">sttf</span>.)",
    "hierarchy": [
      "sumtotaltermfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "Syntax Example<span class=\"ff1\"> If doc1:(fieldX:A B C) and doc2:(fieldX:A A A A):</span>",
    "hierarchy": [
      "sumtotaltermfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "docFreq(fieldX:A) = 2 (A appears in 2 docs)",
    "hierarchy": [
      "sumtotaltermfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "freq(doc1, fieldX:A) = 4 (A appears 4 times in doc 2)",
    "hierarchy": [
      "sumtotaltermfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "totalTermFreq(fieldX:A) = 5 (A appears 5 times across all docs)",
    "hierarchy": [
      "sumtotaltermfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "sumTotalTermFreq(fieldX) = 7 in <span class=\"code\">fieldX</span>, there are 5 As, 1 B, 1 C",
    "hierarchy": [
      "sumtotaltermfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "Returns the number of times the term appears in the field for that document.",
    "hierarchy": [
      "termfreq Function"
    ],
    "pageId": 460
  },
  {
    "content": "\ntermfreq(text,'memory')",
    "hierarchy": [
    ],
    "pageId": 461
  },
  {
    "content": "Term frequency; returns the term frequency factor for the given term, using the <span class=\"link\">Similarity</span> for the field. The\ntf-idf<span class=\"ff1 fs0\"> value increases proportionally to the number of times a word appears in the document, but is offset</span>\nby the frequency of the word in the document, which helps to control for the fact that some words are\ngenerally more common than others. See also <span class=\"ff2 fs1\">idf</span>.",
    "hierarchy": [
      "tf Function"
    ],
    "pageId": 461
  },
  {
    "content": "\ntf(text,'solr')",
    "hierarchy": [
      "tf Function"
    ],
    "pageId": 461
  },
  {
    "content": "Causes the function query argument to derive its values from the top-level IndexReader containing all parts\nof an index. For example, the ordinal of a value in a single segment will be different from the ordinal of that\nsame value in the complete index.",
    "hierarchy": [
      "top Function"
    ],
    "pageId": 461
  },
  {
    "content": "The <span class=\"ff2 fs1\">ord()</span> and <span class=\"ff2 fs1\">rord()</span> functions implicitly use <span class=\"ff2 fs1\">top()</span>, and hence <span class=\"ff2 fs1\">ord(foo)</span> is equivalent to <span class=\"ff2 fs1\">top(ord(foo))</span>.",
    "hierarchy": [
      "top Function"
    ],
    "pageId": 461
  },
  {
    "content": "Returns the number of times the term appears in the field in the entire index. (Aliases <span class=\"ff2 fs1\">totaltermfreq</span> to\nttf<span class=\"ff1 fs0\">.)</span>",
    "hierarchy": [
      "totaltermfreq Function"
    ],
    "pageId": 461
  },
  {
    "content": "\nttf(text,'memory')",
    "hierarchy": [
      "totaltermfreq Function"
    ],
    "pageId": 461
  },
  {
    "content": "The following functions are boolean – they return true or false. They are mostly useful as the first argument\nof the <span class=\"ff2 fs1\">if</span> function, and some of these can be combined. If used somewhere else, it will yield a '1' or '0'.",
    "hierarchy": [
      "Boolean Functions"
    ],
    "pageId": 461
  },
  {
    "content": "Returns a value of true if and only if all of its operands evaluate to true.",
    "hierarchy": [
      "Boolean Functions",
      "and Function"
    ],
    "pageId": 461
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">and(not(exists(popularity)),exists(price))</span><span class=\"ls1\">: returns <span class=\"ff2 fs1\">true</span> for any document which has a value in</span>\nthe <span class=\"ff2 fs1\">price</span> field, but does not have a value in the <span class=\"ff2 fs1\">popularity</span> field.",
    "hierarchy": [
      "Boolean Functions",
      "and Function"
    ],
    "pageId": 461
  },
  {
    "content": "A logical disjunction.",
    "hierarchy": [
      "Boolean Functions",
      "or Function"
    ],
    "pageId": 461
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">or(value1,value2):</span><span class=\"ls1\"> <span class=\"ff2 fs1\">true</span> if either <span class=\"ff2 fs1\">value1</span> or <span class=\"ff2 fs1\">value2</span> is true.</span>",
    "hierarchy": [
      "Boolean Functions",
      "or Function"
    ],
    "pageId": 461
  },
  {
    "content": "Logical exclusive disjunction, or one or the other but not both.",
    "hierarchy": [
      "xor Function"
    ],
    "pageId": 462
  },
  {
    "content": "xor(field1,field2) returns <span class=\"code\">true</span> if either <span class=\"code\">field1</span> or <span class=\"code\">field2</span> is true; FALSE if both are true.",
    "hierarchy": [
      "xor Function"
    ],
    "pageId": 462
  },
  {
    "content": "The logically negated value of the wrapped function.",
    "hierarchy": [
      "not Function"
    ],
    "pageId": 462
  },
  {
    "content": "not(exists(author)): <span class=\"code\">true</span> only when <span class=\"code\">exists(author)</span> is false.",
    "hierarchy": [
      "not Function"
    ],
    "pageId": 462
  },
  {
    "content": "Returns <span class=\"code\">true</span> if any member of the field exists.",
    "hierarchy": [
      "exists Function"
    ],
    "pageId": 462
  },
  {
    "content": "exists(author): returns <span class=\"code\">true</span> for any document has a value in the \"author\" field.",
    "hierarchy": [
      "exists Function"
    ],
    "pageId": 462
  },
  {
    "content": "exists(query(price:5.00)): returns <span class=\"code\">true</span> if \"price\" matches \"5.00\".",
    "hierarchy": [
      "exists Function"
    ],
    "pageId": 462
  },
  {
    "content": "gt<span class=\"ff2 fs0\">, </span>gte<span class=\"ff2 fs0\">, </span>lt<span class=\"ff2 fs0\">, </span>lte<span class=\"ff2 fs0\">, </span>eq",
    "hierarchy": [
      "Comparison Functions"
    ],
    "pageId": 462
  },
  {
    "content": "5 comparison functions: Greater Than, Greater Than or Equal, Less Than, Less Than or Equal, Equal",
    "hierarchy": [
      "Comparison Functions"
    ],
    "pageId": 462
  },
  {
    "content": "if(lt(ms(mydatefield),315569259747),0.8,1) translates to this pseudocode: <span class=\"code\">if mydatefield <</span>\n315569259747 then 0.8 else 1",
    "hierarchy": [
      "Comparison Functions"
    ],
    "pageId": 462
  },
  {
    "content": "To give you a better understanding of how function queries can be used in Solr, suppose an index stores the\ndimensions in meters x,y,z of some hypothetical boxes with arbitrary names stored in field <span class=\"code\">boxname</span>.\nSuppose we want to search for box matching name <span class=\"code\">findbox</span> but ranked according to volumes of boxes. The\nquery parameters would be:",
    "hierarchy": [
      "Example Function Queries"
    ],
    "pageId": 462
  },
  {
    "content": "q=boxname:findbox _val_:\"product(x,y,z)\"",
    "hierarchy": [
      "Example Function Queries"
    ],
    "pageId": 462
  },
  {
    "content": "This query will rank the results based on volumes. In order to get the computed volume, you will need to\nrequest the <span class=\"code\">score</span>, which will contain the resultant volume:",
    "hierarchy": [
      "Example Function Queries"
    ],
    "pageId": 462
  },
  {
    "content": "&fl=*, score",
    "hierarchy": [
      "Example Function Queries"
    ],
    "pageId": 462
  },
  {
    "content": "Suppose that you also have a field storing the weight of the box as <span class=\"code\">weight</span>. To sort by the density of the box",
    "hierarchy": [
      "Example Function Queries"
    ],
    "pageId": 462
  },
  {
    "content": "and return the value of the density in score, you would submit the following query:",
    "hierarchy": [
    ],
    "pageId": 463
  },
  {
    "content": "http://localhost:8983/solr/collection_name/select?q=boxname:findbox\n_val_:\"div(weight,product(x,y,z))\"&fl=boxname x y z weight score",
    "hierarchy": [
    ],
    "pageId": 463
  },
  {
    "content": "You can sort your query results by the output of a function. For example, to sort results by distance, you\ncould enter:",
    "hierarchy": [
      "Sort By Function"
    ],
    "pageId": 463
  },
  {
    "content": "http://localhost:8983/solr/collection_name/select?q=*:*&sort=dist(2, point1, point2) desc",
    "hierarchy": [
      "Sort By Function"
    ],
    "pageId": 463
  },
  {
    "content": "Sort by function also supports pseudo-fields: fields can be generated dynamically and return results as\nthough it was normal field in the index. For example,",
    "hierarchy": [
      "Sort By Function"
    ],
    "pageId": 463
  },
  {
    "content": "&fl=id,sum(x, y),score&wt=xml",
    "hierarchy": [
      "Sort By Function"
    ],
    "pageId": 463
  },
  {
    "content": "would return:",
    "hierarchy": [
      "Sort By Function"
    ],
    "pageId": 463
  },
  {
    "content": "Local parameters are arguments in a Solr request that are specific to a query parameter.",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "Local parameters provide a way to add meta-data to certain argument types such as query strings. (In Solr\ndocumentation, local parameters are sometimes referred to as LocalParams.)",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "Local parameters are specified as prefixes to arguments. Take the following query argument, for example:",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "q=solr rocks",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "We can prefix this query string with local parameters to provide more information to the Standard Query\nParser. For example, we can change the default operator type to \"AND\" and the default field to \"title\":",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "q={!q.op=AND df=title}solr rocks",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "These local parameters would change the query to require a match on both \"solr\" and \"rocks\" while\nsearching the \"title\" field by default.",
    "hierarchy": [
      "Local Parameters in Queries"
    ],
    "pageId": 463
  },
  {
    "content": "To specify a local parameter, insert the following before the argument to be modified:",
    "hierarchy": [
      "Local Parameters in Queries",
      "Basic Syntax of Local Parameters"
    ],
    "pageId": 463
  },
  {
    "content": "Begin with <span class=\"ff2 fs2\">{!</span>",
    "hierarchy": [
      "Local Parameters in Queries",
      "Basic Syntax of Local Parameters"
    ],
    "pageId": 463
  },
  {
    "content": "Insert any number of key=value pairs separated by white space",
    "hierarchy": [
      "Local Parameters in Queries",
      "Basic Syntax of Local Parameters"
    ],
    "pageId": 463
  },
  {
    "content": "<span class=\"ls1\">End with <span class=\"ff2 fs1\">}</span> and immediately follow with the query argument</span>",
    "hierarchy": [
    ],
    "pageId": 464
  },
  {
    "content": "You may specify only one local parameters prefix per argument. Values in the key-value pairs may be quoted\nvia single or double quotes, and backslash escaping works within quoted strings.",
    "hierarchy": [
    ],
    "pageId": 464
  },
  {
    "content": "If a local parameter value appears without a name, it is given the implicit name of \"type\". This allows short-\nform representation for the type of query parser to use when parsing a query string. Thus",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "q={!dismax qf=myfield}solr rocks",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "is equivalent to:",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "q={!type=dismax qf=myfield}solr rocks",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "If no \"type\" is specified (either explicitly or implicitly) then the <span class=\"link\">lucene parser</span> is used by default. Thus",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "fq={!df=summary}solr rocks",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "is equivilent to:",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "fq={!type=lucene df=summary}solr rocks",
    "hierarchy": [
      "Query Type Short Form"
    ],
    "pageId": 464
  },
  {
    "content": "A special key of <span class=\"ff2 fs1\">v</span> within local parameters is an alternate way to specify the value of that parameter.",
    "hierarchy": [
      "Specifying the Parameter Value with the v Key"
    ],
    "pageId": 464
  },
  {
    "content": "q={!dismax qf=myfield}solr rocks",
    "hierarchy": [
      "Specifying the Parameter Value with the v Key"
    ],
    "pageId": 464
  },
  {
    "content": "is equivalent to",
    "hierarchy": [
      "Specifying the Parameter Value with the v Key"
    ],
    "pageId": 464
  },
  {
    "content": "q={!type=dismax qf=myfield v='solr rocks'<span class=\"ff1 fs0\">}</span>",
    "hierarchy": [
      "Specifying the Parameter Value with the v Key"
    ],
    "pageId": 464
  },
  {
    "content": "Parameter dereferencing, or indirection, lets you use the value of another argument rather than specifying it\ndirectly. This can be used to simplify queries, decouple user input from query parameters, or decouple front-\nend GUI parameters from defaults set in <span class=\"ff2 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
      "Parameter Dereferencing"
    ],
    "pageId": 464
  },
  {
    "content": "q={!dismax qf=myfield}solr rocks",
    "hierarchy": [
      "Parameter Dereferencing"
    ],
    "pageId": 464
  },
  {
    "content": "is equivalent to:",
    "hierarchy": [
      "Parameter Dereferencing"
    ],
    "pageId": 464
  },
  {
    "content": "q={!type=dismax qf=myfield v=$qq}&qq=solr rocks",
    "hierarchy": [
      "Parameter Dereferencing"
    ],
    "pageId": 464
  },
  {
    "content": "In addition to the main query parsers discussed earlier, there are several other query parsers that can be\nused instead of or in conjunction with the main parsers for specific purposes.",
    "hierarchy": [
      "Other Parsers"
    ],
    "pageId": 464
  },
  {
    "content": "This section details the other parsers, and gives examples for how they might be used.",
    "hierarchy": [
      "Other Parsers"
    ],
    "pageId": 464
  },
  {
    "content": "Many of these parsers are expressed the same way as <span class=\"link\">Local Parameters in Queries</span>.",
    "hierarchy": [
      "Other Parsers"
    ],
    "pageId": 464
  },
  {
    "content": "There are two query parsers that support block joins. These parsers allow indexing and searching for\nrelational content that has been <span class=\"link\">indexed as nested documents</span>.",
    "hierarchy": [
      "Block Join Query Parsers"
    ],
    "pageId": 465
  },
  {
    "content": "The example usage of the query parsers below assumes these two documents and each of their child\ndocuments have been indexed:",
    "hierarchy": [
      "Block Join Query Parsers"
    ],
    "pageId": 465
  },
  {
    "content": "Ê <span class=\"fc3\"><doc></span>\nÊ <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>1<span class=\"fc3\"></field></span>\nÊ <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"title\"<span class=\"fc3\">></span></span>Solr has block join support<span class=\"fc3\"></field></span>\nÊ <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"content_type\"<span class=\"fc3\">></span></span>parentDocument<span class=\"fc3\"></field></span>\nÊ   <span class=\"fc3\"><doc></span>\nÊ     <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>2<span class=\"fc3\"></field></span>\nÊ     <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"comments\"<span class=\"fc3\">></span></span>SolrCloud supports it too!<span class=\"fc3\"></field></span>\nÊ   <span class=\"fc3\"></doc></span>\nÊ <span class=\"fc3\"></doc></span>\nÊ <span class=\"fc3\"><doc></span>\nÊ   <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></field></span>\nÊ   <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"title\"<span class=\"fc3\">></span></span>New Lucene and Solr release<span class=\"fc3\"></field></span>\nÊ   <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"content_type\"<span class=\"fc3\">></span></span>parentDocument<span class=\"fc3\"></field></span>\nÊ   <span class=\"fc3\"><doc></span>\nÊ     <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>4<span class=\"fc3\"></field></span>\nÊ     <span class=\"fc3\"><field</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"comments\"<span class=\"fc3\">></span></span>Lots of new features<span class=\"fc3\"></field></span>\nÊ   <span class=\"fc3\"></doc></span>\nÊ <span class=\"fc3\"></doc></span>",
    "hierarchy": [
      "Block Join Query Parsers"
    ],
    "pageId": 465
  },
  {
    "content": "This parser takes a query that matches some parent documents and returns their children.",
    "hierarchy": [
      "Block Join Query Parsers",
      "Block Join Children Query Parser"
    ],
    "pageId": 465
  },
  {
    "content": "The syntax for this parser is: <span class=\"code\">q={!child of=<allParents>}<someParents></span>.",
    "hierarchy": [
      "Block Join Query Parsers",
      "Block Join Children Query Parser"
    ],
    "pageId": 465
  },
  {
    "content": "The parameter <span class=\"code\">allParents</span> is a filter that matches <span class=\"ff1\">only parent documents</span>; here you would define the field\nand value that you used to identify <span class=\"ff1\">all parent documents</span>.",
    "hierarchy": [
      "Block Join Query Parsers",
      "Block Join Children Query Parser"
    ],
    "pageId": 465
  },
  {
    "content": "The parameter <span class=\"code\">someParents</span> identifies a query that will match some of the parent documents. The output is\nthe children.",
    "hierarchy": [
      "Block Join Query Parsers",
      "Block Join Children Query Parser"
    ],
    "pageId": 465
  },
  {
    "content": "Using the example documents above, we can construct a query such as <span class=\"code\">q={!child</span>\nof=\"content_type:parentDocument\"}title:lucene&wt=xml<span class=\"ff2 fs1\">. We only get one document in response:</span>",
    "hierarchy": [
      "Block Join Query Parsers",
      "Block Join Children Query Parser"
    ],
    "pageId": 465
  },
  {
    "content": "Ê <span class=\"fc3\"><doc></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>4<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"comments\"<span class=\"fc3\">></span></span>Lots of new features<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></doc></span>",
    "hierarchy": [
      "Block Join Query Parsers",
      "Block Join Children Query Parser"
    ],
    "pageId": 465
  },
  {
    "content": "The query for <span class=\"code\">someParents</span> should match only parent documents passed by <span class=\"code\">allParents</span> or\nyou may get an exception:",
    "hierarchy": [
    ],
    "pageId": 466
  },
  {
    "content": "Parent query must not match any docs besides parent filter. Combine them as must\n(+) and must-not (-) clauses to find a problem doc.",
    "hierarchy": [
    ],
    "pageId": 466
  },
  {
    "content": "You can search for <span class=\"code\">q=+(someParents) -(allParents)</span> to find a cause if you encounter this\nerror.",
    "hierarchy": [
    ],
    "pageId": 466
  },
  {
    "content": "{!child}<span class=\"ff2 fs1\"> also supports </span>filters<span class=\"ff2 fs1\"> and </span>excludeTags<span class=\"ff2 fs1\"> local parameters like the following:</span>",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 466
  },
  {
    "content": "{!child of=<allParents> filters=$parentfq\nexcludeTags=certain}<someParents>&parentfq=BRAND:Foo&parentfq=NAME:Bar&parentfq={!tag=certain}CAT\nEGORY:Baz",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 466
  },
  {
    "content": "This is equivalent to:",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 466
  },
  {
    "content": "{!child of=<allParents>}+<someParents> +BRAND:Foo +NAME:Bar",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 466
  },
  {
    "content": "Notice \"$\" syntax in <span class=\"code\">filters</span> for referencing queries; comma-separated tags <span class=\"code\">excludeTags</span> allows to exclude\ncertain queries by tagging. Overall the idea is similar to <span class=\"link\">excluding fq in facets</span>. Note, that filtering is applied\nto the subordinate clause (<span class=\"code\"><someParents></span>), and the intersection result is joined to the children.",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 466
  },
  {
    "content": "When subordinate clause (<span class=\"code\"><someParents></span>) is omitted, it's parsed as a <span class=\"ff5\">segmented</span> and <span class=\"ff5\">cached</span> filter for\nchildren documents. More precisely, <span class=\"code\">q={!child of=<allParents>}</span> is equivalent to <span class=\"code\">q=*:* -<allParents></span>.",
    "hierarchy": [
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "This parser takes a query that matches child documents and returns their parents.",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "The syntax for this parser is similar: <span class=\"code\">q={!parent which=<allParents>}<someChildren></span>.",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "The parameter <span class=\"code\">allParents</span> is a filter that matches <span class=\"ff4\">only parent documents</span>; here you would define the field\nand value that you used to identify <span class=\"ff4\">all parent documents</span>.",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "The parameter <span class=\"code\">someChildren</span> is a query that matches some or all of the child documents.",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "The query for <span class=\"code\">someChildren</span> should match only child documents or you may get an\nexception:",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "Child query must not match same docs with parent filter. Combine them as must\nclauses (+) to find a problem doc.",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "You can search for <span class=\"code\">q=+(parentFilter) +(someChildren)</span> to find a cause.",
    "hierarchy": [
      "Block Join Parent Query Parser",
      "All Children Syntax"
    ],
    "pageId": 466
  },
  {
    "content": "Again using the example documents above, we can construct a query such as <span class=\"ff2 fs1\">q={!parent</span>\nwhich=\"content_type:parentDocument\"}comments:SolrCloud&wt=xml<span class=\"ff1 fs0\">. We get this document in response:</span>",
    "hierarchy": [
    ],
    "pageId": 467
  },
  {
    "content": "Ê <span class=\"fc1\"><doc></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"title\"<span class=\"fc1\">><str></span></span>Solr has block join support<span class=\"fc1\"></str></arr></span>\nÊ   <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"content_type\"<span class=\"fc1\">><str></span></span>parentDocument<span class=\"fc1\"></str></arr></span>\nÊ <span class=\"fc1\"></doc></span>",
    "hierarchy": [
    ],
    "pageId": 467
  },
  {
    "content": "A common mistake is to try to filter parents with a <span class=\"ff2 fs1\">which</span> filter, as in this bad example:",
    "hierarchy": [
    ],
    "pageId": 467
  },
  {
    "content": "q={!parent which=\"<span class=\"ff5\">title:join</span>\"}comments:SolrCloud",
    "hierarchy": [
    ],
    "pageId": 467
  },
  {
    "content": "Instead, you should use a sibling mandatory clause as a filter:",
    "hierarchy": [
    ],
    "pageId": 467
  },
  {
    "content": "q= <span class=\"ff5\">+title:join</span> +{!parent which=\"\ncontent_type:parentDocument<span class=\"ff2\">\"}comments:SolrCloud</span>",
    "hierarchy": [
    ],
    "pageId": 467
  },
  {
    "content": "The <span class=\"ff2 fs1\">{!parent}</span> query supports <span class=\"ff2 fs1\">filters</span> and <span class=\"ff2 fs1\">excludeTags</span> local parameters like the following:",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 467
  },
  {
    "content": "{!parent which=<allParents> filters=$childfq excludeTags=certain}<someChildren>&\nchildfq=COLOR:Red&\nchildfq=SIZE:XL&\nchildfq={!tag=certain}PRINT:Hatched",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 467
  },
  {
    "content": "This is equivalent to:",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 467
  },
  {
    "content": "{!parent which=<allParents>}+<someChildren> +COLOR:Red +SIZE:XL",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 467
  },
  {
    "content": "Notice the \"$\" syntax in <span class=\"ff2 fs1\">filters</span> for referencing queries. Comma-separated tags in <span class=\"ff2 fs1\">excludeTags</span> allow\nexcluding certain queries by tagging. Overall the idea is similar to <span class=\"fc7\">excluding fq in facets</span>. Note that filtering is\napplied to the subordinate clause (<span class=\"ff2 fs1\"><someChildren></span>) first, and the intersection result is joined to the parents.",
    "hierarchy": [
      "Filtering and Tagging"
    ],
    "pageId": 467
  },
  {
    "content": "You can optionally use the <span class=\"ff2 fs1\">score</span> local parameter to return scores of the subordinate query. The values to\nuse for this parameter define the type of aggregation, which are <span class=\"ff2 fs1\">avg</span> (average), <span class=\"ff2 fs1\">max</span> (maximum), <span class=\"ff2 fs1\">min</span>\n(minimum), <span class=\"ff2 fs1\">total (sum)</span>. Implicit default is <span class=\"ff2 fs1\">none</span> which returns <span class=\"ff2 fs1\">0.0</span>.",
    "hierarchy": [
      "Scoring with the Block Join Parent Query Parser"
    ],
    "pageId": 467
  },
  {
    "content": "When subordinate clause (<span class=\"ff2 fs1\"><someChildren></span>) is omitted, it's parsed as a <span class=\"ff4\">segmented</span> and <span class=\"ff4\">cached</span> filter for all\nparent documents, or more precisely <span class=\"ff2 fs1\">q={!parent which=<allParents>}</span> is equivalent to <span class=\"ff2 fs1\">q=<allParents></span>.",
    "hierarchy": [
      "All Parents Syntax"
    ],
    "pageId": 467
  },
  {
    "content": "The <span class=\"code\">BoolQParser</span> creates a Lucene <span class=\"code\">BooleanQuery</span> which is a boolean combination of other queries. Sub-\nqueries along with their typed occurrences indicate how documents will be matched and scored.",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "must\nA list of queries that <span class=\"ff1\">must</span> appear in matching documents and contribute to the score.",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "must_not\nA list of queries that <span class=\"ff1\">must not</span> appear in matching documents.",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "should\nA list of queries <span class=\"ff1\">should</span> appear in matching documents. For a BooleanQuery with no <span class=\"code\">must</span> queries, one or\nmore <span class=\"code\">should</span> queries must match a document for the BooleanQuery to match.",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "filter\nA list of queries that <span class=\"ff1\">must</span> appear in matching documents. However, unlike <span class=\"code\">must</span>, the score of filter\nqueries is ignored.",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "{!bool must=foo must=bar}",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "{!bool filter=foo should=bar}",
    "hierarchy": [
      "Boolean Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "BoostQParser<span class=\"ff2 fs1\"> extends the </span>QParserPlugin<span class=\"ff2 fs1\"> and creates a boosted query from the input value. The main value</span>\nis the query to be boosted. Parameter <span class=\"code\">b</span> is the function query to use as the boost. The query to be boosted\nmay be of any type.",
    "hierarchy": [
      "Boost Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "Creates a query \"foo\" which is boosted (scores are multiplied) by the function query <span class=\"code\">log(popularity)</span>:",
    "hierarchy": [
      "Boost Query Parser",
      "Boost Query Parser Examples"
    ],
    "pageId": 468
  },
  {
    "content": "{!boost b=log(popularity)}foo",
    "hierarchy": [
      "Boost Query Parser",
      "Boost Query Parser Examples"
    ],
    "pageId": 468
  },
  {
    "content": "Creates a query \"foo\" which is boosted by the date boosting function referenced in\nReciprocalFloatFunction<span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
      "Boost Query Parser",
      "Boost Query Parser Examples"
    ],
    "pageId": 468
  },
  {
    "content": "{!boost b=recip(ms(NOW,mydatefield),3.16e-11,1,1)}foo",
    "hierarchy": [
      "Boost Query Parser",
      "Boost Query Parser Examples"
    ],
    "pageId": 468
  },
  {
    "content": "The <span class=\"code\">CollapsingQParser</span> is really a <span class=\"ff4\">post filter</span> that provides more performant field collapsing than Solr's",
    "hierarchy": [
      "Collapsing Query Parser"
    ],
    "pageId": 468
  },
  {
    "content": "standard approach when the number of distinct groups in the result set is high.",
    "hierarchy": [
    ],
    "pageId": 469
  },
  {
    "content": "This parser collapses the result set to a single document per group before it forwards the result set to the\nrest of the search components. So all downstream components (faceting, highlighting, etc.) will work with\nthe collapsed result set.",
    "hierarchy": [
    ],
    "pageId": 469
  },
  {
    "content": "Details about using the <span class=\"ff2 fs1\">CollapsingQParser</span> can be found in the section <span class=\"link\">Collapse and Expand Results</span>.",
    "hierarchy": [
    ],
    "pageId": 469
  },
  {
    "content": "The <span class=\"ff2 fs1\">ComplexPhraseQParser</span> provides support for wildcards, ORs, etc., inside phrase queries using Lucene's\nComplexPhraseQueryParser<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "Under the covers, this query parser makes use of the Span group of queries, e.g., spanNear, spanOr, etc.,\nand is subject to the same limitations as that family or parsers.",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "inOrder\nSet to true to force phrase queries to match terms in the order specified. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "df\nThe default search field.",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "{!complexphrase inOrder=true}name:\"Jo* Smith\"",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "{!complexphrase inOrder=false}name:\"(john jon jonathan~) peters*\"",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "A mix of ordered and unordered complex phrase queries:",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "+_query_:\"{!complexphrase inOrder=true}manu:\\\"a* c*\\\"\" +_query_:\"{!complexphrase inOrder=false\ndf=name}\\\"bla* pla*\\\"\"",
    "hierarchy": [
      "Complex Phrase Query Parser"
    ],
    "pageId": 469
  },
  {
    "content": "Performance is sensitive to the number of unique terms that are associated with a pattern. For instance,\nsearching for \"a*\" will form a large OR clause (technically a SpanOr with many terms) for all of the terms in\nyour index for the indicated field that start with the single letter 'a'. It may be prudent to restrict wildcards\nto at least two or preferably three letters as a prefix. Allowing very short prefixes may result in to many low-\nquality documents being returned.",
    "hierarchy": [
      "Complex Phrase Query Parser",
      "Complex Phrase Parser Limitations"
    ],
    "pageId": 469
  },
  {
    "content": "Notice that it also supports leading wildcards \"*a\" as well with consequent performance implications.\nApplying <span class=\"link\">ReversedWildcardFilterFactory</span> in index-time analysis is usually a good idea.",
    "hierarchy": [
      "Complex Phrase Query Parser",
      "Complex Phrase Parser Limitations"
    ],
    "pageId": 469
  },
  {
    "content": "You may need to increase MaxBooleanClauses in <span class=\"ff2 fs1\">solrconfig.xml</span> as a result of the term expansion above:",
    "hierarchy": [
      "Complex Phrase Query Parser",
      "Complex Phrase Parser Limitations",
      "MaxBooleanClauses with Complex Phrase Parser"
    ],
    "pageId": 469
  },
  {
    "content": "This property is described in more detail in the section <span class=\"link\">Query Sizing and Warming</span>.",
    "hierarchy": [
    ],
    "pageId": 470
  },
  {
    "content": "It is recommended not to use stopword elimination with this query parser.",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "Lets say we add the terms <span class=\"code\">the</span>, <span class=\"code\">up</span>, and <span class=\"code\">to</span> to <span class=\"ff1 fs2\">stopwords.txt</span> for your collection, and index a document\ncontaining the text <span class=\"ff4\">\"Stores up to 15,000 songs, 25,00 photos, or 150 yours of video\"</span> in a field named \"features\".",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "While the query below does not use this parser:",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "Êq=features:\"Stores up to 15,000\"",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "the document is returned. The next query that <span class=\"ff4\">does</span> use the Complex Phrase Query Parser, as in this query:",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "Êq=features:\"sto* up to 15*\"&defType=complexphrase",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "does <span class=\"ff4\">not</span> return that document because SpanNearQuery has no good way to handle stopwords in a way\nanalogous to PhraseQuery. If you must remove stopwords for your use case, use a custom filter factory or\nperhaps a customized synonyms filter that reduces given stopwords to some impossible token.",
    "hierarchy": [
      "Stopwords with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "Special care has to be given when escaping: clauses between double quotes (usually whole query) is parsed\ntwice, these parts have to be escaped as twice, e.g., <span class=\"ff1 fs2\">\"foo\\\\: bar\\\\^\"</span>.",
    "hierarchy": [
      "Escaping with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "The <span class=\"ff1 fs2\">FieldQParser</span> extends the <span class=\"ff1 fs2\">QParserPlugin</span> and creates a field query from the input value, applying text\nanalysis and constructing a phrase query if appropriate. The parameter <span class=\"ff1 fs2\">f</span> is the field to be queried.",
    "hierarchy": [
      "Field Query Parser",
      "Escaping with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Field Query Parser",
      "Escaping with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "{!field f=myfield}Foo Bar",
    "hierarchy": [
      "Field Query Parser",
      "Escaping with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "This example creates a phrase query with \"foo\" followed by \"bar\" (assuming the analyzer for <span class=\"ff1 fs2\">myfield</span> is a\ntext field with an analyzer that splits on whitespace and lowercase terms). This is generally equivalent to the\nLucene query parser expression <span class=\"ff1 fs2\">myfield:\"Foo Bar\"</span>.",
    "hierarchy": [
      "Field Query Parser",
      "Escaping with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "The syntax is:",
    "hierarchy": [
      "Filters Query Parser",
      "Escaping with Complex Phrase Parser"
    ],
    "pageId": 470
  },
  {
    "content": "q={!filters param=$fqs excludeTags=sample}field:text&\nfqs=COLOR:Red&\nfqs=SIZE:XL&\nfqs={!tag=sample}BRAND:Foo",
    "hierarchy": [
    ],
    "pageId": 471
  },
  {
    "content": "which is equivalent to:",
    "hierarchy": [
    ],
    "pageId": 471
  },
  {
    "content": "q=+field:text +COLOR:Red +SIZE:XL",
    "hierarchy": [
    ],
    "pageId": 471
  },
  {
    "content": "param<span class=\"ff2 fs0\"> local parameter uses \"$\" syntax to refer to a few queries, where </span>excludeTags<span class=\"ff2 fs0\"> may omit some of</span>\nthem.",
    "hierarchy": [
    ],
    "pageId": 471
  },
  {
    "content": "The <span class=\"ff1 fs1\">FunctionQParser</span> extends the <span class=\"ff1 fs1\">QParserPlugin</span> and creates a function query from the input value. This is\nonly one way to use function queries in Solr; for another, more integrated, approach, see the section on\nFunction Queries<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Function Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Function Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "{!func}log(foo)",
    "hierarchy": [
      "Function Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "The <span class=\"ff1 fs1\">FunctionRangeQParser</span> extends the <span class=\"ff1 fs1\">QParserPlugin</span> and creates a range query over a function. This is\nalso referred to as <span class=\"ff1 fs1\">frange</span>, as seen in the examples below.",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "l\nThe lower bound. This parameter is optional.",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "u\nThe upper bound. This parameter is optional.",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "incl\nInclude the lower bound. This parameter is optional. The default is <span class=\"ff1 fs1\">true</span>.",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "incu\nInclude the upper bound. This parameter is optional. The default is <span class=\"ff1 fs1\">true</span>.",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "{!frange l=1000 u=50000}myfield",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "Êfq={!frange l=0 u=2.2} sum(user_ranking,editor_ranking)",
    "hierarchy": [
      "Function Range Query Parser"
    ],
    "pageId": 471
  },
  {
    "content": "Both of these examples restrict the results by a range of values found in a declared field or a function query.\nIn the second example, we're doing a sum calculation, and then defining only values between 0 and 2.2\nshould be returned to the user.",
    "hierarchy": [
    ],
    "pageId": 472
  },
  {
    "content": "For more information about range queries over functions, see Yonik Seeley's introductory blog post <span class=\"link\">Ranges</span>\nover Functions in Solr 1.4<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 472
  },
  {
    "content": "The <span class=\"code\">graph</span> query parser does a breadth first, cyclic aware, graph traversal of all documents that are\n\"reachable\" from a starting set of root documents identified by a wrapped query.",
    "hierarchy": [
      "Graph Query Parser"
    ],
    "pageId": 472
  },
  {
    "content": "The graph is built according to linkages between documents based on the terms found in <span class=\"code\">from</span> and <span class=\"code\">to</span> fields\nthat you specify as part of the query.",
    "hierarchy": [
      "Graph Query Parser"
    ],
    "pageId": 472
  },
  {
    "content": "Supported field types are point fields with docValues enabled, or string fields with <span class=\"code\">indexed=true</span> or\ndocValues=true<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Graph Query Parser"
    ],
    "pageId": 472
  },
  {
    "content": "For string fields which are <span class=\"code\">indexed=false</span> and <span class=\"code\">docValues=true</span>, please refer to the\njavadocs for <span class=\"code\">DocValuesTermsQuery</span> for it's performance characteristics so <span class=\"code\">indexed=true</span>\nwill perform better for most use-cases.",
    "hierarchy": [
      "Graph Query Parser"
    ],
    "pageId": 472
  },
  {
    "content": "to\nThe field name of matching documents to inspect to identify outgoing edges for graph traversal. Defaults\nto <span class=\"code\">edge_ids</span>.",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "from\nThe field name to of candidate documents to inspect to identify incoming graph edges. Defaults to\nnode_id<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "traversalFilter\nAn optional query that can be supplied to limit the scope of documents that are traversed.",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "maxDepth\nInteger specifying how deep the breadth first search of the graph should go beginning with the initial\nquery. Defaults to <span class=\"code\">-1</span> (unlimited).",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "returnRoot\nBoolean to indicate if the documents that matched the original query (to define the starting points for\ngraph) should be included in the final results. Defaults to <span class=\"code\">true</span>.",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "returnOnlyLeaf\nBoolean that indicates if the results of the query should be filtered so that only documents with no\noutgoing edges are returned. Defaults to <span class=\"code\">false</span>.",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "useAutn\nBoolean that indicates if an Automatons should be compiled for each iteration of the breadth first search,\nwhich may be faster for some graphs. Defaults to <span class=\"code\">false</span>.",
    "hierarchy": [
      "Graph Query Parser",
      "Graph Query Parameters"
    ],
    "pageId": 472
  },
  {
    "content": "The <span class=\"code\">graph</span> parser only works in single node Solr installations, or with <span class=\"link\">SolrCloud</span> collections that use exactly 1\nshard.",
    "hierarchy": [
      "Graph Query Limitations"
    ],
    "pageId": 473
  },
  {
    "content": "To understand how the graph parser works, consider the following Directed Cyclic Graph, containing 8\nnodes (A to H) and 9 edges (1 to 9):",
    "hierarchy": [
      "Graph Query Examples"
    ],
    "pageId": 473
  },
  {
    "content": "One way to model this graph as Solr documents, would be to create one document per node, with\nmutivalued fields identifying the incoming and outgoing edges for each node:",
    "hierarchy": [
      "Graph Query Examples"
    ],
    "pageId": 473
  },
  {
    "content": "curl -H 'Content-Type: application/json' 'http://localhost:8983/solr/my_graph/update?commit=true'\n--data-binary '[\nÊ {\"id\":\"A\",\"foo\":  7, \"out_edge\":[\"1\",\"9\"],  \"in_edge\":[\"4\",\"2\"]  },\nÊ {\"id\":\"B\",\"foo\": 12, \"out_edge\":[\"3\",\"6\"],  \"in_edge\":[\"1\"]      },\nÊ {\"id\":\"C\",\"foo\": 10, \"out_edge\":[\"5\",\"2\"],  \"in_edge\":[\"9\"]      },\nÊ {\"id\":\"D\",\"foo\": 20, \"out_edge\":[\"4\",\"7\"],  \"in_edge\":[\"3\",\"5\"]  },\nÊ {\"id\":\"E\",\"foo\": 17, \"out_edge\":[],         \"in_edge\":[\"6\"]      },\nÊ {\"id\":\"F\",\"foo\": 11, \"out_edge\":[],         \"in_edge\":[\"7\"]      },\nÊ {\"id\":\"G\",\"foo\":  7, \"out_edge\":[\"8\"],      \"in_edge\":[]         },\nÊ {\"id\":\"H\",\"foo\": 10, \"out_edge\":[],         \"in_edge\":[\"8\"]      }\n]'",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "With the model shown above, the following query demonstrates a simple traversal of all nodes reachable\nfrom node A:",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "http://localhost:8983/solr/my_graph/query?fl=id&q={!graph+from=in_edge+to=out_edge}id:A",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "Ê  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"A\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"B\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"C\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"D\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"E\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"F\"</span> } ]\n}",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "We can also use the <span class=\"ff1 fs1\">traversalFilter</span> to limit the graph traversal to only nodes with maximum value of 15\nin the <span class=\"ff1 fs1\">foo</span> field. In this case that means D, E, and F are excluded – F has a value of <span class=\"ff1 fs1\">foo=11</span>, but it is\nunreachable because the traversal skipped D:",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "http://localhost:8983/solr/my_graph/query?fl=id&q={!graph+from=in_edge+to=out_edge+traversalFilte\nr='foo:[*+TO+15]'}id:A",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "Ê  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"A\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"B\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"C\"</span> } ]\n}",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "The examples shown so far have all used a query for a single document (<span class=\"ff1 fs1\">\"id:A\"</span>) as the root node for the\ngraph traversal, but any query can be used to identify multiple documents to use as root nodes. The next\nexample demonstrates using the <span class=\"ff1 fs1\">maxDepth</span> parameter to find all nodes that are at most one edge away from\nan root node with a value in the <span class=\"ff1 fs1\">foo</span> field less then or equal to 10:",
    "hierarchy": [
    ],
    "pageId": 474
  },
  {
    "content": "http://localhost:8983/solr/my_graph/query?fl=id&q={!graph+from=in_edge+to=out_edge+maxDepth=1}foo\n:[*+TO+10]",
    "hierarchy": [
    ],
    "pageId": 475
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 475
  },
  {
    "content": "Ê  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"A\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"B\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"C\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"D\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"G\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"H\"</span> } ]\n}",
    "hierarchy": [
    ],
    "pageId": 475
  },
  {
    "content": "The Document & Field modeling used in the above examples enumerated all of the outgoing and income\nedges for each node explicitly, to help demonstrate exactly how the \"from\" and \"to\" params work, and to\ngive you an idea of what is possible. With multiple sets of fields like these for identifying incoming and\noutgoing edges, it's possible to model many independent Directed Graphs that contain some or all of the\ndocuments in your collection.",
    "hierarchy": [
      "Simplified Models"
    ],
    "pageId": 475
  },
  {
    "content": "But in many cases it can also be possible to drastically simplify the model used.",
    "hierarchy": [
      "Simplified Models"
    ],
    "pageId": 475
  },
  {
    "content": "For example, the same graph shown in the diagram above can be modelled by Solr Documents that\nrepresent each node and know only the ids of the nodes they link to, without knowing anything about the\nincoming links:",
    "hierarchy": [
      "Simplified Models"
    ],
    "pageId": 475
  },
  {
    "content": "curl -H 'Content-Type: application/json'\n'http://localhost:8983/solr/alt_graph/update?commit=true' --data-binary '[\nÊ {\"id\":\"A\",\"foo\":  7, \"out_edge\":[\"B\",\"C\"] },\nÊ {\"id\":\"B\",\"foo\": 12, \"out_edge\":[\"E\",\"D\"] },\nÊ {\"id\":\"C\",\"foo\": 10, \"out_edge\":[\"A\",\"D\"] },\nÊ {\"id\":\"D\",\"foo\": 20, \"out_edge\":[\"A\",\"F\"] },\nÊ {\"id\":\"E\",\"foo\": 17, \"out_edge\":[]        },\nÊ {\"id\":\"F\",\"foo\": 11, \"out_edge\":[]        },\nÊ {\"id\":\"G\",\"foo\":  7, \"out_edge\":[\"H\"]     },\nÊ {\"id\":\"H\",\"foo\": 10, \"out_edge\":[]        }\nÊ ]'",
    "hierarchy": [
      "Simplified Models"
    ],
    "pageId": 475
  },
  {
    "content": "With this alternative document model, all of the same queries demonstrated above can still be executed,\nsimply by changing the “<span class=\"ff1 fs1\">from</span>” parameter to replace the “<span class=\"ff1 fs1\">in_edge</span>” field with the “<span class=\"ff1 fs1\">id</span>” field:",
    "hierarchy": [
      "Simplified Models"
    ],
    "pageId": 475
  },
  {
    "content": "http://localhost:8983/solr/alt_graph/query?fl=id&q={!graph+from=id+to=out_edge+maxDepth=1}foo:[*+\nTO+10]",
    "hierarchy": [
      "Simplified Models"
    ],
    "pageId": 475
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 476
  },
  {
    "content": "Ê  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"A\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"B\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"C\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"D\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"G\"</span> },\nÊ  { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"H\"</span> } ]\n}",
    "hierarchy": [
    ],
    "pageId": 476
  },
  {
    "content": "JoinQParser<span class=\"code\"> extends the </span>QParserPlugin<span class=\"code\">. It allows normalizing relationships between documents with a join</span>\noperation. This is different from the concept of a join in a relational database because no information is\nbeing truly joined. An appropriate SQL analogy would be an \"inner query\".",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "Examples:",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "Find all products containing the word \"ipod\", join them against manufacturer docs and return the list of\nmanufacturers:",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "{!join from=manu_id_s to=id}ipod",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "Find all manufacturer docs named \"belkin\", join them against product docs, and filter the list to only\nproducts with a price less than $12:",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "q  = {!join from=id to=manu_id_s}compName_s:Belkin\nfq = price:[* TO 12]",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "The join operation is done on a term basis, so the \"from\" and \"to\" fields must use compatible field types. For\nexample: joining between a <span class=\"ff1 fs2\">StrField</span> and a <span class=\"ff1 fs2\">IntPointField</span> will not work, likewise joining between a\nStrField<span class=\"code\"> and a </span>TextField<span class=\"code\"> that uses </span>LowerCaseFilterFactory<span class=\"code\"> will only work for values that are already</span>\nlower cased in the string field.",
    "hierarchy": [
      "Join Query Parser"
    ],
    "pageId": 476
  },
  {
    "content": "You can optionally use the <span class=\"ff1 fs2\">score</span> parameter to return scores of the subordinate query. The values to use for\nthis parameter define the type of aggregation, which are <span class=\"ff1 fs2\">avg</span> (average), <span class=\"ff1 fs2\">max</span> (maximum), <span class=\"ff1 fs2\">min</span> (minimum)\ntotal<span class=\"code\">, or </span>none<span class=\"code\">.</span>",
    "hierarchy": [
      "Join Query Parser",
      "Join Parser Scoring"
    ],
    "pageId": 476
  },
  {
    "content": "Specifying <span class=\"ff1 fs2\">score</span> local parameter switches the join algorithm. This might have performance\nimplication on large indices, but it's more important that this algorithm won’t work for\nsingle value numeric field starting from 7.0. Users are encouraged to change field types to\nstring and rebuild indexes during migration.",
    "hierarchy": [
      "Join Query Parser",
      "Join Parser Scoring"
    ],
    "pageId": 476
  },
  {
    "content": "You can also specify a <span class=\"code\">fromIndex</span> parameter to join with a field from another core or collection. If running in\nSolrCloud mode, then the collection specified in the <span class=\"code\">fromIndex</span> parameter must have a single shard and a\nreplica on all Solr nodes where the collection you're joining to has a replica.",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "Let's consider an example where you want to use a Solr join query to filter movies by directors that have\nwon an Oscar. Specifically, imagine we have two collections with the following fields:",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "movies<span class=\"ff2\">: id, title, director_id, …</span>",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "movie_directors<span class=\"ff2\">: id, name, has_oscar, …</span>",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "To filter movies by directors that have won an Oscar using a Solr join on the <span class=\"ff1\">movie_directors</span> collection, you\ncan send the following filter query to the <span class=\"ff1\">movies</span> collection:",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "fq={!join from=id fromIndex=movie_directors to=director_id}has_oscar:true",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "Notice that the query criteria of the filter (<span class=\"code\">has_oscar:true</span>) is based on a field in the collection specified\nusing <span class=\"code\">fromIndex</span>. Keep in mind that you cannot return fields from the <span class=\"code\">fromIndex</span> collection using join\nqueries, you can only use the fields for filtering results in the \"to\" collection (movies).",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "Next, let's understand how these collections need to be deployed in your cluster. Imagine the <span class=\"ff1\">movies</span>\ncollection is deployed to a four node SolrCloud cluster and has two shards with a replication factor of two.\nSpecifically, the <span class=\"ff1\">movies</span> collection has replicas on the following four nodes:",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 1: movies_shard1_replica1",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 2: movies_shard1_replica2",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 3: movies_shard2_replica1",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 4: movies_shard2_replica2",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "To use the <span class=\"ff1\">movie_directors</span> collection in Solr join queries with the <span class=\"ff1\">movies</span> collection, it needs to have a\nreplica on each of the four nodes. In other words, <span class=\"ff1\">movie_directors</span> must have one shard and replication\nfactor of four:",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 1: movie_directors_shard1_replica1",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 2: movie_directors_shard1_replica2",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 3: movie_directors_shard1_replica3",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "node 4: movie_directors_shard1_replica4",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "At query time, the <span class=\"code\">JoinQParser</span> will access the local replica of the <span class=\"ff1\">movie_directors</span> collection to perform the\njoin. If a local replica is not available or active, then the query will fail. At this point, it should be clear that\nsince you're limited to a single shard and the data must be replicated across all nodes where it is needed,\nthis approach works better with smaller data sets where there is a one-to-many relationship between the\nfrom collection and the to collection. Moreover, if you add a replica to the to collection, then you also need to\nadd a replica for the from collection.",
    "hierarchy": [
      "Joining Across Collections"
    ],
    "pageId": 477
  },
  {
    "content": "For more information about join queries, see the Solr Wiki page on <span class=\"link\">Joins</span>. Erick Erickson has also written a\nblog post about join performance titled <span class=\"link\">Solr and Joins</span>.",
    "hierarchy": [
    ],
    "pageId": 478
  },
  {
    "content": "The <span class=\"code\">LuceneQParser</span> extends the <span class=\"code\">QParserPlugin</span> by parsing Solr's variant on the Lucene QueryParser syntax.\nThis is effectively the same query parser that is used in Lucene. It uses the operators <span class=\"code\">q.op</span>, the default\noperator (\"OR\" or \"AND\") and <span class=\"code\">df</span>, the default field name.",
    "hierarchy": [
      "Lucene Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Lucene Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "{!lucene q.op=AND df=text}myfield:foo +bar -baz",
    "hierarchy": [
      "Lucene Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "For more information about the syntax for the Lucene Query Parser, see the <span class=\"link\">Classic QueryParser javadocs</span>.",
    "hierarchy": [
      "Lucene Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "The <span class=\"code\">LTRQParserPlugin</span> is a special purpose parser for reranking the top results of a simple query using a\nmore complex ranking query which is based on a machine learnt model.",
    "hierarchy": [
      "Learning To Rank Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Learning To Rank Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "{!ltr model=myModel reRankDocs=100}",
    "hierarchy": [
      "Learning To Rank Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "Details about using the <span class=\"code\">LTRQParserPlugin</span> can be found in the <span class=\"link\">Learning To Rank</span> section.",
    "hierarchy": [
      "Learning To Rank Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "The <span class=\"code\">MaxScoreQParser</span> extends the <span class=\"code\">LuceneQParser</span> but returns the Max score from the clauses. It does this\nby wrapping all <span class=\"code\">SHOULD</span> clauses in a <span class=\"code\">DisjunctionMaxQuery</span> with tie=1.0. Any <span class=\"code\">MUST</span> or <span class=\"code\">PROHIBITED</span> clauses are\npassed through as-is. Non-boolean queries, e.g., NumericRange falls-through to the <span class=\"code\">LuceneQParser</span> parser\nbehavior.",
    "hierarchy": [
      "Max Score Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Max Score Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "{!maxscore tie=0.01}C OR (D AND E)",
    "hierarchy": [
      "Max Score Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "MLTQParser<span class=\"ff1 fs0\"> enables retrieving documents that are similar to a given document. It uses Lucene's existing</span>\nMoreLikeThis<span class=\"ff1 fs0\"> logic and also works in SolrCloud mode. The document identifier used here is the unique id</span>\nvalue and not the Lucene internal document id. The list of returned documents excludes the queried\ndocument.",
    "hierarchy": [
      "More Like This Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "This query parser takes the following parameters:",
    "hierarchy": [
      "More Like This Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "qf\nSpecifies the fields to use for similarity.",
    "hierarchy": [
      "More Like This Query Parser"
    ],
    "pageId": 478
  },
  {
    "content": "mintf\nSpecifies the Minimum Term Frequency, the frequency below which terms will be ignored in the source\ndocument.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "mindf\nSpecifies the Minimum Document Frequency, the frequency at which words will be ignored when they do\nnot occur in at least this many documents.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "maxdf\nSpecifies the Maximum Document Frequency, the frequency at which words will be ignored when they\noccur in more than this many documents.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "minwl\nSets the minimum word length below which words will be ignored.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "maxwl\nSets the maximum word length above which words will be ignored.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "maxqt\nSets the maximum number of query terms that will be included in any generated query.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "maxntp\nSets the maximum number of tokens to parse in each example document field that is not stored with\nTermVector support.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "boost\nSpecifies if the query will be boosted by the interesting term relevance. It can be either \"true\" or \"false\".",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "Find documents like the document with id=1 and using the <span class=\"ff1 fs0\">name</span> field for similarity.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "{!mlt qf=name}1",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "Adding more constraints to what qualifies as similar using mintf and mindf.",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "{!mlt qf=name mintf=2 mindf=3}1",
    "hierarchy": [
    ],
    "pageId": 479
  },
  {
    "content": "The <span class=\"ff1 fs0\">NestedParser</span> extends the <span class=\"ff1 fs0\">QParserPlugin</span> and creates a nested query, with the ability for that query to\nredefine its type via local parameters. This is useful in specifying defaults in configuration and letting clients\nindirectly reference them.",
    "hierarchy": [
      "Nested Query Parser"
    ],
    "pageId": 479
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Nested Query Parser"
    ],
    "pageId": 479
  },
  {
    "content": "{!query defType=func v=$q1}",
    "hierarchy": [
      "Nested Query Parser"
    ],
    "pageId": 479
  },
  {
    "content": "If the <span class=\"ff1 fs0\">q1</span> parameter is price, then the query would be a function query on the price field. If the <span class=\"ff1 fs0\">q1</span> parameter",
    "hierarchy": [
      "Nested Query Parser"
    ],
    "pageId": 479
  },
  {
    "content": "is \\{!lucene}inStock:true}} then a term query is created from the Lucene syntax string that matches\ndocuments with <span class=\"ff2 fs1\">inStock=true</span>. These parameters would be defined in <span class=\"ff2 fs1\">solrconfig.xml</span>, in the <span class=\"ff2 fs1\">defaults</span>\nsection:",
    "hierarchy": [
    ],
    "pageId": 480
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"q1\"<span class=\"fc1\">></span></span>{!lucene}inStock:true<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 480
  },
  {
    "content": "For more information about the possibilities of nested queries, see Yonik Seeley's blog post <span class=\"link\">Nested Queries</span>\nin Solr<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 480
  },
  {
    "content": "These query parsers utilize payloads encoded on terms during indexing.",
    "hierarchy": [
      "Payload Query Parsers"
    ],
    "pageId": 480
  },
  {
    "content": "The main query, for both of these parsers, is parsed straightforwardly from the field type's query analysis\ninto a <span class=\"ff2 fs1\">SpanQuery</span>. The generated <span class=\"ff2 fs1\">SpanQuery</span> will be either a <span class=\"ff2 fs1\">SpanTermQuery</span> or an ordered, zero slop\nSpanNearQuery<span class=\"ff1 fs0\">, depending on how many tokens are emitted. Payloads can be encoded on terms using</span>\neither the <span class=\"ff2 fs1\">DelimitedPayloadTokenFilter</span> or the <span class=\"ff2 fs1\">NumericPayloadTokenFilter</span>. The payload using parsers\nare:",
    "hierarchy": [
      "Payload Query Parsers"
    ],
    "pageId": 480
  },
  {
    "content": "\nPayloadScoreQParser",
    "hierarchy": [
      "Payload Query Parsers"
    ],
    "pageId": 480
  },
  {
    "content": "\nPayloadCheckQParser",
    "hierarchy": [
      "Payload Query Parsers"
    ],
    "pageId": 480
  },
  {
    "content": "PayloadScoreQParser<span class=\"ff1 fs0\"> incorporates each matching term's numeric (integer or float) payloads into the</span>\nscores.",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "This parser accepts the following parameters:",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "f\nThe field to use. This parameter is required.",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "func\nThe payload function. The options are: <span class=\"ff2 fs1\">min</span>, <span class=\"ff2 fs1\">max</span>, <span class=\"ff2 fs1\">average</span>, or <span class=\"ff2 fs1\">sum</span>. This parameter is required.",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "operator\nA search operator. The options are <span class=\"ff2 fs1\">or</span> and <span class=\"ff2 fs1\">phrase</span>, which is the default. This defines if the search query\nshould be an OR query or a phrase query.",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "includeSpanScore\nIf <span class=\"ff2 fs1\">true</span>, multiples the computed payload factor by the score of the original query. If <span class=\"ff2 fs1\">false</span>, the default, the\ncomputed payload factor is the score.",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "{!payload_score f=my_field_dpf v=some_term func=max}",
    "hierarchy": [
      "Payload Query Parsers",
      "Payload Score Parser"
    ],
    "pageId": 480
  },
  {
    "content": "{!payload_score f=payload_field func=sum operator=or}A B C",
    "hierarchy": [
    ],
    "pageId": 481
  },
  {
    "content": "PayloadCheckQParser<span class=\"code\"> only matches when the matching terms also have the specified payloads.</span>",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "This parser accepts the following parameters:",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "f\nThe field to use (required).",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "payloads\nA space-separated list of payloads that must match the query terms (required)",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "Each specified payload will be encoded using the encoder determined from the field type and encoded\naccordingly for matching.",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "DelimitedPayloadTokenFilter<span class=\"code\"> 'identity' encoded payloads also work here, as well as float and integer</span>\nencoded ones.",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "{!payload_check f=words_dps payloads=\"VERB NOUN\"}searching stuff",
    "hierarchy": [
      "Payload Check Parser"
    ],
    "pageId": 481
  },
  {
    "content": "PrefixQParser<span class=\"code\"> extends the </span>QParserPlugin<span class=\"code\"> by creating a prefix query from the input value. Currently no</span>\nanalysis or value transformation is done to create this prefix query.",
    "hierarchy": [
      "Prefix Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "The parameter is <span class=\"ff1 fs1\">f</span>, the field. The string after the prefix declaration is treated as a wildcard query.",
    "hierarchy": [
      "Prefix Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Prefix Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "{!prefix f=myfield}foo",
    "hierarchy": [
      "Prefix Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "This would be generally equivalent to the Lucene query parser expression <span class=\"ff1 fs1\">myfield:foo*</span>.",
    "hierarchy": [
      "Prefix Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "RawQParser<span class=\"code\"> extends the </span>QParserPlugin<span class=\"code\"> by creating a term query from the input value without any text</span>\nanalysis or transformation. This is useful in debugging, or when raw terms are returned from the terms\ncomponent (this is not the default).",
    "hierarchy": [
      "Raw Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "The only parameter is <span class=\"ff1 fs1\">f</span>, which defines the field to search.",
    "hierarchy": [
      "Raw Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Raw Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "{!raw f=myfield}Foo Bar",
    "hierarchy": [
      "Raw Query Parser"
    ],
    "pageId": 481
  },
  {
    "content": "This example constructs the query: <span class=\"ff2 fs1\">TermQuery(Term(\"myfield\",\"Foo Bar\"))</span>.",
    "hierarchy": [
    ],
    "pageId": 482
  },
  {
    "content": "For easy filter construction to drill down in faceting, the <span class=\"link\">TermQParserPlugin</span> is recommended.",
    "hierarchy": [
    ],
    "pageId": 482
  },
  {
    "content": "For full analysis on all fields, including text fields, you may want to use the <span class=\"link\">FieldQParserPlugin</span>.",
    "hierarchy": [
    ],
    "pageId": 482
  },
  {
    "content": "The <span class=\"ff2 fs1\">ReRankQParserPlugin</span> is a special purpose parser for Re-Ranking the top results of a simple query using\na more complex ranking query.",
    "hierarchy": [
      "Re-Ranking Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "Details about using the <span class=\"ff2 fs1\">ReRankQParserPlugin</span> can be found in the <span class=\"link\">Query Re-Ranking</span> section.",
    "hierarchy": [
      "Re-Ranking Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "The Simple query parser in Solr is based on Lucene's SimpleQueryParser. This query parser is designed to\nallow users to enter queries however they want, and it will do its best to interpret the query and return\nresults.",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "This parser takes the following parameters:",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "q.operators\nComma-separated list of names of parsing operators to enable. By default, all operations are enabled,\nand this parameter can be used to effectively disable specific operators as needed, by excluding them\nfrom the list. Passing an empty string with this parameter disables all operators.",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "AND+\nSpecifies AND\ntoken1+token\n2",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "OR|\nSpecifies OR\ntoken1|token\n2",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "NOT-\nSpecifies NOT\n-token3",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "PREFIX*\nSpecifies a prefix query\nterm*",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "PHRASE\"\nCreates a phrase\n\"term1\nterm2\"\nPRECEDENCE( )\nSpecifies precedence; tokens inside the parenthesis\nwill be analyzed first. Otherwise, normal order is\nleft to right.\ntoken1 +\n(token2 |\ntoken3)",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "ESCAPE\\\nPut it in front of operators to match them literally\nC\\\\",
    "hierarchy": [
      "Simple Query Parser"
    ],
    "pageId": 482
  },
  {
    "content": "WHITESPACE\nspace or <span class=\"ff2 fs1\">[\\r\\t\\n]</span>\nDelimits tokens on whitespace. If not enabled,\nwhitespace splitting will not be performed prior to\nanalysis – usually most desirable.",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "Not splitting whitespace is a unique feature of this\nparser that enables multi-word synonyms to work.\nHowever, it probably actually won't unless\nsynonyms are configured to normalize instead of\nexpand to all that match a given synonym. Such a\nconfiguration requires normalizing synonyms at\nboth index time and query time. Solr’s analysis\nscreen can help here.\nterm1 term2",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "FUZZY\n~",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "~N\nAt the end of terms, specifies a fuzzy query.",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "\"N\" is optional and may be either \"1\" or \"2\" (the\ndefault)\nterm~1",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "NEAR~N\nAt the end of phrases, specifies a NEAR query\n\"term1\nterm2\"~5",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "q.op\nDefines the default operator to use if none is defined by the user. Allowed values are <span class=\"ff2 fs1\">AND</span> and <span class=\"ff2 fs1\">OR</span>. <span class=\"ff2 fs1\">OR</span> is\nused if none is specified.",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "qf\nA list of query fields and boosts to use when building the query.",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "df\nDefines the default field if none is defined in the Schema, or overrides the default field if it is already\ndefined.",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "Any errors in syntax are ignored and the query parser will interpret queries as best it can. However, this can\nlead to odd results in some cases.",
    "hierarchy": [
    ],
    "pageId": 483
  },
  {
    "content": "There are two spatial QParsers in Solr: <span class=\"ff2 fs1\">geofilt</span> and <span class=\"ff2 fs1\">bbox</span>. But there are other ways to query spatially: using\nthe <span class=\"ff2 fs1\">frange</span> parser with a distance function, using the standard (lucene) query parser with the range syntax\nto pick the corners of a rectangle, or with RPT and BBoxField you can use the standard query parser but use\na special syntax within quotes that allows you to pick the spatial predicate.",
    "hierarchy": [
      "Spatial Query Parsers"
    ],
    "pageId": 483
  },
  {
    "content": "All these options are documented further in the section <span class=\"link\">Spatial Search</span>.",
    "hierarchy": [
      "Spatial Query Parsers"
    ],
    "pageId": 483
  },
  {
    "content": "The <span class=\"ff2 fs1\">SurroundQParser</span> enables the Surround query syntax, which provides proximity search functionality.",
    "hierarchy": [
      "Surround Query Parser"
    ],
    "pageId": 483
  },
  {
    "content": "There are two positional operators: <span class=\"ff2 fs1\">w</span> creates an ordered span query and <span class=\"ff2 fs1\">n</span> creates an unordered one. Both\noperators take a numeric value to indicate distance between two terms. The default is 1, and the maximum\nis 99.",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "Note that the query string is not analyzed in any way.",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "Example:",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "{!surround} 3w(foo, bar)",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "This example finds documents where the terms \"foo\" and \"bar\" are no more than 3 terms away from each\nother (i.e., no more than 2 terms between them).",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "This query parser will also accept boolean operators (<span class=\"ff2 fs1\">AND</span>, <span class=\"ff2 fs1\">OR</span>, and <span class=\"ff2 fs1\">NOT</span>, in either upper- or lowercase),\nwildcards, quoting for phrase searches, and boosting. The <span class=\"ff2 fs1\">w</span> and <span class=\"ff2 fs1\">n</span> operators can also be expressed in upper-\nor lowercase.",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "The non-unary operators (everything but <span class=\"ff2 fs1\">NOT</span>) support both infix <span class=\"ff2 fs1\">(a AND b AND c)</span> and prefix <span class=\"ff2 fs1\">AND(a, b, c)</span>\nnotation.",
    "hierarchy": [
    ],
    "pageId": 484
  },
  {
    "content": "SwitchQParser<span class=\"ff1 fs0\"> is a </span>QParserPlugin<span class=\"ff1 fs0\"> that acts like a \"switch\" or \"case\" statement.</span>",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "The primary input string is trimmed and then prefixed with <span class=\"ff2 fs1\">case.</span> for use as a key to lookup a \"switch case\"\nin the parser's local params. If a matching local param is found the resulting param value will then be\nparsed as a subquery, and returned as the parse result.",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "The <span class=\"ff2 fs1\">case</span> local param can be optionally be specified as a switch case to match missing (or blank) input\nstrings. The <span class=\"ff2 fs1\">default</span> local param can optionally be specified as a default case to use if the input string does\nnot match any other switch case local params. If default is not specified, then any input which does not\nmatch a switch case local param will result in a syntax error.",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "In the examples below, the result of each query is \"XXX\":",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "{!switch case.foo=XXX case.bar=zzz case.yak=qqq}foo",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "{!switch case.foo=qqq case.bar=XXX case.yak=zzz} bar",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "{!switch case.foo=qqq case.bar=zzz default=XXX}asdf",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "{!switch case=XXX case.bar=zzz case.yak=qqq}",
    "hierarchy": [
      "Switch Query Parser"
    ],
    "pageId": 484
  },
  {
    "content": "A practical usage of this <span class=\"ff2 fs1\">QParserPlugin</span>, is in specifying <span class=\"ff2 fs1\">appends</span> fq params in the configuration of a\nSearchHandler, to provide a fixed set of filter options for clients using custom parameter names.",
    "hierarchy": [
    ],
    "pageId": 485
  },
  {
    "content": "Using the example configuration below, clients can optionally specify the custom parameters <span class=\"ff2 fs1\">in_stock</span> and\nshipping<span class=\"ff1 fs0\"> to override the default filtering behavior, but are limited to the specific set of legal values</span>\n(shipping=any|free, in_stock=yes|no|all).",
    "hierarchy": [
    ],
    "pageId": 485
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"in_stock\"<span class=\"fc1\">></span></span>yes<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"shipping\"<span class=\"fc1\">></span></span>any<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"appends\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fq\"<span class=\"fc1\">></span></span>{!switch case.all='*:*'\nÊ                           case.yes='inStock:true'\nÊ                           case.no='inStock:false'\nÊ                           v=$in_stock}<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fq\"<span class=\"fc1\">></span></span>{!switch case.any='*:*'\nÊ                           case.free='shipping_cost:0.0'\nÊ                           v=$shipping}<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 485
  },
  {
    "content": "TermQParser<span class=\"ff1 fs0\"> extends the </span>QParserPlugin<span class=\"ff1 fs0\"> by creating a single term query from the input value equivalent to</span>\nreadableToIndexed()<span class=\"ff1 fs0\">. This is useful for generating filter queries from the external human readable terms</span>\nreturned by the faceting or terms components. The only parameter is <span class=\"ff2 fs1\">f</span>, for the field.",
    "hierarchy": [
      "Term Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Term Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "{!term f=weight}1.5",
    "hierarchy": [
      "Term Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "For text fields, no analysis is done since raw terms are already returned from the faceting and terms\ncomponents. To apply analysis to text fields as well, see the <span class=\"link\">Field Query Parser</span>, above.",
    "hierarchy": [
      "Term Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "If no analysis or transformation is desired for any type of field, see the <span class=\"link\">Raw Query Parser</span>, above.",
    "hierarchy": [
      "Term Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "TermsQParser<span class=\"ff1 fs0\"> functions similarly to the <span class=\"link\">Term Query Parser</span> but takes in multiple values separated by</span>\ncommas and returns documents matching any of the specified values.",
    "hierarchy": [
      "Terms Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "This can be useful for generating filter queries from the external human readable terms returned by the\nfaceting or terms components, and may be more efficient in some cases than using the <span class=\"link\">Standard Query</span>\nParser<span class=\"fc0\"> to generate a boolean query since the default implementation <span class=\"ff2 fs1\">method</span> avoids scoring.</span>",
    "hierarchy": [
      "Terms Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "This query parser takes the following parameters:",
    "hierarchy": [
      "Terms Query Parser"
    ],
    "pageId": 485
  },
  {
    "content": "f\nThe field on which to search. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 486
  },
  {
    "content": "separator\nSeparator to use when parsing the input. If set to \" \" (a single blank space), will trim additional white\nspace from the input terms. Defaults to a comma (<span class=\"ff1 fs0\">,</span>).",
    "hierarchy": [
    ],
    "pageId": 486
  },
  {
    "content": "method\nThe internal query-building implementation: <span class=\"ff1 fs0\">termsFilter</span>, <span class=\"ff1 fs0\">booleanQuery</span>, <span class=\"ff1 fs0\">automaton</span>, or\ndocValuesTermsFilter<span class=\"ff2 fs1\">. Defaults to </span>termsFilter<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 486
  },
  {
    "content": "{!terms f=tags}software,apache,solr,lucene",
    "hierarchy": [
    ],
    "pageId": 486
  },
  {
    "content": "{!terms f=categoryId method=booleanQuery separator=\" \"}8 6 7 5309",
    "hierarchy": [
    ],
    "pageId": 486
  },
  {
    "content": "The <span class=\"link\">XmlQParserPlugin</span> extends the <span class=\"link\">QParserPlugin</span> and supports the creation of queries from XML. Example:",
    "hierarchy": [
      "XML Query Parser"
    ],
    "pageId": 486
  },
  {
    "content": "defType\nxmlparser",
    "hierarchy": [
      "XML Query Parser"
    ],
    "pageId": 486
  },
  {
    "content": "q",
    "hierarchy": [
      "XML Query Parser"
    ],
    "pageId": 486
  },
  {
    "content": "Ê  <span class=\"fc3\"><Clause</span> <span class=\"fc4\">occurs</span>=<span class=\"fc5\">\"must\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><TermQuery></span>shirt<span class=\"fc3\"></TermQuery></span>\nÊ  <span class=\"fc3\"></Clause></span>\nÊ  <span class=\"fc3\"><Clause</span> <span class=\"fc4\">occurs</span>=<span class=\"fc5\">\"mustnot\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><TermQuery></span>plain<span class=\"fc3\"></TermQuery></span>\nÊ  <span class=\"fc3\"></Clause></span>\nÊ  <span class=\"fc3\"><Clause</span> <span class=\"fc4\">occurs</span>=<span class=\"fc5\">\"should\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><TermQuery></span>cotton<span class=\"fc3\"></TermQuery></span>\nÊ  <span class=\"fc3\"></Clause></span>\nÊ  <span class=\"fc3\"><Clause</span> <span class=\"fc4\">occurs</span>=<span class=\"fc5\">\"must\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><BooleanQuery</span> <span class=\"fc4\">fieldName</span>=<span class=\"fc5\">\"size\"<span class=\"fc3\">></span></span>\nÊ        <span class=\"fc3\"><Clause</span> <span class=\"fc4\">occurs</span>=<span class=\"fc5\">\"should\"<span class=\"fc3\">></span></span>\nÊ           <span class=\"fc3\"><TermsQuery></span>S M L<span class=\"fc3\"></TermsQuery></span>\nÊ        <span class=\"fc3\"></Clause></span>\nÊ     <span class=\"fc3\"></BooleanQuery></span>\nÊ  <span class=\"fc3\"></Clause></span>",
    "hierarchy": [
      "XML Query Parser"
    ],
    "pageId": 486
  },
  {
    "content": "The XmlQParser implementation uses the <span class=\"link\">SolrCoreParser</span> class which extends Lucene's <span class=\"link\">CoreParser</span> class.\nXML elements are mapped to <span class=\"link\">QueryBuilder</span> classes as follows:",
    "hierarchy": [
      "XML Query Parser"
    ],
    "pageId": 486
  },
  {
    "content": "<BooleanQuery><span class=\"link\">BooleanQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<BoostingTermQuery><span class=\"link\">BoostingTermBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<ConstantScoreQuery><span class=\"link\">ConstantScoreQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<DisjunctionMaxQuery><span class=\"link\">DisjunctionMaxQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<MatchAllDocsQuery><span class=\"link\">MatchAllDocsQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<RangeQuery><span class=\"link\">RangeQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<SpanFirst><span class=\"link\">SpanFirstBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<SpanNear><span class=\"link\">SpanNearBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<SpanNot><span class=\"link\">SpanNotBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<SpanOr><span class=\"link\">SpanOrBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<SpanOrTerms><span class=\"link\">SpanOrTermsBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<SpanTerm><span class=\"link\">SpanTermBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<TermQuery><span class=\"link\">TermQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<TermsQuery><span class=\"link\">TermsQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<UserQuery><span class=\"link\">UserInputQueryBuilder</span>",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "<LegacyNumericRangeQuery>LegacyNumericRangeQuery(Builder) is deprecated",
    "hierarchy": [
    ],
    "pageId": 487
  },
  {
    "content": "You can configure your own custom query builders for additional XML elements. The custom builders need\nto extend the <span class=\"link\">SolrQueryBuilder</span> or the <span class=\"link\">SolrSpanQueryBuilder</span> class. Example <span class=\"code\">solrconfig.xml</span> snippet:",
    "hierarchy": [
      "Customizing XML Query Parser"
    ],
    "pageId": 487
  },
  {
    "content": "Ê <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"MyCustomQuery\"<span class=\"fc3\">></span></span>com.mycompany.solr.search.MyCustomQueryBuilder<span class=\"fc3\"></str></span>",
    "hierarchy": [
      "Customizing XML Query Parser"
    ],
    "pageId": 487
  },
  {
    "content": "The JSON Request API allows a JSON body to be passed for the entire search request.",
    "hierarchy": [
      "JSON Request API"
    ],
    "pageId": 488
  },
  {
    "content": "The <span class=\"link\">JSON Facet API</span> is part of the JSON Request API, and allows specification of faceted analytics in JSON.",
    "hierarchy": [
      "JSON Request API"
    ],
    "pageId": 488
  },
  {
    "content": "Here's an example of a search request using query parameters only:",
    "hierarchy": [
      "JSON Request API"
    ],
    "pageId": 488
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/query?q=memory&fq=inStock:true\"",
    "hierarchy": [
      "JSON Request API"
    ],
    "pageId": 488
  },
  {
    "content": "The same request when passed as JSON in the body:",
    "hierarchy": [
      "JSON Request API"
    ],
    "pageId": 488
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d '\n{\nÊ \"query\" : \"memory\",\nÊ \"filter\" : \"inStock:true\"\n}'",
    "hierarchy": [
      "JSON Request API"
    ],
    "pageId": 488
  },
  {
    "content": "It may sometimes be more convenient to pass the JSON body as a request parameter rather than in the\nactual body of the HTTP request. Solr treats a <span class=\"code\">json</span> parameter the same as a JSON body.",
    "hierarchy": [
      "JSON Request API",
      "Passing JSON via Request Parameter"
    ],
    "pageId": 488
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d 'json={\"query\":\"memory\"}'",
    "hierarchy": [
      "JSON Request API",
      "Passing JSON via Request Parameter"
    ],
    "pageId": 488
  },
  {
    "content": "Multiple <span class=\"code\">json</span> parameters in a single request are merged before being interpreted.",
    "hierarchy": [
      "JSON Request API",
      "Smart Merging of Multiple JSON Parameters"
    ],
    "pageId": 488
  },
  {
    "content": "Single-valued elements are overwritten by the last value.",
    "hierarchy": [
      "JSON Request API",
      "Smart Merging of Multiple JSON Parameters"
    ],
    "pageId": 488
  },
  {
    "content": "Multi-valued elements like fields and <span class=\"code\">filter</span> are appended.",
    "hierarchy": [
      "JSON Request API",
      "Smart Merging of Multiple JSON Parameters"
    ],
    "pageId": 488
  },
  {
    "content": "Parameters of the form <span class=\"code\">json.<path>=<json_value></span> are merged in the appropriate place in the\nhierarchy. For example a <span class=\"code\">json.facet</span> parameter is the same as <span class=\"code\">facet</span> within the JSON body.",
    "hierarchy": [
      "JSON Request API",
      "Smart Merging of Multiple JSON Parameters"
    ],
    "pageId": 488
  },
  {
    "content": "A JSON body, or straight <span class=\"code\">json</span> parameters are always parsed first, meaning that other request\nparameters come after, and overwrite single valued elements.",
    "hierarchy": [
      "JSON Request API",
      "Smart Merging of Multiple JSON Parameters"
    ],
    "pageId": 488
  },
  {
    "content": "Smart merging gives the best of both worlds…the structure of JSON with the ability to selectively separate\nout / decompose parts of the request!",
    "hierarchy": [
      "JSON Request API",
      "Smart Merging of Multiple JSON Parameters"
    ],
    "pageId": 488
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/query?json.limit=5&json.filter=\"cat:electronics\"'\n-d '\n{\nÊ query: \"memory\",\nÊ limit: 10,\nÊ filter: \"inStock:true\"\n}'",
    "hierarchy": [
    ],
    "pageId": 489
  },
  {
    "content": "Is equivalent to:",
    "hierarchy": [
    ],
    "pageId": 489
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d '\n{\nÊ query: \"memory\",\nÊ limit: 5,     // this single-valued parameter was overwritten.\nÊ filter: [\"inStock:true\",\"cat:electronics\"]    // this multi-valued parameter was appended to.\n}'",
    "hierarchy": [
    ],
    "pageId": 489
  },
  {
    "content": "In fact, you don't even need to start with a JSON body for smart merging to be very useful. Consider the\nfollowing request composed entirely of request params:",
    "hierarchy": [
      "Facet Example"
    ],
    "pageId": 489
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d 'q=*:*&rows=1&\nÊ json.facet.avg_price=\"avg(price)\"&\nÊ json.facet.top_cats={type:terms,field:\"cat\",limit:5}'",
    "hierarchy": [
      "Facet Example"
    ],
    "pageId": 489
  },
  {
    "content": "That is equivalent to having the following JSON body or <span class=\"ff1 fs2\">json</span> parameter:",
    "hierarchy": [
      "Facet Example"
    ],
    "pageId": 489
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"facet\"</span>: {\nÊ   <span class=\"fc2\">\"avg_price\"</span>: <span class=\"fc3\">\"avg(price)\"</span>,\nÊ   <span class=\"fc2\">\"top_cats\"</span>: {\nÊ     <span class=\"fc2\">\"type\"</span>: <span class=\"fc3\">\"terms\"</span>,\nÊ     <span class=\"fc2\">\"field\"</span>: <span class=\"fc3\">\"cat\"</span>,\nÊ     <span class=\"fc2\">\"limit\"</span>: <span class=\"fc4\">5</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
      "Facet Example"
    ],
    "pageId": 489
  },
  {
    "content": "See the <span class=\"link\">JSON Facet API</span> for more on faceting and analytics commands in specified in JSON.",
    "hierarchy": [
      "Facet Example"
    ],
    "pageId": 489
  },
  {
    "content": "If you want to see what your merged/parsed JSON looks like, you can turn on debugging (<span class=\"ff1 fs2\">debug=true</span>), and\nit will come back under the \"json\" key along with the other debugging information.",
    "hierarchy": [
      "Debugging"
    ],
    "pageId": 489
  },
  {
    "content": "We can also pass normal query request parameters in the JSON body within the params block:",
    "hierarchy": [
      "Passing Parameters via JSON"
    ],
    "pageId": 490
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/query?fl=name,price\"-d '\n{\nÊ params: {\nÊ   q: \"memory\",\nÊ   rows: 1\nÊ }\n}'",
    "hierarchy": [
      "Passing Parameters via JSON"
    ],
    "pageId": 490
  },
  {
    "content": "Which is equivalent to",
    "hierarchy": [
      "Passing Parameters via JSON"
    ],
    "pageId": 490
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/query?fl=name,price&q=memory&rows=1\"",
    "hierarchy": [
      "Passing Parameters via JSON"
    ],
    "pageId": 490
  },
  {
    "content": "Right now only some standard query parameters have JSON equivalents. Unmapped parameters can be\npassed through request parameters or <span class=\"code\">params</span> block as shown above.",
    "hierarchy": [
      "Parameters Mapping"
    ],
    "pageId": 490
  },
  {
    "content": "qquery\nfqfilter",
    "hierarchy": [
      "Parameters Mapping"
    ],
    "pageId": 490
  },
  {
    "content": "offsetstart\nlimitrows",
    "hierarchy": [
      "Parameters Mapping"
    ],
    "pageId": 490
  },
  {
    "content": "sortsort\njson.facetfacet",
    "hierarchy": [
      "Parameters Mapping"
    ],
    "pageId": 490
  },
  {
    "content": "json.<param_name><param_name>",
    "hierarchy": [
      "Parameters Mapping"
    ],
    "pageId": 490
  },
  {
    "content": "Because we didn't pollute the root body of the JSON request with the normal Solr request parameters (they\nare all contained in the params block), we now have the ability to validate requests and return an error for\nunknown JSON keys.",
    "hierarchy": [
      "Error Detection"
    ],
    "pageId": 490
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d '\n{\nÊ query : \"memory\",\nÊ fulter : \"inStock:true\"  // oops, we misspelled \"filter\"\n}'",
    "hierarchy": [
      "Error Detection"
    ],
    "pageId": 490
  },
  {
    "content": "And we get an error back containing the error string:",
    "hierarchy": [
    ],
    "pageId": 491
  },
  {
    "content": "\"Unknown top-level key in JSON request : fulter\"",
    "hierarchy": [
    ],
    "pageId": 491
  },
  {
    "content": "Of course request templating via parameter substitution works fully with JSON request bodies or\nparameters as well. For example:",
    "hierarchy": [
      "Parameter Substitution / Macro Expansion"
    ],
    "pageId": 491
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/query?FIELD=text&TERM=memory&HOWMANY=10\" -d '\n{\nÊ query:\"${FIELD}:${TERM}\",\nÊ limit:${HOWMANY}\n}'",
    "hierarchy": [
      "Parameter Substitution / Macro Expansion"
    ],
    "pageId": 491
  },
  {
    "content": "The JSON Query DSL provides a simple yet powerful query language for the JSON Request API.",
    "hierarchy": [
      "JSON Query DSL"
    ],
    "pageId": 491
  },
  {
    "content": "A JSON query can be:",
    "hierarchy": [
      "JSON Query DSL",
      "Structure of JSON Query DSL"
    ],
    "pageId": 491
  },
  {
    "content": "A valid <span class=\"link\">query string</span> for default <span class=\"ff2 fs3\">deftype</span> (the standard query parser in most cases), as in, <span class=\"ff2 fs3\">title:solr</span>.",
    "hierarchy": [
      "JSON Query DSL",
      "Structure of JSON Query DSL"
    ],
    "pageId": 491
  },
  {
    "content": "A valid <span class=\"link\">local parameters</span> query string, as in, <span class=\"ff2 fs3\">{!dismax qf=myfield}solr rocks</span>.",
    "hierarchy": [
      "JSON Query DSL",
      "Structure of JSON Query DSL"
    ],
    "pageId": 491
  },
  {
    "content": "A JSON object with query parser name and arguments. The special key <span class=\"ff2 fs3\">v</span> in local parameters is replaced\nby key <span class=\"ff2 fs3\">query</span> in JSON object query, as in this example:",
    "hierarchy": [
      "JSON Query DSL",
      "Structure of JSON Query DSL"
    ],
    "pageId": 491
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"query-parser-name\"</span> : {\nÊ    <span class=\"fc3\">\"param1\"</span>: <span class=\"fc4\">\"value1\"</span>,\nÊ    <span class=\"fc3\">\"param2\"</span>: <span class=\"fc4\">\"value2\"</span>,\nÊ    <span class=\"fc3\">\"query\"</span>: <span class=\"fc4\">\"a-json-query\"</span>,\nÊ    <span class=\"fc3\">\"another-param\"</span>: <span class=\"fc4\">\"another-json-query\"</span>\nÊ }\n}",
    "hierarchy": [
      "JSON Query DSL",
      "Structure of JSON Query DSL"
    ],
    "pageId": 491
  },
  {
    "content": "The four requests below are equivalent for searching for <span class=\"ff2 fs3\">solr lucene</span> in a field named <span class=\"ff2 fs3\">content</span>:",
    "hierarchy": [
      "JSON Query DSL",
      "Basic Examples"
    ],
    "pageId": 491
  },
  {
    "content": "1.Passing all parameters on URI, with \"lucene\" as the default query parser.",
    "hierarchy": [
      "JSON Query DSL",
      "Basic Examples"
    ],
    "pageId": 491
  },
  {
    "content": "curl -XGET \"http://localhost:8983/solr/books/query?q=content:(solr lucene)\"",
    "hierarchy": [
      "JSON Query DSL",
      "Basic Examples"
    ],
    "pageId": 491
  },
  {
    "content": "2.<span class=\"ls1\">Using the JSON Query DSL with valid query string for default <span class=\"ff2 fs1\">deftype</span>, with \"lucene\" as default query</span>\nparser.",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\"query\": \"content:(solr lucene)\"}'",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "3.<span class=\"ls1\">Using JSON Query DSL with valid local parameters query defining the \"lucene\" query parser.</span>",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\"query\": \"{!lucene df=content v='solr lucene'}\"}'",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "4.<span class=\"ls1\">Using JSON Query DSL in verbose way, as a valid JSON object with parser name and arguments.</span>",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\"query\": {\"lucene\": {\nÊ           \"df\": \"content\",\nÊ           \"query\": \"solr lucene\"\nÊ       }\nÊ   }}'",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "Note that the JSON query in the examples above is provided under the key <span class=\"ff2 fs1\">query</span> of <span class=\"link\">JSON Request API</span>.",
    "hierarchy": [
    ],
    "pageId": 492
  },
  {
    "content": "Some query parsers accept a query as an argument. JSON Query DSL makes it easier to write and read such\ncomplex query.",
    "hierarchy": [
      "Nested Queries"
    ],
    "pageId": 492
  },
  {
    "content": "The three requests below are equivalent for wrapping the above example query (searching for <span class=\"ff2 fs1\">solr lucene</span>\nin field <span class=\"ff2 fs1\">content</span>) with a boost query:",
    "hierarchy": [
      "Nested Queries"
    ],
    "pageId": 492
  },
  {
    "content": "1.<span class=\"ls1\">Passing all parameters on URI.</span>",
    "hierarchy": [
      "Nested Queries"
    ],
    "pageId": 492
  },
  {
    "content": "http://localhost:8983/solr/books/query?q={!boost b=log(popularity) v='{!lucene\ndf=content}(lucene solr)'}",
    "hierarchy": [
      "Nested Queries"
    ],
    "pageId": 492
  },
  {
    "content": "2.<span class=\"ls1\">Converted into JSON Query DSL with use of local parameters. As you can see, the special key <span class=\"ff2 fs1\">v</span> is replaced</span>\nby key <span class=\"ff2 fs1\">query</span>.",
    "hierarchy": [
      "Nested Queries"
    ],
    "pageId": 492
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\nÊ   \"query\" : {\nÊ       \"boost\": {\nÊ           \"query\": {!lucene df=content}(lucene solr),\nÊ           \"b\": \"log(popularity)\"\nÊ       }\nÊ   }\n}'",
    "hierarchy": [
    ],
    "pageId": 493
  },
  {
    "content": "3.Using a verbose JSON Query DSL without local parameters.",
    "hierarchy": [
    ],
    "pageId": 493
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\nÊ   \"query\": {\nÊ       \"boost\": {\nÊ           \"query\": {\nÊ               \"lucene\": {\nÊ                   \"df\": \"content\",\nÊ                   \"query\": \"solr lucene\"\nÊ               }\nÊ           },\nÊ           \"b\": \"log(popularity)\"\nÊ       }\nÊ   }\n}'",
    "hierarchy": [
    ],
    "pageId": 493
  },
  {
    "content": "With the support of the <span class=\"link\">BoolQParser</span>, the JSON Query DSL can create a very powerful nested query.",
    "hierarchy": [
      "Compound Queries"
    ],
    "pageId": 493
  },
  {
    "content": "This query searches for books where <span class=\"ff1 fs2\">content</span> contains <span class=\"ff1 fs2\">lucene</span> or <span class=\"ff1 fs2\">solr</span>, <span class=\"ff1 fs2\">title</span> contains <span class=\"ff1 fs2\">solr</span> and their\nranking<span class=\"ff2 fs0\"> must larger than 3.0:</span>",
    "hierarchy": [
      "Compound Queries"
    ],
    "pageId": 493
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\nÊ   \"query\": {\nÊ       \"bool\": {\nÊ           \"must\": [\nÊ               \"title:solr\",\nÊ               {\"lucene\": {\"df: \"content\", query: \"lucene solr\"}}\nÊ           ],\nÊ           \"must_not\": [\nÊ               {\"frange\": {\"u\": \"3.0\", query: \"ranking\"}}\nÊ           ]\nÊ       }\nÊ   }\n}'",
    "hierarchy": [
      "Compound Queries"
    ],
    "pageId": 493
  },
  {
    "content": "If lucene is the default query parser query, the above can be rewritten in much less verbose way as in:",
    "hierarchy": [
    ],
    "pageId": 494
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\nÊ   \"query\": {\nÊ       \"bool\": {\nÊ           \"must\": [\nÊ               \"title:solr\",\nÊ               \"content:(lucene solr)\"\nÊ           ],\nÊ           \"must_not\": \"{!frange u:3.0}ranking\"\nÊ       }\nÊ   }\n}'",
    "hierarchy": [
    ],
    "pageId": 494
  },
  {
    "content": "JSON Query DSL is not only supported with the key <span class=\"ff2 fs2\">query</span> but also with the key <span class=\"ff2 fs2\">filter</span> of the <span class=\"link\">JSON Request</span>\nAPI<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Use JSON Query DSL in JSON Request API"
    ],
    "pageId": 494
  },
  {
    "content": "For example, the above query can be rewritten using filter clause like this:",
    "hierarchy": [
      "Use JSON Query DSL in JSON Request API"
    ],
    "pageId": 494
  },
  {
    "content": "curl -XGET http://localhost:8983/solr/books/query -d '\n{\nÊ   \"query\": {\nÊ       \"bool\": {\nÊ           \"must_not\": \"{!frange u:3.0}ranking\"\nÊ       }\nÊ   },\nÊ   \"filter: [\nÊ       \"title:solr\",\nÊ       { \"lucene\" : {\"df: \"content\", query : \"lucene solr\" }}\nÊ   ]\n}'",
    "hierarchy": [
      "Use JSON Query DSL in JSON Request API"
    ],
    "pageId": 494
  },
  {
    "content": "The new Facet & Analytics Module exposed via the JSON Facet API is a rewrite of Solr's previous faceting\ncapabilities, with the following goals:",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "First class native JSON API to control faceting and analytics",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "◦The structured nature of nested sub-facets are more naturally expressed in JSON rather than the flat\nnanemspace provided by normal query parameters.\nFirst class integrated analytics support",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Nest any facet type under any other facet type (such as range facet, field facet, query facet)",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Ability to sort facet buckets by any calculated metric",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Easier programmatic construction of complex nested facet commands",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Support a more canonical response format that is easier for clients to parse",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Support a cleaner way to implement distributed faceting",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Support better integration with other search features",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Full integration with the JSON Request API",
    "hierarchy": [
      "JSON Facet API",
      "Facet & Analytics Module"
    ],
    "pageId": 495
  },
  {
    "content": "Faceted search is about aggregating data and calculating metrics about that data.",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search"
    ],
    "pageId": 495
  },
  {
    "content": "There are two main types of facets:",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search"
    ],
    "pageId": 495
  },
  {
    "content": "Facets that partition or categorize data (the domain) into multiple <span class=\"ff1\">buckets</span>",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search"
    ],
    "pageId": 495
  },
  {
    "content": "Facets that calculate data for a given bucket (normally a metric, statistic or analytic function)",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search"
    ],
    "pageId": 495
  },
  {
    "content": "By default, the <span class=\"ff1\">domain</span> for facets starts with all documents that match the base query and any filters. Here's\nan example that requests various metrics about the root domain:",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search",
      "Metrics Example"
    ],
    "pageId": 495
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d '\nq=memory&\nfq=inStock:true&\njson.facet={\nÊ \"avg_price\" : \"avg(price)\",\nÊ \"num_suppliers\" : \"unique(manu_exact)\",\nÊ \"median_weight\" : \"percentile(weight,50)\"\n}'",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search",
      "Metrics Example"
    ],
    "pageId": 495
  },
  {
    "content": "The response to the facet request above will start with documents matching the root domain (docs\ncontaining \"memory\" with inStock:true) then calculate and return the requested metrics:",
    "hierarchy": [
      "JSON Facet API",
      "Faceted Search",
      "Metrics Example"
    ],
    "pageId": 495
  },
  {
    "content": "Ê<span class=\"fc1\">\"facets\"</span> : {\nÊ   <span class=\"fc1\">\"count\"</span> : <span class=\"fc2\">4</span>,\nÊ   <span class=\"fc1\">\"avg_price\"</span> : <span class=\"fc2\">109.9950008392334</span>,\nÊ   <span class=\"fc1\">\"num_suppliers\"</span> : <span class=\"fc2\">3</span>,\nÊ   <span class=\"fc1\">\"median_weight\"</span> : <span class=\"fc2\">352.0</span>\nÊ }",
    "hierarchy": [
    ],
    "pageId": 496
  },
  {
    "content": "Here's an example of a bucketing facet, that partitions documents into bucket based on the <span class=\"ff1 fs2\">cat</span> field (short\nfor category), and returns the top 5 buckets:",
    "hierarchy": [
      "Bucketing Facet Example"
    ],
    "pageId": 496
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d 'q=*:*&\njson.facet={\nÊ categories : {\nÊ   type : terms,\nÊ   field : cat,    // bucket documents based on the \"cat\" field\nÊ   limit : 3       // retrieve the top 3 buckets ranked by the number of docs in each bucket\nÊ }\n}'",
    "hierarchy": [
      "Bucketing Facet Example"
    ],
    "pageId": 496
  },
  {
    "content": "The response below shows us that 32 documents match the default root domain. and 12 documents have\ncat:electronics<span class=\"code\">, 4 documents have </span>cat:currency<span class=\"code\">, etc.</span>",
    "hierarchy": [
      "Bucketing Facet Example"
    ],
    "pageId": 496
  },
  {
    "content": "[...]\nÊ <span class=\"fc1\">\"facets\"</span>:{\nÊ   <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">32</span>,\nÊ   <span class=\"fc1\">\"categories\"</span>:{\nÊ     <span class=\"fc1\">\"buckets\"</span>:[{\nÊ         <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"electronics\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">12</span>},\nÊ       {\nÊ         <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"currency\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">4</span>},\nÊ       {\nÊ         <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"memory\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">3</span>},\nÊ     ]\nÊ   }\nÊ }",
    "hierarchy": [
      "Bucketing Facet Example"
    ],
    "pageId": 496
  },
  {
    "content": "In this guide, we will often just present the <span class=\"ff2\">facet command block</span>:",
    "hierarchy": [
      "Making a Facet Request"
    ],
    "pageId": 496
  },
  {
    "content": "{\nÊ x : <span class=\"fc1\">\"average(mul(price,popularity))\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 497
  },
  {
    "content": "To execute a facet command block such as this, you'll need to use the <span class=\"ff1 fs1\">json.facet</span> parameter, and provide at\nleast a base query such as <span class=\"ff1 fs1\">q=*:*</span>",
    "hierarchy": [
    ],
    "pageId": 497
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d 'q=*:*&json.facet=\n{\nÊ x : \"avg(mul(price,popularity))\"\n}\n'",
    "hierarchy": [
    ],
    "pageId": 497
  },
  {
    "content": "Another option is to use the JSON Request API to provide the entire request in JSON:",
    "hierarchy": [
    ],
    "pageId": 497
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d '\n{\nÊ query : \"*:*\",                        // this is the base query\nÊ filter : [ \"inStock:true\" ],          // a list of filters\nÊ facet : {\nÊ   x : \"avg(mul(price,popularity))\"    // and our funky metric of average of price * popularity\nÊ}\n}\n'",
    "hierarchy": [
    ],
    "pageId": 497
  },
  {
    "content": "The <span class=\"code\">Noggit</span> JSON parser that is used by Solr accepts a number of JSON extensions such as",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "bare words can be left unquoted",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "single line comments using either <span class=\"ff1 fs1\">//</span> or <span class=\"ff1 fs1\">#</span>",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "Multi-line comments using C style /* comments in here */",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "Single quoted strings",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "Allow backslash escaping of any character",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "Allow trailing commas and extra commas. Example: [9,4,3,]",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "Handle nbsp (non-break space, \\u00a0) as whitespace.",
    "hierarchy": [
      "JSON Extensions"
    ],
    "pageId": 497
  },
  {
    "content": "The terms facet (or field facet) buckets the domain based on the unique terms / values of a field.",
    "hierarchy": [
      "Terms Facet"
    ],
    "pageId": 497
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/query -d 'q=*:*&\njson.facet={\nÊ categories:{ terms: {\nÊ   field : cat,    // bucket documents based on the \"cat\" field\nÊ   limit : 5       // retrieve the top 5 buckets ranked by the number of docs in each bucket\n}'",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "fieldThe field name to facet over.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "offsetUsed for paging, this skips the first N buckets. Defaults to 0.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "limitLimits the number of buckets returned. Defaults to 10.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "refineIf true, turns on distributed facet refining. This uses a second phase to retrieve selected stats\nfrom shards so that every shard contributes to every returned bucket in this facet and any sub-\nfacets. This makes stats for returned buckets exact.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "overrequ\nest\nNumber of buckets beyond the limit to request internally during distributed search. -1 means\ndefault.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "mincountOnly return buckets with a count of at least this number. Defaults to 1.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "sortSpecifies how to sort the buckets produced. “count” specifies document count, “index” sorts by\nthe index (natural) order of the bucket value. One can also sort by any facet function / statistic\nthat occurs in the bucket. The default is “count desc”. This parameter may also be specified in\nJSON like <span class=\"ff1 fs1\">sort:{count:desc}</span>. The sort order may either be “asc” or “desc”",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "missingA boolean that specifies if a special “missing” bucket should be returned that is defined by\ndocuments without a value in the field. Defaults to false.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "numBuck\nets\nA boolean. If true, adds “numBuckets” to the response, an integer representing the number of\nbuckets for the facet (as opposed to the number of buckets returned). Defaults to false.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "allBucket\ns\nA boolean. If true, adds an “allBuckets” bucket to the response, representing the union of all of\nthe buckets. For multi-valued fields, this is different than a bucket for all of the documents in the\ndomain since a single document can belong to multiple buckets. Defaults to false.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "prefixOnly produce buckets for terms starting with the specified prefix.",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "facetAggregations, metrics or nested facets that will be calculated for every returned bucket",
    "hierarchy": [
    ],
    "pageId": 498
  },
  {
    "content": "method\nThis parameter indicates the facet algorithm to use:",
    "hierarchy": [
    ],
    "pageId": 499
  },
  {
    "content": "\"dv\" DocValues, collect into ordinal array\n•\"uif\" UnInvertedField, collect into ordinal array\n•\"dvhash\" DocValues, collect into hash - improves efficiency over high cardinality fields\n•\"enum\" TermsEnum then intersect DocSet (stream-able)\n•\"stream\" Presently equivalent to \"enum\"\n•\"smart\" Pick the best method for the field type (this is the default)",
    "hierarchy": [
    ],
    "pageId": 499
  },
  {
    "content": "The query facet produces a single bucket of documents that match the domain as well as the specified\nquery.",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "An example of the simplest form of the query facet is <span class=\"code\">\"query\":\"query string\"</span>.",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "{\nÊ high_popularity : { query : <span class=\"fc2\">\"popularity:[8 TO 10]\"</span> }\n}",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "An expanded form allows for more parameters and a facet command block to specify sub-facets (either\nnested facets or metrics):",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "{\nÊ high_popularity : {\nÊ   type: query,\nÊ   q : <span class=\"fc2\">\"popularity:[8 TO 10]\"</span>,\nÊ   facet : { average_price : <span class=\"fc2\">\"avg(price)\"</span> }\nÊ }\n}",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "Example response:",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "Ê <span class=\"fc2\">\"count\"</span> : <span class=\"fc3\">36</span>,\nÊ <span class=\"fc2\">\"average_price\"</span> : <span class=\"fc3\">36.75</span>\n}",
    "hierarchy": [
      "Query Facet"
    ],
    "pageId": 499
  },
  {
    "content": "The range facet produces multiple buckets over a date field or numeric field.",
    "hierarchy": [
      "Range Facet"
    ],
    "pageId": 499
  },
  {
    "content": "Example:",
    "hierarchy": [
    ],
    "pageId": 500
  },
  {
    "content": "{\nÊ prices : {\nÊ   type: range,\nÊ   field : price,\nÊ   start : <span class=\"fc1\">0</span>,\nÊ   end : <span class=\"fc1\">100</span>,\nÊ   gap : <span class=\"fc1\">20</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 500
  },
  {
    "content": "Ê <span class=\"fc2\">\"buckets\"</span>:[\nÊ   {\nÊ     <span class=\"fc2\">\"val\"</span>:<span class=\"fc1\">0.0</span>,  <span class=\"fc3\">// the bucket value represents the start of each range.  This bucket covers 0-</span>",
    "hierarchy": [
    ],
    "pageId": 500
  },
  {
    "content": "Ê     <span class=\"fc2\">\"count\"</span>:<span class=\"fc1\">5</span>},\nÊ   {\nÊ     <span class=\"fc2\">\"val\"</span>:<span class=\"fc1\">20.0</span>,\nÊ     <span class=\"fc2\">\"count\"</span>:<span class=\"fc1\">3</span>},\nÊ   {\nÊ     <span class=\"fc2\">\"val\"</span>:<span class=\"fc1\">40.0</span>,\nÊ     <span class=\"fc2\">\"count\"</span>:<span class=\"fc1\">2</span>},\nÊ   {\nÊ     <span class=\"fc2\">\"val\"</span>:<span class=\"fc1\">60.0</span>,\nÊ     <span class=\"fc2\">\"count\"</span>:<span class=\"fc1\">1</span>},\nÊ   {\nÊ     <span class=\"fc2\">\"val\"</span>:<span class=\"fc1\">80.0</span>,\nÊ     <span class=\"fc2\">\"count\"</span>:<span class=\"fc1\">1</span>}\nÊ ]\n}",
    "hierarchy": [
    ],
    "pageId": 500
  },
  {
    "content": "To ease migration, the range facet parameter names and semantics largely mirror facet.range query-\nparameter style faceting. For example \"start\" here corresponds to \"facet.range.start\" in a facet.range\ncommand.",
    "hierarchy": [
      "Range Facet Parameters"
    ],
    "pageId": 500
  },
  {
    "content": "fieldThe numeric field or date field to produce range buckets from.",
    "hierarchy": [
      "Range Facet Parameters"
    ],
    "pageId": 500
  },
  {
    "content": "startLower bound of the ranges.",
    "hierarchy": [
      "Range Facet Parameters"
    ],
    "pageId": 500
  },
  {
    "content": "endUpper bound of the ranges.",
    "hierarchy": [
      "Range Facet Parameters"
    ],
    "pageId": 500
  },
  {
    "content": "gapSize of each range bucket produced.",
    "hierarchy": [
      "Range Facet Parameters"
    ],
    "pageId": 500
  },
  {
    "content": "hardendA boolean, which if true means that the last bucket will end at “end” even if it is less than “gap”\nwide. If false, the last bucket will be “gap” wide, which may extend past “end”.",
    "hierarchy": [
    ],
    "pageId": 501
  },
  {
    "content": "other\nThis parameter indicates that in addition to the counts for each range constraint between <span class=\"code\">start</span>\nand <span class=\"code\">end</span>, counts should also be computed for…",
    "hierarchy": [
    ],
    "pageId": 501
  },
  {
    "content": "\"before\" all records with field values lower then lower bound of the first range\n•\"after\" all records with field values greater then the upper bound of the last range\n•\"between\" all records with field values between the start and end bounds of all ranges\n•\"none\" compute none of this information\n•\"all\" shortcut for before, between, and after",
    "hierarchy": [
    ],
    "pageId": 501
  },
  {
    "content": "include\nBy default, the ranges used to compute range faceting between <span class=\"code\">start</span> and <span class=\"code\">end</span> are inclusive of\ntheir lower bounds and exclusive of the upper bounds. The “before” range is exclusive and the\n“after” range is inclusive. This default, equivalent to \"lower\" below, will not result in double\ncounting at the boundaries. The <span class=\"code\">include</span> parameter may be any combination of the following\noptions:",
    "hierarchy": [
    ],
    "pageId": 501
  },
  {
    "content": "\"lower\" all gap based ranges include their lower bound\n•\"upper\" all gap based ranges include their upper bound\n•\"edge\" the first and last gap ranges include their edge bounds (i.e., lower for the first one,\nupper for the last one) even if the corresponding upper/lower option is not specified\n•\"outer\" the “before” and “after” ranges will be inclusive of their bounds, even if the first or\nlast ranges already include those boundaries.\n•\"all\" shorthand for lower, upper, edge, outer",
    "hierarchy": [
    ],
    "pageId": 501
  },
  {
    "content": "facetAggregations, metrics, or nested facets that will be calculated for every returned bucket",
    "hierarchy": [
    ],
    "pageId": 501
  },
  {
    "content": "One can filter the domain <span class=\"ff1\">before</span> faceting via the <span class=\"code\">filter</span> keyword in the <span class=\"code\">domain</span> block of the facet.",
    "hierarchy": [
      "Filtering Facets"
    ],
    "pageId": 501
  },
  {
    "content": "Example:",
    "hierarchy": [
      "Filtering Facets"
    ],
    "pageId": 501
  },
  {
    "content": "{\nÊ categories : {\nÊ    type : terms,\nÊ    field : cat,\nÊ    domain : { filter : <span class=\"fc2\">\"popularity:[5 TO 10]\"</span> }\nÊ  }\n}",
    "hierarchy": [
      "Filtering Facets"
    ],
    "pageId": 501
  },
  {
    "content": "The value of <span class=\"code\">filter</span> can be a single query to treat as a filter, or a list of filter queries. Each one can be:",
    "hierarchy": [
      "Filtering Facets"
    ],
    "pageId": 501
  },
  {
    "content": "<span class=\"ls1\">a string containing a query in Solr query syntax</span>",
    "hierarchy": [
    ],
    "pageId": 502
  },
  {
    "content": "<span class=\"ls1\">a reference to a request parameter containing Solr query syntax, of the form: <span class=\"ff2 fs1\">{param :</span></span>\n<request_param_name>}",
    "hierarchy": [
    ],
    "pageId": 502
  },
  {
    "content": "Aggregation functions, also called <span class=\"code\">facet functions, analytic functions,</span> or <span class=\"code\">metrics</span>, calculate something\ninteresting over a domain (each facet bucket).",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "sumsum(sales)summation of numeric values",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "avgavg(popularity)average of numeric values",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "minmin(salary)minimum value",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "maxmax(mul(price,popularity))maximum value",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "uniqueunique(author)number of unique values",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "hllhll(author)distributed cardinality estimate via hyper-log-log algorithm",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "percentil\ne\npercentile(salary,50,75,99,99.9)Percentile estimates via t-digest algorithm. When sorting by this\nmetric, the first percentile listed is used as the sort value.",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "sumsqsumsq(rent)sum of squares of field or function",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "variancevariance(rent)variance of numeric field or function",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "stddevstddev(rent)standard deviation of field or function",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "Numeric aggregation functions such as <span class=\"ff2 fs1\">avg</span> can be on any numeric field, or on another function of multiple\nnumeric fields such as <span class=\"ff2 fs1\">avg(mul(price,popularity))</span>.",
    "hierarchy": [
      "Aggregation Functions"
    ],
    "pageId": 502
  },
  {
    "content": "The default sort for a field or terms facet is by bucket count descending. We can optionally sort ascending or\ndescending by any facet function that appears in each bucket.",
    "hierarchy": [
      "Aggregation Functions",
      "Facet Sorting"
    ],
    "pageId": 502
  },
  {
    "content": "{\nÊ categories:{\nÊ   type : terms      <span class=\"fc2\">// terms facet creates a bucket for each indexed term in the field</span>\nÊ   field : cat,\nÊ   sort : <span class=\"fc3\">\"x desc\"</span>,  <span class=\"fc2\">// can also use sort:{x:desc}</span>\nÊ   facet : {\nÊ     x : <span class=\"fc3\">\"avg(price)\"</span>,     <span class=\"fc2\">// x = average price for each facet bucket</span>\nÊ     y : <span class=\"fc3\">\"max(popularity)\"</span> <span class=\"fc2\">// y = max popularity value in each facet bucket</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
      "Aggregation Functions",
      "Facet Sorting"
    ],
    "pageId": 502
  },
  {
    "content": "Nested facets, or <span class=\"ff1\">sub-facets</span>, allow one to nest bucketing facet commands like <span class=\"ff1\">terms</span>, <span class=\"ff1\">range</span>, or <span class=\"ff1\">query</span>\nfacets under other facet commands. The syntax is identical to top-level facets - just add the facet command\nto the facet command block of the parent facet. Technically, every facet command is actually a sub-facet\nsince we start off with a single facet bucket with a domain defined by the main query and filters.",
    "hierarchy": [
      "Nested Facets"
    ],
    "pageId": 503
  },
  {
    "content": "Let's start off with a simple non-nested terms facet on the genre field:",
    "hierarchy": [
      "Nested Facets",
      "Nested facet example"
    ],
    "pageId": 503
  },
  {
    "content": "Êtop_genres:{\nÊ   type: terms\nÊ   field: genre,\nÊ   limit: <span class=\"fc2\">5</span>\nÊ }",
    "hierarchy": [
      "Nested Facets",
      "Nested facet example"
    ],
    "pageId": 503
  },
  {
    "content": "Now if we wanted to add a nested facet to find the top 2 authors for each genre bucket:",
    "hierarchy": [
      "Nested Facets",
      "Nested facet example"
    ],
    "pageId": 503
  },
  {
    "content": "Ê top_genres:{\nÊ   type: terms,\nÊ   field: genre,\nÊ   limit: <span class=\"fc2\">5</span>,\nÊ   facet:{\nÊ     top_authors:{\nÊ       type: terms, <span class=\"fc3\">// nested terms facet on author will be calculated for each parent bucket</span>",
    "hierarchy": [
      "Nested Facets",
      "Nested facet example"
    ],
    "pageId": 503
  },
  {
    "content": "Ê       field: author,\nÊ       limit: <span class=\"fc2\">2</span>\nÊ     }\nÊ   }\nÊ }",
    "hierarchy": [
      "Nested Facets",
      "Nested facet example"
    ],
    "pageId": 503
  },
  {
    "content": "And the response will look something like:",
    "hierarchy": [
      "Nested Facets",
      "Nested facet example"
    ],
    "pageId": 503
  },
  {
    "content": "Ê [...]\nÊ <span class=\"fc1\">\"facets\"</span>:{\nÊ   <span class=\"fc1\">\"top_genres\"</span>:{\nÊ     <span class=\"fc1\">\"buckets\"</span>:[\nÊ       {\nÊ         <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"Fantasy\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">5432</span>,\nÊ         <span class=\"fc1\">\"top_authors\"</span>:{  <span class=\"fc3\">// these are the top authors in the \"Fantasy\" genre</span>\nÊ           <span class=\"fc1\">\"buckets\"</span>:[{\nÊ               <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"Mercedes Lackey\"</span>,\nÊ               <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">121</span>},\nÊ             {\nÊ               <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"Piers Anthony\"</span>,\nÊ               <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">98</span>}\nÊ           ]\nÊ         }\nÊ       },\nÊ       {\nÊ         <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"Mystery\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">4322</span>,\nÊ         <span class=\"fc1\">\"top_authors\"</span>:{  <span class=\"fc3\">// these are the top authors in the \"Mystery\" genre</span>\nÊ           <span class=\"fc1\">\"buckets\"</span>:[{\nÊ               <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"James Patterson\"</span>,\nÊ               <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">146</span>},\nÊ             {\nÊ               <span class=\"fc1\">\"val\"</span>:<span class=\"fc1\">\"Patricia Cornwell\"</span>,\nÊ               <span class=\"fc1\">\"count\"</span>:<span class=\"fc2\">132</span>}\nÊ           ]\nÊ         }\nÊ       },\nÊ       [...]",
    "hierarchy": [
    ],
    "pageId": 504
  },
  {
    "content": "By default \"top authors\" is defined by simple document count descending, but we could use our\naggregation functions to sort by more interesting metrics.",
    "hierarchy": [
    ],
    "pageId": 504
  },
  {
    "content": "This documentation was originally adapted largely from the following blog pages:",
    "hierarchy": [
      "References"
    ],
    "pageId": 504
  },
  {
    "content": "http://yonik.com/json-facet-api/",
    "hierarchy": [
      "References"
    ],
    "pageId": 504
  },
  {
    "content": "http://yonik.com/solr-facet-functions/",
    "hierarchy": [
      "References"
    ],
    "pageId": 504
  },
  {
    "content": "http://yonik.com/solr-subfacets/",
    "hierarchy": [
      "References"
    ],
    "pageId": 504
  },
  {
    "content": "http://yonik.com/percentiles-for-solr-faceting/",
    "hierarchy": [
      "References"
    ],
    "pageId": 504
  },
  {
    "content": "Faceting is the arrangement of search results into categories based on indexed terms.",
    "hierarchy": [
      "Faceting"
    ],
    "pageId": 505
  },
  {
    "content": "Searchers are presented with the indexed terms, along with numerical counts of how many matching\ndocuments were found for each term. Faceting makes it easy for users to explore search results, narrowing\nin on exactly the results they are looking for.",
    "hierarchy": [
      "Faceting"
    ],
    "pageId": 505
  },
  {
    "content": "There are two general parameters for controlling faceting.",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "facet\nIf set to <span class=\"code\">true</span>, this parameter enables facet counts in the query response. If set to <span class=\"code\">false</span>, a blank or\nmissing value, this parameter disables faceting. None of the other parameters listed below will have any\neffect unless this parameter is set to <span class=\"code\">true</span>. The default value is blank (false).",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "facet.query\nThis parameter allows you to specify an arbitrary query in the Lucene default syntax to generate a facet\ncount.",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "By default, Solr's faceting feature automatically determines the unique terms for a field and returns a\ncount for each of those terms. Using <span class=\"code\">facet.query</span>, you can override this default behavior and select\nexactly which terms or expressions you would like to see counted. In a typical implementation of faceting,\nyou will specify a number of <span class=\"code\">facet.query</span> parameters. This parameter can be particularly useful for\nnumeric-range-based facets or prefix-based facets.",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "You can set the <span class=\"code\">facet.query</span> parameter multiple times to indicate that multiple queries should be used\nas separate facet constraints.",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "To use facet queries in a syntax other than the default syntax, prefix the facet query with the name of the\nquery notation. For example, to use the hypothetical <span class=\"code\">myfunc</span> query parser, you could set the <span class=\"code\">facet.query</span>\nparameter like so:",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "facet.query={!myfunc}name~fred",
    "hierarchy": [
      "Faceting",
      "General Facet Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "Several parameters can be used to trigger faceting based on the indexed terms in a field.",
    "hierarchy": [
      "Faceting",
      "Field-Value Faceting Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "When using these parameters, it is important to remember that \"term\" is a very specific concept in Lucene:\nit relates to the literal field/value pairs that are indexed after any analysis occurs. For text fields that include\nstemming, lowercasing, or word splitting, the resulting terms may not be what you expect.",
    "hierarchy": [
      "Faceting",
      "Field-Value Faceting Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "If you want Solr to perform both analysis (for searching) and faceting on the full literal strings, use the\ncopyField<span class=\"ff2 fs1\"> directive in your Schema to create two versions of the field: one Text and one String. Make sure</span>\nboth are <span class=\"code\">indexed=\"true\"</span>. (For more information about the <span class=\"code\">copyField</span> directive, see <span class=\"link\">Documents, Fields, and</span>\nSchema Design<span class=\"fc1\">.)</span>",
    "hierarchy": [
      "Faceting",
      "Field-Value Faceting Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "Unless otherwise specified, all of the parameters below can be specified on a per-field basis with the syntax",
    "hierarchy": [
      "Faceting",
      "Field-Value Faceting Parameters"
    ],
    "pageId": 505
  },
  {
    "content": "of <span class=\"ff2 fs1\">f.<fieldname>.facet.<parameter></span>",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.field\nThe <span class=\"ff2 fs1\">facet.field</span> parameter identifies a field that should be treated as a facet. It iterates over each Term\nin the field and generate a facet count using that Term as the constraint. This parameter can be specified\nmultiple times in a query to select multiple facet fields.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "If you do not set this parameter to at least one field in the schema, none of the other\nparameters described in this section will have any effect.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.prefix\nThe <span class=\"ff2 fs1\">facet.prefix</span> parameter limits the terms on which to facet to those starting with the given string\nprefix. This does not limit the query in any way, only the facets that would be returned in response to the\nquery.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.contains\nThe <span class=\"ff2 fs1\">facet.contains</span> parameter limits the terms on which to facet to those containing the given\nsubstring. This does not limit the query in any way, only the facets that would be returned in response to\nthe query.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.contains.ignoreCase\nIf <span class=\"ff2 fs1\">facet.contains</span> is used, the <span class=\"ff2 fs1\">facet.contains.ignoreCase</span> parameter causes case to be ignored when\nmatching the given substring against candidate facet terms.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.matches\nIf you want to only return facet buckets for the terms that match a regular expression.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.sort\nThis parameter determines the ordering of the facet field constraints.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "There are two options for this parameter.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "count\nSort the constraints by count (highest count first).",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "index\nReturn the constraints sorted in their index order (lexicographic by indexed term). For terms in the\nASCII range, this will be alphabetically sorted.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "The default is <span class=\"ff2 fs1\">count</span> if <span class=\"ff2 fs1\">facet.limit</span> is greater than 0, otherwise, the default is <span class=\"ff2 fs1\">index</span>.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.limit\nThis parameter specifies the maximum number of constraint counts (essentially, the number of facets for\na field that are returned) that should be returned for the facet fields. A negative value means that Solr will\nreturn unlimited number of constraint counts.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "The default value is <span class=\"ff2 fs1\">100</span>.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.offset\nThe <span class=\"ff2 fs1\">facet.offset</span> parameter indicates an offset into the list of constraints to allow paging.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "The default value is <span class=\"ff2 fs1\">0</span>.",
    "hierarchy": [
    ],
    "pageId": 506
  },
  {
    "content": "facet.mincount\nThe <span class=\"ff1 fs0\">facet.mincount</span> parameter specifies the minimum counts required for a facet field to be included in\nthe response. If a field's counts are below the minimum, the field’s facet is not returned.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "The default value is <span class=\"ff1 fs0\">0</span>.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "facet.missing\nIf set to <span class=\"ff1 fs0\">true</span>, this parameter indicates that, in addition to the Term-based constraints of a facet field, a\ncount of all results that match the query but which have no facet value for the field should be computed\nand returned in the response.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "The default value is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "facet.method\nThe <span class=\"ff1 fs0\">facet.method</span> parameter selects the type of algorithm or method Solr should use when faceting a\nfield.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "The following methods are available.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "enum\nEnumerates all terms in a field, calculating the set intersection of documents that match the term with\ndocuments that match the query.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "This method is recommended for faceting multi-valued fields that have only a few distinct values. The\naverage number of values per document does not matter.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "For example, faceting on a field with U.S. States such as <span class=\"ff1 fs0\">Alabama, Alaska, … Wyoming</span> would lead to\nfifty cached filters which would be used over and over again. The <span class=\"ff1 fs0\">filterCache</span> should be large enough\nto hold all the cached filters.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "fc\nCalculates facet counts by iterating over documents that match the query and summing the terms that\nappear in each document.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "This is currently implemented using an <span class=\"ff1 fs0\">UnInvertedField</span> cache if the field either is multi-valued or is\ntokenized (according to <span class=\"ff1 fs0\">FieldType.isTokened()</span>). Each document is looked up in the cache to see\nwhat terms/values it contains, and a tally is incremented for each value.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "This method is excellent for situations where the number of indexed values for the field is high, but\nthe number of values per document is low. For multi-valued fields, a hybrid approach is used that uses\nterm filters from the <span class=\"ff1 fs0\">filterCache</span> for terms that match many documents. The letters <span class=\"ff1 fs0\">fc</span> stand for field\ncache.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "fcs\nPer-segment field faceting for single-valued string fields. Enable with <span class=\"ff1 fs0\">facet.method=fcs</span> and control\nthe number of threads used with the <span class=\"ff1 fs0\">threads</span> local parameter. This parameter allows faceting to be\nfaster in the presence of rapid index changes.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "The default value is <span class=\"ff1 fs0\">fc</span> (except for fields using the <span class=\"ff1 fs0\">BoolField</span> field type and when <span class=\"ff1 fs0\">facet.exists=true</span> is\nrequested) since it tends to use less memory and is faster when a field has many unique terms in the\nindex.",
    "hierarchy": [
    ],
    "pageId": 507
  },
  {
    "content": "facet.enum.cache.minDf\nThis parameter indicates the minimum document frequency (the number of documents matching a term)\nfor which the filterCache should be used when determining the constraint count for that term. This is only\nused with the <span class=\"ff1 fs0\">facet.method=enum</span> method of faceting.",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "A value greater than zero decreases the filterCache's memory usage, but increases the time required for\nthe query to be processed. If you are faceting on a field with a very large number of terms, and you wish\nto decrease memory usage, try setting this parameter to a value between <span class=\"ff1 fs0\">25</span> and <span class=\"ff1 fs0\">50</span>, and run a few tests.\nThen, optimize the parameter setting as necessary.",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "The default value is <span class=\"ff1 fs0\">0</span>, causing the filterCache to be used for all terms in the field.",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "facet.exists\nTo cap facet counts by 1, specify <span class=\"ff1 fs0\">facet.exists=true</span>. This parameter can be used with\nfacet.method=enum<span class=\"ff2 fs1\"> or when it's omitted. It can be used only on non-trie fields (such as strings). It may</span>\nspeed up facet counting on large indices and/or high-cardinality facet values.",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "facet.excludeTerms\nIf you want to remove terms from facet counts but keep them in the index, the <span class=\"ff1 fs0\">facet.excludeTerms</span>\nparameter allows you to do that.",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "facet.overrequest.count<span class=\"code\"> and </span>facet.overrequest.ratio\nIn some situations, the accuracy in selecting the \"top\" constraints returned for a facet in a distributed\nSolr query can be improved by \"over requesting\" the number of desired constraints (i.e., <span class=\"ff1 fs0\">facet.limit</span>)\nfrom each of the individual shards. In these situations, each shard is by default asked for the top <span class=\"ff1 fs0\">10 +</span>\n(1.5 * facet.limit)<span class=\"ff2 fs1\"> constraints.</span>",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "In some situations, depending on how your docs are partitioned across your shards and what\nfacet.limit<span class=\"ff2 fs1\"> value you used, you may find it advantageous to increase or decrease the amount of over-</span>\nrequesting Solr does. This can be achieved by setting the <span class=\"ff1 fs0\">facet.overrequest.count</span> (defaults to <span class=\"ff1 fs0\">10</span>) and\nfacet.overrequest.ratio<span class=\"ff2 fs1\"> (defaults to </span>1.5<span class=\"ff2 fs1\">) parameters.</span>",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "facet.threads\nThis parameter will cause loading the underlying fields used in faceting to be executed in parallel with the\nnumber of threads specified. Specify as <span class=\"ff1 fs0\">facet.threads=N</span> where <span class=\"ff1 fs0\">N</span> is the maximum number of threads\nused.",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "Omitting this parameter or specifying the thread count as <span class=\"ff1 fs0\">0</span> will not spawn any threads, and only the\nmain request thread will be used. Specifying a negative number of threads will create up to\nInteger.MAX_VALUE<span class=\"ff2 fs1\"> threads.</span>",
    "hierarchy": [
    ],
    "pageId": 508
  },
  {
    "content": "You can use Range Faceting on any date field or any numeric field that supports range queries. This is\nparticularly useful for stitching together a series of range queries (as facet by query) for things like prices.",
    "hierarchy": [
      "Range Faceting"
    ],
    "pageId": 508
  },
  {
    "content": "facet.range\nThe <span class=\"ff1 fs0\">facet.range</span> parameter defines the field for which Solr should create range facets. For example:",
    "hierarchy": [
      "Range Faceting"
    ],
    "pageId": 508
  },
  {
    "content": "facet.range=price&facet.range=age",
    "hierarchy": [
      "Range Faceting"
    ],
    "pageId": 508
  },
  {
    "content": "facet.range=lastModified_dt",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "facet.range.start\nThe <span class=\"ff1 fs0\">facet.range.start</span> parameter specifies the lower bound of the ranges. You can specify this\nparameter on a per field basis with the syntax of <span class=\"ff1 fs0\">f.<fieldname>.facet.range.start</span>. For example:",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "f.price.facet.range.start=0.0&f.age.facet.range.start=10",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "f.lastModified_dt.facet.range.start=NOW/DAY-30DAYS",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "facet.range.end\nThe <span class=\"ff1 fs0\">facet.range.end</span> specifies the upper bound of the ranges. You can specify this parameter on a per\nfield basis with the syntax of <span class=\"ff1 fs0\">f.<fieldname>.facet.range.end</span>. For example:",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "f.price.facet.range.end=1000.0&f.age.facet.range.start=99",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "f.lastModified_dt.facet.range.end=NOW/DAY+30DAYS",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "facet.range.gap\nThe span of each range expressed as a value to be added to the lower bound. For date fields, this should\nbe expressed using the <span class=\"ff1 fs0\">DateMathParser</span><span class=\"link\"> syntax</span> (such as, <span class=\"ff1 fs0\">facet.range.gap=%2B1DAY … '+1DAY'</span>). You\ncan specify this parameter on a per-field basis with the syntax of <span class=\"ff1 fs0\">f.<fieldname>.facet.range.gap</span>. For\nexample:",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "f.price.facet.range.gap=100&f.age.facet.range.gap=10",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "f.lastModified_dt.facet.range.gap=+1DAY",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "facet.range.hardend\nThe <span class=\"ff1 fs0\">facet.range.hardend</span> parameter is a Boolean parameter that specifies how Solr should handle cases\nwhere the <span class=\"ff1 fs0\">facet.range.gap</span> does not divide evenly between <span class=\"ff1 fs0\">facet.range.start</span> and <span class=\"ff1 fs0\">facet.range.end</span>.",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "If <span class=\"ff1 fs0\">true</span>, the last range constraint will have the <span class=\"ff1 fs0\">facet.range.end</span> value as an upper bound. If <span class=\"ff1 fs0\">false</span>, the\nlast range will have the smallest possible upper bound greater then <span class=\"ff1 fs0\">facet.range.end</span> such that the\nrange is the exact width of the specified range gap. The default value for this parameter is false.",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "This parameter can be specified on a per field basis with the syntax\nf.<fieldname>.facet.range.hardend<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "facet.range.include\nBy default, the ranges used to compute range faceting between <span class=\"ff1 fs0\">facet.range.start</span> and\nfacet.range.end<span class=\"ff2 fs1\"> are inclusive of their lower bounds and exclusive of the upper bounds. The \"before\"</span>\nrange defined with the <span class=\"ff1 fs0\">facet.range.other</span> parameter is exclusive and the \"after\" range is inclusive. This\ndefault, equivalent to \"lower\" below, will not result in double counting at the boundaries. You can use the\nfacet.range.include<span class=\"ff2 fs1\"> parameter to modify this behavior using the following options:</span>",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "lower: All gap-based ranges include their lower bound.\n•upper: All gap-based ranges include their upper bound.\n•edge: The first and last gap ranges include their edge bounds (lower for the first one, upper for the\nlast one) even if the corresponding upper/lower option is not specified.\n•outer: The \"before\" and \"after\" ranges will be inclusive of their bounds, even if the first or last ranges\nalready include those boundaries.",
    "hierarchy": [
    ],
    "pageId": 509
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">all</span><span class=\"ls1\">: Includes all options: <span class=\"ff2 fs1\">lower</span>, <span class=\"ff2 fs1\">upper</span>, <span class=\"ff2 fs1\">edge</span>, and <span class=\"ff2 fs1\">outer</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "You can specify this parameter on a per field basis with the syntax of\nf.<fieldname>.facet.range.include<span class=\"ff1 fs0\">, and you can specify it multiple times to indicate multiple choices.</span>",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "To ensure you avoid double-counting, do not choose both <span class=\"ff2 fs1\">lower</span> and <span class=\"ff2 fs1\">upper</span>, do not\nchoose <span class=\"ff2 fs1\">outer</span>, and do not choose <span class=\"ff2 fs1\">all</span>.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "facet.range.other\nThe <span class=\"ff2 fs1\">facet.range.other</span> parameter specifies that in addition to the counts for each range constraint\nbetween <span class=\"ff2 fs1\">facet.range.start</span> and <span class=\"ff2 fs1\">facet.range.end</span>, counts should also be computed for these options:",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">before</span><span class=\"ls1\">: All records with field values lower then lower bound of the first range.</span>\n•<span class=\"ff2 fs1 ls1\">after</span><span class=\"ls1\">: All records with field values greater then the upper bound of the last range.</span>\n•<span class=\"ff2 fs1 ls1\">between</span><span class=\"ls1\">: All records with field values between the start and end bounds of all ranges.</span>\n•<span class=\"ff2 fs1 ls1\">none</span><span class=\"ls1\">: Do not compute any counts.</span>\n•<span class=\"ff2 fs1 ls1\">all</span><span class=\"ls1\">: Compute counts for before, between, and after.</span>",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "This parameter can be specified on a per field basis with the syntax of\nf.<fieldname>.facet.range.other<span class=\"ff1 fs0\">. In addition to the </span>all<span class=\"ff1 fs0\"> option, this parameter can be specified</span>\nmultiple times to indicate multiple choices, but <span class=\"ff2 fs1\">none</span> will override all other options.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "facet.range.method\nThe <span class=\"ff2 fs1\">facet.range.method</span> parameter selects the type of algorithm or method Solr should use for range\nfaceting. Both methods produce the same results, but performance may vary.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "filter\nThis method generates the ranges based on other facet.range parameters, and for each of them\nexecutes a filter that later intersects with the main query resultset to get the count. It will make use of\nthe filterCache, so it will benefit of a cache large enough to contain all ranges.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "dv\nThis method iterates the documents that match the main query, and for each of them finds the correct\nrange for the value. This method will make use of <span class=\"link\">docValues</span> (if enabled for the field) or fieldCache. The\ndv<span class=\"ff1 fs0\"> method is not supported for field type DateRangeField or when using <span class=\"link\">group.facets</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "The default value for this parameter is <span class=\"ff2 fs1\">filter</span>.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "Range faceting on date fields is a common situation where the <span class=\"ff2 fs1\">TZ</span> parameter can be useful\nto ensure that the \"facet counts per day\" or \"facet counts per month\" are based on a\nmeaningful definition of when a given day/month \"starts\" relative to a particular\nTimeZone.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "For more information, see the examples in the <span class=\"link\">Working with Dates</span> section.",
    "hierarchy": [
    ],
    "pageId": 510
  },
  {
    "content": "The <span class=\"code\">facet.mincount</span> parameter, the same one as used in field faceting is also applied to range faceting.\nWhen used, no ranges with a count below the minimum will be included in the response.",
    "hierarchy": [
      "facet.mincount in Range Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "Pivoting is a summarization tool that lets you automatically sort, count, total or average data stored in a\ntable. The results are typically displayed in a second table showing the summarized data. Pivot faceting lets\nyou create a summary table of the results from a faceting documents by multiple fields.",
    "hierarchy": [
      "Pivot (Decision Tree) Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "Another way to look at it is that the query produces a Decision Tree, in that Solr tells you \"for facet A, the\nconstraints/counts are X/N, Y/M, etc. If you were to constrain A by X, then the constraint counts for B would\nbe S/P, T/Q, etc.\". In other words, it tells you in advance what the \"next\" set of facet results would be for a\nfield if you apply a constraint from the current facet results.",
    "hierarchy": [
      "Pivot (Decision Tree) Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "facet.pivot\nThe <span class=\"code\">facet.pivot</span> parameter defines the fields to use for the pivot. Multiple <span class=\"code\">facet.pivot</span> values will\ncreate multiple \"facet_pivot\" sections in the response. Separate each list of fields with a comma.",
    "hierarchy": [
      "Pivot (Decision Tree) Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "facet.pivot.mincount\nThe <span class=\"code\">facet.pivot.mincount</span> parameter defines the minimum number of documents that need to match\nin order for the facet to be included in results. The default is 1.",
    "hierarchy": [
      "Pivot (Decision Tree) Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "Using the “bin/solr -e techproducts” example, A query URL like this one will return the data below, with\nthe pivot faceting results found in the section \"facet_pivot\":",
    "hierarchy": [
      "Pivot (Decision Tree) Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=*:*&facet.pivot=cat,popularity,inStock\nÊ\n&facet.pivot=popularity,cat&facet=true&facet.field=cat&facet.limit=5&rows=0&facet.pivot.mincount=\n2",
    "hierarchy": [
      "Pivot (Decision Tree) Faceting"
    ],
    "pageId": 511
  },
  {
    "content": "{  <span class=\"fc1\">\"facet_counts\"</span>:{\nÊ   <span class=\"fc1\">\"facet_queries\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_fields\"</span>:{\nÊ     <span class=\"fc1\">\"cat\"</span>:[\nÊ       <span class=\"fc2\">\"electronics\"</span>,<span class=\"fc3\">14</span>,\nÊ       <span class=\"fc2\">\"currency\"</span>,<span class=\"fc3\">4</span>,\nÊ       <span class=\"fc2\">\"memory\"</span>,<span class=\"fc3\">3</span>,\nÊ       <span class=\"fc2\">\"connector\"</span>,<span class=\"fc3\">2</span>,\nÊ       <span class=\"fc2\">\"graphics card\"</span>,<span class=\"fc3\">2</span>]},\nÊ   <span class=\"fc1\">\"facet_dates\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_ranges\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_pivot\"</span>:{\nÊ     <span class=\"fc1\">\"cat,popularity,inStock\"</span>:[{\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"cat\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>:<span class=\"fc2\">\"electronics\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">14</span>,\nÊ         <span class=\"fc1\">\"pivot\"</span>:[{\nÊ             <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"popularity\"</span>,\nÊ             <span class=\"fc1\">\"value\"</span>:<span class=\"fc3\">6</span>,\nÊ             <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">5</span>,\nÊ             <span class=\"fc1\">\"pivot\"</span>:[{\nÊ                 <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"inStock\"</span>,\nÊ                 <span class=\"fc1\">\"value\"</span>:<span class=\"fc4\">true</span>,\nÊ                 <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">5</span>}]}]\n}]}}}",
    "hierarchy": [
    ],
    "pageId": 512
  },
  {
    "content": "In addition to some of the <span class=\"fc6\">general local parameters</span> supported by other types of faceting, a <span class=\"ff1 fs2\">stats</span> local\nparameters can be used with <span class=\"ff1 fs2\">facet.pivot</span> to refer to <span class=\"ff1 fs2\">stats.field</span> instances (by tag) that you would like to\nhave computed for each Pivot Constraint.",
    "hierarchy": [
      "Combining Stats Component With Pivots"
    ],
    "pageId": 512
  },
  {
    "content": "In the example below, two different (overlapping) sets of statistics are computed for each of the facet.pivot\nresult hierarchies:",
    "hierarchy": [
      "Combining Stats Component With Pivots"
    ],
    "pageId": 512
  },
  {
    "content": "stats=true\nstats.field={!tag=piv1,piv2 min=true max=true}price\nstats.field={!tag=piv2 mean=true}popularity\nfacet=true\nfacet.pivot={!stats=piv1}cat,inStock\nfacet.pivot={!stats=piv2}manu,inStock",
    "hierarchy": [
      "Combining Stats Component With Pivots"
    ],
    "pageId": 512
  },
  {
    "content": "Results:",
    "hierarchy": [
      "Combining Stats Component With Pivots"
    ],
    "pageId": 512
  },
  {
    "content": "{<span class=\"fc1\">\"facet_pivot\"</span>:{\nÊ <span class=\"fc1\">\"cat,inStock\"</span>:[{\nÊ     <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"cat\"</span>,\nÊ     <span class=\"fc1\">\"value\"</span>:<span class=\"fc2\">\"electronics\"</span>,\nÊ     <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">12</span>,",
    "hierarchy": [
      "Combining Stats Component With Pivots"
    ],
    "pageId": 512
  },
  {
    "content": "Ê     <span class=\"fc1\">\"pivot\"</span>:[{\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"inStock\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>:<span class=\"fc3\">true</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc4\">8</span>,\nÊ         <span class=\"fc1\">\"stats\"</span>:{\nÊ           <span class=\"fc1\">\"stats_fields\"</span>:{\nÊ             <span class=\"fc1\">\"price\"</span>:{\nÊ               <span class=\"fc1\">\"min\"</span>:<span class=\"fc4\">74.98999786376953</span>,\nÊ               <span class=\"fc1\">\"max\"</span>:<span class=\"fc4\">399.0</span>}}}},\nÊ       {\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"inStock\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>:<span class=\"fc3\">false</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc4\">4</span>,\nÊ         <span class=\"fc1\">\"stats\"</span>:{\nÊ           <span class=\"fc1\">\"stats_fields\"</span>:{\nÊ             <span class=\"fc1\">\"price\"</span>:{\nÊ               <span class=\"fc1\">\"min\"</span>:<span class=\"fc4\">11.5</span>,\nÊ               <span class=\"fc1\">\"max\"</span>:<span class=\"fc4\">649.989990234375</span>}}}}],\nÊ     <span class=\"fc1\">\"stats\"</span>:{\nÊ       <span class=\"fc1\">\"stats_fields\"</span>:{\nÊ         <span class=\"fc1\">\"price\"</span>:{\nÊ           <span class=\"fc1\">\"min\"</span>:<span class=\"fc4\">11.5</span>,\nÊ           <span class=\"fc1\">\"max\"</span>:<span class=\"fc4\">649.989990234375</span>}}}},\nÊ   {\nÊ     <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"cat\"</span>,\nÊ     <span class=\"fc1\">\"value\"</span>:<span class=\"fc2\">\"currency\"</span>,\nÊ     <span class=\"fc1\">\"count\"</span>:<span class=\"fc4\">4</span>,\nÊ     <span class=\"fc1\">\"pivot\"</span>:[{\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"inStock\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>:<span class=\"fc3\">true</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc4\">4</span>,\nÊ         <span class=\"fc1\">\"stats\"</span>:{\nÊ           <span class=\"fc1\">\"stats_fields\"</span>:{\nÊ             <span class=\"fc1\">\"price\"</span>:{\nÊ               <span class=\"fc2\">\"...\"</span>\nÊ <span class=\"fc1\">\"manu,inStock\"</span>:[{\nÊ     <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"manu\"</span>,\nÊ     <span class=\"fc1\">\"value\"</span>:<span class=\"fc2\">\"inc\"</span>,\nÊ     <span class=\"fc1\">\"count\"</span>:<span class=\"fc4\">8</span>,\nÊ     <span class=\"fc1\">\"pivot\"</span>:[{\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"inStock\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>:<span class=\"fc3\">true</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc4\">7</span>,\nÊ         <span class=\"fc1\">\"stats\"</span>:{\nÊ           <span class=\"fc1\">\"stats_fields\"</span>:{\nÊ             <span class=\"fc1\">\"price\"</span>:{\nÊ               <span class=\"fc1\">\"min\"</span>:<span class=\"fc4\">74.98999786376953</span>,\nÊ               <span class=\"fc1\">\"max\"</span>:<span class=\"fc4\">2199.0</span>},\nÊ             <span class=\"fc1\">\"popularity\"</span>:{\nÊ               <span class=\"fc1\">\"mean\"</span>:<span class=\"fc4\">5.857142857142857</span>}}}},\nÊ       {\nÊ         <span class=\"fc1\">\"field\"</span>:<span class=\"fc2\">\"inStock\"</span>,",
    "hierarchy": [
    ],
    "pageId": 513
  },
  {
    "content": "Ê         <span class=\"fc1\">\"value\"</span>:<span class=\"fc2\">false</span>,\nÊ         <span class=\"fc1\">\"count\"</span>:<span class=\"fc3\">1</span>,\nÊ         <span class=\"fc1\">\"stats\"</span>:{\nÊ           <span class=\"fc1\">\"stats_fields\"</span>:{\nÊ             <span class=\"fc1\">\"price\"</span>:{\nÊ               <span class=\"fc1\">\"min\"</span>:<span class=\"fc3\">479.95001220703125</span>,\nÊ               <span class=\"fc1\">\"max\"</span>:<span class=\"fc3\">479.95001220703125</span>},\nÊ             <span class=\"fc1\">\"popularity\"</span>:{\nÊ               <span class=\"fc1\">\"mean\"</span>:<span class=\"fc3\">7.0</span>}}}}],\nÊ     <span class=\"fc4\">\"...\"</span>}]}}}}]}]}}",
    "hierarchy": [
    ],
    "pageId": 514
  },
  {
    "content": "A <span class=\"ff1 fs2\">query</span> local parameter can be used with <span class=\"ff1 fs2\">facet.pivot</span> to refer to <span class=\"ff1 fs2\">facet.query</span> instances (by tag) that\nshould be computed for each pivot constraint. Similarly, a <span class=\"ff1 fs2\">range</span> local parameter can be used with\nfacet.pivot<span class=\"code\"> to refer to </span>facet.range<span class=\"code\"> instances.</span>",
    "hierarchy": [
      "Combining Facet Queries And Facet Ranges With Pivot Facets"
    ],
    "pageId": 514
  },
  {
    "content": "In the example below, two query facets are computed for h of the <span class=\"ff1 fs2\">facet.pivot</span> result hierarchies:",
    "hierarchy": [
      "Combining Facet Queries And Facet Ranges With Pivot Facets"
    ],
    "pageId": 514
  },
  {
    "content": "facet=true\nfacet.query={!tag=q1}manufacturedate_dt:[2006-01-01T00:00:00Z TO NOW]\nfacet.query={!tag=q1}price:[0 TO 100]\nfacet.pivot={!query=q1}cat,inStock",
    "hierarchy": [
      "Combining Facet Queries And Facet Ranges With Pivot Facets"
    ],
    "pageId": 514
  },
  {
    "content": "{<span class=\"fc1\">\"facet_counts\"</span>: {\nÊ   <span class=\"fc1\">\"facet_queries\"</span>: {\nÊ     <span class=\"fc1\">\"{!tag=q1}manufacturedate_dt:[2006-01-01T00:00:00Z TO NOW]\"</span>: <span class=\"fc2\">9</span>,\nÊ     <span class=\"fc1\">\"{!tag=q1}price:[0 TO 100]\"</span>: <span class=\"fc2\">7</span>\nÊ   },\nÊ   <span class=\"fc1\">\"facet_fields\"</span>: {},\nÊ   <span class=\"fc1\">\"facet_dates\"</span>: {},\nÊ   <span class=\"fc1\">\"facet_ranges\"</span>: {},\nÊ   <span class=\"fc1\">\"facet_intervals\"</span>: {},\nÊ   <span class=\"fc1\">\"facet_heatmaps\"</span>: {},\nÊ   <span class=\"fc1\">\"facet_pivot\"</span>: {\nÊ     <span class=\"fc1\">\"cat,inStock\"</span>: [\nÊ       {\nÊ         <span class=\"fc1\">\"field\"</span>: <span class=\"fc3\">\"cat\"</span>,\nÊ         <span class=\"fc1\">\"value\"</span>: <span class=\"fc3\">\"electronics\"</span>,\nÊ         <span class=\"fc1\">\"count\"</span>: <span class=\"fc2\">12</span>,\nÊ         <span class=\"fc1\">\"queries\"</span>: {\nÊ           <span class=\"fc1\">\"{!tag=q1}manufacturedate_dt:[2006-01-01T00:00:00Z TO NOW]\"</span>: <span class=\"fc2\">9</span>,\nÊ           <span class=\"fc1\">\"{!tag=q1}price:[0 TO 100]\"</span>: <span class=\"fc2\">4</span>\nÊ         },\nÊ         <span class=\"fc1\">\"pivot\"</span>: [\nÊ           {\nÊ             <span class=\"fc1\">\"field\"</span>: <span class=\"fc3\">\"inStock\"</span>,\nÊ             <span class=\"fc1\">\"value\"</span>: <span class=\"fc4\">true</span>,\nÊ             <span class=\"fc1\">\"count\"</span>: <span class=\"fc2\">8</span>,\nÊ             <span class=\"fc1\">\"queries\"</span>: {\nÊ               <span class=\"fc1\">\"{!tag=q1}manufacturedate_dt:[2006-01-01T00:00:00Z TO NOW]\"</span>: <span class=\"fc2\">6</span>,\nÊ               <span class=\"fc1\">\"{!tag=q1}price:[0 TO 100]\"</span>: <span class=\"fc2\">2</span>\nÊ             }\nÊ           },\nÊ           <span class=\"fc3\">\"...\"</span>]}]}}}",
    "hierarchy": [
    ],
    "pageId": 515
  },
  {
    "content": "In a similar way, in the example below, two range facets are computed for each of the <span class=\"ff1 fs1\">facet.pivot</span> result\nhierarchies:",
    "hierarchy": [
    ],
    "pageId": 515
  },
  {
    "content": "facet=true\nfacet.range={!tag=r1}manufacturedate_dt\nfacet.range.start=2006-01-01T00:00:00Z\nfacet.range.end=NOW/YEAR\nfacet.range.gap=+1YEAR\nfacet.pivot={!range=r1}cat,inStock",
    "hierarchy": [
    ],
    "pageId": 515
  },
  {
    "content": "{<span class=\"fc1\">\"facet_counts\"</span>:{\nÊ   <span class=\"fc1\">\"facet_queries\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_fields\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_dates\"</span>:{},\nÊ   <span class=\"fc1\">\"facet_ranges\"</span>:{\nÊ     <span class=\"fc1\">\"manufacturedate_dt\"</span>:{\nÊ       <span class=\"fc1\">\"counts\"</span>:[",
    "hierarchy": [
    ],
    "pageId": 515
  },
  {
    "content": "Ê         <span class=\"fc1\">\"2006-01-01T00:00:00Z\"</span>,<span class=\"fc2\">9</span>,\nÊ         <span class=\"fc1\">\"2007-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2008-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2009-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2010-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2011-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2012-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2013-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ         <span class=\"fc1\">\"2014-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>],\nÊ       <span class=\"fc3\">\"gap\"</span>:<span class=\"fc1\">\"+1YEAR\"</span>,\nÊ       <span class=\"fc3\">\"start\"</span>:<span class=\"fc1\">\"2006-01-01T00:00:00Z\"</span>,\nÊ       <span class=\"fc3\">\"end\"</span>:<span class=\"fc1\">\"2015-01-01T00:00:00Z\"</span>}},\nÊ   <span class=\"fc3\">\"facet_intervals\"</span>:{},\nÊ   <span class=\"fc3\">\"facet_heatmaps\"</span>:{},\nÊ   <span class=\"fc3\">\"facet_pivot\"</span>:{\nÊ     <span class=\"fc3\">\"cat,inStock\"</span>:[{\nÊ         <span class=\"fc3\">\"field\"</span>:<span class=\"fc1\">\"cat\"</span>,\nÊ         <span class=\"fc3\">\"value\"</span>:<span class=\"fc1\">\"electronics\"</span>,\nÊ         <span class=\"fc3\">\"count\"</span>:<span class=\"fc2\">12</span>,\nÊ         <span class=\"fc3\">\"ranges\"</span>:{\nÊ           <span class=\"fc3\">\"manufacturedate_dt\"</span>:{\nÊ             <span class=\"fc3\">\"counts\"</span>:[\nÊ               <span class=\"fc1\">\"2006-01-01T00:00:00Z\"</span>,<span class=\"fc2\">9</span>,\nÊ               <span class=\"fc1\">\"2007-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2008-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2009-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2010-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2011-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2012-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2013-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ               <span class=\"fc1\">\"2014-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>],\nÊ             <span class=\"fc3\">\"gap\"</span>:<span class=\"fc1\">\"+1YEAR\"</span>,\nÊ             <span class=\"fc3\">\"start\"</span>:<span class=\"fc1\">\"2006-01-01T00:00:00Z\"</span>,\nÊ             <span class=\"fc3\">\"end\"</span>:<span class=\"fc1\">\"2015-01-01T00:00:00Z\"</span>}},\nÊ         <span class=\"fc3\">\"pivot\"</span>:[{\nÊ             <span class=\"fc3\">\"field\"</span>:<span class=\"fc1\">\"inStock\"</span>,\nÊ             <span class=\"fc3\">\"value\"</span>:<span class=\"fc4\">true</span>,\nÊ             <span class=\"fc3\">\"count\"</span>:<span class=\"fc2\">8</span>,\nÊ             <span class=\"fc3\">\"ranges\"</span>:{\nÊ               <span class=\"fc3\">\"manufacturedate_dt\"</span>:{\nÊ                 <span class=\"fc3\">\"counts\"</span>:[\nÊ                   <span class=\"fc1\">\"2006-01-01T00:00:00Z\"</span>,<span class=\"fc2\">6</span>,\nÊ                   <span class=\"fc1\">\"2007-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2008-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2009-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2010-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2011-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2012-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2013-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>,\nÊ                   <span class=\"fc1\">\"2014-01-01T00:00:00Z\"</span>,<span class=\"fc2\">0</span>],\nÊ                 <span class=\"fc3\">\"gap\"</span>:<span class=\"fc1\">\"+1YEAR\"</span>,\nÊ                 <span class=\"fc3\">\"start\"</span>:<span class=\"fc1\">\"2006-01-01T00:00:00Z\"</span>,",
    "hierarchy": [
    ],
    "pageId": 516
  },
  {
    "content": "Ê                 <span class=\"fc1\">\"end\"</span>:<span class=\"fc2\">\"2015-01-01T00:00:00Z\"</span>}}},\nÊ                 <span class=\"fc2\">\"...\"</span>]}]}}}",
    "hierarchy": [
    ],
    "pageId": 517
  },
  {
    "content": "Although <span class=\"ff1 fs2\">facet.pivot.mincount</span> deviates in name from the <span class=\"ff1 fs2\">facet.mincount</span> parameter used by field\nfaceting, many of the faceting parameters described above can also be used with pivot faceting:",
    "hierarchy": [
      "Additional Pivot Parameters"
    ],
    "pageId": 517
  },
  {
    "content": "\nfacet.limit",
    "hierarchy": [
      "Additional Pivot Parameters"
    ],
    "pageId": 517
  },
  {
    "content": "\nfacet.offset",
    "hierarchy": [
      "Additional Pivot Parameters"
    ],
    "pageId": 517
  },
  {
    "content": "\nfacet.sort",
    "hierarchy": [
      "Additional Pivot Parameters"
    ],
    "pageId": 517
  },
  {
    "content": "\nfacet.overrequest.count",
    "hierarchy": [
      "Additional Pivot Parameters"
    ],
    "pageId": 517
  },
  {
    "content": "\nfacet.overrequest.ratio",
    "hierarchy": [
      "Additional Pivot Parameters"
    ],
    "pageId": 517
  },
  {
    "content": "Another supported form of faceting is interval faceting. This sounds similar to range faceting, but the\nfunctionality is really closer to doing facet queries with range queries. Interval faceting allows you to set\nvariable intervals and count the number of documents that have values within those intervals in the\nspecified field.",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "Even though the same functionality can be achieved by using a facet query with range queries, the\nimplementation of these two methods is very different and will provide different performance depending on\nthe context.",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "If you are concerned about the performance of your searches you should test with both options. Interval\nfaceting tends to be better with multiple intervals for the same fields, while facet query tend to be better in\nenvironments where filter cache is more effective (static indexes for example).",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "This method will use <span class=\"link\">docValues</span> if they are enabled for the field, will use fieldCache otherwise.",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "Use these parameters for interval faceting:",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "facet.interval\nThis parameter Indicates the field where interval faceting must be applied. It can be used multiple times\nin the same request to indicate multiple fields.",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "facet.interval=price&facet.interval=size",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "facet.interval.set\nThis parameter is used to set the intervals for the field, it can be specified multiple times to indicate\nmultiple intervals. This parameter is global, which means that it will be used for all fields indicated with\nfacet.interval<span class=\"code\"> unless there is an override for a specific field. To override this parameter on a specific</span>\nfield you can use: <span class=\"ff1 fs2\">f.<fieldname>.facet.interval.set</span>, for example:",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "f.price.facet.interval.set=[0,10]&f.price.facet.interval.set=(10,100]",
    "hierarchy": [
      "Interval Faceting"
    ],
    "pageId": 517
  },
  {
    "content": "Intervals must begin with either '(' or '[', be followed by the start value, then a comma (','), the end value,\nand finally a closing ')' or ']'.",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "(1,10) -> will include values greater than 1 and lower than 10",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "[1,10) -> will include values greater or equal to 1 and lower than 10",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "[1,10] -> will include values greater or equal to 1 and lower or equal to 10",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "The initial and end values cannot be empty.",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "If the interval needs to be unbounded, the special character <span class=\"code\">*</span> can be used for both, start and end, limits.\nWhen using this special character, the start syntax options (<span class=\"code\">(</span> and <span class=\"code\">[</span>), and end syntax options (<span class=\"code\">)</span> and <span class=\"code\">]</span>) will be\ntreated the same. <span class=\"code\">[*,*]</span> will include all documents with a value in the field.",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "The interval limits may be strings but there is no need to add quotes. All the text until the comma will be\ntreated as the start limit, and the text after that will be the end limit. For example: <span class=\"code\">[Buenos Aires,New</span>\nYork]<span class=\"ff2 fs1\">. Keep in mind that a string-like comparison will be done to match documents in string intervals (case-</span>\nsensitive). The comparator can't be changed.",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "Commas, brackets and square brackets can be escaped by using <span class=\"code\">\\</span> in front of them. Whitespaces before and\nafter the values will be omitted.",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "The start limit can't be grater than the end limit. Equal limits are allowed, this allows you to indicate the\nspecific values that you want to count, like <span class=\"code\">[A,A]</span>, <span class=\"code\">[B,B]</span> and <span class=\"code\">[C,Z]</span>.",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "Interval faceting supports output key replacement described below. Output keys can be replaced in both the\nfacet.interval parameter<span class=\"ff2 fs1\"> and in the </span>facet.interval.set parameter<span class=\"ff2 fs1\">. For example:</span>",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "&facet.interval={!key=popularity}some_field\n&facet.interval.set={!key=bad}[0,5]\n&facet.interval.set={!key=good}[5,*]\n&facet=true",
    "hierarchy": [
      "Interval Syntax"
    ],
    "pageId": 518
  },
  {
    "content": "The <span class=\"link\">LocalParams syntax</span> allows overriding global settings. It can also provide a method of adding metadata\nto other parameter values, much like XML attributes.",
    "hierarchy": [
      "Local Parameters for Faceting"
    ],
    "pageId": 518
  },
  {
    "content": "You can tag specific filters and exclude those filters when faceting. This is useful when doing multi-select\nfaceting.",
    "hierarchy": [
      "Local Parameters for Faceting",
      "Tagging and Excluding Filters"
    ],
    "pageId": 518
  },
  {
    "content": "Consider the following example query with faceting:",
    "hierarchy": [
      "Local Parameters for Faceting",
      "Tagging and Excluding Filters"
    ],
    "pageId": 518
  },
  {
    "content": "q=mainquery&fq=status:public&fq=doctype:pdf&facet=true&facet.field=doctype",
    "hierarchy": [
      "Local Parameters for Faceting",
      "Tagging and Excluding Filters"
    ],
    "pageId": 518
  },
  {
    "content": "Because everything is already constrained by the filter <span class=\"ff2 fs1\">doctype:pdf</span>, the <span class=\"ff2 fs1\">facet.field=doctype</span> facet\ncommand is currently redundant and will return 0 counts for everything except <span class=\"ff2 fs1\">doctype:pdf</span>.",
    "hierarchy": [
    ],
    "pageId": 519
  },
  {
    "content": "To implement a multi-select facet for doctype, a GUI may want to still display the other doctype values and\ntheir associated counts, as if the <span class=\"ff2 fs1\">doctype:pdf</span> constraint had not yet been applied. For example:",
    "hierarchy": [
    ],
    "pageId": 519
  },
  {
    "content": "=== Document Type ===\nÊ [ ] Word (42)\nÊ [x] PDF  (96)\nÊ [ ] Excel(11)\nÊ [ ] HTML (63)",
    "hierarchy": [
    ],
    "pageId": 519
  },
  {
    "content": "To return counts for doctype values that are currently not selected, tag filters that directly constrain doctype,\nand exclude those filters when faceting on doctype.",
    "hierarchy": [
    ],
    "pageId": 519
  },
  {
    "content": "q=mainquery&fq=status:public&fq={!tag=dt}doctype:pdf&facet=true&facet.field={!ex=dt}doctype",
    "hierarchy": [
    ],
    "pageId": 519
  },
  {
    "content": "Filter exclusion is supported for all types of facets. Both the <span class=\"ff2 fs1\">tag</span> and <span class=\"ff2 fs1\">ex</span> local parameters may specify\nmultiple values by separating them with commas.",
    "hierarchy": [
    ],
    "pageId": 519
  },
  {
    "content": "To change the output key for a faceting command, specify a new name with the <span class=\"ff2 fs1\">key</span> local parameter. For\nexample:",
    "hierarchy": [
      "Changing the Output Key"
    ],
    "pageId": 519
  },
  {
    "content": "facet.field={!ex=dt key=mylabel}doctype",
    "hierarchy": [
      "Changing the Output Key"
    ],
    "pageId": 519
  },
  {
    "content": "The parameter setting above causes the field facet results for the \"doctype\" field to be returned using the\nkey \"mylabel\" rather than \"doctype\" in the response. This can be helpful when faceting on the same field\nmultiple times with different exclusions.",
    "hierarchy": [
      "Changing the Output Key"
    ],
    "pageId": 519
  },
  {
    "content": "To limit field facet with certain terms specify them comma separated with <span class=\"ff2 fs1\">terms</span> local parameter. Commas\nand quotes in terms can be escaped with backslash, as in <span class=\"ff2 fs1\">\\,</span>. In this case facet is calculated on a way similar\nto <span class=\"ff2 fs1\">facet.method=enum</span>, but ignores <span class=\"ff2 fs1\">facet.enum.cache.minDf</span>. For example:",
    "hierarchy": [
      "Limiting Facet with Certain Terms"
    ],
    "pageId": 519
  },
  {
    "content": "facet.field={!terms='alfa,betta,with\\,with\\',with space'}symbol",
    "hierarchy": [
      "Limiting Facet with Certain Terms"
    ],
    "pageId": 519
  },
  {
    "content": "See also <span class=\"link\">Heatmap Faceting (Spatial)</span>.",
    "hierarchy": [
      "Related Topics"
    ],
    "pageId": 519
  },
  {
    "content": "BlockJoin facets allow you to aggregate children facet counts by their parents.",
    "hierarchy": [
      "BlockJoin Faceting"
    ],
    "pageId": 519
  },
  {
    "content": "It is a common requirement that if a parent document has several children documents, all of them need to\nincrement facet value count only once. This functionality is provided by <span class=\"ff2 fs1\">BlockJoinDocSetFacetComponent</span>,\nand <span class=\"ff2 fs1\">BlockJoinFacetComponent</span> just an alias for compatibility.",
    "hierarchy": [
      "BlockJoin Faceting"
    ],
    "pageId": 519
  },
  {
    "content": "This component is considered experimental, and must be explicitly enabled for a request\nhandler in <span class=\"code\">solrconfig.xml</span>, in the same way as any other <span class=\"link\">search component</span>.",
    "hierarchy": [
    ],
    "pageId": 520
  },
  {
    "content": "This example shows how you could add this search components to <span class=\"code\">solrconfig.xml</span> and define it in request\nhandler:",
    "hierarchy": [
    ],
    "pageId": 520
  },
  {
    "content": "Ê <span class=\"fc3\"><searchComponent</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"bjqFacetComponent\"</span> <span class=\"fc4\">class</span>=",
    "hierarchy": [
    ],
    "pageId": 520
  },
  {
    "content": "Ê  <span class=\"fc3\"><requestHandler</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"/bjqfacet\"</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"org.apache.solr.handler.component.SearchHandler\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"shards.qt\"<span class=\"fc3\">></span></span>/bjqfacet<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"></lst></span>\nÊ   <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"last-components\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><str></span>bjqFacetComponent<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"></arr></span>\nÊ <span class=\"fc3\"></requestHandler></span>",
    "hierarchy": [
    ],
    "pageId": 520
  },
  {
    "content": "This component can be added into any search request handler. This component work with distributed\nsearch in SolrCloud mode.",
    "hierarchy": [
    ],
    "pageId": 520
  },
  {
    "content": "Documents should be added in children-parent blocks as described in <span class=\"link\">indexing nested child documents</span>.\nExamples:",
    "hierarchy": [
    ],
    "pageId": 520
  },
  {
    "content": "Ê <span class=\"fc1\"><doc></span>\nÊ   <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"type_s\"<span class=\"fc1\">></span></span>parent<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>11<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"COLOR_s\"<span class=\"fc1\">></span></span>Red<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"SIZE_s\"<span class=\"fc1\">></span></span>XL<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"PRICE_i\"<span class=\"fc1\">></span></span>6<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>12<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"COLOR_s\"<span class=\"fc1\">></span></span>Red<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"SIZE_s\"<span class=\"fc1\">></span></span>XL<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"PRICE_i\"<span class=\"fc1\">></span></span>7<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>13<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"COLOR_s\"<span class=\"fc1\">></span></span>Blue<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"SIZE_s\"<span class=\"fc1\">></span></span>L<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"PRICE_i\"<span class=\"fc1\">></span></span>5<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ <span class=\"fc1\"></doc></span>\nÊ <span class=\"fc1\"><doc></span>\nÊ   <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>2<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"type_s\"<span class=\"fc1\">></span></span>parent<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>21<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"COLOR_s\"<span class=\"fc1\">></span></span>Blue<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"SIZE_s\"<span class=\"fc1\">></span></span>XL<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"PRICE_i\"<span class=\"fc1\">></span></span>6<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>22<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"COLOR_s\"<span class=\"fc1\">></span></span>Blue<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"SIZE_s\"<span class=\"fc1\">></span></span>XL<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"PRICE_i\"<span class=\"fc1\">></span></span>7<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc1\">></span></span>23<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"COLOR_s\"<span class=\"fc1\">></span></span>Red<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"SIZE_s\"<span class=\"fc1\">></span></span>L<span class=\"fc1\"></field></span>\nÊ     <span class=\"fc1\"><field</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"PRICE_i\"<span class=\"fc1\">></span></span>5<span class=\"fc1\"></field></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ <span class=\"fc1\"></doc></span>",
    "hierarchy": [
    ],
    "pageId": 521
  },
  {
    "content": "Queries are constructed the same way as for a <span class=\"link\">Parent Block Join query</span>. For example:",
    "hierarchy": [
    ],
    "pageId": 521
  },
  {
    "content": "http://localhost:8983/solr/bjqfacet?q={!parent\nwhich=type_s:parent}SIZE_s:XL&child.facet.field=COLOR_s",
    "hierarchy": [
    ],
    "pageId": 522
  },
  {
    "content": "As a result we should have facets for Red(1) and Blue(1), because matches on children <span class=\"ff1 fs1\">id=11</span> and <span class=\"ff1 fs1\">id=12</span> are\naggregated into single hit into parent with <span class=\"ff1 fs1\">id=1</span>.",
    "hierarchy": [
    ],
    "pageId": 522
  },
  {
    "content": "The key components of the request shown above are:",
    "hierarchy": [
    ],
    "pageId": 522
  },
  {
    "content": "/bjqfacet?\nThe name of the request handler that has been defined with a block join facet component enabled.",
    "hierarchy": [
    ],
    "pageId": 522
  },
  {
    "content": "q={!parent which=type_s:parent}SIZE_s:XL\nThe mandatory parent query as a main query. The parent query could also be a subordinate clause in a\nmore complex query.",
    "hierarchy": [
    ],
    "pageId": 522
  },
  {
    "content": "&child.facet.field=COLOR_s\nThe child document field, which might be repeated many times with several fields, as necessary.",
    "hierarchy": [
    ],
    "pageId": 522
  },
  {
    "content": "Highlighting in Solr allows fragments of documents that match the user's query to be included with the\nquery response.",
    "hierarchy": [
      "Highlighting"
    ],
    "pageId": 523
  },
  {
    "content": "The fragments are included in a special section of the query response (the <span class=\"code\">highlighting</span> section), and the\nclient uses the formatting clues also included to determine how to present the snippets to users. Fragments\nare a portion of a document field that contains matches from the query and are sometimes also referred to\nas \"snippets\" or \"passages\".",
    "hierarchy": [
      "Highlighting"
    ],
    "pageId": 523
  },
  {
    "content": "Highlighting is extremely configurable, perhaps more than any other part of Solr. There are many\nparameters each for fragment sizing, formatting, ordering, backup/alternate behavior, and more options\nthat are hard to categorize. Nonetheless, highlighting is very simple to use.",
    "hierarchy": [
      "Highlighting"
    ],
    "pageId": 523
  },
  {
    "content": "You only need to set the <span class=\"code\">hl</span> and often <span class=\"code\">hl.fl</span> parameters to get results. The following table documents these\nand some other supported parameters. Note that many highlighting parameters support per-field overrides,\nsuch as: <span class=\"code\">f.title_txt.hl.snippets</span>",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "hl\nUse this parameter to enable or disable highlighting. The default is <span class=\"code\">false</span>. If you want to use highlighting,\nyou must set this to <span class=\"code\">true</span>.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "hl.method\nThe highlighting implementation to use. Acceptable values are: <span class=\"code\">unified</span>, <span class=\"code\">original</span>, <span class=\"code\">fastVector</span>. The\ndefault is <span class=\"code\">original</span>.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "See the <span class=\"link\">Choosing a Highlighter</span> section below for more details on the differences between the available\nhighlighters.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "hl.fl\nSpecifies a list of fields to highlight. Accepts a comma- or space-delimited list of fields for which Solr\nshould generate highlighted snippets.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "A wildcard of <span class=\"code\">*</span> (asterisk) can be used to match field globs, such as <span class=\"code\">text_*</span> or even <span class=\"code\">*</span> to highlight on all\nfields where highlighting is possible. When using <span class=\"code\">*</span>, consider adding <span class=\"code\">hl.requireFieldMatch=true</span>.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "When not defined, the defaults defined for the <span class=\"code\">df</span> query parameter will be used.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "hl.q\nA query to use for highlighting. This parameter allows you to highlight different terms than those being\nused to retrieve documents.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "When not defined, the query defined with the <span class=\"code\">q</span> parameter will the used.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "hl.qparser\nThe query parser to use for the <span class=\"code\">hl.q</span> query.",
    "hierarchy": [
      "Highlighting",
      "Usage",
      "Common Highlighter Parameters"
    ],
    "pageId": 523
  },
  {
    "content": "When not defined, the query parser defined with the <span class=\"ff2 fs1\">defType</span> query parameter will be used.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.requireFieldMatch\nBy default, <span class=\"ff2 fs1\">false</span>, all query terms will be highlighted for each field to be highlighted (<span class=\"ff2 fs1\">hl.fl</span>) no matter\nwhat fields the parsed query refer to. If set to <span class=\"ff2 fs1\">true</span>, only query terms aligning with the field being\nhighlighted will in turn be highlighted.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "If the query references fields different from the field being highlighted and they have different text\nanalysis, the query may not highlight query terms it should have and vice versa. The analysis used is that\nof the field being highlighted (<span class=\"ff2 fs1\">hl.fl</span>), not the query fields.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.usePhraseHighlighter\nIf set to <span class=\"ff2 fs1\">true</span>, the default, Solr will highlight phrase queries (and other advanced position-sensitive\nqueries) accurately – as phrases. If <span class=\"ff2 fs1\">false</span>, the parts of the phrase will be highlighted everywhere instead\nof only when it forms the given phrase.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.highlightMultiTerm\nIf set to <span class=\"ff2 fs1\">true</span>, the default, Solr will highlight wildcard queries (and other <span class=\"ff2 fs1\">MultiTermQuery</span> subclasses). If\nfalse<span class=\"ff1 fs0\">, they won't be highlighted at all.</span>",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.snippets\nSpecifies maximum number of highlighted snippets to generate per field. It is possible for any number of\nsnippets from zero to this value to be generated. The default is <span class=\"ff2 fs1\">1</span>.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.fragsize\nSpecifies the approximate size, in characters, of fragments to consider for highlighting. The default is <span class=\"ff2 fs1\">100</span>.\nUsing <span class=\"ff2 fs1\">0</span> indicates that no fragmenting should be considered and the whole field value should be used.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.tag.pre\n(<span class=\"ff2 fs1\">hl.simple.pre</span> for the Original Highlighter) Specifies the “tag” to use before a highlighted term. This\ncan be any string, but is most often an HTML or XML tag.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "The default is <span class=\"ff2 fs1\"><em></span>.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.tag.post\n(<span class=\"ff2 fs1\">hl.simple.post</span> for the Original Highlighter) Specifies the “tag” to use after a highlighted term. This can\nbe any string, but is most often an HTML or XML tag.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "The default is <span class=\"ff2 fs1\"></em></span>.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.encoder\nIf blank, the default, then the stored text will be returned without any escaping/encoding performed by\nthe highlighter. If set to <span class=\"ff2 fs1\">html</span> then special HMTL/XML characters will be encoded (e.g., <span class=\"ff2 fs1\">&</span> becomes <span class=\"ff2 fs1\">&amp;</span>).\nThe pre/post snippet characters are never encoded.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "hl.maxAnalyzedChars\nThe character limit to look for highlights, after which no highlighting will be done. This is mostly only a\nperformance concern for an <span class=\"code\">analysis</span> based offset source since it's the slowest. See <span class=\"link\">Schema Options and</span>\nPerformance Considerations<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "The default is <span class=\"ff2 fs1\">51200</span> characters.",
    "hierarchy": [
    ],
    "pageId": 524
  },
  {
    "content": "There are more parameters supported as well depending on the highlighter (via <span class=\"ff2 fs1\">hl.method</span>) chosen.",
    "hierarchy": [
    ],
    "pageId": 525
  },
  {
    "content": "In the response to a query, Solr includes highlighting data in a section separate from the documents. It is up\nto a client to determine how to process this response and display the highlights to users.",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "Using the example documents included with Solr, we can see how this might work:",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "In response to a query such as:",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?hl=on&q=apple&hl.fl=manu&fl=id,name,manu,cat",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "we get a response such as this (truncated slightly for space):",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"response\"</span>: {\nÊ   <span class=\"fc2\">\"numFound\"</span>: <span class=\"fc3\">1</span>,\nÊ   <span class=\"fc2\">\"start\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"docs\"</span>: [{\nÊ     <span class=\"fc2\">\"id\"</span>: <span class=\"fc4\">\"MA147LL/A\"</span>,\nÊ     <span class=\"fc2\">\"name\"</span>: <span class=\"fc4\">\"Apple 60 GB iPod with Video Playback Black\"</span>,\nÊ     <span class=\"fc2\">\"manu\"</span>: <span class=\"fc4\">\"Apple Computer Inc.\"</span>,\nÊ     <span class=\"fc2\">\"cat\"</span>: [\nÊ       <span class=\"fc4\">\"electronics\"</span>,\nÊ       <span class=\"fc4\">\"music\"</span>\nÊ     ]\nÊ   }]\nÊ },\nÊ <span class=\"fc2\">\"highlighting\"</span>: {\nÊ   <span class=\"fc2\">\"MA147LL/A\"</span>: {\nÊ     <span class=\"fc2\">\"manu\"</span>: [\nÊ       <span class=\"fc4\">\"<em>Apple</em> Computer Inc.\"</span>\nÊ     ]\nÊ   }\nÊ }\n}",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "Note the two sections <span class=\"ff2 fs1\">docs</span> and <span class=\"ff2 fs1\">highlighting</span>. The <span class=\"ff2 fs1\">docs</span> section contains the fields of the document\nrequested with the <span class=\"ff2 fs1\">fl</span> parameter of the query (only \"id\", \"name\", \"manu\", and \"cat\").",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "The <span class=\"ff2 fs1\">highlighting</span> section includes the ID of each document, and the field that contains the highlighted\nportion. In this example, we used the <span class=\"ff2 fs1\">hl.fl</span> parameter to say we wanted query terms highlighted in the\n\"manu\" field. When there is a match to the query term in that field, it will be included for each document ID\nin the list.",
    "hierarchy": [
      "Highlighting in the Query Response"
    ],
    "pageId": 525
  },
  {
    "content": "Solr provides a <span class=\"ff2 fs1\">HighlightComponent</span> (a <span class=\"ff2 fs1\">SearchComponent</span>) and it's in the default list of components for",
    "hierarchy": [
      "Choosing a Highlighter"
    ],
    "pageId": 525
  },
  {
    "content": "search handlers. It offers a somewhat unified API over multiple actual highlighting implementations (or\nsimply \"highlighters\") that do the business of highlighting.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "There are many parameters supported by more than one highlighter, and sometimes the implementation\ndetails and semantics will be a bit different, so don't expect identical results when switching highlighters.\nYou should use the <span class=\"ff2 fs1\">hl.method</span> parameter to choose a highlighter but it’s also possible to explicitly configure\nan implementation by class name in <span class=\"ff2 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "There are four highlighters available that can be chosen at runtime with the <span class=\"ff2 fs1\">hl.method</span> parameter, in order\nof general recommendation:",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "Unified Highlighter\n(<span class=\"ff2 fs1\">hl.method=unified</span>)",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "The Unified Highlighter is the newest highlighter (as of Solr 6.4), which stands out as the most flexible\nand performant of the options. We recommend that you try this highlighter even though it isn't the\ndefault (yet).",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "This highlighter supports the most common highlighting parameters and can handle just about any\nquery accurately, even SpanQueries (e.g., as seen from the <span class=\"ff2 fs1\">surround</span> parser). A strong benefit to this\nhighlighter is that you can opt to configure Solr to put more information in the underlying index to speed\nup highlighting of large documents; multiple configurations are supported, even on a per-field basis.\nThere is little or no such flexibility for the other highlighters. More on this below.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "Original Highlighter\n(<span class=\"ff2 fs1\">hl.method=original</span>, the default)",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "The Original Highlighter, sometimes called the \"Standard Highlighter\" or \"Default Highlighter\", is\nLucene's original highlighter – a venerable option with a high degree of customization options. Its ability\nto highlight just about any query accurately is a strength shared with the Unified Highlighter (they share\nsome code for this in fact).",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "The Original Highlighter will normally analyze stored text on the fly in order to highlight. It will use full\nterm vectors if available, however in this mode it isn't as fast as the Unified Highlighter or FastVector\nHighlighter.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "This highlighter is a good choice for a wide variety of search use-cases. Where it falls short is\nperformance; it's often twice as slow as the Unified Highlighter. And despite being the most\ncustomizable, it doesn’t have a BreakIterator based fragmenter (all the others do), which could pose a\nchallenge for some languages.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "FastVector Highlighter\n(<span class=\"ff2 fs1\">hl.method=fastVector</span>)",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "The FastVector Highlighter <span class=\"ff4\">requires</span> full term vector options (<span class=\"ff2 fs1\">termVectors</span>, <span class=\"ff2 fs1\">termPositions</span>, and\ntermOffsets<span class=\"ff1 fs0\">) on the field, and is optimized with that in mind. It is nearly as configurable as the Original</span>\nHighlighter with some variability.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "This highlighter notably supports multi-colored highlighting such that different query words can be\ndenoted in the fragment with different marking, usually expressed as an HTML tag with a unique color.",
    "hierarchy": [
    ],
    "pageId": 526
  },
  {
    "content": "This highlighter's query-representation is less advanced than the Original or Unified Highlighters: for\nexample it will not work well with the <span class=\"ff2 fs1\">surround</span> parser, and there are multiple reported bugs pertaining\nto queries with stop-words.",
    "hierarchy": [
    ],
    "pageId": 527
  },
  {
    "content": "Note that both the FastVector and Original Highlighters can be used in conjunction in a search request to\nhighlight some fields with one and some the other. In contrast, the other highlighters can only be chosen\nexclusively.",
    "hierarchy": [
    ],
    "pageId": 527
  },
  {
    "content": "The Unified Highlighter is exclusively configured via search parameters. In contrast, some settings for the\nOriginal and FastVector Highlighters are set in <span class=\"ff2 fs1\">solrconfig.xml</span>. There's a robust example of the latter in the\n“<span class=\"ff2 fs1\">techproducts</span>” configset.",
    "hierarchy": [
    ],
    "pageId": 527
  },
  {
    "content": "In addition to further information below, more information can be found in the <span class=\"link\">Solr javadocs</span>.",
    "hierarchy": [
    ],
    "pageId": 527
  },
  {
    "content": "Fundamental to the internals of highlighting are detecting the <span class=\"ff4\">offsets</span> of the individual words that match the\nquery. Some of the highlighters can run the stored text through the analysis chain defined in the schema,\nsome can look them up from <span class=\"ff4\">postings</span>, and some can look them up from <span class=\"ff4\">term vectors.</span> These choices have\ndifferent trade-offs:",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "Analysis<span class=\"ff1\">: Supported by the Unified and Original Highlighters. If you don't go out of your way to</span>\nconfigure the other options below, the highlighter will analyze the stored text on the fly (during\nhighlighting) to calculate offsets.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "The benefit of this approach is that your index won't grow larger with any extra data that isn’t strictly\nnecessary for highlighting.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "The down side is that highlighting speed is roughly linear with the amount of text to process, with a large\nfactor being the complexity of your analysis chain.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "For \"short\" text, this is a good choice. Or maybe it's not short but you’re prioritizing a smaller index and\nindexing speed over highlighting performance.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "Postings<span class=\"ff1\">: Supported by the Unified Highlighter. Set <span class=\"ff2 fs1\">storeOffsetsWithPositions</span> to <span class=\"ff2 fs1\">true</span>. This adds a</span>\nmoderate amount of extra data to the index but it speeds up highlighting tremendously, especially\ncompared to analysis with longer text fields.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "However, wildcard queries will fall back to analysis unless \"light\" term vectors are added.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "◦with Term Vectors (light)<span class=\"ff1\">: Supported only by the Unified Highlighter. To enable this mode set</span>\ntermVectors<span class=\"ff1 fs0\"> to </span>true<span class=\"ff1 fs0\"> but no other term vector related options on the field being highlighted.</span>",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "This adds even more data to the index than just <span class=\"ff2 fs1\">storeOffsetsWithPositions</span> but not as much as\nenabling all the extra term vector options. Term Vectors are only accessed by the highlighter when a\nwildcard query is used and will prevent a fall back to analysis of the stored text.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "This is definitely the fastest option for highlighting wildcard queries on large text fields.",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "Term Vectors (full)<span class=\"ff1\">: Supported by the Unified, FastVector, and Original Highlighters. Set <span class=\"ff2 fs1\">termVectors</span>,</span>\ntermPositions<span class=\"ff1 fs0\">, and </span>termOffsets<span class=\"ff1 fs0\"> to </span>true<span class=\"ff1 fs0\">, and potentially </span>termPayloads<span class=\"ff1 fs0\"> for advanced use cases.</span>",
    "hierarchy": [
      "Schema Options and Performance Considerations"
    ],
    "pageId": 527
  },
  {
    "content": "This adds substantial weight to the index – similar in size to the compressed stored text. If you are using\nthe Unified Highlighter then this is not a recommended configuration since it's slower and heavier than\npostings with light term vectors. However, this could make sense if full term vectors are already needed\nfor another use-case.",
    "hierarchy": [
    ],
    "pageId": 528
  },
  {
    "content": "The Unified Highlighter supports these following additional parameters to the ones listed earlier:",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.offsetSource\nBy default, the Unified Highlighter will usually pick the right offset source (see above). However it may be\nambiguous such as during a migration from one offset source to another that hasn't completed.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "The offset source can be explicitly configured to one of: <span class=\"code\">ANALYSIS</span>, <span class=\"code\">POSTINGS</span>,\nPOSTINGS_WITH_TERM_VECTORS<span class=\"ff1 fs0\">, or </span>TERM_VECTORS<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.tag.ellipsis\nBy default, each snippet is returned as a separate value (as is done with the other highlighters). Set this\nparameter to instead return one string with this text as the delimiter. <span class=\"ff4\">Note: this is likely to be removed in</span>",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.defaultSummary\nIf <span class=\"code\">true</span>, use the leading portion of the text as a snippet if a proper highlighted snippet can't otherwise be\ngenerated. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.score.k1\nSpecifies BM25 term frequency normalization parameter 'k1'. For example, it can be set to <span class=\"code\">0</span> to rank\npassages solely based on the number of query terms that match. The default is <span class=\"code\">1.2</span>.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.score.b\nSpecifies BM25 length normalization parameter 'b'. For example, it can be set to \"0\" to ignore the length\nof passages entirely when ranking. The default is <span class=\"code\">0.75</span>.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.score.pivot\nSpecifies BM25 average passage length in characters. The default is <span class=\"code\">87</span>.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.bs.language\nSpecifies the breakiterator language for dividing the document into passages.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.bs.country\nSpecifies the breakiterator country for dividing the document into passages.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.bs.variant\nSpecifies the breakiterator variant for dividing the document into passages.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.bs.type\nSpecifies the breakiterator type for dividing the document into passages. Can be <span class=\"code\">SEPARATOR</span>, <span class=\"code\">SENTENCE</span>,\nWORD<span class=\"ff1 fs0\">*, </span>CHARACTER<span class=\"ff1 fs0\">, </span>LINE<span class=\"ff1 fs0\">, or </span>WHOLE<span class=\"ff1 fs0\">. </span>SEPARATOR<span class=\"ff1 fs0\"> is special value that splits text on a user-provided character</span>\nin <span class=\"code\">hl.bs.separator</span>.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "The default is <span class=\"code\">SENTENCE</span>.",
    "hierarchy": [
      "The Unified Highlighter"
    ],
    "pageId": 528
  },
  {
    "content": "hl.bs.separator\nIndicates which character to break the text on. Use only if you have defined <span class=\"ff1 fs0\">hl.bs.type=SEPARATOR</span>.",
    "hierarchy": [
    ],
    "pageId": 529
  },
  {
    "content": "This is useful when the text has already been manipulated in advance to have a special delineation\ncharacter at desired highlight passage boundaries. This character will still appear in the text as the last\ncharacter of a passage.",
    "hierarchy": [
    ],
    "pageId": 529
  },
  {
    "content": "The Original Highlighter supports these following additional parameters to the ones listed earlier:",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.mergeContiguous\nInstructs Solr to collapse contiguous fragments into a single fragment. A value of <span class=\"ff1 fs0\">true</span> indicates\ncontiguous fragments will be collapsed into single fragment. The default value, <span class=\"ff1 fs0\">false</span>, is also the\nbackward-compatible setting.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.maxMultiValuedToExamine\nSpecifies the maximum number of entries in a multi-valued field to examine before stopping. This can\npotentially return zero results if the limit is reached before any matches are found.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "If used with the <span class=\"ff1 fs0\">maxMultiValuedToMatch</span>, whichever limit is reached first will determine when to stop\nlooking.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "The default is <span class=\"ff1 fs0\">Integer.MAX_VALUE</span>.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.maxMultiValuedToMatch\nSpecifies the maximum number of matches in a multi-valued field that are found before stopping.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "If <span class=\"ff1 fs0\">hl.maxMultiValuedToExamine</span> is also defined, whichever limit is reached first will determine when to\nstop looking.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "The default is <span class=\"ff1 fs0\">Integer.MAX_VALUE</span>.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.alternateField\nSpecifies a field to be used as a backup default summary if Solr cannot generate a snippet (i.e., because\nno terms match).",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.maxAlternateFieldLength\nSpecifies the maximum number of characters of the field to return. Any value less than or equal to <span class=\"ff1 fs0\">0</span>\nmeans the field's length is unlimited (the default behavior).",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "This parameter is only used in conjunction with the <span class=\"ff1 fs0\">hl.alternateField</span> parameter.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.highlightAlternate\nIf set to <span class=\"ff1 fs0\">true</span>, the default, and <span class=\"ff1 fs0\">hl.alternateFieldName</span> is active, Solr will show the entire alternate field,\nwith highlighting of occurrences. If <span class=\"ff1 fs0\">hl.maxAlternateFieldLength=N</span> is used, Solr returns max <span class=\"ff1 fs0\">N</span>\ncharacters surrounding the best matching fragment.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "If set to <span class=\"ff1 fs0\">false</span>, or if there is no match in the alternate field either, the alternate field will be shown without\nhighlighting.",
    "hierarchy": [
      "The Original Highlighter"
    ],
    "pageId": 529
  },
  {
    "content": "hl.formatter\nSelects a formatter for the highlighted output. Currently the only legal value is <span class=\"ff1 fs0\">simple</span>, which surrounds a\nhighlighted term with a customizable pre- and post-text snippet.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.simple.pre<span class=\"code\">, </span>hl.simple.post\nSpecifies the text that should appear before (<span class=\"ff1 fs0\">hl.simple.pre</span>) and after (<span class=\"ff1 fs0\">hl.simple.post</span>) a highlighted\nterm, when using the <span class=\"ff1 fs0\">simple</span> formatter. The default is <span class=\"ff1 fs0\"><em></span> and <span class=\"ff1 fs0\"></em></span>.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.fragmenter\nSpecifies a text snippet generator for highlighted text. The standard (default) fragmenter is <span class=\"ff1 fs0\">gap</span>, which\ncreates fixed-sized fragments with gaps for multi-valued fields.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "Another option is <span class=\"ff1 fs0\">regex</span>, which tries to create fragments that resemble a specified regular expression.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.regex.slop\nWhen using the regex fragmenter (<span class=\"ff1 fs0\">hl.fragmenter=regex</span>), this parameter defines the factor by which the\nfragmenter can stray from the ideal fragment size (given by <span class=\"ff1 fs0\">hl.fragsize</span>) to accommodate a regular\nexpression.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "For instance, a slop of <span class=\"ff1 fs0\">0.2</span> with <span class=\"ff1 fs0\">hl.fragsize=100</span> should yield fragments between 80 and 120 characters\nin length. It is usually good to provide a slightly smaller <span class=\"ff1 fs0\">hl.fragsize</span> value when using the regex\nfragmenter.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "The default is <span class=\"ff1 fs0\">0.6</span>.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.regex.pattern\nSpecifies the regular expression for fragmenting. This could be used to extract sentences.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.regex.maxAnalyzedChars\nInstructs Solr to analyze only this many characters from a field when using the regex fragmenter (after\nwhich, the fragmenter produces fixed-sized fragments). The default is <span class=\"ff1 fs0\">10000</span>.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "Note, applying a complicated regex to a huge field is computationally expensive.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.preserveMulti\nIf <span class=\"ff1 fs0\">true</span>, multi-valued fields will return all values in the order they were saved in the index. If <span class=\"ff1 fs0\">false</span>, the\ndefault, only values that match the highlight request will be returned.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "hl.payloads\nWhen <span class=\"ff1 fs0\">hl.usePhraseHighlighter</span> is <span class=\"ff1 fs0\">true</span> and the indexed field has payloads but not term vectors\n(generally quite rare), the index's payloads will be read into the highlighter’s memory index along with\nthe postings.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "If this may happen and you know you don't need them for highlighting (i.e., your queries don’t filter by\npayload) then you can save a little memory by setting this to false.",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "The Original Highlighter has a plugin architecture that enables new functionality to be registered in\nsolrconfig.xml<span class=\"ff2 fs1\">. The “</span>techproducts<span class=\"ff2 fs1\">” configset shows most of these settings explicitly. You can use it as a</span>\nguide to provide your own components to include a <span class=\"ff1 fs0\">SolrFormatter</span>, <span class=\"ff1 fs0\">SolrEncoder</span>, and <span class=\"ff1 fs0\">SolrFragmenter.</span>",
    "hierarchy": [
    ],
    "pageId": 530
  },
  {
    "content": "The FastVector Highlighter (FVH) can be used in conjunction with the Original Highlighter if not all fields\nshould be highlighted with the FVH. In such a mode, set <span class=\"code\">hl.method=original</span> and\nf.yourTermVecField.hl.method=fastVector<span class=\"ff2 fs1\"> for all fields that should use the FVH. One annoyance to keep</span>\nin mind is that the Original Highlighter uses <span class=\"code\">hl.simple.pre</span> whereas the FVH (and other highlighters) use\nhl.tag.pre<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "In addition to the initial listed parameters, the following parameters documented for the Original\nHighlighter above are also supported by the FVH:",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "\nhl.alternateField",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "\nhl.maxAlternateFieldLength",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "\nhl.highlightAlternate",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "And here are additional parameters supported by the FVH:",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "hl.fragListBuilder\nThe snippet fragmenting algorithm. The <span class=\"code\">weighted</span> fragListBuilder uses IDF-weights to order fragments.\nThis fragListBuilder is the default.",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "Other options are <span class=\"code\">single</span>, which returns the entire field contents as one snippet, or <span class=\"code\">simple</span>. You can\nselect a fragListBuilder with this parameter, or modify an existing implementation in <span class=\"code\">solrconfig.xml</span> to\nbe the default by adding \"default=true\".",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "hl.fragmentsBuilder\nThe fragments builder is responsible for formatting the fragments, which uses <span class=\"code\"><em></span> and <span class=\"code\"></em></span> markup by\ndefault (if <span class=\"code\">hl.tag.pre</span> and <span class=\"code\">hl.tag.post</span> are not defined).",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "Another pre-configured choice is <span class=\"code\">colored</span>, which is an example of how to use the fragments builder to\ninsert HTML into the snippets for colored highlights if you choose. You can also implement your own if\nyou'd like. You can select a fragments builder with this parameter, or modify an existing implementation\nin <span class=\"code\">solrconfig.xml</span> to be the default by adding \"default=true\".",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "hl.boundaryScanner\nSee <span class=\"link\">Using Boundary Scanners with the FastVector Highlighter</span> below.",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "hl.bs.*\nSee <span class=\"link\">Using Boundary Scanners with the FastVector Highlighter</span> below.",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "hl.phraseLimit\nThe maximum number of phrases to analyze when searching for the highest-scoring phrase. The default\nis <span class=\"code\">5000</span>.",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "hl.multiValuedSeparatorChar\nText to use to separate one value from the next for a multi-valued field. The default is \" \" (a space).",
    "hierarchy": [
      "The FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "The FastVector Highlighter will occasionally truncate highlighted words. To prevent this, implement a\nboundary scanner in <span class=\"code\">solrconfig.xml</span>, then use the <span class=\"code\">hl.boundaryScanner</span> parameter to specify the boundary",
    "hierarchy": [
      "The FastVector Highlighter",
      "Using Boundary Scanners with the FastVector Highlighter"
    ],
    "pageId": 531
  },
  {
    "content": "scanner for highlighting.",
    "hierarchy": [
    ],
    "pageId": 532
  },
  {
    "content": "Solr supports two boundary scanners: <span class=\"ff2 fs1\">breakIterator</span> and <span class=\"ff2 fs1\">simple</span>.",
    "hierarchy": [
    ],
    "pageId": 532
  },
  {
    "content": "The <span class=\"ff2 fs1\">breakIterator</span> boundary scanner offers excellent performance right out of the box by taking locale and\nboundary type into account. In most cases you will want to use the <span class=\"ff2 fs1\">breakIterator</span> boundary scanner. To\nimplement the <span class=\"ff2 fs1\">breakIterator</span> boundary scanner, add this code to the <span class=\"ff2 fs1\">highlighting</span> section of your\nsolrconfig.xml<span class=\"ff1 fs0\"> file, adjusting the type, language, and country values as appropriate to your application:</span>",
    "hierarchy": [
      "The breakIterator Boundary Scanner"
    ],
    "pageId": 532
  },
  {
    "content": "Ê  <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ    <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"hl.bs.type\"<span class=\"fc2\">></span></span>WORD<span class=\"fc2\"></str></span>\nÊ    <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"hl.bs.language\"<span class=\"fc2\">></span></span>en<span class=\"fc2\"></str></span>\nÊ    <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"hl.bs.country\"<span class=\"fc2\">></span></span>US<span class=\"fc2\"></str></span>\nÊ  <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "The breakIterator Boundary Scanner"
    ],
    "pageId": 532
  },
  {
    "content": "Possible values for the <span class=\"ff2 fs1\">hl.bs.type</span> parameter are WORD, LINE, SENTENCE, and CHARACTER.",
    "hierarchy": [
      "The breakIterator Boundary Scanner"
    ],
    "pageId": 532
  },
  {
    "content": "The <span class=\"ff2 fs1\">simple</span> boundary scanner scans term boundaries for a specified maximum character value\n(<span class=\"ff2 fs1\">hl.bs.maxScan</span>) and for common delimiters such as punctuation marks (<span class=\"ff2 fs1\">hl.bs.chars</span>). To implement the\nsimple<span class=\"ff1 fs0\"> boundary scanner, add this code to the </span>highlighting<span class=\"ff1 fs0\"> section of your </span>solrconfig.xml<span class=\"ff1 fs0\"> file, adjusting</span>\nthe values as appropriate to your application:",
    "hierarchy": [
      "The simple Boundary Scanner"
    ],
    "pageId": 532
  },
  {
    "content": "Ê  <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ    <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"hl.bs.maxScan\"<span class=\"fc2\">></span></span>10<span class=\"fc2\"></str></span>\nÊ    <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"hl.bs.chars\"<span class=\"fc2\">></span></span>.,!?\\t\\n<span class=\"fc2\"></str></span>\nÊ  <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "The simple Boundary Scanner"
    ],
    "pageId": 532
  },
  {
    "content": "The SpellCheck component is designed to provide inline query suggestions based on other, similar, terms.",
    "hierarchy": [
      "Spell Checking"
    ],
    "pageId": 533
  },
  {
    "content": "The basis for these suggestions can be terms in a field in Solr, externally created text files, or fields in other\nLucene indexes.",
    "hierarchy": [
      "Spell Checking"
    ],
    "pageId": 533
  },
  {
    "content": "The first step is to specify the source of terms in <span class=\"code\">solrconfig.xml</span>. There are three approaches to spell\nchecking in Solr, discussed below.",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml"
    ],
    "pageId": 533
  },
  {
    "content": "The <span class=\"code\">IndexBasedSpellChecker</span> uses a Solr index as the basis for a parallel index used for spell checking. It\nrequires defining a field as the basis for the index terms; a common practice is to copy terms from some\nfields (such as <span class=\"code\">title</span>, <span class=\"code\">body</span>, etc.) to another field created for spell checking. Here is a simple example of\nconfiguring <span class=\"code\">solrconfig.xml</span> with the <span class=\"code\">IndexBasedSpellChecker</span>:",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml",
      "IndexBasedSpellChecker"
    ],
    "pageId": 533
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"spellchecker\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"classname\"<span class=\"fc2\">></span></span>solr.IndexBasedSpellChecker<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"spellcheckIndexDir\"<span class=\"fc2\">></span></span>./spellchecker<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>content<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"buildOnCommit\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc5\"><!-- optional elements with defaults</span>",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml",
      "IndexBasedSpellChecker"
    ],
    "pageId": 533
  },
  {
    "content": "Ê<span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml",
      "IndexBasedSpellChecker"
    ],
    "pageId": 533
  },
  {
    "content": "The first element defines the <span class=\"code\">searchComponent</span> to use the <span class=\"code\">solr.SpellCheckComponent</span>. The <span class=\"code\">classname</span> is the\nspecific implementation of the SpellCheckComponent, in this case <span class=\"code\">solr.IndexBasedSpellChecker</span>. Defining\nthe <span class=\"code\">classname</span> is optional; if not defined, it will default to <span class=\"code\">IndexBasedSpellChecker</span>.",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml",
      "IndexBasedSpellChecker"
    ],
    "pageId": 533
  },
  {
    "content": "The <span class=\"code\">spellcheckIndexDir</span> defines the location of the directory that holds the spellcheck index, while the\nfield<span class=\"ff2 fs1\"> defines the source field (defined in the Schema) for spell check terms. When choosing a field for the</span>\nspellcheck index, it's best to avoid a heavily processed field to get more accurate results. If the field has\nmany word variations from processing synonyms and/or stemming, the dictionary will be created with those\nvariations in addition to more valid spelling data.",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml",
      "IndexBasedSpellChecker"
    ],
    "pageId": 533
  },
  {
    "content": "Finally, <span class=\"ff4\">buildOnCommit</span> defines whether to build the spell check index at every commit (that is, every time\nnew documents are added to the index). It is optional, and can be omitted if you would rather set it to <span class=\"code\">false</span>.",
    "hierarchy": [
      "Spell Checking",
      "Configuring the SpellCheckComponent",
      "Define Spell Check in solrconfig.xml",
      "IndexBasedSpellChecker"
    ],
    "pageId": 533
  },
  {
    "content": "The <span class=\"code\">DirectSolrSpellChecker</span> uses terms from the Solr index without building a parallel index like the\nIndexBasedSpellChecker<span class=\"ff2 fs0\">. This spell checker has the benefit of not having to be built regularly, meaning</span>\nthat the terms are always up-to-date with terms in the index. Here is how this might be configured in\nsolrconfig.xml",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"spellchecker\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc2\">></span></span>default<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>name<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"classname\"<span class=\"fc2\">></span></span>solr.DirectSolrSpellChecker<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"distanceMeasure\"<span class=\"fc2\">></span></span>internal<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><float</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"accuracy\"<span class=\"fc2\">></span></span>0.5<span class=\"fc2\"></float></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"maxEdits\"<span class=\"fc2\">></span></span>2<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"minPrefix\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"maxInspections\"<span class=\"fc2\">></span></span>5<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"minQueryLength\"<span class=\"fc2\">></span></span>4<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><float</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"maxQueryFrequency\"<span class=\"fc2\">></span></span>0.01<span class=\"fc2\"></float></span>\nÊ   <span class=\"fc2\"><float</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"thresholdTokenFrequency\"<span class=\"fc2\">></span></span>.01<span class=\"fc2\"></float></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "When choosing a <span class=\"code\">field</span> to query for this spell checker, you want one which has relatively little analysis\nperformed on it (particularly analysis such as stemming). Note that you need to specify a field to use for the\nsuggestions, so like the <span class=\"code\">IndexBasedSpellChecker</span>, you may want to copy data from fields like <span class=\"code\">title</span>, <span class=\"code\">body</span>,\netc., to a field dedicated to providing spelling suggestions.",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "Many of the parameters relate to how this spell checker should query the index for term suggestions. The\ndistanceMeasure<span class=\"ff2 fs0\"> defines the metric to use during the spell check query. The value \"internal\" uses the</span>\ndefault Levenshtein metric, which is the same metric used with the other spell checker implementations.",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "Because this spell checker is querying the main index, you may want to limit how often it queries the index\nto be sure to avoid any performance conflicts with user queries. The <span class=\"code\">accuracy</span> setting defines the threshold\nfor a valid suggestion, while <span class=\"code\">maxEdits</span> defines the number of changes to the term to allow. Since most\nspelling mistakes are only 1 letter off, setting this to 1 will reduce the number of possible suggestions (the\ndefault, however, is 2); the value can only be 1 or 2. <span class=\"code\">minPrefix</span> defines the minimum number of characters\nthe terms should share. Setting this to 1 means that the spelling suggestions will all start with the same\nletter, for example.",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "The <span class=\"code\">maxInspections</span> parameter defines the maximum number of possible matches to review before\nreturning results; the default is 5. <span class=\"code\">minQueryLength</span> defines how many characters must be in the query\nbefore suggestions are provided; the default is 4.",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "At first, spellchecker analyses incoming query words by looking up them in the index. Only query words,\nwhich are absent in index or too rare ones (below <span class=\"code\">maxQueryFrequency</span>) are considered as misspelled and\nused for finding suggestions. Words which are frequent than <span class=\"code\">maxQueryFrequency</span> bypass spellchecker\nunchanged. After suggestions for every misspelled word are found they are filtered for enough frequency\nwith <span class=\"code\">thresholdTokenFrequency</span> as boundary value. These parameters (<span class=\"code\">maxQueryFrequency</span> and\nthresholdTokenFrequency<span class=\"ff2 fs0\">) can be a percentage (such as .01, or 1%) or an absolute value (such as 4).</span>",
    "hierarchy": [
      "DirectSolrSpellChecker"
    ],
    "pageId": 534
  },
  {
    "content": "The <span class=\"code\">FileBasedSpellChecker</span> uses an external file as a spelling dictionary. This can be useful if using Solr as\na spelling server, or if spelling suggestions don't need to be based on actual terms in the index. In\nsolrconfig.xml<span class=\"ff2 fs0\">, you would define the searchComponent as so:</span>",
    "hierarchy": [
      "FileBasedSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"spellchecker\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"classname\"<span class=\"fc2\">></span></span>solr.FileBasedSpellChecker<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc2\">></span></span>file<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"sourceLocation\"<span class=\"fc2\">></span></span>spellings.txt<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"characterEncoding\"<span class=\"fc2\">></span></span>UTF-8<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"spellcheckIndexDir\"<span class=\"fc2\">></span></span>./spellcheckerFile<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc5\"><!-- optional elements with defaults</span>",
    "hierarchy": [
      "FileBasedSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "Ê<span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "FileBasedSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "The differences here are the use of the <span class=\"code\">sourceLocation</span> to define the location of the file of terms and the\nuse of <span class=\"code\">characterEncoding</span> to define the encoding of the terms file.",
    "hierarchy": [
      "FileBasedSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "In the previous example, <span class=\"ff5\">name</span> is used to name this specific definition of the spellchecker.\nMultiple definitions can co-exist in a single <span class=\"code\">solrconfig.xml</span>, and the <span class=\"ff5\">name</span> helps to\ndifferentiate them. If only defining one spellchecker, no name is required.",
    "hierarchy": [
      "FileBasedSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "WordBreakSolrSpellChecker<span class=\"ff2 fs0\"> offers suggestions by combining adjacent query terms and/or breaking terms</span>\ninto multiple words. It is a <span class=\"code\">SpellCheckComponent</span> enhancement, leveraging Lucene's\nWordBreakSpellChecker<span class=\"ff2 fs0\">. It can detect spelling errors resulting from misplaced whitespace without the use</span>\nof shingle-based dictionaries and provides collation support for word-break errors, including cases where\nthe user has a mix of single-word spelling errors and word-break errors in the same query. It also provides\nshard support.",
    "hierarchy": [
      "WordBreakSolrSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "Here is how it might be configured in <span class=\"code\">solrconfig.xml</span>:",
    "hierarchy": [
      "WordBreakSolrSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"spellchecker\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc2\">></span></span>wordbreak<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"classname\"<span class=\"fc2\">></span></span>solr.WordBreakSolrSpellChecker<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>lowerfilt<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"combineWords\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"breakWords\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"maxChanges\"<span class=\"fc2\">></span></span>10<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "WordBreakSolrSpellChecker"
    ],
    "pageId": 535
  },
  {
    "content": "Some of the parameters will be familiar from the discussion of the other spell checkers, such as <span class=\"ff2 fs1\">name</span>,\nclassname<span class=\"ff1 fs0\">, and </span>field<span class=\"ff1 fs0\">. New for this spell checker is </span>combineWords<span class=\"ff1 fs0\">, which defines whether words should be</span>\ncombined in a dictionary search (default is true); <span class=\"ff2 fs1\">breakWords</span>, which defines if words should be broken\nduring a dictionary search (default is true); and <span class=\"ff2 fs1\">maxChanges</span>, an integer which defines how many times the\nspell checker should check collation possibilities against the index (default is 10).",
    "hierarchy": [
    ],
    "pageId": 536
  },
  {
    "content": "The spellchecker can be configured with a traditional checker (i.e., <span class=\"ff2 fs1\">DirectSolrSpellChecker</span>). The results\nare combined and collations can contain a mix of corrections from both spellcheckers.",
    "hierarchy": [
    ],
    "pageId": 536
  },
  {
    "content": "Queries will be sent to a <span class=\"link\">RequestHandler</span>. If every request should generate a suggestion, then you would\nadd the following to the <span class=\"ff2 fs1\">requestHandler</span> that you are using:",
    "hierarchy": [
      "Add It to a Request Handler"
    ],
    "pageId": 536
  },
  {
    "content": "One of the possible parameters is the <span class=\"ff2 fs1\">spellcheck.dictionary</span> to use, and multiples can be defined. With\nmultiple dictionaries, all specified dictionaries are consulted and results are interleaved. Collations are\ncreated with combinations from the different spellcheckers, with care taken that multiple overlapping\ncorrections do not occur in the same collation.",
    "hierarchy": [
      "Add It to a Request Handler"
    ],
    "pageId": 536
  },
  {
    "content": "Here is an example with multiple dictionaries:",
    "hierarchy": [
      "Add It to a Request Handler"
    ],
    "pageId": 536
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"spellcheck.dictionary\"<span class=\"fc3\">></span></span>default<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"spellcheck.dictionary\"<span class=\"fc3\">></span></span>wordbreak<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"spellcheck.count\"<span class=\"fc3\">></span></span>20<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"last-components\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str></span>spellcheck<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></arr></span>",
    "hierarchy": [
      "Add It to a Request Handler"
    ],
    "pageId": 536
  },
  {
    "content": "The SpellCheck component accepts the parameters described below.",
    "hierarchy": [
      "Spell Check Parameters"
    ],
    "pageId": 536
  },
  {
    "content": "spellcheck\nThis parameter turns on SpellCheck suggestions for the request. If <span class=\"ff2 fs1\">true</span>, then spelling suggestions will be\ngenerated. This is required if spell checking is desired.",
    "hierarchy": [
      "Spell Check Parameters"
    ],
    "pageId": 536
  },
  {
    "content": "spellcheck.q<span class=\"code\"> or </span>q\nThis parameter specifies the query to spellcheck.",
    "hierarchy": [
      "Spell Check Parameters"
    ],
    "pageId": 536
  },
  {
    "content": "If <span class=\"ff2 fs1\">spellcheck.q</span> is defined, then it is used; otherwise the original input query is used. The <span class=\"ff2 fs1\">spellcheck.q</span>\nparameter is intended to be the original query, minus any extra markup like field names, boosts, and so",
    "hierarchy": [
      "Spell Check Parameters"
    ],
    "pageId": 536
  },
  {
    "content": "on. If the <span class=\"ff2 fs1\">q</span> parameter is specified, then the <span class=\"ff2 fs1\">SpellingQueryConverter</span> class is used to parse it into tokens;\notherwise the <span class=\"ff2 fs1\">WhitespaceTokenizer</span> is used.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "The choice of which one to use is up to the application. Essentially, if you have a spelling \"ready\" version\nin your application, then it is probably better to use <span class=\"ff2 fs1\">spellcheck.q</span>. Otherwise, if you just want Solr to do\nthe job, use the <span class=\"ff2 fs1\">q</span> parameter.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "The <span class=\"ff2 fs1\">SpellingQueryConverter</span> class does not deal properly with non-ASCII characters. In\nthis case, you have either to use <span class=\"ff2 fs1\">spellcheck.q</span>, or implement your own QueryConverter.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.build\nIf set to <span class=\"ff2 fs1\">true</span>, this parameter creates the dictionary to be used for spell-checking. In a typical search\napplication, you will need to build the dictionary before using the spell check. However, it's not always\nnecessary to build a dictionary first. For example, you can configure the spellchecker to use a dictionary\nthat already exists.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "The dictionary will take some time to build, so this parameter should not be sent with every request.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.reload\nIf set to <span class=\"ff2 fs1\">true</span>, this parameter reloads the spellchecker. The results depend on the implementation of\nSolrSpellChecker.reload()<span class=\"ff1 fs0\">. In a typical implementation, reloading the spellchecker means reloading</span>\nthe dictionary.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.count\nThis parameter specifies the maximum number of suggestions that the spellchecker should return for a\nterm. If this parameter isn't set, the value defaults to <span class=\"ff2 fs1\">1</span>. If the parameter is set but not assigned a\nnumber, the value defaults to <span class=\"ff2 fs1\">5</span>. If the parameter is set to a positive integer, that number becomes the\nmaximum number of suggestions returned by the spellchecker.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.queryAnalyzerFieldtype\nA field type from Solr's schema. The analyzer configured for the provided field type is used by the\nQueryConverter to tokenize the value for \"q\" parameter. The field type specified by this parameter\nshould do minimal transformations. It’s usually a best practice to avoid types that aggressively stem or\nNGram, for instance, since those types of analysis can throw off spell checking.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.onlyMorePopular\nIf <span class=\"ff2 fs1\">true</span>, Solr will return suggestions that result in more hits for the query than the existing query. Note\nthat this will return more popular suggestions even when the given query term is present in the index\nand considered \"correct\".",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.maxResultsForSuggest\nIf, for example, this is set to <span class=\"ff2 fs1\">5</span> and the user's query returns 5 or fewer results, the spellchecker will report\n\"correctlySpelled=false\" and also offer suggestions (and collations if requested). Setting this greater than\nzero is useful for creating \"did-you-mean?\" suggestions for queries that return a low number of hits.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.alternativeTermCount\nDefines the number of suggestions to return for each query term existing in the index and/or dictionary.\nPresumably, users will want fewer suggestions for words with docFrequency>0. Also, setting this value\nenables context-sensitive spell suggestions.",
    "hierarchy": [
    ],
    "pageId": 537
  },
  {
    "content": "spellcheck.extendedResults\nIf <span class=\"ff1 fs0\">true</span>, this parameter causes to Solr to return additional information about spellcheck results, such as\nthe frequency of each original term in the index (<span class=\"ff1 fs0\">origFreq</span>) as well as the frequency of each suggestion in\nthe index (<span class=\"ff1 fs0\">frequency</span>). Note that this result format differs from the non-extended one as the returned\nsuggestion for a word is actually an array of lists, where each list holds the suggested term and its\nfrequency.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.collate\nIf <span class=\"ff1 fs0\">true</span>, this parameter directs Solr to take the best suggestion for each token (if one exists) and construct\na new query from the suggestions.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "For example, if the input query was \"jawa class lording\" and the best suggestion for \"jawa\" was \"java\"\nand \"lording\" was \"loading\", then the resulting collation would be \"java class loading\".",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "The <span class=\"ff1 fs0\">spellcheck.collate</span> parameter only returns collations that are guaranteed to result in hits if re-\nqueried, even when applying original <span class=\"ff1 fs0\">fq</span> parameters. This is especially helpful when there is more than\none correction per query.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "This only returns a query to be used. It does not actually run the suggested query.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.maxCollations\nThe maximum number of collations to return. The default is <span class=\"ff1 fs0\">1</span>. This parameter is ignored if\nspellcheck.collate<span class=\"ff2 fs1\"> is false.</span>",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.maxCollationTries\nThis parameter specifies the number of collation possibilities for Solr to try before giving up. Lower values\nensure better performance. Higher values may be necessary to find a collation that can return results.\nThe default value is <span class=\"ff1 fs0\">0</span>, which is equivalent to not checking collations. This parameter is ignored if\nspellcheck.collate<span class=\"ff2 fs1\"> is false.</span>",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.maxCollationEvaluations\nThis parameter specifies the maximum number of word correction combinations to rank and evaluate\nprior to deciding which collation candidates to test against the index. This is a performance safety-net in\ncase a user enters a query with many misspelled words. The default is <span class=\"ff1 fs0\">10000</span> combinations, which should\nwork well in most situations.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.collateExtendedResults\nIf <span class=\"ff1 fs0\">true</span>, this parameter returns an expanded response format detailing the collations Solr found. The\ndefault value is <span class=\"ff1 fs0\">false</span> and this is ignored if <span class=\"ff1 fs0\">spellcheck.collate</span> is false.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.collateMaxCollectDocs\nThis parameter specifies the maximum number of documents that should be collected when testing\npotential collations against the index. A value of <span class=\"ff1 fs0\">0</span> indicates that all documents should be collected,\nresulting in exact hit-counts. Otherwise an estimation is provided as a performance optimization in cases\nwhere exact hit-counts are unnecessary – the higher the value specified, the more precise the estimation.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "The default value for this parameter is <span class=\"ff1 fs0\">0</span>, but when <span class=\"ff1 fs0\">spellcheck.collateExtendedResults</span> is false, the\noptimization is always used as if <span class=\"ff1 fs0\">1</span> had been specified.",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "spellcheck.collateParam.*<span class=\"ff4 fs1\"> Prefix</span>",
    "hierarchy": [
    ],
    "pageId": 538
  },
  {
    "content": "This parameter prefix can be used to specify any additional parameters that you wish to the Spellchecker\nto use when internally validating collation queries. For example, even if your regular search results allow\nfor loose matching of one or more query terms via parameters like <span class=\"ff2 fs1\">q.op=OR</span> and <span class=\"ff2 fs1\">mm=20%</span> you can specify\noverride params such as <span class=\"ff2 fs1\">spellcheck.collateParam.q.op=AND&spellcheck.collateParam.mm=100%</span> to\nrequire that only collations consisting of words that are all found in at least one document may be\nreturned.",
    "hierarchy": [
    ],
    "pageId": 539
  },
  {
    "content": "spellcheck.dictionary\nThis parameter causes Solr to use the dictionary named in the parameter's argument. The default setting\nis <span class=\"ff2 fs1\">default</span>. This parameter can be used to invoke a specific spellchecker on a per request basis.",
    "hierarchy": [
    ],
    "pageId": 539
  },
  {
    "content": "spellcheck.accuracy\nSpecifies an accuracy value to be used by the spell checking implementation to decide whether a result is\nworthwhile or not. The value is a float between 0 and 1. Defaults to <span class=\"ff2 fs1\">Float.MIN_VALUE</span>.",
    "hierarchy": [
    ],
    "pageId": 539
  },
  {
    "content": "spellcheck.<DICT_NAME>.key\nSpecifies a key/value pair for the implementation handling a given dictionary. The value that is passed\nthrough is just <span class=\"ff2 fs1\">key=value</span> (<span class=\"ff2 fs1\">spellcheck.<DICT_NAME>.</span> is stripped off).",
    "hierarchy": [
    ],
    "pageId": 539
  },
  {
    "content": "For example, given a dictionary called <span class=\"ff2 fs1\">foo</span>, <span class=\"ff2 fs1\">spellcheck.foo.myKey=myValue</span> would result in\nmyKey=myValue<span class=\"ff1 fs0\"> being passed through to the implementation handling the dictionary </span>foo<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 539
  },
  {
    "content": "Using Solr's <span class=\"ff2 fs1\">bin/solr -e techproducts</span> example, this query shows the results of a simple request that\ndefines a query using the <span class=\"ff2 fs1\">spellcheck.q</span> parameter, and forces the collations to require all input terms must\nmatch:",
    "hierarchy": [
      "Spell Check Example"
    ],
    "pageId": 539
  },
  {
    "content": "http://localhost:8983/solr/techproducts/spell?df=text&spellcheck.q=delll+ultra+sharp&spellch\neck=true&spellcheck.collateParam.q.op=AND&wt=xml",
    "hierarchy": [
      "Spell Check Example"
    ],
    "pageId": 539
  },
  {
    "content": "Results:",
    "hierarchy": [
      "Spell Check Example"
    ],
    "pageId": 539
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"suggestions\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"delll\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"numFound\"<span class=\"fc0\">></span></span>1<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"startOffset\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"endOffset\"<span class=\"fc0\">></span></span>5<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"origFreq\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"suggestion\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><lst></span>\nÊ         <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"word\"<span class=\"fc0\">></span></span>dell<span class=\"fc0\"></str></span>\nÊ         <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"freq\"<span class=\"fc0\">></span></span>1<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"></lst></span>\nÊ     <span class=\"fc0\"></arr></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ultra sharp\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"numFound\"<span class=\"fc0\">></span></span>1<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"startOffset\"<span class=\"fc0\">></span></span>6<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"endOffset\"<span class=\"fc0\">></span></span>17<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"origFreq\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"suggestion\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><lst></span>\nÊ         <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"word\"<span class=\"fc0\">></span></span>ultrasharp<span class=\"fc0\"></str></span>\nÊ         <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"freq\"<span class=\"fc0\">></span></span>1<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"></lst></span>\nÊ     <span class=\"fc0\"></arr></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"correctlySpelled\"<span class=\"fc0\">></span></span>false<span class=\"fc0\"></bool></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"collations\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"collation\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"collationQuery\"<span class=\"fc0\">></span></span>dell ultrasharp<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"hits\"<span class=\"fc0\">></span></span>1<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"misspellingsAndCorrections\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"delll\"<span class=\"fc0\">></span></span>dell<span class=\"fc0\"></str></span>\nÊ       <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ultra sharp\"<span class=\"fc0\">></span></span>ultrasharp<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 540
  },
  {
    "content": "The <span class=\"ff1 fs2\">SpellCheckComponent</span> also supports spellchecking on distributed indexes. If you are using the\nSpellCheckComponent on a request handler other than \"/select\", you must provide the following two\nparameters:",
    "hierarchy": [
      "Distributed SpellCheck"
    ],
    "pageId": 540
  },
  {
    "content": "shards\nSpecifies the shards in your distributed indexing configuration. For more information about distributed\nindexing, see <span class=\"link\">Distributed Search with Index Sharding</span>",
    "hierarchy": [
      "Distributed SpellCheck"
    ],
    "pageId": 540
  },
  {
    "content": "shards.qt\nSpecifies the request handler Solr uses for requests to shards. This parameter is not required for the\n/select<span class=\"ff2 fs1\"> request handler.</span>",
    "hierarchy": [
    ],
    "pageId": 541
  },
  {
    "content": "For example:",
    "hierarchy": [
    ],
    "pageId": 541
  },
  {
    "content": "http://localhost:8983/solr/techproducts/spell?spellcheck=true&spellcheck.build=true&spellcheck.q=\ntoyata&shards.qt=/spell&shards=solr-shard1:8983/solr/techproducts,solr-\nshard2:8983/solr/techproducts",
    "hierarchy": [
    ],
    "pageId": 541
  },
  {
    "content": "In case of a distributed request to the SpellCheckComponent, the shards are requested for at least five\nsuggestions even if the <span class=\"ff1 fs0\">spellcheck.count</span> parameter value is less than five. Once the suggestions are\ncollected, they are ranked by the configured distance measure (Levenstein Distance by default) and then by\naggregate frequency.",
    "hierarchy": [
    ],
    "pageId": 541
  },
  {
    "content": "Query Re-Ranking allows you to run a simple query (A) for matching documents and then re-rank the top N\ndocuments using the scores from a more complex query (B).",
    "hierarchy": [
      "Query Re-Ranking"
    ],
    "pageId": 542
  },
  {
    "content": "Since the more costly ranking from query B is only applied to the top <span class=\"code\">N</span> documents, it will have less impact\non performance then just using the complex query B by itself. The trade off is that documents which score\nvery low using the simple query A may not be considered during the re-ranking phase, even if they would\nscore very highly using query B.",
    "hierarchy": [
      "Query Re-Ranking"
    ],
    "pageId": 542
  },
  {
    "content": "A Ranking query can be specified using the <span class=\"ff4 fs3\">rq</span> request parameter. The <span class=\"ff4 fs3\">rq</span> parameter must specify a query\nstring that when parsed, produces a <span class=\"link\">RankQuery</span>.",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query"
    ],
    "pageId": 542
  },
  {
    "content": "Three rank queries are currently included in the Solr distribution. You can also configure a custom\nQParserPlugin<span class=\"fc1\"> you have written, but most users can just use a parser provided with Solr.</span>",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query"
    ],
    "pageId": 542
  },
  {
    "content": "rerank<span class=\"link\">ReRankQParserPlugin</span>",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query"
    ],
    "pageId": 542
  },
  {
    "content": "xport<span class=\"link\">ExportQParserPlugin</span>",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query"
    ],
    "pageId": 542
  },
  {
    "content": "ltrLTRQParserPlugin",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query"
    ],
    "pageId": 542
  },
  {
    "content": "The <span class=\"ff4 fs3\">rerank</span> parser wraps a query specified by an local parameter, along with additional parameters\nindicating how many documents should be re-ranked, and how the final scores should be computed:",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query",
      "ReRank Query Parser"
    ],
    "pageId": 542
  },
  {
    "content": "reRankQuery\nThe query string for your complex ranking query - in most cases <span class=\"link\">a variable</span> will be used to refer to\nanother request parameter. This parameter is required.",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query",
      "ReRank Query Parser"
    ],
    "pageId": 542
  },
  {
    "content": "reRankDocs\nThe number of top N documents from the original query that should be re-ranked. This number will be\ntreated as a minimum, and may be increased internally automatically in order to rank enough documents\nto satisfy the query (i.e., start+rows). The default is <span class=\"ff4 fs3\">200</span>.",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query",
      "ReRank Query Parser"
    ],
    "pageId": 542
  },
  {
    "content": "reRankWeight\nA multiplicative factor that will be applied to the score from the reRankQuery for each of the top\nmatching documents, before that score is added to the original score. The default is <span class=\"ff4 fs3\">2.0</span>.",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query",
      "ReRank Query Parser"
    ],
    "pageId": 542
  },
  {
    "content": "In the example below, the top 1000 documents matching the query \"greetings\" will be re-ranked using the\nquery \"(hi hello hey hiya)\". The resulting scores for each of those 1000 documents will be 3 times their score\nfrom the \"(hi hello hey hiya)\", plus the score from the original \"greetings\" query:",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query",
      "ReRank Query Parser"
    ],
    "pageId": 542
  },
  {
    "content": "q=greetings&rq={!rerank reRankQuery=$rqq reRankDocs=1000 reRankWeight=3}&rqq=(hi+hello+hey+hiya)",
    "hierarchy": [
      "Query Re-Ranking",
      "Specifying a Ranking Query",
      "ReRank Query Parser"
    ],
    "pageId": 542
  },
  {
    "content": "If a document matches the original query, but does not match the re-ranking query, the document's original\nscore will remain.",
    "hierarchy": [
    ],
    "pageId": 543
  },
  {
    "content": "The <span class=\"code\">ltr</span> stands for Learning To Rank, please see <span class=\"link\">Learning To Rank</span> for more detailed information.",
    "hierarchy": [
      "LTR Query Parser"
    ],
    "pageId": 543
  },
  {
    "content": "The <span class=\"code\">rq</span> parameter and the re-ranking feature in general works well with other Solr features. For example, it\ncan be used in conjunction with the <span class=\"link\">collapse parser</span> to re-rank the group heads after they've been collapsed.\nIt also preserves the order of documents elevated by the <span class=\"link\">elevation component</span>. And it even has its own\ncustom explain so you can see how the re-ranking scores were derived when looking at <span class=\"link\">debug information</span>.",
    "hierarchy": [
      "Combining Ranking Queries with Other Solr Features"
    ],
    "pageId": 543
  },
  {
    "content": "With the <span class=\"ff2\">Learning To Rank</span> (or <span class=\"ff2\">LTR</span> for short) contrib module you can configure and run machine learned\nranking models in Solr.",
    "hierarchy": [
      "Learning To Rank"
    ],
    "pageId": 543
  },
  {
    "content": "The module also supports feature extraction inside Solr. The only thing you need to do outside Solr is train\nyour own ranking model.",
    "hierarchy": [
      "Learning To Rank"
    ],
    "pageId": 543
  },
  {
    "content": "Re-Ranking allows you to run a simple query for matching documents and then re-rank the top N\ndocuments using the scores from a different, more complex query. This page describes the use of <span class=\"ff2\">LTR</span>\ncomplex queries, information on other rank queries included in the Solr distribution can be found on the\nQuery Re-Ranking<span class=\"fc0\"> page.</span>",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Re-Ranking"
    ],
    "pageId": 543
  },
  {
    "content": "In information retrieval systems, <span class=\"link\">Learning to Rank</span> is used to re-rank the top N retrieved documents using\ntrained machine learning models. The hope is that such sophisticated models can make more nuanced\nranking decisions than standard ranking functions like <span class=\"link\">TF-IDF</span> or <span class=\"link\">BM25</span>.",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Learning To Rank Models"
    ],
    "pageId": 543
  },
  {
    "content": "A ranking model computes the scores used to rerank documents. Irrespective of any particular algorithm or\nimplementation, a ranking model's computation can use three types of inputs:",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Learning To Rank Models",
      "Ranking Model"
    ],
    "pageId": 543
  },
  {
    "content": "parameters that represent the scoring algorithm",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Learning To Rank Models",
      "Ranking Model"
    ],
    "pageId": 543
  },
  {
    "content": "features that represent the document being scored",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Learning To Rank Models",
      "Ranking Model"
    ],
    "pageId": 543
  },
  {
    "content": "features that represent the query for which the document is being scored",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Learning To Rank Models",
      "Ranking Model"
    ],
    "pageId": 543
  },
  {
    "content": "A feature is a value, a number, that represents some quantity or quality of the document being scored or of\nthe query for which documents are being scored. For example documents often have a 'recency' quality and",
    "hierarchy": [
      "Learning To Rank",
      "Learning to Rank Concepts",
      "Learning To Rank Models",
      "Feature"
    ],
    "pageId": 543
  },
  {
    "content": "'number of past purchases' might be a quantity that is passed to Solr as part of the search query.",
    "hierarchy": [
    ],
    "pageId": 544
  },
  {
    "content": "Some ranking models expect features on a particular scale. A normalizer can be used to translate arbitrary\nfeature values into normalized values e.g., on a 0..1 or 0..100 scale.",
    "hierarchy": [
      "Normalizer"
    ],
    "pageId": 544
  },
  {
    "content": "The LTR contrib module includes several feature classes as well as support for custom features. Each feature\nclass's javadocs contain an example to illustrate use of that class. The process of <span class=\"link\">feature engineering</span> itself is\nthen entirely up to your domain expertise and creativity.",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "FeatureClassExample parameters<span class=\"link\">External Feature</span>\nInformation",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "field length<span class=\"link\">FieldLengthFeature</span>\n{\"field\":\"title\"}\nnot (yet) supported",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "field value<span class=\"link\">FieldValueFeature</span>\n{\"field\":\"hits\"}\nnot (yet) supported",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "original score<span class=\"link\">OriginalScoreFeature</span>\n{}\nnot applicable",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "solr query<span class=\"link\">SolrFeature</span><span class=\"code\">{\"q\":\"{!func}</span>\nrecip(ms(NOW,last_modi\nfied)<span class=\"ff1 fs0\"> </span>,3.16e-11,1,1)\"}\nsupported",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "solr filter query<span class=\"link\">SolrFeature</span>\n{\"fq\":[\"{!terms\nf=category}book\"]}\nsupported",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "solr query + filter query<span class=\"link\">SolrFeature</span><span class=\"code\">{\"q\":\"{!func}</span>\nrecip(ms(NOW,last_modi\nfied),<span class=\"ff1 fs0\"> </span>3.16e-11,1,1)\",\n\"fq\":[\"{!terms\nf=category}book\"]}\nsupported",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "value<span class=\"link\">ValueFeature</span>\n{\"value\":\"${userFromMo\nbile}\",\"required\":true\n}\nsupported",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "(custom)(custom class extending\nFeature<span class=\"fc0\">)</span>",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "Identity<span class=\"link\">IdentityNormalizer</span>\n{}",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "MinMax<span class=\"link\">MinMaxNormalizer</span>\n{\"min\":\"0\", \"max\":\"50\" }",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "Standard<span class=\"link\">StandardNormalizer</span>\n{\"avg\":\"42\",\"std\":\"6\"}",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "(custom)(custom class extending\nNormalizer<span class=\"fc0\">)</span>",
    "hierarchy": [
      "Training Models",
      "Feature Engineering"
    ],
    "pageId": 544
  },
  {
    "content": "The ltr contrib module includes a <span class=\"link\">[features</span> transformer] to support the calculation and return of feature\nvalues for <span class=\"link\">feature extraction</span> purposes including and especially when you do not yet have an actual\nreranking model.",
    "hierarchy": [
      "Feature Extraction"
    ],
    "pageId": 545
  },
  {
    "content": "Feature selection and model training take place offline and outside Solr. The ltr contrib module supports two\ngeneralized forms of models as well as custom models. Each model class's javadocs contain an example to\nillustrate configuration of that class. In the form of JSON files your trained model or models (e.g., different\nmodels for different customer geographies) can then be directly uploaded into Solr using provided REST\nAPIs.",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "Linear<span class=\"link\">LinearModel</span>RankSVM, Pranking",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "Multiple Additive Trees<span class=\"link\">MultipleAdditiveTreesModel</span>LambdaMART, Gradient Boosted\nRegression Trees (GBRT)",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "Neural Network<span class=\"link\">NeuralNetworkModel</span>RankNet",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "(wrapper)<span class=\"link\">DefaultWrapperModel</span>(not applicable)",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "(custom)(custom class extending\nAdapterModel<span class=\"fc1\">)</span>\n(not applicable)",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "(custom)(custom class extending\nLTRScoringModel<span class=\"fc1\">)</span>\n(not applicable)",
    "hierarchy": [
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "The <span class=\"code\">\"techproducts\"</span> example included with Solr is pre-configured with the plugins required for learning-to-\nrank, but they are disabled by default.",
    "hierarchy": [
      "Quick Start with LTR",
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "To enable the plugins, please specify the <span class=\"code\">solr.ltr.enabled</span> JVM System Property when running the\nexample:",
    "hierarchy": [
      "Quick Start with LTR",
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "bin/solr start -e techproducts -Dsolr.ltr.enabled=true",
    "hierarchy": [
      "Quick Start with LTR",
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "To upload features in a <span class=\"code\">/path/myFeatures.json</span> file, please run:",
    "hierarchy": [
      "Quick Start with LTR",
      "Uploading Features",
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "curl -XPUT 'http://localhost:8983/solr/techproducts/schema/feature-store' --data-binary\n\"@/path/myFeatures.json\" -H 'Content-type:application/json'",
    "hierarchy": [
      "Quick Start with LTR",
      "Uploading Features",
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "To view the features you just uploaded please open the following URL in a browser:",
    "hierarchy": [
      "Quick Start with LTR",
      "Uploading Features",
      "Feature Selection and Model Training"
    ],
    "pageId": 545
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/feature-store/_DEFAULT_",
    "hierarchy": [
    ],
    "pageId": 546
  },
  {
    "content": "[\nÊ {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"q\"</span> : <span class=\"fc3\">\"{!func}recip( ms(NOW,last_modified), 3.16e-11, 1, 1)\"</span>\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"fq\"</span>: [<span class=\"fc3\">\"{!terms f=cat}book\"</span>]\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.OriginalScoreFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {}\nÊ }\n]",
    "hierarchy": [
    ],
    "pageId": 546
  },
  {
    "content": "To extract features as part of a query, add <span class=\"ff1 fs1\">[features]</span> to the <span class=\"ff1 fs1\">fl</span> parameter, for example:",
    "hierarchy": [
      "Extracting Features"
    ],
    "pageId": 546
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&fl=id,score,[features]",
    "hierarchy": [
      "Extracting Features"
    ],
    "pageId": 546
  },
  {
    "content": "The output XML will include feature values as a comma-separated list, resembling the output shown here:",
    "hierarchy": [
      "Extracting Features"
    ],
    "pageId": 546
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc3\">\"test\"</span>,\nÊ     <span class=\"fc1\">\"fl\"</span>:<span class=\"fc3\">\"id,score,[features]\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">2</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc2\">1.959392</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"GB18030TEST\"</span>,\nÊ       <span class=\"fc1\">\"score\"</span>:<span class=\"fc2\">1.959392</span>,\nÊ       <span class=\"fc1\">\"[features]\"</span>:<span class=\"fc3\">\"documentRecency=0.020893794,isBook=0.0,originalScore=1.959392\"</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"UTF8TEST\"</span>,\nÊ       <span class=\"fc1\">\"score\"</span>:<span class=\"fc2\">1.5513437</span>,\nÊ       <span class=\"fc1\">\"[features]\"</span>:<span class=\"fc3\">\"documentRecency=0.020893794,isBook=0.0,originalScore=1.5513437\"</span>}]\nÊ }}",
    "hierarchy": [
    ],
    "pageId": 547
  },
  {
    "content": "To upload the model in a <span class=\"ff1 fs1\">/path/myModel.json</span> file, please run:",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 547
  },
  {
    "content": "curl -XPUT 'http://localhost:8983/solr/techproducts/schema/model-store' --data-binary\n\"@/path/myModel.json\" -H 'Content-type:application/json'",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 547
  },
  {
    "content": "To view the model you just uploaded please open the following URL in a browser:",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 547
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/model-store",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 547
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.model.LinearModel\"</span>,\nÊ <span class=\"fc1\">\"name\"</span> : <span class=\"fc3\">\"myModel\"</span>,\nÊ <span class=\"fc1\">\"features\"</span> : [\nÊ   { <span class=\"fc1\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span> },\nÊ   { <span class=\"fc1\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span> },\nÊ   { <span class=\"fc1\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span> }\nÊ ],\nÊ <span class=\"fc1\">\"params\"</span> : {\nÊ   <span class=\"fc1\">\"weights\"</span> : {\nÊ     <span class=\"fc1\">\"documentRecency\"</span> : <span class=\"fc2\">1.0</span>,\nÊ     <span class=\"fc1\">\"isBook\"</span> : <span class=\"fc2\">0.1</span>,\nÊ     <span class=\"fc1\">\"originalScore\"</span> : <span class=\"fc2\">0.5</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 547
  },
  {
    "content": "To rerank the results of a query, add the <span class=\"code\">rq</span> parameter to your search, for example:",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&rq={!ltr model=myModel\nreRankDocs=100}&fl=id,score",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "The addition of the <span class=\"code\">rq</span> parameter will not change the output XML of the search.",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "To obtain the feature values computed during reranking, add <span class=\"code\">[features]</span> to the <span class=\"code\">fl</span> parameter, for example:",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&rq={!ltr model=myModel\nreRankDocs=100}&fl=id,score,[features]",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "The output XML will include feature values as a comma-separated list, resembling the output shown here:",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"params\"</span>:{\nÊ     <span class=\"fc2\">\"q\"</span>:<span class=\"fc4\">\"test\"</span>,\nÊ     <span class=\"fc2\">\"fl\"</span>:<span class=\"fc4\">\"id,score,[features]\"</span>,\nÊ     <span class=\"fc2\">\"rq\"</span>:<span class=\"fc4\">\"{!ltr model=myModel reRankDocs=100}\"</span>}},\nÊ <span class=\"fc2\">\"response\"</span>:{<span class=\"fc2\">\"numFound\"</span>:<span class=\"fc3\">2</span>,<span class=\"fc2\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc2\">\"maxScore\"</span>:<span class=\"fc3\">1.0005897</span>,<span class=\"fc2\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc2\">\"id\"</span>:<span class=\"fc4\">\"GB18030TEST\"</span>,\nÊ       <span class=\"fc2\">\"score\"</span>:<span class=\"fc3\">1.0005897</span>,\nÊ       <span class=\"fc2\">\"[features]\"</span>:<span class=\"fc4\">\"documentRecency=0.020893792,isBook=0.0,originalScore=1.959392\"</span>},\nÊ     {\nÊ       <span class=\"fc2\">\"id\"</span>:<span class=\"fc4\">\"UTF8TEST\"</span>,\nÊ       <span class=\"fc2\">\"score\"</span>:<span class=\"fc3\">0.79656565</span>,\nÊ       <span class=\"fc2\">\"[features]\"</span>:<span class=\"fc4\">\"documentRecency=0.020893792,isBook=0.0,originalScore=1.5513437\"</span>}]\nÊ }}",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 548
  },
  {
    "content": "The <span class=\"link\">ValueFeature</span> and <span class=\"link\">SolrFeature</span> classes support the use of external feature information, <span class=\"code\">efi</span> for short.",
    "hierarchy": [
      "External Feature Information"
    ],
    "pageId": 548
  },
  {
    "content": "To upload features in a <span class=\"code\">/path/myEfiFeatures.json</span> file, please run:",
    "hierarchy": [
      "External Feature Information",
      "Uploading Features"
    ],
    "pageId": 548
  },
  {
    "content": "curl -XPUT 'http://localhost:8983/solr/techproducts/schema/feature-store' --data-binary\n\"@/path/myEfiFeatures.json\" -H 'Content-type:application/json'",
    "hierarchy": [
      "External Feature Information",
      "Uploading Features"
    ],
    "pageId": 548
  },
  {
    "content": "To view the features you just uploaded please open the following URL in a browser:",
    "hierarchy": [
      "External Feature Information",
      "Uploading Features"
    ],
    "pageId": 548
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/feature-store/myEfiFeatureStore",
    "hierarchy": [
    ],
    "pageId": 549
  },
  {
    "content": "[\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"myEfiFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isPreferredManufacturer\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : { <span class=\"fc2\">\"fq\"</span> : [ <span class=\"fc3\">\"{!field f=manu}${preferredManufacturer}\"</span> ] }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"myEfiFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"userAnswerValue\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.ValueFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : { <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"${answer:42}\"</span> }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"myEfiFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"userFromMobileValue\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.ValueFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : { <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"${fromMobile}\"</span>, <span class=\"fc2\">\"required\"</span> : <span class=\"fc4\">true</span> }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"myEfiFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"userTextCat\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : { <span class=\"fc2\">\"q\"</span> : <span class=\"fc3\">\"{!field f=cat}${text}\"</span> }\nÊ }\n]",
    "hierarchy": [
    ],
    "pageId": 549
  },
  {
    "content": "As an aside, you may have noticed that the <span class=\"ff1 fs1\">myEfiFeatures.json</span> example uses\n\"store\":\"myEfiFeatureStore\"<span class=\"code\"> attributes: read more about feature </span>store<span class=\"code\"> in the <span class=\"link\">LTR Lifecycle</span> section of this</span>\npage.",
    "hierarchy": [
    ],
    "pageId": 549
  },
  {
    "content": "To extract <span class=\"ff1 fs1\">myEfiFeatureStore</span> features as part of a query, add <span class=\"ff1 fs1\">efi.*</span> parameters to the <span class=\"ff1 fs1\">[features]</span> part of\nthe <span class=\"ff1 fs1\">fl</span> parameter, for example:",
    "hierarchy": [
      "Extracting Features"
    ],
    "pageId": 549
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&fl=id,cat,manu,score,[features\nstore=myEfiFeatureStore efi.text=test efi.preferredManufacturer=Apache efi.fromMobile=1]",
    "hierarchy": [
      "Extracting Features"
    ],
    "pageId": 549
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&fl=id,cat,manu,score,[features\nstore=myEfiFeatureStore efi.text=test efi.preferredManufacturer=Apache efi.fromMobile=0\nefi.answer=13]",
    "hierarchy": [
      "Extracting Features"
    ],
    "pageId": 549
  },
  {
    "content": "To upload the model in a <span class=\"code\">/path/myEfiModel.json</span> file, please run:",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 550
  },
  {
    "content": "curl -XPUT 'http://localhost:8983/solr/techproducts/schema/model-store' --data-binary\n\"@/path/myEfiModel.json\" -H 'Content-type:application/json'",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 550
  },
  {
    "content": "To view the model you just uploaded please open the following URL in a browser:",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 550
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/model-store",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 550
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"store\"</span> : <span class=\"fc4\">\"myEfiFeatureStore\"</span>,\nÊ <span class=\"fc3\">\"name\"</span> : <span class=\"fc4\">\"myEfiModel\"</span>,\nÊ <span class=\"fc3\">\"class\"</span> : <span class=\"fc4\">\"org.apache.solr.ltr.model.LinearModel\"</span>,\nÊ <span class=\"fc3\">\"features\"</span> : [\nÊ   { <span class=\"fc3\">\"name\"</span> : <span class=\"fc4\">\"isPreferredManufacturer\"</span> },\nÊ   { <span class=\"fc3\">\"name\"</span> : <span class=\"fc4\">\"userAnswerValue\"</span> },\nÊ   { <span class=\"fc3\">\"name\"</span> : <span class=\"fc4\">\"userFromMobileValue\"</span> },\nÊ   { <span class=\"fc3\">\"name\"</span> : <span class=\"fc4\">\"userTextCat\"</span> }\nÊ ],\nÊ <span class=\"fc3\">\"params\"</span> : {\nÊ   <span class=\"fc3\">\"weights\"</span> : {\nÊ     <span class=\"fc3\">\"isPreferredManufacturer\"</span> : <span class=\"fc5\">0.2</span>,\nÊ     <span class=\"fc3\">\"userAnswerValue\"</span> : <span class=\"fc5\">1.0</span>,\nÊ     <span class=\"fc3\">\"userFromMobileValue\"</span> : <span class=\"fc5\">1.0</span>,\nÊ     <span class=\"fc3\">\"userTextCat\"</span> : <span class=\"fc5\">0.1</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
      "Uploading a Model"
    ],
    "pageId": 550
  },
  {
    "content": "To obtain the feature values computed during reranking, add <span class=\"code\">[features]</span> to the <span class=\"code\">fl</span> parameter and <span class=\"code\">efi.*</span>\nparameters to the <span class=\"code\">rq</span> parameter, for example:",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 550
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&rq={!ltr model=myEfiModel efi.text=test\nefi.preferredManufacturer=Apache efi.fromMobile=1}&fl=id,cat,manu,score,[features]",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 550
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&rq={!ltr model=myEfiModel efi.text=test\nefi.preferredManufacturer=Apache efi.fromMobile=0 efi.answer=13}&fl=id,cat,manu,score,[features]",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 550
  },
  {
    "content": "Notice the absence of <span class=\"code\">efi.*</span> parameters in the <span class=\"code\">[features]</span> part of the <span class=\"code\">fl</span> parameter.",
    "hierarchy": [
      "Running a Rerank Query"
    ],
    "pageId": 550
  },
  {
    "content": "To extract features for <span class=\"code\">myEfiFeatureStore</span> features while still reranking with <span class=\"code\">myModel</span>:",
    "hierarchy": [
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&rq={!ltr\nmodel=myModel}&fl=id,cat,manu,score,[features store=myEfiFeatureStore efi.text=test\nefi.preferredManufacturer=Apache efi.fromMobile=1]",
    "hierarchy": [
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Notice the absence of <span class=\"code\">efi.*</span> parameters in the <span class=\"code\">rq</span> parameter (because <span class=\"code\">myModel</span> does not use <span class=\"code\">efi</span> feature)\nand the presence of <span class=\"code\">efi.*</span> parameters in the <span class=\"code\">[features]</span> part of the <span class=\"code\">fl</span> parameter (because\nmyEfiFeatureStore<span class=\"ff2 fs1\"> contains </span>efi<span class=\"ff2 fs1\"> features).</span>",
    "hierarchy": [
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Read more about model evolution in the <span class=\"link\">LTR Lifecycle</span> section of this page.",
    "hierarchy": [
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Example training data and a demo <span class=\"code\">train_and_upload_demo_model.py</span> script can be found in the\nsolr/contrib/ltr/example<span class=\"ff2 fs1\"> folder in the <span class=\"link\">Apache lucene-solr Git repository</span> (mirrored on <span class=\"link\">github.com</span>). This</span>\nexample folder is not shipped in the Solr binary release.",
    "hierarchy": [
      "Training Example",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "The ltr contrib module requires the <span class=\"code\">dist/solr-ltr-*.jar</span> JARs.",
    "hierarchy": [
      "Installation of LTR",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Learning-To-Rank is a contrib module and therefore its plugins must be configured in <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "LTR Configuration",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Include the required contrib JARs. Note that by default paths are relative to the Solr core so they may\nneed adjustments to your configuration, or an explicit specification of the <span class=\"code\">$solr.install.dir</span>.",
    "hierarchy": [
      "LTR Configuration",
      "Minimum Requirements",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Declaration of the <span class=\"code\">ltr</span> query parser.",
    "hierarchy": [
      "LTR Configuration",
      "Minimum Requirements",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Configuration of the feature values cache.",
    "hierarchy": [
      "LTR Configuration",
      "Minimum Requirements",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "Ê      <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.search.LRUCache\"</span>\nÊ      <span class=\"fc4\">size</span>=<span class=\"fc5\">\"4096\"</span>\nÊ      <span class=\"fc4\">initialSize</span>=<span class=\"fc5\">\"2048\"</span>\nÊ      <span class=\"fc4\">autowarmCount</span>=<span class=\"fc5\">\"4096\"</span>\nÊ      <span class=\"fc4\">regenerator</span>=<span class=\"fc5\">\"solr.search.NoOpRegenerator\"</span> <span class=\"fc3\">/></span>",
    "hierarchy": [
      "LTR Configuration",
      "Minimum Requirements",
      "Extracting Features While Reranking"
    ],
    "pageId": 551
  },
  {
    "content": "<span class=\"ls1\">Declaration of the <span class=\"ff2 fs1\">[features]</span> transformer.</span>",
    "hierarchy": [
    ],
    "pageId": 552
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fvCacheName\"<span class=\"fc1\">></span></span>QUERY_DOC_FV<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 552
  },
  {
    "content": "A thread module can be configured for the query parser and/or the transformer to parallelize the creation of\nfeature weights. For details, please refer to the <span class=\"link\">LTRThreadModule</span> javadocs.",
    "hierarchy": [
      "Advanced Options",
      "LTRThreadModule"
    ],
    "pageId": 552
  },
  {
    "content": "The features transformer returns dense CSV values such as\nfeatureA=0.1,featureB=0.2,featureC=0.3,featureD=0.0<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Advanced Options",
      "Feature Vector Customization"
    ],
    "pageId": 552
  },
  {
    "content": "For sparse CSV output such as <span class=\"ff2 fs1\">featureA:0.1 featureB:0.2 featureC:0.3</span> you can customize the <span class=\"link\">feature</span>\nlogger transformer<span class=\"fc0\"> declaration in <span class=\"ff2 fs1\">solrconfig.xml</span> as follows:</span>",
    "hierarchy": [
      "Advanced Options",
      "Feature Vector Customization"
    ],
    "pageId": 552
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fvCacheName\"<span class=\"fc1\">></span></span>QUERY_DOC_FV<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaultFormat\"<span class=\"fc1\">></span></span>sparse<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"csvKeyValueDelimiter\"<span class=\"fc1\">></span></span>:<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"csvFeatureSeparator\"<span class=\"fc1\">></span></span> <span class=\"fc1\"></str></span>",
    "hierarchy": [
      "Advanced Options",
      "Feature Vector Customization"
    ],
    "pageId": 552
  },
  {
    "content": "How does Solr Learning-To-Rank work under the hood?\nPlease refer to the <span class=\"ff2 fs1\">ltr</span> <span class=\"link\">javadocs</span> for an implementation overview.",
    "hierarchy": [
      "Advanced Options",
      "Implementation and Contributions"
    ],
    "pageId": 552
  },
  {
    "content": "How could I write additional models and/or features?\nContributions for further models, features and normalizers are welcome. Related links:",
    "hierarchy": [
      "Advanced Options",
      "Implementation and Contributions"
    ],
    "pageId": 552
  },
  {
    "content": "<span class=\"link\">LTRScoringModel javadocs</span>\n•<span class=\"link\">Feature javadocs</span>\n•<span class=\"link\">Normalizer javadocs</span>\n•<span class=\"link\">http://wiki.apache.org/solr/HowToContribute</span>\n•<span class=\"link\">http://wiki.apache.org/lucene-java/HowToContribute</span>",
    "hierarchy": [
      "Advanced Options",
      "Implementation and Contributions"
    ],
    "pageId": 552
  },
  {
    "content": "It is recommended that you organise all your features into stores which are akin to namespaces:",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "Features within a store must be named uniquely.",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "Across stores identical or similar features can share the same name.",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "If no store name is specified then the default <span class=\"code\">_DEFAULT_</span> feature store will be used.",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "To discover the names of all your feature stores:",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/feature-store",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "To inspect the content of the <span class=\"code\">commonFeatureStore</span> feature store:",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/feature-store/commonFeatureStore",
    "hierarchy": [
      "Feature Stores"
    ],
    "pageId": 553
  },
  {
    "content": "A model uses features from exactly one feature store.",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "If no store is specified then the default <span class=\"code\">_DEFAULT_</span> feature store will be used.",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "A model need not use all the features defined in a feature store.",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "Multiple models can use the same feature store.",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "To extract features for <span class=\"code\">currentFeatureStore</span> 's features:",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&fl=id,score,[features\nstore=currentFeatureStore]",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "To extract features for <span class=\"code\">nextFeatureStore</span> features whilst reranking with <span class=\"code\">currentModel</span> based on\ncurrentFeatureStore<span class=\"ff2 fs0\">:</span>",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=test&rq={!ltr model=currentModel\nreRankDocs=100}&fl=id,score,[features store=nextFeatureStore]",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "To view all models:",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "http://localhost:8983/solr/techproducts/schema/model-store",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "To delete the <span class=\"code\">currentModel</span> model:",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "curl -XDELETE 'http://localhost:8983/solr/techproducts/schema/model-store/currentModel'",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "A feature store may be deleted only when there are no models using it.",
    "hierarchy": [
      "Models"
    ],
    "pageId": 553
  },
  {
    "content": "To delete the <span class=\"ff2 fs1\">currentFeatureStore</span> feature store:",
    "hierarchy": [
    ],
    "pageId": 554
  },
  {
    "content": "curl -XDELETE 'http://localhost:8983/solr/techproducts/schema/feature-store/currentFeatureStore'",
    "hierarchy": [
    ],
    "pageId": 554
  },
  {
    "content": "With SolrCloud, large models may fail to upload due to the limitation of ZooKeeper's buffer. In this case,\nDefaultWrapperModel<span class=\"ff1 fs0\"> may help you to separate the model definition from uploaded file.</span>",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "Assuming that you consider to use a large model placed at <span class=\"ff2 fs1\">/path/to/models/myModel.json</span> through\nDefaultWrapperModel<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"largeModelsFeatureStore\"</span>,\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"myModel\"</span>,\nÊ <span class=\"fc2\">\"class\"</span> : ...,\nÊ <span class=\"fc2\">\"features\"</span> : [\nÊ   ...\nÊ ],\nÊ <span class=\"fc2\">\"params\"</span> : {\nÊ   ...\nÊ }\n}",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "First, add the directory to Solr's resource paths by <span class=\"link\">Lib Directives</span>:",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "Ê <span class=\"fc5\"><lib</span> <span class=\"fc6\">dir</span>=<span class=\"fc3\">\"/path/to\"</span> <span class=\"fc6\">regex</span>=<span class=\"fc3\">\"models\"</span> <span class=\"fc5\">/></span>",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "Then, configure <span class=\"ff2 fs1\">DefaultWrapperModel</span> to wrap <span class=\"ff2 fs1\">myModel.json</span>:",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"largeModelsFeatureStore\"</span>,\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"myWrapperModel\"</span>,\nÊ <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.model.DefaultWrapperModel\"</span>,\nÊ <span class=\"fc2\">\"params\"</span> : {\nÊ   <span class=\"fc2\">\"resource\"</span> : <span class=\"fc3\">\"myModel.json\"</span>\nÊ }\n}",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "myModel.json<span class=\"ff1 fs0\"> will be loaded during the initialization and be able to use by specifying</span>\nmodel=myWrapperModel<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "No <span class=\"ff2 fs1\">\"features\"</span> are configured in <span class=\"ff2 fs1\">myWrapperModel</span> because the features of the wrapped\nmodel (<span class=\"ff2 fs1\">myModel</span>) will be used; also note that the <span class=\"ff2 fs1\">\"store\"</span> configured for the wrapper model\nmust match that of the wrapped model i.e., in this example the feature store called\nlargeModelsFeatureStore<span class=\"ff1 fs0\"> is used.</span>",
    "hierarchy": [
      "Using large models"
    ],
    "pageId": 554
  },
  {
    "content": "<lib dir=\"/path/to/models\" regex=\".*\\.json\" /><span class=\"code\"> doesn't work as expected in this</span>\ncase, because <span class=\"ff2 fs1\">SolrResourceLoader</span> considers given resources as JAR if <span class=\"ff2 fs1\"><lib /></span> indicates\nfiles.",
    "hierarchy": [
    ],
    "pageId": 555
  },
  {
    "content": "The feature store and the model store are both <span class=\"link\">Managed Resources</span>. Changes made to managed resources\nare not applied to the active Solr components until the Solr collection (or Solr core in single server mode) is\nreloaded.",
    "hierarchy": [
      "Applying Changes"
    ],
    "pageId": 555
  },
  {
    "content": "leftModel and <span class=\"ff2 fs1\">rightModel</span> both use features from <span class=\"ff2 fs1\">commonFeatureStore</span> and the only different between\nthe two models is the weights attached to each feature.",
    "hierarchy": [
      "LTR Examples",
      "One Feature Store, Multiple Ranking Models"
    ],
    "pageId": 555
  },
  {
    "content": "Conventions used:",
    "hierarchy": [
      "LTR Examples",
      "One Feature Store, Multiple Ranking Models"
    ],
    "pageId": 555
  },
  {
    "content": "◦commonFeatureStore.json<span class=\"code\"> file contains features for the </span>commonFeatureStore<span class=\"code\"> feature store</span>\n◦leftModel.json<span class=\"code\"> file contains model named </span>leftModel\n◦rightModel.json<span class=\"code\"> file contains model named </span>rightModel\n◦The model's features and weights are sorted alphabetically by name, this makes it easy to see what\nthe commonalities and differences between the two models are.\n◦The stores features are sorted alphabetically by name, this makes it easy to lookup features used in\nthe models",
    "hierarchy": [
      "LTR Examples",
      "One Feature Store, Multiple Ranking Models"
    ],
    "pageId": 555
  },
  {
    "content": "[\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"commonFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"q\"</span> : <span class=\"fc3\">\"{!func}recip( ms(NOW,last_modified), 3.16e-11, 1, 1)\"</span>\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"commonFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"fq\"</span>: [ <span class=\"fc3\">\"{!terms f=category}book\"</span> ]\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"commonFeatureStore\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.OriginalScoreFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {}\nÊ }\n]",
    "hierarchy": [
    ],
    "pageId": 556
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"commonFeatureStore\"</span>,\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"leftModel\"</span>,\nÊ <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.model.LinearModel\"</span>,\nÊ <span class=\"fc2\">\"features\"</span> : [\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span> }\nÊ ],\nÊ <span class=\"fc2\">\"params\"</span> : {\nÊ   <span class=\"fc2\">\"weights\"</span> : {\nÊ     <span class=\"fc2\">\"documentRecency\"</span> : <span class=\"fc4\">0.1</span>,\nÊ     <span class=\"fc2\">\"isBook\"</span> : <span class=\"fc4\">1.0</span>,\nÊ     <span class=\"fc2\">\"originalScore\"</span> : <span class=\"fc4\">0.5</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 556
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"commonFeatureStore\"</span>,\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"rightModel\"</span>,\nÊ <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.model.LinearModel\"</span>,\nÊ <span class=\"fc2\">\"features\"</span> : [\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span> }\nÊ ],\nÊ <span class=\"fc2\">\"params\"</span> : {\nÊ   <span class=\"fc2\">\"weights\"</span> : {\nÊ     <span class=\"fc2\">\"documentRecency\"</span> : <span class=\"fc4\">1.0</span>,\nÊ     <span class=\"fc2\">\"isBook\"</span> : <span class=\"fc4\">0.1</span>,\nÊ     <span class=\"fc2\">\"originalScore\"</span> : <span class=\"fc4\">0.5</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 557
  },
  {
    "content": "linearModel201701 uses features from <span class=\"ff2 fs2\">featureStore201701</span>",
    "hierarchy": [
      "Model Evolution"
    ],
    "pageId": 557
  },
  {
    "content": "treesModel201702 uses features from <span class=\"ff2 fs2\">featureStore201702</span>",
    "hierarchy": [
      "Model Evolution"
    ],
    "pageId": 557
  },
  {
    "content": "linearModel201701 and <span class=\"ff2 fs2\">treesModel201702</span> and their feature stores can co-exist whilst both are needed.",
    "hierarchy": [
      "Model Evolution"
    ],
    "pageId": 557
  },
  {
    "content": "When <span class=\"ff2 fs2\">linearModel201701</span> has been deleted then <span class=\"ff2 fs2\">featureStore201701</span> can also be deleted.",
    "hierarchy": [
      "Model Evolution"
    ],
    "pageId": 557
  },
  {
    "content": "Conventions used:",
    "hierarchy": [
      "Model Evolution"
    ],
    "pageId": 557
  },
  {
    "content": "◦<store>.json<span class=\"ff4 fs0\"> file contains features for the </span><store><span class=\"ff4 fs0\"> feature store</span>\n◦<model>.json<span class=\"ff4 fs0\"> file contains model name </span><model>\n◦a 'generation' id (e.g., <span class=\"ff2 fs2\">YYYYMM</span> year-month) is part of the feature store and model names\n◦The model's features and weights are sorted alphabetically by name, this makes it easy to see what\nthe commonalities and differences between the two models are.\n◦The stores features are sorted alphabetically by name, this makes it easy to see what the\ncommonalities and differences between the two feature stores are.",
    "hierarchy": [
      "Model Evolution"
    ],
    "pageId": 557
  },
  {
    "content": "[\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201701\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"q\"</span> : <span class=\"fc3\">\"{!func}recip( ms(NOW,last_modified), 3.16e-11, 1, 1)\"</span>\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201701\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"fq\"</span>: [ <span class=\"fc3\">\"{!terms f=category}book\"</span> ]\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201701\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.OriginalScoreFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {}\nÊ }\n]",
    "hierarchy": [
    ],
    "pageId": 558
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201701\"</span>,\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"linearModel201701\"</span>,\nÊ <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.model.LinearModel\"</span>,\nÊ <span class=\"fc2\">\"features\"</span> : [\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"documentRecency\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span> }\nÊ ],\nÊ <span class=\"fc2\">\"params\"</span> : {\nÊ   <span class=\"fc2\">\"weights\"</span> : {\nÊ     <span class=\"fc2\">\"documentRecency\"</span> : <span class=\"fc4\">0.1</span>,\nÊ     <span class=\"fc2\">\"isBook\"</span> : <span class=\"fc4\">1.0</span>,\nÊ     <span class=\"fc2\">\"originalScore\"</span> : <span class=\"fc4\">0.5</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 558
  },
  {
    "content": "[\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201702\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.SolrFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {\nÊ     <span class=\"fc2\">\"fq\"</span>: [ <span class=\"fc3\">\"{!terms f=category}book\"</span> ]\nÊ   }\nÊ },\nÊ {\nÊ   <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201702\"</span>,\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.feature.OriginalScoreFeature\"</span>,\nÊ   <span class=\"fc2\">\"params\"</span> : {}\nÊ }\n]",
    "hierarchy": [
    ],
    "pageId": 559
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"store\"</span> : <span class=\"fc3\">\"featureStore201702\"</span>,\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"treesModel201702\"</span>,\nÊ <span class=\"fc2\">\"class\"</span> : <span class=\"fc3\">\"org.apache.solr.ltr.model.MultipleAdditiveTreesModel\"</span>,\nÊ <span class=\"fc2\">\"features\"</span> : [\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"isBook\"</span> },\nÊ   { <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"originalScore\"</span> }\nÊ ],\nÊ <span class=\"fc2\">\"params\"</span> : {\nÊ   <span class=\"fc2\">\"trees\"</span> : [\nÊ     {\nÊ       <span class=\"fc2\">\"weight\"</span> : <span class=\"fc3\">\"1\"</span>,\nÊ       <span class=\"fc2\">\"root\"</span> : {\nÊ         <span class=\"fc2\">\"feature\"</span> : <span class=\"fc3\">\"isBook\"</span>,\nÊ         <span class=\"fc2\">\"threshold\"</span> : <span class=\"fc3\">\"0.5\"</span>,\nÊ         <span class=\"fc2\">\"left\"</span> : { <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"-100\"</span> },\nÊ         <span class=\"fc2\">\"right\"</span> : {\nÊ           <span class=\"fc2\">\"feature\"</span> : <span class=\"fc3\">\"originalScore\"</span>,\nÊ           <span class=\"fc2\">\"threshold\"</span> : <span class=\"fc3\">\"10.0\"</span>,\nÊ           <span class=\"fc2\">\"left\"</span> : { <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"50\"</span> },\nÊ           <span class=\"fc2\">\"right\"</span> : { <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"75\"</span> }\nÊ         }\nÊ       }\nÊ     },\nÊ     {\nÊ       <span class=\"fc2\">\"weight\"</span> : <span class=\"fc3\">\"2\"</span>,\nÊ       <span class=\"fc2\">\"root\"</span> : {\nÊ         <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"-10\"</span>\nÊ       }\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 560
  },
  {
    "content": "\"Learning to Rank in Solr\" presentation at Lucene/Solr Revolution 2015 in Austin:",
    "hierarchy": [
      "Additional LTR Resources"
    ],
    "pageId": 560
  },
  {
    "content": "◦Slides: <span class=\"link\">http://www.slideshare.net/lucidworks/learning-to-rank-in-solr-presented-by-michael-nilsson-</span>\ndiego-ceccarelli-bloomberg-lp\n◦Video: <span class=\"link\">https://www.youtube.com/watch?v=M7BKwJoh96s</span>",
    "hierarchy": [
      "Additional LTR Resources"
    ],
    "pageId": 560
  },
  {
    "content": "Document Transformers can be used to modify the information returned about each documents in the\nresults of a query.",
    "hierarchy": [
      "Transforming Result Documents"
    ],
    "pageId": 561
  },
  {
    "content": "When executing a request, a document transformer can be used by including it in the <span class=\"code\">fl</span> parameter using\nsquare brackets, for example:",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "fl=id,name,score,[shard]",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "Some transformers allow, or require, local parameters which can be specified as key value pairs inside the\nbrackets:",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "fl=id,name,score,[explain style=nl]",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "As with regular fields, you can change the key used when a Transformer adds a field to a document via a\nprefix:",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "fl=id,name,score,my_val_a:[value v=42 t=int],my_val_b:[value v=7 t=float]",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "The sections below discuss exactly what these various transformers do.",
    "hierarchy": [
      "Transforming Result Documents",
      "Using Document Transformers"
    ],
    "pageId": 561
  },
  {
    "content": "Modifies every document to include the exact same value, as if it were a stored field in every document:",
    "hierarchy": [
      "Transforming Result Documents",
      "Available Transformers",
      "[value] - ValueAugmenterFactory"
    ],
    "pageId": 561
  },
  {
    "content": "q=*:*&fl=id,greeting:[value v='hello']&wt=xml",
    "hierarchy": [
      "Transforming Result Documents",
      "Available Transformers",
      "[value] - ValueAugmenterFactory"
    ],
    "pageId": 561
  },
  {
    "content": "The above query would produce results like the following:",
    "hierarchy": [
      "Transforming Result Documents",
      "Available Transformers",
      "[value] - ValueAugmenterFactory"
    ],
    "pageId": 561
  },
  {
    "content": "Ê <span class=\"fc2\"><doc></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"id\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"greeting\"<span class=\"fc2\">></span></span>hello<span class=\"fc2\"></str></doc></span>\nÊ <span class=\"fc2\"></doc></span>\nÊ ...",
    "hierarchy": [
      "Transforming Result Documents",
      "Available Transformers",
      "[value] - ValueAugmenterFactory"
    ],
    "pageId": 561
  },
  {
    "content": "By default, values are returned as a String, but a “<span class=\"code\">t</span>” parameter can be specified using a value of int, float,\ndouble, or date to force a specific return type:",
    "hierarchy": [
      "Transforming Result Documents",
      "Available Transformers",
      "[value] - ValueAugmenterFactory"
    ],
    "pageId": 561
  },
  {
    "content": "q=*:*&fl=id,my_number:[value v=42 t=int],my_string:[value v=42]",
    "hierarchy": [
    ],
    "pageId": 562
  },
  {
    "content": "In addition to using these request parameters, you can configure additional named instances of\nValueAugmenterFactory, or override the default behavior of the existing <span class=\"ff1 fs1\">[value]</span> transformer in your\nsolrconfig.xml<span class=\"ff2 fs0\"> file:</span>",
    "hierarchy": [
    ],
    "pageId": 562
  },
  {
    "content": "Ê <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"value\"<span class=\"fc1\">></span></span>5<span class=\"fc1\"></int></span>",
    "hierarchy": [
    ],
    "pageId": 562
  },
  {
    "content": "Ê <span class=\"fc1\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaultValue\"<span class=\"fc1\">></span></span>5<span class=\"fc1\"></double></span>",
    "hierarchy": [
    ],
    "pageId": 562
  },
  {
    "content": "The “<span class=\"ff1 fs1\">value</span>” option forces an explicit value to always be used, while the “<span class=\"ff1 fs1\">defaultValue</span>” option provides a\ndefault that can still be overridden using the “<span class=\"ff1 fs1\">v</span>” and “<span class=\"ff1 fs1\">t</span>” local parameters.",
    "hierarchy": [
    ],
    "pageId": 562
  },
  {
    "content": "Augments each document with an inline explanation of its score exactly like the information available about\neach document in the debug section:",
    "hierarchy": [
      "[explain] - ExplainAugmenterFactory"
    ],
    "pageId": 562
  },
  {
    "content": "q=features:cache&fl=id,[explain style=nl]",
    "hierarchy": [
      "[explain] - ExplainAugmenterFactory"
    ],
    "pageId": 562
  },
  {
    "content": "Supported values for <span class=\"ff1 fs1\">style</span> are <span class=\"ff1 fs1\">text</span>, and <span class=\"ff1 fs1\">html</span>, and <span class=\"ff1 fs1\">nl</span> which returns the information as structured data:",
    "hierarchy": [
      "[explain] - ExplainAugmenterFactory"
    ],
    "pageId": 562
  },
  {
    "content": "{ <span class=\"fc5\">\"response\"</span>:{<span class=\"fc5\">\"numFound\"</span>:<span class=\"fc6\">2</span>,<span class=\"fc5\">\"start\"</span>:<span class=\"fc6\">0</span>,<span class=\"fc5\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc5\">\"id\"</span>:<span class=\"fc3\">\"6H500F0\"</span>,\nÊ       <span class=\"fc5\">\"[explain]\"</span>:{\nÊ         <span class=\"fc5\">\"match\"</span>:<span class=\"fc7\">true</span>,\nÊ         <span class=\"fc5\">\"value\"</span>:<span class=\"fc6\">1.052226</span>,\nÊ         <span class=\"fc5\">\"description\"</span>:<span class=\"fc3\">\"weight(features:cache in 2) [DefaultSimilarity], result of:\"</span>,\nÊ         <span class=\"fc5\">\"details\"</span>:[{\n}]}}]}}",
    "hierarchy": [
      "[explain] - ExplainAugmenterFactory"
    ],
    "pageId": 562
  },
  {
    "content": "A default style can be configured by specifying an \"args\" parameter in your configuration:",
    "hierarchy": [
      "[explain] - ExplainAugmenterFactory"
    ],
    "pageId": 562
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"args\"<span class=\"fc1\">></span></span>nl<span class=\"fc1\"></str></span>",
    "hierarchy": [
      "[explain] - ExplainAugmenterFactory"
    ],
    "pageId": 562
  },
  {
    "content": "This transformer returns all <span class=\"fc8\">descendant documents</span> of each parent document matching your query in a flat\nlist nested inside the matching parent document. This is useful when you have indexed nested child\ndocuments and want to retrieve the child documents for the relevant parent documents for any type of",
    "hierarchy": [
      "[child] - ChildDocTransformerFactory"
    ],
    "pageId": 562
  },
  {
    "content": "search query.",
    "hierarchy": [
    ],
    "pageId": 563
  },
  {
    "content": "fl=id,[child parentFilter=doc_type:book childFilter=doc_type:chapter limit=100]",
    "hierarchy": [
    ],
    "pageId": 563
  },
  {
    "content": "Note that this transformer can be used even though the query itself is not a <span class=\"link\">Block Join query</span>.",
    "hierarchy": [
    ],
    "pageId": 563
  },
  {
    "content": "When using this transformer, the <span class=\"ff2 fs1\">parentFilter</span> parameter must be specified, and works the same as in all\nBlock Join Queries, additional optional parameters are:",
    "hierarchy": [
    ],
    "pageId": 563
  },
  {
    "content": "childFilter - query to filter which child documents should be included, this can be particularly useful\nwhen you have multiple levels of hierarchical documents (default: all children)",
    "hierarchy": [
    ],
    "pageId": 563
  },
  {
    "content": "limit - the maximum number of child documents to be returned per parent document (default: 10)",
    "hierarchy": [
    ],
    "pageId": 563
  },
  {
    "content": "This transformer adds information about what shard each individual document came from in a distributed\nrequest.",
    "hierarchy": [
      "[shard] - ShardAugmenterFactory"
    ],
    "pageId": 563
  },
  {
    "content": "ShardAugmenterFactory does not support any request parameters, or configuration options.",
    "hierarchy": [
      "[shard] - ShardAugmenterFactory"
    ],
    "pageId": 563
  },
  {
    "content": "This transformer adds the internal Lucene document id to each document – this is primarily only useful for\ndebugging purposes.",
    "hierarchy": [
      "[docid] - DocIdAugmenterFactory"
    ],
    "pageId": 563
  },
  {
    "content": "DocIdAugmenterFactory does not support any request parameters, or configuration options.",
    "hierarchy": [
      "[docid] - DocIdAugmenterFactory"
    ],
    "pageId": 563
  },
  {
    "content": "These transformers are available only when using the <span class=\"link\">Query Elevation Component</span>.",
    "hierarchy": [
      "[elevated] and [excluded]"
    ],
    "pageId": 563
  },
  {
    "content": "[elevated] annotates each document to indicate if it was elevated or not.",
    "hierarchy": [
      "[elevated] and [excluded]"
    ],
    "pageId": 563
  },
  {
    "content": "[excluded] annotates each document to indicate if it would have been excluded - this is only supported\nif you also use the <span class=\"ff2 fs1\">markExcludes</span> parameter.",
    "hierarchy": [
      "[elevated] and [excluded]"
    ],
    "pageId": 563
  },
  {
    "content": "fl=id,[elevated],[excluded]&excludeIds=GB18030TEST&elevateIds=6H500F0&markExcludes=true",
    "hierarchy": [
      "[elevated] and [excluded]"
    ],
    "pageId": 563
  },
  {
    "content": "{ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">32</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"6H500F0\"</span>,\nÊ       <span class=\"fc1\">\"[elevated]\"</span>:<span class=\"fc4\">true</span>,\nÊ       <span class=\"fc1\">\"[excluded]\"</span>:<span class=\"fc4\">false</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"GB18030TEST\"</span>,\nÊ       <span class=\"fc1\">\"[elevated]\"</span>:<span class=\"fc4\">false</span>,\nÊ       <span class=\"fc1\">\"[excluded]\"</span>:<span class=\"fc4\">true</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"SP2514N\"</span>,\nÊ       <span class=\"fc1\">\"[elevated]\"</span>:<span class=\"fc4\">false</span>,\nÊ       <span class=\"fc1\">\"[excluded]\"</span>:<span class=\"fc4\">false</span>},\n]}}",
    "hierarchy": [
    ],
    "pageId": 564
  },
  {
    "content": "These transformers replace field value containing a string representation of a valid XML or JSON structure\nwith the actual raw XML or JSON structure rather than just the string value. Each applies only to the specific\nwriter, such that <span class=\"ff1 fs2\">[json]</span> only applies to <span class=\"ff1 fs2\">wt=json</span> and <span class=\"ff1 fs2\">[xml]</span> only applies to <span class=\"ff1 fs2\">wt=xml</span>.",
    "hierarchy": [
      "[json] / [xml]"
    ],
    "pageId": 564
  },
  {
    "content": "fl=id,source_s:[json]&wt=json",
    "hierarchy": [
      "[json] / [xml]"
    ],
    "pageId": 564
  },
  {
    "content": "This transformer executes a separate query per transforming document passing document fields as an\ninput for subquery parameters. It's usually used with <span class=\"ff1 fs2\">{!join}</span> and <span class=\"ff1 fs2\">{!parent}</span> query parsers, and is intended\nto be an improvement for <span class=\"ff1 fs2\">[child]</span>.",
    "hierarchy": [
      "[subquery]"
    ],
    "pageId": 564
  },
  {
    "content": "It must be given an unique name: <span class=\"ff1 fs2\">fl=*,children:[subquery]</span>",
    "hierarchy": [
      "[subquery]"
    ],
    "pageId": 564
  },
  {
    "content": "There might be a few of them, e.g., <span class=\"ff1 fs2\">fl=*,sons:[subquery],daughters:[subquery]</span>.",
    "hierarchy": [
      "[subquery]"
    ],
    "pageId": 564
  },
  {
    "content": "Every <span class=\"ff1 fs2\">[subquery]</span> occurrence adds a field into a result document with the given name, the value of this\nfield is a document list, which is a result of executing subquery using document fields as an input.",
    "hierarchy": [
      "[subquery]"
    ],
    "pageId": 564
  },
  {
    "content": "Here is how it looks like in various formats:",
    "hierarchy": [
      "[subquery]"
    ],
    "pageId": 564
  },
  {
    "content": "Ê <span class=\"fc1\"><result</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"response\"</span> <span class=\"fc2\">numFound</span>=<span class=\"fc3\">\"2\"</span> <span class=\"fc2\">start</span>=<span class=\"fc3\">\"0\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><doc></span>\nÊ        <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ        <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"title\"<span class=\"fc1\">></span></span>\nÊ           <span class=\"fc1\"><str></span>vdczoypirs<span class=\"fc1\"></str></span>\nÊ        <span class=\"fc1\"></arr></span>\nÊ        <span class=\"fc1\"><result</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"children\"</span> <span class=\"fc2\">numFound</span>=<span class=\"fc3\">\"1\"</span> <span class=\"fc2\">start</span>=<span class=\"fc3\">\"0\"<span class=\"fc1\">></span></span>\nÊ           <span class=\"fc1\"><doc></span>\nÊ              <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc1\">></span></span>2<span class=\"fc1\"></int></span>\nÊ              <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"title\"<span class=\"fc1\">></span></span>\nÊ                 <span class=\"fc1\"><str></span>vdczoypirs<span class=\"fc1\"></str></span>\nÊ              <span class=\"fc1\"></arr></span>\nÊ           <span class=\"fc1\"></doc></span>\nÊ        <span class=\"fc1\"></result></span>\nÊ     <span class=\"fc1\"></doc></span>\nÊ ...",
    "hierarchy": [
    ],
    "pageId": 565
  },
  {
    "content": "{ <span class=\"fc4\">\"response\"</span>:{\nÊ   <span class=\"fc4\">\"numFound\"</span>:<span class=\"fc5\">2</span>, <span class=\"fc4\">\"start\"</span>:<span class=\"fc5\">0</span>,\nÊ   <span class=\"fc4\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc4\">\"id\"</span>:<span class=\"fc5\">1</span>,\nÊ       <span class=\"fc4\">\"subject\"</span>:[<span class=\"fc3\">\"parentDocument\"</span>],\nÊ       <span class=\"fc4\">\"title\"</span>:[<span class=\"fc3\">\"xrxvomgu\"</span>],\nÊ       <span class=\"fc4\">\"children\"</span>:{\nÊ          <span class=\"fc4\">\"numFound\"</span>:<span class=\"fc5\">1</span>, <span class=\"fc4\">\"start\"</span>:<span class=\"fc5\">0</span>,\nÊ          <span class=\"fc4\">\"docs\"</span>:[\nÊ             { <span class=\"fc4\">\"id\"</span>:<span class=\"fc5\">2</span>,\nÊ               <span class=\"fc4\">\"cat\"</span>:[<span class=\"fc3\">\"childDocument\"</span>]\nÊ             }\nÊ           ]\nÊ     }}]}}",
    "hierarchy": [
    ],
    "pageId": 565
  },
  {
    "content": "ÊSolrDocumentList subResults = (SolrDocumentList)doc.getFieldValue(<span class=\"fc3\">\"children\"</span>);",
    "hierarchy": [
    ],
    "pageId": 565
  },
  {
    "content": "To appear in subquery document list, a field should be specified in subquery's <span class=\"ff1 fs1\">fl</span> parameter e.g., <span class=\"ff1 fs1\">foo.fl</span> (it\nis not necessary to specify in main one’s <span class=\"ff1 fs1\">fl</span>). Of course, you can use wildcard in this parameter. For example,\nif field title should appear in categories subquery, it can be done via one of these ways.",
    "hierarchy": [
      "Subquery Result Fields"
    ],
    "pageId": 565
  },
  {
    "content": "fl=...id,categories:[subquery]&categories.fl=title&categories.q=...\nfl=...id,categories:[subquery]&categories.fl=*&categories.q=...",
    "hierarchy": [
      "Subquery Result Fields"
    ],
    "pageId": 565
  },
  {
    "content": "If a subquery is declared as <span class=\"ff1 fs1\">fl=*,foo:[subquery]</span>, subquery parameters are prefixed with the given name",
    "hierarchy": [
      "Subquery Parameters Shift"
    ],
    "pageId": 565
  },
  {
    "content": "and period. For example:",
    "hierarchy": [
    ],
    "pageId": 566
  },
  {
    "content": "q=<span class=\"code\">:</span>&fl=*,<span class=\"code\">foo</span>:[subquery]&<span class=\"code\">foo.</span>q=to be continued&<span class=\"code\">foo.</span>rows=10&<span class=\"code\">foo.</span>sort=id desc",
    "hierarchy": [
    ],
    "pageId": 566
  },
  {
    "content": "It's necessary to pass some document field values as a parameter for subquery. It’s supported via implicit\nrow.fieldname<span class=\"ff1 fs0\"> parameter, and can be (but might not only) referred via Local Parameters syntax:</span>\nq=namne:john&fl=name,id,depts:[subquery]&depts.q={!terms f=id <span class=\"code\">v=$row.dept_id</span>}&depts.rows=10",
    "hierarchy": [
      "Document Field as an Input for Subquery Parameters"
    ],
    "pageId": 566
  },
  {
    "content": "Here departments are retrieved per every employee in search result. We can say that it's like SQL <span class=\"ff2 fs1\">join ON</span>\nemp.dept_id=dept.id<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Document Field as an Input for Subquery Parameters"
    ],
    "pageId": 566
  },
  {
    "content": "Note, when a document field has multiple values they are concatenated with a comma by default. This can\nbe changed with the local parameter <span class=\"ff2 fs1\">foo:[subquery separator=' ']</span>, this mimics <span class=\"code\">{!terms}</span> to work\nsmoothly with it.",
    "hierarchy": [
      "Document Field as an Input for Subquery Parameters"
    ],
    "pageId": 566
  },
  {
    "content": "To log substituted subquery request parameters, add the corresponding parameter names, as in\ndepts.logParamsList=q,fl,rows,<span class=\"code\">row.dept_id</span>",
    "hierarchy": [
      "Document Field as an Input for Subquery Parameters"
    ],
    "pageId": 566
  },
  {
    "content": "Use <span class=\"ff2 fs1\">foo:[subquery fromIndex=departments]</span> to invoke subquery on another core on the same node, it's\nwhat <span class=\"code\">{!join}</span> does for non-SolrCloud mode. But in case of SolrCloud just (and only) explicitly specify its\nnative parameters like <span class=\"ff2 fs1\">collection, shards</span> for subquery, e.g.:",
    "hierarchy": [
      "Cores and Collections in SolrCloud"
    ],
    "pageId": 566
  },
  {
    "content": "q=<span class=\"code\">:</span>&fl=*,foo:[subquery]&foo.q=cloud&<span class=\"code\">foo.collection</span>=departments",
    "hierarchy": [
      "Cores and Collections in SolrCloud"
    ],
    "pageId": 566
  },
  {
    "content": "If subquery collection has a different unique key field name (let's say <span class=\"ff2 fs1\">foo_id</span> at contrast to\nid<span class=\"ff1 fs0\"> in primary collection), add the following parameters to accommodate this difference:</span>\nfoo.fl=id:foo_id&foo.distrib.singlePass=true<span class=\"ff1 fs0\">. Otherwise you’ll get</span>\nNullPoniterException<span class=\"ff1 fs0\"> from </span>QueryComponent.mergeIds<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Cores and Collections in SolrCloud"
    ],
    "pageId": 566
  },
  {
    "content": "Formats spatial data from a spatial field using a designated format type name. Two inner parameters are\nrequired: <span class=\"ff2 fs1\">f</span> for the field name, and <span class=\"ff2 fs1\">w</span> for the format name. Example: <span class=\"ff2 fs1\">geojson:[geo f=mySpatialField</span>\nw=GeoJSON]<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "[geo] - Geospatial formatter"
    ],
    "pageId": 566
  },
  {
    "content": "Normally you'll simply be consistent in choosing the format type you want by setting the <span class=\"ff2 fs1\">format</span> attribute on\nthe spatial field type to <span class=\"ff2 fs1\">WKT</span> or <span class=\"ff2 fs1\">GeoJSON</span> – see the section <span class=\"link\">Spatial Search</span> for more information. If you are\nconsistent, it’ll come out the way you stored it. This transformer offers a convenience to transform the\nspatial format to something different on retrieval.",
    "hierarchy": [
      "[geo] - Geospatial formatter"
    ],
    "pageId": 566
  },
  {
    "content": "In addition, this feature is very useful with the <span class=\"ff2 fs1\">RptWithGeometrySpatialField</span> to avoid double-storage of\nthe potentially large vector geometry. This transformer will detect that field type and fetch the geometry\nfrom an internal compact binary representation on disk (in docValues), and then format it as desired. As\nsuch, you needn't mark the field as stored, which would be redundant. In a sense this double-storage\nbetween docValues and stored-value storage isn’t unique to spatial but with polygonal geometry it can be a\nlot of data, and furthermore you’d like to avoid storing it in a verbose format (like GeoJSON or WKT).",
    "hierarchy": [
      "[geo] - Geospatial formatter"
    ],
    "pageId": 566
  },
  {
    "content": "The \"LTR\" prefix stands for <span class=\"link\">Learning To Rank</span>. This transformer returns the values of features and it can be\nused for feature extraction and feature logging.",
    "hierarchy": [
      "[features] - LTRFeatureLoggerTransformerFactory"
    ],
    "pageId": 567
  },
  {
    "content": "fl=id,[features store=yourFeatureStore]",
    "hierarchy": [
      "[features] - LTRFeatureLoggerTransformerFactory"
    ],
    "pageId": 567
  },
  {
    "content": "This will return the values of the features in the <span class=\"code\">yourFeatureStore</span> store.",
    "hierarchy": [
      "[features] - LTRFeatureLoggerTransformerFactory"
    ],
    "pageId": 567
  },
  {
    "content": "fl=id,[features]&rq={!ltr model=yourModel}",
    "hierarchy": [
      "[features] - LTRFeatureLoggerTransformerFactory"
    ],
    "pageId": 567
  },
  {
    "content": "If you use <span class=\"code\">[features]</span> together with an Learning-To-Rank reranking query then the values of the features in\nthe reranking model (<span class=\"code\">yourModel</span>) will be returned.",
    "hierarchy": [
      "[features] - LTRFeatureLoggerTransformerFactory"
    ],
    "pageId": 567
  },
  {
    "content": "The SuggestComponent in Solr provides users with automatic suggestions for query terms.",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "You can use this to implement a powerful auto-suggest feature in your search application.",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "Although it is possible to use the <span class=\"link\">Spell Checking</span> functionality to power autosuggest behavior, Solr has a\ndedicated <span class=\"link\">SuggestComponent</span> designed for this functionality.",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "This approach utilizes Lucene's Suggester implementation and supports all of the lookup implementations\navailable in Lucene.",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "The main features of this Suggester are:",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "Lookup implementation pluggability",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "Term dictionary pluggability, giving you the flexibility to choose the dictionary implementation",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "Distributed support",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "The <span class=\"code\">solrconfig.xml</span> found in Solr's “<span class=\"code\">techproducts</span>” example has a Suggester implementation configured\nalready. For more on search components, see the section <span class=\"link\">RequestHandlers and SearchComponents in</span>\nSolrConfig<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "The “<span class=\"code\">techproducts</span>” example <span class=\"code\">solrconfig.xml</span> has a <span class=\"code\">suggest</span> search component and a <span class=\"code\">/suggest</span> request\nhandler already configured. You can use that as the basis for your configuration, or create it from scratch, as\ndetailed below.",
    "hierarchy": [
      "Suggester"
    ],
    "pageId": 568
  },
  {
    "content": "The first step is to add a search component to <span class=\"code\">solrconfig.xml</span> and tell it to use the SuggestComponent.\nHere is some sample code that could be used.",
    "hierarchy": [
      "Suggester",
      "Adding the Suggest Search Component"
    ],
    "pageId": 568
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggester\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"name\"<span class=\"fc3\">></span></span>mySuggester<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"lookupImpl\"<span class=\"fc3\">></span></span>FuzzyLookupFactory<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"dictionaryImpl\"<span class=\"fc3\">></span></span>DocumentDictionaryFactory<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"field\"<span class=\"fc3\">></span></span>cat<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"weightField\"<span class=\"fc3\">></span></span>price<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggestAnalyzerFieldType\"<span class=\"fc3\">></span></span>string<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"buildOnStartup\"<span class=\"fc3\">></span></span>false<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Suggester",
      "Adding the Suggest Search Component"
    ],
    "pageId": 568
  },
  {
    "content": "The Suggester search component takes several configuration parameters.",
    "hierarchy": [
      "Suggester",
      "Adding the Suggest Search Component",
      "Suggester Search Component Parameters"
    ],
    "pageId": 568
  },
  {
    "content": "The choice of the lookup implementation (<span class=\"code\">lookupImpl</span>, how terms are found in the suggestion dictionary)\nand the dictionary implementation (<span class=\"code\">dictionaryImpl</span>, how terms are stored in the suggestion dictionary) will",
    "hierarchy": [
      "Suggester",
      "Adding the Suggest Search Component",
      "Suggester Search Component Parameters"
    ],
    "pageId": 568
  },
  {
    "content": "dictate some of the parameters required.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "Below are the main parameters that can be used no matter what lookup or dictionary implementation is\nused. In the following sections additional parameters are provided for each implementation.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "searchComponent name\nArbitrary name for the search component.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "name\nA symbolic name for this suggester. You can refer to this name in the URL parameters and in the\nSearchHandler configuration. It is possible to have multiples of these in one <span class=\"ff2 fs1\">solrconfig.xml</span> file.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "lookupImpl\nLookup implementation. There are several possible implementations, described below in the section\nLookup Implementations<span class=\"fc0\">. If not set, the default lookup is <span class=\"ff2 fs1\">JaspellLookupFactory</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "dictionaryImpl\nThe dictionary implementation to use. There are several possible implementations, described below in\nthe section <span class=\"link\">Dictionary Implementations</span>.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "If not set, the default dictionary implementation is <span class=\"ff2 fs1\">HighFrequencyDictionaryFactory</span>. However, if a\nsourceLocation<span class=\"ff1 fs0\"> is used, the dictionary implementation will be </span>FileDictionaryFactory<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "field\nA field from the index to use as the basis of suggestion terms. If <span class=\"ff2 fs1\">sourceLocation</span> is empty (meaning any\ndictionary implementation other than <span class=\"ff2 fs1\">FileDictionaryFactory</span>), then terms from this field in the index\nwill be used.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "To be used as the basis for a suggestion, the field must be stored. You may want to <span class=\"link\">use copyField rules</span> to\ncreate a special 'suggest' field comprised of terms from other fields in documents. In any event, you very\nlikely want a minimal amount of analysis on the field, so an additional option is to create a field type in\nyour schema that only uses basic tokenizers or filters. One option for such a field type is shown here:",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "Ê <span class=\"fc2\"><analyzer></span>\nÊ   <span class=\"fc2\"><tokenizer</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardTokenizerFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.StandardFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><filter</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.LowerCaseFilterFactory\"<span class=\"fc2\">/></span></span>\nÊ <span class=\"fc2\"></analyzer></span>",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "However, this minimal analysis is not required if you want more analysis to occur on terms. If using the\nAnalyzingLookupFactory<span class=\"ff1 fs0\"> as your </span>lookupImpl<span class=\"ff1 fs0\">, however, you have the option of defining the field type</span>\nrules to use for index and query time analysis.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "sourceLocation\nThe path to the dictionary file if using the <span class=\"ff2 fs1\">FileDictionaryFactory</span>. If this value is empty then the main\nindex will be used as a source of terms and weights.",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "storeDir",
    "hierarchy": [
    ],
    "pageId": 569
  },
  {
    "content": "The location to store the dictionary file.",
    "hierarchy": [
    ],
    "pageId": 570
  },
  {
    "content": "buildOnCommit<span class=\"code\"> and </span>buildOnOptimize\nIf <span class=\"ff2 fs1\">true</span>, the lookup data structure will be rebuilt after soft-commit. If <span class=\"ff2 fs1\">false</span>, the default, then the lookup\ndata will be built only when requested by URL parameter <span class=\"ff2 fs1\">suggest.build=true</span>. Use <span class=\"ff2 fs1\">buildOnCommit</span> to\nrebuild the dictionary with every soft-commit, or <span class=\"ff2 fs1\">buildOnOptimize</span> to build the dictionary only when the\nindex is optimized.",
    "hierarchy": [
    ],
    "pageId": 570
  },
  {
    "content": "Some lookup implementations may take a long time to build, especially with large indexes. In such cases,\nusing <span class=\"ff2 fs1\">buildOnCommit</span> or <span class=\"ff2 fs1\">buildOnOptimize</span>, particularly with a high frequency of softCommits is not\nrecommended; it's recommended instead to build the suggester at a lower frequency by manually\nissuing requests with <span class=\"ff2 fs1\">suggest.build=true</span>.",
    "hierarchy": [
    ],
    "pageId": 570
  },
  {
    "content": "buildOnStartup\nIf <span class=\"ff2 fs1\">true,</span> then the lookup data structure will be built when Solr starts or when the core is reloaded. If this\nparameter is not specified, the suggester will check if the lookup data structure is present on disk and\nbuild it if not found.",
    "hierarchy": [
    ],
    "pageId": 570
  },
  {
    "content": "Enabling this to <span class=\"ff2 fs1\">true</span> could lead to the core talking longer to load (or reload) as the suggester data\nstructure needs to be built, which can sometimes take a long time. It's usually preferred to have this\nsetting set to <span class=\"ff2 fs1\">false</span>, the default, and build suggesters manually issuing requests with\nsuggest.build=true<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 570
  },
  {
    "content": "The <span class=\"ff2 fs1\">lookupImpl</span> parameter defines the algorithms used to look up terms in the suggest index. There are\nseveral possible implementations to choose from, and some require additional parameters to be configured.",
    "hierarchy": [
      "Lookup Implementations"
    ],
    "pageId": 570
  },
  {
    "content": "A lookup that first analyzes the incoming text and adds the analyzed form to a weighted FST, and then does\nthe same thing at lookup time.",
    "hierarchy": [
      "Lookup Implementations",
      "AnalyzingLookupFactory"
    ],
    "pageId": 570
  },
  {
    "content": "This implementation uses the following additional properties:",
    "hierarchy": [
      "Lookup Implementations",
      "AnalyzingLookupFactory"
    ],
    "pageId": 570
  },
  {
    "content": "suggestAnalyzerFieldType\nThe field type to use for the query-time and build-time term suggestion analysis.",
    "hierarchy": [
      "Lookup Implementations",
      "AnalyzingLookupFactory"
    ],
    "pageId": 570
  },
  {
    "content": "exactMatchFirst\nIf <span class=\"ff2 fs1\">true</span>, the default, exact suggestions are returned first, even if they are prefixes or other strings in the\nFST have larger weights.",
    "hierarchy": [
      "Lookup Implementations",
      "AnalyzingLookupFactory"
    ],
    "pageId": 570
  },
  {
    "content": "preserveSep\nIf <span class=\"ff2 fs1\">true</span>, the default, then a separator between tokens is preserved. This means that suggestions are\nsensitive to tokenization (e.g., baseball is different from base ball).",
    "hierarchy": [
      "Lookup Implementations",
      "AnalyzingLookupFactory"
    ],
    "pageId": 570
  },
  {
    "content": "preservePositionIncrements\nIf <span class=\"ff2 fs1\">true</span>, the suggester will preserve position increments. This means that token filters which leave gaps\n(for example, when StopFilter matches a stopword) the position would be respected when building the\nsuggester. The default is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "Lookup Implementations",
      "AnalyzingLookupFactory"
    ],
    "pageId": 570
  },
  {
    "content": "This is a suggester which is an extension of the AnalyzingSuggester but is fuzzy in nature. The similarity is\nmeasured by the Levenshtein algorithm.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "This implementation uses the following additional properties:",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "exactMatchFirst\nIf <span class=\"code\">true</span>, the default, exact suggestions are returned first, even if they are prefixes or other strings in the\nFST have larger weights.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "preserveSep\nIf <span class=\"code\">true</span>, the default, then a separator between tokens is preserved. This means that suggestions are\nsensitive to tokenization (e.g., baseball is different from base ball).",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "maxSurfaceFormsPerAnalyzedForm\nThe maximum number of surface forms to keep for a single analyzed form. When there are too many\nsurface forms we discard the lowest weighted ones.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "maxGraphExpansions\nWhen building the FST (\"index-time\"), we add each path through the tokenstream graph as an individual\nentry. This places an upper-bound on how many expansions will be added for a single suggestion. The\ndefault is <span class=\"code\">-1</span> which means there is no limit.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "preservePositionIncrements\nIf <span class=\"code\">true</span>, the suggester will preserve position increments. This means that token filters which leave gaps\n(for example, when StopFilter matches a stopword) the position would be respected when building the\nsuggester. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "maxEdits\nThe maximum number of string edits allowed. The system's hard limit is <span class=\"code\">2</span>. The default is <span class=\"code\">1</span>.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "transpositions\nIf <span class=\"code\">true</span>, the default, transpositions should be treated as a primitive edit operation.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "nonFuzzyPrefix\nThe length of the common non fuzzy prefix match which must match a suggestion. The default is <span class=\"code\">1</span>.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "minFuzzyLength\nThe minimum length of query before which any string edits will be allowed. The default is <span class=\"code\">3</span>.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "unicodeAware\nIf <span class=\"code\">true</span>, the <span class=\"code\">maxEdits</span>, <span class=\"code\">minFuzzyLength</span>, <span class=\"code\">transpositions</span> and <span class=\"code\">nonFuzzyPrefix</span> parameters will be\nmeasured in unicode code points (actual letters) instead of bytes. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "FuzzyLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "Analyzes the input text and then suggests matches based on prefix matches to any tokens in the indexed\ntext. This uses a Lucene index for its dictionary.",
    "hierarchy": [
      "AnalyzingInfixLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "This implementation uses the following additional properties.",
    "hierarchy": [
      "AnalyzingInfixLookupFactory"
    ],
    "pageId": 571
  },
  {
    "content": "indexPath\nWhen using <span class=\"ff1 fs0\">AnalyzingInfixSuggester</span> you can provide your own path where the index will get built. The\ndefault is <span class=\"ff1 fs0\">analyzingInfixSuggesterIndexDir</span> and will be created in your collection's <span class=\"ff1 fs0\">data/</span> directory.",
    "hierarchy": [
    ],
    "pageId": 572
  },
  {
    "content": "minPrefixChars\nMinimum number of leading characters before PrefixQuery is used (default is <span class=\"ff1 fs0\">4</span>). Prefixes shorter than\nthis are indexed as character ngrams (increasing index size but making lookups faster).",
    "hierarchy": [
    ],
    "pageId": 572
  },
  {
    "content": "allTermsRequired\nBoolean option for multiple terms. The default is <span class=\"ff1 fs0\">true</span>, all terms will be required.",
    "hierarchy": [
    ],
    "pageId": 572
  },
  {
    "content": "highlight\nHighlight suggest terms. Default is <span class=\"ff1 fs0\">true</span>.",
    "hierarchy": [
    ],
    "pageId": 572
  },
  {
    "content": "This implementation supports <span class=\"link\">Context Filtering</span>.",
    "hierarchy": [
    ],
    "pageId": 572
  },
  {
    "content": "An extension of the <span class=\"ff1 fs0\">AnalyzingInfixSuggester</span> which provides additional functionality to weight prefix\nmatches across the matched documents. You can tell it to score higher if a hit is closer to the start of the\nsuggestion or vice versa.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "This implementation uses the following additional properties:",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "blenderType\nUsed to calculate weight coefficient using the position of the first matching word. Available options are:",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "position_linear\nweightFieldValue * (1 - 0.10*position)<span class=\"ff2 fs1\">: Matches to the start will be given a higher score. This is</span>\nthe default.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "position_reciprocal\nweightFieldValue / (1 + position)<span class=\"ff2 fs1\">: Matches to the end will be given a higher score.</span>",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "exponent\nAn optional configuration variable for <span class=\"ff1 fs0\">position_reciprocal</span> to control how fast the score will\nincrease or decrease. Default <span class=\"ff1 fs0\">2.0</span>.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "numFactor\nThe factor to multiply the number of searched elements from which results will be pruned. Default is <span class=\"ff1 fs0\">10</span>.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "indexPath\nWhen using <span class=\"ff1 fs0\">BlendedInfixSuggester</span> you can provide your own path where the index will get built. The\ndefault directory name is <span class=\"ff1 fs0\">blendedInfixSuggesterIndexDir</span> and will be created in your collection's data\ndirectory.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "minPrefixChars\nMinimum number of leading characters before PrefixQuery is used (the default is <span class=\"ff1 fs0\">4</span>). Prefixes shorter\nthan this are indexed as character ngrams, which increases index size but makes lookups faster.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "This implementation supports <span class=\"link\">Context Filtering</span>.",
    "hierarchy": [
      "BlendedInfixLookupFactory"
    ],
    "pageId": 572
  },
  {
    "content": "It looks at the last tokens plus the prefix of whatever final token the user is typing, if present, to predict the\nmost likely next token. The number of previous tokens that need to be considered can also be specified. This\nsuggester would only be used as a fallback, when the primary suggester fails to find any suggestions.",
    "hierarchy": [
      "FreeTextLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "This implementation uses the following additional properties:",
    "hierarchy": [
      "FreeTextLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "suggestFreeTextAnalyzerFieldType\nThe analyzer used at \"query-time\" and \"build-time\" to analyze suggestions. This parameter is required.",
    "hierarchy": [
      "FreeTextLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "ngrams\nThe max number of tokens out of which singles will be made the dictionary. The default value is <span class=\"code\">2</span>.\nIncreasing this would mean you want more than the previous 2 tokens to be taken into consideration\nwhen making the suggestions.",
    "hierarchy": [
      "FreeTextLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "An automaton-based lookup. This implementation is slower to build, but provides the lowest memory cost.\nWe recommend using this implementation unless you need more sophisticated matching results, in which\ncase you should use the Jaspell implementation.",
    "hierarchy": [
      "FSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "This implementation uses the following additional properties:",
    "hierarchy": [
      "FSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "exactMatchFirst\nIf <span class=\"code\">true</span>, the default, exact suggestions are returned first, even if they are prefixes or other strings in the\nFST have larger weights.",
    "hierarchy": [
      "FSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "weightBuckets\nThe number of separate buckets for weights which the suggester will use while building its dictionary.",
    "hierarchy": [
      "FSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "A simple compact ternary trie based lookup.",
    "hierarchy": [
      "TSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "A weighted automaton representation which is an alternative to <span class=\"code\">FSTLookup</span> for more fine-grained ranking.\nWFSTLookup<span class=\"ff2 fs0\"> does not use buckets, but instead a shortest path algorithm.</span>",
    "hierarchy": [
      "WFSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "Note that it expects weights to be whole numbers. If weight is missing it's assumed to be <span class=\"code\">1.0</span>. Weights affect\nthe sorting of matching suggestions when <span class=\"code\">spellcheck.onlyMorePopular=true</span> is selected: weights are\ntreated as \"popularity\" score, with higher weights preferred over suggestions with lower weights.",
    "hierarchy": [
      "WFSTLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "A more complex lookup based on a ternary trie from the <span class=\"link\">JaSpell</span> project. Use this implementation if you need\nmore sophisticated matching results.",
    "hierarchy": [
      "JaspellLookupFactory"
    ],
    "pageId": 573
  },
  {
    "content": "The dictionary implementations define how terms are stored. There are several options, and multiple\ndictionaries can be used in a single request if necessary.",
    "hierarchy": [
      "Dictionary Implementations"
    ],
    "pageId": 573
  },
  {
    "content": "A dictionary with terms, weights, and an optional payload taken from the index.",
    "hierarchy": [
      "DocumentDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "This dictionary implementation takes the following parameters in addition to parameters described for the\nSuggester generally and for the lookup implementation:",
    "hierarchy": [
      "DocumentDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "weightField\nA field that is stored or a numeric DocValue field. This parameter is optional.",
    "hierarchy": [
      "DocumentDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "payloadField\nThe <span class=\"code\">payloadField</span> should be a field that is stored. This parameter is optional.",
    "hierarchy": [
      "DocumentDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "contextField\nField to be used for context filtering. Note that only some lookup implementations support filtering.",
    "hierarchy": [
      "DocumentDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "This dictionary implementation is the same as the <span class=\"code\">DocumentDictionaryFactory</span> but allows users to specify\nan arbitrary expression into the <span class=\"code\">weightExpression</span> tag.",
    "hierarchy": [
      "DocumentExpressionDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "This dictionary implementation takes the following parameters in addition to parameters described for the\nSuggester generally and for the lookup implementation:",
    "hierarchy": [
      "DocumentExpressionDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "payloadField\nThe <span class=\"code\">payloadField</span> should be a field that is stored. This parameter is optional.",
    "hierarchy": [
      "DocumentExpressionDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "weightExpression\nAn arbitrary expression used for scoring the suggestions. The fields used must be numeric fields. This\nparameter is required.",
    "hierarchy": [
      "DocumentExpressionDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "contextField\nField to be used for context filtering. Note that only some lookup implementations support filtering.",
    "hierarchy": [
      "DocumentExpressionDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "This dictionary implementation allows adding a threshold to prune out less frequent terms in cases where\nvery common terms may overwhelm other terms.",
    "hierarchy": [
      "HighFrequencyDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "This dictionary implementation takes one parameter in addition to parameters described for the Suggester\ngenerally and for the lookup implementation:",
    "hierarchy": [
      "HighFrequencyDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "threshold\nA value between zero and one representing the minimum fraction of the total documents where a term\nshould appear in order to be added to the lookup dictionary.",
    "hierarchy": [
      "HighFrequencyDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "This dictionary implementation allows using an external file that contains suggest entries. Weights and\npayloads can also be used.",
    "hierarchy": [
      "FileDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "If using a dictionary file, it should be a plain text file in UTF-8 encoding. You can use both single terms and\nphrases in the dictionary file. If adding weights or payloads, those should be separated from terms using the",
    "hierarchy": [
      "FileDictionaryFactory"
    ],
    "pageId": 574
  },
  {
    "content": "delimiter defined with the <span class=\"ff2 fs1\">fieldDelimiter</span> property (the default is '\\t', the tab representation). If using\npayloads, the first line in the file <span class=\"code\">must</span> specify a payload.",
    "hierarchy": [
    ],
    "pageId": 575
  },
  {
    "content": "This dictionary implementation takes one parameter in addition to parameters described for the Suggester\ngenerally and for the lookup implementation:",
    "hierarchy": [
    ],
    "pageId": 575
  },
  {
    "content": "fieldDelimiter\nSpecifies the delimiter to be used separating the entries, weights and payloads. The default is tab (<span class=\"ff2 fs1\">\\t</span>).",
    "hierarchy": [
    ],
    "pageId": 575
  },
  {
    "content": "acquire\naccidentally    2.0\naccommodate 3.0",
    "hierarchy": [
    ],
    "pageId": 575
  },
  {
    "content": "It is possible to include multiple <span class=\"ff2 fs1\">dictionaryImpl</span> definitions in a single SuggestComponent definition.",
    "hierarchy": [
      "Multiple Dictionaries"
    ],
    "pageId": 575
  },
  {
    "content": "To do this, simply define separate suggesters, as in this example:",
    "hierarchy": [
      "Multiple Dictionaries"
    ],
    "pageId": 575
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggester\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"name\"<span class=\"fc3\">></span></span>mySuggester<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"lookupImpl\"<span class=\"fc3\">></span></span>FuzzyLookupFactory<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"dictionaryImpl\"<span class=\"fc3\">></span></span>DocumentDictionaryFactory<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"field\"<span class=\"fc3\">></span></span>cat<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"weightField\"<span class=\"fc3\">></span></span>price<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggestAnalyzerFieldType\"<span class=\"fc3\">></span></span>string<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggester\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"name\"<span class=\"fc3\">></span></span>altSuggester<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"dictionaryImpl\"<span class=\"fc3\">></span></span>DocumentExpressionDictionaryFactory<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"lookupImpl\"<span class=\"fc3\">></span></span>FuzzyLookupFactory<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"field\"<span class=\"fc3\">></span></span>product_name<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"weightExpression\"<span class=\"fc3\">></span></span>((price * 2) + ln(popularity))<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"sortField\"<span class=\"fc3\">></span></span>weight<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"sortField\"<span class=\"fc3\">></span></span>price<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"storeDir\"<span class=\"fc3\">></span></span>suggest_fuzzy_doc_expr_dict<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggestAnalyzerFieldType\"<span class=\"fc3\">></span></span>text_en<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Multiple Dictionaries"
    ],
    "pageId": 575
  },
  {
    "content": "When using these Suggesters in a query, you would define multiple <span class=\"ff2 fs1\">suggest.dictionary</span> parameters in the\nrequest, referring to the names given for each Suggester in the search component definition. The response\nwill include the terms in sections for each Suggester. See the <span class=\"fc6\">Example Usages</span> section below for an example\nrequest and response.",
    "hierarchy": [
      "Multiple Dictionaries"
    ],
    "pageId": 575
  },
  {
    "content": "After adding the search component, a request handler must be added to <span class=\"code\">solrconfig.xml</span>. This request\nhandler works the <span class=\"link\">same as any other request handler</span>, and allows you to configure default parameters for\nserving suggestion requests. The request handler definition must incorporate the \"suggest\" search\ncomponent defined previously.",
    "hierarchy": [
      "Adding the Suggest Request Handler"
    ],
    "pageId": 576
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggest\"<span class=\"fc3\">></span></span>true<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"suggest.count\"<span class=\"fc3\">></span></span>10<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"components\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str></span>suggest<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></arr></span>",
    "hierarchy": [
      "Adding the Suggest Request Handler"
    ],
    "pageId": 576
  },
  {
    "content": "The following parameters allow you to set defaults for the Suggest request handler:",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest=true\nThis parameter should always be <span class=\"code\">true</span>, because we always want to run the Suggester for queries\nsubmitted to this handler.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.dictionary\nThe name of the dictionary component configured in the search component. This is a mandatory\nparameter. It can be set in the request handler, or sent as a parameter at query time.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.q\nThe query to use for suggestion lookups.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.count\nSpecifies the number of suggestions for Solr to return.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.cfq\nA Context Filter Query used to filter suggestions based on the context field, if supported by the suggester.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.build\nIf <span class=\"code\">true</span>, it will build the suggester index. This is likely useful only for initial requests; you would probably\nnot want to build the dictionary on every request, particularly in a production system. If you would like to\nkeep your dictionary up to date, you should use the <span class=\"code\">buildOnCommit</span> or <span class=\"code\">buildOnOptimize</span> parameter for\nthe search component.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.reload\nIf <span class=\"code\">true</span>, it will reload the suggester index.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.buildAll\nIf <span class=\"code\">true</span>, it will build all suggester indexes.",
    "hierarchy": [
      "Adding the Suggest Request Handler",
      "Suggest Request Handler Parameters"
    ],
    "pageId": 576
  },
  {
    "content": "suggest.reloadAll\nIf <span class=\"ff1 fs0\">true</span>, it will reload all suggester indexes.",
    "hierarchy": [
    ],
    "pageId": 577
  },
  {
    "content": "These properties can also be overridden at query time, or not set in the request handler at all and always\nsent at query time.",
    "hierarchy": [
    ],
    "pageId": 577
  },
  {
    "content": "Context filtering (<span class=\"ff1 fs0\">suggest.cfq</span>) is currently only supported by\nAnalyzingInfixLookupFactory<span class=\"ff2 fs1\"> and </span>BlendedInfixLookupFactory<span class=\"ff2 fs1\">, and only when backed</span>\nby a <span class=\"ff1 fs0\">Document*Dictionary</span>. All other implementations will return unfiltered matches as if\nfiltering was not requested.",
    "hierarchy": [
    ],
    "pageId": 577
  },
  {
    "content": "This is a basic suggestion using a single dictionary and a single Solr core.",
    "hierarchy": [
      "Example Usages",
      "Get Suggestions with Weights"
    ],
    "pageId": 577
  },
  {
    "content": "Example query:",
    "hierarchy": [
      "Example Usages",
      "Get Suggestions with Weights"
    ],
    "pageId": 577
  },
  {
    "content": "http://localhost:8983/solr/techproducts/suggest?suggest=true&suggest.build=true&suggest.dictionar\ny=mySuggester&suggest.q=elec",
    "hierarchy": [
      "Example Usages",
      "Get Suggestions with Weights"
    ],
    "pageId": 577
  },
  {
    "content": "In this example, we've simply requested the string 'elec' with the <span class=\"ff1 fs0\">suggest.q</span> parameter and requested that\nthe suggestion dictionary be built with <span class=\"ff1 fs0\">suggest.build</span> (note, however, that you would likely not want to\nbuild the index on every query - instead you should use <span class=\"ff1 fs0\">buildOnCommit</span> or <span class=\"ff1 fs0\">buildOnOptimize</span> if you have\nregularly changing documents).",
    "hierarchy": [
      "Example Usages",
      "Get Suggestions with Weights"
    ],
    "pageId": 577
  },
  {
    "content": "Example response:",
    "hierarchy": [
      "Example Usages",
      "Get Suggestions with Weights"
    ],
    "pageId": 577
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ   <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">35</span>\nÊ },\nÊ <span class=\"fc1\">\"command\"</span>: <span class=\"fc3\">\"build\"</span>,\nÊ <span class=\"fc1\">\"suggest\"</span>: {\nÊ   <span class=\"fc1\">\"mySuggester\"</span>: {\nÊ     <span class=\"fc1\">\"elec\"</span>: {\nÊ       <span class=\"fc1\">\"numFound\"</span>: <span class=\"fc2\">3</span>,\nÊ       <span class=\"fc1\">\"suggestions\"</span>: [\nÊ         {\nÊ           <span class=\"fc1\">\"term\"</span>: <span class=\"fc3\">\"electronics and computer1\"</span>,\nÊ           <span class=\"fc1\">\"weight\"</span>: <span class=\"fc2\">2199</span>,\nÊ           <span class=\"fc1\">\"payload\"</span>: <span class=\"fc3\">\"\"</span>\nÊ         },\nÊ         {\nÊ           <span class=\"fc1\">\"term\"</span>: <span class=\"fc3\">\"electronics\"</span>,\nÊ           <span class=\"fc1\">\"weight\"</span>: <span class=\"fc2\">649</span>,\nÊ           <span class=\"fc1\">\"payload\"</span>: <span class=\"fc3\">\"\"</span>\nÊ         },\nÊ         {\nÊ           <span class=\"fc1\">\"term\"</span>: <span class=\"fc3\">\"electronics and stuff2\"</span>,\nÊ           <span class=\"fc1\">\"weight\"</span>: <span class=\"fc2\">279</span>,\nÊ           <span class=\"fc1\">\"payload\"</span>: <span class=\"fc3\">\"\"</span>\nÊ         }\nÊ       ]\nÊ     }\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 578
  },
  {
    "content": "If you have defined multiple dictionaries, you can use them in queries.",
    "hierarchy": [
      "Using Multiple Dictionaries"
    ],
    "pageId": 578
  },
  {
    "content": "Example query:",
    "hierarchy": [
      "Using Multiple Dictionaries"
    ],
    "pageId": 578
  },
  {
    "content": "http://localhost:8983/solr/techproducts/suggest?suggest=true&suggest.dictionary=mySuggester&sugge\nst.dictionary=altSuggester&suggest.q=elec",
    "hierarchy": [
      "Using Multiple Dictionaries"
    ],
    "pageId": 578
  },
  {
    "content": "In this example we have sent the string 'elec' as the <span class=\"ff1 fs2\">suggest.q</span> parameter and named two\nsuggest.dictionary<span class=\"code\"> definitions to be used.</span>",
    "hierarchy": [
      "Using Multiple Dictionaries"
    ],
    "pageId": 578
  },
  {
    "content": "Example response:",
    "hierarchy": [
      "Using Multiple Dictionaries"
    ],
    "pageId": 578
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ   <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">3</span>\nÊ },\nÊ <span class=\"fc1\">\"suggest\"</span>: {\nÊ   <span class=\"fc1\">\"mySuggester\"</span>: {\nÊ     <span class=\"fc1\">\"elec\"</span>: {\nÊ       <span class=\"fc1\">\"numFound\"</span>: <span class=\"fc2\">1</span>,\nÊ       <span class=\"fc1\">\"suggestions\"</span>: [\nÊ         {\nÊ           <span class=\"fc1\">\"term\"</span>: <span class=\"fc3\">\"electronics and computer1\"</span>,\nÊ           <span class=\"fc1\">\"weight\"</span>: <span class=\"fc2\">100</span>,\nÊ           <span class=\"fc1\">\"payload\"</span>: <span class=\"fc3\">\"\"</span>\nÊ         }\nÊ       ]\nÊ     }\nÊ   },\nÊ   <span class=\"fc1\">\"altSuggester\"</span>: {\nÊ     <span class=\"fc1\">\"elec\"</span>: {\nÊ       <span class=\"fc1\">\"numFound\"</span>: <span class=\"fc2\">1</span>,\nÊ       <span class=\"fc1\">\"suggestions\"</span>: [\nÊ         {\nÊ           <span class=\"fc1\">\"term\"</span>: <span class=\"fc3\">\"electronics and computer1\"</span>,\nÊ           <span class=\"fc1\">\"weight\"</span>: <span class=\"fc2\">10</span>,\nÊ           <span class=\"fc1\">\"payload\"</span>: <span class=\"fc3\">\"\"</span>\nÊ         }\nÊ       ]\nÊ     }\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 579
  },
  {
    "content": "Context filtering lets you filter suggestions by a separate context field, such as category, department or any\nother token. The <span class=\"ff1 fs2\">AnalyzingInfixLookupFactory</span> and <span class=\"ff1 fs2\">BlendedInfixLookupFactory</span> currently support this\nfeature, when backed by <span class=\"ff1 fs2\">DocumentDictionaryFactory</span>.",
    "hierarchy": [
      "Context Filtering"
    ],
    "pageId": 579
  },
  {
    "content": "Add <span class=\"ff1 fs2\">contextField</span> to your suggester configuration. This example will suggest names and allow to filter by\ncategory:",
    "hierarchy": [
      "Context Filtering"
    ],
    "pageId": 579
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"suggester\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"name\"<span class=\"fc1\">></span></span>mySuggester<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"lookupImpl\"<span class=\"fc1\">></span></span>AnalyzingInfixLookupFactory<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"dictionaryImpl\"<span class=\"fc1\">></span></span>DocumentDictionaryFactory<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc1\">></span></span>name<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"weightField\"<span class=\"fc1\">></span></span>price<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"contextField\"<span class=\"fc1\">></span></span>cat<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"suggestAnalyzerFieldType\"<span class=\"fc1\">></span></span>string<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"buildOnStartup\"<span class=\"fc1\">></span></span>false<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 580
  },
  {
    "content": "Example context filtering suggest query:",
    "hierarchy": [
    ],
    "pageId": 580
  },
  {
    "content": "http://localhost:8983/solr/techproducts/suggest?suggest=true&suggest.build=true&suggest.dictionar\ny=mySuggester&suggest.q=c&suggest.cfq=memory",
    "hierarchy": [
    ],
    "pageId": 580
  },
  {
    "content": "The suggester will only bring back suggestions for products tagged with 'cat=memory'.",
    "hierarchy": [
    ],
    "pageId": 580
  },
  {
    "content": "The <span class=\"code\">MoreLikeThis</span> search component enables users to query for documents similar to a document in their\nresult list.",
    "hierarchy": [
      "MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "It does this by using terms from the original document to find similar documents in the index.",
    "hierarchy": [
      "MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "There are three ways to use MoreLikeThis. The first, and most common, is to use it as a request handler. In\nthis case, you would send text to the MoreLikeThis request handler as needed (as in when a user clicked on\na \"similar documents\" link).",
    "hierarchy": [
      "MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "The second is to use it as a search component. This is less desirable since it performs the MoreLikeThis\nanalysis on every document returned. This may slow search results.",
    "hierarchy": [
      "MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "The final approach is to use it as a request handler but with externally supplied text. This case, also referred\nto as the MoreLikeThisHandler, will supply information about similar documents in the index based on the\ntext of the input document.",
    "hierarchy": [
      "MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "MoreLikeThis<span class=\"ff2 fs1\"> constructs a Lucene query based on terms in a document. It does this by pulling terms from</span>\nthe defined list of fields ( see the <span class=\"code\">mlt.fl</span> parameter, below). For best results, the fields should have stored\nterm vectors in <span class=\"code\">schema.xml</span>. For example:",
    "hierarchy": [
      "MoreLikeThis",
      "How MoreLikeThis Works"
    ],
    "pageId": 581
  },
  {
    "content": "If term vectors are not stored, <span class=\"code\">MoreLikeThis</span> will generate terms from stored fields. A <span class=\"code\">uniqueKey</span> must also\nbe stored in order for MoreLikeThis to work properly.",
    "hierarchy": [
      "MoreLikeThis",
      "How MoreLikeThis Works"
    ],
    "pageId": 581
  },
  {
    "content": "The next phase filters terms from the original document using thresholds defined with the MoreLikeThis\nparameters. Finally, a query is run with these terms, and any other query parameters that have been defined\n(see the <span class=\"code\">mlt.qf</span> parameter, below) and a new document set is returned.",
    "hierarchy": [
      "MoreLikeThis",
      "How MoreLikeThis Works"
    ],
    "pageId": 581
  },
  {
    "content": "The table below summarizes the <span class=\"code\">MoreLikeThis</span> parameters supported by Lucene/Solr. These parameters\ncan be used with any of the three possible MoreLikeThis approaches.",
    "hierarchy": [
      "MoreLikeThis",
      "Common Parameters for MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "mlt.fl\nSpecifies the fields to use for similarity. If possible, these should have stored <span class=\"code\">termVectors</span>.",
    "hierarchy": [
      "MoreLikeThis",
      "Common Parameters for MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "mlt.mintf\nSpecifies the Minimum Term Frequency, the frequency below which terms will be ignored in the source\ndocument.",
    "hierarchy": [
      "MoreLikeThis",
      "Common Parameters for MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "mlt.mindf\nSpecifies the Minimum Document Frequency, the frequency at which words will be ignored which do not\noccur in at least this many documents.",
    "hierarchy": [
      "MoreLikeThis",
      "Common Parameters for MoreLikeThis"
    ],
    "pageId": 581
  },
  {
    "content": "mlt.maxdf\nSpecifies the Maximum Document Frequency, the frequency at which words will be ignored which occur\nin more than this many documents.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.maxdfpct\nSpecifies the Maximum Document Frequency using a relative ratio to the number of documents in the\nindex. The argument must be an integer between 0 and 100. For example 75 means the word will be\nignored if it occurs in more than 75 percent of the documents in the index.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.minwl\nSets the minimum word length below which words will be ignored.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.maxwl\nSets the maximum word length above which words will be ignored.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.maxqt\nSets the maximum number of query terms that will be included in any generated query.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.maxntp\nSets the maximum number of tokens to parse in each example document field that is not stored with\nTermVector support.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.boost\nSpecifies if the query will be boosted by the interesting term relevance. It can be either \"true\" or \"false\".",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "mlt.qf\nQuery fields and their boosts using the same format as that used by the <span class=\"link\">DisMax Query Parser</span>. These\nfields must also be specified in <span class=\"ff1 fs0\">mlt.fl</span>.",
    "hierarchy": [
    ],
    "pageId": 582
  },
  {
    "content": "Using MoreLikeThis as a search component returns similar documents for each document in the response\nset. In addition to the common parameters, these additional options are available:",
    "hierarchy": [
      "Parameters for the MoreLikeThisComponent"
    ],
    "pageId": 582
  },
  {
    "content": "mlt\nIf set to <span class=\"ff1 fs0\">true</span>, activates the <span class=\"ff1 fs0\">MoreLikeThis</span> component and enables Solr to return <span class=\"ff1 fs0\">MoreLikeThis</span> results.",
    "hierarchy": [
      "Parameters for the MoreLikeThisComponent"
    ],
    "pageId": 582
  },
  {
    "content": "mlt.count\nSpecifies the number of similar documents to be returned for each result. The default value is 5.",
    "hierarchy": [
      "Parameters for the MoreLikeThisComponent"
    ],
    "pageId": 582
  },
  {
    "content": "The table below summarizes parameters accessible through the <span class=\"ff1 fs0\">MoreLikeThisHandler</span>. It supports faceting,\npaging, and filtering using common query parameters, but does not work well with alternate query parsers.",
    "hierarchy": [
      "Parameters for the MoreLikeThisHandler"
    ],
    "pageId": 582
  },
  {
    "content": "mlt.match.include\nSpecifies whether or not the response should include the matched document. If set to false, the response\nwill look like a normal select response.",
    "hierarchy": [
      "Parameters for the MoreLikeThisHandler"
    ],
    "pageId": 582
  },
  {
    "content": "mlt.match.offset\nSpecifies an offset into the main query search results to locate the document on which the <span class=\"ff1 fs0\">MoreLikeThis</span>",
    "hierarchy": [
      "Parameters for the MoreLikeThisHandler"
    ],
    "pageId": 582
  },
  {
    "content": "query should operate. By default, the query operates on the first result for the q parameter.",
    "hierarchy": [
    ],
    "pageId": 583
  },
  {
    "content": "mlt.interestingTerms\nControls how the <span class=\"ff2 fs1\">MoreLikeThis</span> component presents the \"interesting\" terms (the top TF/IDF terms) for\nthe query. Supports three settings. The setting list lists the terms. The setting none lists no terms. The\nsetting details lists the terms along with the boost value used for each term. Unless <span class=\"ff2 fs1\">mlt.boost=true</span>, all\nterms will have <span class=\"ff2 fs1\">boost=1.0</span>.",
    "hierarchy": [
    ],
    "pageId": 583
  },
  {
    "content": "The <span class=\"ff2 fs1\">mlt</span> query parser provides a mechanism to retrieve documents similar to a given document, like the\nhandler. More information on the usage of the mlt query parser can be found in the section <span class=\"link\">Other Parsers</span>.",
    "hierarchy": [
      "MoreLikeThis Query Parser"
    ],
    "pageId": 583
  },
  {
    "content": "In most search applications, the \"top\" matching results (sorted by score, or some other criteria) are\ndisplayed to some human user.",
    "hierarchy": [
      "Pagination of Results"
    ],
    "pageId": 584
  },
  {
    "content": "In many applications the UI for these sorted results are displayed to the user in \"pages\" containing a fixed\nnumber of matching results, and users don't typically look at results past the first few pages worth of\nresults.",
    "hierarchy": [
      "Pagination of Results"
    ],
    "pageId": 584
  },
  {
    "content": "In Solr, this basic paginated searching is supported using the <span class=\"code\">start</span> and <span class=\"code\">rows</span> parameters, and performance\nof this common behaviour can be tuned by utilizing the <span class=\"code\">queryResultCache</span> and adjusting the\nqueryResultWindowSize<span class=\"ff2 fs1\"> configuration options based on your expected page sizes.</span>",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination"
    ],
    "pageId": 584
  },
  {
    "content": "The easiest way to think about simple pagination, is to simply multiply the page number you want (treating\nthe \"first\" page number as \"0\") by the number of rows per page; such as in the following pseudo-code:",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "Basic Pagination Examples"
    ],
    "pageId": 584
  },
  {
    "content": "function fetch_solr_page($page_number, $rows_per_page) {\nÊ $start = $page_number * $rows_per_page\nÊ $params = [ q = $some_query, rows = $rows_per_page, start = $start ]\nÊ return fetch_solr($params)\n}",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "Basic Pagination Examples"
    ],
    "pageId": 584
  },
  {
    "content": "The <span class=\"code\">start</span> parameter specified in a request to Solr indicates an <span class=\"ff1\">absolute</span> \"offset\" in the complete sorted list\nof matches that the client wants Solr to use as the beginning of the current \"page\".",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "If an index modification (such as adding or removing documents) which affects the sequence of ordered\ndocuments matching a query occurs in between two requests from a client for subsequent pages of results,\nthen it is possible that these modifications can result in the same document being returned on multiple\npages, or documents being \"skipped\" as the result set shrinks or grows.",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "For example, consider an index containing 26 documents like so:",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "1A",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "2B",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "…",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "26Z",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "Followed by the following requests & index modifications interleaved:",
    "hierarchy": [
      "Pagination of Results",
      "Basic Pagination",
      "How Basic Pagination is Affected by Index Updates"
    ],
    "pageId": 584
  },
  {
    "content": "<span class=\"ls1\">A client requests <span class=\"ff2 fs1\">q=<span class=\"code\">:</span>&rows=5&start=0&sort=name asc</span></span>",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "◦<span class=\"ff1 ls1\">documents with the ids <span class=\"ff2 fs1\">1-5</span> will be returned to the client</span>\n<span class=\"ls1\">Document id <span class=\"ff2 fs1\">3</span> is deleted</span>",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "<span class=\"ls1\">The client requests \"page #2\" using <span class=\"ff2 fs1\">q=<span class=\"code\">:</span>&rows=5&start=5&sort=name asc</span></span>",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "◦<span class=\"ff1 ls1\">Documents <span class=\"ff2 fs1\">7-11</span> will be returned</span>\n◦<span class=\"ff1 ls1\">Document <span class=\"ff2 fs1\">6</span> has been skipped, since it is now the 5th document in the sorted set of all matching</span>\nresults – it would be returned on a new request for \"page #1\"\n<span class=\"ls1\">3 new documents are now added with the ids <span class=\"ff2 fs1\">90</span>, <span class=\"ff2 fs1\">91</span>, and <span class=\"ff2 fs1\">92</span>; All three documents have a name of <span class=\"ff2 fs1\">A</span></span>",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "<span class=\"ls1\">The client requests \"page #3\" using <span class=\"ff2 fs1\">q=<span class=\"code\">:</span>&rows=5&start=10&sort=name asc</span></span>",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "◦<span class=\"ff1 ls1\">Documents <span class=\"ff2 fs1\">9-13</span> will be returned</span>\n◦<span class=\"ff1 ls1\">Documents <span class=\"ff2 fs1\">9</span>, <span class=\"ff2 fs1\">10</span>, and <span class=\"ff2 fs1\">11</span> have now been returned on both page #2 and page #3 since they moved</span>\nfarther back in the list of sorted results",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "In typical situations these impacts from index changes on paginated searching don't significantly affect user\nexperience<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>either because they happen extremely infrequently in fairly static collections, or because the\nusers recognize that the collection of data is constantly evolving and expect to see documents shift up and\ndown in the result sets.",
    "hierarchy": [
    ],
    "pageId": 585
  },
  {
    "content": "In some situations, the results of a Solr search are not destined for a simple paginated user interface.",
    "hierarchy": [
      "Performance Problems with \"Deep Paging\""
    ],
    "pageId": 585
  },
  {
    "content": "When you wish to fetch a very large number of sorted results from Solr to feed into an external system,\nusing very large values for the <span class=\"ff2 fs1\">start</span> or <span class=\"ff2 fs1\">rows</span> parameters can be very inefficient. Pagination using <span class=\"ff2 fs1\">start</span> and\nrows<span class=\"ff1 fs0\"> not only require Solr to compute (and sort) in memory all of the matching documents that should be</span>\nfetched for the current page, but also all of the documents that would have appeared on previous pages.",
    "hierarchy": [
      "Performance Problems with \"Deep Paging\""
    ],
    "pageId": 585
  },
  {
    "content": "While a request for <span class=\"ff2 fs1\">start=0&rows=1000000</span> may be obviously inefficient because it requires Solr to maintain\n& sort in memory a set of 1 million documents, likewise a request for <span class=\"ff2 fs1\">start=999000&rows=1000</span> is equally\ninefficient for the same reasons. Solr can't compute which matching document is the 999001st result in\nsorted order, without first determining what the first 999000 matching sorted results are.",
    "hierarchy": [
      "Performance Problems with \"Deep Paging\""
    ],
    "pageId": 585
  },
  {
    "content": "If the index is distributed, which is common when running in SolrCloud mode, then 1 million documents are\nretrieved from <span class=\"ff5\">each shard</span>. For a ten shard index, ten million entries must be retrieved and sorted to figure\nout the 1000 documents that match those query parameters.",
    "hierarchy": [
      "Performance Problems with \"Deep Paging\""
    ],
    "pageId": 585
  },
  {
    "content": "As an alternative to increasing the \"start\" parameter to request subsequent pages of sorted results, Solr\nsupports using a \"Cursor\" to scan through results.",
    "hierarchy": [
      "Fetching A Large Number of Sorted Results: Cursors"
    ],
    "pageId": 585
  },
  {
    "content": "Cursors in Solr are a logical concept that doesn't involve caching any state information on the server.\nInstead the sort values of the last document returned to the client are used to compute a \"mark\"\nrepresenting a logical point in the ordered space of sort values. That \"mark\" can be specified in the\nparameters of subsequent requests to tell Solr where to continue.",
    "hierarchy": [
      "Fetching A Large Number of Sorted Results: Cursors"
    ],
    "pageId": 585
  },
  {
    "content": "To use a cursor with Solr, specify a <span class=\"code\">cursorMark</span> parameter with the value of <span class=\"code\">*</span>. You can think of this being\nanalogous to <span class=\"code\">start=0</span> as a way to tell Solr \"start at the beginning of my sorted results\" except that it also\ninforms Solr that you want to use a Cursor.",
    "hierarchy": [
      "Using Cursors"
    ],
    "pageId": 586
  },
  {
    "content": "In addition to returning the top N sorted results (where you can control N using the <span class=\"code\">rows</span> parameter) the\nSolr response will also include an encoded String named <span class=\"code\">nextCursorMark</span>. You then take the\nnextCursorMark<span class=\"ff2 fs1\"> String value from the response, and pass it back to Solr as the </span>cursorMark<span class=\"ff2 fs1\"> parameter for</span>\nyour next request. You can repeat this process until you've fetched as many docs as you want, or until the\nnextCursorMark<span class=\"ff2 fs1\"> returned matches the </span>cursorMark<span class=\"ff2 fs1\"> you’ve already specified<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>indicating that there are no</span>\nmore results.",
    "hierarchy": [
      "Using Cursors"
    ],
    "pageId": 586
  },
  {
    "content": "There are a few important constraints to be aware of when using <span class=\"code\">cursorMark</span> parameter in a Solr request",
    "hierarchy": [
      "Constraints when using Cursors"
    ],
    "pageId": 586
  },
  {
    "content": "1.cursorMark and <span class=\"code\">start</span> are mutually exclusive parameters.\n◦Your requests must either not include a <span class=\"code\">start</span> parameter, or it must be specified with a value of “<span class=\"code\">0</span>”.\n2.sort clauses must include the uniqueKey field (either <span class=\"code\">asc</span> or <span class=\"code\">desc</span>).\n◦If <span class=\"code\">id</span> is your uniqueKey field, then sort params like <span class=\"code\">id asc</span> and <span class=\"code\">name asc, id desc</span> would both work\nfine, but <span class=\"code\">name asc</span> by itself would not\n3.Sorts including <span class=\"link\">Date Math</span> based functions that involve calculations relative to <span class=\"code\">NOW</span> will cause confusing\nresults, since every document will get a new sort value on every subsequent request. This can easily\nresult in cursors that never end, and constantly return the same documents over and over – even if the\ndocuments are never updated.",
    "hierarchy": [
      "Constraints when using Cursors"
    ],
    "pageId": 586
  },
  {
    "content": "In this situation, choose & re-use a fixed value for the <span class=\"code\">NOW</span><span class=\"link\"> request param</span> in all of your cursor requests.",
    "hierarchy": [
      "Constraints when using Cursors"
    ],
    "pageId": 586
  },
  {
    "content": "Cursor mark values are computed based on the sort values of each document in the result, which means\nmultiple documents with identical sort values will produce identical Cursor mark values if one of them is the\nlast document on a page of results. In that situation, the subsequent request using that <span class=\"code\">cursorMark</span> would\nnot know which of the documents with the identical mark values should be skipped. Requiring that the\nuniqueKey field be used as a clause in the sort criteria guarantees that a deterministic ordering will be\nreturned, and that every <span class=\"code\">cursorMark</span> value will identify a unique point in the sequence of documents.",
    "hierarchy": [
      "Constraints when using Cursors"
    ],
    "pageId": 586
  },
  {
    "content": "The pseudo-code shown here shows the basic logic involved in fetching all documents matching a query\nusing a cursor:",
    "hierarchy": [
      "Cursor Examples",
      "Fetch All Docs"
    ],
    "pageId": 586
  },
  {
    "content": "// when fetching all docs, you might as well use a simple id sort\n// unless you really need the docs to come back in a specific order\n$params = [ q => $some_query, sort => 'id asc', rows => $r, cursorMark => '*' ]\n$done = false\nwhile (not $done) {\nÊ $results = fetch_solr($params)\nÊ // do something with $results\nÊ if ($params[cursorMark] == $results[nextCursorMark]) {\nÊ   $done = true\nÊ }\nÊ $params[cursorMark] = $results[nextCursorMark]\n}",
    "hierarchy": [
    ],
    "pageId": 587
  },
  {
    "content": "Using SolrJ, this pseudo-code would be:",
    "hierarchy": [
    ],
    "pageId": 587
  },
  {
    "content": "SolrQuery q = (<span class=\"fc1\">new</span> SolrQuery(some_query)).setRows(r).setSort(SortClause.asc(<span class=\"fc2\">\"id\"</span>));",
    "hierarchy": [
    ],
    "pageId": 587
  },
  {
    "content": "Ê q.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);\nÊ QueryResponse rsp = solrServer.query(q);\nÊ <span class=\"fc3\">String</span> nextCursorMark = rsp.getNextCursorMark();\nÊ doCustomProcessingOfResults(rsp);\nÊ <span class=\"fc1\">if</span> (cursorMark.equals(nextCursorMark)) {\nÊ   done = true;\nÊ }\nÊ cursorMark = nextCursorMark;\n}",
    "hierarchy": [
    ],
    "pageId": 587
  },
  {
    "content": "If you wanted to do this by hand using curl, the sequence of requests would look something like this:",
    "hierarchy": [
    ],
    "pageId": 587
  },
  {
    "content": "$ curl '...&rows=10&sort=id+asc&cursorMark=*'\n{\nÊ \"response\":{\"numFound\":32,\"start\":0,\"docs\":[\nÊ   // ... 10 docs here ...\nÊ ]},\nÊ \"nextCursorMark\":\"AoEjR0JQ\"}\n$ curl '...&rows=10&sort=id+asc&cursorMark=AoEjR0JQ'\n{\nÊ \"response\":{\"numFound\":32,\"start\":0,\"docs\":[\nÊ   // ... 10 more docs here ...\nÊ ]},\nÊ \"nextCursorMark\":\"AoEpVkRCREIxQTE2\"}\n$ curl '...&rows=10&sort=id+asc&cursorMark=AoEpVkRCREIxQTE2'\n{\nÊ \"response\":{\"numFound\":32,\"start\":0,\"docs\":[\nÊ   // ... 10 more docs here ...\nÊ ]},\nÊ \"nextCursorMark\":\"AoEmbWF4dG9y\"}\n$ curl '...&rows=10&sort=id+asc&cursorMark=AoEmbWF4dG9y'\n{\nÊ \"response\":{\"numFound\":32,\"start\":0,\"docs\":[\nÊ   // ... 2 docs here because we've reached the end.\nÊ ]},\nÊ \"nextCursorMark\":\"AoEpdmlld3Nvbmlj\"}\n$ curl '...&rows=10&sort=id+asc&cursorMark=AoEpdmlld3Nvbmlj'\n{\nÊ \"response\":{\"numFound\":32,\"start\":0,\"docs\":[\nÊ   // no more docs here, and note that the nextCursorMark\nÊ   // matches the cursorMark param we used\nÊ ]},\nÊ \"nextCursorMark\":\"AoEpdmlld3Nvbmlj\"}",
    "hierarchy": [
    ],
    "pageId": 588
  },
  {
    "content": "Since the cursor is stateless from Solr's perspective, your client code can stop fetching additional results as\nsoon as you have decided you have enough information:",
    "hierarchy": [
      "Fetch First <span class=\"code\">N</span> docs, Based on Post Processing"
    ],
    "pageId": 588
  },
  {
    "content": "Ê q.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);\nÊ QueryResponse rsp = solrServer.query(q);\nÊ <span class=\"fc3\">String</span> nextCursorMark = rsp.getNextCursorMark();\nÊ <span class=\"fc3\">boolean</span> hadEnough = doCustomProcessingOfResults(rsp);\nÊ <span class=\"fc2\">if</span> (hadEnough || cursorMark.equals(nextCursorMark)) {\nÊ   done = true;\nÊ }\nÊ cursorMark = nextCursorMark;\n}",
    "hierarchy": [
      "Fetch First <span class=\"code\">N</span> docs, Based on Post Processing"
    ],
    "pageId": 588
  },
  {
    "content": "Unlike basic pagination, Cursor pagination does not rely on using an absolute \"offset\" into the completed\nsorted list of matching documents. Instead, the <span class=\"code\">cursorMark</span> specified in a request encapsulates information\nabout the <span class=\"ff1\">relative</span> position of the last document returned, based on the <span class=\"ff1\">absolute</span> sort values of that\ndocument. This means that the impact of index modifications is much smaller when using a cursor\ncompared to basic pagination. Consider the same example index described when discussing basic\npagination:",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "1A",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "2B",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "…",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "26Z",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "A client requests <span class=\"code\">q=<span class=\"ff4\">:</span>&rows=5&start=0&sort=name asc, id asc&cursorMark=*</span>",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "◦Documents with the ids <span class=\"code\">1-5</span> will be returned to the client in order\nDocument id <span class=\"code\">3</span> is deleted",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "The client requests 5 more documents using the <span class=\"code\">nextCursorMark</span> from the previous response",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "◦Documents <span class=\"code\">6-10</span> will be returned<span class=\"ff5\"> </span>—<span class=\"ff5\"> </span>the deletion of a document that's already been returned doesn’t\naffect the relative position of the cursor\n3 new documents are now added with the ids <span class=\"code\">90</span>, <span class=\"code\">91</span>, and <span class=\"code\">92</span>; All three documents have a name of <span class=\"code\">A</span>",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "The client requests 5 more documents using the <span class=\"code\">nextCursorMark</span> from the previous response",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "◦Documents <span class=\"code\">11-15</span> will be returned<span class=\"ff5\"> </span>—<span class=\"ff5\"> </span>the addition of new documents with sort values already past\ndoes not affect the relative position of the cursor\nDocument id <span class=\"code\">1</span> is updated to change its 'name' to <span class=\"code\">Q</span>",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "Document id 17 is updated to change its 'name' to <span class=\"code\">A</span>",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "The client requests 5 more documents using the <span class=\"code\">nextCursorMark</span> from the previous response",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "◦The resulting documents are <span class=\"code\">16,1,18,19,20</span> in that order\n◦Because the sort value of document <span class=\"code\">1</span> changed so that it is <span class=\"ff6\">after</span> the cursor position, the document is\nreturned to the client twice\n◦Because the sort value of document <span class=\"code\">17</span> changed so that it is <span class=\"ff6\">before</span> the cursor position, the document\nhas been \"skipped\" and will not be returned to the client as the cursor continues to progress",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "In a nutshell: When fetching all results matching a query using <span class=\"code\">cursorMark</span>, the only way index modifications\ncan result in a document being skipped, or returned twice, is if the sort value of the document changes.",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "One way to ensure that a document will never be returned more then once, is to use the\nuniqueKey field as the primary (and therefore: only significant) sort criterion.",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "In this situation, you will be guaranteed that each document is only returned once, no\nmatter how it may be be modified during the use of the cursor.",
    "hierarchy": [
      "How Cursors are Affected by Index Updates"
    ],
    "pageId": 589
  },
  {
    "content": "Because Cursor requests are stateless, and the cursorMark values encapsulate the absolute sort values of\nthe last document returned from a search, it's possible to \"continue\" fetching additional results from a\ncursor that has already reached its end. If new documents are added (or existing documents are updated) to\nthe end of the results.",
    "hierarchy": [
      "\"Tailing\" a Cursor"
    ],
    "pageId": 590
  },
  {
    "content": "You can think of this as similar to using something like \"tail -f\" in Unix. The most common examples of how\nthis can be useful is when you have a \"timestamp\" field recording when a document has been\nadded/updated in your index. Client applications can continuously poll a cursor using a <span class=\"code\">sort=timestamp</span>\nasc, id asc<span class=\"ff2 fs1\"> for documents matching a query, and always be notified when a document is added or</span>\nupdated matching the request criteria.",
    "hierarchy": [
      "\"Tailing\" a Cursor"
    ],
    "pageId": 590
  },
  {
    "content": "Another common example is when you have uniqueKey values that always increase as new documents are\ncreated, and you can continuously poll a cursor using <span class=\"code\">sort=id asc</span> to be notified about new documents.",
    "hierarchy": [
      "\"Tailing\" a Cursor"
    ],
    "pageId": 590
  },
  {
    "content": "The pseudo-code for tailing a cursor is only a slight modification from our early example for processing all\ndocs matching a query:",
    "hierarchy": [
      "\"Tailing\" a Cursor"
    ],
    "pageId": 590
  },
  {
    "content": "while (true) {\nÊ $doneForNow = false\nÊ while (not $doneForNow) {\nÊ   $results = fetch_solr($params)\nÊ   // do something with $results\nÊ   if ($params[cursorMark] == $results[nextCursorMark]) {\nÊ     $doneForNow = true\nÊ   }\nÊ   $params[cursorMark] = $results[nextCursorMark]\nÊ }\nÊ sleep($some_configured_delay)\n}",
    "hierarchy": [
      "\"Tailing\" a Cursor"
    ],
    "pageId": 590
  },
  {
    "content": "For certain specialized cases, the <span class=\"link\">/export handler</span> may be an option.",
    "hierarchy": [
      "\"Tailing\" a Cursor"
    ],
    "pageId": 590
  },
  {
    "content": "The Collapsing query parser and the Expand component combine to form an approach to grouping\ndocuments for field collapsing in search results.",
    "hierarchy": [
      "Collapse and Expand Results"
    ],
    "pageId": 591
  },
  {
    "content": "The Collapsing query parser groups documents (collapsing the result set) according to your parameters,\nwhile the Expand component provides access to documents in the collapsed group for use in results display\nor other processing by a client application. Collapse & Expand can together do what the older <span class=\"link\">Result</span>\nGrouping<span class=\"fc1\"> (<span class=\"code\">group=true</span>) does for <span class=\"ff4\">most</span> use-cases but not all. Generally, you should prefer Collapse & Expand.</span>",
    "hierarchy": [
      "Collapse and Expand Results"
    ],
    "pageId": 591
  },
  {
    "content": "In order to use these features with SolrCloud, the documents must be located on the same\nshard. To ensure document co-location, you can define the <span class=\"code\">router.name</span> parameter as\ncompositeId<span class=\"ff2 fs1\"> when creating the collection. For more information on this option, see the</span>\nsection <span class=\"link\">Document Routing</span>.",
    "hierarchy": [
      "Collapse and Expand Results"
    ],
    "pageId": 591
  },
  {
    "content": "The <span class=\"code\">CollapsingQParser</span> is really a <span class=\"ff4\">post filter</span> that provides more performant field collapsing than Solr's\nstandard approach when the number of distinct groups in the result set is high. This parser collapses the\nresult set to a single document per group before it forwards the result set to the rest of the search\ncomponents. So all downstream components (faceting, highlighting, etc.) will work with the collapsed result\nset.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "The CollapsingQParser accepts the following local parameters:",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "field\nThe field that is being collapsed on. The field must be a single valued String, Int or Float-type of field.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "min<span class=\"ff1 fs1\"> or </span>max\nSelects the group head document for each group based on which document has the min or max value of\nthe specified numeric field or <span class=\"link\">function query</span>.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "At most only one of the <span class=\"code\">min</span>, <span class=\"code\">max</span>, or <span class=\"code\">sort</span> (see below) parameters may be specified.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "If none are specified, the group head document of each group will be selected based on the highest\nscoring document in that group. The default is none.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "sort\nSelects the group head document for each group based on which document comes first according to the\nspecified <span class=\"link\">sort string</span>.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "At most only one of the <span class=\"code\">min</span>, <span class=\"code\">max</span>, (see above) or <span class=\"code\">sort</span> parameters may be specified.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "If none are specified, the group head document of each group will be selected based on the highest\nscoring document in that group. The default is none.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "nullPolicy\nThere are three available null policies:",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "ignore: removes documents with a null value in the collapse field. This is the default.",
    "hierarchy": [
      "Collapse and Expand Results",
      "Collapsing Query Parser"
    ],
    "pageId": 591
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">expand</span><span class=\"ls1\">: treats each document with a null value in the collapse field as a separate group.</span>\n•<span class=\"ff2 fs1 ls1\">collapse</span><span class=\"ls1\">: collapses all documents with a null value into a single group using either highest score, or</span>\nminimum/maximum.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "The default is <span class=\"ff2 fs1\">ignore</span>.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "hint\nCurrently there is only one hint available: <span class=\"ff2 fs1\">top_fc</span>, which stands for top level FieldCache.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "The <span class=\"ff2 fs1\">top_fc</span> hint is only available when collapsing on String fields. <span class=\"ff2 fs1\">top_fc</span> usually provides the best query\ntime speed but takes the longest to warm on startup or following a commit. <span class=\"ff2 fs1\">top_fc</span> will also result in\nhaving the collapsed field cached in memory twice if it's used for faceting or sorting. For very high\ncardinality (high distinct count) fields, <span class=\"ff2 fs1\">top_fc</span> may not fare so well.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "The default is none.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "size\nSets the initial size of the collapse data structures when collapsing on a <span class=\"code\">numeric field only</span>.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "The data structures used for collapsing grow dynamically when collapsing on numeric fields. Setting the\nsize above the number of results expected in the result set will eliminate the resizing cost.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "The default is 100,000.",
    "hierarchy": [
    ],
    "pageId": 592
  },
  {
    "content": "Collapse on <span class=\"ff2 fs1\">group_field</span> selecting the document in each group with the highest scoring document:",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "fq={!collapse field=group_field}",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "Collapse on <span class=\"ff2 fs1\">group_field</span> selecting the document in each group with the minimum value of <span class=\"ff2 fs1\">numeric_field</span>:",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "fq={!collapse field=group_field min=numeric_field}",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "Collapse on <span class=\"ff2 fs1\">group_field</span> selecting the document in each group with the maximum value of <span class=\"ff2 fs1\">numeric_field</span>:",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "fq={!collapse field=group_field max=numeric_field}",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "Collapse on <span class=\"ff2 fs1\">group_field</span> selecting the document in each group with the maximum value of a function. Note\nthat the <span class=\"code\">cscore()</span> function can be used with the min/max options to use the score of the current document\nbeing collapsed.",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "fq={!collapse field=group_field max=sum(cscore(),numeric_field)}",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "Collapse on <span class=\"ff2 fs1\">group_field</span> with a null policy so that all docs that do not have a value in the <span class=\"ff2 fs1\">group_field</span> will\nbe treated as a single group. For each group, the selected document will be based first on a <span class=\"ff2 fs1\">numeric_field</span>,\nbut ties will be broken by score:",
    "hierarchy": [
      "Sample Usage Syntax"
    ],
    "pageId": 592
  },
  {
    "content": "fq={!collapse field=group_field nullPolicy=collapse sort='numeric_field asc, score desc'}",
    "hierarchy": [
    ],
    "pageId": 593
  },
  {
    "content": "Collapse on <span class=\"ff1 fs1\">group_field</span> with a hint to use the top level field cache:",
    "hierarchy": [
    ],
    "pageId": 593
  },
  {
    "content": "fq={!collapse field=group_field hint=top_fc}",
    "hierarchy": [
    ],
    "pageId": 593
  },
  {
    "content": "The CollapsingQParserPlugin fully supports the QueryElevationComponent.",
    "hierarchy": [
    ],
    "pageId": 593
  },
  {
    "content": "The ExpandComponent can be used to expand the groups that were collapsed by the\nCollapsingQParserPlugin<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "Example usage with the CollapsingQParserPlugin:",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "q=foo&fq={!collapse field=ISBN}",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "In the query above, the CollapsingQParserPlugin will collapse the search results on the <span class=\"ff4\">ISBN</span> field. The main\nsearch results will contain the highest ranking document from each book.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "The ExpandComponent can now be used to expand the results so you can see the documents grouped by\nISBN. For example:",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "q=foo&fq={!collapse field=ISBN}&expand=true",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "The “expand=true” parameter turns on the ExpandComponent. The ExpandComponent adds a new section\nto the search output labeled “expanded”.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "Inside the expanded section there is a <span class=\"ff4\">map</span> with each group head pointing to the expanded documents that\nare within the group. As applications iterate the main collapsed result set, they can access the <span class=\"ff4\">expanded</span> map\nto retrieve the expanded groups.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "The ExpandComponent has the following parameters:",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "expand.sort\nOrders the documents within the expanded groups. The default is <span class=\"ff1 fs1\">score desc</span>.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "expand.rows\nThe number of rows to display in each group. The default is 5 rows.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "expand.q\nOverrides the main query (<span class=\"ff1 fs1\">q</span>), determines which documents to include in the main group. The default is to\nuse the main query.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "expand.fq\nOverrides main filter queries (<span class=\"ff1 fs1\">fq</span>), determines which documents to include in the main group. The default\nis to use the main filter queries.",
    "hierarchy": [
      "Expand Component"
    ],
    "pageId": 593
  },
  {
    "content": "Result Grouping groups documents with a common field value into groups and returns the top documents\nfor each group.",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "For example, if you searched for \"DVD\" on an electronic retailer's e-commerce site, you might be returned\nthree categories such as \"TV and Video\", \"Movies\", and \"Computers\" with three results per category. In this\ncase, the query term \"DVD\" appeared in all three categories, so Solr groups them together in order to\nincrease relevancy for the user.",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Solr's <span class=\"link\">Collapse and Expand</span> feature is newer and mostly overlaps with Result Grouping.\nThere are features unique to both, and they have different performance characteristics.\nThat said, in most cases Collapse and Expand is preferable to Result Grouping.",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Result Grouping is separate from <span class=\"link\">Faceting</span>. Though it is conceptually similar, faceting returns all relevant\nresults and allows the user to refine the results based on the facet category. For example, if you search for\n\"shoes\" on a footwear retailer's e-commerce site, Solr would return all results for that query term, along\nwith selectable facets such as \"size,\" \"color,\" \"brand,\" and so on.",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "You can however combine grouping with faceting. Grouped faceting supports <span class=\"ff5 fs3\">facet.field</span> and\nfacet.range<span class=\"ff2 fs1\"> but currently doesn't support date and pivot faceting. The facet counts are computed based on</span>\nthe first <span class=\"ff5 fs3\">group.field</span> parameter, and other <span class=\"ff5 fs3\">group.field</span> parameters are ignored.",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Grouped faceting differs from non grouped facets <span class=\"ff5 fs3\">(sum of all facets) == (total of products with</span>\nthat property)<span class=\"ff2 fs1\"> as shown in the following example:</span>",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Object 1",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "name: Phaser 4620a",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "ppm: 62",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "product_range: 6",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Object 2",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "name: Phaser 4620i",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "ppm: 65",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "product_range: 6",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Object 3",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "name: ML6512",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "ppm: 62",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "product_range: 7",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "If you ask Solr to group these documents by \"product_range\", then the total amount of groups is 2, but the\nfacets for ppm are 2 for 62 and 1 for 65.",
    "hierarchy": [
      "Result Grouping"
    ],
    "pageId": 594
  },
  {
    "content": "Result Grouping takes the following request parameters. Any number of these request parameters can be\nincluded in a single request:",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group\nIf <span class=\"code\">true</span>, query results will be grouped.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.field\nThe name of the field by which to group results. The field must be single-valued, and either be indexed or\na field type that has a value source and works in a function query, such as <span class=\"code\">ExternalFileField</span>. It must\nalso be a string-based field, such as <span class=\"code\">StrField</span> or <span class=\"code\">TextField</span>",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.func\nGroup based on the unique values of a function query.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "This option does not work with <span class=\"link\">distributed searches</span>.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.query\nReturn a single group of documents that match the given query.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "rows\nThe number of groups to return. The default value is <span class=\"code\">10</span>.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "start\nSpecifies an initial offset for the list of groups.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.limit\nSpecifies the number of results to return for each group. The default value is <span class=\"code\">1</span>.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.offset\nSpecifies an initial offset for the document list of each group.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "sort\nSpecifies how Solr sorts the groups relative to each other. For example, <span class=\"code\">sort=popularity desc</span> will cause\nthe groups to be sorted according to the highest popularity document in each group. The default value is\nscore desc<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.sort\nSpecifies how Solr sorts documents within each group. The default behavior if <span class=\"code\">group.sort</span> is not specified\nis to use the same effective value as the <span class=\"code\">sort</span> parameter.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.format\nIf this parameter is set to <span class=\"code\">simple</span>, the grouped documents are presented in a single flat list, and the <span class=\"code\">start</span>\nand <span class=\"code\">rows</span> parameters affect the numbers of documents instead of groups. An alternate value for this\nparameter is <span class=\"code\">grouped</span>.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.main\nIf <span class=\"code\">true</span>, the result of the first field grouping command is used as the main result list in the response,\nusing <span class=\"code\">group.format=simple</span>.",
    "hierarchy": [
      "Grouping Parameters"
    ],
    "pageId": 595
  },
  {
    "content": "group.ngroups\nIf <span class=\"ff1 fs0\">true</span>, Solr includes the number of groups that have matched the query in the results. The default value\nis false.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "See below for <span class=\"link\">Distributed Result Grouping Caveats</span> when using sharded indexes.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "group.truncate\nIf <span class=\"ff1 fs0\">true</span>, facet counts are based on the most relevant document of each group matching the query. The\ndefault value is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "group.facet\nDetermines whether to compute grouped facets for the field facets specified in facet.field parameters.\nGrouped facets are computed based on the first specified group. As with normal field faceting, fields\nshouldn't be tokenized (otherwise counts are computed for each token). Grouped faceting supports\nsingle and multivalued fields. Default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "There can be a heavy performance cost to this option.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "See below for <span class=\"link\">Distributed Result Grouping Caveats</span> when using sharded indexes.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "group.cache.percent\nSetting this parameter to a number greater than 0 enables caching for result grouping. Result Grouping\nexecutes two searches; this option caches the second search. The default value is <span class=\"ff1 fs0\">0</span>. The maximum value\nis <span class=\"ff1 fs0\">100</span>.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "Testing has shown that group caching only improves search time with Boolean, wildcard, and fuzzy\nqueries. For simple queries like term or \"match all\" queries, group caching degrades performance.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "Any number of group commands (e.g., <span class=\"ff1 fs0\">group.field</span>, <span class=\"ff1 fs0\">group.func</span>, <span class=\"ff1 fs0\">group.query</span>, etc.) may be specified in a\nsingle request.",
    "hierarchy": [
    ],
    "pageId": 596
  },
  {
    "content": "All of the following sample queries work with Solr's “bin/solr -e techproducts” example.",
    "hierarchy": [
      "Grouping Examples"
    ],
    "pageId": 596
  },
  {
    "content": "In this example, we will group results based on the <span class=\"ff1 fs0\">manu_exact</span> field, which specifies the manufacturer of the\nitems in the sample dataset.",
    "hierarchy": [
      "Grouping Examples",
      "Grouping Results by Field"
    ],
    "pageId": 596
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?fl=id,name&q=solr+memory&group=true&group.fie\nld=manu_exact",
    "hierarchy": [
      "Grouping Examples",
      "Grouping Results by Field"
    ],
    "pageId": 596
  },
  {
    "content": "{",
    "hierarchy": [
    ],
    "pageId": 597
  },
  {
    "content": "Ê <span class=\"fc2\">\"manu_exact\"</span>:{\nÊ   <span class=\"fc2\">\"matches\"</span>:<span class=\"fc3\">6</span>,\nÊ   <span class=\"fc2\">\"groups\"</span>:[{\nÊ       <span class=\"fc2\">\"groupValue\"</span>:<span class=\"fc1\">\"Apache Software Foundation\"</span>,\nÊ       <span class=\"fc2\">\"doclist\"</span>:{<span class=\"fc2\">\"numFound\"</span>:<span class=\"fc3\">1</span>,<span class=\"fc2\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc2\">\"docs\"</span>:[\nÊ           {\nÊ             <span class=\"fc2\">\"id\"</span>:<span class=\"fc1\">\"SOLR1000\"</span>,\nÊ             <span class=\"fc2\">\"name\"</span>:<span class=\"fc1\">\"Solr, the Enterprise Search Server\"</span>}]\nÊ       }},\nÊ     {\nÊ       <span class=\"fc2\">\"groupValue\"</span>:<span class=\"fc1\">\"Corsair Microsystems Inc.\"</span>,\nÊ       <span class=\"fc2\">\"doclist\"</span>:{<span class=\"fc2\">\"numFound\"</span>:<span class=\"fc3\">2</span>,<span class=\"fc2\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc2\">\"docs\"</span>:[\nÊ           {\nÊ             <span class=\"fc2\">\"id\"</span>:<span class=\"fc1\">\"VS1GB400C3\"</span>,\nÊ             <span class=\"fc2\">\"name\"</span>:<span class=\"fc1\">\"CORSAIR ValueSelect 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200)</span>",
    "hierarchy": [
    ],
    "pageId": 597
  },
  {
    "content": "Ê       }},\nÊ     {\nÊ       <span class=\"fc2\">\"groupValue\"</span>:<span class=\"fc1\">\"A-DATA Technology Inc.\"</span>,\nÊ       <span class=\"fc2\">\"doclist\"</span>:{<span class=\"fc2\">\"numFound\"</span>:<span class=\"fc3\">1</span>,<span class=\"fc2\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc2\">\"docs\"</span>:[\nÊ           {\nÊ             <span class=\"fc2\">\"id\"</span>:<span class=\"fc1\">\"VDBDB1A16\"</span>,\nÊ             <span class=\"fc2\">\"name\"</span>:<span class=\"fc1\">\"A-DATA V-Series 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System</span>",
    "hierarchy": [
    ],
    "pageId": 597
  },
  {
    "content": "Ê       }},\nÊ     {\nÊ       <span class=\"fc2\">\"groupValue\"</span>:<span class=\"fc1\">\"Canon Inc.\"</span>,\nÊ       <span class=\"fc2\">\"doclist\"</span>:{<span class=\"fc2\">\"numFound\"</span>:<span class=\"fc3\">1</span>,<span class=\"fc2\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc2\">\"docs\"</span>:[\nÊ           {\nÊ             <span class=\"fc2\">\"id\"</span>:<span class=\"fc1\">\"0579B002\"</span>,\nÊ             <span class=\"fc2\">\"name\"</span>:<span class=\"fc1\">\"Canon PIXMA MP500 All-In-One Photo Printer\"</span>}]\nÊ       }},\nÊ     {\nÊ       <span class=\"fc2\">\"groupValue\"</span>:<span class=\"fc1\">\"ASUS Computer Inc.\"</span>,\nÊ       <span class=\"fc2\">\"doclist\"</span>:{<span class=\"fc2\">\"numFound\"</span>:<span class=\"fc3\">1</span>,<span class=\"fc2\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc2\">\"docs\"</span>:[\nÊ           {\nÊ             <span class=\"fc2\">\"id\"</span>:<span class=\"fc1\">\"EN7800GTX/2DHTV/256M\"</span>,\nÊ             <span class=\"fc2\">\"name\"</span>:<span class=\"fc1\">\"ASUS Extreme N7800GTX/2DHTV (256 MB)\"</span>}]\nÊ       }\nÊ     }]}}}",
    "hierarchy": [
    ],
    "pageId": 597
  },
  {
    "content": "The response indicates that there are six total matches for our query. For each of the five unique values of\ngroup.field<span class=\"ff2 fs0\">, Solr returns a </span>docList<span class=\"ff2 fs0\"> for that </span>groupValue<span class=\"ff2 fs0\"> such that the </span>numFound<span class=\"ff2 fs0\"> indicates the total number</span>\nof documents in that group, and the top documents are returned according to the implicit default\ngroup.limit=1<span class=\"ff2 fs0\"> and </span>group.sort=score desc<span class=\"ff2 fs0\"> parameters. The resulting groups are then sorted by the score</span>\nof the top document within each group based on the implicit <span class=\"ff1 fs1\">sort=score desc</span>, and the number of groups\nreturned is limited to the implicit <span class=\"ff1 fs1\">rows=10</span>.",
    "hierarchy": [
    ],
    "pageId": 597
  },
  {
    "content": "We can run the same query with the request parameter <span class=\"ff2 fs1\">group.main=true</span>. This will format the results as a\nsingle flat document list. This flat format does not include as much information as the normal result\ngrouping query results – notably the <span class=\"ff2 fs1\">numFound</span> in each group – but it may be easier for existing Solr clients to\nparse.",
    "hierarchy": [
    ],
    "pageId": 598
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?fl=id,name,manufacturer&q=solr+memory&group=t\nrue&group.field=manu_exact&group.main=true",
    "hierarchy": [
    ],
    "pageId": 598
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">1</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"fl\"</span>:<span class=\"fc3\">\"id,name,manufacturer\"</span>,\nÊ     <span class=\"fc1\">\"indent\"</span>:<span class=\"fc3\">\"true\"</span>,\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc3\">\"solr memory\"</span>,\nÊ     <span class=\"fc1\">\"group.field\"</span>:<span class=\"fc3\">\"manu_exact\"</span>,\nÊ     <span class=\"fc1\">\"group.main\"</span>:<span class=\"fc3\">\"true\"</span>,\nÊ     <span class=\"fc1\">\"group\"</span>:<span class=\"fc3\">\"true\"</span>}},\nÊ <span class=\"fc1\">\"grouped\"</span>:{},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">6</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"SOLR1000\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Solr, the Enterprise Search Server\"</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"VS1GB400C3\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"CORSAIR ValueSelect 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System</span>",
    "hierarchy": [
    ],
    "pageId": 598
  },
  {
    "content": "Ê     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"VDBDB1A16\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"A-DATA V-Series 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System Memory</span>",
    "hierarchy": [
    ],
    "pageId": 598
  },
  {
    "content": "Ê     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"0579B002\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Canon PIXMA MP500 All-In-One Photo Printer\"</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"EN7800GTX/2DHTV/256M\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"ASUS Extreme N7800GTX/2DHTV (256 MB)\"</span>}]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 598
  },
  {
    "content": "In this example, we will use the <span class=\"ff2 fs1\">group.query</span> parameter to find the top three results for \"memory\" in two\ndifferent price ranges: 0.00 to 99.99, and over 100.",
    "hierarchy": [
      "Grouping by Query"
    ],
    "pageId": 598
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?indent=true&fl=name,price&q=memory&group=true\n&group.query=price:0+TO+99.99&group.query=price:[100+TO+*]&group.limit=3",
    "hierarchy": [
      "Grouping by Query"
    ],
    "pageId": 598
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">42</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"fl\"</span>:<span class=\"fc3\">\"name,price\"</span>,\nÊ     <span class=\"fc1\">\"indent\"</span>:<span class=\"fc3\">\"true\"</span>,\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc3\">\"memory\"</span>,\nÊ     <span class=\"fc1\">\"group.limit\"</span>:<span class=\"fc3\">\"3\"</span>,\nÊ     <span class=\"fc1\">\"group.query\"</span>:[<span class=\"fc3\">\"price:[0 TO 99.99]\"</span>,\nÊ     <span class=\"fc3\">\"price:[100 TO *]\"</span>],\nÊ     <span class=\"fc1\">\"group\"</span>:<span class=\"fc3\">\"true\"</span>}},\nÊ <span class=\"fc1\">\"grouped\"</span>:{\nÊ   <span class=\"fc1\">\"price:[0 TO 99.99]\"</span>:{\nÊ     <span class=\"fc1\">\"matches\"</span>:<span class=\"fc2\">5</span>,\nÊ     <span class=\"fc1\">\"doclist\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">1</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ         {\nÊ           <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"CORSAIR ValueSelect 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System</span>",
    "hierarchy": [
    ],
    "pageId": 599
  },
  {
    "content": "Ê           <span class=\"fc1\">\"price\"</span>:<span class=\"fc2\">74.99</span>}]\nÊ     }},\nÊ   <span class=\"fc1\">\"price:[100 TO *]\"</span>:{\nÊ     <span class=\"fc1\">\"matches\"</span>:<span class=\"fc2\">5</span>,\nÊ     <span class=\"fc1\">\"doclist\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">3</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ         {\nÊ           <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"CORSAIR  XMS 2GB (2 x 1GB) 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200)</span>",
    "hierarchy": [
    ],
    "pageId": 599
  },
  {
    "content": "Ê           <span class=\"fc1\">\"price\"</span>:<span class=\"fc2\">185.0</span>},\nÊ         {\nÊ           <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"Canon PIXMA MP500 All-In-One Photo Printer\"</span>,\nÊ           <span class=\"fc1\">\"price\"</span>:<span class=\"fc2\">179.99</span>},\nÊ         {\nÊ           <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"ASUS Extreme N7800GTX/2DHTV (256 MB)\"</span>,\nÊ           <span class=\"fc1\">\"price\"</span>:<span class=\"fc2\">479.95</span>}]\nÊ     }\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 599
  },
  {
    "content": "In this case, Solr found five matches for \"memory,\" but only returns four results grouped by price. This is\nbecause one result for \"memory\" did not have a price assigned to it.",
    "hierarchy": [
    ],
    "pageId": 599
  },
  {
    "content": "Grouping is supported for <span class=\"link\">distributed searches</span>, with some caveats:",
    "hierarchy": [
      "Distributed Result Grouping Caveats"
    ],
    "pageId": 599
  },
  {
    "content": "Currently <span class=\"ff1 fs2\">group.func</span> is is not supported in any distributed searches",
    "hierarchy": [
      "Distributed Result Grouping Caveats"
    ],
    "pageId": 599
  },
  {
    "content": "group.ngroups and <span class=\"ff1 fs2\">group.facet</span> require that all documents in each group must be co-located on the\nsame shard in order for accurate counts to be returned. <span class=\"link\">Document routing via composite keys</span> can be a\nuseful solution in many situations.",
    "hierarchy": [
      "Distributed Result Grouping Caveats"
    ],
    "pageId": 599
  },
  {
    "content": "The <span class=\"ff1\">clustering</span> (or <span class=\"ff1\">cluster analysis</span>) plugin attempts to automatically discover groups of related search hits\n(documents) and assign human-readable labels to these groups.",
    "hierarchy": [
      "Result Clustering"
    ],
    "pageId": 600
  },
  {
    "content": "By default in Solr, the clustering algorithm is applied to the search result of each single query -— this is\ncalled an <span class=\"code\">on-line</span> clustering. While Solr contains an extension for full-index clustering (<span class=\"code\">off-line</span> clustering) this\nsection will focus on discussing on-line clustering only.",
    "hierarchy": [
      "Result Clustering"
    ],
    "pageId": 600
  },
  {
    "content": "Clusters discovered for a given query can be perceived as <span class=\"code\">dynamic facets</span>. This is beneficial when regular\nfaceting is difficult (field values are not known in advance) or when the queries are exploratory in nature.\nTake a look at the <span class=\"link\">Carrot2</span> project's demo page to see an example of search results clustering in action (the\ngroups in the visualization have been discovered automatically in search results to the right, there is no\nexternal information involved).",
    "hierarchy": [
      "Result Clustering"
    ],
    "pageId": 600
  },
  {
    "content": "The query issued to the system was <span class=\"code\">Solr</span>. It seems clear that faceting could not yield a similar set of groups,\nalthough the goals of both techniques are similar—to let the user explore the set of search results and\neither rephrase the query or narrow the focus to a subset of current documents. Clustering is also similar to\nResult Grouping<span class=\"fc1\"> in that it can help to look deeper into search results, beyond the top few hits.</span>",
    "hierarchy": [
      "Result Clustering"
    ],
    "pageId": 600
  },
  {
    "content": "Each <span class=\"ff1\">document</span> passed to the clustering component is composed of several logical parts:",
    "hierarchy": [
      "Result Clustering",
      "Clustering Concepts"
    ],
    "pageId": 600
  },
  {
    "content": "<span class=\"ls1\">a unique identifier,</span>",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "<span class=\"ls1\">origin URL,</span>",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "<span class=\"ls1\">the title,</span>",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "<span class=\"ls1\">the main content,</span>",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "<span class=\"ls1\">a language code of the title and content.</span>",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "The identifier part is mandatory, everything else is optional but at least one of the text fields (title or content)\nwill be required to make the clustering process reasonable. It is important to remember that logical\ndocument parts must be mapped to a particular schema and its fields. The content (text) for clustering can\nbe sourced from either a stored text field or context-filtered using a highlighter, all these options are\nexplained below in the <span class=\"link\">configuration</span> section.",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "A <span class=\"ff2\">clustering algorithm</span> is the actual logic (implementation) that discovers relationships among the\ndocuments in the search result and forms human-readable cluster labels. Depending on the choice of the\nalgorithm the clusters may (and probably will) vary. Solr comes with several algorithms implemented in the\nopen source <span class=\"link\">Carrot2</span> project, commercial alternatives also exist.",
    "hierarchy": [
    ],
    "pageId": 601
  },
  {
    "content": "The “<span class=\"code\">techproducts</span>” example included with Solr is pre-configured with all the necessary components for\nresult clustering<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>but they are disabled by default.",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "To enable the clustering component contrib and a dedicated search handler configured to use it, specify a\nJVM System Property when running the example:",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "bin/solr start -e techproducts -Dsolr.clustering.enabled=true",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "You can now try out the clustering handler by opening the following URL in a browser:",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "http://localhost:8983/solr/techproducts/clustering?q=<span class=\"ff5\">:</span>&rows=100&wt=xml",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "The output XML should include search hits and an array of automatically discovered clusters at the end,\nresembling the output shown here:",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>299<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><result</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"response\"</span> <span class=\"fc4\">numFound</span>=<span class=\"fc5\">\"32\"</span> <span class=\"fc4\">start</span>=<span class=\"fc5\">\"0\"</span> <span class=\"fc4\">maxScore</span>=<span class=\"fc5\">\"1.0\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><doc></span>\nÊ     <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"id\"<span class=\"fc3\">></span></span>GB18030TEST<span class=\"fc3\"></str></span>\nÊ     <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"name\"<span class=\"fc3\">></span></span>Test with some GB18030 encoded characters<span class=\"fc3\"></str></span>\nÊ     <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"features\"<span class=\"fc3\">></span></span>\nÊ       <span class=\"fc3\"><str></span>No accents here<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str></span><span class=\"ff6\">这是一个功能</span><span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str></span>This is a feature (translated)<span class=\"fc3\"></str></span>\nÊ       <span class=\"fc3\"><str></span><span class=\"ff6\">这份文件是很有光泽</span><span class=\"fc3\"></str></span>",
    "hierarchy": [
      "Clustering Quick Start Example"
    ],
    "pageId": 601
  },
  {
    "content": "Ê       <span class=\"fc1\"><str></span>This document is very shiny (translated)<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"><float</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"price\"<span class=\"fc1\">></span></span>0.0<span class=\"fc1\"></float></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"price_c\"<span class=\"fc1\">></span></span>0,USD<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"inStock\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></bool></span>\nÊ     <span class=\"fc1\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"_version_\"<span class=\"fc1\">></span></span>1448955395025403904<span class=\"fc1\"></long></span>\nÊ     <span class=\"fc1\"><float</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"score\"<span class=\"fc1\">></span></span>1.0<span class=\"fc1\"></float></span>\nÊ   <span class=\"fc1\"></doc></span>",
    "hierarchy": [
    ],
    "pageId": 602
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- more search hits, omitted --></span>\nÊ <span class=\"fc1\"></result></span>",
    "hierarchy": [
    ],
    "pageId": 602
  },
  {
    "content": "Ê <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"clusters\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"labels\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><str></span>DDR<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"score\"<span class=\"fc1\">></span></span>3.9599865057283354<span class=\"fc1\"></double></span>\nÊ     <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"docs\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><str></span>TWINX2048-3200PRO<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>VS1GB400C3<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>VDBDB1A16<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"labels\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><str></span>iPod<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"score\"<span class=\"fc1\">></span></span>11.959228467119022<span class=\"fc1\"></double></span>\nÊ     <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"docs\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><str></span>F8V7067-APL-KIT<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>IW-02<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>MA147LL/A<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ   <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 602
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- More clusters here, omitted. --></span>",
    "hierarchy": [
    ],
    "pageId": 602
  },
  {
    "content": "Ê   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"labels\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><str></span>Other Topics<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"score\"<span class=\"fc1\">></span></span>0.0<span class=\"fc1\"></double></span>\nÊ     <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"other-topics\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></bool></span>\nÊ     <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"docs\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><str></span>adata<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>apple<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>asus<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"><str></span>ati<span class=\"fc1\"></str></span>\nÊ       <span class=\"fc4\"><!-- other unassigned document IDs here --></span>\nÊ     <span class=\"fc1\"></arr></span>\nÊ   <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 602
  },
  {
    "content": "Ê <span class=\"fc1\"></arr></span>",
    "hierarchy": [
    ],
    "pageId": 603
  },
  {
    "content": "There were a few clusters discovered for this query (<span class=\"ff1 fs1\">*:*</span>), separating search hits into various categories:\nDDR, iPod, Hard Drive, etc. Each cluster has a label and score that indicates the \"goodness\" of the cluster.\nThe score is algorithm-specific and is meaningful only in relation to the scores of other clusters in the same\nset. In other words, if cluster <span class=\"code\">A</span> has a higher score than cluster <span class=\"code\">B</span>, cluster <span class=\"code\">A</span> should be of better quality (have a\nbetter label and/or more coherent document set). Each cluster has an array of identifiers of documents\nbelonging to it. These identifiers correspond to the <span class=\"ff1 fs1\">uniqueKey</span> field declared in the schema.",
    "hierarchy": [
    ],
    "pageId": 603
  },
  {
    "content": "Depending on the quality of input documents, some clusters may not make much sense. Some documents\nmay be left out and not be clustered at all; these will be assigned to the synthetic <span class=\"code\">Other Topics</span> group, marked\nwith the <span class=\"ff1 fs1\">other-topics</span> property set to <span class=\"ff1 fs1\">true</span> (see the XML dump above for an example). The score of the\nother topics group is zero.",
    "hierarchy": [
    ],
    "pageId": 603
  },
  {
    "content": "The clustering contrib extension requires <span class=\"ff1 fs1\">dist/solr-clustering-*.jar</span> and all JARs under\ncontrib/clustering/lib<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Installing the Clustering Contrib"
    ],
    "pageId": 603
  },
  {
    "content": "Clustering extension is a search component and must be declared in <span class=\"ff1 fs1\">solrconfig.xml</span>. Such a component\ncan be then appended to a request handler as the last component in the chain (because it requires search\nresults which must be previously fetched by the search component).",
    "hierarchy": [
      "Clustering Configuration",
      "Declaration of the Clustering Search Component and Request Handler"
    ],
    "pageId": 603
  },
  {
    "content": "An example configuration could look as shown below.",
    "hierarchy": [
      "Clustering Configuration",
      "Declaration of the Clustering Search Component and Request Handler"
    ],
    "pageId": 603
  },
  {
    "content": "1.Include the required contrib JARs. Note that by default paths are relative to the Solr core so they may\nneed adjustments to your configuration, or an explicit specification of the <span class=\"ff1 fs1\">$solr.install.dir</span>.",
    "hierarchy": [
      "Clustering Configuration",
      "Declaration of the Clustering Search Component and Request Handler"
    ],
    "pageId": 603
  },
  {
    "content": "2.Declaration of the search component. Each component can also declare multiple clustering pipelines\n(\"engines\"), which can be selected at runtime by passing <span class=\"ff1 fs1\">clustering.engine=(engine name)</span> URL\nparameter.",
    "hierarchy": [
      "Clustering Configuration",
      "Declaration of the Clustering Search Component and Request Handler"
    ],
    "pageId": 603
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- Lingo clustering algorithm --></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"engine\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">></span></span>lingo<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"carrot.algorithm\"<span class=\"fc0\">></span></span>org.carrot2.clustering.lingo.LingoClusteringAlgorithm<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- An example definition for the STC clustering algorithm. --></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"engine\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc0\">></span></span>stc<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"carrot.algorithm\"<span class=\"fc0\">></span></span>org.carrot2.clustering.stc.STCClusteringAlgorithm<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "3.A request handler to which we append the clustering component declared above.",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "Ê               <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SearchHandler\"<span class=\"fc0\">></span></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"clustering\"<span class=\"fc0\">></span></span>true<span class=\"fc0\"></bool></span>\nÊ   <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"clustering.results\"<span class=\"fc0\">></span></span>true<span class=\"fc0\"></bool></span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- Logical field to physical field mapping. --></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"carrot.url\"<span class=\"fc0\">></span></span>id<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"carrot.title\"<span class=\"fc0\">></span></span>doctitle<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"carrot.snippet\"<span class=\"fc0\">></span></span>content<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- Configure any other request handler parameters. We will cluster the</span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"rows\"<span class=\"fc0\">></span></span>100<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fl\"<span class=\"fc0\">></span></span>*,score<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- Append clustering at the end of the list of search components. --></span>\nÊ <span class=\"fc0\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"last-components\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str></span>clustering<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></arr></span>",
    "hierarchy": [
    ],
    "pageId": 604
  },
  {
    "content": "The following parameters of each clustering engine or the entire clustering component (depending where\nthey are declared) are available.",
    "hierarchy": [
      "Configuration Parameters of the Clustering Component"
    ],
    "pageId": 604
  },
  {
    "content": "clustering\nWhen <span class=\"ff1 fs2\">true</span>, clustering component is enabled.",
    "hierarchy": [
      "Configuration Parameters of the Clustering Component"
    ],
    "pageId": 604
  },
  {
    "content": "clustering.engine\nDeclares which clustering engine to use. If not present, the first declared engine will become the default",
    "hierarchy": [
      "Configuration Parameters of the Clustering Component"
    ],
    "pageId": 604
  },
  {
    "content": "one.",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "clustering.results\nWhen <span class=\"ff2 fs1\">true</span>, the component will perform clustering of search results (this should be enabled).",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "clustering.collection\nWhen <span class=\"ff2 fs1\">true</span>, the component will perform clustering of the whole document index (this section does not\ncover full-index clustering).",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "At the engine declaration level, the following parameters are supported.",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "carrot.algorithm\nThe algorithm class.",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "carrot.resourcesDir\nAlgorithm-specific resources and configuration files (stop words, other lexical resources, default settings).\nBy default points to <span class=\"ff2 fs1\">conf/clustering/carrot2/</span>",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "carrot.outputSubClusters\nIf <span class=\"ff2 fs1\">true</span> and the algorithm supports hierarchical clustering, sub-clusters will also be emitted. Default value:\ntrue.",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "carrot.numDescriptions\nMaximum number of per-cluster labels to return (if the algorithm assigns more than one label to a\ncluster).",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "The <span class=\"ff2 fs1\">carrot.algorithm</span> parameter should contain a fully qualified class name of an algorithm supported by\nthe <span class=\"link\">Carrot2</span> framework. Currently, the following algorithms are available:",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "org.carrot2.clustering.lingo.LingoClusteringAlgorithm (open source)",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "org.carrot2.clustering.stc.STCClusteringAlgorithm (open source)",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm (open source)",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "com.carrotsearch.lingo3g.Lingo3GClusteringAlgorithm (commercial)",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "For a comparison of characteristics of these algorithms see the following links:",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "<span class=\"link\">http://doc.carrot2.org/#section.advanced-topics.fine-tuning.choosing-algorithm</span>",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "<span class=\"link\">http://project.carrot2.org/algorithms.html</span>",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "<span class=\"link\">http://carrotsearch.com/lingo3g-comparison.html</span>",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "The question of which algorithm to choose depends on the amount of traffic (STC is faster than Lingo, but\narguably produces less intuitive clusters, Lingo3G is the fastest algorithm but is not free or open source),\nexpected result (Lingo3G provides hierarchical clusters, Lingo and STC provide flat clusters), and the input\ndata (each algorithm will cluster the input slightly differently). There is no one answer which algorithm is\n\"the best\".",
    "hierarchy": [
    ],
    "pageId": 605
  },
  {
    "content": "The clustering engine can apply clustering to the full content of (stored) fields or it can run an internal\nhighlighter pass to extract context-snippets before clustering. Highlighting is recommended when the",
    "hierarchy": [
      "Contextual and Full Field Clustering"
    ],
    "pageId": 605
  },
  {
    "content": "logical snippet field contains a lot of content (this would affect clustering performance). Highlighting can\nalso increase the quality of clustering because the content passed to the algorithm will be more focused\naround the query (it will be query-specific context). The following parameters control the internal\nhighlighter.",
    "hierarchy": [
    ],
    "pageId": 606
  },
  {
    "content": "carrot.produceSummary\nWhen <span class=\"ff2 fs1\">true</span> the clustering component will run a highlighter pass on the content of logical fields pointed to\nby <span class=\"ff2 fs1\">carrot.title</span> and <span class=\"ff2 fs1\">carrot.snippet</span>. Otherwise full content of those fields will be clustered.",
    "hierarchy": [
    ],
    "pageId": 606
  },
  {
    "content": "carrot.fragSize\nThe size, in characters, of the snippets (aka fragments) created by the highlighter. If not specified, the\ndefault highlighting fragsize (<span class=\"ff2 fs1\">hl.fragsize</span>) will be used.",
    "hierarchy": [
    ],
    "pageId": 606
  },
  {
    "content": "carrot.summarySnippets\nThe number of summary snippets to generate for clustering. If not specified, the default highlighting\nsnippet count (<span class=\"ff2 fs1\">hl.snippets</span>) will be used.",
    "hierarchy": [
    ],
    "pageId": 606
  },
  {
    "content": "As already mentioned in <span class=\"link\">Clustering Concepts</span>, the clustering component clusters \"documents\" consisting of\nlogical parts that need to be mapped onto physical schema of data stored in Solr. The field mapping\nattributes provide a connection between fields and logical document parts. Note that the content of title and\nsnippet fields must be <span class=\"code\">stored</span> so that it can be retrieved at search time.",
    "hierarchy": [
      "Logical to Document Field Mapping"
    ],
    "pageId": 606
  },
  {
    "content": "carrot.title\nThe field (alternatively comma- or space-separated list of fields) that should be mapped to the logical\ndocument's title. The clustering algorithms typically give more weight to the content of the title field\ncompared to the content (snippet). For best results, the field should contain concise, noise-free content. If\nthere is no clear title in your data, you can leave this parameter blank.",
    "hierarchy": [
      "Logical to Document Field Mapping"
    ],
    "pageId": 606
  },
  {
    "content": "carrot.snippet\nThe field (alternatively comma- or space-separated list of fields) that should be mapped to the logical\ndocument's main content. If this mapping points to very large content fields the performance of\nclustering may drop significantly. An alternative then is to use query-context snippets for clustering\ninstead of full field content. See the description of the <span class=\"ff2 fs1\">carrot.produceSummary</span> parameter for details.",
    "hierarchy": [
      "Logical to Document Field Mapping"
    ],
    "pageId": 606
  },
  {
    "content": "carrot.url\nThe field that should be mapped to the logical document's content URL. Leave blank if not required.",
    "hierarchy": [
      "Logical to Document Field Mapping"
    ],
    "pageId": 606
  },
  {
    "content": "The field mapping specification can include a <span class=\"ff2 fs1\">carrot.lang</span> parameter, which defines the field that stores <span class=\"link\">ISO</span>\n639-1<span class=\"fc0\"> code of the language in which the title and content of the document are written. This information can</span>\nbe stored in the index based on apriori knowledge of the documents' source or a language detection filter\napplied at indexing time. All algorithms inside the Carrot2 framework will accept ISO codes of languages\ndefined in <span class=\"link\">LanguageCode enum</span>.",
    "hierarchy": [
      "Clustering Multilingual Content"
    ],
    "pageId": 606
  },
  {
    "content": "The language hint makes it easier for clustering algorithms to separate documents from different languages\non input and to pick the right language resources for clustering. If you do have multi-lingual query results\n(or query results in a language different than English), it is strongly advised to map the language field",
    "hierarchy": [
      "Clustering Multilingual Content"
    ],
    "pageId": 606
  },
  {
    "content": "appropriately.",
    "hierarchy": [
    ],
    "pageId": 607
  },
  {
    "content": "carrot.lang\nThe field that stores ISO 639-1 code of the language of the document's text fields.",
    "hierarchy": [
    ],
    "pageId": 607
  },
  {
    "content": "carrot.lcmap\nA mapping of arbitrary strings into ISO 639 two-letter codes used by <span class=\"ff2 fs1\">carrot.lang</span>. The syntax of this\nparameter is the same as <span class=\"ff2 fs1\">langid.map.lcmap</span>, for example: <span class=\"ff2 fs1\">langid.map.lcmap=japanese:ja polish:pl</span>\nenglish:en",
    "hierarchy": [
    ],
    "pageId": 607
  },
  {
    "content": "The default language can also be set using Carrot2-specific algorithm attributes (in this case the\nMultilingualClustering.defaultLanguage<span class=\"fc0\"> attribute).</span>",
    "hierarchy": [
    ],
    "pageId": 607
  },
  {
    "content": "The algorithms that come with Solr are using their default settings which may be inadequate for all data\nsets. All algorithms have lexical resources and resources (stop words, stemmers, parameters) that may\nrequire tweaking to get better clusters (and cluster labels). For Carrot2-based algorithms it is probably best\nto refer to a dedicated tuning application called Carrot2 Workbench (screenshot below). From this\napplication one can export a set of algorithm attributes as an XML file, which can be then placed under the\nlocation pointed to by <span class=\"ff2 fs1\">carrot.resourcesDir</span>.",
    "hierarchy": [
      "Tweaking Algorithm Settings"
    ],
    "pageId": 607
  },
  {
    "content": "The default attributes for all engines (algorithms) declared in the clustering component are placed under\ncarrot.resourcesDir<span class=\"ff1 fs0\"> and with an expected file name of </span>engineName-attributes.xml<span class=\"ff1 fs0\">. So for an engine</span>\nnamed <span class=\"ff2 fs1\">lingo</span> and the default value of <span class=\"ff2 fs1\">carrot.resourcesDir</span>, the attributes would be read from a file in\nconf/clustering/carrot2/lingo-attributes.xml<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Tweaking Algorithm Settings",
      "Providing Defaults for Clustering"
    ],
    "pageId": 607
  },
  {
    "content": "An example XML file changing the default language of documents to Polish is shown below.",
    "hierarchy": [
      "Tweaking Algorithm Settings",
      "Providing Defaults for Clustering"
    ],
    "pageId": 607
  },
  {
    "content": "Ê <span class=\"fc0\"><attribute-set</span> <span class=\"fc2\">id</span>=<span class=\"fc3\">\"attributes\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><value-set></span>\nÊ     <span class=\"fc0\"><label></span>attributes<span class=\"fc0\"></label></span>\nÊ     <span class=\"fc0\"><attribute</span> <span class=\"fc2\">key</span>=<span class=\"fc3\">\"MultilingualClustering.defaultLanguage\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><value</span> <span class=\"fc2\">type</span>=<span class=\"fc3\">\"org.carrot2.core.LanguageCode\"</span> <span class=\"fc2\">value</span>=<span class=\"fc3\">\"POLISH\"<span class=\"fc0\">/></span></span>\nÊ     <span class=\"fc0\"></attribute></span>\nÊ   <span class=\"fc0\"></value-set></span>\nÊ <span class=\"fc0\"></attribute-set></span>",
    "hierarchy": [
    ],
    "pageId": 608
  },
  {
    "content": "The clustering component and Carrot2 clustering algorithms can accept query-time attribute overrides. Note\nthat certain things (for example lexical resources) can only be initialized once (at startup, via the XML\nconfiguration files).",
    "hierarchy": [
      "Tweaking Algorithms at Query-Time"
    ],
    "pageId": 608
  },
  {
    "content": "An example query that changes the <span class=\"ff1 fs2\">LingoClusteringAlgorithm.desiredClusterCountBase</span> parameter for\nthe Lingo algorithm:",
    "hierarchy": [
      "Tweaking Algorithms at Query-Time"
    ],
    "pageId": 608
  },
  {
    "content": "http://localhost:8983/solr/techproducts/clustering?q=*:*&rows=100&LingoClusteringAlgorithm.desire\ndClusterCountBase=20",
    "hierarchy": [
      "Tweaking Algorithms at Query-Time"
    ],
    "pageId": 608
  },
  {
    "content": "The clustering engine (the algorithm declared in <span class=\"ff1 fs2\">solrconfig.xml</span>) can also be changed at runtime by\npassing <span class=\"ff1 fs2\">clustering.engine=name</span> request attribute:",
    "hierarchy": [
      "Tweaking Algorithms at Query-Time"
    ],
    "pageId": 608
  },
  {
    "content": "http://localhost:8983/solr/techproducts/clustering?q=*:*&rows=100&clustering.engine=kmeans",
    "hierarchy": [
      "Tweaking Algorithms at Query-Time"
    ],
    "pageId": 608
  },
  {
    "content": "Dynamic clustering of search results comes with two major performance penalties:",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "Increased cost of fetching a larger-than-usual number of search results (50, 100 or more documents),",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "Additional computational cost of the clustering itself.",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "For simple queries, the clustering time will usually dominate the fetch time. If the document content is very\nlong the retrieval of stored content can become a bottleneck. The performance impact of clustering can be\nlowered in several ways:",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "feed less content to the clustering algorithm by enabling <span class=\"ff1 fs2\">carrot.produceSummary</span> attribute,",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "perform clustering on selected fields (titles only) to make the input smaller,",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "use a faster algorithm (STC instead of Lingo, Lingo3G instead of STC),",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "tune the performance attributes related directly to a specific algorithm.",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "Some of these techniques are described in <span class=\"ff4\">Apache SOLR and Carrot2 integration strategies</span> document,\navailable at <span class=\"link\">http://carrot2.github.io/solr-integration-strategies</span>. The topic of improving performance is also",
    "hierarchy": [
      "Performance Considerations with Dynamic Clustering"
    ],
    "pageId": 608
  },
  {
    "content": "included in the Carrot2 manual at <span class=\"link\">http://doc.carrot2.org/#section.advanced-topics.fine-tuning.performance</span>.",
    "hierarchy": [
    ],
    "pageId": 609
  },
  {
    "content": "The following resources provide additional information about the clustering component in Solr and its\npotential applications.",
    "hierarchy": [
      "Additional Resources"
    ],
    "pageId": 609
  },
  {
    "content": "Apache Solr and Carrot2 integration strategies: <span class=\"link\">http://carrot2.github.io/solr-integration-strategies</span>",
    "hierarchy": [
      "Additional Resources"
    ],
    "pageId": 609
  },
  {
    "content": "Clustering and Visualization of Solr search results (video from Berlin BuzzWords conference, 2011):\nhttp://vimeo.com/26616444",
    "hierarchy": [
      "Additional Resources"
    ],
    "pageId": 609
  },
  {
    "content": "Solr supports location data for use in spatial/geospatial searches.",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Using spatial search, you can:",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Index points or other shapes",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Filter search results by a bounding box or circle or by other shapes",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Sort or boost scoring by distance between points, or relative area between rectangles",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Generate a 2D grid of facet count numbers for heatmap generation or point-plotting.",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "There are four main field types available for spatial search:",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "\nLatLonPointSpatialField",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "LatLonType (now deprecated) and its non-geodetic twin <span class=\"code\">PointType</span>",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "SpatialRecursivePrefixTreeFieldType (RPT for short), including <span class=\"code\">RptWithGeometrySpatialField</span>, a\nderivative",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "\nBBoxField",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "LatLonPointSpatialField<span class=\"ff2 fs1\"> is the ideal field type for the most common use-cases for lat-lon point data. It</span>\nreplaces LatLonType which still exists for backwards compatibility. RPT offers some more features for more\nadvanced/custom use cases and options like polygons and heatmaps.",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "RptWithGeometrySpatialField<span class=\"ff2 fs1\"> is for indexing and searching non-point data though it can do points too. It</span>\ncan't do sorting/boosting.",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "BBoxField<span class=\"ff2 fs1\"> is for indexing bounding boxes, querying by a box, specifying a search predicate</span>\n(Intersects,Within,Contains,Disjoint,Equals), and a relevancy sort/boost like overlapRatio or simply the area.",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Some esoteric details that are not in this guide can be found at <span class=\"link\">http://wiki.apache.org/solr/SpatialSearch</span>.",
    "hierarchy": [
      "Spatial Search"
    ],
    "pageId": 610
  },
  {
    "content": "Here's how <span class=\"code\">LatLonPointSpatialField</span> (LLPSF) should usually be configured in the schema:",
    "hierarchy": [
      "Spatial Search",
      "LatLonPointSpatialField"
    ],
    "pageId": 610
  },
  {
    "content": "LLPSF supports toggling <span class=\"code\">indexed</span>, <span class=\"code\">stored</span>, <span class=\"code\">docValues</span>, and <span class=\"code\">multiValued</span>. LLPSF internally uses a 2-\ndimensional Lucene \"Points\" (BDK tree) index when \"indexed\" is enabled (the default). When \"docValues\" is\nenabled, a latitude and longitudes pair are bit-interleaved into 64 bits and put into Lucene DocValues. The\naccuracy of the docValues data is about a centimeter.",
    "hierarchy": [
      "Spatial Search",
      "LatLonPointSpatialField"
    ],
    "pageId": 610
  },
  {
    "content": "For indexing geodetic points (latitude and longitude), supply it in \"lat,lon\" order (comma separated).",
    "hierarchy": [
      "Spatial Search",
      "Indexing Points"
    ],
    "pageId": 610
  },
  {
    "content": "For indexing non-geodetic points, it depends. Use <span class=\"code\">x y</span> (a space) if RPT. For PointType however, use <span class=\"code\">x,y</span> (a",
    "hierarchy": [
      "Spatial Search",
      "Indexing Points"
    ],
    "pageId": 610
  },
  {
    "content": "comma).",
    "hierarchy": [
    ],
    "pageId": 611
  },
  {
    "content": "If you'd rather use a standard industry format, Solr supports <span class=\"link\">WKT</span> and <span class=\"link\">GeoJSON</span>. However it’s much bulkier\nthan the raw coordinates for such simple data. (Not supported by the deprecated LatLonType or PointType)",
    "hierarchy": [
    ],
    "pageId": 611
  },
  {
    "content": "Using the <span class=\"code\">bin/post</span> tool:",
    "hierarchy": [
      "Indexing GeoJSON and WKT"
    ],
    "pageId": 611
  },
  {
    "content": "bin/post -type \"application/json\" -url\n\"http://localhost:8983/solr/mycollection/update?format=geojson\" /path/to/geojson.file",
    "hierarchy": [
      "Indexing GeoJSON and WKT"
    ],
    "pageId": 611
  },
  {
    "content": "The key parameter to pass in with your request is:",
    "hierarchy": [
      "Indexing GeoJSON and WKT"
    ],
    "pageId": 611
  },
  {
    "content": "format\nThe format of the file to pass in. Accepted values: <span class=\"code\">WKT</span> or <span class=\"code\">geojson</span>.",
    "hierarchy": [
      "Indexing GeoJSON and WKT"
    ],
    "pageId": 611
  },
  {
    "content": "There are two spatial Solr \"query parsers\" for geospatial search: <span class=\"code\">geofilt</span> and <span class=\"code\">bbox</span>. They take the following\nparameters:",
    "hierarchy": [
      "Searching with Query Parsers"
    ],
    "pageId": 611
  },
  {
    "content": "d\nThe radial distance, usually in kilometers. RPT & BBoxField can set other units via the setting\ndistanceUnits<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Searching with Query Parsers"
    ],
    "pageId": 611
  },
  {
    "content": "pt\nThe center point using the format \"lat,lon\" if latitude & longitude. Otherwise, \"x,y\" for PointType or \"x y\"\nfor RPT field types.",
    "hierarchy": [
      "Searching with Query Parsers"
    ],
    "pageId": 611
  },
  {
    "content": "sfield\nA spatial indexed field.",
    "hierarchy": [
      "Searching with Query Parsers"
    ],
    "pageId": 611
  },
  {
    "content": "score\n(Advanced option; not supported by LatLonType (deprecated) or PointType) If the query is used in a\nscoring context (e.g., as the main query in <span class=\"code\">q</span>), this <span class=\"link\">local parameter</span> determines what scores will be\nproduced. Valid values are:",
    "hierarchy": [
      "Searching with Query Parsers"
    ],
    "pageId": 611
  },
  {
    "content": "none: A fixed score of 1.0. (the default)\n•kilometers: distance in kilometers between the field value and the specified center point\n•miles: distance in miles between the field value and the specified center point\n•degrees: distance in degrees between the field value and the specified center point\n•distance: distance between the field value and the specified center point in the <span class=\"code\">distanceUnits</span>\nconfigured for this field\n•recipDistance: 1 / the distance",
    "hierarchy": [
      "Searching with Query Parsers"
    ],
    "pageId": 611
  },
  {
    "content": "Don't use this for indexed non-point shapes (e.g., polygons). The results will be\nerroneous. And with RPT, it’s only recommended for multi-valued point data, as the\nimplementation doesn’t scale very well and for single-valued fields, you should\ninstead use a separate non-RPT field purely for distance sorting.",
    "hierarchy": [
    ],
    "pageId": 612
  },
  {
    "content": "When used with <span class=\"code\">BBoxField</span>, additional options are supported:",
    "hierarchy": [
    ],
    "pageId": 612
  },
  {
    "content": "overlapRatio: The relative overlap between the indexed shape & query shape.\n•area: haversine based area of the overlapping shapes expressed in terms of the <span class=\"code\">distanceUnits</span>\nconfigured for this field\n•area2D: cartesian coordinates based area of the overlapping shapes expressed in terms of the\ndistanceUnits<span class=\"ff2 fs1\"> configured for this field</span>",
    "hierarchy": [
    ],
    "pageId": 612
  },
  {
    "content": "filter\n(Advanced option; not supported by LatLonType (deprecated) or PointType). If you only want the query to\nscore (with the above <span class=\"code\">score</span> local parameter), not filter, then set this local parameter to false.",
    "hierarchy": [
    ],
    "pageId": 612
  },
  {
    "content": "The <span class=\"code\">geofilt</span> filter allows you to retrieve results based on the geospatial distance (AKA the \"great circle\ndistance\") from a given point. Another way of looking at it is that it creates a circular shape filter. For\nexample, to find all documents within five kilometers of a given lat/lon point, you could enter <span class=\"code\">&q=</span>\n:<span class=\"code\">&fq={!geofilt sfield=store}&pt=45.15,-93.85&d=5<span class=\"ff2 fs1\">. This filter returns all results within a circle of the</span></span>\ngiven radius around the initial point:",
    "hierarchy": [
      "geofilt"
    ],
    "pageId": 612
  },
  {
    "content": "The <span class=\"code\">bbox</span> filter is very similar to <span class=\"code\">geofilt</span> except it uses the <span class=\"ff6\">bounding box</span> of the calculated circle. See the blue\nbox in the diagram below. It takes the same parameters as geofilt.",
    "hierarchy": [
      "bbox"
    ],
    "pageId": 612
  },
  {
    "content": "Here's a sample query:",
    "hierarchy": [
      "bbox"
    ],
    "pageId": 612
  },
  {
    "content": "&q=*:*&fq={!bbox sfield=store}&pt=45.15,-93.85&d=5",
    "hierarchy": [
      "bbox"
    ],
    "pageId": 612
  },
  {
    "content": "The rectangular shape is faster to compute and so it's sometimes used as an alternative to <span class=\"code\">geofilt</span> when\nit’s acceptable to return points outside of the radius. However, if the ideal goal is a circle but you want it to\nrun faster, then instead consider using the RPT field and try a large <span class=\"code\">distErrPct</span> value like <span class=\"code\">0.1</span> (10% radius).\nThis will return results outside the radius but it will do so somewhat uniformly around the shape.",
    "hierarchy": [
      "bbox"
    ],
    "pageId": 612
  },
  {
    "content": "When a bounding box includes a pole, the bounding box ends up being a \"bounding bowl\"\n(a <span class=\"code\">spherical cap</span>) that includes all values north of the lowest latitude of the circle if it touches\nthe north pole (or south of the highest latitude if it touches the south pole).",
    "hierarchy": [
    ],
    "pageId": 613
  },
  {
    "content": "Sometimes the spatial search requirement calls for finding everything in a rectangular area, such as the area\ncovered by a map the user is looking at. For this case, geofilt and bbox won't cut it. This is somewhat of a\ntrick, but you can use Solr’s range query syntax for this by supplying the lower-left corner as the start of the\nrange and the upper-right corner as the end of the range.",
    "hierarchy": [
      "Filtering by an Arbitrary Rectangle"
    ],
    "pageId": 613
  },
  {
    "content": "Here's an example:",
    "hierarchy": [
      "Filtering by an Arbitrary Rectangle"
    ],
    "pageId": 613
  },
  {
    "content": "&q=*:*&fq=store:[45,-94 TO 46,-93]",
    "hierarchy": [
      "Filtering by an Arbitrary Rectangle"
    ],
    "pageId": 613
  },
  {
    "content": "LatLonType (deprecated) does <span class=\"ff4\">not</span> support rectangles that cross the dateline. For RPT and BBoxField, if you\nare non-geospatial coordinates (<span class=\"ff5 fs3\">geo=\"false\"</span>) then you must quote the points due to the space, e.g., <span class=\"ff5 fs3\">\"x y\"</span>.",
    "hierarchy": [
      "Filtering by an Arbitrary Rectangle"
    ],
    "pageId": 613
  },
  {
    "content": "It's most common to put a spatial query into an \"fq\" parameter – a filter query. By default, Solr will cache the\nquery in the filter cache.",
    "hierarchy": [
      "Optimizing: Cache or Not"
    ],
    "pageId": 613
  },
  {
    "content": "If you know the filter query (be it spatial or not) is fairly unique and not likely to get a cache hit then specify\ncache=\"false\"<span class=\"ff2 fs1\"> as a local-param as seen in the following example. The only spatial types which stand to</span>\nbenefit from this technique are LatLonPointSpatialField and LatLonType (deprecated). Enable docValues on\nthe field (if it isn't already). LatLonType (deprecated) additionally requires a <span class=\"ff5 fs3\">cost=\"100\"</span> (or more) local-\nparam.",
    "hierarchy": [
      "Optimizing: Cache or Not"
    ],
    "pageId": 613
  },
  {
    "content": "&q=...mykeywords...&fq=...someotherfilters...&fq={!geofilt cache=false}&sfield=store&pt=45.15,-\n93.85&d=5",
    "hierarchy": [
      "Optimizing: Cache or Not"
    ],
    "pageId": 613
  },
  {
    "content": "LLPSF does not support Solr's \"PostFilter\".",
    "hierarchy": [
      "Optimizing: Cache or Not"
    ],
    "pageId": 613
  },
  {
    "content": "There are four distance function queries:",
    "hierarchy": [
      "Distance Sorting or Boosting (Function Queries)"
    ],
    "pageId": 613
  },
  {
    "content": "geodist, see below, usually the most appropriate;",
    "hierarchy": [
      "Distance Sorting or Boosting (Function Queries)"
    ],
    "pageId": 613
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">dist</span><span class=\"ls1\">, to calculate the p-norm distance between multi-dimensional vectors;</span>",
    "hierarchy": [
    ],
    "pageId": 614
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">hsin</span><span class=\"ls1\">, to calculate the distance between two points on a sphere;</span>",
    "hierarchy": [
    ],
    "pageId": 614
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">sqedist</span><span class=\"ls1\">, to calculate the squared Euclidean distance between two points.</span>",
    "hierarchy": [
    ],
    "pageId": 614
  },
  {
    "content": "For more information about these function queries, see the section on <span class=\"link\">Function Queries</span>.",
    "hierarchy": [
    ],
    "pageId": 614
  },
  {
    "content": "geodist<span class=\"ff1 fs0\"> is a distance function that takes three optional parameters: </span>(sfield,latitude,longitude)<span class=\"ff1 fs0\">. You</span>\ncan use the <span class=\"ff2 fs1\">geodist</span> function to sort results by distance or score return results.",
    "hierarchy": [
      "geodist"
    ],
    "pageId": 614
  },
  {
    "content": "For example, to sort your results by ascending distance, use a request like:",
    "hierarchy": [
      "geodist"
    ],
    "pageId": 614
  },
  {
    "content": "&q=*:*&fq={!geofilt}&sfield=store&pt=45.15,-93.85&d=50&sort=geodist() asc",
    "hierarchy": [
      "geodist"
    ],
    "pageId": 614
  },
  {
    "content": "To return the distance as the document score, use a request like:",
    "hierarchy": [
      "geodist"
    ],
    "pageId": 614
  },
  {
    "content": "&q={!func}geodist()&sfield=store&pt=45.15,-93.85&sort=score+asc&fl=*,score",
    "hierarchy": [
      "geodist"
    ],
    "pageId": 614
  },
  {
    "content": "Here are a few more useful examples of what you can do with spatial search in Solr.",
    "hierarchy": [
      "More Spatial Search Examples"
    ],
    "pageId": 614
  },
  {
    "content": "Here we will query for results in Jacksonville, Florida, or within 50 kilometers of 45.15,-93.85 (near Buffalo,\nMinnesota):",
    "hierarchy": [
      "More Spatial Search Examples",
      "Use as a Sub-Query to Expand Search Results"
    ],
    "pageId": 614
  },
  {
    "content": "&q=*:*&fq=(state:\"FL\" AND city:\"Jacksonville\") OR {!geofilt}&sfield=store&pt=45.15,-\n93.85&d=50&sort=geodist()+asc",
    "hierarchy": [
      "More Spatial Search Examples",
      "Use as a Sub-Query to Expand Search Results"
    ],
    "pageId": 614
  },
  {
    "content": "To facet by distance, you can use the <span class=\"ff2 fs1\">frange</span> query parser:",
    "hierarchy": [
      "More Spatial Search Examples",
      "Facet by Distance"
    ],
    "pageId": 614
  },
  {
    "content": "&q=*:*&sfield=store&pt=45.15,-93.85&facet.query={!frange l=0 u=5}geodist()&facet.query={!frange\nl=5.001 u=3000}geodist()",
    "hierarchy": [
      "More Spatial Search Examples",
      "Facet by Distance"
    ],
    "pageId": 614
  },
  {
    "content": "There are other ways to do it too, like using a <span class=\"ff2 fs1\">{!geofilt}</span> in each facet.query.",
    "hierarchy": [
      "More Spatial Search Examples",
      "Facet by Distance"
    ],
    "pageId": 614
  },
  {
    "content": "Using the <span class=\"link\">DisMax</span> or <span class=\"link\">Extended DisMax</span>, you can combine spatial search with the boost function to boost the\nnearest results:",
    "hierarchy": [
      "More Spatial Search Examples",
      "Boost Nearest Results"
    ],
    "pageId": 614
  },
  {
    "content": "&q.alt=*:*&fq={!geofilt}&sfield=store&pt=45.15,-\n93.85&d=50&bf=recip(geodist(),2,200,20)&sort=score desc",
    "hierarchy": [
    ],
    "pageId": 615
  },
  {
    "content": "RPT refers to either <span class=\"ff1 fs2\">SpatialRecursivePrefixTreeFieldType</span> (aka simply RPT) and an extended version:\nRptWithGeometrySpatialField<span class=\"code\"> (aka RPT with Geometry). RPT offers several functional improvements over</span>\nLatLonPointSpatialField:",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Non-geodetic – geo=false general x & y (<span class=\"ff4\">not</span> latitude and longitude)<span class=\"ff5\"> </span>—<span class=\"ff5\"> </span>if desired",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Query by polygons and other complex shapes, in addition to circles & rectangles",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Ability to index non-point shapes (e.g., polygons) as well as points – see RptWithGeometrySpatialField",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Heatmap grid faceting",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "RPT <span class=\"ff4\">shares</span> various features in common with <span class=\"ff1 fs2\">LatLonPointSpatialField</span>. Some are listed here:",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Latitude/Longitude indexed point data; possibly multi-valued",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Fast filtering with <span class=\"ff1 fs2\">geofilt</span>, <span class=\"ff1 fs2\">bbox</span> filters, and range query syntax (dateline crossing is supported)",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Well-Known-Text (WKT) shape syntax (required for specifying polygons & other complex shapes), and\nGeoJSON too. In addition to indexing and searching, this works with the <span class=\"ff1 fs2\">wt=geojson</span> (GeoJSON Solr\nresponse-writer) and <span class=\"ff1 fs2\">[geo f=myfield]</span> (geo Solr document-transformer).",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Sort/boost via <span class=\"ff1 fs2\">geodist</span><span class=\"ff5\"> </span>—<span class=\"ff5\"> <span class=\"ff4\">although not recommended</span></span>",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "Although RPT supports distance sorting/boosting, it is so inefficient at doing this that it\nmight be removed in the future. Fortunately, you can use LatLonPointSpatialField <span class=\"ff4\">as well</span> as\nRPT. Use LLPSF for the distance sorting/boosting; it only needs to have docValues for this;\nthe index attribute can be disabled as it won't be used.",
    "hierarchy": [
      "RPT"
    ],
    "pageId": 615
  },
  {
    "content": "To use RPT, the field type must be registered and configured in <span class=\"ff1 fs2\">schema.xml</span>. There are many options for this\nfield type.",
    "hierarchy": [
      "RPT",
      "Schema Configuration for RPT"
    ],
    "pageId": 615
  },
  {
    "content": "name\nThe name of the field type.",
    "hierarchy": [
      "RPT",
      "Schema Configuration for RPT"
    ],
    "pageId": 615
  },
  {
    "content": "class\nThis should be <span class=\"ff1 fs2\">solr.SpatialRecursivePrefixTreeFieldType</span>. But be aware that the Lucene spatial\nmodule includes some other so-called \"spatial strategies\" other than RPT, notably TermQueryPT*, BBox,\nPointVector*, and SerializedDV. Solr requires a field type to parallel these in order to use them. The\nasterisked ones have them.",
    "hierarchy": [
      "RPT",
      "Schema Configuration for RPT"
    ],
    "pageId": 615
  },
  {
    "content": "spatialContextFactory\nThis is a Java class name to an internal extension point governing support for shape definitions & parsing.\nIf you require polygon support, set this to <span class=\"ff1 fs2\">JTS</span> – an alias for\norg.locationtech.spatial4j.context.jts.JtsSpatialContextFactory<span class=\"code\">; otherwise it can be omitted.</span>",
    "hierarchy": [
      "RPT",
      "Schema Configuration for RPT"
    ],
    "pageId": 615
  },
  {
    "content": "See important info below about JTS. (note: prior to Solr 6, the \"org.locationtech.spatial4j\" part was\n\"com.spatial4j.core\" and there used to be no convenience JTS alias)",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "geo\nIf <span class=\"ff2 fs1\">true</span>, the default, latitude and longitude coordinates will be used and the mathematical model will\ngenerally be a sphere. If <span class=\"ff2 fs1\">false</span>, the coordinates will be generic X & Y on a 2D plane using\nEuclidean/Cartesian geometry.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "format\nDefines the shape syntax/format to be used. Defaults to <span class=\"ff2 fs1\">WKT</span> but <span class=\"ff2 fs1\">GeoJSON</span> is another popular format.\nSpatial4j governs this feature and supports <span class=\"link\">other formats</span>. If a given shape is parseable as \"lat,lon\" or \"x\ny\" then that is always supported.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "distanceUnits\nThis is used to specify the units for distance measurements used throughout the use of this field. This can\nbe <span class=\"ff2 fs1\">degrees</span>, <span class=\"ff2 fs1\">kilometers</span> or <span class=\"ff2 fs1\">miles</span>. It is applied to nearly all distance measurements involving the field:\nmaxDistErr<span class=\"ff1 fs0\">, </span>distErr<span class=\"ff1 fs0\">, </span>d<span class=\"ff1 fs0\">, </span>geodist<span class=\"ff1 fs0\"> and the </span>score<span class=\"ff1 fs0\"> when score is </span>distance<span class=\"ff1 fs0\">, </span>area<span class=\"ff1 fs0\">, or </span>area2d<span class=\"ff1 fs0\">. However, it</span>\ndoesn't affect distances embedded in WKT strings, (e.g., <span class=\"ff2 fs1\">BUFFER(POINT(200 10),0.2)</span>), which are still in\ndegrees.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "distanceUnits<span class=\"ff1 fs0\"> defaults to either </span>kilometers<span class=\"ff1 fs0\"> if </span>geo<span class=\"ff1 fs0\"> is </span>true<span class=\"ff1 fs0\">, or </span>degrees<span class=\"ff1 fs0\"> if </span>geo<span class=\"ff1 fs0\"> is </span>false<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "distanceUnits<span class=\"ff1 fs0\"> replaces the </span>units<span class=\"ff1 fs0\"> attribute; which is now deprecated and mutually exclusive with this</span>\nattribute.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "distErrPct\nDefines the default precision of non-point shapes (both index & query), as a fraction between <span class=\"ff2 fs1\">0.0</span> (fully\nprecise) to <span class=\"ff2 fs1\">0.5</span>. The closer this number is to zero, the more accurate the shape will be. However, more\nprecise indexed shapes use more disk space and take longer to index.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "Bigger <span class=\"ff2 fs1\">distErrPct</span> values will make queries faster but less accurate. At query time this can be overridden\nin the query syntax, such as to <span class=\"ff2 fs1\">0.0</span> so as to not approximate the search shape. The default for the RPT\nfield is <span class=\"ff2 fs1\">0.025</span>.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "For RPTWithGeometrySpatialField (see below), there's always complete accuracy with\nthe serialized geometry and so this doesn’t control accuracy so much as it controls the\ntrade-off of how big the index should be. distErrPct defaults to 0.15 for that field.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "maxDistErr\nDefines the highest level of detail required for indexed data. If left blank, the default is one meter – just a\nbit less than 0.000009 degrees. This setting is used internally to compute an appropriate maxLevels (see\nbelow).",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "worldBounds\nDefines the valid numerical ranges for x and y, in the format of <span class=\"ff2 fs1\">ENVELOPE(minX, maxX, maxY, minY)</span>. If\ngeo=\"true\"<span class=\"ff1 fs0\">, the standard lat-lon world boundaries are assumed. If </span>geo=false<span class=\"ff1 fs0\">, you should define your</span>\nboundaries.",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "distCalculator\nDefines the distance calculation algorithm. If <span class=\"ff2 fs1\">geo=true</span>, <span class=\"ff2 fs1\">haversine</span> is the default. If <span class=\"ff2 fs1\">geo=false</span>, <span class=\"ff2 fs1\">cartesian</span>",
    "hierarchy": [
    ],
    "pageId": 616
  },
  {
    "content": "will be the default. Other possible values are <span class=\"ff2 fs1\">lawOfCosines</span>, <span class=\"ff2 fs1\">vincentySphere</span> and <span class=\"ff2 fs1\">cartesian^2</span>.",
    "hierarchy": [
    ],
    "pageId": 617
  },
  {
    "content": "prefixTree\nDefines the spatial grid implementation. Since a PrefixTree (such as RecursivePrefixTree) maps the world\nas a grid, each grid cell is decomposed to another set of grid cells at the next level.",
    "hierarchy": [
    ],
    "pageId": 617
  },
  {
    "content": "If <span class=\"ff2 fs1\">geo=true</span> then the default prefix tree is <span class=\"ff2 fs1\">geohash</span>, otherwise it's <span class=\"ff2 fs1\">quad</span>. Geohash has 32 children at each\nlevel, quad has 4. Geohash can only be used for <span class=\"ff2 fs1\">geo=true</span> as it’s strictly geospatial.",
    "hierarchy": [
    ],
    "pageId": 617
  },
  {
    "content": "A third choice is <span class=\"ff2 fs1\">packedQuad</span>, which is generally more efficient than <span class=\"ff2 fs1\">quad</span>, provided there are many\nlevels<span class=\"code\"> </span>—<span class=\"code\"> </span>perhaps 20 or more.",
    "hierarchy": [
    ],
    "pageId": 617
  },
  {
    "content": "maxLevels\nSets the maximum grid depth for indexed data. Instead, it's usually more intuitive to compute an\nappropriate maxLevels by specifying <span class=\"ff2 fs1\">maxDistErr</span>.",
    "hierarchy": [
    ],
    "pageId": 617
  },
  {
    "content": "And there are others:<span class=\"ff1\"> <span class=\"ff2 fs1\">normWrapLongitude</span>, <span class=\"ff2 fs1\">datelineRule</span>, <span class=\"ff2 fs1\">validationRule</span>, <span class=\"ff2 fs1\">autoIndex</span>, <span class=\"ff2 fs1\">allowMultiOverlap</span>,</span>\nprecisionModel<span class=\"ff1 fs0\">. For further info, see notes below about </span>spatialContextFactory<span class=\"ff1 fs0\"> implementations</span>\nreferenced above, especially the link to the JTS based one.",
    "hierarchy": [
    ],
    "pageId": 617
  },
  {
    "content": "The RPT field types support a set of standard shapes: points, circles (aka buffered points), envelopes (aka\nrectangles or bounding boxes), line strings, polygons, and \"multi\" variants of these. The envelopes and line\nstrings are Euclidean/cartesian (flat 2D) shapes. Underlying Solr is the Spatial4j library which implements\nthem. To support other shapes, you can configure the <span class=\"ff2 fs1\">spatialContextFactory</span> attribute on the field type to\nreference other options. Two are available: JTS and Geo3D.",
    "hierarchy": [
      "Standard Shapes"
    ],
    "pageId": 617
  },
  {
    "content": "The <span class=\"link\">JTS Topology Suite</span> is a popular computational geometry library with a Euclidean/cartesian (flat 2D)\nmodel. It supports a variety of shapes including polygons, buffering shapes, and some invalid polygon repair\nfall-backs. With the help of Spatial4j, included with Solr, the polygons support dateline (anti-meridian)\ncrossing. Unfortunately Solr cannot include JTS due to its LGPL license. You must download it (a JAR file) and\nput that in a special location internal to Solr: <span class=\"ff2 fs1\">SOLR_INSTALL/server/solr-webapp/webapp/WEB-INF/lib/</span>.\nYou can readily download it here: <span class=\"link\">https://repo1.maven.org/maven2/com/vividsolutions/jts-core/</span>. <span class=\"ff6\">It will not</span>\nwork if placed in other more typical Solr lib directories, unfortunately.<span class=\"ff1\"> JTS's license is expected to be transitioned</span>\nto BSD by the end of 2017.",
    "hierarchy": [
      "JTS and Polygons (flat)"
    ],
    "pageId": 617
  },
  {
    "content": "Set the <span class=\"ff2 fs1\">spatialContextFactory</span> attribute on the field type to <span class=\"ff2 fs1\">JTS</span>.",
    "hierarchy": [
      "JTS and Polygons (flat)"
    ],
    "pageId": 617
  },
  {
    "content": "When activated, there are additional configuration attributes available; see\norg.locationtech.spatial4j.context.jts.JtsSpatialContextFactory<span class=\"fc0\"> for the Javadocs, and remember to look at the</span>\nsuperclass's options as well. One option in particular you should most likely enable is <span class=\"ff2 fs1\">autoIndex</span> (i.e., use\nJTS’s PreparedGeometry) as it’s been shown to be a major performance boost for non-trivial polygons.",
    "hierarchy": [
      "JTS and Polygons (flat)"
    ],
    "pageId": 617
  },
  {
    "content": "Ê              <span class=\"fc2\">spatialContextFactory</span>=<span class=\"fc3\">\"JTS\"</span>\nÊ              <span class=\"fc2\">autoIndex</span>=<span class=\"fc3\">\"true\"</span>\nÊ              <span class=\"fc2\">validationRule</span>=<span class=\"fc3\">\"repairBuffer0\"</span>\nÊ              <span class=\"fc2\">distErrPct</span>=<span class=\"fc3\">\"0.025\"</span>\nÊ              <span class=\"fc2\">maxDistErr</span>=<span class=\"fc3\">\"0.001\"</span>\nÊ              <span class=\"fc2\">distanceUnits</span>=<span class=\"fc3\">\"kilometers\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
    ],
    "pageId": 618
  },
  {
    "content": "Once the field type has been defined, define a field that uses it.",
    "hierarchy": [
    ],
    "pageId": 618
  },
  {
    "content": "Here's an example polygon query for a field \"geo\" that can be either\nsolr.SpatialRecursivePrefixTreeFieldType or RptWithGeometrySpatialField:",
    "hierarchy": [
    ],
    "pageId": 618
  },
  {
    "content": "&q=*:*&fq={!field f=geo}Intersects(POLYGON((-10 30, -40 40, -10 -20, 40 20, 0 0, -10 30)))",
    "hierarchy": [
    ],
    "pageId": 618
  },
  {
    "content": "Inside the parenthesis following the search predicate is the shape definition. The format of that shape is\ngoverned by the <span class=\"ff1 fs1\">format</span> attribute on the field type, defaulting to WKT. If you prefer GeoJSON, you can specify\nthat instead.",
    "hierarchy": [
    ],
    "pageId": 618
  },
  {
    "content": "Beyond this Reference Guide and Spatila4j's docs, there are some details that remain at the Solr Wiki at\nhttp://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4<span class=\"fc1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 618
  },
  {
    "content": "Geo3D is the colloquial name of the Lucene spatial-3d module, included with Solr. It's a computational\ngeometry library implementing a variety of shapes (including polygons) on a sphere or WGS84 ellipsoid.\nGeo3D is particularly suited for spatial applications where the geometries cover large distances across the\nglobe. Geo3D is named as-such due to its internal implementation that uses geocentric coordinates (X,Y,Z),\nnot<span class=\"ff2\"> for 3-dimensional geometry, which it does not support. Despite these internal details, you still supply</span>\nlatitude and longitude as you would normally in Solr.",
    "hierarchy": [
      "Geo3D and Polygons (on the ellipsoid)"
    ],
    "pageId": 618
  },
  {
    "content": "Set the <span class=\"ff1 fs1\">spatialContextFactory</span> attribute on the field type to <span class=\"ff1 fs1\">Geo3D</span>.",
    "hierarchy": [
      "Geo3D and Polygons (on the ellipsoid)"
    ],
    "pageId": 618
  },
  {
    "content": "Ê            <span class=\"fc2\">spatialContextFactory</span>=<span class=\"fc3\">\"Geo3D\"</span> <span class=\"fc2\">planetModel</span>=<span class=\"fc3\">\"WGS84\"<span class=\"fc0\">/><span class=\"fc6\"><!-- or \"sphere\" --></span></span></span>",
    "hierarchy": [
      "Geo3D and Polygons (on the ellipsoid)"
    ],
    "pageId": 618
  },
  {
    "content": "Once the field type has been defined, define a field that uses it.",
    "hierarchy": [
      "Geo3D and Polygons (on the ellipsoid)"
    ],
    "pageId": 618
  },
  {
    "content": "The <span class=\"ff1 fs1\">RptWithGeometrySpatialField</span> field type is a derivative of <span class=\"ff1 fs1\">SpatialRecursivePrefixTreeFieldType</span>\nthat also stores the original geometry internally in Lucene DocValues, which it uses to achieve accurate\nsearch. It can also be used for indexed point fields. The Intersects predicate (the default) is particularly fast,\nsince many search results can be returned as an accurate hit without requiring a geometry check. This field\ntype is configured just like RPT except that the default <span class=\"ff1 fs1\">distErrPct</span> is 0.15 (higher than 0.025) because the\ngrid squares are purely for performance and not to fundamentally represent the shape.",
    "hierarchy": [
      "RptWithGeometrySpatialField"
    ],
    "pageId": 618
  },
  {
    "content": "An optional in-memory cache can be defined in <span class=\"ff1 fs1\">solrconfig.xml</span>, which should be done when the data tends",
    "hierarchy": [
      "RptWithGeometrySpatialField"
    ],
    "pageId": 618
  },
  {
    "content": "to have shapes with many vertices. Assuming you name your field \"geom\", you can configure an optional\ncache in <span class=\"ff2 fs1\">solrconfig.xml</span> by adding the following – notice the suffix of the cache name:",
    "hierarchy": [
    ],
    "pageId": 619
  },
  {
    "content": "Ê          <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LRUCache\"</span>\nÊ          <span class=\"fc2\">size</span>=<span class=\"fc3\">\"256\"</span>\nÊ          <span class=\"fc2\">initialSize</span>=<span class=\"fc3\">\"0\"</span>\nÊ          <span class=\"fc2\">autowarmCount</span>=<span class=\"fc3\">\"100%\"</span>\nÊ          <span class=\"fc2\">regenerator</span>=<span class=\"fc3\">\"solr.NoOpRegenerator\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 619
  },
  {
    "content": "When using this field type, you will likely <span class=\"code\">not</span> want to mark the field as stored because it's redundant with the\nDocValues data and surely larger because of the formatting (be it WKT or GeoJSON). To retrieve the spatial\ndata in search results from DocValues, use the <span class=\"ff2 fs1\">[geo]</span> transformer<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span><span class=\"link\">Transforming Result Documents</span>.",
    "hierarchy": [
    ],
    "pageId": 619
  },
  {
    "content": "The RPT field supports generating a 2D grid of facet counts for documents having spatial data in each grid\ncell. For high-detail grids, this can be used to plot points, and for lesser detail it can be used for heatmap\ngeneration. The grid cells are determined at index-time based on RPT's configuration. At facet counting\ntime, the indexed cells in the region of interest are traversed and a grid of counters corresponding to each\ncell are incremented. Solr can return the data in a straight-forward 2D array of integers or in a PNG which\ncompresses better for larger data sets but must be decoded.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "The heatmap feature is accessed from Solr's faceting feature. As a part of faceting, it supports the <span class=\"ff2 fs1\">key</span> local\nparameter as well as excluding tagged filter queries, just like other types of faceting do. This allows multiple\nheatmaps to be returned on the same field with different filters.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet\nSet to <span class=\"ff2 fs1\">true</span> to enable faceting.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet.heatmap\nThe field name of type RPT.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet.heatmap.geom\nThe region to compute the heatmap on, specified using the rectangle-range syntax or WKT. It defaults to\nthe world. ex: <span class=\"ff2 fs1\">[\"-180 -90\" TO \"180 90\"]</span>.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet.heatmap.gridLevel\nA specific grid level, which determines how big each grid cell is. Defaults to being computed via\ndistErrPct<span class=\"ff1 fs0\"> (or </span>distErr<span class=\"ff1 fs0\">).</span>",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet.heatmap.distErrPct\nA fraction of the size of geom used to compute gridLevel. Defaults to 0.15. It's computed the same as a\nsimilarly named parameter for RPT.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet.heatmap.distErr\nA cell error distance used to pick the grid level indirectly. It's computed the same as a similarly named\nparameter for RPT.",
    "hierarchy": [
      "Heatmap Faceting"
    ],
    "pageId": 619
  },
  {
    "content": "facet.heatmap.format\nThe format, either <span class=\"ff1 fs0\">ints2D</span> (default) or <span class=\"ff1 fs0\">png</span>.",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "You'll experiment with different <span class=\"ff1 fs0\">distErrPct</span> values (probably 0.10 - 0.20) with various input\ngeometries till the default size is what you’re looking for. The specific details of how it’s\ncomputed isn’t important. For high-detail grids used in point-plotting (loosely one cell per\npixel), set <span class=\"ff1 fs0\">distErr</span> to be the number of decimal-degrees of several pixels or so of the map\nbeing displayed. Also, you probably don’t want to use a geohash-based grid because the\ncell orientation between grid levels flip-flops between being square and rectangle. Quad is\nconsistent and has more levels, albeit at the expense of a larger index.",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "Here's some sample output in JSON (with \"…\" inserted for brevity):",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "{gridLevel=6,columns=64,rows=64,minX=-180.0,maxX=180.0,minY=-90.0,maxY=90.0,\ncounts_ints2D=[[0, 0, 2, 1, ....],[1, 1, 3, 2, ...],...]}",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "The output shows the gridLevel which is interesting since it's often computed from other parameters. If an\ninterface being developed allows an explicit resolution increase/decrease feature then subsequent requests\ncan specify the gridLevel explicitly.",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "The <span class=\"ff1 fs0\">minX</span>, <span class=\"ff1 fs0\">maxX</span>, <span class=\"ff1 fs0\">minY</span>, <span class=\"ff1 fs0\">maxY</span> reports the region where the counts are. This is the minimally enclosing\nbounding rectangle of the input <span class=\"ff1 fs0\">geom</span> at the target grid level. This may wrap the dateline. The <span class=\"ff1 fs0\">columns</span> and\nrows<span class=\"ff2 fs1\"> values are how many columns and rows that the output rectangle is to be divided by evenly. Note:</span>\nDon't divide an on-screen projected map rectangle evenly to plot these rectangles/points since the cell data\nis in the coordinate space of decimal degrees if geo=true or whatever units were given if geo=false. This\ncould be arranged to be the same as an on-screen map but won’t necessarily be.",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "The <span class=\"ff1 fs0\">counts_ints2D</span> key has a 2D array of integers. The initial outer level is in row order (top-down), then the\ninner arrays are the columns (left-right). If any array would be all zeros, a null is returned instead for\nefficiency reasons. The entire value is null if there is no matching spatial data.",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "If <span class=\"ff1 fs0\">format=png</span> then the output key is <span class=\"ff1 fs0\">counts_png</span>. It's a base-64 encoded string of a 4-byte PNG. The PNG\nlogically holds exactly the same data that the ints2D format does. Note that the alpha channel byte is flipped\nto make it easier to view the PNG for diagnostic purposes, since otherwise counts would have to exceed\n2^24 before it becomes non-opague. Thus counts greater than this value will become opaque.",
    "hierarchy": [
    ],
    "pageId": 620
  },
  {
    "content": "The <span class=\"ff1 fs0\">BBoxField</span> field type indexes a single rectangle (bounding box) per document field and supports\nsearching via a bounding box. It supports most spatial search predicates, it has enhanced relevancy modes\nbased on the overlap or area between the search rectangle and the indexed rectangle. It's particularly\nuseful for its relevancy modes. To configure it in the schema, use a configuration like this:",
    "hierarchy": [
      "BBoxField"
    ],
    "pageId": 620
  },
  {
    "content": "Ê          <span class=\"fc2\">geo</span>=<span class=\"fc3\">\"true\"</span> <span class=\"fc2\">distanceUnits</span>=<span class=\"fc3\">\"kilometers\"</span> <span class=\"fc2\">numberType</span>=<span class=\"fc3\">\"pdouble\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "BBoxField is actually based off of 4 instances of another field type referred to by numberType. It also uses a\nboolean to flag a dateline cross. Assuming you want to use the relevancy feature, docValues is required.\nSome of the attributes are in common with the RPT field like geo, units, worldBounds, and\nspatialContextFactory because they share some of the same spatial infrastructure.",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "To index a box, add a field value to a bbox field that's a string in the WKT/CQL ENVELOPE syntax. Example:\nENVELOPE(-10, 20, 15, 10)<span class=\"ff2 fs0\"> which is minX, maxX, maxY, minY order. The parameter ordering is unintuitive</span>\nbut that’s what the spec calls for. Alternatively, you could provide a rectangular polygon in WKT (or GeoJSON\nif you set set <span class=\"ff1 fs1\">format=\"GeoJSON\"</span>).",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "To search, you can use the <span class=\"ff1 fs1\">{!bbox}</span> query parser, or the range syntax e.g., <span class=\"ff1 fs1\">[10,-10 TO 15,20]</span>, or the\nENVELOPE syntax wrapped in parenthesis with a leading search predicate. The latter is the only way to\nchoose a predicate other than Intersects. For example:",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "&q={!field f=bbox}Contains(ENVELOPE(-10, 20, 15, 10))",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "Now to sort the results by one of the relevancy modes, use it like this:",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "&q={!field f=bbox score=overlapRatio}Intersects(ENVELOPE(-10, 20, 15, 10))",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "The <span class=\"ff1 fs1\">score</span> local parameter can be one of <span class=\"ff1 fs1\">overlapRatio</span>, <span class=\"ff1 fs1\">area</span>, and <span class=\"ff1 fs1\">area2D</span>. <span class=\"ff1 fs1\">area</span> scores by the document\narea using surface-of-a-sphere (assuming <span class=\"ff1 fs1\">geo=true</span>) math, while <span class=\"ff1 fs1\">area2D</span> uses simple width * height.\noverlapRatio<span class=\"ff2 fs0\"> computes a [0-1] ranged score based on how much overlap exists relative to the document's</span>\narea and the query area. The javadocs of <span class=\"link\">BBoxOverlapRatioValueSource</span> have more info on the formula.\nThere is an additional parameter <span class=\"ff1 fs1\">queryTargetProportion</span> that allows you to weight the query side of the\nformula to the index (target) side of the formula. You can also use <span class=\"ff1 fs1\">&debug=results</span> to see useful score\ncomputation info.",
    "hierarchy": [
    ],
    "pageId": 621
  },
  {
    "content": "The Terms Component provides access to the indexed terms in a field and the number of documents that\nmatch each term. This can be useful for building an auto-suggest feature or any other feature that operates\nat the term level instead of the search or document level. Retrieving terms in index order is very fast since\nthe implementation directly uses Lucene's TermEnum to iterate over the term dictionary.",
    "hierarchy": [
      "The Terms Component"
    ],
    "pageId": 622
  },
  {
    "content": "In a sense, this search component provides fast field-faceting over the whole index, not restricted by the\nbase query or any filters. The document frequencies returned are the number of documents that match the\nterm, including any documents that have been marked for deletion but not yet removed from the index.",
    "hierarchy": [
      "The Terms Component"
    ],
    "pageId": 622
  },
  {
    "content": "By default, the Terms Component is already configured in <span class=\"code\">solrconfig.xml</span> for each collection.",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component"
    ],
    "pageId": 622
  },
  {
    "content": "Defining the Terms search component is straightforward: simply give it a name and use the class\nsolr.TermsComponent<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Defining the Terms Component"
    ],
    "pageId": 622
  },
  {
    "content": "This makes the component available for use, but by itself will not be useable until included with a request\nhandler.",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Defining the Terms Component"
    ],
    "pageId": 622
  },
  {
    "content": "The terms component is included with the <span class=\"code\">/terms</span> request handler, which is among Solr's out-of-the-box\nrequest handlers - see <span class=\"link\">Implicit RequestHandlers</span>.",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Using the Terms Component in a Request Handler"
    ],
    "pageId": 622
  },
  {
    "content": "Note that the defaults for this request handler set the parameter \"terms\" to true, which allows terms to be\nreturned on request. The parameter \"distrib\" is set to false, which allows this handler to be used only on a\nsingle Solr core.",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Using the Terms Component in a Request Handler"
    ],
    "pageId": 622
  },
  {
    "content": "You could add this component to another handler if you wanted to, and pass \"terms=true\" in the HTTP\nrequest in order to get terms back. If it is only defined in a separate handler, you must use that handler\nwhen querying in order to get terms and not regular documents as results.",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Using the Terms Component in a Request Handler"
    ],
    "pageId": 622
  },
  {
    "content": "The parameters below allow you to control what terms are returned. You can also configure any of these\nwith the request handler if you'd like to set them permanently. Or, you can add them to the query request.\nThese parameters are:",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Terms Component Parameters"
    ],
    "pageId": 622
  },
  {
    "content": "terms\nIf set to <span class=\"code\">true</span>, enables the Terms Component. By default, the Terms Component is off (<span class=\"code\">false</span>).",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Terms Component Parameters"
    ],
    "pageId": 622
  },
  {
    "content": "Example: <span class=\"code\">terms=true</span>",
    "hierarchy": [
      "The Terms Component",
      "Configuring the Terms Component",
      "Terms Component Parameters"
    ],
    "pageId": 622
  },
  {
    "content": "terms.fl\nSpecifies the field from which to retrieve terms. This parameter is required if <span class=\"ff1 fs0\">terms=true</span>.",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.fl=title</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.list\nFetches the document frequency for a comma delimited list of terms. Terms are always returned in index\norder. If <span class=\"ff1 fs0\">terms.ttf</span> is set to true, also returns their total term frequency. If multiple <span class=\"ff1 fs0\">terms.fl</span> are defined,\nthese statistics will be returned for each term in each requested field.",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.list=termA,termB,termC</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.limit\nSpecifies the maximum number of terms to return. The default is <span class=\"ff1 fs0\">10</span>. If the limit is set to a number less\nthan 0, then no maximum limit is enforced. Although this is not required, either this parameter or\nterms.upper<span class=\"ff2 fs1\"> must be defined.</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.limit=20</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.lower\nSpecifies the term at which to start. If not specified, the empty string is used, causing Solr to start at the\nbeginning of the field.",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.lower=orange</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.lower.incl\nIf set to true, includes the lower-bound term (specified with <span class=\"ff1 fs0\">terms.lower</span> in the result set.",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.lower.incl=false</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.mincount\nSpecifies the minimum document frequency to return in order for a term to be included in a query\nresponse. Results are inclusive of the mincount (that is, >= mincount).",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.mincount=5</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.maxcount\nSpecifies the maximum document frequency a term must have in order to be included in a query\nresponse. The default setting is -1, which sets no upper bound. Results are inclusive of the maxcount\n(that is, <= maxcount).",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.maxcount=25</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.prefix\nRestricts matches to terms that begin with the specified string.",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.prefix=inter</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.raw\nIf set to true, returns the raw characters of the indexed term, regardless of whether it is human-readable.\nFor instance, the indexed form of numeric numbers is not human-readable.",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.raw=true</span>",
    "hierarchy": [
    ],
    "pageId": 623
  },
  {
    "content": "terms.regex\nRestricts matches to terms that match the regular expression.",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.regex=.*pedist</span>",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "terms.regex.flag\nDefines a Java regex flag to use when evaluating the regular expression defined with <span class=\"ff1 fs0\">terms.regex</span>. See\nhttp://docs.oracle.com/javase/tutorial/essential/regex/pattern.html<span class=\"fc0\"> for details of each flag. Valid options</span>\nare:",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "\ncase_insensitive\n•\ncomments\n•\nmultiline\n•\nliteral\n•\ndotall\n•\nunicode_case\n•\ncanon_eq\n•\nunix_lines",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.regex.flag=case_insensitive</span>",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "terms.stats\nInclude index statistics in the results. Currently returns only the <span class=\"code\">numDocs</span> for a collection. When\ncombined with <span class=\"ff1 fs0\">terms.list</span> it provides enough information to compute inverse document frequency (IDF)\nfor a list of terms.",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "terms.sort\nDefines how to sort the terms returned. Valid options are <span class=\"ff1 fs0\">count</span>, which sorts by the term frequency, with\nthe highest term frequency first, or <span class=\"ff1 fs0\">index</span>, which sorts in index order.",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "Example: <span class=\"ff1 fs0\">terms.sort=index</span>",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "terms.ttf\nIf set to true, returns both <span class=\"ff1 fs0\">df</span> (docFreq) and <span class=\"ff1 fs0\">ttf</span> (totalTermFreq) statistics for each requested term in\nterms.list<span class=\"ff2 fs1\">. In this case, the response format is:</span>",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"termA\"<span class=\"fc2\">></span></span>\nÊ     <span class=\"fc2\"><long</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"df\"<span class=\"fc2\">></span></span>22<span class=\"fc2\"></long></span>\nÊ     <span class=\"fc2\"><long</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"ttf\"<span class=\"fc2\">></span></span>73<span class=\"fc2\"></long></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "terms.upper\nSpecifies the term to stop at. Although this parameter is not required, either this parameter or\nterms.limit<span class=\"ff2 fs1\"> must be defined.</span>",
    "hierarchy": [
    ],
    "pageId": 624
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">terms.upper=plum</span>",
    "hierarchy": [
    ],
    "pageId": 625
  },
  {
    "content": "terms.upper.incl\nIf set to true, the upper bound term is included in the result set. The default is false.",
    "hierarchy": [
    ],
    "pageId": 625
  },
  {
    "content": "Example: <span class=\"ff2 fs1\">terms.upper.incl=true</span>",
    "hierarchy": [
    ],
    "pageId": 625
  },
  {
    "content": "The response to a terms request is a list of the terms and their document frequency values.",
    "hierarchy": [
    ],
    "pageId": 625
  },
  {
    "content": "You may also be interested in the <span class=\"link\">TermsComponent javadoc</span>.",
    "hierarchy": [
    ],
    "pageId": 625
  },
  {
    "content": "All of the following sample queries work with Solr's “bin/solr -e techproducts” example.",
    "hierarchy": [
      "Terms Component Examples"
    ],
    "pageId": 625
  },
  {
    "content": "This query requests the first ten terms in the name field:",
    "hierarchy": [
      "Terms Component Examples",
      "Get Top 10 Terms"
    ],
    "pageId": 625
  },
  {
    "content": "http://localhost:8983/solr/techproducts/terms?terms.fl=name&wt=xml",
    "hierarchy": [
      "Terms Component Examples",
      "Get Top 10 Terms"
    ],
    "pageId": 625
  },
  {
    "content": "Results:",
    "hierarchy": [
      "Terms Component Examples",
      "Get Top 10 Terms"
    ],
    "pageId": 625
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>2<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"terms\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"name\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"one\"<span class=\"fc3\">></span></span>5<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"184\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"1gb\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"3200\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"400\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"ddr\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"gb\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"ipod\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"memory\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"pc\"<span class=\"fc3\">></span></span>3<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Terms Component Examples",
      "Get Top 10 Terms"
    ],
    "pageId": 625
  },
  {
    "content": "This query requests the first ten terms in the name field, in index order (instead of the top 10 results by\ndocument count):",
    "hierarchy": [
      "Terms Component Examples",
      "Get First 10 Terms Starting with Letter 'a'"
    ],
    "pageId": 625
  },
  {
    "content": "http://localhost:8983/solr/techproducts/terms?terms.fl=name&terms.lower=a&terms.sort=index&wt=xml",
    "hierarchy": [
    ],
    "pageId": 626
  },
  {
    "content": "Results:",
    "hierarchy": [
    ],
    "pageId": 626
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"terms\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"a\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"all\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"apple\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"asus\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ata\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ati\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"belkin\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"black\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"british\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"cable\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 626
  },
  {
    "content": "Ê   SolrQuery query = <span class=\"fc5\">new</span> SolrQuery();\nÊ   query.setRequestHandler(<span class=\"fc3\">\"/terms\"</span>);\nÊ   query.setTerms(true);\nÊ   query.setTermsLimit(<span class=\"fc6\">5</span>);\nÊ   query.setTermsLower(<span class=\"fc3\">\"s\"</span>);\nÊ   query.setTermsPrefix(<span class=\"fc3\">\"s\"</span>);\nÊ   query.addTermsField(<span class=\"fc3\">\"terms_s\"</span>);\nÊ   query.setTermsMinCount(<span class=\"fc6\">1</span>);",
    "hierarchy": [
      "SolrJ Invocation"
    ],
    "pageId": 626
  },
  {
    "content": "Ê   QueryRequest request = <span class=\"fc5\">new</span> QueryRequest(query);\nÊ   <span class=\"fc7\">List</span><Term> terms = request.process(getSolrClient()).getTermsResponse().getTerms(<span class=\"fc3\">\"terms_s\"</span>);",
    "hierarchy": [
      "SolrJ Invocation"
    ],
    "pageId": 626
  },
  {
    "content": "If the <span class=\"fc8\">Suggester</span> doesn't suit your needs, you can use the Terms component in Solr to build a similar feature\nfor your own search application. Simply submit a query specifying whatever characters the user has typed so\nfar as a prefix. For example, if the user has typed \"at\", the search engine’s interface would submit the\nfollowing query:",
    "hierarchy": [
      "Using the Terms Component for an Auto-Suggest Feature"
    ],
    "pageId": 626
  },
  {
    "content": "http://localhost:8983/solr/techproducts/terms?terms.fl=name&terms.prefix=at&wt=xml",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "Result:",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"terms\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ata\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ati\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "You can use the parameter <span class=\"ff1 fs1\">omitHeader=true</span> to omit the response header from the query response, like in\nthis example, which also returns the response in JSON format:",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "http://localhost:8983/solr/techproducts/terms?terms.fl=name&terms.prefix=at&omitHeader=true",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "Result:",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "{\nÊ <span class=\"fc4\">\"terms\"</span>: {\nÊ   <span class=\"fc4\">\"name\"</span>: [\nÊ     <span class=\"fc3\">\"ata\"</span>,\nÊ     <span class=\"fc5\">1</span>,\nÊ     <span class=\"fc3\">\"ati\"</span>,\nÊ     <span class=\"fc5\">1</span>\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 627
  },
  {
    "content": "The TermsComponent also supports distributed indexes. For the <span class=\"ff1 fs1\">/terms</span> request handler, you must provide\nthe following two parameters:",
    "hierarchy": [
      "Distributed Search Support"
    ],
    "pageId": 627
  },
  {
    "content": "shards\nSpecifies the shards in your distributed indexing configuration. For more information about distributed\nindexing, see <span class=\"fc7\">Distributed Search with Index Sharding</span>.",
    "hierarchy": [
      "Distributed Search Support"
    ],
    "pageId": 627
  },
  {
    "content": "shards.qt\nSpecifies the request handler Solr uses for requests to shards.",
    "hierarchy": [
      "Distributed Search Support"
    ],
    "pageId": 627
  },
  {
    "content": "The TermVectorComponent is a search component designed to return additional information about\ndocuments matching your search.",
    "hierarchy": [
      "The Term Vector Component"
    ],
    "pageId": 628
  },
  {
    "content": "For each document in the response, the TermVectorCcomponent can return the term vector, the term\nfrequency, inverse document frequency, position, and offset information.",
    "hierarchy": [
      "The Term Vector Component"
    ],
    "pageId": 628
  },
  {
    "content": "The TermVectorComponent is not enabled implicitly in Solr - it must be explicitly configured in your\nsolrconfig.xml<span class=\"ff2 fs1\"> file. The examples on this page show how it is configured in Solr's “</span>techproducts<span class=\"ff2 fs1\">”</span>\nexample:",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "To enable the this component, you need to configure it using a <span class=\"code\">searchComponent</span> element:",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "A request handler must then be configured to use this component name. In the <span class=\"code\">techproducts</span> example, the\ncomponent is associated with a special request handler named <span class=\"code\">/tvrh</span>, that enables term vectors by default\nusing the <span class=\"code\">tv=true</span> parameter; but you can associate it with any request handler:",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><bool</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"tv\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></bool></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><arr</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"last-components\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str></span>tvComponent<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></arr></span>",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "Once your handler is defined, you may use in conjunction with any schema (that has a <span class=\"code\">uniqueKeyField)</span> to\nfetch term vectors for fields configured with the <span class=\"code\">termVector</span> attribute, such as in the <span class=\"code\">techproducts</span> sample\nschema. For example:",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "Ê      <span class=\"fc3\">type</span>=<span class=\"fc4\">\"text_general\"</span>\nÊ      <span class=\"fc3\">indexed</span>=<span class=\"fc4\">\"true\"</span>\nÊ      <span class=\"fc3\">stored</span>=<span class=\"fc4\">\"true\"</span>\nÊ      <span class=\"fc3\">multiValued</span>=<span class=\"fc4\">\"true\"</span>\nÊ      <span class=\"fc3\">termVectors</span>=<span class=\"fc4\">\"true\"</span>\nÊ      <span class=\"fc3\">termPositions</span>=<span class=\"fc4\">\"true\"</span>\nÊ      <span class=\"fc3\">termOffsets</span>=<span class=\"fc4\">\"true\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
      "The Term Vector Component",
      "Term Vector Component Configuration"
    ],
    "pageId": 628
  },
  {
    "content": "The example below shows an invocation of this component using the above configuration:",
    "hierarchy": [
      "Invoking the Term Vector Component"
    ],
    "pageId": 629
  },
  {
    "content": "http://localhost:8983/solr/techproducts/tvrh?q=*:*&start=0&rows=10&fl=id,includes&wt=xml",
    "hierarchy": [
      "Invoking the Term Vector Component"
    ],
    "pageId": 629
  },
  {
    "content": "...",
    "hierarchy": [
    ],
    "pageId": 630
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"GB18030TEST\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>GB18030TEST<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"EN7800GTX/2DHTV/256M\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>EN7800GTX/2DHTV/256M<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"100-435805\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>100-435805<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"3007WFP\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>3007WFP<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"includes\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"cable\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"usb\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"SOLR1000\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>SOLR1000<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"0579B002\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>0579B002<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"UTF8TEST\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>UTF8TEST<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"9885A004\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>9885A004<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"includes\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"32mb\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"av\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"battery\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"cable\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"card\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sd\"<span class=\"fc1\">/></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"usb\"<span class=\"fc1\">/></span></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"adata\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>adata<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"apple\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"uniqueKey\"<span class=\"fc1\">></span></span>apple<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 630
  },
  {
    "content": "The example below shows some of the available request parameters for this component:",
    "hierarchy": [
      "Term Vector Request Parameters"
    ],
    "pageId": 630
  },
  {
    "content": "http://localhost:8983/solr/techproducts/tvrh?q=includes:[* TO\n*]&rows=10&indent=true&tv=true&tv.tf=true&tv.df=true&tv.positions=true&tv.offsets=true&tv.payload\ns=true&tv.fl=includes",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv\nIf <span class=\"ff1 fs1\">true</span>, the Term Vector Component will run.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.docIds\nFor a given comma-separated list of Lucene document IDs (<span class=\"code\">not</span> the Solr Unique Key), term vectors will be\nreturned.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.fl\nFor a given comma-separated list of fields, term vectors will be returned. If not specified, the <span class=\"ff1 fs1\">fl</span>\nparameter is used.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.all\nIf <span class=\"ff1 fs1\">true</span>, all the boolean parameters listed below (<span class=\"ff1 fs1\">tv.df</span>, <span class=\"ff1 fs1\">tv.offsets</span>, <span class=\"ff1 fs1\">tv.positions</span>, <span class=\"ff1 fs1\">tv.payloads</span>, <span class=\"ff1 fs1\">tv.tf</span>\nand <span class=\"ff1 fs1\">tv.tf_idf</span>) will be enabled.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.df\nIf <span class=\"ff1 fs1\">true</span>, returns the Document Frequency (DF) of the term in the collection. This can be computationally\nexpensive.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.offsets\nIf <span class=\"ff1 fs1\">true</span>, returns offset information for each term in the document.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.positions\nIf <span class=\"ff1 fs1\">true</span>, returns position information.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.payloads\nIf <span class=\"ff1 fs1\">true</span>, returns payload information.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.tf\nIf <span class=\"ff1 fs1\">true</span>, returns document term frequency info for each term in the document.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "tv.tf_idf\nIf <span class=\"ff1 fs1\">true</span>, calculates TF / DF (i.e.,: TF * IDF) for each term. Please note that this is a <span class=\"ff4\">literal</span> calculation of\n\"Term Frequency multiplied by Inverse Document Frequency\" and <span class=\"code\">not</span> a classical TF-IDF similarity\nmeasure.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "This parameter requires both <span class=\"ff1 fs1\">tv.tf</span> and <span class=\"ff1 fs1\">tv.df</span> to be \"true\". This can be computationally expensive. (The\nresults are not shown in example output)",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "To see an example of TermVector component output, see the Wiki page: <span class=\"link\">http://wiki.apache.org/solr/</span>\nTermVectorComponentExampleOptions",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "For schema requirements, see also the section <span class=\"link\">Field Properties by Use Case</span>.",
    "hierarchy": [
    ],
    "pageId": 631
  },
  {
    "content": "Neither the <span class=\"code\">SolrQuery</span> class nor the <span class=\"code\">QueryResponse</span> class offer specific method calls to set Term Vector\nComponent parameters or get the \"termVectors\" output. However, there is a patch for it: <span class=\"link\">SOLR-949</span>.",
    "hierarchy": [
      "SolrJ and the Term Vector Component"
    ],
    "pageId": 632
  },
  {
    "content": "The Stats component returns simple statistics for numeric, string, and date fields within the document set.",
    "hierarchy": [
      "The Stats Component"
    ],
    "pageId": 633
  },
  {
    "content": "The sample queries in this section assume you are running the “<span class=\"code\">techproducts</span>” example included with Solr:",
    "hierarchy": [
      "The Stats Component"
    ],
    "pageId": 633
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
      "The Stats Component"
    ],
    "pageId": 633
  },
  {
    "content": "The Stats Component accepts the following parameters:",
    "hierarchy": [
      "The Stats Component",
      "Stats Component Parameters"
    ],
    "pageId": 633
  },
  {
    "content": "stats\nIf <span class=\"code\">true</span>, then invokes the Stats component.",
    "hierarchy": [
      "The Stats Component",
      "Stats Component Parameters"
    ],
    "pageId": 633
  },
  {
    "content": "stats.field\nSpecifies a field for which statistics should be generated. This parameter may be invoked multiple times\nin a query in order to request statistics on multiple fields.",
    "hierarchy": [
      "The Stats Component",
      "Stats Component Parameters"
    ],
    "pageId": 633
  },
  {
    "content": "Local Parameters<span class=\"fc1\"> may be used to indicate which subset of the supported statistics should be computed,</span>\nand/or that statistics should be computed over the results of an arbitrary numeric function (or query)\ninstead of a simple field name. See the examples below.",
    "hierarchy": [
      "The Stats Component",
      "Stats Component Parameters"
    ],
    "pageId": 633
  },
  {
    "content": "The query below demonstrates computing stats against two different fields numeric fields, as well as stats\nover the results of a <span class=\"code\">termfreq()</span> function call using the <span class=\"code\">text</span> field:",
    "hierarchy": [
      "The Stats Component",
      "Stats Component Parameters",
      "Stats Component Example"
    ],
    "pageId": 633
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=*:*&wt=xml&stats=true&stats.field={!func}termfre\nq('text','memory')&stats.field=price&stats.field=popularity&rows=0&indent=true",
    "hierarchy": [
      "The Stats Component",
      "Stats Component Parameters",
      "Stats Component Example"
    ],
    "pageId": 633
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"stats_fields\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"termfreq(text,memory)\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"min\"<span class=\"fc0\">></span></span>0.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"max\"<span class=\"fc0\">></span></span>3.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"count\"<span class=\"fc0\">></span></span>32<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"missing\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sum\"<span class=\"fc0\">></span></span>10.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sumOfSquares\"<span class=\"fc0\">></span></span>22.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mean\"<span class=\"fc0\">></span></span>0.3125<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"stddev\"<span class=\"fc0\">></span></span>0.7803018439949604<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facets\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"price\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"min\"<span class=\"fc0\">></span></span>0.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"max\"<span class=\"fc0\">></span></span>2199.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"count\"<span class=\"fc0\">></span></span>16<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"missing\"<span class=\"fc0\">></span></span>16<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sum\"<span class=\"fc0\">></span></span>5251.270030975342<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sumOfSquares\"<span class=\"fc0\">></span></span>6038619.175900028<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mean\"<span class=\"fc0\">></span></span>328.20437693595886<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"stddev\"<span class=\"fc0\">></span></span>536.3536996709846<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facets\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"popularity\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"min\"<span class=\"fc0\">></span></span>0.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"max\"<span class=\"fc0\">></span></span>10.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"count\"<span class=\"fc0\">></span></span>15<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"missing\"<span class=\"fc0\">></span></span>17<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sum\"<span class=\"fc0\">></span></span>85.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sumOfSquares\"<span class=\"fc0\">></span></span>603.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mean\"<span class=\"fc0\">></span></span>5.666666666666667<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"stddev\"<span class=\"fc0\">></span></span>2.943920288775949<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facets\"<span class=\"fc0\">/></span></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 634
  },
  {
    "content": "The table below explains the statistics supported by the Stats component. Not all statistics are supported for\nall field types, and not all statistics are computed by default (see <span class=\"link\">Local Parameters with the Stats Component</span>\nbelow for details)",
    "hierarchy": [
      "Statistics Supported"
    ],
    "pageId": 634
  },
  {
    "content": "min\nThe minimum value of the field/function in all documents in the set. This statistic is computed for all field\ntypes and is computed by default.",
    "hierarchy": [
      "Statistics Supported"
    ],
    "pageId": 634
  },
  {
    "content": "max\nThe maximum value of the field/function in all documents in the set. This statistic is computed for all field",
    "hierarchy": [
      "Statistics Supported"
    ],
    "pageId": 634
  },
  {
    "content": "types and is computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "sum\nThe sum of all values of the field/function in all documents in the set. This statistic is computed for\nnumeric and date field types and is computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "count\nThe number of values found in all documents in the set for this field/function. This statistic is computed\nfor all field types and is computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "missing\nThe number of documents in the set which do not have a value for this field/function. This statistic is\ncomputed for all field types and is computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "sumOfSquares\nSum of all values squared (a by product of computing stddev). This statistic is computed for numeric and\ndate field types and is computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "mean\nThe average <span class=\"ff2 fs1\">(v1 + v2 …. + vN)/N</span>. This statistic is computed for numeric and date field types and is\ncomputed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "stddev\nStandard deviation, measuring how widely spread the values in the data set are. This statistic is computed\nfor numeric and date field types and is computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "percentiles\nA list of percentile values based on cut-off points specified by the parameter value, such as <span class=\"ff2 fs1\">1,99,99.9</span>.\nThese values are an approximation, using the <span class=\"link\">t-digest algorithm</span>. This statistic is computed for numeric\nfield types and is not computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "distinctValues\nThe set of all distinct values for the field/function in all of the documents in the set. This calculation can\nbe very expensive for fields that do not have a tiny cardinality. This statistic is computed for all field types\nbut is not computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "countDistinct\nThe exact number of distinct values in the field/function in all of the documents in the set. This calculation\ncan be very expensive for fields that do not have a tiny cardinality. This statistic is computed for all field\ntypes but is not computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "cardinality\nA statistical approximation (currently using the <span class=\"link\">HyperLogLog</span> algorithm) of the number of distinct values\nin the field/function in all of the documents in the set. This calculation is much more efficient then using\nthe <span class=\"ff2 fs1\">countDistinct</span> option, but may not be 100% accurate.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "Input for this option can be floating point number between <span class=\"ff2 fs1\">0.0</span> and <span class=\"ff2 fs1\">1.0</span> indicating how aggressively the\nalgorithm should try to be accurate: <span class=\"ff2 fs1\">0.0</span> means use as little memory as possible; <span class=\"ff2 fs1\">1.0</span> means use as much\nmemory as needed to be as accurate as possible. <span class=\"ff2 fs1\">true</span> is supported as an alias for <span class=\"ff2 fs1\">0.3</span>.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "This statistic is computed for all field types but is not computed by default.",
    "hierarchy": [
    ],
    "pageId": 635
  },
  {
    "content": "Similar to the <span class=\"link\">Facet Component</span>, the <span class=\"code\">stats.field</span> parameter supports local parameters for:",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "Tagging & Excluding Filters: <span class=\"code\">stats.field={!ex=filterA}price</span>",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "Changing the Output Key: <span class=\"code\">stats.field={!key=my_price_stats}price</span>",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "Tagging stats for <span class=\"link\">use with </span><span class=\"code\">facet.pivot</span>: <span class=\"code\">stats.field={!tag=my_pivot_stats}price</span>",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "Local parameters can also be used to specify individual statistics by name, overriding the set of statistics\ncomputed by default, e.g., <span class=\"code\">stats.field={!min=true max=true percentiles='99,99.9,99.99'}price</span>.",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "If any supported statistics are specified via local parameters, then the entire set of default\nstatistics is overridden and only the requested statistics are computed.",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "Additional \"Expert\" local params are supported in some cases for affecting the behavior of some statistics:",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "\npercentiles",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "◦tdigestCompression<span class=\"ff2 fs1\"> - a positive numeric value defaulting to </span>100.0<span class=\"ff2 fs1\"> controlling the compression</span>\nfactor of the T-Digest. Larger values means more accuracy, but also uses more memory.\n\ncardinality",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "◦hllPreHashed<span class=\"ff2 fs1\"> - a boolean option indicating that the statistics are being computed over a \"long\" field</span>\nthat has already been hashed at index time – allowing the HLL computation to skip this step.\n◦hllLog2m<span class=\"ff2 fs1\"> - an integer value specifying an explicit \"log2m\" value to use, overriding the heuristic value</span>\ndetermined by the cardinality local param and the field type – see the <span class=\"link\">java-hll</span> documentation for\nmore details\n◦hllRegwidth<span class=\"ff2 fs1\"> - an integer value specifying an explicit \"regwidth\" value to use, overriding the heuristic</span>\nvalue determined by the cardinality local param and the field type – see the <span class=\"link\">java-hll</span> documentation\nfor more details",
    "hierarchy": [
      "Local Parameters with the Stats Component"
    ],
    "pageId": 636
  },
  {
    "content": "Here we compute some statistics for the price field. The min, max, mean, 90th, and 99th percentile price\nvalues are computed against all products that are in stock (<span class=\"code\">q=<span class=\"ff6\">:</span></span> and <span class=\"code\">fq=inStock:true</span>), and independently all\nof the default statistics are computed against all products regardless of whether they are in stock or not (by\nexcluding that filter).",
    "hierarchy": [
      "Local Parameters with the Stats Component",
      "Examples with Local Parameters"
    ],
    "pageId": 636
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=*:*&fq={!tag=stock_check}inStock:true&stats=true\n&stats.field={!ex=stock_check+key=instock_prices+min=true+max=true+mean=true+percentiles='90,99'}\nprice&stats.field={!key=all_prices}price&rows=0&indent=true&wt=xml",
    "hierarchy": [
      "Local Parameters with the Stats Component",
      "Examples with Local Parameters"
    ],
    "pageId": 636
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"stats_fields\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"instock_prices\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"min\"<span class=\"fc0\">></span></span>0.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"max\"<span class=\"fc0\">></span></span>2199.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mean\"<span class=\"fc0\">></span></span>328.20437693595886<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"percentiles\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"90.0\"<span class=\"fc0\">></span></span>564.9700012207031<span class=\"fc0\"></double></span>\nÊ       <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"99.0\"<span class=\"fc0\">></span></span>1966.6484985351556<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"all_prices\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"min\"<span class=\"fc0\">></span></span>0.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"max\"<span class=\"fc0\">></span></span>2199.0<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"count\"<span class=\"fc0\">></span></span>12<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><long</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"missing\"<span class=\"fc0\">></span></span>5<span class=\"fc0\"></long></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sum\"<span class=\"fc0\">></span></span>4089.880027770996<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"sumOfSquares\"<span class=\"fc0\">></span></span>5385249.921747174<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mean\"<span class=\"fc0\">></span></span>340.823335647583<span class=\"fc0\"></double></span>\nÊ     <span class=\"fc0\"><double</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"stddev\"<span class=\"fc0\">></span></span>602.3683083752779<span class=\"fc0\"></double></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 637
  },
  {
    "content": "Sets of <span class=\"ff1 fs2\">stats.field</span> parameters can be referenced by <span class=\"ff1 fs2\">'tag'</span> when using Pivot Faceting to compute multiple\nstatistics at every level (i.e.: field) in the tree of pivot constraints.",
    "hierarchy": [
      "The Stats Component and Faceting"
    ],
    "pageId": 637
  },
  {
    "content": "For more information and a detailed example, please see <span class=\"link\">Combining Stats Component With Pivots</span>.",
    "hierarchy": [
      "The Stats Component and Faceting"
    ],
    "pageId": 637
  },
  {
    "content": "The Query Elevation Component lets you configure the top results for a given query regardless of the\nnormal Lucene scoring.",
    "hierarchy": [
      "The Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "This is sometimes called \"sponsored search\", \"editorial boosting\", or \"best bets.\" This component matches\nthe user query text to a configured map of top results. The text can be any string or non-string IDs, as long\nas it's indexed. Although this component will work with any QueryParser, it makes the most sense to use\nwith <span class=\"link\">DisMax</span> or <span class=\"link\">eDisMax</span>.",
    "hierarchy": [
      "The Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "The Query Elevation Component also supports distributed searching.",
    "hierarchy": [
      "The Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "All of the sample configuration and queries used in this section assume you are running Solr's\n“<span class=\"code\">techproducts</span>” example:",
    "hierarchy": [
      "The Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
      "The Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "You can configure the Query Elevation Component in the <span class=\"code\">solrconfig.xml</span> file. Search components like\nQueryElevationComponent<span class=\"ff2 fs1\"> may be added to any request handler; a dedicated request handler is used here</span>\nfor brevity.",
    "hierarchy": [
      "The Query Elevation Component",
      "Configuring the Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "Ê <span class=\"fc6\"><!-- pick a fieldType to analyze queries --></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"queryFieldType\"<span class=\"fc3\">></span></span>string<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"config-file\"<span class=\"fc3\">></span></span>elevate.xml<span class=\"fc3\"></str></span>",
    "hierarchy": [
      "The Query Elevation Component",
      "Configuring the Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"echoParams\"<span class=\"fc3\">></span></span>explicit<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"last-components\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str></span>elevator<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></arr></span>",
    "hierarchy": [
      "The Query Elevation Component",
      "Configuring the Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "Optionally, in the Query Elevation Component configuration you can also specify the following to distinguish\neditorial results from \"normal\" results:",
    "hierarchy": [
      "The Query Elevation Component",
      "Configuring the Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "The Query Elevation Search Component takes the following parameters:",
    "hierarchy": [
      "The Query Elevation Component",
      "Configuring the Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "queryFieldType\nSpecifies which fieldType should be used to analyze the incoming text. For example, it may be",
    "hierarchy": [
      "The Query Elevation Component",
      "Configuring the Query Elevation Component"
    ],
    "pageId": 638
  },
  {
    "content": "appropriate to use a fieldType with a LowerCaseFilter.",
    "hierarchy": [
    ],
    "pageId": 639
  },
  {
    "content": "config-file\nPath to the file that defines query elevation. This file must exist in <span class=\"ff2 fs1\"><instanceDir>/conf/<config-file></span>\nor <span class=\"ff2 fs1\"><dataDir>/<config-file></span>. If the file exists in the <span class=\"ff2 fs1\">conf/</span> directory it will be loaded once at startup. If it\nexists in the <span class=\"ff2 fs1\">data/</span> directory, it will be reloaded for each IndexReader.",
    "hierarchy": [
    ],
    "pageId": 639
  },
  {
    "content": "forceElevation\nBy default, this component respects the requested <span class=\"ff2 fs1\">sort</span> parameter: if the request asks to sort by date, it\nwill order the results by date. If <span class=\"ff2 fs1\">forceElevation=true</span> (the default), results will first return the boosted\ndocs, then order by date.",
    "hierarchy": [
    ],
    "pageId": 639
  },
  {
    "content": "Elevated query results can be configured in an external XML file specified in the <span class=\"ff2 fs1\">config-file</span> argument. An\nelevate.xml<span class=\"ff1 fs0\"> file might look like this:</span>",
    "hierarchy": [
      "The elevate.xml File"
    ],
    "pageId": 639
  },
  {
    "content": "Ê <span class=\"fc2\"><query</span> <span class=\"fc3\">text</span>=<span class=\"fc4\">\"foo bar\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><doc</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"1\"</span> <span class=\"fc2\">/></span>\nÊ   <span class=\"fc2\"><doc</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"2\"</span> <span class=\"fc2\">/></span>\nÊ   <span class=\"fc2\"><doc</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"3\"</span> <span class=\"fc2\">/></span>\nÊ <span class=\"fc2\"></query></span>",
    "hierarchy": [
      "The elevate.xml File"
    ],
    "pageId": 639
  },
  {
    "content": "Ê <span class=\"fc2\"><query</span> <span class=\"fc3\">text</span>=<span class=\"fc4\">\"ipod\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><doc</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"MA147LL/A\"</span> <span class=\"fc2\">/></span>  <span class=\"fc5\"><!-- put the actual ipod at the top --></span>\nÊ   <span class=\"fc2\"><doc</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"IW-02\"</span> <span class=\"fc3\">exclude</span>=<span class=\"fc4\">\"true\"</span> <span class=\"fc2\">/></span> <span class=\"fc5\"><!-- exclude this cable --></span>\nÊ <span class=\"fc2\"></query></span>",
    "hierarchy": [
      "The elevate.xml File"
    ],
    "pageId": 639
  },
  {
    "content": "In this example, the query \"foo bar\" would first return documents 1, 2 and 3, then whatever normally\nappears for the same query. For the query \"ipod\", it would first return \"MA147LL/A\", and would make sure\nthat \"IW-02\" is not in the result set.",
    "hierarchy": [
      "The elevate.xml File"
    ],
    "pageId": 639
  },
  {
    "content": "If documents to be elevated are not defined in the <span class=\"ff2 fs1\">elevate.xml</span> file, they should be passed in at query time\nwith the <span class=\"ff2 fs1\">elevateIds</span><span class=\"fc6\"> parameter</span>.",
    "hierarchy": [
      "The elevate.xml File"
    ],
    "pageId": 639
  },
  {
    "content": "For debugging it may be useful to see results with and without the elevated docs. To hide results, use\nenableElevation=false<span class=\"ff1 fs0\">:</span>",
    "hierarchy": [
      "Using the Query Elevation Component",
      "The enableElevation Parameter"
    ],
    "pageId": 639
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&debugQuery=true&enableElevation=tr\nue",
    "hierarchy": [
      "Using the Query Elevation Component",
      "The enableElevation Parameter"
    ],
    "pageId": 639
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&debugQuery=true&enableElevation=fa\nlse",
    "hierarchy": [
    ],
    "pageId": 640
  },
  {
    "content": "You can force elevation during runtime by adding <span class=\"ff1 fs2\">forceElevation=true</span> to the query URL:",
    "hierarchy": [
      "The forceElevation Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&debugQuery=true&enableElevation=tr\nue&forceElevation=true",
    "hierarchy": [
      "The forceElevation Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "You can force Solr to return only the results specified in the elevation file by adding <span class=\"ff1 fs2\">exclusive=true</span> to the\nURL:",
    "hierarchy": [
      "The exclusive Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&debugQuery=true&exclusive=true",
    "hierarchy": [
      "The exclusive Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "The <span class=\"ff1 fs2\">[elevated]</span> <span class=\"link\">Document Transformer</span> can be used to annotate each document with information about\nwhether or not it was elevated:",
    "hierarchy": [
      "Document Transformers and the markExcludes Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&fl=id,[elevated]",
    "hierarchy": [
      "Document Transformers and the markExcludes Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "Likewise, it can be helpful when troubleshooting to see all matching documents – including documents that\nthe elevation configuration would normally exclude. This is possible by using the <span class=\"ff1 fs2\">markExcludes=true</span>\nparameter, and then using the <span class=\"ff1 fs2\">[excluded]</span> transformer:",
    "hierarchy": [
      "Document Transformers and the markExcludes Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&markExcludes=true&fl=id,[elevated]\n,[excluded]",
    "hierarchy": [
      "Document Transformers and the markExcludes Parameter"
    ],
    "pageId": 640
  },
  {
    "content": "When the elevation component is in use, the pre-configured list of elevations for a query can be overridden\nat request time to use the unique keys specified in these request parameters.",
    "hierarchy": [
      "The elevateIds and excludeIds Parameters"
    ],
    "pageId": 640
  },
  {
    "content": "For example, in the request below documents 3007WFP and 9885A004 will be elevated, and document IW-02\nwill be excluded<span class=\"ff4\"> </span>—<span class=\"ff4\"> </span>regardless of what elevations or exclusions are configured for the query \"cable\" in\nelevate.xml:",
    "hierarchy": [
      "The elevateIds and excludeIds Parameters"
    ],
    "pageId": 640
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=cable&df=text&excludeIds=IW-\n02&elevateIds=3007WFP,9885A004",
    "hierarchy": [
      "The elevateIds and excludeIds Parameters"
    ],
    "pageId": 640
  },
  {
    "content": "If either one of these parameters is specified at request time, the the entire elevation configuration for the",
    "hierarchy": [
      "The elevateIds and excludeIds Parameters"
    ],
    "pageId": 640
  },
  {
    "content": "query is ignored.",
    "hierarchy": [
    ],
    "pageId": 641
  },
  {
    "content": "For example, in the request below documents IW-02 and F8V7067-APL-KIT will be elevated, and no\ndocuments will be excluded – regardless of what elevations or exclusions are configured for the query\n\"ipod\" in elevate.xml:",
    "hierarchy": [
    ],
    "pageId": 641
  },
  {
    "content": "http://localhost:8983/solr/techproducts/elevate?q=ipod&df=text&elevateIds=IW-02,F8V7067-APL-KIT",
    "hierarchy": [
    ],
    "pageId": 641
  },
  {
    "content": "Query elevation respects the standard filter query (<span class=\"ff2 fs2\">fq</span>) parameter. That is, if the query contains the <span class=\"ff2 fs2\">fq</span>\nparameter, all results will be within that filter even if <span class=\"ff2 fs2\">elevate.xml</span> adds other documents to the result set.",
    "hierarchy": [
      "The fq Parameter with Elevation"
    ],
    "pageId": 641
  },
  {
    "content": "A Response Writer generates the formatted response of a search.",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "Solr supports a variety of Response Writers to ensure that query responses can be parsed by the\nappropriate language or application.",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "The <span class=\"code\">wt</span> parameter selects the Response Writer to be used. The list below describe shows the most common\nsettings for the <span class=\"code\">wt</span> parameter, with links to further sections that discuss them in more detail.",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">csv</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">geojson</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">javabin</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">json</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">php</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">phps</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">python</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">ruby</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">smile</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">velocity</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">xlsx</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">xml</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "<span class=\"link\">xslt</span>",
    "hierarchy": [
      "Response Writers"
    ],
    "pageId": 642
  },
  {
    "content": "The default Solr Response Writer is the <span class=\"code\">JsonResponseWriter</span>, which formats output in JavaScript Object\nNotation (JSON), a lightweight data interchange format specified in specified in RFC 4627. If you do not set\nthe <span class=\"code\">wt</span> parameter in your request, you will get JSON by default.",
    "hierarchy": [
      "Response Writers",
      "JSON Response Writer"
    ],
    "pageId": 642
  },
  {
    "content": "Here is a sample response for a simple query like <span class=\"code\">q=id:VS1GB400C3</span>:",
    "hierarchy": [
      "Response Writers",
      "JSON Response Writer"
    ],
    "pageId": 642
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"zkConnected\"</span>:<span class=\"fc2\">true</span>,\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc3\">7</span>,\nÊ   <span class=\"fc1\">\"params\"</span>:{\nÊ     <span class=\"fc1\">\"q\"</span>:<span class=\"fc4\">\"id:VS1GB400C3\"</span>}},\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc3\">1</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc3\">0</span>,<span class=\"fc1\">\"maxScore\"</span>:<span class=\"fc3\">2.3025851</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc4\">\"VS1GB400C3\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:[<span class=\"fc4\">\"CORSAIR ValueSelect 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System</span>",
    "hierarchy": [
    ],
    "pageId": 643
  },
  {
    "content": "Ê       <span class=\"fc1\">\"manu\"</span>:[<span class=\"fc4\">\"Corsair Microsystems Inc.\"</span>],\nÊ       <span class=\"fc1\">\"manu_id_s\"</span>:<span class=\"fc4\">\"corsair\"</span>,\nÊ       <span class=\"fc1\">\"cat\"</span>:[<span class=\"fc4\">\"electronics\"</span>,\nÊ         <span class=\"fc4\">\"memory\"</span>],\nÊ       <span class=\"fc1\">\"price\"</span>:[<span class=\"fc3\">74.99</span>],\nÊ       <span class=\"fc1\">\"popularity\"</span>:[<span class=\"fc3\">7</span>],\nÊ       <span class=\"fc1\">\"inStock\"</span>:[<span class=\"fc2\">true</span>],\nÊ       <span class=\"fc1\">\"store\"</span>:[<span class=\"fc4\">\"37.7752,-100.0232\"</span>],\nÊ       <span class=\"fc1\">\"manufacturedate_dt\"</span>:<span class=\"fc4\">\"2006-02-13T15:26:37Z\"</span>,\nÊ       <span class=\"fc1\">\"payloads\"</span>:[<span class=\"fc4\">\"electronics|4.0 memory|2.0\"</span>],\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc3\">1549728120626479104</span>}]\nÊ }}",
    "hierarchy": [
    ],
    "pageId": 643
  },
  {
    "content": "The default mime type for the JSON writer is <span class=\"ff1 fs1\">application/json</span>, however this can be overridden in the\nsolrconfig.xml<span class=\"ff2 fs0\"> - such as in this example from the “</span>techproducts<span class=\"ff2 fs0\">” configuration:</span>",
    "hierarchy": [
    ],
    "pageId": 643
  },
  {
    "content": "Ê <span class=\"fc7\"><!-- For the purposes of the tutorial, JSON response are written as</span>",
    "hierarchy": [
    ],
    "pageId": 643
  },
  {
    "content": "Ê <span class=\"fc5\"><str</span> <span class=\"fc6\">name</span>=<span class=\"fc4\">\"content-type\"<span class=\"fc5\">></span></span>text/plain<span class=\"fc5\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 643
  },
  {
    "content": "This parameter controls the output format of NamedLists, where order is more important than access by\nname. NamedList is currently used for field faceting data.",
    "hierarchy": [
      "JSON-Specific Parameters",
      "json.nl"
    ],
    "pageId": 643
  },
  {
    "content": "The <span class=\"ff1 fs1\">json.nl</span> parameter takes the following values:",
    "hierarchy": [
      "JSON-Specific Parameters",
      "json.nl"
    ],
    "pageId": 643
  },
  {
    "content": "flat\nThe default. NamedList is represented as a flat array, alternating names and values.",
    "hierarchy": [
      "JSON-Specific Parameters",
      "json.nl"
    ],
    "pageId": 643
  },
  {
    "content": "With input of <span class=\"ff1 fs1\">NamedList(\"a\"=1, \"bar\"=\"foo\", null=3, null=null)</span>, the output would be <span class=\"ff1 fs1\">[\"a\",1,</span>",
    "hierarchy": [
      "JSON-Specific Parameters",
      "json.nl"
    ],
    "pageId": 643
  },
  {
    "content": "\"bar\",\"foo\", null,3, null,null]<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "map\nNamedList is represented as a JSON object. Although this is the simplest mapping, a NamedList can have\noptional keys, repeated keys, and preserves order. Using a JSON object (essentially a map or hash) for a\nNamedList results in the loss of some information.",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "With input of <span class=\"ff1 fs0\">NamedList(\"a\"=1, \"bar\"=\"foo\", null=3, null=null)</span>, the output would be <span class=\"ff1 fs0\">{\"a\":1,</span>\n\"bar\":\"foo\", \"\":3, \"\":null}<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "arrarr\nNamedList is represented as an array of two element arrays.",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "With input of <span class=\"ff1 fs0\">NamedList(\"a\"=1, \"bar\"=\"foo\", null=3, null=null)</span>, the output would be <span class=\"ff1 fs0\">[[\"a\",1],</span>\n[\"bar\",\"foo\"], [null,3], [null,null]]<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "arrmap\nNamedList is represented as an array of JSON objects.",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "With input of <span class=\"ff1 fs0\">NamedList(\"a\"=1, \"bar\"=\"foo\", null=3, null=null)</span>, the output would be <span class=\"ff1 fs0\">[{\"a\":1},</span>\n{\"b\":2}, 3, null]<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "arrntv\nNamedList is represented as an array of Name Type Value JSON objects.",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "With input of <span class=\"ff1 fs0\">NamedList(\"a\"=1, \"bar\"=\"foo\", null=3, null=null)</span>, the output would be\n[{\"name\":\"a\",\"type\":\"int\",\"value\":1}, {\"name\":\"bar\",\"type\":\"str\",\"value\":\"foo\"},\n{\"name\":null,\"type\":\"int\",\"value\":3}, {\"name\":null,\"type\":\"null\",\"value\":null}]<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 644
  },
  {
    "content": "json.wrf=function<span class=\"ff2 fs1\"> adds a wrapper-function around the JSON response, useful in AJAX with dynamic script</span>\ntags for specifying a JavaScript callback function.",
    "hierarchy": [
      "json.wrf"
    ],
    "pageId": 644
  },
  {
    "content": "<span class=\"link\">http://www.xml.com/pub/a/2005/12/21/json-dynamic-script-tag.html</span>",
    "hierarchy": [
      "json.wrf"
    ],
    "pageId": 644
  },
  {
    "content": "<span class=\"link\">http://www.theurer.cc/blog/2005/12/15/web-services-json-dump-your-proxy/</span>",
    "hierarchy": [
      "json.wrf"
    ],
    "pageId": 644
  },
  {
    "content": "The XML Response Writer is the most general purpose and reusable Response Writer currently included with\nSolr. It is the format used in most discussions and documentation about the response of Solr queries.",
    "hierarchy": [
      "Standard XML Response Writer"
    ],
    "pageId": 644
  },
  {
    "content": "Note that the XSLT Response Writer can be used to convert the XML produced by this writer to other\nvocabularies or text-based formats.",
    "hierarchy": [
      "Standard XML Response Writer"
    ],
    "pageId": 644
  },
  {
    "content": "The behavior of the XML Response Writer can be driven by the following query parameters.",
    "hierarchy": [
      "Standard XML Response Writer"
    ],
    "pageId": 644
  },
  {
    "content": "version\nThe <span class=\"ff1 fs0\">version</span> parameter determines the XML protocol used in the response. Clients are strongly\nencouraged to <span class=\"ff4\">always</span> specify the protocol version, so as to ensure that the format of the response they\nreceive does not change unexpectedly if the Solr server is upgraded and a new default format is\nintroduced.",
    "hierarchy": [
      "Standard XML Response Writer"
    ],
    "pageId": 644
  },
  {
    "content": "The only currently supported version value is <span class=\"ff2 fs1\">2.2</span>. The format of the <span class=\"ff2 fs1\">responseHeader</span> changed to use the\nsame <span class=\"ff2 fs1\"><lst></span> structure as the rest of the response.",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "The default value is the latest supported.",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "stylesheet\nThe <span class=\"ff2 fs1\">stylesheet</span> parameter can be used to direct Solr to include a <span class=\"ff2 fs1\"><?xml-stylesheet type=\"text/xsl\"</span>\nhref=\"…\"?><span class=\"ff1 fs0\"> declaration in the XML response it returns.</span>",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "The default behavior is not to return any stylesheet declaration at all.",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "Use of the <span class=\"ff2 fs1\">stylesheet</span> parameter is discouraged, as there is currently no way to specify\nexternal stylesheets, and no stylesheets are provided in the Solr distributions. This is a\nlegacy parameter, which may be developed further in a future release.",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "indent\nIf the <span class=\"ff2 fs1\">indent</span> parameter is used, and has a non-blank value, then Solr will make some attempts at\nindenting its XML response to make it more readable by humans.",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "The default behavior is not to indent.",
    "hierarchy": [
    ],
    "pageId": 645
  },
  {
    "content": "The XSLT Response Writer applies an XML stylesheet to output. It can be used for tasks such as formatting\nresults for an RSS feed.",
    "hierarchy": [
      "XSLT Response Writer"
    ],
    "pageId": 645
  },
  {
    "content": "The XSLT Response Writer accepts one parameter: the <span class=\"ff2 fs1\">tr</span> parameter, which identifies the XML\ntransformation to use. The transformation must be found in the Solr <span class=\"ff2 fs1\">conf/xslt</span> directory.",
    "hierarchy": [
      "XSLT Response Writer",
      "tr Parameter"
    ],
    "pageId": 645
  },
  {
    "content": "The Content-Type of the response is set according to the <span class=\"ff2 fs1\"><xsl:output></span> statement in the XSLT transform, for\nexample: <span class=\"ff2 fs1\"><xsl:output media-type=\"text/html\"/></span>",
    "hierarchy": [
      "XSLT Response Writer",
      "tr Parameter"
    ],
    "pageId": 645
  },
  {
    "content": "The example below, from the <span class=\"ff2 fs1\">sample_techproducts_configs</span> <span class=\"link\">config set</span> in the Solr distribution, shows how\nthe XSLT Response Writer is configured.",
    "hierarchy": [
      "XSLT Response Writer",
      "XSLT Configuration"
    ],
    "pageId": 645
  },
  {
    "content": "Ê                    <span class=\"fc6\">class</span>=<span class=\"fc7\">\"org.apache.solr.request.XSLTResponseWriter\"<span class=\"fc5\">></span></span>\nÊ <span class=\"fc5\"><int</span> <span class=\"fc6\">name</span>=<span class=\"fc7\">\"xsltCacheLifetimeSeconds\"<span class=\"fc5\">></span></span>5<span class=\"fc5\"></int></span>",
    "hierarchy": [
      "XSLT Response Writer",
      "XSLT Configuration"
    ],
    "pageId": 645
  },
  {
    "content": "A value of 5 for <span class=\"ff2 fs1\">xsltCacheLifetimeSeconds</span> is good for development, to see XSLT changes quickly. For\nproduction you probably want a much higher value.",
    "hierarchy": [
      "XSLT Response Writer",
      "XSLT Configuration"
    ],
    "pageId": 645
  },
  {
    "content": "This is a custom binary format used by Solr for inter-node communication as well as client-server\ncommunication. SolrJ uses this as the default for indexing as well as querying. See <span class=\"link\">Client APIs</span> for more\ndetails.",
    "hierarchy": [
      "Binary Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Returns Solr results in <span class=\"link\">GeoJSON</span> augmented with Solr-specific JSON. To use this, set <span class=\"code\">wt=geojson</span> and\ngeojson.field<span class=\"ff2 fs1\"> to the name of a spatial Solr field. Not all spatial fields types are supported, and you'll get an</span>\nerror if you use an unsupported one.",
    "hierarchy": [
      "GeoJSON Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Solr has an optional Python response format that extends its JSON output in the following ways to allow the\nresponse to be safely evaluated by the python interpreter:",
    "hierarchy": [
      "Python Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "true and false changed to True and False",
    "hierarchy": [
      "Python Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Python unicode strings are used where needed",
    "hierarchy": [
      "Python Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "ASCII output (with unicode escapes) is used for less error-prone interoperability",
    "hierarchy": [
      "Python Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "newlines are escaped",
    "hierarchy": [
      "Python Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "null changed to None",
    "hierarchy": [
      "Python Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Solr has a PHP response format that outputs an array (as PHP code) which can be evaluated. Setting the <span class=\"code\">wt</span>\nparameter to <span class=\"code\">php</span> invokes the PHP Response Writer.",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Example usage:",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "$code = file_get_contents(<span class=\"fc3\">'http://localhost:8983/solr/techproducts/select?q=iPod&wt=php'</span>);\neval(<span class=\"fc3\">\"$result = \"</span> . $code . <span class=\"fc3\">\";\"</span>);\nprint_r($result);",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Solr also includes a PHP Serialized Response Writer that formats output in a serialized array. Setting the <span class=\"code\">wt</span>\nparameter to <span class=\"code\">phps</span> invokes the PHP Serialized Response Writer.",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Example usage:",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "$serializedResult = file_get_contents(",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "$result = unserialize($serializedResult);\nprint_r($result);",
    "hierarchy": [
      "PHP Response Writer and PHP Serialized Response Writer"
    ],
    "pageId": 646
  },
  {
    "content": "Solr has an optional Ruby response format that extends its JSON output in the following ways to allow the\nresponse to be safely evaluated by Ruby's interpreter:",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "Ruby's single quoted strings are used to prevent possible string exploits.",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "\\ and ' are the only two characters escaped.",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "Unicode escapes are not used. Data is written as raw UTF-8.",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "nil used for null.",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "=> is used as the key/value separator in maps.",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "Here is a simple example of how one may query Solr using the Ruby response format:",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "require <span class=\"fc2\">'net/http'</span>\nh = <span class=\"fc3\">Net</span>::<span class=\"fc3\">HTTP</span>.new(<span class=\"fc2\">'localhost'</span>, <span class=\"fc4\">8983</span>)\nhresp, data = h.get(<span class=\"fc2\">'/solr/techproducts/select?q=iPod&wt=ruby'</span>, nil)\nrsp = eval(data)\nputs <span class=\"fc2\">'number of matches = '</span> + rsp[<span class=\"fc2\">'response'</span>][<span class=\"fc2\">'numFound'</span>].to_s",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "rsp[<span class=\"fc2\">'response'</span>][<span class=\"fc2\">'docs'</span>].each { |doc| puts <span class=\"fc2\">'name field = '</span> + doc[<span class=\"fc2\">'name'</span>\\] }",
    "hierarchy": [
      "Ruby Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "The CSV response writer returns a list of documents in comma-separated values (CSV) format. Other\ninformation that would normally be included in a response, such as facet information, is excluded.",
    "hierarchy": [
      "CSV Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "The CSV response writer supports multi-valued fields, as well as<span class=\"fc6\">pseudo-fields</span>, and the output of this CSV\nformat is compatible with Solr's <span class=\"fc6\">CSV update format</span>.",
    "hierarchy": [
      "CSV Response Writer"
    ],
    "pageId": 647
  },
  {
    "content": "These parameters specify the CSV format that will be returned. You can accept the default values or specify\nyour own.",
    "hierarchy": [
      "CSV Response Writer",
      "CSV Parameters"
    ],
    "pageId": 647
  },
  {
    "content": "csv.encapsulator\n\"",
    "hierarchy": [
      "CSV Response Writer",
      "CSV Parameters"
    ],
    "pageId": 647
  },
  {
    "content": "csv.escapeNone",
    "hierarchy": [
      "CSV Response Writer",
      "CSV Parameters"
    ],
    "pageId": 647
  },
  {
    "content": "csv.separator\n,",
    "hierarchy": [
      "CSV Response Writer",
      "CSV Parameters"
    ],
    "pageId": 647
  },
  {
    "content": "csv.headerDefaults to <span class=\"code\">true</span>. If <span class=\"code\">false</span>,\nSolr does not print the\ncolumn headers.",
    "hierarchy": [
      "CSV Response Writer",
      "CSV Parameters"
    ],
    "pageId": 647
  },
  {
    "content": "csv.newline\n\\n",
    "hierarchy": [
      "CSV Response Writer",
      "CSV Parameters"
    ],
    "pageId": 647
  },
  {
    "content": "csv.nullDefaults to a zero length\nstring. Use this\nparameter when a\ndocument has no value\nfor a particular field.",
    "hierarchy": [
    ],
    "pageId": 648
  },
  {
    "content": "These parameters specify how multi-valued fields are encoded. Per-field overrides for these values can be\ndone using <span class=\"code\">f.<fieldname>.csv.separator=|</span>.",
    "hierarchy": [
      "Multi-Valued Field CSV Parameters"
    ],
    "pageId": 648
  },
  {
    "content": "csv.mv.encapsulatorNone",
    "hierarchy": [
      "Multi-Valued Field CSV Parameters"
    ],
    "pageId": 648
  },
  {
    "content": "csv.mv.escape\n\\",
    "hierarchy": [
      "Multi-Valued Field CSV Parameters"
    ],
    "pageId": 648
  },
  {
    "content": "csv.mv.separatorDefaults to the\ncsv.separator<span class=\"ff2 fs0\"> value.</span>",
    "hierarchy": [
      "Multi-Valued Field CSV Parameters"
    ],
    "pageId": 648
  },
  {
    "content": "http://localhost:8983/solr/techproducts/select?q=ipod&fl=id,cat,name,popularity,price,score&\nwt=csv<span class=\"ff2 fs0\"> returns:</span>",
    "hierarchy": [
      "CSV Writer Example"
    ],
    "pageId": 648
  },
  {
    "content": "id,cat,name,popularity,price,score\nIW-02,\"electronics,connector\",iPod & iPod Mini USB 2.0 Cable,1,11.5,0.98867977\nF8V7067-APL-KIT,\"electronics,connector\",Belkin Mobile Power Cord for iPod w/\nDock,1,19.95,0.6523595\nMA147LL/A,\"electronics,music\",Apple 60 GB iPod with Video Playback Black,10,399.0,0.2446348",
    "hierarchy": [
      "CSV Writer Example"
    ],
    "pageId": 648
  },
  {
    "content": "The <span class=\"code\">VelocityResponseWriter</span> processes the Solr response and request context through Apache Velocity\ntemplating.",
    "hierarchy": [
      "Velocity Response Writer"
    ],
    "pageId": 648
  },
  {
    "content": "See the <span class=\"link\">Velocity Response Writer</span> section for details.",
    "hierarchy": [
      "Velocity Response Writer"
    ],
    "pageId": 648
  },
  {
    "content": "The Smile format is a JSON-compatible binary format, described in detail here: <span class=\"link\">http://wiki.fasterxml.com/</span>\nSmileFormat<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Smile Response Writer"
    ],
    "pageId": 648
  },
  {
    "content": "Use this to get the response as a spreadsheet in the .xlsx (Microsoft Excel) format. It accepts parameters in\nthe form <span class=\"code\">colwidth.<field-name></span> and <span class=\"code\">colname.<field-name></span> which helps you customize the column",
    "hierarchy": [
      "XLSX Response Writer"
    ],
    "pageId": 648
  },
  {
    "content": "widths and column names.",
    "hierarchy": [
    ],
    "pageId": 649
  },
  {
    "content": "This response writer has been added as part of the extraction library, and will only work if the extraction\ncontrib is present in the server classpath. Defining the classpath with the <span class=\"ff2 fs1\">lib</span> directive is not sufficient.\nInstead, you will need to copy the necessary .jars to the Solr webapp's <span class=\"ff2 fs1\">lib</span> directory manually. You can run\nthese commands from your <span class=\"ff2 fs1\">$SOLR_INSTALL</span> directory:",
    "hierarchy": [
    ],
    "pageId": 649
  },
  {
    "content": "cp contrib/extraction/lib/*.jar server/solr-webapp/webapp/WEB-INF/lib/\ncp dist/solr-cell-6.3.0.jar server/solr-webapp/webapp/WEB-INF/lib/",
    "hierarchy": [
    ],
    "pageId": 649
  },
  {
    "content": "Once the libraries are in place, you can add <span class=\"ff2 fs1\">wt=xlsx</span> to your request, and results will be returned as an XLSX\nsheet.",
    "hierarchy": [
    ],
    "pageId": 649
  },
  {
    "content": "The VelocityResponseWriter is an optional plugin available in the <span class=\"ff2 fs1\">contrib/velocity</span> directory. It powers the\n/browse user interfaces when using configurations such as \"_default\", \"techproducts\", and \"example/files\".",
    "hierarchy": [
      "Velocity Response Writer"
    ],
    "pageId": 649
  },
  {
    "content": "Its JAR and dependencies must be added (via <span class=\"ff2 fs1\"><lib></span> or solr/home lib inclusion), and must be registered in\nsolrconfig.xml<span class=\"ff1 fs0\"> like this:</span>",
    "hierarchy": [
      "Velocity Response Writer"
    ],
    "pageId": 649
  },
  {
    "content": "Ê <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"template.base.dir\"<span class=\"fc2\">></span></span>${velocity.template.base.dir:}<span class=\"fc2\"></str></span>",
    "hierarchy": [
      "Velocity Response Writer"
    ],
    "pageId": 649
  },
  {
    "content": "The above example shows the optional initialization and custom tool parameters used by\nVelocityResponseWriter; these are detailed in the following table. These initialization parameters are only\nspecified in the writer registration in <span class=\"ff2 fs1\">solrconfig.xml</span>, not as request-time parameters. See further below for\nrequest-time parameters.",
    "hierarchy": [
      "Velocity Response Writer"
    ],
    "pageId": 649
  },
  {
    "content": "template.base.dir\nIf specified and exists as a file system directory, a file resource loader will be added for this directory.\nTemplates in this directory will override \"solr\" resource loader templates.",
    "hierarchy": [
      "Velocity Response Writer",
      "Configuration & Usage",
      "VelocityResponseWriter Initialization Parameters"
    ],
    "pageId": 649
  },
  {
    "content": "init.properties.file\nSpecifies a properties file name which must exist in the Solr <span class=\"ff2 fs1\">conf/</span> directory (<span class=\"code\">not</span> under a <span class=\"ff2 fs1\">velocity/</span>",
    "hierarchy": [
      "Velocity Response Writer",
      "Configuration & Usage",
      "VelocityResponseWriter Initialization Parameters"
    ],
    "pageId": 649
  },
  {
    "content": "subdirectory) or root of a JAR file in a <lib>.",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "params.resource.loader.enabled\nThe \"params\" resource loader allows templates to be specified in Solr request parameters. For example:",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=\\*:*&wt=velocity&v.template=custom&v.templat\ne.custom=CUSTOM%3A%20%23core_name",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "where <span class=\"ff2 fs1\">v.template=custom</span> says to render a template called \"custom\" and the value of\nv.template.custom<span class=\"ff1 fs0\"> is the custom template. This is </span>false<span class=\"ff1 fs0\"> by default; it'd be a niche, unusual, use case to</span>\nneed this enabled.",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "solr.resource.loader.enabled\nThe \"solr\" resource loader is the only template loader registered by default. Templates are served from\nresources visible to the SolrResourceLoader under a <span class=\"ff2 fs1\">velocity/</span> subdirectory. The VelocityResponseWriter\nitself has some built-in templates (in its JAR file, under <span class=\"ff2 fs1\">velocity/</span>) that are available automatically\nthrough this loader. These built-in templates can be overridden when the same template name is in\nconf/velocity/ or by using the <span class=\"ff2 fs1\">template.base.dir</span> option.",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "tools\nExternal \"tools\" can be specified as list of string name/value (tool name / class name) pairs. Tools, in the\nVelocity context, are simply Java objects. Tool classes are constructed using a no-arg constructor (or a\nsingle-SolrCore-arg constructor if it exists) and added to the Velocity context with the specified name.",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "A custom registered tool can override the built-in context objects with the same name, except for\n$request<span class=\"ff1 fs0\">, </span>$response<span class=\"ff1 fs0\">, </span>$page<span class=\"ff1 fs0\">, and </span>$debug<span class=\"ff1 fs0\"> (these tools are designed to not be overridden).</span>",
    "hierarchy": [
    ],
    "pageId": 650
  },
  {
    "content": "v.template\nSpecifies the name of the template to render.",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "v.layout\nSpecifies a template name to use as the layout around the main, <span class=\"ff2 fs1\">v.template</span>, specified template.",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "The main template is rendered into a string value included into the layout rendering as <span class=\"ff2 fs1\">$content</span>.",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "v.layout.enabled\nDetermines if the main template should have a layout wrapped around it. The default is <span class=\"ff2 fs1\">true</span>, but\nrequires <span class=\"ff2 fs1\">v.layout</span> to specified as well.",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "v.contentType\nSpecifies the content type used in the HTTP response. If not specified, the default will depend on whether\nv.json<span class=\"ff1 fs0\"> is specified or not.</span>",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "The default without <span class=\"ff2 fs1\">v.json=wrf</span>: <span class=\"ff2 fs1\">text/html;charset=UTF-8</span>.",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "The default with <span class=\"ff2 fs1\">v.json=wrf</span>: <span class=\"ff2 fs1\">application/json;charset=UTF-8</span>.",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "v.json\nSpecifies a function name to wrap around the response rendered as JSON. If specified, the content type",
    "hierarchy": [
      "VelocityResponseWriter Request Parameters"
    ],
    "pageId": 650
  },
  {
    "content": "used in the response will be \"application/json;charset=UTF-8\", unless overridden by <span class=\"ff2 fs1\">v.contentType</span>.",
    "hierarchy": [
    ],
    "pageId": 651
  },
  {
    "content": "Output will be in this format (with <span class=\"ff2 fs1\">v.json=wrf</span>):",
    "hierarchy": [
    ],
    "pageId": 651
  },
  {
    "content": "wrf(\"result\":\"<Velocity generated response string, with quotes and backslashes escaped>\")",
    "hierarchy": [
    ],
    "pageId": 651
  },
  {
    "content": "v.locale\nLocale to use with the <span class=\"ff2 fs1\">$resource</span> tool and other LocaleConfig implementing tools. The default locale is\nLocale.ROOT<span class=\"ff1 fs0\">. Localized resources are loaded from standard Java resource bundles named</span>\nresources[_locale-code].properties<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 651
  },
  {
    "content": "Resource bundles can be added by providing a JAR file visible by the SolrResourceLoader with resource\nbundles under a velocity sub-directory. Resource bundles are not loadable under <span class=\"ff2 fs1\">conf/</span>, as only the class\nloader aspect of SolrResourceLoader can be used here.",
    "hierarchy": [
    ],
    "pageId": 651
  },
  {
    "content": "v.template.template_name\nWhen the \"params\" resource loader is enabled, templates can be specified as part of the Solr request.",
    "hierarchy": [
    ],
    "pageId": 651
  },
  {
    "content": "request\nSolrQueryRequest<span class=\"fc0\"> javadocs</span>",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "response\nQueryResponse<span class=\"fc0\"> most of the time, but in some cases where</span>\nQueryResponse doesn't like the request handler’s output\n(<span class=\"link\">AnalysisRequestHandler</span>, for example, causes a ClassCastException\nparsing \"response\"), the response will be a SolrResponseBase object.",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "esc\nA Velocity <span class=\"link\">EscapeTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "date\nA Velocity <span class=\"link\">ComparisonDateTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "list\nA Velocity <span class=\"link\">ListTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "math\nA Velocity <span class=\"link\">MathTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "number\nA Velocity <span class=\"link\">NumberTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "sort\nA Velocity <span class=\"link\">SortTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "display\nA Velocity <span class=\"link\">DisplayTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "resource\nA Velocity <span class=\"link\">ResourceTool</span> instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "engine\nThe current VelocityEngine instance",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "page\nAn instance of Solr's PageTool (only included if the response is a\nQueryResponse where paging makes sense)",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "debug\nA shortcut to the debug part of the response, or null if debug is not on.\nThis is handy for having debug-only sections in a template using\n#if($debug)…#end\ncontent\nThe rendered output of the main template, when rendering the layout\n(<span class=\"ff2 fs1\">v.layout.enabled=true</span> and <span class=\"ff2 fs1\">v.layout=<template></span>).",
    "hierarchy": [
      "VelocityResponseWriter Context Objects"
    ],
    "pageId": 651
  },
  {
    "content": "[custom tool(s)]Tools provided by the optional \"tools\" list of the VelocityResponseWriter\nregistration are available by their specified name.",
    "hierarchy": [
    ],
    "pageId": 652
  },
  {
    "content": "Near Real Time (NRT) search means that documents are available for search soon after being indexed. NRT\nsearching is one of the main features of SolrCloud and is rarely attempted in master/slave configurations.",
    "hierarchy": [
      "Near Real Time Searching"
    ],
    "pageId": 653
  },
  {
    "content": "Document durability and searchability are controlled by <span class=\"code\">commits</span>. The \"Near\" in \"Near Real Time\" is\nconfigurable to meet the needs of your application. Commits are either \"hard\" or \"soft\" and can be issued\nby a client (say SolrJ), via a REST call or configured to occur automatically in <span class=\"code\">solrconfig.xml</span>. The\nrecommendation usually gives is to configure your commit strategy in <span class=\"code\">solrconfig.xml</span> (see below) and\navoid issuing commits externally.",
    "hierarchy": [
      "Near Real Time Searching"
    ],
    "pageId": 653
  },
  {
    "content": "Typically in NRT applications, hard commits are configured with <span class=\"code\">openSearcher=false</span>, and soft commits are\nconfigured to make documents visible for search.",
    "hierarchy": [
      "Near Real Time Searching"
    ],
    "pageId": 653
  },
  {
    "content": "When a commit occurs, various background tasks are initiated, segment merging for example. These\nbackground tasks do not block additional updates to the index nor do they delay the availability of the\ndocuments for search.",
    "hierarchy": [
      "Near Real Time Searching"
    ],
    "pageId": 653
  },
  {
    "content": "When configuring for NRT, pay special attention to cache and autowarm settings as they can have a\nsignificant impact on NRT performance. For extremely short autoCommit intervals, consider disabling\ncaching and autowarming completely.",
    "hierarchy": [
      "Near Real Time Searching"
    ],
    "pageId": 653
  },
  {
    "content": "A <span class=\"ff1\">hard commit</span> calls <span class=\"code\">fsync</span> on the index files to ensure they have been flushed to stable storage. The\ncurrent transaction log is closed and a new one is opened. See the \"transaction log\" discussion below for\nhow data is recovered in the absence of a hard commit. Optionally a hard commit can also make documents\nvisible for search, but this is not recommended for NRT searching as it is more expensive than a soft commit.",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "A <span class=\"ff1\">soft commit</span> is faster since it only makes index changes visible and does not <span class=\"code\">fsync</span> index files, start a new\nsegment or start a new transaction log. Search collections that have NRT requirements will want to soft\ncommit often enough to satisfy the visibility requirements of the application. A softCommit may be \"less\nexpensive\" than a hard commit (openSearcher=true), but it is not free. It is recommended that this be set for\nas long as is reasonable given the application requirements.",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "Both hard and soft commits have two primary configuration parameters: <span class=\"code\">maxDocs</span> and <span class=\"code\">maxTime</span>.",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "maxDocs\nInteger. Defines the number of updates to process before activating.",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "maxTime\nInteger. The number of milliseconds to wait before activating.",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "If both of these parameters are specified, the first one to expire is honored. Generally, it is preferred to use\nmaxTime<span class=\"ff2 fs1\"> rather than </span>maxDocs<span class=\"ff2 fs1\">, especially when indexing large numbers of documents in batches. Use</span>\nmaxDocs<span class=\"ff2 fs1\"> and </span>maxTime<span class=\"ff2 fs1\"> judiciously to fine-tune your commit strategies.</span>",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "Hard commit has an additional parameter <span class=\"code\">openSearcher</span>",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "openSearcher",
    "hierarchy": [
      "Near Real Time Searching",
      "Commits and Searching"
    ],
    "pageId": 653
  },
  {
    "content": "true|false, whether to make documents visible for search. For NRT applications this is usually set to <span class=\"ff2 fs1\">false</span>\nand <span class=\"ff2 fs1\">soft commit</span> is configured to control when documents are visible for search.",
    "hierarchy": [
    ],
    "pageId": 654
  },
  {
    "content": "Transaction logs are a \"rolling window\" of updates since the last hard commit. The current transaction log is\nclosed and a new one opened each time any variety of hard commit occurs. Soft commits have no effect on\nthe transaction log.",
    "hierarchy": [
      "Transaction Logs (tlogs)"
    ],
    "pageId": 654
  },
  {
    "content": "When tlogs are enabled, documents being added to the index are written to the tlog before the indexing call\nreturns to the client. In the event of an un-graceful shutdown (power loss, JVM crash, <span class=\"ff2 fs1\">kill -9</span>, etc.) any\ndocuments written to the tlog but not yet committed with a hard commit when Solr was stopped are\nreplayed on startup. Therefore the data is not lost.",
    "hierarchy": [
      "Transaction Logs (tlogs)"
    ],
    "pageId": 654
  },
  {
    "content": "When Solr is shut down gracefully (using the <span class=\"ff2 fs1\">bin/solr stop</span> command) Solr will close the tlog file and index\nsegments so no replay will be necessary on startup.",
    "hierarchy": [
      "Transaction Logs (tlogs)"
    ],
    "pageId": 654
  },
  {
    "content": "One point of confusion is how much data is contained in a tlog. A tlog does not contain all documents, just\nthe ones since the last hard commit. There are come low-level details involving <span class=\"ff2 fs1\">peer sync</span> that also involve\nthe tlogs that are not relevant to this discussion. Older tlogs are deleted when no longer needed.",
    "hierarchy": [
      "Transaction Logs (tlogs)"
    ],
    "pageId": 654
  },
  {
    "content": "Implicit in the above is that transaction logs will grow forever if hard commits are disabled.\nTherefore it is important that hard commits be enabled when indexing.",
    "hierarchy": [
      "Transaction Logs (tlogs)"
    ],
    "pageId": 654
  },
  {
    "content": "As mentioned above, it is usually preferable to configure your commits (both hard and soft) in\nsolrconfig.xml<span class=\"ff1 fs0\"> and avoid sending commits from an external source. Check your </span>solrconfig.xml<span class=\"ff1 fs0\"> file since</span>\nthe defaults are likely not tuned to your needs. Here is an example NRT configuration for the two flavors of\ncommit, a hard commit every 60 seconds and a soft commit every 30 seconds. Note that these are <span class=\"ff5\">not</span> the\nvalues in some of the examples!",
    "hierarchy": [
      "Configuring Commits"
    ],
    "pageId": 654
  },
  {
    "content": "Ê <span class=\"fc3\"><maxTime></span>${solr.autoCommit.maxTime:60000}<span class=\"fc3\"></maxTime></span>\nÊ <span class=\"fc3\"><openSearcher></span>false<span class=\"fc3\"></openSearcher></span>",
    "hierarchy": [
      "Configuring Commits"
    ],
    "pageId": 654
  },
  {
    "content": "Ê  <span class=\"fc3\"><maxTime></span>${solr.autoSoftCommit.maxTime:30000}<span class=\"fc3\"></maxTime></span>\nÊ<span class=\"fc3\"></autoSoftCommit></span>",
    "hierarchy": [
      "Configuring Commits"
    ],
    "pageId": 654
  },
  {
    "content": "These parameters can be overridden at run time by defining Java \"system variables\", for\nexample specifying <span class=\"ff2 fs1\">`-Dsolr.autoCommit.maxTime=15000</span> would override the hard commit\ninterval with a value of 15 seconds.",
    "hierarchy": [
      "Configuring Commits"
    ],
    "pageId": 654
  },
  {
    "content": "The choices for <span class=\"ff2 fs1\">autoCommit</span> (with <span class=\"ff2 fs1\">openSearcher=false</span>) and <span class=\"ff2 fs1\">autoSoftCommit</span> have different consequences.\nIn the event of un-graceful shutdown, it can take up to the time specified in <span class=\"ff2 fs1\">autoCommit</span> for Solr to replay the\nuncommitted documents from the transaction log.",
    "hierarchy": [
      "Configuring Commits"
    ],
    "pageId": 654
  },
  {
    "content": "The time chosen for <span class=\"ff2 fs1\">autoSoftCommit</span> determines the maximum time after a document is sent to Solr before\nit becomes searchable and does not affect the transaction log. Choose as long an interval as your application\ncan tolerate for this value, often 15-60 seconds is reasonable, or even longer depending on the\nrequirements. In situations where the the time is set to a very short interval (say 1 second), consider\ndisabling your caches (queryResultCache and filterCache especially) as they will have little utility.",
    "hierarchy": [
    ],
    "pageId": 655
  },
  {
    "content": "For extremely high bulk indexing, especially for the initial load if there is no searching,\nconsider turning off <span class=\"ff2 fs1\">autoSoftCommit</span> by specifying a value of <span class=\"ff2 fs1\">-1</span> for the maxTime\nparameter.",
    "hierarchy": [
    ],
    "pageId": 655
  },
  {
    "content": "All varieties of commits can be invoked from a SolrJ client or via a URL. The usual recommendation is to <span class=\"ff5\">not</span>\ncall commits externally. For those cases where it is desirable, see <span class=\"link\">Update Commands</span>. These options are\nlisted for XML update commands that can be issued from a browser or curl, etc., and the equivalents are\navailable from a SolrJ client.",
    "hierarchy": [
      "Advanced Commit Options"
    ],
    "pageId": 655
  },
  {
    "content": "For index updates to be visible (searchable), some kind of commit must reopen a searcher to a new point-in-\ntime view of the index.",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "The <span class=\"ff1\">realtime get</span> feature allows retrieval (by <span class=\"code\">unique-key</span>) of the latest version of any documents without the\nassociated cost of reopening a searcher. This is primarily useful when using Solr as a NoSQL data store and\nnot just a search index.",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "Real Time Get relies on the update log feature, which is enabled by default and can be configured in\nsolrconfig.xml<span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "Ê <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"dir\"<span class=\"fc2\">></span></span>${solr.ulog.dir:}<span class=\"fc2\"></str></span>",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "Real Time Get requests can be performed using the <span class=\"code\">/get</span> handler which exists implicitly in Solr - see <span class=\"link\">Implicit</span>\nRequestHandlers<span class=\"fc1\"> - it's equivalent to the following configuration:</span>",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"omitHeader\"<span class=\"fc2\">></span></span>true<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "For example, if you started Solr using the <span class=\"code\">bin/solr -e techproducts</span> example command, you could then\nindex a new document without committing it, like so:",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "curl 'http://localhost:8983/solr/techproducts/update/json?commitWithin=10000000' \\\nÊ -H 'Content-type:application/json' -d '[{\"id\":\"mydoc\",\"name\":\"realtime-get test!\"}]'",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "If you search for this document, it should not be found yet:",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "http://localhost:8983/solr/techproducts/query?q=id:mydoc",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "{<span class=\"fc6\">\"response\"</span>:\nÊ {<span class=\"fc6\">\"numFound\"</span>:<span class=\"fc7\">0</span>,<span class=\"fc6\">\"start\"</span>:<span class=\"fc7\">0</span>,<span class=\"fc6\">\"docs\"</span>:[]}\n}",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "However if you use the Real Time Get handler exposed at <span class=\"code\">/get</span>, you can retrieve the document:",
    "hierarchy": [
      "RealTime Get"
    ],
    "pageId": 656
  },
  {
    "content": "http://localhost:8983/solr/techproducts/get?id=mydoc",
    "hierarchy": [
    ],
    "pageId": 657
  },
  {
    "content": "{<span class=\"fc1\">\"doc\"</span>: {\nÊ <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"mydoc\"</span>,\nÊ <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"realtime-get test!\"</span>,\nÊ <span class=\"fc1\">\"_version_\"</span>: <span class=\"fc3\">1487137811571146752</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 657
  },
  {
    "content": "http://localhost:8983/api/collections/techproducts/get?id=mydoc",
    "hierarchy": [
    ],
    "pageId": 657
  },
  {
    "content": "{<span class=\"fc1\">\"doc\"</span>: {\nÊ <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"mydoc\"</span>,\nÊ <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"realtime-get test!\"</span>,\nÊ <span class=\"fc1\">\"_version_\"</span>: <span class=\"fc3\">1487137811571146752</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 657
  },
  {
    "content": "You can also specify multiple documents at once via the <span class=\"ff2 fs1\">ids</span> parameter and a comma separated list of ids, or\nby using multiple <span class=\"ff2 fs1\">id</span> parameters. If you specify multiple ids, or use the <span class=\"ff2 fs1\">ids</span> parameter, the response will\nmimic a normal query response to make it easier for existing clients to parse.",
    "hierarchy": [
    ],
    "pageId": 657
  },
  {
    "content": "For example:",
    "hierarchy": [
    ],
    "pageId": 657
  },
  {
    "content": "http://localhost:8983/solr/techproducts/get?ids=mydoc,IW-02\nhttp://localhost:8983/solr/techproducts/get?id=mydoc&id=IW-02",
    "hierarchy": [
    ],
    "pageId": 658
  },
  {
    "content": "{<span class=\"fc1\">\"response\"</span>:\nÊ {<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">2</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:\nÊ   [ { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"mydoc\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"realtime-get test!\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc2\">1487137811571146752</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"IW-02\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"iPod & iPod Mini USB 2.0 Cable\"</span>\nÊ     }\nÊ   ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 658
  },
  {
    "content": "http://localhost:8983/api/collections/techproducts/get?ids=mydoc,IW-02\nhttp://localhost:8983/api/collections/techproducts/get?id=mydoc&id=IW-02",
    "hierarchy": [
    ],
    "pageId": 658
  },
  {
    "content": "{<span class=\"fc1\">\"response\"</span>:\nÊ {<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">2</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:\nÊ   [ { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"mydoc\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"realtime-get test!\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc2\">1487137811571146752</span>},\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"IW-02\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"iPod & iPod Mini USB 2.0 Cable\"</span>\nÊ     }\nÊ   ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 658
  },
  {
    "content": "Real Time Get requests can also be combined with filter queries, specified with an <span class=\"ff2 fs1\">fq</span><span class=\"link\"> parameter</span>:",
    "hierarchy": [
    ],
    "pageId": 658
  },
  {
    "content": "http://localhost:8983/solr/techproducts/get?id=mydoc&id=IW-02&fq=name:realtime-get",
    "hierarchy": [
    ],
    "pageId": 659
  },
  {
    "content": "{<span class=\"fc1\">\"response\"</span>:\nÊ {<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">1</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:\nÊ   [ { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"mydoc\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"realtime-get test!\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc2\">1487137811571146752</span>}\nÊ   ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 659
  },
  {
    "content": "http://localhost:8983/api/collections/techproducts/get?id=mydoc&id=IW-02&fq=name:realtime-get",
    "hierarchy": [
    ],
    "pageId": 659
  },
  {
    "content": "{<span class=\"fc1\">\"response\"</span>:\nÊ {<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">1</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:\nÊ   [ { <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"mydoc\"</span>,\nÊ       <span class=\"fc1\">\"name\"</span>:<span class=\"fc3\">\"realtime-get test!\"</span>,\nÊ       <span class=\"fc1\">\"_version_\"</span>:<span class=\"fc2\">1487137811571146752</span>}\nÊ   ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 659
  },
  {
    "content": "Do <span class=\"ff1\">NOT</span> disable the realtime get handler at <span class=\"ff2 fs2\">/get</span> if you are using SolrCloud. Doing so will\nresult in any leader election to cause a full sync in <span class=\"ff1\">ALL</span> replicas for the shard in question.",
    "hierarchy": [
    ],
    "pageId": 659
  },
  {
    "content": "Similarly, a replica recovery will also always fetch the complete index from the leader\nbecause a partial sync will not be possible in the absence of this handler.",
    "hierarchy": [
    ],
    "pageId": 659
  },
  {
    "content": "It's possible to export fully sorted result sets using a special <span class=\"link\">rank query parser</span> and <span class=\"link\">response writer</span>\nspecifically designed to work together to handle scenarios that involve sorting and exporting millions of\nrecords.",
    "hierarchy": [
      "Exporting Result Sets"
    ],
    "pageId": 660
  },
  {
    "content": "This feature uses a stream sorting technique that begins to send records within milliseconds and continues\nto stream results until the entire result set has been sorted and exported.",
    "hierarchy": [
      "Exporting Result Sets"
    ],
    "pageId": 660
  },
  {
    "content": "The cases where this functionality may be useful include: session analysis, distributed merge joins, time\nseries roll-ups, aggregations on high cardinality fields, fully distributed field collapsing, and sort based stats.",
    "hierarchy": [
      "Exporting Result Sets"
    ],
    "pageId": 660
  },
  {
    "content": "All the fields being sorted and exported must have docValues set to true. For more information, see the\nsection on <span class=\"link\">DocValues</span>.",
    "hierarchy": [
      "Exporting Result Sets",
      "Field Requirements"
    ],
    "pageId": 660
  },
  {
    "content": "The <span class=\"code\">/export</span> request handler with the appropriate configuration is one of Solr's out-of-the-box request\nhandlers - see <span class=\"link\">Implicit RequestHandlers</span> for more information.",
    "hierarchy": [
      "Exporting Result Sets",
      "The /export RequestHandler"
    ],
    "pageId": 660
  },
  {
    "content": "Note that this request handler's properties are defined as \"invariants\", which means they cannot be\noverridden by other properties passed at another time (such as at query time).",
    "hierarchy": [
      "Exporting Result Sets",
      "The /export RequestHandler"
    ],
    "pageId": 660
  },
  {
    "content": "You can use <span class=\"code\">/export</span> to make requests to export the result set of a query.",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export"
    ],
    "pageId": 660
  },
  {
    "content": "All queries must include <span class=\"code\">sort</span> and <span class=\"code\">fl</span> parameters, or the query will return an error. Filter queries are also\nsupported.",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export"
    ],
    "pageId": 660
  },
  {
    "content": "The supported response writers are <span class=\"code\">json</span> and <span class=\"code\">javabin</span>. For backward compatibility reasons <span class=\"code\">wt=xsort</span> is also\nsupported as input, but <span class=\"code\">wt=xsort</span> behaves same as <span class=\"code\">wt=json</span>. The default output format is <span class=\"code\">json</span>.",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export"
    ],
    "pageId": 660
  },
  {
    "content": "Here is an example of an export request of some indexed log data:",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export"
    ],
    "pageId": 660
  },
  {
    "content": "http://localhost:8983/solr/core_name/export?q=my-\nquery&sort=severity+desc,timestamp+desc&fl=severity,timestamp,msg",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export"
    ],
    "pageId": 660
  },
  {
    "content": "The <span class=\"code\">sort</span> property defines how documents will be sorted in the exported result set. Results can be sorted by\nany field that has a field type of int,long, float, double, string. The sort fields must be single valued fields.",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export",
      "Specifying the Sort Criteria"
    ],
    "pageId": 660
  },
  {
    "content": "Up to four sort fields can be specified per request, with the 'asc' or 'desc' properties.",
    "hierarchy": [
      "Exporting Result Sets",
      "Requesting Results Export",
      "Specifying the Sort Criteria"
    ],
    "pageId": 660
  },
  {
    "content": "The <span class=\"code\">fl</span> property defines the fields that will be exported with the result set. Any of the field types that can be\nsorted (i.e., int, long, float, double, string, date, boolean) can be used in the field list. The fields can be single\nor multi-valued. However, returning scores and wildcards are not supported at this time.",
    "hierarchy": [
      "Specifying the Field List"
    ],
    "pageId": 661
  },
  {
    "content": "See the section <span class=\"link\">Streaming Expressions</span> for distributed support.",
    "hierarchy": [
      "Distributed Support"
    ],
    "pageId": 661
  },
  {
    "content": "Streaming Expressions provide a simple yet powerful stream processing language for Solr Cloud.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Streaming expressions are a suite of functions that can be combined to perform many different parallel\ncomputing tasks. These functions are the basis for the <span class=\"link\">Parallel SQL Interface</span>.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "There is a growing library of functions that can be combined to implement:",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Request/response stream processing",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Batch stream processing",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Fast interactive MapReduce",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Aggregations (Both pushed down faceted and shuffling MapReduce)",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Parallel relational algebra (distributed joins, intersections, unions, complements)",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Publish/subscribe messaging",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Distributed graph traversal",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Machine learning and parallel iterative model training",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Anomaly detection",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Recommendation systems",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Retrieve and rank services",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Text classification and feature extraction",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Streaming NLP",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Statistical Programming",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Streams from outside systems can be joined with streams originating from Solr and users can add their own\nstream functions by following Solr's <span class=\"link\">Java streaming API</span>.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Both streaming expressions and the streaming API are considered experimental, and the\nAPIs are subject to change.",
    "hierarchy": [
      "Streaming Expressions"
    ],
    "pageId": 662
  },
  {
    "content": "Streaming Expressions are comprised of streaming functions which work with a Solr collection. They emit a\nstream of tuples (key/value Maps).",
    "hierarchy": [
      "Streaming Expressions",
      "Stream Language Basics"
    ],
    "pageId": 662
  },
  {
    "content": "Many of the provided streaming functions are designed to work with entire result sets rather then the top N\nresults like normal search. This is supported by the <span class=\"link\">/export handler</span>.",
    "hierarchy": [
      "Streaming Expressions",
      "Stream Language Basics"
    ],
    "pageId": 662
  },
  {
    "content": "Some streaming functions act as stream sources to originate the stream flow. Other streaming functions act\nas stream decorators to wrap other stream functions and perform operations on the stream of tuples. Many\nstreams functions can be parallelized across a worker collection. This can be particularly powerful for\nrelational algebra functions.",
    "hierarchy": [
      "Streaming Expressions",
      "Stream Language Basics"
    ],
    "pageId": 662
  },
  {
    "content": "Solr has a <span class=\"code\">/stream</span> request handler that takes streaming expression requests and returns the tuples as a\nJSON stream. This request handler is implicitly defined, meaning there is nothing that has to be defined in\nsolrconfig.xml<span class=\"ff2 fs1\"> - see <span class=\"link\">Implicit RequestHandlers</span>.</span>",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "The <span class=\"code\">/stream</span> request handler takes one parameter, <span class=\"code\">expr</span>, which is used to specify the streaming expression.\nFor example, this curl command encodes and POSTs a simple <span class=\"code\">search()</span> expression to the <span class=\"code\">/stream</span> handler:",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "curl --data-urlencode 'expr=search(enron_emails,\nÊ                                  q=\"from:1800flowers*\",\nÊ                                  fl=\"from, to\",\nÊ                                  sort=\"from asc\",\nÊ                                  qt=\"/export\")' http://localhost:8983/solr/enron_emails/stream",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "Details of the parameters for each function are included below.",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "For the above example the <span class=\"code\">/stream</span> handler responded with the following JSON response:",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "{<span class=\"fc3\">\"result-set\"</span>:{<span class=\"fc3\">\"docs\"</span>:[\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers.133139412@s2u2.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers.93690065@s2u2.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"jtholt@ect.enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers.96749439@s2u2.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"alewis@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@1800flowers.flonetwork.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@1800flowers.flonetwork.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@1800flowers.flonetwork.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@1800flowers.flonetwork.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@1800flowers.flonetwork.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@shop2u.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"ebass@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@shop2u.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@shop2u.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@shop2u.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"lcampbel@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@shop2u.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"ebass@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"from\"</span>:<span class=\"fc4\">\"1800flowers@shop2u.com\"</span>,<span class=\"fc3\">\"to\"</span>:<span class=\"fc4\">\"ebass@enron.com\"</span>},\nÊ  {<span class=\"fc3\">\"EOF\"</span>:<span class=\"fc5\">true</span>,<span class=\"fc3\">\"RESPONSE_TIME\"</span>:<span class=\"fc6\">33</span>}]}\n}",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "Note the last tuple in the above example stream is <span class=\"code\">{\"EOF\":true,\"RESPONSE_TIME\":33}</span>. The <span class=\"code\">EOF</span> indicates\nthe end of the stream. To process the JSON response, you'll need to use a streaming JSON implementation\nbecause streaming expressions are designed to return the entire result set which may have millions of\nrecords. In your JSON client you’ll need to iterate each doc (tuple) and check for the EOF tuple to determine\nthe end of stream.",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "The <span class=\"code\">org.apache.solr.client.solrj.io</span> package provides Java classes that compile streaming expressions\ninto streaming API objects. These classes can be used to execute streaming expressions from inside a Java\napplication. For example:",
    "hierarchy": [
      "Streaming Requests and Responses"
    ],
    "pageId": 663
  },
  {
    "content": "StreamFactory streamFactory = <span class=\"fc1\">new</span> StreamFactory().withCollectionZkHost(<span class=\"fc2\">\"collection1\"</span>, zkServer\n.getZkAddress())\nÊ   .withStreamFunction(<span class=\"fc2\">\"search\"</span>, CloudSolrStream.class)\nÊ   .withStreamFunction(<span class=\"fc2\">\"unique\"</span>, UniqueStream.class)\nÊ   .withStreamFunction(<span class=\"fc2\">\"top\"</span>, RankStream.class)\nÊ   .withStreamFunction(<span class=\"fc2\">\"group\"</span>, ReducerStream.class)\nÊ   .withStreamFunction(<span class=\"fc2\">\"parallel\"</span>, ParallelStream.class);",
    "hierarchy": [
    ],
    "pageId": 664
  },
  {
    "content": "ParallelStream pstream = (ParallelStream)streamFactory.constructStream(<span class=\"fc2\">\"parallel(collection1,</span>",
    "hierarchy": [
    ],
    "pageId": 664
  },
  {
    "content": "Because streaming expressions relies on the <span class=\"ff1 fs2\">/export</span> handler, many of the field and field type requirements\nto use <span class=\"ff1 fs2\">/export</span> are also requirements for <span class=\"ff1 fs2\">/stream</span>, particularly for <span class=\"ff1 fs2\">sort</span> and <span class=\"ff1 fs2\">fl</span> parameters. Please see the\nsection <span class=\"link\">Exporting Result Sets</span> for details.",
    "hierarchy": [
      "Data Requirements"
    ],
    "pageId": 664
  },
  {
    "content": "Stream sources originate streams. The most commonly used one of these is <span class=\"ff1 fs2\">search</span>, which does a query.",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Sources"
    ],
    "pageId": 664
  },
  {
    "content": "A full reference to all available source expressions is available in <span class=\"link\">Stream Source Reference</span>.",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Sources"
    ],
    "pageId": 664
  },
  {
    "content": "Stream decorators wrap other stream functions or perform operations on a stream.",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Decorators"
    ],
    "pageId": 664
  },
  {
    "content": "A full reference to all available decorator expressions is available in <span class=\"link\">Stream Decorator Reference</span>.",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Decorators"
    ],
    "pageId": 664
  },
  {
    "content": "Stream Evaluators can be used to evaluate (calculate) new values based on other values in a tuple. That\nnewly evaluated value can be put into the tuple (as part of a <span class=\"ff1 fs2\">select(…)</span> clause), used to filter streams (as\npart of a <span class=\"ff1 fs2\">having(…)</span> clause), and for other things. Evaluators can contain field names, raw values, or other\nevaluators, giving you the ability to create complex evaluation logic, including conditional if/then choices.",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Evaluators"
    ],
    "pageId": 664
  },
  {
    "content": "In cases where you want to use raw values as part of an evaluation you will need to consider the order of\nhow evaluators are parsed.",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Evaluators"
    ],
    "pageId": 664
  },
  {
    "content": "1.If the parameter can be parsed into a valid number, then it is considered a number. For example,\nadd(3,4.5)",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Evaluators"
    ],
    "pageId": 664
  },
  {
    "content": "2.If the parameter can be parsed into a valid boolean, then it is considered a boolean. For example,\neq(true,false)",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Evaluators"
    ],
    "pageId": 664
  },
  {
    "content": "3.If the parameter can be parsed into a valid evaluator, then it is considered an evaluator. For example,\neq(add(10,4),add(7,7))",
    "hierarchy": [
      "Types of Streaming Expressions",
      "About Stream Evaluators"
    ],
    "pageId": 664
  },
  {
    "content": "4.<span class=\"ls1\">The parameter is considered a field name, even if it quoted. For example, <span class=\"ff2 fs1\">eq(fieldA,\"fieldB\")</span></span>",
    "hierarchy": [
    ],
    "pageId": 665
  },
  {
    "content": "If you wish to use a raw string as part of an evaluation, you will want to consider using the <span class=\"ff2 fs1\">raw(string)</span>\nevaluator. This will always return the raw value, no matter what is entered.",
    "hierarchy": [
    ],
    "pageId": 665
  },
  {
    "content": "A full reference to all available evaluator expressions is available in <span class=\"link\">Stream Evaluator Reference</span>.",
    "hierarchy": [
    ],
    "pageId": 665
  },
  {
    "content": "The <span class=\"ff2 fs1\">search</span> function searches a SolrCloud collection and emits a stream of tuples that match the query. This\nis very similar to a standard Solr query, and uses many of the same parameters.",
    "hierarchy": [
      "Stream Source Reference",
      "search"
    ],
    "pageId": 665
  },
  {
    "content": "This expression allows you to specify a request hander using the <span class=\"ff2 fs1\">qt</span> parameter. By default, the <span class=\"ff2 fs1\">/select</span>\nhandler is used. The <span class=\"ff2 fs1\">/select</span> handler can be used for simple rapid prototyping of expressions. For\nproduction, however, you will most likely want to use the <span class=\"ff2 fs1\">/export</span> handler which is designed to <span class=\"ff2 fs1\">sort</span> and\nexport<span class=\"ff1 fs0\"> entire result sets. The </span>/export<span class=\"ff1 fs0\"> handler is not used by default because it has stricter requirements</span>\nthen the <span class=\"ff2 fs1\">/select</span> handler so it's not as easy to get started working with. To read more about the <span class=\"ff2 fs1\">/export</span>\nhandler requirements review the section <span class=\"link\">Exporting Result Sets</span>.",
    "hierarchy": [
      "Stream Source Reference",
      "search"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">collection</span><span class=\"ls1\">: (Mandatory) the collection being searched.</span>",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">q</span><span class=\"ls1\">: (Mandatory) The query to perform on the Solr index.</span>",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">fl</span><span class=\"ls1\">: (Mandatory) The list of fields to return.</span>",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">sort</span><span class=\"ls1\">: (Mandatory) The sort criteria.</span>",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">zkHost</span><span class=\"ls1\">: Only needs to be defined if the collection being searched is found in a different zkHost than the</span>\nlocal stream handler.",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">qt</span><span class=\"ls1\">: Specifies the query type, or request handler, to use. Set this to <span class=\"ff2 fs1\">/export</span> to work with large result sets.</span>\nThe default is <span class=\"ff2 fs1\">/select</span>.",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">rows</span><span class=\"ls1\">: (Mandatory with the <span class=\"ff2 fs1\">/select</span> handler) The rows parameter specifies how many rows to return.</span>\nThis parameter is only needed with the <span class=\"ff2 fs1\">/select</span> handler (which is the default) since the <span class=\"ff2 fs1\">/export</span> handler\nalways returns all rows.",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">partitionKeys</span><span class=\"ls1\">: Comma delimited list of keys to partition the search results by. To be used with the</span>\nparallel function for parallelizing operations across worker nodes. See the <span class=\"link\">parallel</span> function for details.",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Parameters"
    ],
    "pageId": 665
  },
  {
    "content": "expr=search(collection1,\nÊ      zkHost=\"localhost:9983\",\nÊ      qt=\"/export\",\nÊ      q=\"*:*\",\nÊ      fl=\"id,a_s,a_i,a_f\",\nÊ      sort=\"a_f asc, a_i asc\")",
    "hierarchy": [
      "Stream Source Reference",
      "search",
      "search Syntax"
    ],
    "pageId": 665
  },
  {
    "content": "The <span class=\"code\">jdbc</span> function searches a JDBC datasource and emits a stream of tuples representing the JDBC result set.\nEach row in the result set is translated into a tuple and each tuple contains all the cell values for that row.",
    "hierarchy": [
      "jdbc"
    ],
    "pageId": 666
  },
  {
    "content": "connection: (Mandatory) JDBC formatted connection string to whatever driver you are using.",
    "hierarchy": [
      "jdbc",
      "jdbc Parameters"
    ],
    "pageId": 666
  },
  {
    "content": "sql: (Mandatory) query to pass off to the JDBC endpoint",
    "hierarchy": [
      "jdbc",
      "jdbc Parameters"
    ],
    "pageId": 666
  },
  {
    "content": "sort: (Mandatory) The sort criteria indicating how the data coming out of the JDBC stream is sorted",
    "hierarchy": [
      "jdbc",
      "jdbc Parameters"
    ],
    "pageId": 666
  },
  {
    "content": "driver: The name of the JDBC driver used for the connection. If provided then the driver class will\nattempt to be loaded into the JVM. If not provided then it is assumed that the driver is already loaded\ninto the JVM. Some drivers require explicit loading so this option is provided.",
    "hierarchy": [
      "jdbc",
      "jdbc Parameters"
    ],
    "pageId": 666
  },
  {
    "content": "[driverProperty]: One or more properties to pass to the JDBC driver during connection. The format is\npropertyName=\"propertyValue\"<span class=\"ff2 fs1\">. You can provide as many of these properties as you'd like and they will</span>\nall be passed to the connection.",
    "hierarchy": [
      "jdbc",
      "jdbc Parameters"
    ],
    "pageId": 666
  },
  {
    "content": "Because some JDBC drivers require explicit loading the <span class=\"code\">driver</span> parameter can be used to provide the driver\nclass name. If provided, then during stream construction the driver will be loaded. If the driver cannot be\nloaded because the class is not found on the classpath, then stream construction will fail.",
    "hierarchy": [
      "jdbc",
      "Connections and Drivers"
    ],
    "pageId": 666
  },
  {
    "content": "When the JDBC stream is opened it will validate that a driver can be found for the provided connection\nstring. If a driver cannot be found (because it hasn't been loaded) then the open will fail.",
    "hierarchy": [
      "jdbc",
      "Connections and Drivers"
    ],
    "pageId": 666
  },
  {
    "content": "Due to the inherent differences in datatypes across JDBC sources the following datatypes are supported. The\ntable indicates what Java type will be used for a given JDBC type. Types marked as requiring conversion will\ngo through a conversion for each value of that type. For performance reasons the cell data types are only\nconsidered when the stream is opened as this is when the converters are created.",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "StringStringNo",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "ShortLongYes",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "IntegerLongYes",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "LongLongNo",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "FloatDoubleYes",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "DoubleDoubleNo",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "BooleanBooleanNo",
    "hierarchy": [
      "jdbc",
      "Datatypes"
    ],
    "pageId": 666
  },
  {
    "content": "A basic <span class=\"code\">jdbc</span> expression:",
    "hierarchy": [
      "jdbc",
      "jdbc Syntax"
    ],
    "pageId": 666
  },
  {
    "content": "jdbc(\nÊ   connection=\"jdbc:hsqldb:mem:.\",\nÊ   sql=\"select NAME, ADDRESS, EMAIL, AGE from PEOPLE where AGE > 25 order by AGE, NAME DESC\",\nÊ   sort=\"AGE asc, NAME desc\",\nÊ   driver=\"org.hsqldb.jdbcDriver\"\n)",
    "hierarchy": [
    ],
    "pageId": 667
  },
  {
    "content": "A <span class=\"ff1 fs1\">jdbc</span> expression that passes a property to the driver:",
    "hierarchy": [
    ],
    "pageId": 667
  },
  {
    "content": "// get_column_name is a property to pass to the hsqldb driver\njdbc(\nÊ   connection=\"jdbc:hsqldb:mem:.\",\nÊ   sql=\"select NAME as FIRST_NAME, ADDRESS, EMAIL, AGE from PEOPLE where AGE > 25 order by AGE,\nNAME DESC\",\nÊ   sort=\"AGE asc, NAME desc\",\nÊ   driver=\"org.hsqldb.jdbcDriver\",\nÊ   get_column_name=\"false\"\n)",
    "hierarchy": [
    ],
    "pageId": 667
  },
  {
    "content": "The <span class=\"ff1 fs1\">echo</span> function returns a single Tuple echoing its text parameter. <span class=\"ff1 fs1\">Echo</span> is the simplest stream source\ndesigned to provide text to a text analyzing stream decorator.",
    "hierarchy": [
      "echo"
    ],
    "pageId": 667
  },
  {
    "content": "echo(\"Hello world\")",
    "hierarchy": [
      "echo",
      "echo Syntax"
    ],
    "pageId": 667
  },
  {
    "content": "The <span class=\"ff1 fs1\">facet</span> function provides aggregations that are rolled up over buckets. Under the covers the facet\nfunction pushes down the aggregation into the search engine using Solr's JSON Facet API. This provides\nsub-second performance for many use cases. The facet function is appropriate for use with a low to\nmoderate number of distinct values in the bucket fields. To support high cardinality aggregations see the\nrollup function.",
    "hierarchy": [
      "facet"
    ],
    "pageId": 667
  },
  {
    "content": "collection: (Mandatory) Collection the facets will be aggregated from.",
    "hierarchy": [
      "facet",
      "facet Parameters"
    ],
    "pageId": 667
  },
  {
    "content": "q: (Mandatory) The query to build the aggregations from.",
    "hierarchy": [
      "facet",
      "facet Parameters"
    ],
    "pageId": 667
  },
  {
    "content": "buckets: (Mandatory) Comma separated list of fields to rollup over. The comma separated list represents\nthe dimensions in a multi-dimensional rollup.",
    "hierarchy": [
      "facet",
      "facet Parameters"
    ],
    "pageId": 667
  },
  {
    "content": "bucketSorts: Comma separated list of sorts to apply to each dimension in the buckets parameters. Sorts\ncan be on the computed metrics or on the bucket values.",
    "hierarchy": [
      "facet",
      "facet Parameters"
    ],
    "pageId": 667
  },
  {
    "content": "bucketSizeLimit: The number of buckets to include. This value is applied to each dimension.",
    "hierarchy": [
      "facet",
      "facet Parameters"
    ],
    "pageId": 667
  },
  {
    "content": "metrics: List of metrics to compute for the buckets. Currently supported metrics are <span class=\"ff1 fs1\">sum(col)</span>,",
    "hierarchy": [
      "facet",
      "facet Parameters"
    ],
    "pageId": 667
  },
  {
    "content": "avg(col)<span class=\"ff2 fs1\">, </span>min(col)<span class=\"ff2 fs1\">, </span>max(col)<span class=\"ff2 fs1\">, </span>count(*)<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 668
  },
  {
    "content": "Example 1:",
    "hierarchy": [
      "facet Syntax"
    ],
    "pageId": 668
  },
  {
    "content": "facet(collection1,\nÊ     q=\"*:*\",\nÊ     buckets=\"a_s\",\nÊ     bucketSorts=\"sum(a_i) desc\",\nÊ     bucketSizeLimit=100,\nÊ     sum(a_i),\nÊ     sum(a_f),\nÊ     min(a_i),\nÊ     min(a_f),\nÊ     max(a_i),\nÊ     max(a_f),\nÊ     avg(a_i),\nÊ     avg(a_f),\nÊ     count(*))",
    "hierarchy": [
      "facet Syntax"
    ],
    "pageId": 668
  },
  {
    "content": "The example above shows a facet function with rollups over a single bucket, where the buckets are returned\nin descending order by the calculated value of the <span class=\"ff1 fs0\">sum(a_i)</span> metric.",
    "hierarchy": [
      "facet Syntax"
    ],
    "pageId": 668
  },
  {
    "content": "Example 2:",
    "hierarchy": [
      "facet Syntax"
    ],
    "pageId": 668
  },
  {
    "content": "facet(collection1,\nÊ     q=\"*:*\",\nÊ     buckets=\"year_i, month_i, day_i\",\nÊ     bucketSorts=\"year_i desc, month_i desc, day_i desc\",\nÊ     bucketSizeLimit=100,\nÊ     sum(a_i),\nÊ     sum(a_f),\nÊ     min(a_i),\nÊ     min(a_f),\nÊ     max(a_i),\nÊ     max(a_f),\nÊ     avg(a_i),\nÊ     avg(a_f),\nÊ     count(*))",
    "hierarchy": [
      "facet Syntax"
    ],
    "pageId": 668
  },
  {
    "content": "The example above shows a facet function with rollups over three buckets, where the buckets are returned\nin descending order by bucket value.",
    "hierarchy": [
      "facet Syntax"
    ],
    "pageId": 668
  },
  {
    "content": "The <span class=\"ff1 fs0\">features</span> function extracts the key terms from a text field in a classification training set stored in a\nSolrCloud collection. It uses an algorithm known as <span class=\"code\">Information Gain</span>, to select the important terms from\nthe training set. The <span class=\"ff1 fs0\">features</span> function was designed to work specifically with the <span class=\"link\">train</span> function, which uses\nthe extracted features to train a text classifier.",
    "hierarchy": [
      "features"
    ],
    "pageId": 668
  },
  {
    "content": "The <span class=\"ff2 fs1\">features</span> function is designed to work with a training set that provides both positive and negative\nexamples of a class. It emits a tuple for each feature term that is extracted along with the inverse document\nfrequency (IDF) for the term in the training set.",
    "hierarchy": [
    ],
    "pageId": 669
  },
  {
    "content": "The <span class=\"ff2 fs1\">features</span> function uses a query to select the training set from a collection. The IDF for each selected\nfeature is calculated relative to the training set matching the query. This allows multiple training sets to be\nstored in the same SolrCloud collection without polluting the IDF across training sets.",
    "hierarchy": [
    ],
    "pageId": 669
  },
  {
    "content": "collection: (Mandatory) The collection that holds the training set",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "q: (Mandatory) The query that defines the training set. The IDF for the features will be generated specific\nto the result set matching the query.",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "featureSet: (Mandatory) The name of the feature set. This can be used to retrieve the features if they\nare stored in a SolrCloud collection.",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "field: (Mandatory) The text field to extract the features from.",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "outcome: (Mandatory) The field that defines the class, positive or negative",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "numTerms: (Mandatory) How many feature terms to extract.",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "positiveLabel: (defaults to 1) The value in the outcome field that defines a postive outcome.",
    "hierarchy": [
      "features Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "features(collection1,\nÊ        q=\"*:*\",\nÊ        featureSet=\"features1\",\nÊ        field=\"body\",\nÊ        outcome=\"out_i\",\nÊ        numTerms=250)",
    "hierarchy": [
      "features Syntax"
    ],
    "pageId": 669
  },
  {
    "content": "The <span class=\"ff2 fs1\">nodes</span> function provides breadth-first graph traversal. For details, see the section <span class=\"link\">Graph Traversal</span>.",
    "hierarchy": [
      "nodes"
    ],
    "pageId": 669
  },
  {
    "content": "The <span class=\"ff2 fs1\">knn</span> function returns the K nearest neighbors for a document based on text similarity. Under the covers\nthe <span class=\"ff2 fs1\">knn</span> function use the More Like This query parser plugin.",
    "hierarchy": [
      "knn"
    ],
    "pageId": 669
  },
  {
    "content": "collection: (Mandatory) The collection to perform the search in.",
    "hierarchy": [
      "knn",
      "knn Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "id: (Mandatory) The id of the source document to begin the knn search from.",
    "hierarchy": [
      "knn",
      "knn Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "qf: (Mandatory) The query field used to compare documents.",
    "hierarchy": [
      "knn",
      "knn Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "k: (Mandatory) The number of nearest neighbors to return.",
    "hierarchy": [
      "knn",
      "knn Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "fl: (Mandatory) The field list to return.",
    "hierarchy": [
      "knn",
      "knn Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "mintf: (Optional) The minimum numer of occurrences of the term in the source document to be inlcued",
    "hierarchy": [
      "knn",
      "knn Parameters"
    ],
    "pageId": 669
  },
  {
    "content": "in the search.",
    "hierarchy": [
    ],
    "pageId": 670
  },
  {
    "content": "maxtf: (Optional) The maximum numer of occurrences of the term in the source document to be inlcued\nin the search.",
    "hierarchy": [
    ],
    "pageId": 670
  },
  {
    "content": "mindf: (Optional) The minimum numer of occurrences in the corpus to be inlcued in the search.",
    "hierarchy": [
    ],
    "pageId": 670
  },
  {
    "content": "maxdf: (Optional) The maximum numer of occurrences in the corpus to be inlcued in the search.",
    "hierarchy": [
    ],
    "pageId": 670
  },
  {
    "content": "minwl: (Optional) The minimum world length of to be inlcued in the search.",
    "hierarchy": [
    ],
    "pageId": 670
  },
  {
    "content": "maxwl: (Optional) The maximum world length of to be inlcued in the search.",
    "hierarchy": [
    ],
    "pageId": 670
  },
  {
    "content": "knn(collection1,\nÊ   id=\"doc1\",\nÊ   qf=\"text_field\",\nÊ   k=\"10\",\nÊ   fl=\"id, title\",\nÊ   mintf=\"3\",\nÊ   maxdf=\"10000000\")",
    "hierarchy": [
      "knn Syntax"
    ],
    "pageId": 670
  },
  {
    "content": "The <span class=\"ff2 fs1\">model</span> function retrieves and caches logistic regression text classification models that are stored in a\nSolrCloud collection. The <span class=\"ff2 fs1\">model</span> function is designed to work with models that are created by the <span class=\"link\">train</span>\nfunction<span class=\"fc0\">, but can also be used to retrieve text classification models trained outside of Solr, as long as they</span>\nconform to the specified format. After the model is retrieved it can be used by the <span class=\"link\">classify function</span> to classify\ndocuments.",
    "hierarchy": [
      "model"
    ],
    "pageId": 670
  },
  {
    "content": "A single model tuple is fetched and returned based on the <span class=\"code\">id</span> parameter. The model is retrieved by matching\nthe <span class=\"code\">id</span> parameter with a model name in the index. If more then one iteration of the named model is stored in\nthe index, the highest iteration is selected.",
    "hierarchy": [
      "model"
    ],
    "pageId": 670
  },
  {
    "content": "The <span class=\"ff2 fs1\">model</span> function has an internal LRU (least-recently-used) cache so models do not have to be retrieved\nwith each invocation of the <span class=\"ff2 fs1\">model</span> function. The time to cache for each model ID can be passed as a\nparameter to the function call. Retrieving a cached model does not reset the time for expiring the model ID\nin the cache.",
    "hierarchy": [
      "model",
      "Caching with model"
    ],
    "pageId": 670
  },
  {
    "content": "The storage format of the models in Solr is below. The <span class=\"ff2 fs1\">train</span> function outputs the format below so you only\nneed to know schema details if you plan to use the <span class=\"ff2 fs1\">model</span> function with logistic regression models trained\noutside of Solr.",
    "hierarchy": [
      "model",
      "Model Storage"
    ],
    "pageId": 670
  },
  {
    "content": "name_s (Single value, String, Stored): The name of the model.",
    "hierarchy": [
      "model",
      "Model Storage"
    ],
    "pageId": 670
  },
  {
    "content": "iteration_i (Single value, Integer, Stored): The iteration number of the model. Solr can store all\niterations of the models generated by the train function.",
    "hierarchy": [
      "model",
      "Model Storage"
    ],
    "pageId": 670
  },
  {
    "content": "terms_ss (Multi value, String, Stored: The array of terms/features of the model.",
    "hierarchy": [
      "model",
      "Model Storage"
    ],
    "pageId": 670
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">weights_ds</span><span class=\"ls1\"> (Multi value, double, Stored): The array of term weights. Each weight corresponds by array</span>\nindex to a term.",
    "hierarchy": [
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">idfs_ds</span><span class=\"ls1\"> (Multi value, double, Stored): The array of term IDFs (Inverse document frequency). Each IDF</span>\ncorresponds by array index to a term.",
    "hierarchy": [
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">collection</span><span class=\"ls1\">: (Mandatory) The collection where the model is stored.</span>",
    "hierarchy": [
      "model Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">id</span><span class=\"ls1\">: (Mandatory) The id/name of the model. The model function always returns one model. If there are</span>\nmultiple iterations of the name, the highest iteration is returned.",
    "hierarchy": [
      "model Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">cacheMillis</span><span class=\"ls1\">: (Optional) The amount of time to cache the model in the LRU cache.</span>",
    "hierarchy": [
      "model Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "model(modelCollection,\nÊ     id=\"myModel\"\nÊ     cacheMillis=\"200000\")",
    "hierarchy": [
      "model Syntax"
    ],
    "pageId": 671
  },
  {
    "content": "The <span class=\"ff2 fs1\">random</span> function searches a SolrCloud collection and emits a pseudo-random set of results that match\nthe query. Each invocation of random will return a different pseudo-random result set.",
    "hierarchy": [
      "random"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">collection</span><span class=\"ls1\">: (Mandatory) The collection the stats will be aggregated from.</span>",
    "hierarchy": [
      "random",
      "random Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">q</span><span class=\"ls1\">: (Mandatory) The query to build the aggregations from.</span>",
    "hierarchy": [
      "random",
      "random Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">rows</span><span class=\"ls1\">: (Mandatory) The number of pseudo-random results to return.</span>",
    "hierarchy": [
      "random",
      "random Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ls1\">fl: (Mandatory) The field list to return.</span>",
    "hierarchy": [
      "random",
      "random Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">fq</span><span class=\"ls1\">: (Optional) Filter query</span>",
    "hierarchy": [
      "random",
      "random Parameters"
    ],
    "pageId": 671
  },
  {
    "content": "random(baskets,\nÊ      q=\"productID:productX\",\nÊ      rows=\"100\",\nÊ      fl=\"basketID\")",
    "hierarchy": [
      "random",
      "random Syntax"
    ],
    "pageId": 671
  },
  {
    "content": "In the example above the <span class=\"ff2 fs1\">random</span> function is searching the baskets collections for all rows where\n\"productID:productX\". It will return 100 pseudo-random results. The field list returned is the basketID.",
    "hierarchy": [
      "random",
      "random Syntax"
    ],
    "pageId": 671
  },
  {
    "content": "The <span class=\"ff2 fs1\">significantTerms</span> function queries a SolrCloud collection, but instead of returning documents, it\nreturns significant terms found in documents in the result set. The <span class=\"ff2 fs1\">significantTerms</span> function scores terms\nbased on how frequently they appear in the result set and how rarely they appear in the entire corpus. The",
    "hierarchy": [
      "significantTerms"
    ],
    "pageId": 671
  },
  {
    "content": "significantTerms<span class=\"ff2 fs1\"> function emits a tuple for each term which contains the term, the score, the foreground</span>\ncount and the background count. The foreground count is how many documents the term appears in in the\nresult set. The background count is how many documents the term appears in in the entire corpus. The\nforeground and background counts are global for the collection.",
    "hierarchy": [
    ],
    "pageId": 672
  },
  {
    "content": "collection: (Mandatory) The collection that the function is run on.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "q: (Mandatory) The query that describes the foreground document set.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "field: (Mandatory) The field to extract the terms from.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "limit: (Optional, Default 20) The max number of terms to return.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "minDocFreq: (Optional, Defaults to 5 documents) The minimum number of documents the term must\nappear in on a shard. This is a float value. If greater then 1.0 then it's considered the absolute number of\ndocuments. If less then 1.0 it’s treated as a percentage of documents.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "maxDocFreq: (Optional, Defaults to 30% of documents) The maximum number of documents the term\ncan appear in on a shard. This is a float value. If greater then 1.0 then it's considered the absolute\nnumber of documents. If less then 1.0 it’s treated as a percentage of documents.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "minTermLength: (Optional, Default 4) The minimum length of the term to be considered significant.",
    "hierarchy": [
      "significantTerms Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "significantTerms(collection1,\nÊ                q=\"body:Solr\",\nÊ                field=\"author\",\nÊ                limit=\"50\",\nÊ                minDocFreq=\"10\",\nÊ                maxDocFreq=\".20\",\nÊ                minTermLength=\"5\")",
    "hierarchy": [
      "significantTerms Syntax"
    ],
    "pageId": 672
  },
  {
    "content": "In the example above the <span class=\"ff1 fs0\">significantTerms</span> function is querying <span class=\"ff1 fs0\">collection1</span> and returning at most 50\nsignificant terms from the <span class=\"ff1 fs0\">authors</span> field that appear in 10 or more documents but not more then 20% of the\ncorpus.",
    "hierarchy": [
      "significantTerms Syntax"
    ],
    "pageId": 672
  },
  {
    "content": "The <span class=\"ff1 fs0\">shortestPath</span> function is an implementation of a shortest path graph traversal. The <span class=\"ff1 fs0\">shortestPath</span>\nfunction performs an iterative breadth-first search through an unweighted graph to find the shortest paths\nbetween two nodes in a graph. The <span class=\"ff1 fs0\">shortestPath</span> function emits a tuple for each path found. Each tuple\nemitted will contain a <span class=\"ff1 fs0\">path</span> key which points to a <span class=\"ff1 fs0\">List</span> of nodeIDs comprising the path.",
    "hierarchy": [
      "shortestPath"
    ],
    "pageId": 672
  },
  {
    "content": "collection: (Mandatory) The collection that the topic query will be run on.",
    "hierarchy": [
      "shortestPath",
      "shortestPath Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "from: (Mandatory) The nodeID to start the search from",
    "hierarchy": [
      "shortestPath",
      "shortestPath Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "to: (Mandatory) The nodeID to end the search at",
    "hierarchy": [
      "shortestPath",
      "shortestPath Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "edge: (Mandatory) Syntax: <span class=\"ff1 fs0\">from_field=to_field</span>. The <span class=\"ff1 fs0\">from_field</span> defines which field to search from.",
    "hierarchy": [
      "shortestPath",
      "shortestPath Parameters"
    ],
    "pageId": 672
  },
  {
    "content": "The <span class=\"ff2 fs1\">to_field</span> defines which field to search to. See example below for a detailed explanation.",
    "hierarchy": [
    ],
    "pageId": 673
  },
  {
    "content": "threads: (Optional: Default 6) The number of threads used to perform the partitioned join in the\ntraversal.",
    "hierarchy": [
    ],
    "pageId": 673
  },
  {
    "content": "partitionSize: (Optional: Default 250) The number of nodes in each partition of the join.",
    "hierarchy": [
    ],
    "pageId": 673
  },
  {
    "content": "fq: (Optional) Filter query",
    "hierarchy": [
    ],
    "pageId": 673
  },
  {
    "content": "maxDepth: (Mandatory) Limits to the search to a maximum depth in the graph.",
    "hierarchy": [
    ],
    "pageId": 673
  },
  {
    "content": "shortestPath(collection,\nÊ            from=\"john@company.com\",\nÊ            to=\"jane@company.com\",\nÊ            edge=\"from_address=to_address\",\nÊ            threads=\"6\",\nÊ            partitionSize=\"300\",\nÊ            fq=\"limiting query\",\nÊ            maxDepth=\"4\")",
    "hierarchy": [
      "shortestPath Syntax"
    ],
    "pageId": 673
  },
  {
    "content": "The expression above performs a breadth-first search to find the shortest paths in an unweighted, directed\ngraph.",
    "hierarchy": [
      "shortestPath Syntax"
    ],
    "pageId": 673
  },
  {
    "content": "The search starts from the nodeID \"john@company.com\" in the <span class=\"ff2 fs1\">from_address</span> field and searches for the\nnodeID \"jane@company.com\" in the <span class=\"ff2 fs1\">to_address</span> field. This search is performed iteratively until the\nmaxDepth<span class=\"ff1 fs0\"> has been reached. Each level in the traversal is implemented as a parallel partitioned nested loop</span>\njoin across the entire collection. The <span class=\"ff2 fs1\">threads</span> parameter controls the number of threads performing the join\nat each level, while the <span class=\"ff2 fs1\">partitionSize</span> parameter controls the of number of nodes in each join partition. The\nmaxDepth<span class=\"ff1 fs0\"> parameter controls the number of levels to traverse. </span>fq<span class=\"ff1 fs0\"> is a limiting query applied to each level in</span>\nthe traversal.",
    "hierarchy": [
      "shortestPath Syntax"
    ],
    "pageId": 673
  },
  {
    "content": "The <span class=\"ff2 fs1\">shuffle</span> expression sorts and exports entire result sets. The <span class=\"ff2 fs1\">shuffle</span> expression is similar to the <span class=\"ff2 fs1\">search</span>\nexpression except that under the covers <span class=\"ff2 fs1\">shuffle</span> always uses the /export handler. The <span class=\"ff2 fs1\">shuffle</span> expression is\ndesigned to be combined with the relational algebra decorators that require complete, sorted result sets.\nShuffled result sets can be partitioned across worker nodes with the parallel stream decorator to perform\nparallel relational algebra. When used in parallel mode the partitionKeys parameter must be provided.",
    "hierarchy": [
      "shuffle"
    ],
    "pageId": 673
  },
  {
    "content": "collection: (Mandatory) the collection being searched.",
    "hierarchy": [
      "shuffle",
      "shuffle Parameters"
    ],
    "pageId": 673
  },
  {
    "content": "q: (Mandatory) The query to perform on the Solr index.",
    "hierarchy": [
      "shuffle",
      "shuffle Parameters"
    ],
    "pageId": 673
  },
  {
    "content": "fl: (Mandatory) The list of fields to return.",
    "hierarchy": [
      "shuffle",
      "shuffle Parameters"
    ],
    "pageId": 673
  },
  {
    "content": "sort: (Mandatory) The sort criteria.",
    "hierarchy": [
      "shuffle",
      "shuffle Parameters"
    ],
    "pageId": 673
  },
  {
    "content": "zkHost: Only needs to be defined if the collection being searched is found in a different zkHost than the\nlocal stream handler.",
    "hierarchy": [
      "shuffle",
      "shuffle Parameters"
    ],
    "pageId": 673
  },
  {
    "content": "partitionKeys: Comma delimited list of keys to partition the search results by. To be used with the",
    "hierarchy": [
      "shuffle",
      "shuffle Parameters"
    ],
    "pageId": 673
  },
  {
    "content": "parallel function for parallelizing operations across worker nodes. See the <span class=\"link\">parallel</span> function for details.",
    "hierarchy": [
    ],
    "pageId": 674
  },
  {
    "content": "shuffle(collection1,\nÊ       q=\"*:*\",\nÊ       fl=\"id,a_s,a_i,a_f\",\nÊ       sort=\"a_f asc, a_i asc\")",
    "hierarchy": [
      "shuffle Syntax"
    ],
    "pageId": 674
  },
  {
    "content": "The <span class=\"code\">stats</span> function gathers simple aggregations for a search result set. The stats function does not support\nrollups over buckets, so the stats stream always returns a single tuple with the rolled up stats. Under the\ncovers the stats function pushes down the generation of the stats into the search engine using the\nStatsComponent. The stats function currently supports the following metrics: <span class=\"code\">count(*)</span>, <span class=\"code\">sum()</span>, <span class=\"code\">avg()</span>, <span class=\"code\">min()</span>,\nand <span class=\"code\">max()</span>.",
    "hierarchy": [
      "stats"
    ],
    "pageId": 674
  },
  {
    "content": "collection: (Mandatory) Collection the stats will be aggregated from.",
    "hierarchy": [
      "stats",
      "stats Parameters"
    ],
    "pageId": 674
  },
  {
    "content": "q: (Mandatory) The query to build the aggregations from.",
    "hierarchy": [
      "stats",
      "stats Parameters"
    ],
    "pageId": 674
  },
  {
    "content": "metrics: (Mandatory) The metrics to include in the result tuple. Current supported metrics are <span class=\"code\">sum(col)</span>,\navg(col)<span class=\"ff1 fs0\">, </span>min(col)<span class=\"ff1 fs0\">, </span>max(col)<span class=\"ff1 fs0\"> and </span>count(*)",
    "hierarchy": [
      "stats",
      "stats Parameters"
    ],
    "pageId": 674
  },
  {
    "content": "stats(collection1,\nÊ     q=*:*,\nÊ     sum(a_i),\nÊ     sum(a_f),\nÊ     min(a_i),\nÊ     min(a_f),\nÊ     max(a_i),\nÊ     max(a_f),\nÊ     avg(a_i),\nÊ     avg(a_f),\nÊ     count(*))",
    "hierarchy": [
      "stats",
      "stats Syntax"
    ],
    "pageId": 674
  },
  {
    "content": "The <span class=\"code\">timeseries</span> function builds a time series aggregation. Under the covers the <span class=\"code\">timeseries</span> function uses\nthe JSON Facet API as its high performance aggregation engine.",
    "hierarchy": [
      "timeseries"
    ],
    "pageId": 674
  },
  {
    "content": "collection: (Mandatory) Collection the stats will be aggregated from.",
    "hierarchy": [
      "timeseries",
      "timeseries Parameters"
    ],
    "pageId": 674
  },
  {
    "content": "q: (Mandatory) The query to build the aggregations from.",
    "hierarchy": [
      "timeseries",
      "timeseries Parameters"
    ],
    "pageId": 674
  },
  {
    "content": "field: (Mandatory) The date field for the time series.",
    "hierarchy": [
      "timeseries",
      "timeseries Parameters"
    ],
    "pageId": 674
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">start</span><span class=\"ls1\">: (Mandatory) The start of the time series expressed in Solr date or date math syntax.</span>",
    "hierarchy": [
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">end</span><span class=\"ls1\">: (Mandatory) The end of the time series expressed in Solr date or date math syntax.</span>",
    "hierarchy": [
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">gap</span><span class=\"ls1\">: (Mandatory) The time gap between time series aggregation points expressed in Solr date math</span>\nsyntax.",
    "hierarchy": [
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">format</span><span class=\"ls1\">: (Optional) Date template to format the date field in the output tuples. Formatting is performed</span>\nby Java's SimpleDateFormat class.",
    "hierarchy": [
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">metrics</span><span class=\"ls1\">: (Mandatory) The metrics to include in the result tuple. Current supported metrics are <span class=\"ff2 fs1\">sum(col)</span>,</span>\navg(col)<span class=\"ff1 fs0\">, </span>min(col)<span class=\"ff1 fs0\">, </span>max(col)<span class=\"ff1 fs0\"> and </span>count(*)",
    "hierarchy": [
    ],
    "pageId": 675
  },
  {
    "content": "timeseries(collection1,\nÊ          q=*:*,\nÊ          field=\"rec_dt\"\nÊ          start=\"NOW-30DAYS\",\nÊ          end=\"NOW\",\nÊ          gap=\"+1DAY\",\nÊ          format=\"YYYY-MM-dd\",\nÊ          sum(a_i),\nÊ          max(a_i),\nÊ          max(a_f),\nÊ          avg(a_i),\nÊ          avg(a_f),\nÊ          count(*))",
    "hierarchy": [
      "timeseries Syntax"
    ],
    "pageId": 675
  },
  {
    "content": "The <span class=\"ff2 fs1\">train</span> function trains a Logistic Regression text classifier on a training set stored in a SolrCloud\ncollection. It uses a parallel iterative, batch Gradient Descent approach to train the model. The training\nalgorithm is embedded inside Solr so with each iteration only the model is streamed across the network.",
    "hierarchy": [
      "train"
    ],
    "pageId": 675
  },
  {
    "content": "The <span class=\"ff2 fs1\">train</span> function wraps a <span class=\"link\">features</span> function which provides the terms and inverse document frequency\n(IDF) used to train the model. The <span class=\"ff2 fs1\">train</span> function operates over the same training set as the <span class=\"ff2 fs1\">features</span>\nfunction, which includes both positive and negative examples of the class.",
    "hierarchy": [
      "train"
    ],
    "pageId": 675
  },
  {
    "content": "With each iteration the <span class=\"ff2 fs1\">train</span> function emits a tuple with the model. The model contains the feature terms,\nweights, and the confusion matrix for the model. The optimized model can then be used to classify\ndocuments based on their feature terms.",
    "hierarchy": [
      "train"
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">collection</span><span class=\"ls1\">: (Mandatory) Collection that holds the training set</span>",
    "hierarchy": [
      "train",
      "train Parameters"
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">q</span><span class=\"ls1\">: (Mandatory) The query that defines the training set. The IDF for the features will be generated on the</span>",
    "hierarchy": [
      "train",
      "train Parameters"
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">name</span><span class=\"ls1\">: (Mandatory) The name of model. This can be used to retrieve the model if they stored in a Solr</span>\nCloud collection.",
    "hierarchy": [
      "train",
      "train Parameters"
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">field</span><span class=\"ls1\">: (Mandatory) The text field to extract the features from.</span>",
    "hierarchy": [
      "train",
      "train Parameters"
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">outcome</span><span class=\"ls1\">: (Mandatory) The field that defines the class, positive or negative</span>",
    "hierarchy": [
      "train",
      "train Parameters"
    ],
    "pageId": 675
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">maxIterations</span><span class=\"ls1\">: (Mandatory) How many training iterations to perform.</span>",
    "hierarchy": [
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">positiveLabel</span><span class=\"ls1\">: (defaults to 1) The value in the outcome field that defines a positive outcome.</span>",
    "hierarchy": [
    ],
    "pageId": 676
  },
  {
    "content": "train(collection1,\nÊ     features(collection1, q=\"*:*\", featureSet=\"first\", field=\"body\", outcome=\"out_i\",\nnumTerms=250),\nÊ     q=\"*:*\",\nÊ     name=\"model1\",\nÊ     field=\"body\",\nÊ     outcome=\"out_i\",\nÊ     maxIterations=100)",
    "hierarchy": [
      "train Syntax"
    ],
    "pageId": 676
  },
  {
    "content": "The <span class=\"ff2 fs1\">topic</span> function provides publish/subscribe messaging capabilities built on top of SolrCloud. The topic\nfunction allows users to subscribe to a query. The function then provides one-time delivery of new or\nupdated documents that match the topic query. The initial call to the topic function establishes the\ncheckpoints for the specific topic ID. Subsequent calls to the same topic ID will return documents added or\nupdated after the initial checkpoint. Each run of the topic query updates the checkpoints for the topic ID.\nSetting the initialCheckpoint parameter to 0 will cause the topic to process all documents in the index that\nmatch the topic query.",
    "hierarchy": [
      "topic"
    ],
    "pageId": 676
  },
  {
    "content": "The topic function should be considered in beta until <span class=\"link\">SOLR-8709</span> is committed and released.",
    "hierarchy": [
      "topic"
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">checkpointCollection</span><span class=\"ls1\">: (Mandatory) The collection where the topic checkpoints are stored.</span>",
    "hierarchy": [
      "topic",
      "topic Parameters"
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">collection</span><span class=\"ls1\">: (Mandatory) The collection that the topic query will be run on.</span>",
    "hierarchy": [
      "topic",
      "topic Parameters"
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">id</span><span class=\"ls1\">: (Mandatory) The unique ID for the topic. The checkpoints will be saved under this id.</span>",
    "hierarchy": [
      "topic",
      "topic Parameters"
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">q</span><span class=\"ls1\">: (Mandatory) The topic query.</span>",
    "hierarchy": [
      "topic",
      "topic Parameters"
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">fl</span><span class=\"ls1\">: (Mandatory) The field list returned by the topic function.</span>",
    "hierarchy": [
      "topic",
      "topic Parameters"
    ],
    "pageId": 676
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">initialCheckpoint</span><span class=\"ls1\">: (Optional) Sets the initial Solr <span class=\"ff2 fs1\">_version_</span> number to start reading from the queue. If</span>\nnot set, it defaults to the highest version in the index. Setting to 0 will process all records that match\nquery in the index.",
    "hierarchy": [
      "topic",
      "topic Parameters"
    ],
    "pageId": 676
  },
  {
    "content": "topic(checkpointCollection,\nÊ     collection,\nÊ     id=\"uniqueId\",\nÊ     q=\"topic query\",\nÊ     fl=\"id, name, country\")",
    "hierarchy": [
      "topic",
      "topic Syntax"
    ],
    "pageId": 676
  },
  {
    "content": "The <span class=\"code\">tuple</span> function emits a single Tuple with name/value pairs. The values can be set to variables assigned\nin a <span class=\"code\">let</span> expression, literals, Stream Evaluators or Stream Expressions. In the case of Stream Evaluators the\ntuple will output the return value from the evaluator. This could be a numeric, list or map. If a value is set to\na Stream Expression, the <span class=\"code\">tuple</span> function will flatten the tuple stream from the Stream Expression into a list\nof Tuples.",
    "hierarchy": [
      "tuple"
    ],
    "pageId": 677
  },
  {
    "content": "name=value pairs",
    "hierarchy": [
      "tuple",
      "tuple Parameters"
    ],
    "pageId": 677
  },
  {
    "content": "tuple(a=add(1,1),\nÊ     b=search(collection1, q=\"cat:a\", fl=\"a, b, c\", sort=\"a desc\"))",
    "hierarchy": [
      "tuple",
      "tuple Syntax"
    ],
    "pageId": 677
  },
  {
    "content": "The <span class=\"code\">cartesianProduct</span> function turns a single tuple with a multi-valued field (i.e., an array) into multiple\ntuples, one for each value in the array field. That is, given a single tuple containing an array of N values for\nfieldA, the <span class=\"code\">cartesianProduct</span> function will output N tuples, each with one value from the original tuple's\narray. In essence, you can flatten arrays for further processing.",
    "hierarchy": [
      "Stream Decorator Reference",
      "cartesianProduct"
    ],
    "pageId": 677
  },
  {
    "content": "For example, using <span class=\"code\">cartesianProduct</span> you can turn this tuple",
    "hierarchy": [
      "Stream Decorator Reference",
      "cartesianProduct"
    ],
    "pageId": 677
  },
  {
    "content": "{\nÊ \"fieldA\": \"foo\",\nÊ \"fieldB\": [\"bar\",\"baz\",\"bat\"]\n}",
    "hierarchy": [
      "Stream Decorator Reference",
      "cartesianProduct"
    ],
    "pageId": 677
  },
  {
    "content": "into the following 3 tuples",
    "hierarchy": [
      "Stream Decorator Reference",
      "cartesianProduct"
    ],
    "pageId": 677
  },
  {
    "content": "{\nÊ \"fieldA\": \"foo\",\nÊ \"fieldB\": \"bar\"\n}\n{\nÊ \"fieldA\": \"foo\",\nÊ \"fieldB\": \"baz\"\n}\n{\nÊ \"fieldA\": \"foo\",\nÊ \"fieldB\": \"bat\"\n}",
    "hierarchy": [
      "Stream Decorator Reference",
      "cartesianProduct"
    ],
    "pageId": 677
  },
  {
    "content": "incoming stream: (Mandatory) A single incoming stream.",
    "hierarchy": [
      "cartesianProduct Parameters"
    ],
    "pageId": 678
  },
  {
    "content": "fieldName or evaluator: (Mandatory) Name of field to flatten values for, or evaluator whose result\nshould be flattened.",
    "hierarchy": [
      "cartesianProduct Parameters"
    ],
    "pageId": 678
  },
  {
    "content": "productSort='fieldName ASC|DESC': (Optional) Sort order of the newly generated tuples.",
    "hierarchy": [
      "cartesianProduct Parameters"
    ],
    "pageId": 678
  },
  {
    "content": "cartesianProduct(\nÊ <stream>,\nÊ <fieldName | evaluator> [as newFieldName],\nÊ productSort='fieldName ASC|DESC'\n)",
    "hierarchy": [
      "cartesianProduct Syntax"
    ],
    "pageId": 678
  },
  {
    "content": "The following examples show different outputs for this source tuple",
    "hierarchy": [
      "cartesianProduct Examples"
    ],
    "pageId": 678
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3]\n}",
    "hierarchy": [
      "cartesianProduct Examples"
    ],
    "pageId": 678
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ fieldB\n)",
    "hierarchy": [
      "cartesianProduct Examples",
      "Single Field, No Sorting"
    ],
    "pageId": 678
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": [1,2,3]\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": [1,2,3]\n}",
    "hierarchy": [
      "cartesianProduct Examples",
      "Single Field, No Sorting"
    ],
    "pageId": 678
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ sequence(3,4,5) as fieldE\n)",
    "hierarchy": [
    ],
    "pageId": 679
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 4\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 9\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 14\n}",
    "hierarchy": [
    ],
    "pageId": 679
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ fieldB,\nÊ productSort=\"fieldB DESC\"\n)",
    "hierarchy": [
      "Single Field, Sorted by Value"
    ],
    "pageId": 679
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": [1,2,3]\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": [1,2,3]\n}",
    "hierarchy": [
      "Single Field, Sorted by Value"
    ],
    "pageId": 679
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ sequence(3,4,5) as fieldE,\nÊ productSort='newFieldE DESC'\n)",
    "hierarchy": [
    ],
    "pageId": 680
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 14\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 9\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 4\n}",
    "hierarchy": [
    ],
    "pageId": 680
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ fieldB as newFieldB,\nÊ productSort=\"fieldB DESC\"\n)",
    "hierarchy": [
      "Renamed Single Field, Sorted by Value"
    ],
    "pageId": 680
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3]\nÊ \"newFieldB\": \"valueB2\",\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": [\"valueB1\",\"valueB2\"],\nÊ \"fieldC\": [1,2,3]\nÊ \"newFieldB\": \"valueB1\",\n}",
    "hierarchy": [
      "Renamed Single Field, Sorted by Value"
    ],
    "pageId": 680
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ fieldB,\nÊ fieldC\n)",
    "hierarchy": [
    ],
    "pageId": 681
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 1\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 2\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 3\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 1\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 2\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 3\n}",
    "hierarchy": [
    ],
    "pageId": 681
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ fieldB,\nÊ fieldC,\nÊ productSort=\"fieldC ASC\"\n)",
    "hierarchy": [
    ],
    "pageId": 682
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 1\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 1\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 2\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 2\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 3\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 3\n}",
    "hierarchy": [
    ],
    "pageId": 682
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ fieldB,\nÊ fieldC,\nÊ productSort=\"fieldC ASC, fieldB DESC\"\n)",
    "hierarchy": [
    ],
    "pageId": 683
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 1\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 1\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 2\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 2\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB2\",\nÊ \"fieldC\": 3\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": \"valueB1\",\nÊ \"fieldC\": 3\n}",
    "hierarchy": [
    ],
    "pageId": 683
  },
  {
    "content": "cartesianProduct(\nÊ search(collection1, q='*:*', fl='fieldA, fieldB, fieldC', sort='fieldA ASC'),\nÊ sequence(3,4,5) as fieldE,\nÊ fieldB\n)",
    "hierarchy": [
    ],
    "pageId": 684
  },
  {
    "content": "{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": valueB1,\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 4\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": valueB2,\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 4\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": valueB1,\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 9\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": valueB2,\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 9\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": valueB1,\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 14\n}\n{\nÊ \"fieldA\": \"valueA\",\nÊ \"fieldB\": valueB2,\nÊ \"fieldC\": [1,2,3],\nÊ \"fieldE\": 14\n}",
    "hierarchy": [
    ],
    "pageId": 684
  },
  {
    "content": "As you can see in the examples above, the <span class=\"ff1 fs1\">cartesianProduct</span> function does support flattening tuples across\nmultiple fields and/or evaluators.",
    "hierarchy": [
    ],
    "pageId": 684
  },
  {
    "content": "The <span class=\"ff1 fs1\">classify</span> function classifies tuples using a logistic regression text classification model. It was designed\nspecifically to work with models trained using the <span class=\"link\">train function</span>. The <span class=\"ff1 fs1\">classify</span> function uses the <span class=\"link\">model</span>",
    "hierarchy": [
      "classify"
    ],
    "pageId": 684
  },
  {
    "content": "function<span class=\"fc1\"> to retrieve a stored model and then scores a stream of tuples using the model. The tuples read by</span>\nthe classifier must contain a text field that can be used for classification. The classify function uses a Lucene\nanalyzer to extract the features from the text so the model can be applied. By default the <span class=\"ff2 fs1\">classify</span> function\nlooks for the analyzer using the name of text field in the tuple. If the Solr schema on the worker node does\nnot contain this field, the analyzer can be looked up in another field by specifying the <span class=\"ff2 fs1\">analyzerField</span>\nparameter.",
    "hierarchy": [
    ],
    "pageId": 685
  },
  {
    "content": "Each tuple that is classified is assigned two scores:",
    "hierarchy": [
    ],
    "pageId": 685
  },
  {
    "content": "probability_d*: A float between 0 and 1 which describes the probability that the tuple belongs to the\nclass. This is useful in the classification use case.",
    "hierarchy": [
    ],
    "pageId": 685
  },
  {
    "content": "score_d*: The score of the document that has not be squashed between 0 and 1. The score may be\npositive or negative. The higher the score the better the document fits the class. This un-squashed score\nwill be useful in query re-ranking and recommendation use cases. This score is particularly useful when\nmultiple high ranking documents have a probability_d score of 1, which won't provide a meaningful\nranking between documents.",
    "hierarchy": [
    ],
    "pageId": 685
  },
  {
    "content": "model expression: (Mandatory) Retrieves the stored logistic regression model.",
    "hierarchy": [
      "classify Parameters"
    ],
    "pageId": 685
  },
  {
    "content": "field: (Mandatory) The field in the tuples to apply the classifier to. By default the analyzer for this field in\nthe schema will be used extract the features.",
    "hierarchy": [
      "classify Parameters"
    ],
    "pageId": 685
  },
  {
    "content": "analyzerField: (Optional) Specifies a different field to find the analyzer from in the schema.",
    "hierarchy": [
      "classify Parameters"
    ],
    "pageId": 685
  },
  {
    "content": "classify(model(modelCollection,\nÊ            id=\"model1\",\nÊ            cacheMillis=5000),\nÊ        search(contentCollection,\nÊ            q=\"id:(a b c)\",\nÊ            fl=\"text_t, id\",\nÊ            sort=\"id asc\"),\nÊ            field=\"text_t\")",
    "hierarchy": [
      "classify Syntax"
    ],
    "pageId": 685
  },
  {
    "content": "In the example above the <span class=\"ff2 fs1\">classify expression</span> is retrieving the model using the <span class=\"ff2 fs1\">model</span> function. It is then\nclassifying tuples returned by the <span class=\"ff2 fs1\">search</span> function. The <span class=\"ff2 fs1\">text_t</span> field is used for the text classification and the\nanalyzer for the <span class=\"ff2 fs1\">text_t</span> field in the Solr schema is used to analyze the text and extract the features.",
    "hierarchy": [
      "classify Syntax"
    ],
    "pageId": 685
  },
  {
    "content": "The <span class=\"ff2 fs1\">commit</span> function wraps a single stream (A) and given a collection and batch size will send commit\nmessages to the collection when the batch size is fulfilled or the end of stream is reached. A commit stream\nis used most frequently with an update stream and as such the commit will take into account possible\nsummary tuples coming from the update stream. All tuples coming into the commit stream will be returned\nout of the commit stream - no tuples will be dropped and no tuples will be added.",
    "hierarchy": [
      "commit"
    ],
    "pageId": 685
  },
  {
    "content": "collection: The collection to send commit messages to (required)",
    "hierarchy": [
      "commit Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "batchSize: The commit batch size, sends commit message when batch size is hit. If not provided (or\nprovided as value 0) then a commit is only sent at the end of the incoming stream.",
    "hierarchy": [
      "commit Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "waitFlush: The value passed directly to the commit handler (true/false, default: false)",
    "hierarchy": [
      "commit Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "waitSearcher: The value passed directly to the commit handler (true/false, default: false)",
    "hierarchy": [
      "commit Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "softCommit: The value passed directly to the commit handler (true/false, default: false)",
    "hierarchy": [
      "commit Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "StreamExpression for StreamA (required)",
    "hierarchy": [
      "commit Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "commit(\nÊ   destinationCollection,\nÊ   batchSize=2,\nÊ   update(\nÊ       destinationCollection,\nÊ       batchSize=5,\nÊ       search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\")\nÊ   )\n)",
    "hierarchy": [
      "commit Syntax"
    ],
    "pageId": 686
  },
  {
    "content": "The <span class=\"code\">complement</span> function wraps two streams (A and B) and emits tuples from A which do not exist in B. The\ntuples are emitted in the order in which they appear in stream A. Both streams must be sorted by the fields\nbeing used to determine equality (using the <span class=\"code\">on</span> parameter).",
    "hierarchy": [
      "complement"
    ],
    "pageId": 686
  },
  {
    "content": "\nStreamExpression for StreamA",
    "hierarchy": [
      "complement",
      "complement Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "\nStreamExpression for StreamB",
    "hierarchy": [
      "complement",
      "complement Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between A and B. Can be of the format\non=\"fieldName\"<span class=\"ff2 fs0\">, </span>on=\"fieldNameInLeft=fieldNameInRight\"<span class=\"ff2 fs0\">, or </span>on=\"fieldName,\notherFieldName=rightOtherFieldName\"<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "complement",
      "complement Parameters"
    ],
    "pageId": 686
  },
  {
    "content": "complement(\nÊ search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),\nÊ search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\"),\nÊ on=\"a_i\"\n)",
    "hierarchy": [
    ],
    "pageId": 687
  },
  {
    "content": "complement(\nÊ search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),\nÊ search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),\nÊ on=\"a_i,a_s\"\n)",
    "hierarchy": [
    ],
    "pageId": 687
  },
  {
    "content": "The <span class=\"ff1 fs2\">daemon</span> function wraps another function and runs it at intervals using an internal thread. The <span class=\"ff1 fs2\">daemon</span>\nfunction can be used to provide both continuous push and pull streaming.",
    "hierarchy": [
      "daemon"
    ],
    "pageId": 687
  },
  {
    "content": "With continuous push streaming the <span class=\"ff1 fs2\">daemon</span> function wraps another function and is then sent to the\n/stream<span class=\"code\"> handler for execution. The </span>/stream<span class=\"code\"> handler recognizes the </span>daemon<span class=\"code\"> function and keeps it resident in</span>\nmemory, so it can run its internal function at intervals.",
    "hierarchy": [
      "daemon",
      "Continuous Push Streaming"
    ],
    "pageId": 687
  },
  {
    "content": "In order to facilitate the pushing of tuples, the <span class=\"ff1 fs2\">daemon</span> function must wrap another stream decorator that\npushes the tuples somewhere. One example of this is the <span class=\"ff1 fs2\">update</span> function, which wraps a stream and sends\nthe tuples to another SolrCloud collection for indexing.",
    "hierarchy": [
      "daemon",
      "Continuous Push Streaming"
    ],
    "pageId": 687
  },
  {
    "content": "daemon(id=\"uniqueId\",\nÊ      runInterval=\"1000\",\nÊ      terminate=\"true\",\nÊ      update(destinationCollection,\nÊ             batchSize=100,\nÊ             topic(checkpointCollection,\nÊ                   topicCollection,\nÊ                   q=\"topic query\",\nÊ                   fl=\"id, title, abstract, text\",\nÊ                   id=\"topicId\",\nÊ                   initialCheckpoint=0)\nÊ              )\nÊ       )",
    "hierarchy": [
      "daemon",
      "daemon Syntax"
    ],
    "pageId": 687
  },
  {
    "content": "The sample code above shows a <span class=\"ff1 fs2\">daemon</span> function wrapping an <span class=\"ff1 fs2\">update</span> function, which is wrapping a <span class=\"ff1 fs2\">topic</span>\nfunction. When this expression is sent to the <span class=\"ff1 fs2\">/stream</span> handler, the <span class=\"ff1 fs2\">/stream</span> hander sees the <span class=\"ff1 fs2\">daemon</span> function\nand keeps it in memory where it will run at intervals. In this particular example, the <span class=\"ff1 fs2\">daemon</span> function will run\nthe <span class=\"ff1 fs2\">update</span> function every second. The <span class=\"ff1 fs2\">update</span> function is wrapping a <span class=\"ff1 fs2\">topic</span><span class=\"link\"> function</span>, which will stream\ntuples that match the <span class=\"ff1 fs2\">topic</span> function query in batches. Each subsequent call to the topic will return the next\nbatch of tuples for the topic. The <span class=\"ff1 fs2\">update</span> function will send all the tuples matching the topic to another",
    "hierarchy": [
      "daemon",
      "daemon Syntax"
    ],
    "pageId": 687
  },
  {
    "content": "collection to be indexed. The <span class=\"ff2 fs1\">terminate</span> parameter tells the daemon to terminate when the <span class=\"ff2 fs1\">topic</span> function\nstops sending tuples.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "The effect of this is to push documents that match a specific query into another collection. Custom push\nfunctions can be plugged in that push documents out of Solr and into other systems, such as Kafka or an\nemail system.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "Push streaming can also be used for continuous background aggregation scenarios where aggregates are\nrolled up in the background at intervals and pushed to other Solr collections. Another use case is continuous\nbackground machine learning model optimization, where the optimized model is pushed to another Solr\ncollection where it can be integrated into queries.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "The <span class=\"ff2 fs1\">/stream</span> handler supports a small set commands for listing and controlling daemon functions:",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "http://localhost:8983/collection/stream?action=list",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "This command will provide a listing of the current daemon's running on the specific node along with there\ncurrent state.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "http://localhost:8983/collection/stream?action=stop&id=daemonId",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "This command will stop a specific daemon function but leave it resident in memory.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "http://localhost:8983/collection/stream?action=start&id=daemonId",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "This command will start a specific daemon function that has been stopped.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "http://localhost:8983/collection/stream?action=kill&id=daemonId",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "This command will stop a specific daemon function and remove it from memory.",
    "hierarchy": [
    ],
    "pageId": 688
  },
  {
    "content": "The <span class=\"link\">DaemonStream</span> java class (part of the SolrJ libraries) can also be embedded in a java application to\nprovide continuous pull streaming. Sample code:",
    "hierarchy": [
      "Continuous Pull Streaming"
    ],
    "pageId": 688
  },
  {
    "content": "StreamContext context = <span class=\"fc3\">new</span> StreamContext()\nSolrClientCache cache = <span class=\"fc3\">new</span> SolrClientCache();\ncontext.setSolrClientCache(cache);",
    "hierarchy": [
      "Continuous Pull Streaming"
    ],
    "pageId": 688
  },
  {
    "content": "topicQueryParams.put(<span class=\"fc5\">\"q\"</span>,<span class=\"fc5\">\"hello\"</span>);  <span class=\"fc6\">// The query for the topic</span>\ntopicQueryparams.put(<span class=\"fc5\">\"rows\"</span>, <span class=\"fc5\">\"500\"</span>); <span class=\"fc6\">// How many rows to fetch during each run</span>\ntopicQueryparams.put(<span class=\"fc5\">\"fl\"</span>, <span class=\"fc5\">\"id\"</span>, <span class=\"fc5\">\"title\"</span>); <span class=\"fc6\">// The field list to return with the documents</span>",
    "hierarchy": [
      "Continuous Pull Streaming"
    ],
    "pageId": 688
  },
  {
    "content": "TopicStream topicStream = <span class=\"fc3\">new</span> TopicStream(zkHost,        <span class=\"fc6\">// Host address for the ZooKeeper</span>",
    "hierarchy": [
      "Continuous Pull Streaming"
    ],
    "pageId": 688
  },
  {
    "content": "Ê                                        <span class=\"fc1\">\"checkpoints\"</span>,  <span class=\"fc2\">// The collection to store the topic</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                        <span class=\"fc1\">\"topicData\"</span>,    <span class=\"fc2\">// The collection to query for the topic</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                        <span class=\"fc1\">\"topicId\"</span>,      <span class=\"fc2\">// The id of the topic</span>\nÊ                                        -<span class=\"fc3\">1</span>,             <span class=\"fc2\">// checkpoint every X tuples, if set -1</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                         topicQueryParams); <span class=\"fc2\">// The query parameters for the</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "DaemonStream daemonStream = <span class=\"fc4\">new</span> DaemonStream(topicStream,             <span class=\"fc2\">// The underlying stream to</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                            <span class=\"fc1\">\"daemonId\"</span>,              <span class=\"fc2\">// The id of the daemon</span>\nÊ                                            <span class=\"fc3\">1000</span>,                    <span class=\"fc2\">// The interval at which to</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                            <span class=\"fc3\">500</span>);                    <span class=\"fc2\">// The internal queue size</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                                                     <span class=\"fc2\">// as they are read by the</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                                                     <span class=\"fc2\">// Calling read() on the</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "daemonStream.setStreamContext(context);",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "daemonStream.open();",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê   Tuple tuple = daemonStream.read() <span class=\"fc2\">// This will block until tuples become available from the</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê                                     <span class=\"fc2\">// The EOF tuple (signaling the end of the stream) will</span>",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê   <span class=\"fc2\">//Do something with the tuples</span>\n}",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "daemonStream.shutdown();",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "Ê   Tuple tuple = daemonStream.read();\nÊ   <span class=\"fc4\">if</span>(tuple.EOF) {\nÊ       <span class=\"fc4\">break</span>;\nÊ   } <span class=\"fc4\">else</span> {\nÊ       <span class=\"fc2\">//Do something with the tuples.</span>\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "daemonStream.close();",
    "hierarchy": [
    ],
    "pageId": 689
  },
  {
    "content": "The <span class=\"code\">eval</span> function allows for use cases where new streaming expressions are generated on the fly and then\nevaluated. The <span class=\"code\">eval</span> function wraps a streaming expression and reads a single tuple from the underlying\nstream. The <span class=\"code\">eval</span> function then retrieves a string Streaming Expressions from the <span class=\"code\">expr_s</span> field of the tuple.\nThe <span class=\"code\">eval</span> function then compiles the string Streaming Expression and emits the tuples.",
    "hierarchy": [
      "eval"
    ],
    "pageId": 690
  },
  {
    "content": "StreamExpression: (Mandatory) The stream which provides the streaming expression to be evaluated.",
    "hierarchy": [
      "eval",
      "eval Parameters"
    ],
    "pageId": 690
  },
  {
    "content": "eval(expr)",
    "hierarchy": [
      "eval",
      "eval Syntax"
    ],
    "pageId": 690
  },
  {
    "content": "In the example above the <span class=\"code\">eval</span> expression reads the first tuple from the underlying expression. It then\ncompiles and executes the string Streaming Expression in the epxr_s field.",
    "hierarchy": [
      "eval",
      "eval Syntax"
    ],
    "pageId": 690
  },
  {
    "content": "The <span class=\"code\">executor</span> function wraps a stream source that contains streaming expressions, and executes the\nexpressions in parallel. The <span class=\"code\">executor</span> function looks for the expression in the <span class=\"code\">expr_s</span> field in each tuple. The\nexecutor<span class=\"ff2 fs1\"> function has an internal thread pool that runs tasks that compile and run expressions in parallel</span>\non the same worker node. This function can also be parallelized across worker nodes by wrapping it in the\nparallel<span class=\"ff2 fs1\"> function to provide parallel execution of expressions across a cluster.</span>",
    "hierarchy": [
      "executor"
    ],
    "pageId": 690
  },
  {
    "content": "The <span class=\"code\">executor</span> function does not do anything specific with the output of the expressions that it runs.\nTherefore the expressions that are executed must contain the logic for pushing tuples to their destination.\nThe <span class=\"link\">update function</span> can be included in the expression being executed to send the tuples to a SolrCloud\ncollection for storage.",
    "hierarchy": [
      "executor"
    ],
    "pageId": 690
  },
  {
    "content": "This model allows for asynchronous execution of jobs where the output is stored in a SolrCloud collection\nwhere it can be accessed as the job progresses.",
    "hierarchy": [
      "executor"
    ],
    "pageId": 690
  },
  {
    "content": "threads: (Optional) The number of threads in the executors thread pool for executing expressions.",
    "hierarchy": [
      "executor",
      "executor Parameters"
    ],
    "pageId": 690
  },
  {
    "content": "StreamExpression: (Mandatory) The stream source which contains the Streaming Expressions to\nexecute.",
    "hierarchy": [
      "executor",
      "executor Parameters"
    ],
    "pageId": 690
  },
  {
    "content": "daemon(id=\"myDaemon\",\nÊ      terminate=\"true\",\nÊ      executor(threads=10,\nÊ               topic(checkpointCollection\nÊ                     storedExpressions,\nÊ                     q=\"*:*\",\nÊ                     fl=\"id, expr_s\",\nÊ                     initialCheckPoint=0,\nÊ                     id=\"myTopic\")))",
    "hierarchy": [
    ],
    "pageId": 691
  },
  {
    "content": "In the example above a <span class=\"link\">daemon</span> wraps an executor, which wraps a <span class=\"link\">topic</span> that is returning tuples with\nexpressions to execute. When sent to the stream handler, the daemon will call the executor at intervals\nwhich will cause the executor to read from the topic and execute the expressions found in the <span class=\"ff1 fs1\">expr_s</span> field.\nThe daemon will repeatedly call the executor until all the tuples that match the topic have been iterated,\nthen it will terminate. This is the approach for executing batches of streaming expressions from a <span class=\"ff1 fs1\">topic</span>\nqueue.",
    "hierarchy": [
    ],
    "pageId": 691
  },
  {
    "content": "The <span class=\"ff1 fs1\">fetch</span> function iterates a stream and fetches additional fields and adds them to the tuples. The <span class=\"ff1 fs1\">fetch</span>\nfunction fetches in batches to limit the number of calls back to Solr. Tuples streamed from the <span class=\"ff1 fs1\">fetch</span>\nfunction will contain the original fields and the additional fields that were fetched. The <span class=\"ff1 fs1\">fetch</span> function\nsupports one-to-one fetches. Many-to-one fetches, where the stream source contains duplicate keys, will\nalso work, but one-to-many fetches are currently not supported by this function.",
    "hierarchy": [
      "fetch"
    ],
    "pageId": 691
  },
  {
    "content": "Collection: (Mandatory) The collection to fetch the fields from.",
    "hierarchy": [
      "fetch",
      "fetch Parameters"
    ],
    "pageId": 691
  },
  {
    "content": "StreamExpression: (Mandatory) The stream source for the fetch function.",
    "hierarchy": [
      "fetch",
      "fetch Parameters"
    ],
    "pageId": 691
  },
  {
    "content": "fl: (Mandatory) The fields to be fetched.",
    "hierarchy": [
      "fetch",
      "fetch Parameters"
    ],
    "pageId": 691
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between stream source and fetched records.\nFormatted as <span class=\"ff1 fs1\">on=\"fieldNameInTuple=fieldNameInCollection\"</span>.",
    "hierarchy": [
      "fetch",
      "fetch Parameters"
    ],
    "pageId": 691
  },
  {
    "content": "batchSize: (Optional) The batch fetch size.",
    "hierarchy": [
      "fetch",
      "fetch Parameters"
    ],
    "pageId": 691
  },
  {
    "content": "fetch(addresses,\nÊ     search(people, q=\"*:*\", fl=\"username, firstName, lastName\", sort=\"username asc\"),\nÊ     fl=\"streetAddress, city, state, country, zip\",\nÊ     on=\"username=userId\")",
    "hierarchy": [
      "fetch",
      "fetch Syntax"
    ],
    "pageId": 691
  },
  {
    "content": "The example above fetches addresses for users by matching the username in the tuple with the userId field\nin the addresses collection.",
    "hierarchy": [
      "fetch",
      "fetch Syntax"
    ],
    "pageId": 691
  },
  {
    "content": "The <span class=\"ff1 fs1\">having</span> expression wraps a stream and applies a boolean operation to each tuple. It emits only tuples",
    "hierarchy": [
      "having"
    ],
    "pageId": 691
  },
  {
    "content": "for which the boolean operation returns <span class=\"ff2\">true</span>.",
    "hierarchy": [
    ],
    "pageId": 692
  },
  {
    "content": "StreamExpression: (Mandatory) The stream source for the having function.",
    "hierarchy": [
      "having Parameters"
    ],
    "pageId": 692
  },
  {
    "content": "booleanEvaluator: (Madatory) The following boolean operations are supported: <span class=\"code\">eq</span> (equals), <span class=\"code\">gt</span> (greater\nthan), <span class=\"code\">lt</span> (less than), <span class=\"code\">gteq</span> (greater than or equal to), <span class=\"code\">lteq</span> (less than or equal to), <span class=\"code\">and</span>, <span class=\"code\">or</span>, <span class=\"code\">eor</span> (exclusive\nor), and <span class=\"code\">not</span>. Boolean evaluators can be nested with other evaluators to form complex boolean logic.",
    "hierarchy": [
      "having Parameters"
    ],
    "pageId": 692
  },
  {
    "content": "The comparison evaluators compare the value in a specific field with a value, whether a string, number, or\nboolean. For example: <span class=\"code\">eq(field1, 10)</span>, returns <span class=\"code\">true</span> if <span class=\"code\">field1</span> is equal to 10.",
    "hierarchy": [
      "having Parameters"
    ],
    "pageId": 692
  },
  {
    "content": "having(rollup(over=a_s,\nÊ             sum(a_i),\nÊ             search(collection1,\nÊ                    q=*:*,\nÊ                    fl=\"id,a_s,a_i,a_f\",\nÊ                    sort=\"a_s asc\")),\nÊ      and(gt(sum(a_i), 100), lt(sum(a_i), 110)))",
    "hierarchy": [
      "having Syntax"
    ],
    "pageId": 692
  },
  {
    "content": "In this example, the <span class=\"code\">having</span> expression iterates the aggregated tuples from the <span class=\"code\">rollup</span> expression and emits\nall tuples where the field <span class=\"code\">sum(a_i)</span> is greater then 100 and less then 110.",
    "hierarchy": [
      "having Syntax"
    ],
    "pageId": 692
  },
  {
    "content": "The <span class=\"code\">leftOuterJoin</span> function wraps two streams, Left and Right, and emits tuples from Left. If there is a tuple\nin Right equal (as defined by <span class=\"code\">on</span>) then the values in that tuple will be included in the emitted tuple. An equal\ntuple in Right <span class=\"ff2\">need not</span> exist for the Left tuple to be emitted. This supports one-to-one, one-to-many, many-\nto-one, and many-to-many left outer join scenarios. The tuples are emitted in the order in which they appear\nin the Left stream. Both streams must be sorted by the fields being used to determine equality (using the <span class=\"code\">on</span>\nparameter). If both tuples contain a field of the same name then the value from the Right stream will be\nused in the emitted tuple.",
    "hierarchy": [
      "leftOuterJoin"
    ],
    "pageId": 692
  },
  {
    "content": "You can wrap the incoming streams with a <span class=\"code\">select</span> function to be specific about which field values are\nincluded in the emitted tuple.",
    "hierarchy": [
      "leftOuterJoin"
    ],
    "pageId": 692
  },
  {
    "content": "\nStreamExpression for StreamLeft",
    "hierarchy": [
      "leftOuterJoin",
      "leftOuterJoin Parameters"
    ],
    "pageId": 692
  },
  {
    "content": "\nStreamExpression for StreamRight",
    "hierarchy": [
      "leftOuterJoin",
      "leftOuterJoin Parameters"
    ],
    "pageId": 692
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between Left and Right. Can be of the format\non=\"fieldName\"<span class=\"ff1 fs0\">, </span>on=\"fieldNameInLeft=fieldNameInRight\"<span class=\"ff1 fs0\">, or </span>on=\"fieldName,\notherFieldName=rightOtherFieldName\"<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "leftOuterJoin",
      "leftOuterJoin Parameters"
    ],
    "pageId": 692
  },
  {
    "content": "leftOuterJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ search(pets, q=type:cat, fl=\"personId,petName\", sort=\"personId asc\"),\nÊ on=\"personId\"\n)",
    "hierarchy": [
    ],
    "pageId": 693
  },
  {
    "content": "leftOuterJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ search(pets, q=type:cat, fl=\"ownerId,petName\", sort=\"ownerId asc\"),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 693
  },
  {
    "content": "leftOuterJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ select(\nÊ   search(pets, q=type:cat, fl=\"ownerId,name\", sort=\"ownerId asc\"),\nÊ   ownerId,\nÊ   name as petName\nÊ ),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 693
  },
  {
    "content": "The <span class=\"ff1 fs2\">hashJoin</span> function wraps two streams, Left and Right, and for every tuple in Left which exists in Right\nwill emit a tuple containing the fields of both tuples. This supports one-to-one, one-to-many, many-to-one,\nand many-to-many inner join scenarios. The tuples are emitted in the order in which they appear in the Left\nstream. The order of the streams does not matter. If both tuples contain a field of the same name then the\nvalue from the Right stream will be used in the emitted tuple.",
    "hierarchy": [
      "hashJoin"
    ],
    "pageId": 693
  },
  {
    "content": "You can wrap the incoming streams with a <span class=\"ff1 fs2\">select</span> function to be specific about which field values are\nincluded in the emitted tuple.",
    "hierarchy": [
      "hashJoin"
    ],
    "pageId": 693
  },
  {
    "content": "The hashJoin function can be used when the tuples of Left and Right cannot be put in the same order.\nBecause the tuples are out of order this stream functions by reading all values from the Right stream during\nthe open operation and will store all tuples in memory. The result of this is a memory footprint equal to the\nsize of the Right stream.",
    "hierarchy": [
      "hashJoin"
    ],
    "pageId": 693
  },
  {
    "content": "\nStreamExpression for StreamLeft",
    "hierarchy": [
      "hashJoin",
      "hashJoin Parameters"
    ],
    "pageId": 693
  },
  {
    "content": "\nhashed=StreamExpression for StreamRight",
    "hierarchy": [
      "hashJoin",
      "hashJoin Parameters"
    ],
    "pageId": 693
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between Left and Right. Can be of the format\non=\"fieldName\"<span class=\"code\">, </span>on=\"fieldNameInLeft=fieldNameInRight\"<span class=\"code\">, or </span>on=\"fieldName,\notherFieldName=rightOtherFieldName\"<span class=\"code\">.</span>",
    "hierarchy": [
      "hashJoin",
      "hashJoin Parameters"
    ],
    "pageId": 693
  },
  {
    "content": "hashJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ hashed=search(pets, q=type:cat, fl=\"personId,petName\", sort=\"personId asc\"),\nÊ on=\"personId\"\n)",
    "hierarchy": [
    ],
    "pageId": 694
  },
  {
    "content": "hashJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ hashed=search(pets, q=type:cat, fl=\"ownerId,petName\", sort=\"ownerId asc\"),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 694
  },
  {
    "content": "hashJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ hashed=select(\nÊ   search(pets, q=type:cat, fl=\"ownerId,name\", sort=\"ownerId asc\"),\nÊ   ownerId,\nÊ   name as petName\nÊ ),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 694
  },
  {
    "content": "Wraps two streams, Left and Right. For every tuple in Left which exists in Right a tuple containing the fields\nof both tuples will be emitted. This supports one-to-one, one-to-many, many-to-one, and many-to-many\ninner join scenarios. The tuples are emitted in the order in which they appear in the Left stream. Both\nstreams must be sorted by the fields being used to determine equality (the 'on' parameter). If both tuples\ncontain a field of the same name then the value from the Right stream will be used in the emitted tuple. You\ncan wrap the incoming streams with a <span class=\"ff1 fs2\">select(…)</span> expression to be specific about which field values are\nincluded in the emitted tuple.",
    "hierarchy": [
      "innerJoin"
    ],
    "pageId": 694
  },
  {
    "content": "\nStreamExpression for StreamLeft",
    "hierarchy": [
      "innerJoin",
      "innerJoin Parameters"
    ],
    "pageId": 694
  },
  {
    "content": "\nStreamExpression for StreamRight",
    "hierarchy": [
      "innerJoin",
      "innerJoin Parameters"
    ],
    "pageId": 694
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between Left and Right. Can be of the format\non=\"fieldName\"<span class=\"code\">, </span>on=\"fieldNameInLeft=fieldNameInRight\"<span class=\"code\">, or </span>on=\"fieldName,\notherFieldName=rightOtherFieldName\"<span class=\"code\">.</span>",
    "hierarchy": [
      "innerJoin",
      "innerJoin Parameters"
    ],
    "pageId": 694
  },
  {
    "content": "innerJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ search(pets, q=type:cat, fl=\"personId,petName\", sort=\"personId asc\"),\nÊ on=\"personId\"\n)",
    "hierarchy": [
    ],
    "pageId": 695
  },
  {
    "content": "innerJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ search(pets, q=type:cat, fl=\"ownerId,petName\", sort=\"ownerId asc\"),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 695
  },
  {
    "content": "innerJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ select(\nÊ   search(pets, q=type:cat, fl=\"ownerId,name\", sort=\"ownerId asc\"),\nÊ   ownerId,\nÊ   name as petName\nÊ ),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 695
  },
  {
    "content": "The <span class=\"ff1 fs2\">intersect</span> function wraps two streams, A and B, and emits tuples from A which <span class=\"ff2\">DO</span> exist in B. The tuples\nare emitted in the order in which they appear in stream A. Both streams must be sorted by the fields being\nused to determine equality (the <span class=\"ff1 fs2\">on</span> parameter). Only tuples from A are emitted.",
    "hierarchy": [
      "intersect"
    ],
    "pageId": 695
  },
  {
    "content": "\nStreamExpression for StreamA",
    "hierarchy": [
      "intersect",
      "intersect Parameters"
    ],
    "pageId": 695
  },
  {
    "content": "\nStreamExpression for StreamB",
    "hierarchy": [
      "intersect",
      "intersect Parameters"
    ],
    "pageId": 695
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between A and B. Can be of the format\non=\"fieldName\"<span class=\"code\">, </span>on=\"fieldNameInLeft=fieldNameInRight\"<span class=\"code\">, or </span>on=\"fieldName,\notherFieldName=rightOtherFieldName\"<span class=\"code\">.</span>",
    "hierarchy": [
      "intersect",
      "intersect Parameters"
    ],
    "pageId": 695
  },
  {
    "content": "intersect(\nÊ search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),\nÊ search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\"),\nÊ on=\"a_i\"\n)",
    "hierarchy": [
      "intersect",
      "intersect Syntax"
    ],
    "pageId": 695
  },
  {
    "content": "intersect(\nÊ search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),\nÊ search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),\nÊ on=\"a_i,a_s\"\n)",
    "hierarchy": [
      "intersect",
      "intersect Syntax"
    ],
    "pageId": 695
  },
  {
    "content": "The <span class=\"code\">merge</span> function merges two or more streaming expressions and maintains the ordering of the\nunderlying streams. Because the order is maintained, the sorts of the underlying streams must line up with\nthe on parameter provided to the merge function.",
    "hierarchy": [
      "merge"
    ],
    "pageId": 696
  },
  {
    "content": "\nStreamExpression A",
    "hierarchy": [
      "merge",
      "merge Parameters"
    ],
    "pageId": 696
  },
  {
    "content": "\nStreamExpression B",
    "hierarchy": [
      "merge",
      "merge Parameters"
    ],
    "pageId": 696
  },
  {
    "content": "\nOptional StreamExpression C,D,….Z",
    "hierarchy": [
      "merge",
      "merge Parameters"
    ],
    "pageId": 696
  },
  {
    "content": "on: Sort criteria for performing the merge. Of the form <span class=\"code\">fieldName order</span> where order is <span class=\"code\">asc</span> or <span class=\"code\">desc</span>.\nMultiple fields can be provided in the form <span class=\"code\">fieldA order, fieldB order</span>.",
    "hierarchy": [
      "merge",
      "merge Parameters"
    ],
    "pageId": 696
  },
  {
    "content": "# Merging two stream expressions together\nmerge(\nÊ     search(collection1,\nÊ            q=\"id:(0 3 4)\",\nÊ            fl=\"id,a_s,a_i,a_f\",\nÊ            sort=\"a_f asc\"),\nÊ     search(collection1,\nÊ            q=\"id:(1)\",\nÊ            fl=\"id,a_s,a_i,a_f\",\nÊ            sort=\"a_f asc\"),\nÊ     on=\"a_f asc\")",
    "hierarchy": [
      "merge",
      "merge Syntax"
    ],
    "pageId": 696
  },
  {
    "content": "# Merging four stream expressions together. Notice that while the sorts of each stream are not\nidentical they are\n# comparable. That is to say the first N fields in each stream's sort matches the N fields in the\nmerge's on clause.\nmerge(\nÊ     search(collection1,\nÊ            q=\"id:(0 3 4)\",\nÊ            fl=\"id,fieldA,fieldB,fieldC\",\nÊ            sort=\"fieldA asc, fieldB desc\"),\nÊ     search(collection1,\nÊ            q=\"id:(1)\",\nÊ            fl=\"id,fieldA\",\nÊ            sort=\"fieldA asc\"),\nÊ     search(collection2,\nÊ            q=\"id:(10 11 13)\",\nÊ            fl=\"id,fieldA,fieldC\",\nÊ            sort=\"fieldA asc\"),\nÊ     search(collection3,\nÊ            q=\"id:(987)\",\nÊ            fl=\"id,fieldA,fieldC\",\nÊ            sort=\"fieldA asc\"),\nÊ     on=\"fieldA asc\")",
    "hierarchy": [
    ],
    "pageId": 697
  },
  {
    "content": "The null expression is a useful utility function for understanding bottlenecks when performing parallel\nrelational algebra (joins, intersections, rollups etc.). The null function reads all the tuples from an underlying\nstream and returns a single tuple with the count and processing time. Because the null stream adds minimal\noverhead of it's own, it can be used to isolate the performance of Solr’s /export handler. If the /export\nhandlers performance is not the bottleneck, then the bottleneck is likely occurring in the workers where the\nstream decorators are running.",
    "hierarchy": [
      "null"
    ],
    "pageId": 697
  },
  {
    "content": "The null expression can be wrapped by the parallel function and sent to worker nodes. In this scenario each\nworker will return one tuple with the count of tuples processed on the worker and the timing information\nfor that worker. This gives valuable information such as:",
    "hierarchy": [
      "null"
    ],
    "pageId": 697
  },
  {
    "content": "1.As more workers are added does the performance of the /export handler improve or not.\n2.Are tuples being evenly distributed across the workers, or is the hash partitioning sending more\ndocuments to a single worker.",
    "hierarchy": [
      "null"
    ],
    "pageId": 697
  },
  {
    "content": "3.Are all workers processing data at the same speed, or is one of the workers the source of the bottleneck.",
    "hierarchy": [
      "null"
    ],
    "pageId": 697
  },
  {
    "content": "StreamExpression: (Mandatory) The expression read by the null function.",
    "hierarchy": [
      "null",
      "null Parameters"
    ],
    "pageId": 697
  },
  {
    "content": "Êparallel(workerCollection,\nÊ         null(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s desc\", qt=\"/export\",\npartitionKeys=\"a_s\")),\nÊ         workers=\"20\",\nÊ         zkHost=\"localhost:9983\",\nÊ         sort=\"a_s desc\")",
    "hierarchy": [
    ],
    "pageId": 698
  },
  {
    "content": "The expression above shows a parallel function wrapping a null function. This will cause the null function to\nbe run in parallel across 20 worker nodes. Each worker will return a single tuple with number of tuples\nprocessed and time it took to iterate the tuples.",
    "hierarchy": [
    ],
    "pageId": 698
  },
  {
    "content": "The <span class=\"ff1 fs2\">outerHashJoin</span> function wraps two streams, Left and Right, and emits tuples from Left. If there is a tuple\nin Right equal (as defined by the <span class=\"ff1 fs2\">on</span> parameter) then the values in that tuple will be included in the emitted\ntuple. An equal tuple in Right <span class=\"code\">need not</span> exist for the Left tuple to be emitted. This supports one-to-one, one-\nto-many, many-to-one, and many-to-many left outer join scenarios. The tuples are emitted in the order in\nwhich they appear in the Left stream. The order of the streams does not matter. If both tuples contain a field\nof the same name then the value from the Right stream will be used in the emitted tuple.",
    "hierarchy": [
      "outerHashJoin"
    ],
    "pageId": 698
  },
  {
    "content": "You can wrap the incoming streams with a <span class=\"ff1 fs2\">select</span> function to be specific about which field values are\nincluded in the emitted tuple.",
    "hierarchy": [
      "outerHashJoin"
    ],
    "pageId": 698
  },
  {
    "content": "The outerHashJoin stream can be used when the tuples of Left and Right cannot be put in the same order.\nBecause the tuples are out of order, this stream functions by reading all values from the Right stream during\nthe open operation and will store all tuples in memory. The result of this is a memory footprint equal to the\nsize of the Right stream.",
    "hierarchy": [
      "outerHashJoin"
    ],
    "pageId": 698
  },
  {
    "content": "\nStreamExpression for StreamLeft",
    "hierarchy": [
      "outerHashJoin",
      "outerHashJoin Parameters"
    ],
    "pageId": 698
  },
  {
    "content": "\nhashed=StreamExpression for StreamRight",
    "hierarchy": [
      "outerHashJoin",
      "outerHashJoin Parameters"
    ],
    "pageId": 698
  },
  {
    "content": "on: Fields to be used for checking equality of tuples between Left and Right. Can be of the format\non=\"fieldName\"<span class=\"ff2 fs0\">, </span>on=\"fieldNameInLeft=fieldNameInRight\"<span class=\"ff2 fs0\">, or </span>on=\"fieldName,\notherFieldName=rightOtherFieldName\"<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "outerHashJoin",
      "outerHashJoin Parameters"
    ],
    "pageId": 698
  },
  {
    "content": "outerHashJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ hashed=search(pets, q=type:cat, fl=\"personId,petName\", sort=\"personId asc\"),\nÊ on=\"personId\"\n)",
    "hierarchy": [
    ],
    "pageId": 699
  },
  {
    "content": "outerHashJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ hashed=search(pets, q=type:cat, fl=\"ownerId,petName\", sort=\"ownerId asc\"),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 699
  },
  {
    "content": "outerHashJoin(\nÊ search(people, q=*:*, fl=\"personId,name\", sort=\"personId asc\"),\nÊ hashed=select(\nÊ   search(pets, q=type:cat, fl=\"ownerId,name\", sort=\"ownerId asc\"),\nÊ   ownerId,\nÊ   name as petName\nÊ ),\nÊ on=\"personId=ownerId\"\n)",
    "hierarchy": [
    ],
    "pageId": 699
  },
  {
    "content": "The <span class=\"ff1 fs2\">parallel</span> function wraps a streaming expression and sends it to N worker nodes to be processed in\nparallel.",
    "hierarchy": [
      "parallel"
    ],
    "pageId": 699
  },
  {
    "content": "The parallel function requires that the <span class=\"ff1 fs2\">partitionKeys</span> parameter be provided to the underlying searches.\nThe <span class=\"ff1 fs2\">partitionKeys</span> parameter will partition the search results (tuples) across the worker nodes. Tuples with\nthe same values in the partitionKeys field will be shuffled to the same worker nodes.",
    "hierarchy": [
      "parallel"
    ],
    "pageId": 699
  },
  {
    "content": "The parallel function maintains the sort order of the tuples returned by the worker nodes, so the sort criteria\nof the parallel function must match up with the sort order of the tuples returned by the workers.",
    "hierarchy": [
      "parallel"
    ],
    "pageId": 699
  },
  {
    "content": "The worker nodes can be from the same collection as the data, or they can be a different\ncollection entirely, even one that only exists for parallel streaming expressions. A worker\ncollection can be any SolrCloud collection that has the <span class=\"ff1 fs2\">/stream</span> handler configured. Unlike\nnormal SolrCloud collections, worker collections don't have to hold any data. Worker\ncollections can be empty collections that exist only to execute streaming expressions.",
    "hierarchy": [
      "parallel"
    ],
    "pageId": 699
  },
  {
    "content": "collection: Name of the worker collection to send the StreamExpression to.",
    "hierarchy": [
      "parallel",
      "parallel Parameters"
    ],
    "pageId": 699
  },
  {
    "content": "StreamExpression: Expression to send to the worker collection.",
    "hierarchy": [
      "parallel",
      "parallel Parameters"
    ],
    "pageId": 699
  },
  {
    "content": "workers: Number of workers in the worker collection to send the expression to.",
    "hierarchy": [
      "parallel",
      "parallel Parameters"
    ],
    "pageId": 699
  },
  {
    "content": "zkHost: (Optional) The ZooKeeper connect string where the worker collection resides.",
    "hierarchy": [
      "parallel",
      "parallel Parameters"
    ],
    "pageId": 699
  },
  {
    "content": "sort: The sort criteria for ordering tuples returned by the worker nodes.",
    "hierarchy": [
      "parallel",
      "parallel Parameters"
    ],
    "pageId": 699
  },
  {
    "content": "Êparallel(workerCollection,\nÊ         reduce(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s desc\",\npartitionKeys=\"a_s\"),\nÊ                by=\"a_s\",\nÊ                group(sort=\"a_f desc\", n=\"4\")),\nÊ         workers=\"20\",\nÊ         zkHost=\"localhost:9983\",\nÊ         sort=\"a_s desc\")",
    "hierarchy": [
      "parallel Syntax"
    ],
    "pageId": 700
  },
  {
    "content": "The expression above shows a <span class=\"ff2 fs1\">parallel</span> function wrapping a <span class=\"ff2 fs1\">reduce</span> function. This will cause the <span class=\"ff2 fs1\">reduce</span>\nfunction to be run in parallel across 20 worker nodes.",
    "hierarchy": [
      "parallel Syntax"
    ],
    "pageId": 700
  },
  {
    "content": "The <span class=\"ff2 fs1\">priority</span> function is a simple priority scheduler for the <span class=\"link\">executor</span> function. The <span class=\"ff2 fs1\">executor</span> function\ndoesn't directly have a concept of task prioritization; instead it simply executes tasks in the order that they\nare read from it’s underlying stream. The <span class=\"ff2 fs1\">priority</span> function provides the ability to schedule a higher priority\ntask ahead of lower priority tasks that were submitted earlier.",
    "hierarchy": [
      "priority"
    ],
    "pageId": 700
  },
  {
    "content": "The <span class=\"ff2 fs1\">priority</span> function wraps two <span class=\"link\">topics</span> that are both emitting tuples that contain streaming expressions to\nexecute. The first topic is considered the higher priority task queue.",
    "hierarchy": [
      "priority"
    ],
    "pageId": 700
  },
  {
    "content": "Each time the <span class=\"ff2 fs1\">priority</span> function is called, it checks the higher priority task queue to see if there are any\ntasks to execute. If tasks are waiting in the higher priority queue then the priority function will emit the\nhigher priority tasks. If there are no high priority tasks to run, the lower priority queue tasks are emitted.",
    "hierarchy": [
      "priority"
    ],
    "pageId": 700
  },
  {
    "content": "The <span class=\"ff2 fs1\">priority</span> function will only emit a batch of tasks from one of the queues each time it is called. This\nensures that no lower priority tasks are executed until the higher priority queue has no tasks to run.",
    "hierarchy": [
      "priority"
    ],
    "pageId": 700
  },
  {
    "content": "topic expression: (Mandatory) the high priority task queue",
    "hierarchy": [
      "priority",
      "priority Parameters"
    ],
    "pageId": 700
  },
  {
    "content": "topic expression: (Mandatory) the lower priority task queue",
    "hierarchy": [
      "priority",
      "priority Parameters"
    ],
    "pageId": 700
  },
  {
    "content": "daemon(id=\"myDaemon\",\nÊ      executor(threads=10,\nÊ               priority(topic(checkpointCollection, storedExpressions, q=\"priority:high\",\nfl=\"id, expr_s\", initialCheckPoint=0,id=\"highPriorityTasks\"),\nÊ                        topic(checkpointCollection, storedExpressions, q=\"priority:low\", fl=\"id,\nexpr_s\", initialCheckPoint=0,id=\"lowPriorityTasks\"))))",
    "hierarchy": [
      "priority",
      "priority Syntax"
    ],
    "pageId": 700
  },
  {
    "content": "In the example above the <span class=\"ff2 fs1\">daemon</span> function is calling the executor iteratively. Each time it's called, the\nexecutor<span class=\"code\"> function will execute the tasks emitted by the </span>priority<span class=\"code\"> function. The </span>priority<span class=\"code\"> function wraps two</span>\ntopics. The first topic is the higher priority task queue, the second topics is the lower priority topic.",
    "hierarchy": [
      "priority",
      "priority Syntax"
    ],
    "pageId": 700
  },
  {
    "content": "The <span class=\"code\">reduce</span> function wraps an internal stream and groups tuples by common fields.",
    "hierarchy": [
      "reduce"
    ],
    "pageId": 701
  },
  {
    "content": "Each tuple group is operated on as a single block by a pluggable reduce operation. The group operation\nprovided with Solr implements distributed grouping functionality. The group operation also serves as an\nexample reduce operation that can be referred to when building custom reduce operations.",
    "hierarchy": [
      "reduce"
    ],
    "pageId": 701
  },
  {
    "content": "The reduce function relies on the sort order of the underlying stream. Accordingly the sort\norder of the underlying stream must be aligned with the group by field.",
    "hierarchy": [
      "reduce"
    ],
    "pageId": 701
  },
  {
    "content": "StreamExpression: (Mandatory)",
    "hierarchy": [
      "reduce",
      "reduce Parameters"
    ],
    "pageId": 701
  },
  {
    "content": "by: (Mandatory) A comma separated list of fields to group by.",
    "hierarchy": [
      "reduce",
      "reduce Parameters"
    ],
    "pageId": 701
  },
  {
    "content": "Reduce Operation: (Mandatory)",
    "hierarchy": [
      "reduce",
      "reduce Parameters"
    ],
    "pageId": 701
  },
  {
    "content": "reduce(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f asc\"),\nÊ      by=\"a_s\",\nÊ      group(sort=\"a_f desc\", n=\"4\")\n)",
    "hierarchy": [
      "reduce",
      "reduce Syntax"
    ],
    "pageId": 701
  },
  {
    "content": "The <span class=\"code\">rollup</span> function wraps another stream function and rolls up aggregates over bucket fields. The rollup\nfunction relies on the sort order of the underlying stream to rollup aggregates one grouping at a time.\nAccordingly, the sort order of the underlying stream must match the fields in the <span class=\"code\">over</span> parameter of the\nrollup function.",
    "hierarchy": [
      "rollup"
    ],
    "pageId": 701
  },
  {
    "content": "The rollup function also needs to process entire result sets in order to perform its aggregations. When the\nunderlying stream is the <span class=\"code\">search</span> function, the <span class=\"code\">/export</span> handler can be used to provide full sorted result sets\nto the rollup function. This sorted approach allows the rollup function to perform aggregations over very\nhigh cardinality fields. The disadvantage of this approach is that the tuples must be sorted and streamed\nacross the network to a worker node to be aggregated. For faster aggregation over low to moderate\ncardinality fields, the <span class=\"code\">facet</span> function can be used.",
    "hierarchy": [
      "rollup"
    ],
    "pageId": 701
  },
  {
    "content": "StreamExpression (Mandatory)",
    "hierarchy": [
      "rollup",
      "rollup Parameters"
    ],
    "pageId": 701
  },
  {
    "content": "over: (Mandatory) A list of fields to group by.",
    "hierarchy": [
      "rollup",
      "rollup Parameters"
    ],
    "pageId": 701
  },
  {
    "content": "metrics: (Mandatory) The list of metrics to compute. Currently supported metrics are <span class=\"code\">sum(col)</span>,\navg(col)<span class=\"ff2 fs1\">, </span>min(col)<span class=\"ff2 fs1\">, </span>max(col)<span class=\"ff2 fs1\">, </span>count(*)<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "rollup",
      "rollup Parameters"
    ],
    "pageId": 701
  },
  {
    "content": "rollup(\nÊ  search(collection1, q=*:*, fl=\"a_s,a_i,a_f\", qt=\"/export\", sort=\"a_s asc\"),\nÊ  over=\"a_s\",\nÊ  sum(a_i),\nÊ  sum(a_f),\nÊ  min(a_i),\nÊ  min(a_f),\nÊ  max(a_i),\nÊ  max(a_f),\nÊ  avg(a_i),\nÊ  avg(a_f),\nÊ  count(*)\n)",
    "hierarchy": [
    ],
    "pageId": 702
  },
  {
    "content": "The example about shows the rollup function wrapping the search function. Notice that search function is\nusing the <span class=\"ff1 fs1\">/export</span> handler to provide the entire result set to the rollup stream. Also notice that the search\nfunction's <span class=\"code\">sort param</span> matches up with the rollup’s <span class=\"ff1 fs1\">over</span> parameter. This allows the rollup function to rollup\nthe over the <span class=\"ff1 fs1\">a_s</span> field, one group at a time.",
    "hierarchy": [
    ],
    "pageId": 702
  },
  {
    "content": "See section in <span class=\"link\">graph traversal</span>.",
    "hierarchy": [
      "scoreNodes"
    ],
    "pageId": 702
  },
  {
    "content": "The <span class=\"ff1 fs1\">select</span> function wraps a streaming expression and outputs tuples containing a subset or modified set of\nfields from the incoming tuples. The list of fields included in the output tuple can contain aliases to\neffectively rename fields. The <span class=\"ff1 fs1\">select</span> stream supports both operations and evaluators. One can provide a list\nof operations and evaluators to perform on any fields, such as <span class=\"ff1 fs1\">replace, add, if</span>, etc.",
    "hierarchy": [
      "select"
    ],
    "pageId": 702
  },
  {
    "content": "\nStreamExpression",
    "hierarchy": [
      "select",
      "select Parameters"
    ],
    "pageId": 702
  },
  {
    "content": "fieldName: name of field to include in the output tuple (can include multiple of these), such as\noutputTuple[fieldName] = inputTuple[fieldName]",
    "hierarchy": [
      "select",
      "select Parameters"
    ],
    "pageId": 702
  },
  {
    "content": "fieldName as aliasFieldName: aliased field name to include in the output tuple (can include multiple of\nthese), such as <span class=\"ff1 fs1\">outputTuple[aliasFieldName] = incomingTuple[fieldName]</span>",
    "hierarchy": [
      "select",
      "select Parameters"
    ],
    "pageId": 702
  },
  {
    "content": "replace(fieldName, value, withValue=replacementValue): if <span class=\"ff1 fs1\">incomingTuple[fieldName] == value</span>\nthen <span class=\"ff1 fs1\">outgoingTuple[fieldName]</span> will be set to <span class=\"ff1 fs1\">replacementValue</span>. <span class=\"ff1 fs1\">value</span> can be the string \"null\" to\nreplace a null value with some other value.",
    "hierarchy": [
      "select",
      "select Parameters"
    ],
    "pageId": 702
  },
  {
    "content": "replace(fieldName, value, withField=otherFieldName): if <span class=\"ff1 fs1\">incomingTuple[fieldName] == value</span>\nthen <span class=\"ff1 fs1\">outgoingTuple[fieldName]</span> will be set to the value of <span class=\"ff1 fs1\">incomingTuple[otherFieldName]</span>. <span class=\"ff1 fs1\">value</span> can\nbe the string \"null\" to replace a null value with some other value.",
    "hierarchy": [
      "select",
      "select Parameters"
    ],
    "pageId": 702
  },
  {
    "content": "// output tuples with fields teamName, wins, losses, and winPercentages where a null value for\nwins or losses is translated to the value of 0\nselect(\nÊ search(collection1, fl=\"id,teamName_s,wins,losses\", q=\"*:*\", sort=\"id asc\"),\nÊ teamName_s as teamName,\nÊ wins,\nÊ losses,\nÊ replace(wins,null,withValue=0),\nÊ replace(losses,null,withValue=0),\nÊ if(eq(0,wins), 0, div(add(wins,losses), wins)) as winPercentage\n)",
    "hierarchy": [
    ],
    "pageId": 703
  },
  {
    "content": "The <span class=\"ff1 fs2\">sort</span> function wraps a streaming expression and re-orders the tuples. The sort function emits all\nincoming tuples in the new sort order. The sort function reads all tuples from the incoming stream, re-\norders them using an algorithm with <span class=\"ff1 fs2\">O(nlog(n))</span> performance characteristics, where n is the total number\nof tuples in the incoming stream, and then outputs the tuples in the new sort order. Because all tuples are\nread into memory, the memory consumption of this function grows linearly with the number of tuples in the\nincoming stream.",
    "hierarchy": [
      "sort"
    ],
    "pageId": 703
  },
  {
    "content": "\nStreamExpression",
    "hierarchy": [
      "sort",
      "sort Parameters"
    ],
    "pageId": 703
  },
  {
    "content": "by: Sort criteria for re-ordering the tuples",
    "hierarchy": [
      "sort",
      "sort Parameters"
    ],
    "pageId": 703
  },
  {
    "content": "The expression below finds dog owners and orders the results by owner and pet name. Notice that it uses\nan efficient innerJoin by first ordering by the person/owner id and then re-orders the final output by the\nowner and pet names.",
    "hierarchy": [
      "sort",
      "sort Syntax"
    ],
    "pageId": 703
  },
  {
    "content": "sort(\nÊ innerJoin(\nÊ   search(people, q=*:*, fl=\"id,name\", sort=\"id asc\"),\nÊ   search(pets, q=type:dog, fl=\"owner,petName\", sort=\"owner asc\"),\nÊ   on=\"id=owner\"\nÊ ),\nÊ by=\"name asc, petName asc\"\n)",
    "hierarchy": [
      "sort",
      "sort Syntax"
    ],
    "pageId": 703
  },
  {
    "content": "The <span class=\"ff1 fs2\">top</span> function wraps a streaming expression and re-orders the tuples. The top function emits only the top\nN tuples in the new sort order. The top function re-orders the underlying stream so the sort criteria <span class=\"ff2\">does</span>\nnot<span class=\"code\"> have to match up with the underlying stream.</span>",
    "hierarchy": [
      "top"
    ],
    "pageId": 703
  },
  {
    "content": "n: Number of top tuples to return.",
    "hierarchy": [
      "top Parameters"
    ],
    "pageId": 704
  },
  {
    "content": "\nStreamExpression",
    "hierarchy": [
      "top Parameters"
    ],
    "pageId": 704
  },
  {
    "content": "sort: Sort criteria for selecting the top N tuples.",
    "hierarchy": [
      "top Parameters"
    ],
    "pageId": 704
  },
  {
    "content": "The expression below finds the top 3 results of the underlying search. Notice that it reverses the sort order.\nThe top function re-orders the results of the underlying stream.",
    "hierarchy": [
      "top Syntax"
    ],
    "pageId": 704
  },
  {
    "content": "top(n=3,\nÊ    search(collection1,\nÊ           q=\"*:*\",\nÊ           qt=\"/export\",\nÊ           fl=\"id,a_s,a_i,a_f\",\nÊ           sort=\"a_f desc, a_i desc\"),\nÊ     sort=\"a_f asc, a_i asc\")",
    "hierarchy": [
      "top Syntax"
    ],
    "pageId": 704
  },
  {
    "content": "The <span class=\"code\">unique</span> function wraps a streaming expression and emits a unique stream of tuples based on the <span class=\"code\">over</span>\nparameter. The unique function relies on the sort order of the underlying stream. The <span class=\"code\">over</span> parameter must\nmatch up with the sort order of the underlying stream.",
    "hierarchy": [
      "unique"
    ],
    "pageId": 704
  },
  {
    "content": "The unique function implements a non-co-located unique algorithm. This means that records with the same\nunique <span class=\"code\">over</span> field do not need to be co-located on the same shard. When executed in the parallel, the\npartitionKeys<span class=\"ff2 fs0\"> parameter must be the same as the unique </span>over<span class=\"ff2 fs0\"> field so that records with the same keys will</span>\nbe shuffled to the same worker.",
    "hierarchy": [
      "unique"
    ],
    "pageId": 704
  },
  {
    "content": "\nStreamExpression",
    "hierarchy": [
      "unique",
      "unique Parameters"
    ],
    "pageId": 704
  },
  {
    "content": "over: The unique criteria.",
    "hierarchy": [
      "unique",
      "unique Parameters"
    ],
    "pageId": 704
  },
  {
    "content": "unique(\nÊ search(collection1,\nÊ        q=\"*:*\",\nÊ        qt=\"/export\",\nÊ        fl=\"id,a_s,a_i,a_f\",\nÊ        sort=\"a_f asc, a_i asc\"),\nÊ over=\"a_f\")",
    "hierarchy": [
      "unique",
      "unique Syntax"
    ],
    "pageId": 704
  },
  {
    "content": "The <span class=\"code\">update</span> function wraps another functions and sends the tuples to a SolrCloud collection for indexing.",
    "hierarchy": [
      "update"
    ],
    "pageId": 704
  },
  {
    "content": "destinationCollection: (Mandatory) The collection where the tuples will indexed.",
    "hierarchy": [
      "update Parameters"
    ],
    "pageId": 705
  },
  {
    "content": "batchSize: (Mandatory) The indexing batch size.",
    "hierarchy": [
      "update Parameters"
    ],
    "pageId": 705
  },
  {
    "content": "StreamExpression: (Mandatory)",
    "hierarchy": [
      "update Parameters"
    ],
    "pageId": 705
  },
  {
    "content": "Êupdate(destinationCollection,\nÊ       batchSize=500,\nÊ       search(collection1,\nÊ              q=*:*,\nÊ              fl=\"id,a_s,a_i,a_f,s_multi,i_multi\",\nÊ              sort=\"a_f asc, a_i asc\"))",
    "hierarchy": [
      "update Syntax"
    ],
    "pageId": 705
  },
  {
    "content": "The example above sends the tuples returned by the <span class=\"code\">search</span> function to the <span class=\"code\">destinationCollection</span> to be\nindexed.",
    "hierarchy": [
      "update Syntax"
    ],
    "pageId": 705
  },
  {
    "content": "Stream evaluators are different then stream sources or stream decorators. Both stream sources and stream\ndecorators return streams of tuples. Stream evaluators are more like a traditional function that evaluates its\nparameters and returns an result. That result can be a single value, array, map or other structure.",
    "hierarchy": [
      "Stream Evaluator Reference"
    ],
    "pageId": 705
  },
  {
    "content": "Stream evaluators can be nested so that the output of an evaluator becomes the input for another\nevaluator.",
    "hierarchy": [
      "Stream Evaluator Reference"
    ],
    "pageId": 705
  },
  {
    "content": "Stream evaluators can be called in different contexts. For example a stream evaluator can be called on its\nown or it can be called within the context of a streaming expression.",
    "hierarchy": [
      "Stream Evaluator Reference"
    ],
    "pageId": 705
  },
  {
    "content": "The <span class=\"code\">abs</span> function will return the absolute value of the provided single parameter. The <span class=\"code\">abs</span> function will fail to\nexecute if the value is non-numeric. If a null value is found then null will be returned as the result.",
    "hierarchy": [
      "Stream Evaluator Reference",
      "abs"
    ],
    "pageId": 705
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "Stream Evaluator Reference",
      "abs",
      "abs Parameters"
    ],
    "pageId": 705
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">abs</span> evaluator. Only one parameter is\naccepted. Returns a numeric value.",
    "hierarchy": [
      "Stream Evaluator Reference",
      "abs",
      "abs Syntax"
    ],
    "pageId": 705
  },
  {
    "content": "abs(1) // 1, not really a good use case for it\nabs(-1) // 1, not really a good use case for it\nabs(add(fieldA,fieldB)) // absolute value of fieldA + fieldB\nabs(fieldA) // absolute value of fieldA",
    "hierarchy": [
      "Stream Evaluator Reference",
      "abs",
      "abs Syntax"
    ],
    "pageId": 705
  },
  {
    "content": "The <span class=\"code\">acos</span> function returns the trigonometric arccosine of a number.",
    "hierarchy": [
      "acos"
    ],
    "pageId": 706
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the arccosine of.",
    "hierarchy": [
      "acos",
      "acos Parameters"
    ],
    "pageId": 706
  },
  {
    "content": "acos(100.4)  // returns the arccosine of 100.4\nacos(fieldA) // returns the arccosine for fieldA.\nif(gt(fieldA,fieldB),sin(fieldA),sin(fieldB)) // if fieldA > fieldB then return the arccosine of\nfieldA, else return the arccosine of fieldB",
    "hierarchy": [
      "acos",
      "acos Syntax"
    ],
    "pageId": 706
  },
  {
    "content": "The <span class=\"code\">add</span> function will take 2 or more numeric values and add them together. The <span class=\"code\">add</span> function will fail to\nexecute if any of the values are non-numeric. If a null value is found then null will be returned as the result.",
    "hierarchy": [
      "add"
    ],
    "pageId": 706
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "add",
      "add Parameters"
    ],
    "pageId": 706
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "add",
      "add Parameters"
    ],
    "pageId": 706
  },
  {
    "content": "\n……",
    "hierarchy": [
      "add",
      "add Parameters"
    ],
    "pageId": 706
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "add",
      "add Parameters"
    ],
    "pageId": 706
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">add</span> evaluator. The number and\norder of these parameters do not matter and is not limited except that at least two parameters are required.\nReturns a numeric value.",
    "hierarchy": [
      "add",
      "add Syntax"
    ],
    "pageId": 706
  },
  {
    "content": "add(1,2,3,4) // 1 + 2 + 3 + 4 == 10\nadd(1,fieldA) // 1 + value of fieldA\nadd(fieldA,1.4) // value of fieldA + 1.4\nadd(fieldA,fieldB,fieldC) // value of fieldA + value of fieldB + value of fieldC\nadd(fieldA,div(fieldA,fieldB)) // value of fieldA + (value of fieldA / value of fieldB)\nadd(fieldA,if(gt(fieldA,fieldB),fieldA,fieldB)) // if fieldA > fieldB then fieldA + fieldA, else\nfieldA + fieldB",
    "hierarchy": [
      "add",
      "add Syntax"
    ],
    "pageId": 706
  },
  {
    "content": "The <span class=\"code\">analyze</span> function analyzes text using a Lucene/Solr analyzer and returns a list of tokens emitted by the\nanalyzer. The <span class=\"code\">analyze</span> function can be called on its own or within the <span class=\"link\">select</span> and <span class=\"link\">cartesianProduct</span>\nstreaming expressions.",
    "hierarchy": [
      "analyze"
    ],
    "pageId": 706
  },
  {
    "content": "Field Name | <span class=\"code\">Raw Text</span>: Either the field in a tuple or the raw text to be analyzed.",
    "hierarchy": [
      "analyze Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "Analyzer Field Name: The field name of the analyzer to use to analyze the text.",
    "hierarchy": [
      "analyze Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">analyze</span> evaluator.",
    "hierarchy": [
      "analyze Syntax"
    ],
    "pageId": 707
  },
  {
    "content": "Analyze the raw text: <span class=\"code\">analyze(\"hello world\", analyzerField)</span>",
    "hierarchy": [
      "analyze Syntax"
    ],
    "pageId": 707
  },
  {
    "content": "Analyze a text field within a <span class=\"code\">select</span> expression. This will annotate tuples with the output of the analyzer:\nselect(expr, analyze(textField, analyzerField) as outField)",
    "hierarchy": [
      "analyze Syntax"
    ],
    "pageId": 707
  },
  {
    "content": "Analyze a text field with a <span class=\"code\">cartesianProduct</span> expression. This will stream each token emitted by the\nanalyzer in its own tuple: <span class=\"code\">cartesianProduct(expr, analyze(textField, analyzer) as outField)</span>",
    "hierarchy": [
      "analyze Syntax"
    ],
    "pageId": 707
  },
  {
    "content": "The <span class=\"code\">and</span> function will return the logical AND of at least 2 boolean parameters. The function will fail to execute\nif any parameters are non-boolean or null. Returns a boolean value.",
    "hierarchy": [
      "and"
    ],
    "pageId": 707
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "and",
      "and Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "and",
      "and Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "\n……",
    "hierarchy": [
      "and",
      "and Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "and",
      "and Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">and</span> evaluator. At least two\nparameters are required, but there is no limit to how many you can use.",
    "hierarchy": [
      "and",
      "and Syntax"
    ],
    "pageId": 707
  },
  {
    "content": "and(true,fieldA) // true && fieldA\nand(fieldA,fieldB) // fieldA && fieldB\nand(or(fieldA,fieldB),fieldC) // (fieldA || fieldB) && fieldC\nand(fieldA,fieldB,fieldC,or(fieldD,fieldE),fieldF)",
    "hierarchy": [
      "and",
      "and Syntax"
    ],
    "pageId": 707
  },
  {
    "content": "The <span class=\"code\">anova</span> function calculates the <span class=\"link\">analysis of variance</span> for two or more numeric arrays.",
    "hierarchy": [
      "anova"
    ],
    "pageId": 707
  },
  {
    "content": "numeric array … (two or more)",
    "hierarchy": [
      "anova",
      "anova Parameters"
    ],
    "pageId": 707
  },
  {
    "content": "anova(numericArray1, numericArray2) // calculates ANOVA for two numeric arrays\nanova(numericArray1, numericArray2, numericArray2) // calculates ANOVA for three numeric arrays",
    "hierarchy": [
    ],
    "pageId": 708
  },
  {
    "content": "The <span class=\"ff1 fs2\">array</span> function returns an array of numerics or other objects including other arrays.",
    "hierarchy": [
      "array"
    ],
    "pageId": 708
  },
  {
    "content": "numeric | <span class=\"ff1 fs2\">array</span> …",
    "hierarchy": [
      "array",
      "array Parameters"
    ],
    "pageId": 708
  },
  {
    "content": "array(1, 2, 3)  // Array of numerics\narray(array(1,2,3), array(4,5,6)) // Array of arrays",
    "hierarchy": [
      "array",
      "array Syntax"
    ],
    "pageId": 708
  },
  {
    "content": "The <span class=\"ff1 fs2\">asin</span> function returns the trigonometric arcsine of a number.",
    "hierarchy": [
      "asin"
    ],
    "pageId": 708
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the arcsine of.",
    "hierarchy": [
      "asin",
      "asin Parameters"
    ],
    "pageId": 708
  },
  {
    "content": "asin(100.4)  // returns the sine of 100.4\nasine(fieldA) // returns the sine for fieldA.\nif(gt(fieldA,fieldB),asin(fieldA),asin(fieldB)) // if fieldA > fieldB then return the asine of\nfieldA, else return the asine of fieldB",
    "hierarchy": [
      "asin",
      "asin Syntax"
    ],
    "pageId": 708
  },
  {
    "content": "The <span class=\"ff1 fs2\">atan</span> function returns the trigonometric arctangent of a number.",
    "hierarchy": [
      "atan"
    ],
    "pageId": 708
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the arctangent of.",
    "hierarchy": [
      "atan",
      "atan Parameters"
    ],
    "pageId": 708
  },
  {
    "content": "atan(100.4)  // returns the arctangent of 100.4\natan(fieldA) // returns the arctangent for fieldA.\nif(gt(fieldA,fieldB),atan(fieldA),atan(fieldB)) // if fieldA > fieldB then return the arctanget\nof fieldA, else return the arctangent of fieldB",
    "hierarchy": [
      "atan",
      "atan Syntax"
    ],
    "pageId": 708
  },
  {
    "content": "The <span class=\"code\">betaDistribution</span> function returns a <span class=\"link\">beta probability distribution</span> based on its parameters. This\nfunction is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nkolmogorovSmirnov<span class=\"ff2 fs1 fc1\"> and </span>cumulativeProbability<span class=\"ff2 fs1 fc1\"> functions.</span>",
    "hierarchy": [
      "betaDistribution"
    ],
    "pageId": 709
  },
  {
    "content": "double: shape1",
    "hierarchy": [
      "betaDistribution",
      "betaDistribution Parameters"
    ],
    "pageId": 709
  },
  {
    "content": "double: shape2",
    "hierarchy": [
      "betaDistribution",
      "betaDistribution Parameters"
    ],
    "pageId": 709
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "betaDistribution",
      "betaDistribution Returns"
    ],
    "pageId": 709
  },
  {
    "content": "betaDistribution(1, 5)",
    "hierarchy": [
      "betaDistribution",
      "betaDistribution Syntax"
    ],
    "pageId": 709
  },
  {
    "content": "The <span class=\"code\">binomialCoefficient</span> function returns a <span class=\"link\">Binomial Coefficient</span>, the number of k-element subsets that\ncan be selected from an n-element set.",
    "hierarchy": [
      "binomialCoefficient"
    ],
    "pageId": 709
  },
  {
    "content": "integer: [n] set",
    "hierarchy": [
      "binomialCoefficient",
      "binomialCoefficient Parameters"
    ],
    "pageId": 709
  },
  {
    "content": "integer: [k] subset",
    "hierarchy": [
      "binomialCoefficient",
      "binomialCoefficient Parameters"
    ],
    "pageId": 709
  },
  {
    "content": "A long value: The number of k-element subsets that can be selected from an n-element set.",
    "hierarchy": [
      "binomialCoefficient",
      "binomialCoefficient Returns"
    ],
    "pageId": 709
  },
  {
    "content": "binomialCoefficient(8, 3) // Returns the number of 3 element subsets from an 8 element set.",
    "hierarchy": [
      "binomialCoefficient",
      "binomialCoefficient Syntax"
    ],
    "pageId": 709
  },
  {
    "content": "The <span class=\"code\">binomialDistribution</span> function returns a <span class=\"link\">binomial probability distribution</span> based on its parameters.\nThis function is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nprobability<span class=\"ff2 fs1 fc1\"> and </span>cumulativeProbability<span class=\"ff2 fs1 fc1\"> functions.</span>",
    "hierarchy": [
      "binomialDistribution"
    ],
    "pageId": 709
  },
  {
    "content": "integer: number of trials",
    "hierarchy": [
      "binomialDistribution",
      "binomialDistribution Parameters"
    ],
    "pageId": 709
  },
  {
    "content": "double: probability of success",
    "hierarchy": [
      "binomialDistribution",
      "binomialDistribution Parameters"
    ],
    "pageId": 709
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "binomialDistribution Returns"
    ],
    "pageId": 710
  },
  {
    "content": "binomialDistribution(1000, .5)",
    "hierarchy": [
      "binomialDistribution Syntax"
    ],
    "pageId": 710
  },
  {
    "content": "The <span class=\"code\">cbrt</span> function returns the trigonometric cube root of a number.",
    "hierarchy": [
      "cbrt"
    ],
    "pageId": 710
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the cube root of.",
    "hierarchy": [
      "cbrt",
      "cbrt Parameters"
    ],
    "pageId": 710
  },
  {
    "content": "cbrt(100.4)  // returns the square root of 100.4\ncbrt(fieldA) // returns the square root for fieldA.\nif(gt(fieldA,fieldB),cbrt(fieldA),cbrt(fieldB)) // if fieldA > fieldB then return the cbrt of\nfieldA, else return the cbrt of fieldB",
    "hierarchy": [
      "cbrt",
      "cbrt Syntax"
    ],
    "pageId": 710
  },
  {
    "content": "The <span class=\"code\">ceil</span> function rounds a decimal value to the next highest whole number.",
    "hierarchy": [
      "ceil"
    ],
    "pageId": 710
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The decimal to round up.",
    "hierarchy": [
      "ceil",
      "ceil Parameters"
    ],
    "pageId": 710
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">ceil</span> evaluator.",
    "hierarchy": [
      "ceil",
      "ceil Syntax"
    ],
    "pageId": 710
  },
  {
    "content": "ceil(100.4) // returns 101.\nceil(fieldA) // returns the next highest whole number for fieldA.\nif(gt(fieldA,fieldB),ceil(fieldA),ceil(fieldB)) // if fieldA > fieldB then return the ceil of\nfieldA, else return the ceil of fieldB.",
    "hierarchy": [
      "ceil",
      "ceil Syntax"
    ],
    "pageId": 710
  },
  {
    "content": "The <span class=\"code\">col</span> function returns a numeric array from a list of Tuples. The <span class=\"code\">col</span> function is used to create numeric\narrays from stream sources.",
    "hierarchy": [
      "col"
    ],
    "pageId": 710
  },
  {
    "content": "\nlist of Tuples",
    "hierarchy": [
      "col",
      "col Parameters"
    ],
    "pageId": 710
  },
  {
    "content": "field name: The field to create the array from.",
    "hierarchy": [
      "col",
      "col Parameters"
    ],
    "pageId": 710
  },
  {
    "content": "col(tupleList, fieldName)",
    "hierarchy": [
      "col Syntax"
    ],
    "pageId": 711
  },
  {
    "content": "The <span class=\"ff2 fs2\">colAt</span> function returns the column of a matrix at a specific index as a numeric array.",
    "hierarchy": [
      "colAt"
    ],
    "pageId": 711
  },
  {
    "content": "matrix: the matrix to operate on",
    "hierarchy": [
      "colAt",
      "colAt Parameters"
    ],
    "pageId": 711
  },
  {
    "content": "integer: the index of the column to return",
    "hierarchy": [
      "colAt",
      "colAt Parameters"
    ],
    "pageId": 711
  },
  {
    "content": "colAt(matrix, 10)",
    "hierarchy": [
      "colAt",
      "colAt Syntax"
    ],
    "pageId": 711
  },
  {
    "content": "numeric array : the column of the matrix",
    "hierarchy": [
      "colAt",
      "colAt Returns"
    ],
    "pageId": 711
  },
  {
    "content": "The <span class=\"ff2 fs2\">columnCount</span> function returns the number of columns in a <span class=\"ff2 fs2\">matrix</span>.",
    "hierarchy": [
      "columnCount"
    ],
    "pageId": 711
  },
  {
    "content": "matrix: the matrix to operate on",
    "hierarchy": [
      "columnCount",
      "columnCount Parameters"
    ],
    "pageId": 711
  },
  {
    "content": "columnCount(matrix)",
    "hierarchy": [
      "columnCount",
      "columnCount Syntax"
    ],
    "pageId": 711
  },
  {
    "content": "integer : number columns in the matrix.",
    "hierarchy": [
      "columnCount",
      "columnCount Returns"
    ],
    "pageId": 711
  },
  {
    "content": "The <span class=\"ff2 fs2\">constantDistribution</span> function returns a constant probability distribution based on its parameter. This\nfunction is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span> and\ncumulativeProbability<span class=\"code\"> functions.</span>",
    "hierarchy": [
      "constantDistribution"
    ],
    "pageId": 711
  },
  {
    "content": "When sampled the constant distribution always returns its constant value.",
    "hierarchy": [
      "constantDistribution"
    ],
    "pageId": 711
  },
  {
    "content": "double: constant value",
    "hierarchy": [
      "constantDistribution",
      "constantDistribution Parameters"
    ],
    "pageId": 711
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "constantDistribution Returns"
    ],
    "pageId": 712
  },
  {
    "content": "constantDistribution(constantValue)",
    "hierarchy": [
      "constantDistribution Syntax"
    ],
    "pageId": 712
  },
  {
    "content": "The <span class=\"code\">conv</span> function returns the <span class=\"link\">convolution</span> of two numeric arrays.",
    "hierarchy": [
      "conv"
    ],
    "pageId": 712
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "conv",
      "conv Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "conv",
      "conv Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "conv(numericArray1, numericArray2)",
    "hierarchy": [
      "conv",
      "conv Syntax"
    ],
    "pageId": 712
  },
  {
    "content": "The <span class=\"code\">copyOf</span> function creates a copy of a numeric array.",
    "hierarchy": [
      "copyOf"
    ],
    "pageId": 712
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "copyOf",
      "copyOf Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "length: The length of the copied array. The returned array will be right padded with zeros if the length\nparameter exceeds the size of the original array.",
    "hierarchy": [
      "copyOf",
      "copyOf Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "copyOf(numericArray, length)",
    "hierarchy": [
      "copyOf",
      "copyOf Syntax"
    ],
    "pageId": 712
  },
  {
    "content": "The <span class=\"code\">copyOfRange</span> function creates a copy of a range of a numeric array.",
    "hierarchy": [
      "copyOfRange"
    ],
    "pageId": 712
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "copyOfRange",
      "copyOfRange Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "\nstart index",
    "hierarchy": [
      "copyOfRange",
      "copyOfRange Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "\nend index",
    "hierarchy": [
      "copyOfRange",
      "copyOfRange Parameters"
    ],
    "pageId": 712
  },
  {
    "content": "copyOfRange(numericArray, startIndex, endIndex)",
    "hierarchy": [
    ],
    "pageId": 713
  },
  {
    "content": "The <span class=\"ff1 fs2\">corr</span> function returns the correlation of two numeric arrays or the correlation matrix for a matrix.",
    "hierarchy": [
      "corr"
    ],
    "pageId": 713
  },
  {
    "content": "The <span class=\"ff1 fs2\">corr</span> function support Pearson's, Kendall’s and Spearman’s correlations.",
    "hierarchy": [
      "corr"
    ],
    "pageId": 713
  },
  {
    "content": "numeric array: The first numeric array",
    "hierarchy": [
      "corr",
      "corr Positional Parameters"
    ],
    "pageId": 713
  },
  {
    "content": "numeric array: The second numeric array",
    "hierarchy": [
      "corr",
      "corr Positional Parameters"
    ],
    "pageId": 713
  },
  {
    "content": "OR",
    "hierarchy": [
      "corr",
      "corr Positional Parameters"
    ],
    "pageId": 713
  },
  {
    "content": "matrix: The matrix to compute the correlation matrix for. Note that correlation is computed between the\ncolumns<span class=\"code\"> in the matrix.</span>",
    "hierarchy": [
      "corr",
      "corr Positional Parameters"
    ],
    "pageId": 713
  },
  {
    "content": "type: (Optional) The type of correlation. Possible values are <span class=\"ff1 fs2\">pearsons</span>, <span class=\"ff1 fs2\">kendalls</span>, or <span class=\"ff1 fs2\">spearmans</span>. The\ndefault is <span class=\"ff1 fs2\">pearsons</span>.",
    "hierarchy": [
      "corr",
      "corr Named Parameters"
    ],
    "pageId": 713
  },
  {
    "content": "corr(numericArray1, numericArray2) // Compute the Pearsons correlation for two numeric arrays\ncorr(numericArray1, numericArray2, type=kendalls) // Compute the Kendalls correlation for two\nnumeric arrays\ncorr(matrix) // Compute the Pearsons correlation matrix for a matrix\ncorr(matrix, type=spearmans) // Compute the Spearmans correlation matrix for a matrix",
    "hierarchy": [
      "corr",
      "corr Syntax"
    ],
    "pageId": 713
  },
  {
    "content": "number | matrix: Either the correlation or correlation matrix.",
    "hierarchy": [
      "corr",
      "corr Returns"
    ],
    "pageId": 713
  },
  {
    "content": "The <span class=\"ff1 fs2\">cos</span> function returns the trigonometric cosine of a number.",
    "hierarchy": [
      "cos"
    ],
    "pageId": 713
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the hyperbolic cosine of.",
    "hierarchy": [
      "cos",
      "cos Parameters"
    ],
    "pageId": 713
  },
  {
    "content": "cos(100.4)  // returns the arccosine of 100.4\ncos(fieldA) // returns the arccosine for fieldA.\nif(gt(fieldA,fieldB),cos(fieldA),cos(fieldB)) // if fieldA > fieldB then return the arccosine of\nfieldA, else return the cosine of fieldB",
    "hierarchy": [
      "cos",
      "cos Syntax"
    ],
    "pageId": 713
  },
  {
    "content": "The <span class=\"code\">cosineSimilarity</span> function returns the <span class=\"link\">cosine similarity</span> of two numeric arrays.",
    "hierarchy": [
      "cosineSimilarity"
    ],
    "pageId": 714
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "cosineSimilarity",
      "cosineSimilarity Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "cosineSimilarity",
      "cosineSimilarity Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "A numeric.",
    "hierarchy": [
      "cosineSimilarity",
      "cosineSimilarity Returns"
    ],
    "pageId": 714
  },
  {
    "content": "cosineSimilarity(numericArray, numericArray)",
    "hierarchy": [
      "cosineSimilarity",
      "cosineSimilarity Syntax"
    ],
    "pageId": 714
  },
  {
    "content": "The <span class=\"code\">cov</span> function returns the covariance of two numeric array or the covariance matrix for matrix.",
    "hierarchy": [
      "cov"
    ],
    "pageId": 714
  },
  {
    "content": "numeric array: The first numeric array",
    "hierarchy": [
      "cov",
      "cov Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "numeric array: The second numeric array",
    "hierarchy": [
      "cov",
      "cov Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "OR",
    "hierarchy": [
      "cov",
      "cov Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "matrix: The matrix to compute the covariance matrix from. Note that covariance is computed between\nthe <span class=\"code\">columns</span> in the matrix.",
    "hierarchy": [
      "cov",
      "cov Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "cov(numericArray, numericArray) // Computes the covariance of a two numeric arrays\ncov(matrix) // Computes the covariance matrix for the matrix.",
    "hierarchy": [
      "cov",
      "cov Syntax"
    ],
    "pageId": 714
  },
  {
    "content": "number | matrix: Either the covariance or covariance matrix.",
    "hierarchy": [
      "cov",
      "cov Returns"
    ],
    "pageId": 714
  },
  {
    "content": "The <span class=\"code\">cumulativeProbability</span> function returns the cumulative probability of a random variable within a\nprobability distribution. The cumulative probability is the total probability of all random variables less then\nor equal to a random variable.",
    "hierarchy": [
      "cumulativeProbability"
    ],
    "pageId": 714
  },
  {
    "content": "\nprobability distribution",
    "hierarchy": [
      "cumulativeProbability",
      "cumulativeProbability Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "number: Value to compute the probability for.",
    "hierarchy": [
      "cumulativeProbability",
      "cumulativeProbability Parameters"
    ],
    "pageId": 714
  },
  {
    "content": "A double: the cumulative probability.",
    "hierarchy": [
      "cumulativeProbability Returns"
    ],
    "pageId": 715
  },
  {
    "content": "cumulativeProbability(normalDistribution(500, 25), 502) // Returns the cumulative probability of\nthe random sample 502 in a normal distribution with a mean of 500 and standard deviation of 25.",
    "hierarchy": [
      "cumulativeProbability Syntax"
    ],
    "pageId": 715
  },
  {
    "content": "The <span class=\"code\">derivative</span> function returns the <span class=\"link\">derivative</span> of a function. The derivative function can compute the\nderivative of the <span class=\"link\">spline</span> function and the <span class=\"link\">loess</span> function. The derivative can also take the derivative of a\nderivative.",
    "hierarchy": [
      "derivative"
    ],
    "pageId": 715
  },
  {
    "content": "spline | <span class=\"code\">loess</span> | <span class=\"code\">akima</span> | <span class=\"code\">lerp</span> | <span class=\"code\">derivative</span>: The functions to compute the derivative for.",
    "hierarchy": [
      "derivative",
      "derivative Parameters"
    ],
    "pageId": 715
  },
  {
    "content": "derivative(spline(...))\nderivative(loess(...))\nderivative(derivative(...))",
    "hierarchy": [
      "derivative",
      "derivative Syntax"
    ],
    "pageId": 715
  },
  {
    "content": "function: The function can be treated as both a <span class=\"code\">numeric array</span> and <span class=\"code\">function</span>.",
    "hierarchy": [
      "derivative",
      "derivative Returns"
    ],
    "pageId": 715
  },
  {
    "content": "The <span class=\"code\">describe</span> function returns a tuple containing the descriptive statistics for an array.",
    "hierarchy": [
      "describe"
    ],
    "pageId": 715
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "describe",
      "describe Parameters"
    ],
    "pageId": 715
  },
  {
    "content": "describe(numericArray)",
    "hierarchy": [
      "describe",
      "describe Syntax"
    ],
    "pageId": 715
  },
  {
    "content": "The <span class=\"code\">diff</span> functions performs <span class=\"link\">time series differencing</span>.",
    "hierarchy": [
      "diff"
    ],
    "pageId": 715
  },
  {
    "content": "Time series differencing is often used to make a time series stationary before further analysis.",
    "hierarchy": [
      "diff"
    ],
    "pageId": 715
  },
  {
    "content": "numeric array: The time series data.",
    "hierarchy": [
      "diff",
      "diff Parameters"
    ],
    "pageId": 715
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">integer</span><span class=\"ls1\">: (Optional) The lag. Defaults to 1.</span>",
    "hierarchy": [
    ],
    "pageId": 716
  },
  {
    "content": "diff(numericArray1) // Perform time series differencing with a default lag of 1.\ndiff(numericArray1, 30) // Perform time series differencing with a lag of 30.",
    "hierarchy": [
      "diff Syntax"
    ],
    "pageId": 716
  },
  {
    "content": "numeric array: The differenced time series data. The size of the array will be equal to (original array size -\nlag).",
    "hierarchy": [
      "diff Returns"
    ],
    "pageId": 716
  },
  {
    "content": "The <span class=\"ff2 fs1\">distance</span> function computes the distance of two numeric arrays or the distance matrix for a matrix.",
    "hierarchy": [
      "distance"
    ],
    "pageId": 716
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">numeric array</span><span class=\"ls1\">: The first numeric array</span>",
    "hierarchy": [
      "distance",
      "distance Positional Parameters"
    ],
    "pageId": 716
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">numeric array</span><span class=\"ls1\">: The second numeric array</span>",
    "hierarchy": [
      "distance",
      "distance Positional Parameters"
    ],
    "pageId": 716
  },
  {
    "content": "OR",
    "hierarchy": [
      "distance",
      "distance Positional Parameters"
    ],
    "pageId": 716
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">matrix</span><span class=\"ls1\">: The matrix to compute the distance matrix for. Note that distance is computed between the</span>\ncolumns<span class=\"ff1 fs0\"> in the matrix.</span>",
    "hierarchy": [
      "distance",
      "distance Positional Parameters"
    ],
    "pageId": 716
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">type</span><span class=\"ls1\">: (Optional) The distance type. Possible values are <span class=\"ff2 fs1\">euclidean</span>, <span class=\"ff2 fs1\">manhattan</span>, <span class=\"ff2 fs1\">canberra</span>, or <span class=\"ff2 fs1\">earthMovers</span>.</span>\nThe default is <span class=\"ff2 fs1\">euclidean</span>.",
    "hierarchy": [
      "distance",
      "distance Named Parameters"
    ],
    "pageId": 716
  },
  {
    "content": "distance(numericArray1, numuericArray2) // Computes the euclidean distance for two numeric\narrays.\ndistance(numericArray1, numuericArray2, type=manhattan) // Computes the manhattan distance for\ntwo numeric arrays.\ndistance(matrix) // Computes the euclidean distance matrix for a matrix.\ndistance(matrix, type=canberra) // Computes the canberra distance matrix for a matrix.",
    "hierarchy": [
      "distance",
      "distance Syntax"
    ],
    "pageId": 716
  },
  {
    "content": "number | matrix: Either the distance or distance matrix.",
    "hierarchy": [
      "distance",
      "distance Returns"
    ],
    "pageId": 716
  },
  {
    "content": "The <span class=\"ff2 fs1\">div</span> function will take two numeric values and divide them. The function will fail to execute if any of the\nvalues are non-numeric or null, or the 2nd value is 0. Returns a numeric value.",
    "hierarchy": [
      "div"
    ],
    "pageId": 716
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "div Parameters"
    ],
    "pageId": 717
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "div Parameters"
    ],
    "pageId": 717
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">div</span> evaluator. The first value will be\ndivided by the second and as such the second cannot be 0.",
    "hierarchy": [
      "div Syntax"
    ],
    "pageId": 717
  },
  {
    "content": "div(1,2) // 1 / 2\ndiv(1,fieldA) // 1 / fieldA\ndiv(fieldA,1.4) // fieldA / 1.4\ndiv(fieldA,add(fieldA,fieldB)) // fieldA / (fieldA + fieldB)",
    "hierarchy": [
      "div Syntax"
    ],
    "pageId": 717
  },
  {
    "content": "The <span class=\"code\">dotProduct</span> function returns the <span class=\"link\">dotproduct</span> of a numeric array.",
    "hierarchy": [
      "dotProduct"
    ],
    "pageId": 717
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "dotProduct",
      "dotProduct Parameters"
    ],
    "pageId": 717
  },
  {
    "content": "A number.",
    "hierarchy": [
      "dotProduct",
      "dotProduct Returns"
    ],
    "pageId": 717
  },
  {
    "content": "dotProduct(numericArray)",
    "hierarchy": [
      "dotProduct",
      "dotProduct Syntax"
    ],
    "pageId": 717
  },
  {
    "content": "The <span class=\"code\">ebeAdd</span> function performs an element-by-element addition of two numeric arrays.",
    "hierarchy": [
      "ebeAdd"
    ],
    "pageId": 717
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeAdd",
      "ebeAdd Parameters"
    ],
    "pageId": 717
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeAdd",
      "ebeAdd Parameters"
    ],
    "pageId": 717
  },
  {
    "content": "A numeric array.",
    "hierarchy": [
      "ebeAdd",
      "ebeAdd Returns"
    ],
    "pageId": 717
  },
  {
    "content": "ebeAdd(numericArray, numericArray)",
    "hierarchy": [
      "ebeAdd",
      "ebeAdd Syntax"
    ],
    "pageId": 717
  },
  {
    "content": "The <span class=\"code\">ebeDivide</span> function performs an element-by-element division of two numeric arrays.",
    "hierarchy": [
      "ebeDivide"
    ],
    "pageId": 718
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeDivide",
      "ebeDivide Parameters"
    ],
    "pageId": 718
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeDivide",
      "ebeDivide Parameters"
    ],
    "pageId": 718
  },
  {
    "content": "A numeric array.",
    "hierarchy": [
      "ebeDivide",
      "ebeDivide Returns"
    ],
    "pageId": 718
  },
  {
    "content": "ebeDivide(numericArray, numericArray)",
    "hierarchy": [
      "ebeDivide",
      "ebeDivide Syntax"
    ],
    "pageId": 718
  },
  {
    "content": "The <span class=\"code\">ebeMultiply</span> function performs an element-by-element multiplication of two numeric arrays.",
    "hierarchy": [
      "ebeMultiple"
    ],
    "pageId": 718
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeMultiple",
      "ebeMultiply Parameters"
    ],
    "pageId": 718
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeMultiple",
      "ebeMultiply Parameters"
    ],
    "pageId": 718
  },
  {
    "content": "A numeric array.",
    "hierarchy": [
      "ebeMultiple",
      "ebeMultiply Returns"
    ],
    "pageId": 718
  },
  {
    "content": "ebeMultiply(numericArray, numericArray)",
    "hierarchy": [
      "ebeMultiple",
      "ebeMultiply Syntax"
    ],
    "pageId": 718
  },
  {
    "content": "The <span class=\"code\">ebeSubtract</span> function performs an element-by-element subtraction of two numeric arrays.",
    "hierarchy": [
      "ebeSubtract"
    ],
    "pageId": 718
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeSubtract",
      "ebeSubtract Parameters"
    ],
    "pageId": 718
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "ebeSubtract",
      "ebeSubtract Parameters"
    ],
    "pageId": 718
  },
  {
    "content": "A numeric array.",
    "hierarchy": [
      "ebeSubtract",
      "ebeSubtract Returns"
    ],
    "pageId": 718
  },
  {
    "content": "ebeSubtract(numericArray, numericArray)",
    "hierarchy": [
    ],
    "pageId": 719
  },
  {
    "content": "The <span class=\"ff1 fs2\">empiricalDistribution</span> function returns <span class=\"link\">empirical distribution function</span>, a continuous probability\ndistribution function based on an actual data set. This function is part of the probability distribution\nframework and is designed to work with the <span class=\"link\">sample</span>, <span class=\"link\">kolmogorovSmirnov</span> and <span class=\"link\">cumulativeProbability</span>\nfunctions.",
    "hierarchy": [
      "empiricalDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "This function is designed to work with continuous data. To build a distribution from a discrete data set use\nthe <span class=\"link\">enumeratedDistribution</span>.",
    "hierarchy": [
      "empiricalDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "numeric array: empirical observations",
    "hierarchy": [
      "empiricalDistribution",
      "empiricalDistribution Parameters"
    ],
    "pageId": 719
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "empiricalDistribution",
      "empiricalDistribution Returns"
    ],
    "pageId": 719
  },
  {
    "content": "empiricalDistribution(numericArray)",
    "hierarchy": [
      "empiricalDistribution",
      "empiricalDistribution Syntax"
    ],
    "pageId": 719
  },
  {
    "content": "The <span class=\"ff1 fs2\">enumeratedDistribution</span> function returns a discrete probability distribution function based on an\nactual data set or a pre-defined set of data and probabilities. This function is part of the probability\ndistribution framework and is designed to work with the <span class=\"link\">sample</span>, <span class=\"link\">probability</span> and <span class=\"link\">cumulativeProbability</span>\nfunctions.",
    "hierarchy": [
      "enumeratedDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "The enumeratedDistribution can be called in two different scenarios:",
    "hierarchy": [
      "enumeratedDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "1) Single array of discrete values. This works like an empirical distribution for discrete data.",
    "hierarchy": [
      "enumeratedDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "2) An array of singleton discrete values and an array of double values representing the probabilities of the\ndiscrete values.",
    "hierarchy": [
      "enumeratedDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "This function is designed to work with discrete data. To build a distribution from a continuous data set use\nthe <span class=\"link\">empiricalDistribution</span>.",
    "hierarchy": [
      "enumeratedDistribution"
    ],
    "pageId": 719
  },
  {
    "content": "integer array: discrete observations or singleton discrete values.",
    "hierarchy": [
      "enumeratedDistribution",
      "enumeratedDistribution Parameters"
    ],
    "pageId": 719
  },
  {
    "content": "double array: (Optional) values representing the probabilities of the singleton discrete values.",
    "hierarchy": [
      "enumeratedDistribution",
      "enumeratedDistribution Parameters"
    ],
    "pageId": 719
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "enumeratedDistribution",
      "enumeratedDistribution Returns"
    ],
    "pageId": 719
  },
  {
    "content": "enumeratedDistribution(integerArray) // This creates an enumerated distribution from the\nobservations in the numeric array.\nenumeratedDistribution(array(1,2,3,4), array(.25,.25,.25,.25)) // This creates an enumerated\ndistribution with four discrete values (1,2,3,4) each with a probability of .25.",
    "hierarchy": [
      "enumeratedDistribution Syntax"
    ],
    "pageId": 720
  },
  {
    "content": "The <span class=\"ff2 fs2\">eor</span> function will return the logical exclusive or of at least two boolean parameters. The function will fail\nto execute if any parameters are non-boolean or null. Returns a boolean value.",
    "hierarchy": [
      "eor"
    ],
    "pageId": 720
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "eor",
      "eor Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "eor",
      "eor Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "\n……",
    "hierarchy": [
      "eor",
      "eor Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "eor",
      "eor Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"ff2 fs2\">eor</span> evaluator. At least two\nparameters are required, but there is no limit to how many you can use.",
    "hierarchy": [
      "eor",
      "eor Syntax"
    ],
    "pageId": 720
  },
  {
    "content": "eor(true,fieldA) // true iff fieldA is false\neor(fieldA,fieldB) // true iff either fieldA or fieldB is true but not both\neor(eq(fieldA,fieldB),eq(fieldC,fieldD)) // true iff either fieldA == fieldB or fieldC == fieldD\nbut not both",
    "hierarchy": [
      "eor",
      "eor Syntax"
    ],
    "pageId": 720
  },
  {
    "content": "The <span class=\"ff2 fs2\">eq</span> function will return whether all the parameters are equal, as per Java's standard <span class=\"ff2 fs2\">equals(…)</span> function.\nThe function accepts parameters of any type, but will fail to execute if all the parameters are not of the same\ntype. That is, all are Boolean, all are String, or all are Numeric. If any any parameters are null and there is at\nleast one parameter that is not null then false will be returned. Returns a boolean value.",
    "hierarchy": [
      "eq"
    ],
    "pageId": 720
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "eq",
      "eq Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "eq",
      "eq Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "\n……",
    "hierarchy": [
      "eq",
      "eq Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "eq",
      "eq Parameters"
    ],
    "pageId": 720
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"ff2 fs2\">eq</span> evaluator.",
    "hierarchy": [
      "eq",
      "eq Syntax"
    ],
    "pageId": 720
  },
  {
    "content": "eq(1,2) // 1 == 2\neq(1,fieldA) // 1 == fieldA\neq(fieldA,val(foo)) fieldA == \"foo\"\neq(add(fieldA,fieldB),6) // fieldA + fieldB == 6",
    "hierarchy": [
    ],
    "pageId": 721
  },
  {
    "content": "The <span class=\"ff1 fs2\">expMovingAverage</span> function computes an <span class=\"link\">exponential moving average</span> for a numeric array.",
    "hierarchy": [
      "expMovingAge"
    ],
    "pageId": 721
  },
  {
    "content": "numeric array: The array to compute the exponential moving average from.",
    "hierarchy": [
      "expMovingAge",
      "expMovingAge Parameters"
    ],
    "pageId": 721
  },
  {
    "content": "integer: window size",
    "hierarchy": [
      "expMovingAge",
      "expMovingAge Parameters"
    ],
    "pageId": 721
  },
  {
    "content": "A numeric array. The first element of the returned array will start from the windowSize-1 index of the\noriginal array.",
    "hierarchy": [
      "expMovingAge",
      "expMovingAvg Returns"
    ],
    "pageId": 721
  },
  {
    "content": "expMovingAvg(numericArray, 5) //Computes an exponential moving average with a window size of 5.",
    "hierarchy": [
      "expMovingAge",
      "expMovingAvg Syntax"
    ],
    "pageId": 721
  },
  {
    "content": "The <span class=\"ff1 fs2\">factorial</span> function returns the <span class=\"link\">factorial</span> of its parameter.",
    "hierarchy": [
      "factorial"
    ],
    "pageId": 721
  },
  {
    "content": "integer: The value to compute the factorial for. The largest supported value of this parameter is 170.",
    "hierarchy": [
      "factorial",
      "factorial Parameters"
    ],
    "pageId": 721
  },
  {
    "content": "A double.",
    "hierarchy": [
      "factorial",
      "factorial Returns"
    ],
    "pageId": 721
  },
  {
    "content": "factorial(100) //Computes the factorial of 100",
    "hierarchy": [
      "factorial",
      "factorial Syntax"
    ],
    "pageId": 721
  },
  {
    "content": "The <span class=\"ff1 fs2\">finddelay</span> function performs a cross-correlation between two numeric arrays and returns the delay.",
    "hierarchy": [
      "finddelay"
    ],
    "pageId": 721
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "finddelay",
      "finddelay Parameters"
    ],
    "pageId": 721
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "finddelay",
      "finddelay Parameters"
    ],
    "pageId": 721
  },
  {
    "content": "finddelay(numericArray1, numericArray2)",
    "hierarchy": [
      "finddelay Syntax"
    ],
    "pageId": 722
  },
  {
    "content": "The <span class=\"ff2 fs2\">floor</span> function rounds a decimal value to the next lowest whole number.",
    "hierarchy": [
      "floor"
    ],
    "pageId": 722
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The decimal to round down.",
    "hierarchy": [
      "floor",
      "floor Parameters"
    ],
    "pageId": 722
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"ff2 fs2\">floor</span> evaluator.",
    "hierarchy": [
      "floor",
      "floor Syntax"
    ],
    "pageId": 722
  },
  {
    "content": "floor(100.4) // returns 100.\nceil(fieldA) // returns the next lowestt whole number for fieldA.\nif(gt(fieldA,fieldB),floor(fieldA),floor(fieldB)) // if fieldA > fieldB then return the floor of\nfieldA, else return the floor of fieldB.",
    "hierarchy": [
      "floor",
      "floor Syntax"
    ],
    "pageId": 722
  },
  {
    "content": "The <span class=\"ff2 fs2\">freqTable</span> function returns a <span class=\"link\">frequency distribution</span> from an array of discrete values.",
    "hierarchy": [
      "freqTable"
    ],
    "pageId": 722
  },
  {
    "content": "This function is designed to work with discrete values. To work with continuous data use the <span class=\"link\">hist</span> function.",
    "hierarchy": [
      "freqTable"
    ],
    "pageId": 722
  },
  {
    "content": "integer array: The values to build the frequency distribution from.",
    "hierarchy": [
      "freqTable",
      "freqTable Parameters"
    ],
    "pageId": 722
  },
  {
    "content": "A list of tuples containing the frequency information for each discrete value.",
    "hierarchy": [
      "freqTable",
      "freqTable Returns"
    ],
    "pageId": 722
  },
  {
    "content": "freqTable(integerArray)",
    "hierarchy": [
      "freqTable",
      "freqTable Syntax"
    ],
    "pageId": 722
  },
  {
    "content": "The <span class=\"ff2 fs2\">gammaDistribution</span> function returns a <span class=\"link\">gamma probability distribution</span> based on its parameters. This\nfunction is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nkolmogorovSmirnov<span class=\"code\"> and </span>cumulativeProbability<span class=\"code\"> functions.</span>",
    "hierarchy": [
      "gammaDistribution"
    ],
    "pageId": 722
  },
  {
    "content": "double: shape",
    "hierarchy": [
      "gammaDistribution",
      "gammaDistribution Parameters"
    ],
    "pageId": 722
  },
  {
    "content": "double: scale",
    "hierarchy": [
      "gammaDistribution",
      "gammaDistribution Parameters"
    ],
    "pageId": 722
  },
  {
    "content": "A probability distribution function,",
    "hierarchy": [
      "gammaDistribution Returns"
    ],
    "pageId": 723
  },
  {
    "content": "gammaDistribution(1, 10)",
    "hierarchy": [
      "gammaDistribution Syntax"
    ],
    "pageId": 723
  },
  {
    "content": "The <span class=\"code\">geometricDistribution</span> function returns a <span class=\"link\">geometric probability distribution</span> based on its parameters.\nThis function is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nprobability<span class=\"fc1\"> and </span>cumulativeProbability<span class=\"fc1\"> functions.</span>",
    "hierarchy": [
      "geometricDistribution"
    ],
    "pageId": 723
  },
  {
    "content": "double: probability",
    "hierarchy": [
      "geometricDistribution",
      "geometricDistribution Parameters"
    ],
    "pageId": 723
  },
  {
    "content": "geometricDistribution(.5) // Creates a geometric distribution with probability of .5",
    "hierarchy": [
      "geometricDistribution",
      "geometricDistribution Syntax"
    ],
    "pageId": 723
  },
  {
    "content": "A probability distribution function",
    "hierarchy": [
      "geometricDistribution",
      "geometricDistribution Returns"
    ],
    "pageId": 723
  },
  {
    "content": "The <span class=\"code\">getAttribute</span> function returns an attribute from a <span class=\"code\">matrix</span> by its key. Any function that returns a <span class=\"code\">matrix</span>\ncan also set attributes on the <span class=\"code\">matrix</span> with additional information. The <span class=\"code\">setAttribute</span> function can also be\nused to set attributes on a <span class=\"code\">matrix</span>. The key to an attribute is always a string. The value of attribute can be\nany object including numerics, arrays, maps, matrixes etc…",
    "hierarchy": [
      "getAttribute"
    ],
    "pageId": 723
  },
  {
    "content": "matrix : The matrix to set the attribute on",
    "hierarchy": [
      "getAttribute",
      "getAttribute Parameters"
    ],
    "pageId": 723
  },
  {
    "content": "string : The key for the attribute",
    "hierarchy": [
      "getAttribute",
      "getAttribute Parameters"
    ],
    "pageId": 723
  },
  {
    "content": "getAttribute(matrix, key)",
    "hierarchy": [
      "getAttribute",
      "getAttribute Syntax"
    ],
    "pageId": 723
  },
  {
    "content": "object : any object",
    "hierarchy": [
      "getAttribute",
      "getAttribute Returns"
    ],
    "pageId": 723
  },
  {
    "content": "The <span class=\"code\">getAttributes</span> function returns the attribute map from matrix. See the <span class=\"code\">getAttribute</span> function for more",
    "hierarchy": [
      "getAttributes"
    ],
    "pageId": 723
  },
  {
    "content": "details on attributes.",
    "hierarchy": [
    ],
    "pageId": 724
  },
  {
    "content": "matrix : The matrix to retrieve the attribute map from.",
    "hierarchy": [
      "getAttributes Parameters"
    ],
    "pageId": 724
  },
  {
    "content": "getAttributes(matrix)",
    "hierarchy": [
      "getAttributes Syntax:"
    ],
    "pageId": 724
  },
  {
    "content": "map : The map of attributes.",
    "hierarchy": [
      "getAttributes Returns"
    ],
    "pageId": 724
  },
  {
    "content": "The <span class=\"code\">getColumnLabels</span> function returns the columns labels of a matrix. The column labels can be optionally\nset by any function that returns a matrix. The column labels can also be set via the <span class=\"code\">setColumnLabels</span>\nfunction.",
    "hierarchy": [
      "getColumnLabels"
    ],
    "pageId": 724
  },
  {
    "content": "matrix: The matrix to return the column labels of.",
    "hierarchy": [
      "getColumnLabels",
      "getColumnLabels Parameters"
    ],
    "pageId": 724
  },
  {
    "content": "getColumnLabels(matrix)",
    "hierarchy": [
      "getColumnLabels",
      "getColumnLabels Syntax"
    ],
    "pageId": 724
  },
  {
    "content": "string array : The labels for each column in the matrix",
    "hierarchy": [
      "getColumnLabels",
      "getColumnLabels Returns"
    ],
    "pageId": 724
  },
  {
    "content": "The <span class=\"code\">getRowLabels</span> function returns the row labels of a matrix. The row labels can be optionally set by any\nfunction that returns a matrix. The row labels can also be set via the <span class=\"code\">setRowLabels</span> function.",
    "hierarchy": [
      "getRowLabels"
    ],
    "pageId": 724
  },
  {
    "content": "matrix: The matrix to return the row labels from.",
    "hierarchy": [
      "getRowLabels",
      "getRowLabels Parameters"
    ],
    "pageId": 724
  },
  {
    "content": "getRowLabels(matrix)",
    "hierarchy": [
      "getRowLabels",
      "getRowLabels Syntax"
    ],
    "pageId": 724
  },
  {
    "content": "string array : The labels for each row in the matrix",
    "hierarchy": [
      "getRowLabels",
      "getRowLabels Returns"
    ],
    "pageId": 724
  },
  {
    "content": "The <span class=\"code\">grandSum</span> function sums all the values in a matrix.",
    "hierarchy": [
      "grandSum"
    ],
    "pageId": 724
  },
  {
    "content": "matrix: The matrix to operate on.",
    "hierarchy": [
      "grandSum Parameters"
    ],
    "pageId": 725
  },
  {
    "content": "grandSum(matrix)",
    "hierarchy": [
      "grandSum Syntax"
    ],
    "pageId": 725
  },
  {
    "content": "number: the sum of all the values in the matrix.",
    "hierarchy": [
      "grandSum Returns"
    ],
    "pageId": 725
  },
  {
    "content": "The <span class=\"code\">gt</span> function will return whether the first parameter is greater than the second parameter. The function\naccepts numeric or string parameters, but will fail to execute if all the parameters are not of the same type.\nThat is, all are String or all are Numeric. If any any parameters are null then an error will be raised. Returns a\nboolean value.",
    "hierarchy": [
      "gt"
    ],
    "pageId": 725
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "gt",
      "gt Parameters"
    ],
    "pageId": 725
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "gt",
      "gt Parameters"
    ],
    "pageId": 725
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">gt</span> evaluator.",
    "hierarchy": [
      "gt",
      "gt Syntax"
    ],
    "pageId": 725
  },
  {
    "content": "gt(1,2) // 1 > 2\ngt(1,fieldA) // 1 > fieldA\ngt(fieldA,val(foo)) // fieldA > \"foo\"\ngt(add(fieldA,fieldB),6) // fieldA + fieldB > 6",
    "hierarchy": [
      "gt",
      "gt Syntax"
    ],
    "pageId": 725
  },
  {
    "content": "The <span class=\"code\">gteq</span> function will return whether the first parameter is greater than or equal to the second parameter.\nThe function accepts numeric and string parameters, but will fail to execute if all the parameters are not of\nthe same type. That is, all are String or all are Numeric. If any any parameters are null then an error will be\nraised. Returns a boolean value.",
    "hierarchy": [
      "gteq"
    ],
    "pageId": 725
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "gteq",
      "gteq Parameters"
    ],
    "pageId": 725
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "gteq",
      "gteq Parameters"
    ],
    "pageId": 725
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">gteq</span> evaluator.",
    "hierarchy": [
      "gteq",
      "gteq Syntax"
    ],
    "pageId": 725
  },
  {
    "content": "gteq(1,2) // 1 >= 2\ngteq(1,fieldA) // 1 >= fieldA\ngteq(fieldA,val(foo)) fieldA >= \"foo\"\ngteq(add(fieldA,fieldB),6) // fieldA + fieldB >= 6",
    "hierarchy": [
    ],
    "pageId": 726
  },
  {
    "content": "The <span class=\"ff1 fs2\">hist</span> function creates a histogram from a numeric array. The hist function is designed to work with\ncontinuous variables.",
    "hierarchy": [
      "hist"
    ],
    "pageId": 726
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "hist",
      "hist Parameters"
    ],
    "pageId": 726
  },
  {
    "content": "bins: The number of bins in the histogram. Each returned tuple contains summary statistics for the\nobservations that were within the bin.",
    "hierarchy": [
      "hist",
      "hist Parameters"
    ],
    "pageId": 726
  },
  {
    "content": "hist(numericArray, bins)",
    "hierarchy": [
      "hist",
      "hist Syntax"
    ],
    "pageId": 726
  },
  {
    "content": "The <span class=\"ff1 fs2\">hsin</span> function returns the trigonometric hyperbolic sine of a number.",
    "hierarchy": [
      "hsin"
    ],
    "pageId": 726
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the hyperbolic sine of.",
    "hierarchy": [
      "hsin",
      "hsin Parameters"
    ],
    "pageId": 726
  },
  {
    "content": "hsin(100.4)  // returns the hsine of 100.4\nhsin(fieldA) // returns the hsine for fieldA.\nif(gt(fieldA,fieldB),sin(fieldA),sin(fieldB)) // if fieldA > fieldB then return the hsine of\nfieldA, else return the hsine of fieldB",
    "hierarchy": [
      "hsin",
      "hsin Syntax"
    ],
    "pageId": 726
  },
  {
    "content": "The <span class=\"ff1 fs2\">if</span> function works like a standard conditional if/then statement. If the first parameter is true, then the\nsecond parameter will be returned, else the third parameter will be returned. The function accepts a\nboolean as the first parameter and anything as the second and third parameters. An error will occur if the\nfirst parameter is not a boolean or is null.",
    "hierarchy": [
      "if"
    ],
    "pageId": 726
  },
  {
    "content": "\nField Name | Raw Value | Boolean Evaluator",
    "hierarchy": [
      "if",
      "if Parameters"
    ],
    "pageId": 726
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "if",
      "if Parameters"
    ],
    "pageId": 726
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "if",
      "if Parameters"
    ],
    "pageId": 726
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">if</span> evaluator.",
    "hierarchy": [
      "if Syntax"
    ],
    "pageId": 727
  },
  {
    "content": "if(fieldA,fieldB,fieldC) // if fieldA is true then fieldB else fieldC\nif(gt(fieldA,5), fieldA, 5) // if fieldA > 5 then fieldA else 5\nif(eq(fieldB,null), null, div(fieldA,fieldB)) // if fieldB is null then null else fieldA / fieldB",
    "hierarchy": [
      "if Syntax"
    ],
    "pageId": 727
  },
  {
    "content": "The <span class=\"code\">indexOf</span> function returns the index of a string in an array of strings.",
    "hierarchy": [
      "indexOf"
    ],
    "pageId": 727
  },
  {
    "content": "string array : The array to operate on.",
    "hierarchy": [
      "indexOf",
      "indexOf Parameters"
    ],
    "pageId": 727
  },
  {
    "content": "string : The string to search for in the array.",
    "hierarchy": [
      "indexOf",
      "indexOf Parameters"
    ],
    "pageId": 727
  },
  {
    "content": "indexOf(stringArray, string)",
    "hierarchy": [
      "indexOf",
      "indexOf Syntax"
    ],
    "pageId": 727
  },
  {
    "content": "integer : The index of the string in the array or -1 if the string is not found.",
    "hierarchy": [
      "indexOf",
      "indexOf Returns"
    ],
    "pageId": 727
  },
  {
    "content": "The <span class=\"code\">integrate</span> function computes the integral of an interpolation function for a specific range of the curve.",
    "hierarchy": [
      "integrate"
    ],
    "pageId": 727
  },
  {
    "content": "spline | <span class=\"code\">akima</span> | <span class=\"code\">lerp</span> | <span class=\"code\">loess</span> : The interpolation function to compute the integral for.",
    "hierarchy": [
      "integrate",
      "integrate Parameters"
    ],
    "pageId": 727
  },
  {
    "content": "numeric : start of integral range",
    "hierarchy": [
      "integrate",
      "integrate Parameters"
    ],
    "pageId": 727
  },
  {
    "content": "numeric : end of integral range",
    "hierarchy": [
      "integrate",
      "integrate Parameters"
    ],
    "pageId": 727
  },
  {
    "content": "integrate(function, start, end)",
    "hierarchy": [
      "integrate",
      "integrate Syntax"
    ],
    "pageId": 727
  },
  {
    "content": "numeric : The integral",
    "hierarchy": [
      "integrate",
      "integrate Returns"
    ],
    "pageId": 727
  },
  {
    "content": "The <span class=\"code\">length</span> function returns the length of a numeric array.",
    "hierarchy": [
      "length"
    ],
    "pageId": 727
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "length Parameters"
    ],
    "pageId": 728
  },
  {
    "content": "length(numericArray)",
    "hierarchy": [
      "length Syntax"
    ],
    "pageId": 728
  },
  {
    "content": "The <span class=\"code\">leoss</span> function is a smoothing curve fitter which uses a <span class=\"link\">local regression</span> algorithm. Unlike the <span class=\"link\">spline</span>\nfunction which touches each control point, the <span class=\"code\">loess</span> function puts a smooth curve through the control\npoints without having to touch the control points. The <span class=\"code\">loess</span> result can be used by the <span class=\"link\">derivative</span> function to\nproduce smooth derivatives from data that is not smooth.",
    "hierarchy": [
      "loess"
    ],
    "pageId": 728
  },
  {
    "content": "numeric array: (Optional) x values. If omitted a sequence will be created for the x values.",
    "hierarchy": [
      "loess",
      "loess Positional Parameters"
    ],
    "pageId": 728
  },
  {
    "content": "numeric array: y values",
    "hierarchy": [
      "loess",
      "loess Positional Parameters"
    ],
    "pageId": 728
  },
  {
    "content": "bandwidth: (Optional) The percent of the data points to use when drawing the local regression line,\ndefaults to .25. Decreasing the bandwidth increases the number of curves that loess can fit.",
    "hierarchy": [
      "loess",
      "loess Named Parameters"
    ],
    "pageId": 728
  },
  {
    "content": "robustIterations: (Optional) The number of iterations used to smooth outliers, defaults to 2.",
    "hierarchy": [
      "loess",
      "loess Named Parameters"
    ],
    "pageId": 728
  },
  {
    "content": "loess(yValues) // This creates the xValues automatically and fits a smooth curve through the data\npoints.\nloess(xValues, yValues) // This will fit a smooth curve through the data points.\nloess(xValues, yValues, bandwidth=.15) // This will fit a smooth curve through the data points\nusing 15 percent of the data points for each local regression line.",
    "hierarchy": [
      "loess",
      "loess Syntax"
    ],
    "pageId": 728
  },
  {
    "content": "function: The function can be treated as both a <span class=\"code\">numeric array</span> of the smoothed data points and <span class=\"code\">function</span>.",
    "hierarchy": [
      "loess",
      "loess Returns"
    ],
    "pageId": 728
  },
  {
    "content": "The <span class=\"code\">log</span> function will return the natural log of the provided single parameter. The <span class=\"code\">log</span> function will fail to\nexecute if the value is non-numeric. If a null value is found, then null will be returned as the result.",
    "hierarchy": [
      "log"
    ],
    "pageId": 728
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "log",
      "log Parameters"
    ],
    "pageId": 728
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">log</span> evaluator. Only one parameter is",
    "hierarchy": [
      "log",
      "log Syntax"
    ],
    "pageId": 728
  },
  {
    "content": "accepted. Returns a numeric value.",
    "hierarchy": [
    ],
    "pageId": 729
  },
  {
    "content": "log(100)\nlog(add(fieldA,fieldB))\nlog(fieldA)",
    "hierarchy": [
    ],
    "pageId": 729
  },
  {
    "content": "The <span class=\"ff2 fs2\">logNormalDistribution</span> function returns a <span class=\"link\">log normal probability distribution</span> based on its parameters.\nThis function is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nkolmogorovSmirnov<span class=\"ff1 fs0 fc0\"> and </span>cumulativeProbability<span class=\"ff1 fs0 fc0\"> functions.</span>",
    "hierarchy": [
      "logNormalDistribution"
    ],
    "pageId": 729
  },
  {
    "content": "double: shape",
    "hierarchy": [
      "logNormalDistribution",
      "logNormalDistribution Parameters"
    ],
    "pageId": 729
  },
  {
    "content": "double: scale",
    "hierarchy": [
      "logNormalDistribution",
      "logNormalDistribution Parameters"
    ],
    "pageId": 729
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "logNormalDistribution",
      "logNormalDistribution Returns"
    ],
    "pageId": 729
  },
  {
    "content": "logNormalDistribution(.3, .0)",
    "hierarchy": [
      "logNormalDistribution",
      "logNormalDistribution Syntax"
    ],
    "pageId": 729
  },
  {
    "content": "The <span class=\"ff2 fs2\">kolmogorovSmirnov</span> function performs a <span class=\"link\">Kolmogorov Smirnov test</span>, between a reference continuous\nprobability distribution and a sample set.",
    "hierarchy": [
      "kolmogorovSmirnov"
    ],
    "pageId": 729
  },
  {
    "content": "The supported distribution functions are: <span class=\"link\">empiricalDistribution</span>, <span class=\"link\">normalDistribution</span>,\nlogNormalDistribution<span class=\"ff1 fs0 fc0\">, </span>weibullDistribution<span class=\"ff1 fs0 fc0\">, </span>gammaDistribution<span class=\"ff1 fs0 fc0\">, and </span>betaDistribution<span class=\"ff1 fs0 fc0\">.</span>",
    "hierarchy": [
      "kolmogorovSmirnov"
    ],
    "pageId": 729
  },
  {
    "content": "continuous probability distribution: Reference distribution",
    "hierarchy": [
      "kolmogorovSmirnov",
      "kolmogorovSmirnov Parameters"
    ],
    "pageId": 729
  },
  {
    "content": "numeric array: sample set",
    "hierarchy": [
      "kolmogorovSmirnov",
      "kolmogorovSmirnov Parameters"
    ],
    "pageId": 729
  },
  {
    "content": "result tuple : A tuple containing the p-value and d-statistic for the test result.",
    "hierarchy": [
      "kolmogorovSmirnov",
      "kolmogorovSmirnov Returns"
    ],
    "pageId": 729
  },
  {
    "content": "kolmogorovSmirnov(normalDistribution(10, 2), sampleSet)",
    "hierarchy": [
      "kolmogorovSmirnov",
      "kolmogorovSmirnov Syntax"
    ],
    "pageId": 729
  },
  {
    "content": "The <span class=\"code\">lt</span> function will return whether the first parameter is less than the second parameter. The function\naccepts numeric or string parameters, but will fail to execute if all the parameters are not of the same type.\nThat is, all are String or all are Numeric. If any any parameters are null then an error will be raised. Returns a\nboolean value.",
    "hierarchy": [
      "lt"
    ],
    "pageId": 730
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "lt",
      "lt Parameters"
    ],
    "pageId": 730
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "lt",
      "lt Parameters"
    ],
    "pageId": 730
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">lt</span> evaluator.",
    "hierarchy": [
      "lt",
      "lt Syntax"
    ],
    "pageId": 730
  },
  {
    "content": "lt(1,2) // 1 < 2\nlt(1,fieldA) // 1 < fieldA\nlt(fieldA,val(foo)) fieldA < \"foo\"\nlt(add(fieldA,fieldB),6) // fieldA + fieldB < 6",
    "hierarchy": [
      "lt",
      "lt Syntax"
    ],
    "pageId": 730
  },
  {
    "content": "The <span class=\"code\">lteq</span> function will return whether the first parameter is less than or equal to the second parameter. The\nfunction accepts numeric and string parameters, but will fail to execute if all the parameters are not of the\nsame type. That is, all are String or all are Numeric. If any any parameters are null then an error will be\nraised. Returns a boolean value.",
    "hierarchy": [
      "lteq"
    ],
    "pageId": 730
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "lteq",
      "lteq Parameters"
    ],
    "pageId": 730
  },
  {
    "content": "\nField Name | Raw Value | Evaluator",
    "hierarchy": [
      "lteq",
      "lteq Parameters"
    ],
    "pageId": 730
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">lteq</span> evaluator.",
    "hierarchy": [
      "lteq",
      "lteq Syntax"
    ],
    "pageId": 730
  },
  {
    "content": "lteq(1,2) // 1 <= 2\nlteq(1,fieldA) // 1 <= fieldA\nlteq(fieldA,val(foo)) fieldA <= \"foo\"\nlteq(add(fieldA,fieldB),6) // fieldA + fieldB <= 6",
    "hierarchy": [
      "lteq",
      "lteq Syntax"
    ],
    "pageId": 730
  },
  {
    "content": "The <span class=\"code\">markovChain</span> function can be used to perform <span class=\"link\">Markov Chain</span> simulations. The <span class=\"code\">markovChain</span> function\ntakes as its parameter a <span class=\"link\">transition matrix</span> and returns a mathematical model that can be sampled using the\nsample<span class=\"fc1\"> function. Each sample taken from the Markov Chain represents the current state of system.</span>",
    "hierarchy": [
      "markovChain"
    ],
    "pageId": 730
  },
  {
    "content": "matrix: Transition matrix",
    "hierarchy": [
      "markovChain Parameters"
    ],
    "pageId": 731
  },
  {
    "content": "sample(markovChain(transitionMatrix), 5)  // This creates a Markov Chain given a specific\ntransition matrix. The sample function takes 5 samples from the Markov Chain, representing the\nnext five states of the system.",
    "hierarchy": [
      "markovChain Syntax"
    ],
    "pageId": 731
  },
  {
    "content": "Markov Chain model: The Markoff Chain model can be used with <span class=\"link\">sample</span> function.",
    "hierarchy": [
      "markovChain Returns"
    ],
    "pageId": 731
  },
  {
    "content": "The matrix function returns a <span class=\"link\">matrix</span> which can be operated on by functions that support matrix operations.",
    "hierarchy": [
      "matrix"
    ],
    "pageId": 731
  },
  {
    "content": "numeric array …: One or more numeric arrays that will be the rows of the matrix.",
    "hierarchy": [
      "matrix",
      "matrix Parameters"
    ],
    "pageId": 731
  },
  {
    "content": "matrix(numericArray1, numericArray2, numericArray3) // Returns a matrix with three rows of data:\nnumericaArray1, numericArray2, numericArray3",
    "hierarchy": [
      "matrix",
      "matrix Syntax"
    ],
    "pageId": 731
  },
  {
    "content": "matrix",
    "hierarchy": [
      "matrix",
      "matrix Returns"
    ],
    "pageId": 731
  },
  {
    "content": "The <span class=\"code\">meanDifference</span> function calculates the mean of the differences following the element-by-element\nsubtraction between two numeric arrays.",
    "hierarchy": [
      "meanDifference"
    ],
    "pageId": 731
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "meanDifference",
      "meanDifference Parameters"
    ],
    "pageId": 731
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "meanDifference",
      "meanDifference Parameters"
    ],
    "pageId": 731
  },
  {
    "content": "A numeric.",
    "hierarchy": [
      "meanDifference",
      "meanDifference Returns"
    ],
    "pageId": 731
  },
  {
    "content": "meanDifference(numericArray, numericArray)",
    "hierarchy": [
      "meanDifference",
      "meanDifference Syntax"
    ],
    "pageId": 731
  },
  {
    "content": "The <span class=\"code\">minMaxScale</span> function scales numeric arrays within a minimum and maximum value. By default\nminMaxScale<span class=\"ff2 fs1\"> scales between 0 and 1. The </span>minMaxScale<span class=\"ff2 fs1\"> function can operate on both numeric arrays and</span>\nmatrices.",
    "hierarchy": [
      "minMaxScale"
    ],
    "pageId": 732
  },
  {
    "content": "When operating on a matrix the <span class=\"code\">minMaxScale</span> function operates on each row of the matrix.",
    "hierarchy": [
      "minMaxScale"
    ],
    "pageId": 732
  },
  {
    "content": "numeric array | <span class=\"code\">matrix</span>: The array or matrix to scale",
    "hierarchy": [
      "minMaxScale",
      "minMaxScale Parameters"
    ],
    "pageId": 732
  },
  {
    "content": "double: (Optional) The min value. Defaults to 0.",
    "hierarchy": [
      "minMaxScale",
      "minMaxScale Parameters"
    ],
    "pageId": 732
  },
  {
    "content": "double: (Optional) The max value. Defaults to 1.",
    "hierarchy": [
      "minMaxScale",
      "minMaxScale Parameters"
    ],
    "pageId": 732
  },
  {
    "content": "minMaxScale(numericArray) // scale a numeric array between 0 and 1\nminMaxScale(numericArray, 0, 100) // scale a numeric array between 1 and 100\nminMaxScale(matrix) // Scale each row in a matrix between 0 and 1\nminMaxScale(matrix, 0, 100) // Scale each row in a matrix between 0 and 100",
    "hierarchy": [
      "minMaxScale",
      "minMaxScale Syntax"
    ],
    "pageId": 732
  },
  {
    "content": "A numeric array or matrix",
    "hierarchy": [
      "minMaxScale",
      "minMaxScale Returns"
    ],
    "pageId": 732
  },
  {
    "content": "The <span class=\"code\">mod</span> function returns the remainder (modulo) of the first parameter divided by the second parameter.",
    "hierarchy": [
      "mod"
    ],
    "pageId": 732
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: Parameter 1",
    "hierarchy": [
      "mod",
      "mod Parameters"
    ],
    "pageId": 732
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: Parameter 2",
    "hierarchy": [
      "mod",
      "mod Parameters"
    ],
    "pageId": 732
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">mod</span> evaluator.",
    "hierarchy": [
      "mod",
      "mod Syntax"
    ],
    "pageId": 732
  },
  {
    "content": "mod(100,3) // returns the remainder of 100 / 3 .\nmod(100,fieldA) // returns the remainder of 100 divided by the value of fieldA.\nmod(fieldA,1.4) // returns the remainder of fieldA divided by 1.4.\nif(gt(fieldA,fieldB),mod(fieldA,fieldB),mod(fieldB,fieldA)) // if fieldA > fieldB then return the\nremainder of fieldA/fieldB, else return the remainder of fieldB/fieldA.",
    "hierarchy": [
      "mod",
      "mod Syntax"
    ],
    "pageId": 732
  },
  {
    "content": "The <span class=\"code\">monteCarlo</span> function performs a Monte Carlo simulation (<span class=\"link\">https://en.wikipedia.org/wiki/</span>\nMonte_Carlo_method<span class=\"fc1\">) based on its parameters. The monteCarlo function runs another function a specified</span>\nnumber of times and returns the results.",
    "hierarchy": [
      "monteCarlo"
    ],
    "pageId": 732
  },
  {
    "content": "The function being run typically has one or more variables that are drawn from probability distributions on\neach run. The <span class=\"link\">sample</span> function is used in the function to draw the samples.",
    "hierarchy": [
    ],
    "pageId": 733
  },
  {
    "content": "The simulation's result array can then be treated as an empirical distribution to understand the probabilities\nof the simulation results.",
    "hierarchy": [
    ],
    "pageId": 733
  },
  {
    "content": "numeric function: The function being run by the simulation, which must return a numeric value.",
    "hierarchy": [
      "monteCarlo Parameters"
    ],
    "pageId": 733
  },
  {
    "content": "integer: The number of times to run the function.",
    "hierarchy": [
      "monteCarlo Parameters"
    ],
    "pageId": 733
  },
  {
    "content": "A numeric array: The results of simulation runs.",
    "hierarchy": [
      "monteCarlo Returns"
    ],
    "pageId": 733
  },
  {
    "content": "let(a=uniformIntegerDistribution(1, 6),\nÊ   b=uniformIntegerDistribution(1, 6),\nÊ   c=monteCarlo(add(sample(a), sample(b)), 1000))",
    "hierarchy": [
      "monteCarlo Syntax"
    ],
    "pageId": 733
  },
  {
    "content": "In the expression above the <span class=\"ff2 fs1\">monteCarlo</span> function is running the function <span class=\"ff2 fs1\">add(sample(a), sample(b))</span> 1000\ntimes and returning the result. Each time the function is run samples are drawn from the probability\ndistributions stored in variables <span class=\"ff2 fs1\">a</span> and <span class=\"ff2 fs1\">b</span>.",
    "hierarchy": [
      "monteCarlo Syntax"
    ],
    "pageId": 733
  },
  {
    "content": "The <span class=\"ff2 fs1\">movingAvg</span> function calculates a <span class=\"link\">moving average</span> over an array of numbers.",
    "hierarchy": [
      "movingAvg"
    ],
    "pageId": 733
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "movingAvg",
      "movingAvg Parameters"
    ],
    "pageId": 733
  },
  {
    "content": "\nwindow size",
    "hierarchy": [
      "movingAvg",
      "movingAvg Parameters"
    ],
    "pageId": 733
  },
  {
    "content": "A numeric array. The first element of the returned array will start from the windowSize-1 index of the\noriginal array.",
    "hierarchy": [
      "movingAvg",
      "movingAvg Returns"
    ],
    "pageId": 733
  },
  {
    "content": "movingAverage(numericArray, 30)",
    "hierarchy": [
      "movingAvg",
      "movingAvg Syntax"
    ],
    "pageId": 733
  },
  {
    "content": "The <span class=\"ff2 fs1\">movingMedian</span> function calculates a moving median over an array of numbers.",
    "hierarchy": [
      "movingMedian"
    ],
    "pageId": 733
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "movingMedian",
      "movingMedian Parameters"
    ],
    "pageId": 733
  },
  {
    "content": "\nwindow size",
    "hierarchy": [
    ],
    "pageId": 734
  },
  {
    "content": "A numeric array. The first element of the returned array will start from the windowSize-1 index of the\noriginal array.",
    "hierarchy": [
      "movingMedian Returns"
    ],
    "pageId": 734
  },
  {
    "content": "movingMedian(numericArray, 30)",
    "hierarchy": [
      "movingMedian Syntax"
    ],
    "pageId": 734
  },
  {
    "content": "The <span class=\"ff2 fs1\">mult</span> function will take two or more numeric values and multiply them together. The <span class=\"ff2 fs1\">mult</span> function will\nfail to execute if any of the values are non-numeric. If a null value is found then null will be returned as the\nresult.",
    "hierarchy": [
      "mult"
    ],
    "pageId": 734
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "mult",
      "mult Parameters"
    ],
    "pageId": 734
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "mult",
      "mult Parameters"
    ],
    "pageId": 734
  },
  {
    "content": "\n……",
    "hierarchy": [
      "mult",
      "mult Parameters"
    ],
    "pageId": 734
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "mult",
      "mult Parameters"
    ],
    "pageId": 734
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"ff2 fs1\">mult</span> evaluator. The number and\norder of these parameters do not matter and is not limited except that at least two parameters are required.\nReturns a numeric value.",
    "hierarchy": [
      "mult",
      "mult Syntax"
    ],
    "pageId": 734
  },
  {
    "content": "mult(1,2,3,4) // 1 * 2 * 3 * 4\nmult(1,fieldA) // 1 * value of fieldA\nmult(fieldA,1.4) // value of fieldA * 1.4\nmult(fieldA,fieldB,fieldC) // value of fieldA * value of fieldB * value of fieldC\nmult(fieldA,div(fieldA,fieldB)) // value of fieldA * (value of fieldA / value of fieldB)\nmult(fieldA,if(gt(fieldA,fieldB),fieldA,fieldB)) // if fieldA > fieldB then fieldA * fieldA, else\nfieldA * fieldB",
    "hierarchy": [
      "mult",
      "mult Syntax"
    ],
    "pageId": 734
  },
  {
    "content": "The <span class=\"ff2 fs1\">normalDistribution</span> function returns a <span class=\"link\">normal probability distribution</span> based on its parameters. This\nfunction is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nkolmogorovSmirnov<span class=\"ff1 fs0 fc0\"> and </span>cumulativeProbability<span class=\"ff1 fs0 fc0\"> functions.</span>",
    "hierarchy": [
      "normalDistribution"
    ],
    "pageId": 734
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">double</span><span class=\"ls1\">: mean</span>",
    "hierarchy": [
      "normalDistribution",
      "normalDistribution Parameters"
    ],
    "pageId": 734
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">double</span><span class=\"ls1\">: standard deviation</span>",
    "hierarchy": [
      "normalDistribution",
      "normalDistribution Parameters"
    ],
    "pageId": 734
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "normalDistribution Returns"
    ],
    "pageId": 735
  },
  {
    "content": "normalDistribution(mean, stddev)",
    "hierarchy": [
      "normalDistribution Syntax"
    ],
    "pageId": 735
  },
  {
    "content": "The <span class=\"code\">normalizeSum</span> function scales numeric arrays so that they sum to 1. The <span class=\"code\">normalizeSum</span> function can\noperate on both numeric arrays and matrices.",
    "hierarchy": [
      "normalizeSum"
    ],
    "pageId": 735
  },
  {
    "content": "When operating on a matrix the <span class=\"code\">normalizeSum</span> function operates on each row of the matrix.",
    "hierarchy": [
      "normalizeSum"
    ],
    "pageId": 735
  },
  {
    "content": "numeric array | <span class=\"code\">matrix</span>",
    "hierarchy": [
      "normalizeSum",
      "normalizeSum Parameters"
    ],
    "pageId": 735
  },
  {
    "content": "normalizeSum(numericArray)\nnormalizeSum(matrix)",
    "hierarchy": [
      "normalizeSum",
      "normalizeSum Syntax"
    ],
    "pageId": 735
  },
  {
    "content": "numeric array | matrix",
    "hierarchy": [
      "normalizeSum",
      "normalizeSum Returns"
    ],
    "pageId": 735
  },
  {
    "content": "The <span class=\"code\">not</span> function will return the logical NOT of a single boolean parameter. The function will fail to execute if\nthe parameter is non-boolean or null. Returns a boolean value.",
    "hierarchy": [
      "not"
    ],
    "pageId": 735
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "not",
      "not Parameters"
    ],
    "pageId": 735
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">not</span> evaluator. Only one parameter is\nallowed.",
    "hierarchy": [
      "not",
      "not Syntax"
    ],
    "pageId": 735
  },
  {
    "content": "not(true) // false\nnot(fieldA) // true if fieldA is false else false\nnot(eq(fieldA,fieldB)) // true if fieldA != fieldB",
    "hierarchy": [
      "not",
      "not Syntax"
    ],
    "pageId": 735
  },
  {
    "content": "The <span class=\"code\">olsRegress</span> function performs <span class=\"link\">ordinary least squares</span>, multivariate, linear regression.",
    "hierarchy": [
      "olsRegress"
    ],
    "pageId": 735
  },
  {
    "content": "The <span class=\"ff2 fs1\">olsRegress</span> function returns a single Tuple containing the regression model with estimated regression\nparameters, RSquared and regression diagnostics.",
    "hierarchy": [
    ],
    "pageId": 736
  },
  {
    "content": "The output of <span class=\"ff2 fs1\">olsRegress</span> can be used with the <span class=\"link\">predict</span> function to predict values based on the regression\nmodel.",
    "hierarchy": [
    ],
    "pageId": 736
  },
  {
    "content": "matrix: The regressor observation matrix. Each row in the matrix represents a single multi-variate\nregressor observation. Note that there is no need to add an initial unitary column (column of 1's) when\nspecifying a model including an intercept term, this column will be added automatically.",
    "hierarchy": [
      "olsRegress Parameters"
    ],
    "pageId": 736
  },
  {
    "content": "numeric array: The outcomes array which matches up with each row in the regressor observation\nmatrix.",
    "hierarchy": [
      "olsRegress Parameters"
    ],
    "pageId": 736
  },
  {
    "content": "olsRegress(matrix, numericArray) // This performs the olsRegression analysis on given regressor\nmatrix and outcome array.",
    "hierarchy": [
      "olsRegress Syntax"
    ],
    "pageId": 736
  },
  {
    "content": "Tuple: The regression model including the estimated regression parameters and diagnostics.",
    "hierarchy": [
      "olsRegress Returns"
    ],
    "pageId": 736
  },
  {
    "content": "The <span class=\"ff2 fs1\">or</span> function will return the logical OR of at least 2 boolean parameters. The function will fail to execute if\nany parameters are non-boolean or null. Returns a boolean value.",
    "hierarchy": [
      "or"
    ],
    "pageId": 736
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "or",
      "or Parameters"
    ],
    "pageId": 736
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "or",
      "or Parameters"
    ],
    "pageId": 736
  },
  {
    "content": "\n……",
    "hierarchy": [
      "or",
      "or Parameters"
    ],
    "pageId": 736
  },
  {
    "content": "\nField Name | Raw Boolean | Boolean Evaluator",
    "hierarchy": [
      "or",
      "or Parameters"
    ],
    "pageId": 736
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"ff2 fs1\">or</span> evaluator. At least two\nparameters are required, but there is no limit to how many you can use.",
    "hierarchy": [
      "or",
      "or Syntax"
    ],
    "pageId": 736
  },
  {
    "content": "or(true,fieldA) // true || fieldA\nor(fieldA,fieldB) // fieldA || fieldB\nor(and(fieldA,fieldB),fieldC) // (fieldA && fieldB) || fieldC\nor(fieldA,fieldB,fieldC,and(fieldD,fieldE),fieldF)",
    "hierarchy": [
      "or",
      "or Syntax"
    ],
    "pageId": 736
  },
  {
    "content": "The <span class=\"ff2 fs1\">poissonDistribution</span> function returns a <span class=\"link\">poisson probability distribution</span> based on its parameter. This\nfunction is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,",
    "hierarchy": [
      "poissonDistribution"
    ],
    "pageId": 736
  },
  {
    "content": "probability<span class=\"ff2 fs1 fc1\"> and </span>cumulativeProbability<span class=\"ff2 fs1 fc1\"> functions.</span>",
    "hierarchy": [
    ],
    "pageId": 737
  },
  {
    "content": "double: mean",
    "hierarchy": [
      "poissonDistribution Parameters"
    ],
    "pageId": 737
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "poissonDistribution Returns"
    ],
    "pageId": 737
  },
  {
    "content": "poissonDistribution(mean)",
    "hierarchy": [
      "poissonDistribution Syntax"
    ],
    "pageId": 737
  },
  {
    "content": "The <span class=\"ff1 fs0\">polyFit</span> function performs <span class=\"fc0\">polynomial curve fitting</span>.",
    "hierarchy": [
      "polyFit"
    ],
    "pageId": 737
  },
  {
    "content": "numeric array: (Optional) x values. If omitted a sequence will be created for the x values.",
    "hierarchy": [
      "polyFit",
      "polyFit Parameters"
    ],
    "pageId": 737
  },
  {
    "content": "numeric array: y values",
    "hierarchy": [
      "polyFit",
      "polyFit Parameters"
    ],
    "pageId": 737
  },
  {
    "content": "integer: (Optional) polynomial degree. Defaults to 3.",
    "hierarchy": [
      "polyFit",
      "polyFit Parameters"
    ],
    "pageId": 737
  },
  {
    "content": "A numeric array: curve that was fit to the data points.",
    "hierarchy": [
      "polyFit",
      "polyFit Returns"
    ],
    "pageId": 737
  },
  {
    "content": "polyFit(yValues) // This creates the xValues automatically and fits a curve through the data\npoints using the default 3 degree polynomial.\npolyFit(yValues, 5) // This creates the xValues automatically and fits a curve through the data\npoints using a 5 degree polynomial.\npolyFit(xValues, yValues, 5) // This will fit a curve through the data points using a 5 degree\npolynomial.",
    "hierarchy": [
      "polyFit",
      "polyFit Syntax"
    ],
    "pageId": 737
  },
  {
    "content": "The <span class=\"ff1 fs0\">pow</span> function returns the value of its first parameter raised to the power of its second parameter.",
    "hierarchy": [
      "pow"
    ],
    "pageId": 737
  },
  {
    "content": "Field Name | <span class=\"ff1 fs0\">Raw Number</span> | <span class=\"ff1 fs0\">Number Evaluator</span>: Parameter 1",
    "hierarchy": [
      "pow",
      "pow Parameters"
    ],
    "pageId": 737
  },
  {
    "content": "Field Name | <span class=\"ff1 fs0\">Raw Number</span> | <span class=\"ff1 fs0\">Number Evaluator</span>: Parameter 2",
    "hierarchy": [
      "pow",
      "pow Parameters"
    ],
    "pageId": 737
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"ff1 fs0\">pow</span> evaluator.",
    "hierarchy": [
      "pow",
      "pow Syntax"
    ],
    "pageId": 737
  },
  {
    "content": "pow(2,3) // returns 2 raised to the 3rd power.\npow(4,fieldA) // returns 4 raised by the value of fieldA.\npow(fieldA,1.4) // returns the value of fieldA raised by 1.4.\nif(gt(fieldA,fieldB),pow(fieldA,fieldB),pow(fieldB,fieldA)) // if fieldA > fieldB then raise\nfieldA by fieldB, else raise fieldB by fieldA.",
    "hierarchy": [
    ],
    "pageId": 738
  },
  {
    "content": "The <span class=\"ff1 fs2\">predict</span> function predicts the value of dependent variables based on regression models or functions.",
    "hierarchy": [
      "predict"
    ],
    "pageId": 738
  },
  {
    "content": "The <span class=\"ff1 fs2\">predict</span> function can predict values based on the output of the following functions: <span class=\"link\">spline</span>, <span class=\"link\">loess</span>,\nregress<span class=\"fc0\">, </span>olsRegress<span class=\"fc0\">.</span>",
    "hierarchy": [
      "predict"
    ],
    "pageId": 738
  },
  {
    "content": "regression model | <span class=\"ff1 fs2\">function</span>: The model or function used for the prediction",
    "hierarchy": [
      "predict",
      "predict Parameters"
    ],
    "pageId": 738
  },
  {
    "content": "number | <span class=\"ff1 fs2\">numeric array</span> | <span class=\"ff1 fs2\">matrix</span>: Depending on the regression model or function used, the predictor\nvariable can be a number, numeric array or matrix.",
    "hierarchy": [
      "predict",
      "predict Parameters"
    ],
    "pageId": 738
  },
  {
    "content": "predict(regressModel, number) // predict using the output of the <<regress>> function and single\nnumeric predictor. This will return a single numeric prediction.",
    "hierarchy": [
      "predict",
      "predict Syntax"
    ],
    "pageId": 738
  },
  {
    "content": "predict(regressModel, numericArray) // predict using the output of the <<regress>> function and a\nnumeric array of predictors. This will return a numeric array of predictions.",
    "hierarchy": [
      "predict",
      "predict Syntax"
    ],
    "pageId": 738
  },
  {
    "content": "predict(splineFunc, number) // predict using the output of the <<spline>> function and single\nnumeric predictor. This will return a single numeric prediction.",
    "hierarchy": [
      "predict",
      "predict Syntax"
    ],
    "pageId": 738
  },
  {
    "content": "predict(splineFunc, numericArray) // predict using the output of the <<spline>> function and a\nnumeric array of predictors. This will return a numeric array of predictions.",
    "hierarchy": [
      "predict",
      "predict Syntax"
    ],
    "pageId": 738
  },
  {
    "content": "predict(olsRegressModel, numericArray) // predict using the output of the <<olsRegress>> function\nand a numeric array containing one multi-variate predictor. This will return a single numeric\nprediction.",
    "hierarchy": [
      "predict",
      "predict Syntax"
    ],
    "pageId": 738
  },
  {
    "content": "predict(olsRegressModel, matrix) // predict using the output of the <<olsRegress>> function and a\nmatrix containing rows of multi-variate predictor arrays. This will return a numeric array of\npredictions.",
    "hierarchy": [
      "predict",
      "predict Syntax"
    ],
    "pageId": 738
  },
  {
    "content": "The <span class=\"ff1 fs2\">primes</span> function returns an array of prime numbers starting from a specified number.",
    "hierarchy": [
      "primes"
    ],
    "pageId": 738
  },
  {
    "content": "integer: The number of primes to return in the list",
    "hierarchy": [
      "primes",
      "primes Parameters"
    ],
    "pageId": 738
  },
  {
    "content": "integer: The starting point for returning the primes",
    "hierarchy": [
      "primes",
      "primes Parameters"
    ],
    "pageId": 738
  },
  {
    "content": "A numeric array.",
    "hierarchy": [
      "primes Returns"
    ],
    "pageId": 739
  },
  {
    "content": "primes(100, 2000) // returns 100 primes starting from 2000",
    "hierarchy": [
      "primes Syntax"
    ],
    "pageId": 739
  },
  {
    "content": "The <span class=\"code\">probability</span> function returns the probability of a random variable within a probability distribution.",
    "hierarchy": [
      "probability"
    ],
    "pageId": 739
  },
  {
    "content": "The <span class=\"code\">probability</span> function computes the probability between random variable ranges for both <span class=\"link\">continuous</span>\nand <span class=\"link\">discrete</span> probability distributions.",
    "hierarchy": [
      "probability"
    ],
    "pageId": 739
  },
  {
    "content": "The <span class=\"code\">probability</span> function can compute probabilities for a specific random variable for discrete probability\ndistributions only.",
    "hierarchy": [
      "probability"
    ],
    "pageId": 739
  },
  {
    "content": "The supported continuous distribution functions are: <span class=\"link\">normalDistribution</span>, <span class=\"link\">logNormalDistribution</span>,\nbetaDistribution<span class=\"fc1\">, </span>gammaDistribution<span class=\"fc1\">, </span>empiricalDistribution<span class=\"fc1\">, </span>triangularDistribution<span class=\"fc1\">, </span>weibullDistribution<span class=\"fc1\">,</span>\nuniformDistribution<span class=\"fc1\">, </span>constantDistribution",
    "hierarchy": [
      "probability"
    ],
    "pageId": 739
  },
  {
    "content": "The supported discreet distributions are: <span class=\"link\">poissonDistribution</span>, <span class=\"link\">binomialDistribution</span>, <span class=\"link\">enumeratedDistribution</span>,\nzipFDistribution<span class=\"fc1\">, </span>geometricDistribution<span class=\"fc1\">, </span>uniformIntegerDistribution",
    "hierarchy": [
      "probability"
    ],
    "pageId": 739
  },
  {
    "content": "probability distribution: the probability distribution to compute the probability from.",
    "hierarchy": [
      "probability",
      "probability Parameters"
    ],
    "pageId": 739
  },
  {
    "content": "number: low value of the range.",
    "hierarchy": [
      "probability",
      "probability Parameters"
    ],
    "pageId": 739
  },
  {
    "content": "number: (Optional for discrete probability distributions) high value of the range. If the high range is\nomitted then the probability function will compute a probability for the low range value.",
    "hierarchy": [
      "probability",
      "probability Parameters"
    ],
    "pageId": 739
  },
  {
    "content": "probability(poissonDistribution(10), 7) // Returns the probability of a random sample of 7 in a\npoisson distribution with a mean of 10.",
    "hierarchy": [
      "probability",
      "probability Syntax"
    ],
    "pageId": 739
  },
  {
    "content": "probability(normalDistribution(10, 2), 7.5, 8.5) // Returns the probability between the range of\n7.5 to 8.5 for a normal distribution with a mean of 10 and standard deviation of 2.",
    "hierarchy": [
      "probability",
      "probability Syntax"
    ],
    "pageId": 739
  },
  {
    "content": "double: probability",
    "hierarchy": [
      "probability",
      "probability Returns"
    ],
    "pageId": 739
  },
  {
    "content": "The <span class=\"code\">rank</span> performs a rank transformation on a numeric array.",
    "hierarchy": [
      "rank"
    ],
    "pageId": 739
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "rank Parameters"
    ],
    "pageId": 740
  },
  {
    "content": "rank(numericArray)",
    "hierarchy": [
      "rank Syntax"
    ],
    "pageId": 740
  },
  {
    "content": "The <span class=\"code\">raw</span> function will return whatever raw value is the parameter. This is useful for cases where you want to\nuse a string as part of another evaluator.",
    "hierarchy": [
      "raw"
    ],
    "pageId": 740
  },
  {
    "content": "\nRaw Value",
    "hierarchy": [
      "raw",
      "raw Parameters"
    ],
    "pageId": 740
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">raw</span> evaluator. Whatever is inside will\nbe returned as-is. Internal evaluators are considered strings and are not evaluated.",
    "hierarchy": [
      "raw",
      "raw Syntax"
    ],
    "pageId": 740
  },
  {
    "content": "raw(foo) // \"foo\"\nraw(count(*)) // \"count(*)\"\nraw(45) // 45\nraw(true) // \"true\" (note: this returns the string \"true\" and not the boolean true)\neq(raw(fieldA), fieldA) // true if the value of fieldA equals the string \"fieldA\"",
    "hierarchy": [
      "raw",
      "raw Syntax"
    ],
    "pageId": 740
  },
  {
    "content": "The <span class=\"code\">regress</span> function performs a simple regression of two numeric arrays.",
    "hierarchy": [
      "regress"
    ],
    "pageId": 740
  },
  {
    "content": "The result of this expression is also used by the <span class=\"link\">predict</span> function.",
    "hierarchy": [
      "regress"
    ],
    "pageId": 740
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "regress",
      "regress Parameters"
    ],
    "pageId": 740
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "regress",
      "regress Parameters"
    ],
    "pageId": 740
  },
  {
    "content": "regress(numericArray1, numericArray2)",
    "hierarchy": [
      "regress",
      "regress Syntax"
    ],
    "pageId": 740
  },
  {
    "content": "The <span class=\"code\">rev</span> function reverses the order of a numeric array.",
    "hierarchy": [
      "rev"
    ],
    "pageId": 740
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "rev Parameters"
    ],
    "pageId": 741
  },
  {
    "content": "rev(numericArray)",
    "hierarchy": [
      "rev Syntax"
    ],
    "pageId": 741
  },
  {
    "content": "The <span class=\"code\">round</span> function returns the closest whole number to the argument.",
    "hierarchy": [
      "round"
    ],
    "pageId": 741
  },
  {
    "content": "Field Name | <span class=\"code\">Raw Number</span> | <span class=\"code\">Number Evaluator</span>: The value to return the square root of.",
    "hierarchy": [
      "round",
      "round Parameters"
    ],
    "pageId": 741
  },
  {
    "content": "round(100.4)\nround(fieldA)\nif(gt(fieldA,fieldB),sqrt(fieldA),sqrt(fieldB)) // if fieldA > fieldB then return the round of\nfieldA, else return the round of fieldB",
    "hierarchy": [
      "round",
      "round Syntax"
    ],
    "pageId": 741
  },
  {
    "content": "The <span class=\"code\">rowAt</span> function returns the row of a matrix at a specific index as a numeric array.",
    "hierarchy": [
      "rowAt"
    ],
    "pageId": 741
  },
  {
    "content": "matrix: the matrix to operate on",
    "hierarchy": [
      "rowAt",
      "rowAt Parameters"
    ],
    "pageId": 741
  },
  {
    "content": "integer: the index of the row to return",
    "hierarchy": [
      "rowAt",
      "rowAt Parameters"
    ],
    "pageId": 741
  },
  {
    "content": "rowAt(matrix, 10)",
    "hierarchy": [
      "rowAt",
      "rowAt Syntax"
    ],
    "pageId": 741
  },
  {
    "content": "numeric array : the row of the matrix",
    "hierarchy": [
      "rowAt",
      "rowAt Returns"
    ],
    "pageId": 741
  },
  {
    "content": "The <span class=\"code\">rowCount</span> function returns the number of rows in a <span class=\"code\">matrix</span>.",
    "hierarchy": [
      "rowCount"
    ],
    "pageId": 741
  },
  {
    "content": "matrix: the matrix to operate on",
    "hierarchy": [
      "rowCount",
      "rowCount Parameters"
    ],
    "pageId": 741
  },
  {
    "content": "rowCount(matrix)",
    "hierarchy": [
      "rowCount Syntax"
    ],
    "pageId": 742
  },
  {
    "content": "integer : number rows in the matrix.",
    "hierarchy": [
      "rowCount Returns"
    ],
    "pageId": 742
  },
  {
    "content": "The <span class=\"ff2 fs2\">sample</span> function can be used to draw random samples from a probability distribution or Markov Chain.",
    "hierarchy": [
      "sample"
    ],
    "pageId": 742
  },
  {
    "content": "probability distribution | <span class=\"ff2 fs2\">Markov Chain</span>: The distribution or Markov Chain to sample.",
    "hierarchy": [
      "sample",
      "sample Parameters"
    ],
    "pageId": 742
  },
  {
    "content": "integer: (Optional) Sample size. Defaults to 1.",
    "hierarchy": [
      "sample",
      "sample Parameters"
    ],
    "pageId": 742
  },
  {
    "content": "Either a single numeric random sample, or a numeric array depending on the sample size parameter.",
    "hierarchy": [
      "sample",
      "sample Returns"
    ],
    "pageId": 742
  },
  {
    "content": "sample(poissonDistribution(5)) // Returns a single random sample from a poissonDistribution with\nmean of 5.\nsample(poissonDistribution(5), 1000) // Returns 1000 random samples from poissonDistribution with\na mean of 5.\nsample(markovChain(transitionMatrix), 1000) // Returns 1000 random samples from a Markov Chain.",
    "hierarchy": [
      "sample",
      "sample Syntax"
    ],
    "pageId": 742
  },
  {
    "content": "The <span class=\"ff2 fs2\">scalarAdd</span> function adds a scalar value to every value in a numeric array or matrix. When working with\nnumeric arrays, <span class=\"ff2 fs2\">scalarAdd</span> returns a new array with the new values. When working with a matrix, <span class=\"ff2 fs2\">scalarAdd</span>\nreturns a new matrix with new values.",
    "hierarchy": [
      "scalarAdd"
    ],
    "pageId": 742
  },
  {
    "content": "number<span class=\"code\">: value to add </span>numeric array<span class=\"code\"> | </span>matrix<span class=\"code\">: the numeric array or matrix to add the value to.</span>",
    "hierarchy": [
      "scalarAdd",
      "scalarAdd Parameters"
    ],
    "pageId": 742
  },
  {
    "content": "scalarAdd(number, numericArray) // Adds the number to each element in the number in the array.\nscalarAdd(number, matrix) // Adds the number to each value in a matrix",
    "hierarchy": [
      "scalarAdd",
      "scalarAdd Syntax"
    ],
    "pageId": 742
  },
  {
    "content": "numericArray | matrix: Depending on what is being operated on.",
    "hierarchy": [
      "scalarAdd",
      "scalarAdd Returns"
    ],
    "pageId": 742
  },
  {
    "content": "The <span class=\"code\">scalarDivide</span> function divides each number in numeric array or matrix by a scalar value. When working\nwith numeric arrays, <span class=\"code\">scalarDivide</span> returns a new array with the new values. When working with a matrix,\nscalarDivide<span class=\"ff2 fs1\"> returns a new matrix with new values.</span>",
    "hierarchy": [
      "scalarDivide"
    ],
    "pageId": 743
  },
  {
    "content": "number<span class=\"ff2 fs1\">: value to divide by </span>numeric array<span class=\"ff2 fs1\"> | </span>matrix<span class=\"ff2 fs1\">: the numeric array or matrix to divide by the value to.</span>",
    "hierarchy": [
      "scalarDivide",
      "scalarDivide Parameters"
    ],
    "pageId": 743
  },
  {
    "content": "scalarDivide(number, numericArray) // Divides each element in the numeric array by the number.\nscalarDivide(number, matrix) // Divides each element in the matrix by the number.",
    "hierarchy": [
      "scalarDivide",
      "scalarDivide Syntax"
    ],
    "pageId": 743
  },
  {
    "content": "numericArray | matrix: depending on what is being operated on.",
    "hierarchy": [
      "scalarDivide",
      "scalarDivide Returns"
    ],
    "pageId": 743
  },
  {
    "content": "The <span class=\"code\">scalarMultiply</span> function multiplies each element in a numeric array or matrix by a scalar value. When\nworking with numeric arrays, <span class=\"code\">scalarMultiply</span> returns a new array with the new values. When working with\na matrix, <span class=\"code\">scalarMultiply</span> returns a new matrix with new values.",
    "hierarchy": [
      "scalarMultiply"
    ],
    "pageId": 743
  },
  {
    "content": "number<span class=\"ff2 fs1\">: value to divide by </span>numeric array<span class=\"ff2 fs1\"> | </span>matrix<span class=\"ff2 fs1\">: the numeric array or matrix to divide by the value to.</span>",
    "hierarchy": [
      "scalarMultiply",
      "scalarMultiply Parameters"
    ],
    "pageId": 743
  },
  {
    "content": "scalarMultiply(number, numericArray) // Multiplies each element in the numeric array by the\nnumber.\nscalarMultiply(number, matrix) // Multiplies each element in the matrix by the number.",
    "hierarchy": [
      "scalarMultiply",
      "scalarMultiply Syntax"
    ],
    "pageId": 743
  },
  {
    "content": "numericArray | matrix: depending on what is being operated on",
    "hierarchy": [
      "scalarMultiply",
      "scalarMultiply Returns"
    ],
    "pageId": 743
  },
  {
    "content": "The <span class=\"code\">scalarSubtract</span> function subtracts a scalar value from every value in a numeric array or matrix. When\nworking with numeric arrays, <span class=\"code\">scalarSubtract</span> returns a new array with the new values. When working with\na matrix, <span class=\"code\">scalarSubtract</span> returns a new matrix with new values.",
    "hierarchy": [
      "scalarSubtract"
    ],
    "pageId": 743
  },
  {
    "content": "number<span class=\"ff2 fs1\">: value to add </span>numeric array<span class=\"ff2 fs1\"> | </span>matrix<span class=\"ff2 fs1\">: the numeric array or matrix to subtract the value from.</span>",
    "hierarchy": [
      "scalarSubtract",
      "scalarSubtract Parameters"
    ],
    "pageId": 743
  },
  {
    "content": "scalarSubtract(number, numericArray) // Subtracts the number from each element in the number in\nthe array.\nscalarSubtract(number, matrix) // Subtracts the number from each value in a matrix",
    "hierarchy": [
      "scalarSubtract Syntax"
    ],
    "pageId": 744
  },
  {
    "content": "numericArray | matrix: depending on what is being operated on.",
    "hierarchy": [
      "scalarSubtract Returns"
    ],
    "pageId": 744
  },
  {
    "content": "The <span class=\"ff2 fs2\">scale</span> function multiplies all the elements of an array by a number.",
    "hierarchy": [
      "scale"
    ],
    "pageId": 744
  },
  {
    "content": "\nnumber",
    "hierarchy": [
      "scale",
      "scale Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "scale",
      "scale Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "scale(number, numericArray)",
    "hierarchy": [
      "scale",
      "scale Syntax"
    ],
    "pageId": 744
  },
  {
    "content": "The <span class=\"ff2 fs2\">sequence</span> function returns an array of numbers based on its parameters.",
    "hierarchy": [
      "sequence"
    ],
    "pageId": 744
  },
  {
    "content": "\nlength",
    "hierarchy": [
      "sequence",
      "sequence Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "\nstart",
    "hierarchy": [
      "sequence",
      "sequence Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "\nstride",
    "hierarchy": [
      "sequence",
      "sequence Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "sequence(100, 0, 1) // Returns a sequence of length 100, starting from 0 with a stride of 1.",
    "hierarchy": [
      "sequence",
      "sequence Syntax"
    ],
    "pageId": 744
  },
  {
    "content": "The <span class=\"ff2 fs2\">setAttributes</span> function sets an attributes map of a <span class=\"ff2 fs2\">matrix</span>.",
    "hierarchy": [
      "setAttributes"
    ],
    "pageId": 744
  },
  {
    "content": "matrix : The matrix to set the attributes map to.",
    "hierarchy": [
      "setAttributes",
      "setAttributes Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "map : The map of attributes to set on the matrix.",
    "hierarchy": [
      "setAttributes",
      "setAttributes Parameters"
    ],
    "pageId": 744
  },
  {
    "content": "setAttributes(matrix, map)",
    "hierarchy": [
      "setAttributes Syntax"
    ],
    "pageId": 745
  },
  {
    "content": "matrix : The matrix with the attributes set.",
    "hierarchy": [
      "setAttributes Returns"
    ],
    "pageId": 745
  },
  {
    "content": "The <span class=\"ff2 fs2\">setColumnLabels</span> function sets the columns labels of a matrix.",
    "hierarchy": [
      "setColumnLabels"
    ],
    "pageId": 745
  },
  {
    "content": "matrix: The matrix to set the column labels to.",
    "hierarchy": [
      "setColumnLabels",
      "setColumnLabels Parameters"
    ],
    "pageId": 745
  },
  {
    "content": "string array : The column labels to set the matrix",
    "hierarchy": [
      "setColumnLabels",
      "setColumnLabels Parameters"
    ],
    "pageId": 745
  },
  {
    "content": "setColumnLabels(matrix, labels)",
    "hierarchy": [
      "setColumnLabels",
      "setColumnLabels Syntax"
    ],
    "pageId": 745
  },
  {
    "content": "matrix : The matrix with the labels set.",
    "hierarchy": [
      "setColumnLabels",
      "setColumnLabels Returns"
    ],
    "pageId": 745
  },
  {
    "content": "The <span class=\"ff2 fs2\">setRowLabels</span> function sets the row labels of a matrix.",
    "hierarchy": [
      "setRowLabels"
    ],
    "pageId": 745
  },
  {
    "content": "matrix: The matrix to set the row labels to.",
    "hierarchy": [
      "setRowLabels",
      "setRowLabels Parameters"
    ],
    "pageId": 745
  },
  {
    "content": "string array : The row labels to set to the matrix",
    "hierarchy": [
      "setRowLabels",
      "setRowLabels Parameters"
    ],
    "pageId": 745
  },
  {
    "content": "setRowLabels(matrix, labels)",
    "hierarchy": [
      "setRowLabels",
      "setRowLabels Syntax"
    ],
    "pageId": 745
  },
  {
    "content": "matrix : The matrix with the labels set.",
    "hierarchy": [
      "setRowLabels",
      "setRowLabels Returns"
    ],
    "pageId": 745
  },
  {
    "content": "The <span class=\"ff2 fs2\">sin</span> function returns the trigonometric sine of a number.",
    "hierarchy": [
      "sin"
    ],
    "pageId": 745
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the sine of.",
    "hierarchy": [
      "sin",
      "sin Parameters"
    ],
    "pageId": 745
  },
  {
    "content": "sin(100.4)  // returns the sine of 100.4\nsine(fieldA) // returns the sine for fieldA.\nif(gt(fieldA,fieldB),sin(fieldA),sin(fieldB)) // if fieldA > fieldB then return the sine of\nfieldA, else return the sine of fieldB",
    "hierarchy": [
      "sin Syntax"
    ],
    "pageId": 746
  },
  {
    "content": "The <span class=\"ff2 fs2\">spline</span> function performs a cubic spline interpolation (<span class=\"link\">https://en.wikiversity.org/wiki/</span>\nCubic_Spline_Interpolation<span class=\"fc1\">) of a curve given a set of x,y coordinates. The return value of the spline function</span>\nis an interpolation function which can be used to <span class=\"link\">predict</span> values along the curve and generate a <span class=\"link\">derivative</span> of\nthe curve.",
    "hierarchy": [
      "spline"
    ],
    "pageId": 746
  },
  {
    "content": "numeric array: (Optional) x values. If omitted a sequence will be created for the x values.",
    "hierarchy": [
      "spline",
      "spline Parameters"
    ],
    "pageId": 746
  },
  {
    "content": "numeric array: y values",
    "hierarchy": [
      "spline",
      "spline Parameters"
    ],
    "pageId": 746
  },
  {
    "content": "spline(yValues) // This creates the xValues automatically and fits a spline through the data\npoints.\nspline(xValues, yValues) // This will fit a spline through the data points.",
    "hierarchy": [
      "spline",
      "spline Syntax"
    ],
    "pageId": 746
  },
  {
    "content": "function: the function can be treated as both a <span class=\"ff2 fs2\">numeric array</span> and <span class=\"ff2 fs2\">function</span>.",
    "hierarchy": [
      "spline",
      "spline Returns"
    ],
    "pageId": 746
  },
  {
    "content": "The <span class=\"ff2 fs2\">sqrt</span> function returns the trigonometric square root of a number.",
    "hierarchy": [
      "sqrt"
    ],
    "pageId": 746
  },
  {
    "content": "Field Name | Raw Number | Number Evaluator: The value to return the square root of.",
    "hierarchy": [
      "sqrt",
      "sqrt Parameters"
    ],
    "pageId": 746
  },
  {
    "content": "sqrt(100.4)  // returns the square root of 100.4\nsqrt(fieldA) // returns the square root for fieldA.\nif(gt(fieldA,fieldB),sqrt(fieldA),sqrt(fieldB)) // if fieldA > fieldB then return the sqrt of\nfieldA, else return the sqrt of fieldB",
    "hierarchy": [
      "sqrt",
      "sqrt Syntax"
    ],
    "pageId": 746
  },
  {
    "content": "The <span class=\"ff2 fs2\">standardize</span> function standardizes a numeric array so that values within the array have a mean of 0 and\nstandard deviation of 1.",
    "hierarchy": [
      "standardize"
    ],
    "pageId": 746
  },
  {
    "content": "numeric array: the array to standardize",
    "hierarchy": [
      "standardize Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "standardize(numericArray)",
    "hierarchy": [
      "standardize Syntax"
    ],
    "pageId": 747
  },
  {
    "content": "numeric array: the standardized values",
    "hierarchy": [
      "standardize Returns"
    ],
    "pageId": 747
  },
  {
    "content": "The <span class=\"code\">sub</span> function will take 2 or more numeric values and subtract them, from left to right. The <span class=\"code\">sub</span> function\nwill fail to execute if any of the values are non-numeric. If a null value is found then <span class=\"code\">null</span> will be returned as\nthe result.",
    "hierarchy": [
      "sub"
    ],
    "pageId": 747
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "sub",
      "sub Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "sub",
      "sub Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "\n……",
    "hierarchy": [
      "sub",
      "sub Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "\nField Name | Raw Number | Number Evaluator",
    "hierarchy": [
      "sub",
      "sub Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "The expressions below show the various ways in which you can use the <span class=\"code\">sub</span> evaluator. The number of these\nparameters does not matter and is not limited except that at least two parameters are required. Returns a\nnumeric value.",
    "hierarchy": [
      "sub",
      "sub Syntax"
    ],
    "pageId": 747
  },
  {
    "content": "sub(1,2,3,4) // 1 - 2 - 3 - 4\nsub(1,fieldA) // 1 - value of fieldA\nsub(fieldA,1.4) // value of fieldA - 1.4\nsub(fieldA,fieldB,fieldC) // value of fieldA - value of fieldB - value of fieldC\nsub(fieldA,div(fieldA,fieldB)) // value of fieldA - (value of fieldA / value of fieldB)\nif(gt(fieldA,fieldB),sub(fieldA,fieldB),sub(fieldB,fieldA)) // if fieldA > fieldB then fieldA -\nfieldB, else fieldB - field",
    "hierarchy": [
      "sub",
      "sub Syntax"
    ],
    "pageId": 747
  },
  {
    "content": "The <span class=\"code\">sumDifference</span> function calculates the sum of the differences following an element-by-element\nsubtraction between two numeric arrays.",
    "hierarchy": [
      "sumDifference"
    ],
    "pageId": 747
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "sumDifference",
      "sumDifference Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "\nnumeric array",
    "hierarchy": [
      "sumDifference",
      "sumDifference Parameters"
    ],
    "pageId": 747
  },
  {
    "content": "A numeric.",
    "hierarchy": [
      "sumDifference Returns"
    ],
    "pageId": 748
  },
  {
    "content": "sumDifference(numericArray, numericArray)",
    "hierarchy": [
      "sumDifference Syntax"
    ],
    "pageId": 748
  },
  {
    "content": "The <span class=\"code\">sumColumns</span> function sums the columns in a matrix and returns a numeric array with the result.",
    "hierarchy": [
      "sumColumns"
    ],
    "pageId": 748
  },
  {
    "content": "matrix: the matrix to operate on",
    "hierarchy": [
      "sumColumns",
      "sumColumns Parameters"
    ],
    "pageId": 748
  },
  {
    "content": "sumColumns(matrix)",
    "hierarchy": [
      "sumColumns",
      "sumColumns Syntax"
    ],
    "pageId": 748
  },
  {
    "content": "numeric array: the sum of the columns",
    "hierarchy": [
      "sumColumns",
      "sumColumns Returns"
    ],
    "pageId": 748
  },
  {
    "content": "The <span class=\"code\">sumRows</span> function sums the rows in a matrix and returns a numeric array with the result.",
    "hierarchy": [
      "sumRows"
    ],
    "pageId": 748
  },
  {
    "content": "matrix: the matrix to operate on",
    "hierarchy": [
      "sumRows",
      "sumRows Parameters"
    ],
    "pageId": 748
  },
  {
    "content": "sumRows(matrix)",
    "hierarchy": [
      "sumRows",
      "sumRows Syntax"
    ],
    "pageId": 748
  },
  {
    "content": "numeric array: sum of the rows.",
    "hierarchy": [
      "sumRows",
      "sumRows Returns"
    ],
    "pageId": 748
  },
  {
    "content": "The <span class=\"code\">sumSq</span> function returns the sum-of-squares of the values in a numeric array.",
    "hierarchy": [
      "sumSq"
    ],
    "pageId": 748
  },
  {
    "content": "numeric array : The numeric array to compute the sumSq of.",
    "hierarchy": [
      "sumSq",
      "sumSq Parameters"
    ],
    "pageId": 748
  },
  {
    "content": "sumSq(numericArray)",
    "hierarchy": [
      "sumSq Syntax"
    ],
    "pageId": 749
  },
  {
    "content": "numeric : result of the sumSq calculation",
    "hierarchy": [
      "sumSq Returns"
    ],
    "pageId": 749
  },
  {
    "content": "The <span class=\"ff2 fs2\">transpose</span> function <span class=\"link\">transposes</span> a matrix .",
    "hierarchy": [
      "transpose"
    ],
    "pageId": 749
  },
  {
    "content": "matrix: the matrix to transpose",
    "hierarchy": [
      "transpose",
      "transpose Parameters"
    ],
    "pageId": 749
  },
  {
    "content": "transpose(matrix)",
    "hierarchy": [
      "transpose",
      "transpose Syntax"
    ],
    "pageId": 749
  },
  {
    "content": "matrix: the transposed matrix",
    "hierarchy": [
      "transpose",
      "transpose Returns"
    ],
    "pageId": 749
  },
  {
    "content": "The <span class=\"ff2 fs2\">triangularDistribution</span> function returns a <span class=\"link\">triangular probability distribution</span> based on its parameters.\nThis function is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nprobability<span class=\"code\"> and </span>cumulativeProbability<span class=\"code\"> functions.</span>",
    "hierarchy": [
      "triangularDistribution"
    ],
    "pageId": 749
  },
  {
    "content": "double: low value",
    "hierarchy": [
      "triangularDistribution",
      "triangularDistribution Parameters"
    ],
    "pageId": 749
  },
  {
    "content": "double: most likely value",
    "hierarchy": [
      "triangularDistribution",
      "triangularDistribution Parameters"
    ],
    "pageId": 749
  },
  {
    "content": "double: high value",
    "hierarchy": [
      "triangularDistribution",
      "triangularDistribution Parameters"
    ],
    "pageId": 749
  },
  {
    "content": "triangularDistribution(10, 15, 20) // A triangular distribution with a low value of 10, most\nlikely value of 15 and high value of 20.",
    "hierarchy": [
      "triangularDistribution",
      "triangularDistribution Syntax"
    ],
    "pageId": 749
  },
  {
    "content": "Probability distribution function",
    "hierarchy": [
      "triangularDistribution",
      "triangularDistribution Returns"
    ],
    "pageId": 749
  },
  {
    "content": "The <span class=\"ff2 fs2\">uniformDistribution</span> function returns a <span class=\"link\">continuous uniform probability distribution</span> based on its",
    "hierarchy": [
      "uniformDistribution"
    ],
    "pageId": 749
  },
  {
    "content": "parameters. See the <span class=\"link\">uniformIntegerDistribution</span> to work with discrete uniform distributions. This function\nis part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span> and\ncumulativeProbability<span class=\"ff1 fs0 fc0\"> functions.</span>",
    "hierarchy": [
    ],
    "pageId": 750
  },
  {
    "content": "double: start",
    "hierarchy": [
      "uniforDistribution Parameters"
    ],
    "pageId": 750
  },
  {
    "content": "double: end",
    "hierarchy": [
      "uniforDistribution Parameters"
    ],
    "pageId": 750
  },
  {
    "content": "Probability distribution function.",
    "hierarchy": [
      "uniformDistribution Returns"
    ],
    "pageId": 750
  },
  {
    "content": "uniformDistribution(0.0, 100.0)",
    "hierarchy": [
      "uniformDistribution Syntax"
    ],
    "pageId": 750
  },
  {
    "content": "The <span class=\"ff2 fs1\">uniformIntegerDistribution</span> function returns a <span class=\"link\">discrete uniform probability distribution</span> based on its\nparameters. See the <span class=\"link\">uniformDistribution</span> to work with continuous uniform distributions. This function is\npart of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>, <span class=\"link\">probability</span> and\ncumulativeProbability<span class=\"ff1 fs0 fc0\"> functions.</span>",
    "hierarchy": [
      "uniformIntegerDistribution"
    ],
    "pageId": 750
  },
  {
    "content": "integer: start",
    "hierarchy": [
      "uniformIntegerDistribution",
      "uniformIntegerDistribution Parameters"
    ],
    "pageId": 750
  },
  {
    "content": "integer: end",
    "hierarchy": [
      "uniformIntegerDistribution",
      "uniformIntegerDistribution Parameters"
    ],
    "pageId": 750
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "uniformIntegerDistribution",
      "uniformIntegerDistribution Returns"
    ],
    "pageId": 750
  },
  {
    "content": "uniformDistribution(1, 6)",
    "hierarchy": [
      "uniformIntegerDistribution",
      "uniformIntegerDistribution Syntax"
    ],
    "pageId": 750
  },
  {
    "content": "The <span class=\"ff2 fs1\">unitize</span> function scales numeric arrays to a magnitude of 1, often called <span class=\"link\">unit vectors</span>. The unitize\nfunction can operate on both numeric arrays and matrices.",
    "hierarchy": [
      "unitize"
    ],
    "pageId": 750
  },
  {
    "content": "When operating on a matrix the unitize function unitizes each row of the matrix.",
    "hierarchy": [
      "unitize"
    ],
    "pageId": 750
  },
  {
    "content": "numeric array | <span class=\"ff2 fs1\">matrix</span>: The array or matrix to unitize",
    "hierarchy": [
      "unitize",
      "unitize Parameters"
    ],
    "pageId": 750
  },
  {
    "content": "unitize(numericArray) // Unitize a numeric array\nunitize(matrix) // Unitize each row in a matrix",
    "hierarchy": [
      "unitize Syntax"
    ],
    "pageId": 751
  },
  {
    "content": "numeric array | matrix",
    "hierarchy": [
      "unitize Returns"
    ],
    "pageId": 751
  },
  {
    "content": "The <span class=\"ff2 fs2\">weibullDistribution</span> function returns a <span class=\"link\">Weibull probability distribution</span> based on its parameters. This\nfunction is part of the probability distribution framework and is designed to work with the <span class=\"link\">sample</span>,\nkolmogorovSmirnov<span class=\"code\"> and </span>cumulativeProbability<span class=\"code\"> functions.</span>",
    "hierarchy": [
      "weibullDistribution"
    ],
    "pageId": 751
  },
  {
    "content": "double: shape",
    "hierarchy": [
      "weibullDistribution",
      "weibullDistribution Parameters"
    ],
    "pageId": 751
  },
  {
    "content": "double: scale",
    "hierarchy": [
      "weibullDistribution",
      "weibullDistribution Parameters"
    ],
    "pageId": 751
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "weibullDistribution",
      "weibullDistribution Returns"
    ],
    "pageId": 751
  },
  {
    "content": "weibullDistribution(.5, 10)",
    "hierarchy": [
      "weibullDistribution",
      "weibullDistribution Syntax"
    ],
    "pageId": 751
  },
  {
    "content": "The <span class=\"ff2 fs2\">zipFDistribution</span> function returns a <span class=\"link\">ZipF distribution</span> based on its parameters. This function is part of\nthe probability distribution framework and is designed to work with the <span class=\"link\">sample</span>, <span class=\"link\">probability</span> and\ncumulativeProbability<span class=\"code\"> functions.</span>",
    "hierarchy": [
      "zipFDistribution"
    ],
    "pageId": 751
  },
  {
    "content": "integer: size",
    "hierarchy": [
      "zipFDistribution",
      "zipFDistribution Parameters"
    ],
    "pageId": 751
  },
  {
    "content": "double: exponent",
    "hierarchy": [
      "zipFDistribution",
      "zipFDistribution Parameters"
    ],
    "pageId": 751
  },
  {
    "content": "A probability distribution function.",
    "hierarchy": [
      "zipFDistribution",
      "zipFDistribution Returns"
    ],
    "pageId": 751
  },
  {
    "content": "zipFDistribution(5000, 1.0)",
    "hierarchy": [
      "zipFDistribution",
      "zipFDistribution Syntax"
    ],
    "pageId": 751
  },
  {
    "content": "The Streaming Expression language includes a powerful statistical programing syntax with many of the\nfeatures of a functional programming language.",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "The syntax includes variables, data structures and a growing set of mathematical functions.",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Using the statistical programing syntax, Solr's powerful data retrieval capabilities can be combined with in-\ndepth statistical analysis.",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "The data retrieval methods include:",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "SQL",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "time series aggregation",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "random sampling",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "faceted aggregation",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "K-Nearest Neighbor (KNN) searches",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "topic message queues",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "MapReduce (parallel relational algebra)",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "JDBC calls to outside databases",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Graph Expressions",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Once the data is retrieved, the statistical programming syntax can be used to create arrays from the data so\nit can be manipulated, transformed and analyzed.",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "The statistical function library includes functions that perform:",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Correlation",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Cross-correlation",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Covariance",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Moving averages",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Percentiles",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Simple regression and prediction",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Analysis of covariance (ANOVA)",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Histograms",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Convolution",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Euclidean distance",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Descriptive statistics",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Rank transformation",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Normalization transformation",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Sequences",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "Array manipulation functions (creation, copying, length, scaling, reverse, etc.)",
    "hierarchy": [
      "Statistical Programming"
    ],
    "pageId": 752
  },
  {
    "content": "The statistical function library is backed by <span class=\"link\">Apache Commons Math library</span>. A full discussion of many of the\nmath functions available to streaming expressions is available in the section <span class=\"link\">Stream Evaluator Reference</span>.",
    "hierarchy": [
    ],
    "pageId": 753
  },
  {
    "content": "This document provides an overview of the how to apply the variables, data structures and mathematical\nfunctions.",
    "hierarchy": [
    ],
    "pageId": 753
  },
  {
    "content": "Like all streaming expressions, the statistical functions are run by Solr's <span class=\"code\">/stream</span> handler.\nFor an overview of this handler, see the section <span class=\"link\">Streaming Expressions</span>.",
    "hierarchy": [
    ],
    "pageId": 753
  },
  {
    "content": "Streaming expressions contain a suite of mathematical functions which can be called on their own or as part\nof a larger expression.",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "Solr's <span class=\"code\">/stream</span> handler evaluates the mathematical expression and returns a result.",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "For example, if you send the following expression to the <span class=\"code\">/stream</span> handler:",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "add(1, 1)",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "You get the following response:",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "{\nÊ <span class=\"fc4\">\"result-set\"</span>: {\nÊ   <span class=\"fc4\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc4\">\"return-value\"</span>: <span class=\"fc5\">2</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc4\">\"EOF\"</span>: <span class=\"fc6\">true</span>,\nÊ       <span class=\"fc4\">\"RESPONSE_TIME\"</span>: <span class=\"fc5\">2</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "You can nest math functions within each other. For example:",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "pow(10, add(1,1))",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
      "Math Functions"
    ],
    "pageId": 753
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"return-value\"</span>: <span class=\"fc2\">100</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 754
  },
  {
    "content": "You can also perform math on a stream of Tuples. For example:",
    "hierarchy": [
    ],
    "pageId": 754
  },
  {
    "content": "select(search(collection2, q=\"*:*\", fl=\"price_f\", sort=\"price_f desc\", rows=\"3\"),\nÊ      price_f,\nÊ      mult(price_f, 10) as newPrice)",
    "hierarchy": [
    ],
    "pageId": 754
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
    ],
    "pageId": 754
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.99999994</span>,\nÊ       <span class=\"fc1\">\"newPrice\"</span>: <span class=\"fc2\">9.9999994</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.99999994</span>,\nÊ       <span class=\"fc1\">\"newPrice\"</span>: <span class=\"fc2\">9.9999994</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.9999992</span>,\nÊ       <span class=\"fc1\">\"newPrice\"</span>: <span class=\"fc2\">9.999992</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">3</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 754
  },
  {
    "content": "Several types of data can be manipulated with the statistical programming syntax. The following sections",
    "hierarchy": [
      "Data Structures"
    ],
    "pageId": 754
  },
  {
    "content": "explore <span class=\"link\">arrays</span>, <span class=\"link\">tuples</span>, and <span class=\"link\">lists</span>.",
    "hierarchy": [
    ],
    "pageId": 755
  },
  {
    "content": "The first data structure we'll explore is the array.",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "We can create an array with the <span class=\"code\">array</span> function:",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "array(1, 2, 3)",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"result-set\"</span>: {\nÊ   <span class=\"fc3\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc3\">\"return-value\"</span>: [\nÊ         <span class=\"fc4\">1</span>,\nÊ         <span class=\"fc4\">2</span>,\nÊ         <span class=\"fc4\">3</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc3\">\"EOF\"</span>: <span class=\"fc5\">true</span>,\nÊ       <span class=\"fc3\">\"RESPONSE_TIME\"</span>: <span class=\"fc4\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "We can nest arrays within a matrix function to return matrix:",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "matrix(array(1, 2, 3),\nÊ      array(4, 5, 6))",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
      "Arrays"
    ],
    "pageId": 755
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"return-value\"</span>: [\nÊ         [\nÊ           <span class=\"fc2\">1</span>,\nÊ           <span class=\"fc2\">2</span>,\nÊ           <span class=\"fc2\">3</span>\nÊ         ],\nÊ         [\nÊ           <span class=\"fc2\">4</span>,\nÊ           <span class=\"fc2\">5</span>,\nÊ           <span class=\"fc2\">6</span>\nÊ         ]\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 756
  },
  {
    "content": "We can manipulate arrays with functions. For example, we can reverse an array with the <span class=\"ff1 fs1\">rev</span> function:",
    "hierarchy": [
    ],
    "pageId": 756
  },
  {
    "content": "rev(array(1, 2, 3))",
    "hierarchy": [
    ],
    "pageId": 756
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
    ],
    "pageId": 756
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"return-value\"</span>: [\nÊ         <span class=\"fc2\">3</span>,\nÊ         <span class=\"fc2\">2</span>,\nÊ         <span class=\"fc2\">1</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 756
  },
  {
    "content": "Arrays can also be built and returned by functions. For example, the <span class=\"ff2 fs1\">sequence</span> function:",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "sequence(5,0,1)",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "This returns an array of size <span class=\"ff2 fs1\">5</span> starting from <span class=\"ff2 fs1\">0</span> with a stride of <span class=\"ff2 fs1\">1</span>.",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"return-value\"</span>: [\nÊ         <span class=\"fc2\">0</span>,\nÊ         <span class=\"fc2\">1</span>,\nÊ         <span class=\"fc2\">2</span>,\nÊ         <span class=\"fc2\">3</span>,\nÊ         <span class=\"fc2\">4</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">4</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "We can perform math on an array. For example, we can scale an array with the <span class=\"ff2 fs1\">scale</span> function:",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "scale(10, sequence(5,0,1))",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
    ],
    "pageId": 757
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"return-value\"</span>: [\nÊ         <span class=\"fc2\">0</span>,\nÊ         <span class=\"fc2\">10</span>,\nÊ         <span class=\"fc2\">20</span>,\nÊ         <span class=\"fc2\">30</span>,\nÊ         <span class=\"fc2\">40</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 758
  },
  {
    "content": "We can perform statistical analysis on arrays For example, we can correlate two sequences with the <span class=\"ff1 fs1\">corr</span>\nfunction:",
    "hierarchy": [
    ],
    "pageId": 758
  },
  {
    "content": "corr(sequence(5,1,1), sequence(5,10,10))",
    "hierarchy": [
    ],
    "pageId": 758
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
    ],
    "pageId": 758
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"return-value\"</span>: <span class=\"fc2\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">1</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 758
  },
  {
    "content": "The tuple is the next data structure we'll explore.",
    "hierarchy": [
      "Tuples"
    ],
    "pageId": 758
  },
  {
    "content": "The <span class=\"ff1 fs1\">tuple</span> function returns a map of name/value pairs. A tuple is a very flexible data structure that can hold\nvalues that are strings, numerics, arrays and lists of tuples.",
    "hierarchy": [
      "Tuples"
    ],
    "pageId": 758
  },
  {
    "content": "A tuple can be used to return a complex result from a statistical expression.",
    "hierarchy": [
      "Tuples"
    ],
    "pageId": 758
  },
  {
    "content": "Here is an example:",
    "hierarchy": [
    ],
    "pageId": 759
  },
  {
    "content": "tuple(title=\"hello world\",\nÊ     array1=array(1,2,3,4),\nÊ     array2=array(4,5,6,7))",
    "hierarchy": [
    ],
    "pageId": 759
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
    ],
    "pageId": 759
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"title\"</span>: <span class=\"fc2\">\"hello world\"</span>,\nÊ       <span class=\"fc1\">\"array1\"</span>: [\nÊ         <span class=\"fc3\">1</span>,\nÊ         <span class=\"fc3\">2</span>,\nÊ         <span class=\"fc3\">3</span>,\nÊ         <span class=\"fc3\">4</span>\nÊ       ],\nÊ       <span class=\"fc1\">\"array2\"</span>: [\nÊ         <span class=\"fc3\">4</span>,\nÊ         <span class=\"fc3\">5</span>,\nÊ         <span class=\"fc3\">6</span>,\nÊ         <span class=\"fc3\">7</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc4\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc3\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 759
  },
  {
    "content": "Next we have the list data structure.",
    "hierarchy": [
      "Lists"
    ],
    "pageId": 759
  },
  {
    "content": "The <span class=\"ff2 fs1\">list</span> function is a data structure that wraps streaming expressions and emits all the tuples from the\nwrapped expressions as a single concatenated stream.",
    "hierarchy": [
      "Lists"
    ],
    "pageId": 759
  },
  {
    "content": "Below is an example of a list of tuples:",
    "hierarchy": [
      "Lists"
    ],
    "pageId": 759
  },
  {
    "content": "list(tuple(id=1, data=array(1, 2, 3)),\nÊ    tuple(id=2, data=array(10, 12, 14)))",
    "hierarchy": [
      "Lists"
    ],
    "pageId": 759
  },
  {
    "content": "Returns the following response:",
    "hierarchy": [
      "Lists"
    ],
    "pageId": 759
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"1\"</span>,\nÊ       <span class=\"fc1\">\"data\"</span>: [\nÊ         <span class=\"fc3\">1</span>,\nÊ         <span class=\"fc3\">2</span>,\nÊ         <span class=\"fc3\">3</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"2\"</span>,\nÊ       <span class=\"fc1\">\"data\"</span>: [\nÊ         <span class=\"fc3\">10</span>,\nÊ         <span class=\"fc3\">12</span>,\nÊ         <span class=\"fc3\">14</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc4\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc3\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 760
  },
  {
    "content": "The <span class=\"ff1 fs2\">let</span> function sets variables and returns the last variable. The output of any statistical function can be set\nto a variable.",
    "hierarchy": [
      "Setting Variables with let"
    ],
    "pageId": 760
  },
  {
    "content": "Below is a simple example setting three variables <span class=\"ff1 fs2\">a</span>, <span class=\"ff1 fs2\">b</span> and <span class=\"ff1 fs2\">correlation</span>.",
    "hierarchy": [
      "Setting Variables with let"
    ],
    "pageId": 760
  },
  {
    "content": "let(a=array(1,2,3),\nÊ   b=array(10, 20, 30),\nÊ   correlation=corr(a, b))",
    "hierarchy": [
      "Setting Variables with let"
    ],
    "pageId": 760
  },
  {
    "content": "Here is the output:",
    "hierarchy": [
      "Setting Variables with let"
    ],
    "pageId": 760
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"correlation\"</span>: <span class=\"fc2\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 761
  },
  {
    "content": "All variables can be output by setting the <span class=\"ff1 fs1\">echo</span> variable to <span class=\"ff1 fs1\">true</span>.",
    "hierarchy": [
    ],
    "pageId": 761
  },
  {
    "content": "let(echo=true,\nÊ   a=array(1,2,3),\nÊ   b=array(10, 20, 30),\nÊ   correlation=corr(a, b))",
    "hierarchy": [
    ],
    "pageId": 761
  },
  {
    "content": "Here is the output:",
    "hierarchy": [
    ],
    "pageId": 761
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"a\"</span>: [\nÊ         <span class=\"fc2\">1</span>,\nÊ         <span class=\"fc2\">2</span>,\nÊ         <span class=\"fc2\">3</span>\nÊ       ],\nÊ       <span class=\"fc1\">\"b\"</span>: [\nÊ         <span class=\"fc2\">10</span>,\nÊ         <span class=\"fc2\">20</span>,\nÊ         <span class=\"fc2\">30</span>\nÊ       ],\nÊ       <span class=\"fc1\">\"correlation\"</span>: <span class=\"fc2\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">0</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 761
  },
  {
    "content": "Streaming expressions can also be used inside of a <span class=\"ff1 fs1\">let</span> expression in the following ways:",
    "hierarchy": [
    ],
    "pageId": 761
  },
  {
    "content": "<span class=\"ls1\">A variable can be set to the output of any streaming expression.</span>",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "<span class=\"ls1\">A streaming expression can be executed after all variables have been set. The variables can then be</span>\nreferenced by the streaming expression that is executed. The <span class=\"ff2 fs1\">let</span> expression will stream the tuples that\nare emitted by the final streaming expression.",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "Here is a very simple example:",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "let(a=random(collection2, q=\"*:*\", rows=\"3\", fl=\"price_f\"),\nÊ   b=random(collection2, q=\"*:*\", rows=\"3\", fl=\"price_f\"),\nÊ   tuple(sample1=a, sample2=b))",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "The <span class=\"ff2 fs1\">let</span> expression above is setting variables <span class=\"ff2 fs1\">a</span> and <span class=\"ff2 fs1\">b</span> to random samples taken from collection2.",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "The <span class=\"ff2 fs1\">let</span> function then executes the <span class=\"ff2 fs1\">tuple</span> streaming expression which references the two variables.",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "Here is the output:",
    "hierarchy": [
    ],
    "pageId": 762
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"sample1\"</span>: [\nÊ         {\nÊ           <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.39729273</span>\nÊ         },\nÊ         {\nÊ           <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.063344836</span>\nÊ         },\nÊ         {\nÊ           <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.42020327</span>\nÊ         }\nÊ       ],\nÊ       <span class=\"fc1\">\"sample2\"</span>: [\nÊ         {\nÊ           <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.659244</span>\nÊ         },\nÊ         {\nÊ           <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.58797807</span>\nÊ         },\nÊ         {\nÊ           <span class=\"fc1\">\"price_f\"</span>: <span class=\"fc2\">0.57520163</span>\nÊ         }\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">20</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 763
  },
  {
    "content": "The <span class=\"ff1 fs2\">col</span> function is used to move a column of numbers from a list of tuples into an <span class=\"ff1 fs2\">array</span>.",
    "hierarchy": [
      "Creating Arrays with col Function"
    ],
    "pageId": 763
  },
  {
    "content": "This is an important function because streaming expressions such as <span class=\"ff1 fs2\">sql</span>, <span class=\"ff1 fs2\">random</span> and <span class=\"ff1 fs2\">timeseries</span> return\ntuples, but the statistical functions operate on arrays.",
    "hierarchy": [
      "Creating Arrays with col Function"
    ],
    "pageId": 763
  },
  {
    "content": "Below is an example of the <span class=\"ff1 fs2\">col</span> function:",
    "hierarchy": [
      "Creating Arrays with col Function"
    ],
    "pageId": 763
  },
  {
    "content": "let(a=random(collection2, q=\"*:*\", rows=\"3\", fl=\"price_f\"),\nÊ   b=random(collection2, q=\"*:*\", rows=\"3\", fl=\"price_f\"),\nÊ   c=col(a, price_f),\nÊ   d=col(b, price_f),\nÊ   tuple(sample1=c, sample2=d))",
    "hierarchy": [
      "Creating Arrays with col Function"
    ],
    "pageId": 763
  },
  {
    "content": "The example above is using the <span class=\"ff2 fs1\">col</span> function to create arrays from the tuples stored in variables <span class=\"ff2 fs1\">a</span> and <span class=\"ff2 fs1\">b</span>.",
    "hierarchy": [
    ],
    "pageId": 764
  },
  {
    "content": "Variable <span class=\"ff2 fs1\">c</span> contains an array of values from the <span class=\"ff2 fs1\">price_f</span> field, taken from the tuples stored in variable <span class=\"ff2 fs1\">a</span>.",
    "hierarchy": [
    ],
    "pageId": 764
  },
  {
    "content": "Variable <span class=\"ff2 fs1\">d</span> contains an array of values from the <span class=\"ff2 fs1\">price_f</span> field, taken from the tuples stored in variable <span class=\"ff2 fs1\">b</span>.",
    "hierarchy": [
    ],
    "pageId": 764
  },
  {
    "content": "Also notice inn that the response <span class=\"ff2 fs1\">tuple</span> executed by <span class=\"ff2 fs1\">let</span> is pointing to the arrays in variables <span class=\"ff2 fs1\">c</span> and <span class=\"ff2 fs1\">d</span>.",
    "hierarchy": [
    ],
    "pageId": 764
  },
  {
    "content": "The response shows the arrays:",
    "hierarchy": [
    ],
    "pageId": 764
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"sample1\"</span>: [\nÊ         <span class=\"fc2\">0.06490427</span>,\nÊ         <span class=\"fc2\">0.6751543</span>,\nÊ         <span class=\"fc2\">0.07063508</span>\nÊ       ],\nÊ       <span class=\"fc1\">\"sample2\"</span>: [\nÊ         <span class=\"fc2\">0.8884564</span>,\nÊ         <span class=\"fc2\">0.8878821</span>,\nÊ         <span class=\"fc2\">0.3504665</span>\nÊ       ]\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc3\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc2\">17</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 764
  },
  {
    "content": "We've covered how the data structures, variables and a few statistical functions work. Let’s dive into an\nexample that puts these tools to use.",
    "hierarchy": [
      "Statistical Programming Example"
    ],
    "pageId": 764
  },
  {
    "content": "We have an existing hotel in <span class=\"code\">cityA</span> that is very profitable. We are contemplating opening up a new hotel in a\ndifferent city. We're considering 4 different cities: <span class=\"code\">cityB</span>, <span class=\"code\">cityC</span>, <span class=\"code\">cityD</span>, <span class=\"code\">cityE</span>. We’d like to open a hotel in a city\nthat has similar room rates to cityA.",
    "hierarchy": [
      "Statistical Programming Example",
      "Use Case"
    ],
    "pageId": 764
  },
  {
    "content": "How do we determine which of the 4 cities we're considering has room rates which are most similar to\ncityA?",
    "hierarchy": [
      "Statistical Programming Example",
      "Use Case"
    ],
    "pageId": 764
  },
  {
    "content": "We have a data set of un-aggregated hotel bookings. Each booking record has a rate and city.",
    "hierarchy": [
      "Statistical Programming Example",
      "The Data"
    ],
    "pageId": 764
  },
  {
    "content": "One approach would be to aggregate the data from each city and compare the mean room rates. This\napproach will give us some useful information, but the mean is a summary statistic which loses a significant\namount of information about the data. For example, we don't have an understanding of how the\ndistribution of room rates is impacting the mean.",
    "hierarchy": [
      "Can We Simply Aggregate?"
    ],
    "pageId": 765
  },
  {
    "content": "The median room rate provides another interesting data point but it's still not the entire picture. It’s sill just\none point of reference.",
    "hierarchy": [
      "Can We Simply Aggregate?"
    ],
    "pageId": 765
  },
  {
    "content": "Is there a way that we can compare the markets without losing valuable information in the data?",
    "hierarchy": [
      "Can We Simply Aggregate?"
    ],
    "pageId": 765
  },
  {
    "content": "The use case we're reasoning about can often be approached using a K-Nearest Neighbor (knn) algorithm.",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "K-Nearest Neighbor"
    ],
    "pageId": 765
  },
  {
    "content": "With knn we use a distance measure to compare vectors of data to find the k nearest neighbors to a specific\nvector.",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "K-Nearest Neighbor"
    ],
    "pageId": 765
  },
  {
    "content": "The streaming expression statistical function library has a function called <span class=\"code\">distance</span>. The <span class=\"code\">distance</span> function\ncomputes the Euclidean distance between two vectors. This looks promising for comparing vectors of room\nrates.",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "Euclidean Distance"
    ],
    "pageId": 765
  },
  {
    "content": "But how to create the vectors from a our data set? Remember we have un-aggregated room rates from each\nof the cities. How can we vectorize the data so it can be compared using the <span class=\"code\">distance</span> function.",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "Vectors"
    ],
    "pageId": 765
  },
  {
    "content": "We have a streaming expression that can retrieve a random sample from each of the cities. The name of this\nexpression is <span class=\"code\">random</span>. So we could take a random sample of 1000 room rates from each of the five cities.",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "Vectors"
    ],
    "pageId": 765
  },
  {
    "content": "But random vectors of room rates are not comparable because the distance algorithm compares values at\neach index in the vector. How can make these vectors comparable?",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "Vectors"
    ],
    "pageId": 765
  },
  {
    "content": "We can make them comparable by sorting them. Then as the distance algorithm moves along the vectors it\nwill be comparing room rates from lowest to highest in both cities.",
    "hierarchy": [
      "Can We Simply Aggregate?",
      "Vectors"
    ],
    "pageId": 765
  },
  {
    "content": "let(cityA=sort(random(bookings, q=\"city:cityA\", rows=\"1000\", fl=\"rate_d\"), by=\"rate_d asc\"),\nÊ   cityB=sort(random(bookings, q=\"city:cityB\", rows=\"1000\", fl=\"rate_d\"), by=\"rate_d asc\"),\nÊ   cityC=sort(random(bookings, q=\"city:cityC\", rows=\"1000\", fl=\"rate_d\"), by=\"rate_d asc\"),\nÊ   cityD=sort(random(bookings, q=\"city:cityD\", rows=\"1000\", fl=\"rate_d\"), by=\"rate_d asc\"),\nÊ   cityE=sort(random(bookings, q=\"city:cityE\", rows=\"1000\", fl=\"rate_d\"), by=\"rate_d asc\"),\nÊ   ratesA=col(cityA, rate_d),\nÊ   ratesB=col(cityB, rate_d),\nÊ   ratesC=col(cityC, rate_d),\nÊ   ratesD=col(cityD, rate_d),\nÊ   ratesE=col(cityE, rate_d),\nÊ   top(n=1,\nÊ       sort=\"distance asc\",\nÊ       list(tuple(city=B, distance=distance(ratesA, ratesB)),\nÊ            tuple(city=C, distance=distance(ratesA, ratesC)),\nÊ            tuple(city=D, distance=distance(ratesA, ratesD)),\nÊ            tuple(city=E, distance=distance(ratesA, ratesE)))))",
    "hierarchy": [
    ],
    "pageId": 766
  },
  {
    "content": "The <span class=\"ff1 fs1\">let</span> expression sets variables first.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "The first 5 variables (cityA, cityB, cityC, cityD, cityE), contain the random samples from the <span class=\"ff1 fs1\">bookings</span>\ncollection. The <span class=\"ff1 fs1\">random</span> function is pulling 1000 random samples from each city and including the <span class=\"ff1 fs1\">rate_d</span> field\nin the tuples that are returned.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "The <span class=\"ff1 fs1\">random</span> function is wrapped by a <span class=\"ff1 fs1\">sort</span> function which is sorting the tuples in ascending order based on\nthe <span class=\"ff1 fs1\">rate_d</span> field.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "The next five variables (ratesA, ratesB, ratesC, ratesD, ratesE) contain the arrays of room rates for each city.\nThe <span class=\"ff1 fs1\">col</span> function is used to move the <span class=\"ff1 fs1\">rate_d</span> field from the random sample tuples into an array for each city.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "Now we have five sorted vectors of room rates that we can compare with our <span class=\"ff1 fs1\">distance</span> function.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "After the variables are set the <span class=\"ff1 fs1\">let</span> expression runs the <span class=\"ff1 fs1\">top</span> expression.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "The <span class=\"ff1 fs1\">top</span> expression is wrapping a <span class=\"ff1 fs1\">list</span> of <span class=\"ff1 fs1\">tuples</span>. Inside each tuple the <span class=\"ff1 fs1\">distance</span> function is used to\ncompare the rateA vector with one of the other cities. The output of the distance function is stored in the\ndistance field in the tuple.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "The <span class=\"ff1 fs1\">list</span> function emits each <span class=\"ff1 fs1\">tuple</span> and the <span class=\"ff1 fs1\">top</span> function returns only the tuple with the lowest distance.",
    "hierarchy": [
      "The Code Explained"
    ],
    "pageId": 766
  },
  {
    "content": "Graph traversal with streaming expressions uses the <span class=\"ff1 fs1\">nodes</span> function to perform a breadth-first graph\ntraversal.",
    "hierarchy": [
      "Graph Traversal"
    ],
    "pageId": 766
  },
  {
    "content": "The <span class=\"ff1 fs1\">nodes</span> function can be combined with the <span class=\"ff1 fs1\">scoreNodes</span> function to provide recommendations. <span class=\"ff1 fs1\">nodes</span> can\nalso be combined with the wider streaming expression library to perform complex operations on gathered\nnode sets.",
    "hierarchy": [
      "Graph Traversal"
    ],
    "pageId": 766
  },
  {
    "content": "nodes<span class=\"code\"> traversals are distributed within a SolrCloud collection and can span collections.</span>",
    "hierarchy": [
      "Graph Traversal"
    ],
    "pageId": 766
  },
  {
    "content": "nodes<span class=\"ff2 fs1\"> is designed for use cases that involve zooming into a neighborhood in the graph and performing</span>\nprecise traversals to gather node sets and aggregations. In these types of use cases <span class=\"ff1 fs0\">nodes</span> will often provide\nsub-second performance. Some sample use cases are provided later in the document.",
    "hierarchy": [
    ],
    "pageId": 767
  },
  {
    "content": "This document assumes a basic understanding of graph terminology and streaming\nexpressions. You can begin exploring graph traversal concepts with this <span class=\"link\">Wikipedia article</span>.\nMore details about streaming expressions are available in this Guide, in the section\nStreaming Expressions<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 767
  },
  {
    "content": "We'll start with the most basic syntax and slowly build up more complexity. The most basic syntax for <span class=\"ff1 fs0\">nodes</span>\nis:",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "nodes(emails,\nÊ     walk=\"johndoe@apache.org->from\",\nÊ     gather=\"to\")",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "Let's break down this simple expression.",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "The first parameter, <span class=\"ff1 fs0\">emails</span>, is the collection being traversed. The second parameter, <span class=\"ff1 fs0\">walk</span>, maps a hard-\ncoded node ID (\"johndoe@apache.org\") to a field in the index (<span class=\"ff1 fs0\">from</span>). This will return all the <span class=\"ff4\">edges</span> in the\nindex that have <span class=\"ff1 fs0\">johndoe@apache.org</span> in the <span class=\"ff1 fs0\">from</span> field.",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "The <span class=\"ff1 fs0\">gather</span> parameter tells the function to gather the values in the `to `field. The values that are gathered\nare the node IDs emitted by the function.",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "In the example above the nodes emitted will be all of the people that \"<span class=\"link\">johndoe@apache.org</span>\" has emailed.",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "The walk parameter also accepts a list of root node IDs:",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "nodes(emails,\nÊ     walk=\"johndoe@apache.org, janesmith@apache.org->from\",\nÊ     gather=\"to\")",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "The <span class=\"ff1 fs0\">nodes</span> function above finds all the edges with \"<span class=\"link\">johndoe@apache.org</span>\" or \"<span class=\"link\">janesmith@apache.org</span>\" in the\nfrom<span class=\"ff2 fs1\"> field and gathers the </span>to<span class=\"ff2 fs1\"> field.</span>",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "Like all <span class=\"link\">Streaming Expressions</span>, you can execute a <span class=\"ff1 fs0\">nodes</span> expression by sending it to the <span class=\"ff1 fs0\">/stream</span> handler. For\nexample:",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "curl --data-urlencode 'expr=nodes(emails,\nÊ                                 walk=\"johndoe@apache.org, janesmith@apache.org->from\",\nÊ                                 gather=\"to\")' http://localhost:8983/solr/emails/stream",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "The output of this expression would look like this:",
    "hierarchy": [
      "Basic Syntax"
    ],
    "pageId": 767
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"slist@campbell.com\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"to\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"catherine.pernot@enron.com\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"to\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"airam.arteaga@enron.com\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"to\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc4\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc3\">44</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 768
  },
  {
    "content": "All of the tuples returned have the <span class=\"ff1 fs1\">node</span> field. The <span class=\"ff1 fs1\">node</span> field contains the node IDs gathered by the function.\nThe <span class=\"ff1 fs1\">collection</span>, <span class=\"ff1 fs1\">field</span>, and <span class=\"ff1 fs1\">level</span> of the traversal are also included in the output.",
    "hierarchy": [
    ],
    "pageId": 768
  },
  {
    "content": "Notice that the level is \"1\" for each tuple in the example. The root nodes are level 0 (in the example above,\nthe root nodes are \"<span class=\"link\">johndoe@apache.org</span>, <span class=\"link\">janesmith@apache.org</span>\") By default the <span class=\"ff1 fs1\">nodes</span> function emits only\nthe <span class=\"code\">*leaf nodes*</span> of the traversal, which is the outer-most node set. To emit the root nodes you can specify\nthe <span class=\"ff1 fs1\">scatter</span> parameter:",
    "hierarchy": [
    ],
    "pageId": 768
  },
  {
    "content": "nodes(emails,\nÊ     walk=\"johndoe@apache.org->from\",\nÊ     gather=\"to\",\nÊ     scatter=\"branches, leaves\")",
    "hierarchy": [
    ],
    "pageId": 768
  },
  {
    "content": "The <span class=\"ff1 fs1\">scatter</span> parameter controls whether to emit the <span class=\"code\">branches</span> with the <span class=\"code\">leaves</span>. The root nodes are\nconsidered \"branches\" because they are not the outer-most level of the traversal.",
    "hierarchy": [
    ],
    "pageId": 768
  },
  {
    "content": "When scattering both branches and leaves the output would like this:",
    "hierarchy": [
    ],
    "pageId": 768
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"result-set\"</span>: {\nÊ   <span class=\"fc1\">\"docs\"</span>: [\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"johndoe@apache.org\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"node\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">0</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"slist@campbell.com\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"to\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"catherine.pernot@enron.com\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"to\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"airam.arteaga@enron.com\"</span>,\nÊ       <span class=\"fc1\">\"collection\"</span>: <span class=\"fc2\">\"emails\"</span>,\nÊ       <span class=\"fc1\">\"field\"</span>: <span class=\"fc2\">\"to\"</span>,\nÊ       <span class=\"fc1\">\"level\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     {\nÊ       <span class=\"fc1\">\"EOF\"</span>: <span class=\"fc4\">true</span>,\nÊ       <span class=\"fc1\">\"RESPONSE_TIME\"</span>: <span class=\"fc3\">44</span>\nÊ     }\nÊ   ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 769
  },
  {
    "content": "Now the level 0 root node is included in the output.",
    "hierarchy": [
    ],
    "pageId": 769
  },
  {
    "content": "nodes<span class=\"ff2 fs0\"> also supports aggregations. For example:</span>",
    "hierarchy": [
      "Aggregations"
    ],
    "pageId": 769
  },
  {
    "content": "nodes(emails,\nÊ     walk=\"johndoe@apache.org, janesmith@apache.org->from\",\nÊ     gather=\"to\",\nÊ     count(*))",
    "hierarchy": [
      "Aggregations"
    ],
    "pageId": 769
  },
  {
    "content": "The expression above finds the edges with \"johndoe@apache.org\" or \"janesmith@apache.org\" in the <span class=\"ff1 fs2\">from</span>\nfield and gathers the values from the <span class=\"ff1 fs2\">to</span> field. It also aggregates the count for each node ID gathered.",
    "hierarchy": [
      "Aggregations"
    ],
    "pageId": 769
  },
  {
    "content": "A gathered node could have a count of 2 if both \"johndoe@apache.org\" and \"janesmith@apache.org\" have",
    "hierarchy": [
      "Aggregations"
    ],
    "pageId": 769
  },
  {
    "content": "emailed the same person. Node sets contain a unique set of nodes, so the same person won't appear twice\nin the node set, but the count will reflect that it appeared twice during the traversal.",
    "hierarchy": [
    ],
    "pageId": 770
  },
  {
    "content": "Edges are uniqued as part of the traversal so the count will <span class=\"ff2\">not</span> reflect the number of times\n\"johndoe@apache.org\" emailed the same person. For example, personA might have emailed personB 100\ntimes. These edges would get uniqued and only be counted once. But if person personC also emailed\npersonB this would increment the count for personB.",
    "hierarchy": [
    ],
    "pageId": 770
  },
  {
    "content": "The aggregation functions supported are <span class=\"code\">count(*)</span>, <span class=\"code\">sum(field)</span>, <span class=\"code\">min(field)</span>, <span class=\"code\">max(field)</span>, and <span class=\"code\">avg(field)</span>.\nThe fields being aggregated should be present in the edges collected during the traversal. Later examples\n(below) will show aggregations can be a powerful tool for providing recommendations and limiting the\nscope of traversals.",
    "hierarchy": [
    ],
    "pageId": 770
  },
  {
    "content": "The <span class=\"code\">nodes</span> function can be nested to traverse deeper into the graph. For example:",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "nodes(emails,\nÊ     nodes(emails,\nÊ           walk=\"johndoe@apache.org->from\",\nÊ           gather=\"to\"),\nÊ     walk=\"node->from\",\nÊ     gather=\"to\")",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "In the example above the outer <span class=\"code\">nodes</span> function operates on the node set collected from the inner <span class=\"code\">nodes</span>\nfunction.",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "Notice that the inner <span class=\"code\">nodes</span> function behaves exactly as the examples already discussed. But the <span class=\"code\">walk</span>\nparameter of the outer <span class=\"code\">nodes</span> function behaves differently.",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "In the outer <span class=\"code\">nodes</span> function the <span class=\"code\">walk</span> parameter works with tuples coming from an internal streaming\nexpression. In this scenario the <span class=\"code\">walk</span> parameter maps the <span class=\"code\">node</span> field to the <span class=\"code\">from</span> field. Remember that the\nnode IDs collected from the inner <span class=\"code\">nodes</span> expression are placed in the <span class=\"code\">node</span> field.",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "Put more simply, the inner expression gathers all the people that \"johndoe@apache.org\" has emailed. We\ncan call this group the \"friends of johndoe@apache.org\". The outer expression gathers all the people that\nthe \"friends of johndoe@apache.org\" have emailed. This is a basic friends-of-friends traversal.",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "This construct of nesting <span class=\"code\">nodes</span> functions is the basic technique for doing a controlled traversal through the\ngraph.",
    "hierarchy": [
      "Nesting nodes Functions"
    ],
    "pageId": 770
  },
  {
    "content": "The <span class=\"code\">nodes</span> function performs cycle detection across the entire traversal. This ensures that nodes that have\nalready been visited are not traversed again. Cycle detection is important for both limiting the size of\ntraversals and gathering accurate aggregations. Without cycle detection the size of the traversal could grow\nexponentially with each hop in the traversal. With cycle detection only new nodes encountered are\ntraversed.",
    "hierarchy": [
      "Cycle Detection"
    ],
    "pageId": 770
  },
  {
    "content": "Cycle detection <span class=\"ff2\">does not</span> cross collection boundaries. This is because internally the collection name is part of",
    "hierarchy": [
      "Cycle Detection"
    ],
    "pageId": 770
  },
  {
    "content": "the node ID. For example the node ID \"johndoe@apache.org\", is really <span class=\"ff2 fs1\">emails/johndoe@apache.org</span>. When\ntraversing to another collection \"johndoe@apache.org\" will be traversed.",
    "hierarchy": [
    ],
    "pageId": 771
  },
  {
    "content": "Each level in the traversal can be filtered with a filter query. For example:",
    "hierarchy": [
      "Filtering the Traversal"
    ],
    "pageId": 771
  },
  {
    "content": "nodes(emails,\nÊ     walk=\"johndoe@apache.org->from\",\nÊ     fq=\"body:(solr rocks)\",\nÊ     gather=\"to\")",
    "hierarchy": [
      "Filtering the Traversal"
    ],
    "pageId": 771
  },
  {
    "content": "In the example above only emails that match the filter query will be included in the traversal. Any Solr query\ncan be included here. So you can do fun things like <span class=\"link\">geospatial queries</span>, apply any of the available <span class=\"link\">query</span>\nparsers<span class=\"fc0\">, or even write custom query parsers to limit the traversal.</span>",
    "hierarchy": [
      "Filtering the Traversal"
    ],
    "pageId": 771
  },
  {
    "content": "Any streaming expression can be used to provide the root nodes for a traversal. For example:",
    "hierarchy": [
      "Root Streams"
    ],
    "pageId": 771
  },
  {
    "content": "nodes(emails,\nÊ     search(emails, q=\"body:(solr rocks)\", fl=\"to\", sort=\"score desc\", rows=\"20\")\nÊ     walk=\"to->from\",\nÊ     gather=\"to\")",
    "hierarchy": [
      "Root Streams"
    ],
    "pageId": 771
  },
  {
    "content": "The example above provides the root nodes through a search expression. You can also provide arbitrarily\ncomplex, nested streaming expressions with joins, etc., to specify the root nodes.",
    "hierarchy": [
      "Root Streams"
    ],
    "pageId": 771
  },
  {
    "content": "Notice that the <span class=\"ff2 fs1\">walk</span> parameter maps a field from the tuples generated by the inner stream. In this case it\nmaps the <span class=\"ff2 fs1\">to</span> field from the inner stream to the <span class=\"ff2 fs1\">from</span> field.",
    "hierarchy": [
      "Root Streams"
    ],
    "pageId": 771
  },
  {
    "content": "It's often desirable to skip traversing high frequency nodes in the graph. This is similar in nature to a search\nterm stop list. The best way to describe this is through an example use case.",
    "hierarchy": [
      "Skipping High Frequency Nodes"
    ],
    "pageId": 771
  },
  {
    "content": "Let's say that you want to recommend content for a user based on a collaborative filter. Below is one\napproach for a simple collaborative filter:",
    "hierarchy": [
      "Skipping High Frequency Nodes"
    ],
    "pageId": 771
  },
  {
    "content": "1.Find all content userA has read.\n2.Find users whose reading list is closest to userA. These are users with similar tastes as userA.\n3.Recommend content based on what the users in step 2 have read, that userA has not yet read.",
    "hierarchy": [
      "Skipping High Frequency Nodes"
    ],
    "pageId": 771
  },
  {
    "content": "Look closely at step 2. In large graphs, step 2 can lead to a very large traversal. This is because userA may\nhave viewed content that has been viewed by millions of other people. We may want to skip these high\nfrequency nodes for two reasons:",
    "hierarchy": [
      "Skipping High Frequency Nodes"
    ],
    "pageId": 771
  },
  {
    "content": "1.A large traversal that visit millions of unique nodes is slow and takes a lot of memory because cycle\ndetection is tracked in memory.",
    "hierarchy": [
      "Skipping High Frequency Nodes"
    ],
    "pageId": 771
  },
  {
    "content": "2.<span class=\"ls1\">High frequency nodes are also not useful in determining users with similar tastes. The content that fewer</span>\npeople have viewed provides a more precise recommendation.",
    "hierarchy": [
    ],
    "pageId": 772
  },
  {
    "content": "The <span class=\"ff2 fs1\">nodes</span> function has the <span class=\"ff2 fs1\">maxDocFreq</span> parameter to allow for filtering out high frequency nodes. The\nsample code below shows steps 1 and 2 of the recommendation:",
    "hierarchy": [
    ],
    "pageId": 772
  },
  {
    "content": "Ênodes(logs,\nÊ      search(logs, q=\"userID:user1\", fl=\"articleID\", sort=\"articleID asc\", fq=\"action:view\",\nqt=\"/export\"),\nÊ      walk=\"articleID->articleID\",\nÊ      gather=\"userID\",\nÊ      fq=\"action:view\",\nÊ      maxDocFreq=\"10000\",\nÊ      count(*)))",
    "hierarchy": [
    ],
    "pageId": 772
  },
  {
    "content": "In the example above, the inner search expression searches the <span class=\"ff2 fs1\">logs</span> collection and returning all the articles\nviewed by \"user1\". The outer <span class=\"ff2 fs1\">nodes</span> expression takes all the articles emitted from the inner search\nexpression and finds all the records in the logs collection for those articles. It then gathers and aggregates\nthe users that have read the articles. The <span class=\"ff2 fs1\">maxDocFreq</span> parameter limits the articles returned to those that\nappear in no more then 10,000 log records (per shard). This guards against returning articles that have been\nviewed by millions of users.",
    "hierarchy": [
    ],
    "pageId": 772
  },
  {
    "content": "By default the <span class=\"ff2 fs1\">nodes</span> function only tracks enough information to do cycle detection. This provides enough\ninformation to output the nodes and aggregations in the graph.",
    "hierarchy": [
      "Tracking the Traversal"
    ],
    "pageId": 772
  },
  {
    "content": "For some use cases, such as graph visualization, we also need to output the edges. Setting\ntrackTraversal=\"true\"<span class=\"ff1 fs0\"> tells </span>nodes<span class=\"ff1 fs0\"> to track the connections between nodes, so the edges can be</span>\nconstructed. When <span class=\"ff2 fs1\">trackTraversal</span> is enabled a new <span class=\"ff2 fs1\">ancestors</span> property will appear with each node. The\nancestors<span class=\"ff1 fs0\"> property contains a list of node IDs that pointed to the node.</span>",
    "hierarchy": [
      "Tracking the Traversal"
    ],
    "pageId": 772
  },
  {
    "content": "Below is a sample <span class=\"ff2 fs1\">nodes</span> expression with <span class=\"ff2 fs1\">trackTraversal</span> set to true:",
    "hierarchy": [
      "Tracking the Traversal"
    ],
    "pageId": 772
  },
  {
    "content": "nodes(emails,\nÊ     nodes(emails,\nÊ           walk=\"johndoe@apache.org->from\",\nÊ           gather=\"to\",\nÊ           trackTraversal=\"true\"),\nÊ     walk=\"node->from\",\nÊ     trackTraversal=\"true\",\nÊ     gather=\"to\")",
    "hierarchy": [
      "Tracking the Traversal"
    ],
    "pageId": 772
  },
  {
    "content": "Nested <span class=\"ff2 fs1\">nodes</span> functions can operate on different SolrCloud collections. This allow traversals to \"walk\" from\none collection to another to gather nodes. Cycle detection does not cross collection boundaries, so nodes\ncollected in one collection will be traversed in a different collection. This was done deliberately to support\ncross-collection traversals. Note that the output from a cross-collection traversal will likely contain duplicate",
    "hierarchy": [
      "Cross-Collection Traversals"
    ],
    "pageId": 772
  },
  {
    "content": "nodes with different collection attributes.",
    "hierarchy": [
    ],
    "pageId": 773
  },
  {
    "content": "Below is a sample <span class=\"ff2 fs1\">nodes</span> expression that traverses from the \"emails\" collection to the \"logs\" collection:",
    "hierarchy": [
    ],
    "pageId": 773
  },
  {
    "content": "nodes(logs,\nÊ     nodes(emails,\nÊ           search(emails, q=\"body:(solr rocks)\", fl=\"from\", sort=\"score desc\", rows=\"20\")\nÊ           walk=\"from->from\",\nÊ           gather=\"to\",\nÊ           scatter=\"leaves, branches\"),\nÊ     walk=\"node->user\",\nÊ     fq=\"action:edit\",\nÊ     gather=\"contentID\")",
    "hierarchy": [
    ],
    "pageId": 773
  },
  {
    "content": "The example above finds all people who sent emails with a body that contains \"solr rocks\". It then finds all\nthe people these people have emailed. Then it traverses to the logs collection and gathers all the content IDs\nthat these people have edited.",
    "hierarchy": [
    ],
    "pageId": 773
  },
  {
    "content": "The <span class=\"ff2 fs1\">nodes</span> function can act as both a stream source and a stream decorator. The connection with the wider\nstream expression library provides tremendous power and flexibility when performing graph traversals.\nHere is an example of using the streaming expression library to intersect two friend networks:",
    "hierarchy": [
      "Combining nodes With Other Streaming Expressions"
    ],
    "pageId": 773
  },
  {
    "content": "Ê           intersect(on=\"node\",\nÊ                     sort(by=\"node asc\",\nÊ                          nodes(emails,\nÊ                                nodes(emails,\nÊ                                      walk=\"johndoe@apache.org->from\",\nÊ                                      gather=\"to\"),\nÊ                                walk=\"node->from\",\nÊ                                gather=\"to\",\nÊ                                scatter=\"branches,leaves\")),\nÊ                      sort(by=\"node asc\",\nÊ                           nodes(emails,\nÊ                                 nodes(emails,\nÊ                                       walk=\"janedoe@apache.org->from\",\nÊ                                       gather=\"to\"),\nÊ                                 walk=\"node->from\",\nÊ                                 gather=\"to\",\nÊ                                 scatter=\"branches,leaves\")))",
    "hierarchy": [
      "Combining nodes With Other Streaming Expressions"
    ],
    "pageId": 773
  },
  {
    "content": "The example above gathers two separate friend networks, one rooted with \"johndoe@apache.org\" and\nanother rooted with \"janedoe@apache.org\". The friend networks are then sorted by the <span class=\"ff2 fs1\">node</span> field, and\nintersected. The resulting node set will be the intersection of the two friend networks.",
    "hierarchy": [
      "Combining nodes With Other Streaming Expressions"
    ],
    "pageId": 773
  },
  {
    "content": "It is often useful to know which products are most frequently purchased with a particular product. This\nexample uses a simple market basket table (indexed in Solr) to store past shopping baskets. The schema for\nthe table is very simple with each row containing a <span class=\"code\">basketID</span> and a <span class=\"code\">productID</span>. This can be seen as a graph\nwith each row in the table representing an edge. And it can be traversed very quickly to calculate basket co-\noccurrence, even when the graph contains billions of edges.",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "Here is the sample syntax:",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "top(n=\"5\",\nÊ   sort=\"count(*) desc\",\nÊ   nodes(baskets,\nÊ         random(baskets, q=\"productID:ABC\", fl=\"basketID\", rows=\"500\"),\nÊ         walk=\"basketID->basketID\",\nÊ         fq=\"-productID:ABC\",\nÊ         gather=\"productID\",\nÊ         count(*)))",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "Let's break down exactly what this traversal is doing.",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "1.The first expression evaluated is the inner <span class=\"code\">random</span> expression, which returns 500 random basketIDs, from\nthe <span class=\"code\">baskets</span> collection, that have the <span class=\"code\">productID</span> \"ABC\". The <span class=\"code\">random</span> expression is very useful for\nrecommendations because it limits the traversal to a fixed set of baskets, and because it adds the\nelement of surprise into the recommendation. Using the <span class=\"code\">random</span> function you can provide fast sample\nsets from very large graphs.",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "2.The outer <span class=\"code\">nodes</span> expression finds all the records in the <span class=\"code\">baskets</span> collection for the basketIDs generated in\nstep 1. It also filters out <span class=\"code\">productID</span> \"ABC\" so it doesn't show up in the results. It then gathers and counts\nthe productID’s across these baskets.",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "3.The outer <span class=\"code\">top</span> expression ranks the productIDs emitted in step 2 by the count and selects the top 5.",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "In a nutshell this expression finds the products that most frequently co-occur with product \"ABC\" in past\nshopping baskets.",
    "hierarchy": [
      "Calculate Market Basket Co-occurrence"
    ],
    "pageId": 774
  },
  {
    "content": "This use case builds on the market basket example <span class=\"link\">above</span> that calculates which products co-occur most\nfrequently with productID:ABC. The ranked co-occurrence counts provide candidates for a recommendation.\nThe <span class=\"code\">scoreNodes</span> function can be used to score the candidates to find the best recommendation.",
    "hierarchy": [
      "Using the scoreNodes Function to Make a Recommendation"
    ],
    "pageId": 774
  },
  {
    "content": "Before diving into the syntax of the <span class=\"code\">scoreNodes</span> function it's useful to understand why the raw co-\noccurrence counts may not produce the best recommendation. The reason is that raw co-occurrence counts\nfavor items that occur frequently across all baskets. A better recommendation would find the product that\nhas the most significant relationship with productID ABC. The <span class=\"code\">scoreNodes</span> function uses a term frequency-\ninverse document frequency (TF-IDF) algorithm to find the most significant relationship.",
    "hierarchy": [
      "Using the scoreNodes Function to Make a Recommendation"
    ],
    "pageId": 774
  },
  {
    "content": "The <span class=\"code\">scoreNodes</span> function assigns a score to each node emitted by the nodes expression. By default the\nscoreNodes<span class=\"ff2 fs0\"> function uses the </span>count(*)<span class=\"ff2 fs0\"> aggregation, which is the co-occurrence count, as the TF value. The</span>",
    "hierarchy": [
      "Using the scoreNodes Function to Make a Recommendation",
      "How scoreNodes Works"
    ],
    "pageId": 774
  },
  {
    "content": "IDF value for each node is fetched from the collection where the node was gathered. Each node is then\nscored using the TF*IDF formula, which provides a boost to nodes with a lower frequency across all market\nbaskets.",
    "hierarchy": [
    ],
    "pageId": 775
  },
  {
    "content": "Combining the co-occurrence count with the IDF provides a score that shows how important the relationship\nis between productID ABC and the recommendation candidates.",
    "hierarchy": [
    ],
    "pageId": 775
  },
  {
    "content": "The <span class=\"ff2 fs1\">scoreNodes</span> function adds the score to each node in the <span class=\"ff2 fs1\">nodeScore</span> field.",
    "hierarchy": [
    ],
    "pageId": 775
  },
  {
    "content": "top(n=\"1\",\nÊ   sort=\"nodeScore desc\",\nÊ   scoreNodes(top(n=\"50\",\nÊ                  sort=\"count(*) desc\",\nÊ                  nodes(baskets,\nÊ                        random(baskets, q=\"productID:ABC\", fl=\"basketID\", rows=\"500\"),\nÊ                        walk=\"basketID->basketID\",\nÊ                        fq=\"-productID:ABC\",\nÊ                        gather=\"productID\",\nÊ                        count(*)))))",
    "hierarchy": [
      "Example scoreNodes Syntax"
    ],
    "pageId": 775
  },
  {
    "content": "This example builds on the earlier example \"Calculate market basket co-occurrence\".",
    "hierarchy": [
      "Example scoreNodes Syntax"
    ],
    "pageId": 775
  },
  {
    "content": "1.Notice that the inner-most <span class=\"ff2 fs1\">top</span> function is taking the top 50 products that co-occur most frequently with\nproductID ABC. This provides 50 candidate recommendations.",
    "hierarchy": [
      "Example scoreNodes Syntax"
    ],
    "pageId": 775
  },
  {
    "content": "2.The <span class=\"ff2 fs1\">scoreNodes</span> function then assigns a score to the candidates based on the TF*IDF of each node.\n3.The outer <span class=\"ff2 fs1\">top</span> expression selects the highest scoring node. This is the recommendation.",
    "hierarchy": [
      "Example scoreNodes Syntax"
    ],
    "pageId": 775
  },
  {
    "content": "In this example we'll recommend content for a user based on a collaborative filter. This recommendation is\nmade using log records that contain the <span class=\"ff2 fs1\">userID</span> and <span class=\"ff2 fs1\">articleID</span> and the action performed. In this scenario\neach log record can be viewed as an edge in a graph. The userID and articleID are the nodes and the action\nis an edge property used to filter the traversal.",
    "hierarchy": [
      "Recommend Content Based on Collaborative Filter",
      "Example scoreNodes Syntax"
    ],
    "pageId": 775
  },
  {
    "content": "Here is the sample syntax:",
    "hierarchy": [
      "Recommend Content Based on Collaborative Filter",
      "Example scoreNodes Syntax"
    ],
    "pageId": 775
  },
  {
    "content": "top(n=\"5\",\nÊ   sort=\"count(*) desc\",\nÊ   nodes(logs,\nÊ         top(n=\"30\",\nÊ             sort=\"count(*) desc\",\nÊ             nodes(logs,\nÊ                   search(logs, q=\"userID:user1\", fl=\"articleID\", sort=\"articleID asc\",\nfq=\"action:read\", qt=\"/export\"),\nÊ                   walk=\"articleID->articleID\",\nÊ                   gather=\"userID\",\nÊ                   fq=\"action:read\",\nÊ                   maxDocFreq=\"10000\",\nÊ                   count(*))),\nÊ             walk=\"node->userID\",\nÊ             gather=\"articleID\",\nÊ             fq=\"action:read\",\nÊ             count(*)))",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "Let's break down the expression above step-by-step.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "1.The first expression evaluated is the inner <span class=\"ff1 fs1\">search</span> expression. This expression searches the <span class=\"ff1 fs1\">logs</span>\ncollection for all records matching \"user1\". This is the user we are making the recommendation for.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "There is a filter applied to pull back only records where the \"action:read\". It returns the <span class=\"ff1 fs1\">articleID</span> for\neach record found. In other words, this expression returns all the articles \"user1\" has read.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "2.The inner <span class=\"ff1 fs1\">nodes</span> expression operates over the articleIDs returned from step 1. It takes each <span class=\"ff1 fs1\">articleID</span>\nfound and searches them against the <span class=\"ff1 fs1\">articleID</span> field.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "Note that it skips high frequency nodes using the <span class=\"ff1 fs1\">maxDocFreq</span> parameter to filter out articles that appear\nover 10,000 times in the logs. It gathers userIDs and aggregates the counts for each user. This step finds\nthe users that have read the same articles that \"user1\" has read and counts how many of the same\narticles they have read.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "3.The inner <span class=\"ff1 fs1\">top</span> expression ranks the users emitted from step 2. It will emit the top 30 users who have the\nmost overlap with user1's reading list.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "4.The outer <span class=\"ff1 fs1\">nodes</span> expression gathers the reading list for the users emitted from step 3. It counts the\narticleIDs that are gathered.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "Any article selected in step 1 (user1 reading list), will not appear in this step due to cycle detection. So\nthis step returns the articles read by the users with the most similar readings habits to \"user1\" that\n\"user1\" has not read yet. It also counts the number of times each article has been read across this user\ngroup.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "5.The outer <span class=\"ff1 fs1\">top</span> expression takes the top articles emitted from step 4. This is the recommendation.",
    "hierarchy": [
    ],
    "pageId": 776
  },
  {
    "content": "In recent years, scientists have become increasingly able to rationally design drugs that target the mutated\nproteins, called oncogenes, responsible for some cancers. Proteins typically act through long chains of",
    "hierarchy": [
      "Protein Pathway Traversal"
    ],
    "pageId": 776
  },
  {
    "content": "chemical interactions between multiple proteins, called pathways, and, while the oncogene in the pathway\nmay not have a corresponding drug, another protein in the pathway may. Graph traversal on a protein\ncollection that records protein interactions and drugs may yield possible candidates. (Thanks to Lewis Geer\nof the NCBI, for providing this example).",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "The example below illustrates a protein pathway traversal:",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "nodes(proteins,\nÊ     nodes(proteins,\nÊ           walk=\"NRAS->name\",\nÊ           gather=\"interacts\"),\nÊ     walk=\"node->name\",\nÊ     gather=\"drug\")",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "Let's break down exactly what this traversal is doing.",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "1.The inner <span class=\"ff2 fs1\">nodes</span> expression traverses in the <span class=\"ff2 fs1\">proteins</span> collection. It finds all the edges in the graph where\nthe name of the protein is \"NRAS\". Then it gathers the proteins in the <span class=\"ff2 fs1\">interacts</span> field. This gathers all\nthe proteins that \"NRAS\" interactions with.",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "2.The outer <span class=\"ff2 fs1\">nodes</span> expression also works with the <span class=\"ff2 fs1\">proteins</span> collection. It gathers all the drugs that\ncorrespond to proteins emitted from step 1.",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "3.Using this stepwise approach you can gather the drugs along the pathway of interactions any number of\nsteps away from the root protein.",
    "hierarchy": [
    ],
    "pageId": 777
  },
  {
    "content": "In the examples above, the <span class=\"ff2 fs1\">nodes</span> expression was sent to Solr's <span class=\"ff2 fs1\">/stream</span> handler like any other streaming\nexpression. This approach outputs the nodes in the same JSON tuple format as other streaming expressions\nso that it can be treated like any other streaming expression. You can use the <span class=\"ff2 fs1\">/stream</span> handler when you\nneed to operate directly on the tuples, such as in the recommendation use cases above.",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "There are other graph traversal use cases that involve graph visualization. Solr supports these use cases\nwith the introduction of the <span class=\"ff2 fs1\">/graph</span> request handler, which takes a <span class=\"ff2 fs1\">nodes</span> expression and outputs the results\nin GraphML.",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "GraphML<span class=\"fc0\"> is an XML format supported by graph visualization tools such as </span>Gephi<span class=\"fc0\">, which is a sophisticated</span>\nopen source tool for statistically analyzing and visualizing graphs. Using a <span class=\"ff2 fs1\">nodes</span> expression, parts of a larger\ngraph can be exported in GraphML and then imported into tools like Gephi.",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "There are a few things to keep mind when exporting a graph in GraphML:",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "1.The <span class=\"ff2 fs1\">/graph</span> handler can export both the nodes and edges in the graph. By default, it only exports the\nnodes. To export the edges you must set <span class=\"ff2 fs1\">trackTraversal=\"true\"</span> in the <span class=\"ff2 fs1\">nodes</span> expression.",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "2.The <span class=\"ff2 fs1\">/graph</span> handler currently accepts an arbitrarily complex streaming expression which includes a\nnodes<span class=\"ff1 fs0\"> expression. If the streaming expression doesn't include a </span>nodes<span class=\"ff1 fs0\"> expression, the </span>/graph<span class=\"ff1 fs0\"> handler</span>\nwill not properly output GraphML.",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "3.The <span class=\"ff2 fs1\">/graph</span> handler currently accepts a single arbitrarily complex, nested <span class=\"ff2 fs1\">nodes</span> expression per request.\nThis means you cannot send in a streaming expression that joins or intersects the node sets from",
    "hierarchy": [
      "Exporting GraphML to Support Graph Visualization"
    ],
    "pageId": 777
  },
  {
    "content": "multiple <span class=\"ff2 fs1\">nodes</span> expressions. The <span class=\"ff2 fs1\">/graph</span> handler does support any level of nesting within a single <span class=\"ff2 fs1\">nodes</span>\nexpression. The <span class=\"ff2 fs1\">/stream</span> handler does support joining and intersecting node sets, but the <span class=\"ff2 fs1\">/graph</span>\nhandler currently does not.",
    "hierarchy": [
    ],
    "pageId": 778
  },
  {
    "content": "curl --data-urlencode 'expr=nodes(enron_emails,\nÊ                                 nodes(enron_emails,\nÊ                                       walk=\"kayne.coulter@enron.com->from\",\nÊ                                       trackTraversal=\"true\",\nÊ                                       gather=\"to\"),\nÊ                                 walk=\"node->from\",\nÊ                                 scatter=\"leaves,branches\",\nÊ                                 trackTraversal=\"true\",\nÊ                                 gather=\"to\")' http://localhost:8983/solr/enron_emails/graph",
    "hierarchy": [
      "Sample GraphML Request"
    ],
    "pageId": 778
  },
  {
    "content": "Ê    <span class=\"fc2\"><node</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"kayne.coulter@enron.com\"<span class=\"fc2\">></span></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>node<span class=\"fc2\"></data></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"level\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></data></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"count(*)\"<span class=\"fc2\">></span></span>0.0<span class=\"fc2\"></data></span>\nÊ    <span class=\"fc2\"></node></span>\nÊ    <span class=\"fc2\"><node</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"don.baughman@enron.com\"<span class=\"fc2\">></span></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>to<span class=\"fc2\"></data></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"level\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></data></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"count(*)\"<span class=\"fc2\">></span></span>1.0<span class=\"fc2\"></data></span>\nÊ    <span class=\"fc2\"></node></span>\nÊ    <span class=\"fc2\"><edge</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"1\"</span>  <span class=\"fc3\">source</span>=<span class=\"fc4\">\"kayne.coulter@enron.com\"</span>  <span class=\"fc3\">target</span>=<span class=\"fc4\">\"don.baughman@enron.com\"<span class=\"fc2\">/></span></span>\nÊ    <span class=\"fc2\"><node</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"john.kinser@enron.com\"<span class=\"fc2\">></span></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>to<span class=\"fc2\"></data></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"level\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></data></span>\nÊ          <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"count(*)\"<span class=\"fc2\">></span></span>1.0<span class=\"fc2\"></data></span>\nÊ   <span class=\"fc2\"></node></span>\nÊ   <span class=\"fc2\"><edge</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"2\"</span>  <span class=\"fc3\">source</span>=<span class=\"fc4\">\"kayne.coulter@enron.com\"</span>  <span class=\"fc3\">target</span>=<span class=\"fc4\">\"john.kinser@enron.com\"<span class=\"fc2\">/></span></span>\nÊ   <span class=\"fc2\"><node</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"jay.wills@enron.com\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"field\"<span class=\"fc2\">></span></span>to<span class=\"fc2\"></data></span>\nÊ         <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"level\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></data></span>\nÊ         <span class=\"fc2\"><data</span> <span class=\"fc3\">key</span>=<span class=\"fc4\">\"count(*)\"<span class=\"fc2\">></span></span>1.0<span class=\"fc2\"></data></span>\nÊ   <span class=\"fc2\"></node></span>\nÊ   <span class=\"fc2\"><edge</span> <span class=\"fc3\">id</span>=<span class=\"fc4\">\"3\"</span>  <span class=\"fc3\">source</span>=<span class=\"fc4\">\"kayne.coulter@enron.com\"</span>  <span class=\"fc3\">target</span>=<span class=\"fc4\">\"jay.wills@enron.com\"<span class=\"fc2\">/></span></span>",
    "hierarchy": [
      "Sample GraphML Output"
    ],
    "pageId": 778
  },
  {
    "content": "Solr's Parallel SQL Interface brings the power of SQL to SolrCloud.",
    "hierarchy": [
      "Parallel SQL Interface"
    ],
    "pageId": 779
  },
  {
    "content": "The SQL interface seamlessly combines SQL with Solr's full-text search capabilities. Both MapReduce style\nand JSON Facet API aggregations are supported, which means the SQL interface can be used to support\nboth <span class=\"ff1\">high query volume</span> and <span class=\"ff1\">high cardinality</span> use cases.",
    "hierarchy": [
      "Parallel SQL Interface"
    ],
    "pageId": 779
  },
  {
    "content": "The SQL interface allows sending a SQL query to Solr and getting documents streamed back in response.\nUnder the covers, Solr's SQL interface uses the Apache Calcite SQL engine to translate SQL queries to\nphysical query plans implemented as <span class=\"link\">Streaming Expressions</span>.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture"
    ],
    "pageId": 779
  },
  {
    "content": "In a standard <span class=\"code\">SELECT</span> statement such as <span class=\"code\">SELECT <expressions> FROM <table></span>, the table names correspond\nto Solr collection names. Table names are case insensitive.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Solr Collections and DB Tables"
    ],
    "pageId": 779
  },
  {
    "content": "Column names in the SQL query map directly to fields in the Solr index for the collection being queried.\nThese identifiers are case sensitive. Aliases are supported, and can be referenced in the <span class=\"code\">ORDER BY</span> clause.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Solr Collections and DB Tables"
    ],
    "pageId": 779
  },
  {
    "content": "The <span class=\"code\">*</span> syntax to indicate all fields is not supported in either limited or unlimited queries. The <span class=\"code\">score</span> field can\nbe used only with queries that contain a <span class=\"code\">LIMIT</span> clause.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Solr Collections and DB Tables"
    ],
    "pageId": 779
  },
  {
    "content": "For example, we could index Solr's sample documents and then construct an SQL query like this:",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Solr Collections and DB Tables"
    ],
    "pageId": 779
  },
  {
    "content": "The collection in Solr we are using is \"techproducts\", and we've asked for the \"manu\" and \"price\" fields to\nbe returned and aliased with new names. While this example does not use those aliases, we could build on\nthis to ORDER BY one or more of those fields.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Solr Collections and DB Tables"
    ],
    "pageId": 779
  },
  {
    "content": "More information about how to structure SQL queries for Solr is included in the section <span class=\"link\">Solr SQL Syntax</span>\nbelow.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Solr Collections and DB Tables"
    ],
    "pageId": 779
  },
  {
    "content": "The SQL feature of Solr can work with aggregations (grouping of results) in two ways:",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Aggregation Modes"
    ],
    "pageId": 779
  },
  {
    "content": "facet: This is the <span class=\"ff1\">default</span> aggregation mode, which uses the JSON Facet API or StatsComponent for\naggregations. In this scenario the aggregations logic is pushed down into the search engine and only the\naggregates are sent across the network. This is Solr's normal mode of operation. This is fast when the\ncardinality of GROUP BY fields is low to moderate. But it breaks down when you have high cardinality\nfields in the GROUP BY field.",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Aggregation Modes"
    ],
    "pageId": 779
  },
  {
    "content": "map_reduce: This implementation shuffles tuples to worker nodes and performs the aggregation on the\nworker nodes. It involves sorting and partitioning the entire result set and sending it to worker nodes. In\nthis approach the tuples arrive at the worker nodes sorted by the GROUP BY fields. The worker nodes",
    "hierarchy": [
      "Parallel SQL Interface",
      "SQL Architecture",
      "Aggregation Modes"
    ],
    "pageId": 779
  },
  {
    "content": "can then rollup the aggregates one group at a time. This allows for unlimited cardinality aggregation,\nbut you pay the price of sending the entire result set across the network to worker nodes.",
    "hierarchy": [
    ],
    "pageId": 780
  },
  {
    "content": "These modes are defined with the <span class=\"ff2 fs1\">aggregationMode</span> property when sending the request to Solr.",
    "hierarchy": [
    ],
    "pageId": 780
  },
  {
    "content": "As noted, the choice between aggregation modes depends on the cardinality of the fields you are working\nwith. If you have low-to-moderate cardinality in the fields you are grouping by, the 'facet' aggregation mode\nwill give you a higher performance because only the final groups are returned, very similar to how facets\nwork today. If, however, you have high cardinality in the fields, the \"map_reduce\" aggregation mode with\nworker nodes provide a much more performant option.",
    "hierarchy": [
    ],
    "pageId": 780
  },
  {
    "content": "The request handlers used for the SQL interface are configured to load implicitly, meaning there is little to\ndo to start using this feature.",
    "hierarchy": [
      "Configuration"
    ],
    "pageId": 780
  },
  {
    "content": "The <span class=\"ff2 fs1\">/sql</span> handler is the front end of the Parallel SQL interface. All SQL queries are sent to the <span class=\"ff2 fs1\">/sql</span> handler\nto be processed. The handler also coordinates the distributed MapReduce jobs when running <span class=\"ff2 fs1\">GROUP BY</span> and\nSELECT DISTINCT<span class=\"ff1 fs0\"> queries in </span>map_reduce<span class=\"ff1 fs0\"> mode. By default the </span>/sql<span class=\"ff1 fs0\"> handler will choose worker nodes from</span>\nits own collection to handle the distributed operations. In this default scenario the collection where the <span class=\"ff2 fs1\">/sql</span>\nhandler resides acts as the default worker collection for MapReduce queries.",
    "hierarchy": [
      "Configuration",
      "/sql Request Handler"
    ],
    "pageId": 780
  },
  {
    "content": "By default, the <span class=\"ff2 fs1\">/sql</span> request handler is configured as an implicit handler, meaning that it is always enabled\nin every Solr installation and no further configuration is required.",
    "hierarchy": [
      "Configuration",
      "/sql Request Handler"
    ],
    "pageId": 780
  },
  {
    "content": "As described below in the section <span class=\"link\">Best Practices</span>, you may want to set up a separate\ncollection for parallelized SQL queries. If you have high cardinality fields and a large\namount of data, please be sure to review that section and consider using a separate\ncollection.",
    "hierarchy": [
      "Configuration",
      "/sql Request Handler"
    ],
    "pageId": 780
  },
  {
    "content": "The Streaming API is an extensible parallel computing framework for SolrCloud. <span class=\"link\">Streaming Expressions</span>\nprovide a query language and a serialization format for the Streaming API.",
    "hierarchy": [
      "Configuration",
      "/stream and /export Request Handlers"
    ],
    "pageId": 780
  },
  {
    "content": "The Streaming API provides support for fast MapReduce allowing it to perform parallel relational algebra on\nextremely large data sets. Under the covers the SQL interface parses SQL queries using the Apache Calcite\nSQL Parser. It then translates the queries to the parallel query plan. The parallel query plan is expressed\nusing the Streaming API and Streaming Expressions.",
    "hierarchy": [
      "Configuration",
      "/stream and /export Request Handlers"
    ],
    "pageId": 780
  },
  {
    "content": "Like the <span class=\"ff2 fs1\">/sql</span> request handler, the <span class=\"ff2 fs1\">/stream</span> and <span class=\"ff2 fs1\">/export</span> request handlers are configured as implicit\nhandlers, and no further configuration is required.",
    "hierarchy": [
      "Configuration",
      "/stream and /export Request Handlers"
    ],
    "pageId": 780
  },
  {
    "content": "In some cases, fields used in SQL queries must be configured as DocValue fields. If queries are unlimited, all\nfields must be DocValue fields. If queries are limited (with the <span class=\"ff2 fs1\">limit</span> clause) then fields do not have to be\nhave DocValues enabled.",
    "hierarchy": [
      "Configuration",
      "Fields"
    ],
    "pageId": 780
  },
  {
    "content": "The SQL Interface provides a basic JDBC driver and an HTTP interface to perform queries.",
    "hierarchy": [
      "Sending Queries"
    ],
    "pageId": 781
  },
  {
    "content": "The JDBC Driver ships with SolrJ. Below is sample code for creating a connection and executing a query with\nthe JDBC driver:",
    "hierarchy": [
      "JDBC Driver"
    ],
    "pageId": 781
  },
  {
    "content": "Ê   con = <span class=\"fc2\">DriverManager</span>.getConnection(<span class=\"fc4\">\"jdbc:solr://\"</span> + zkHost +",
    "hierarchy": [
      "JDBC Driver"
    ],
    "pageId": 781
  },
  {
    "content": "Ê   stmt = con.createStatement();\nÊ   rs = stmt.executeQuery(<span class=\"fc4\">\"SELECT a_s, sum(a_f) as sum FROM collection1 GROUP BY a_s ORDER BY</span>",
    "hierarchy": [
      "JDBC Driver"
    ],
    "pageId": 781
  },
  {
    "content": "Ê   <span class=\"fc3\">while</span>(rs.next()) {\nÊ       <span class=\"fc2\">String</span> a_s = rs.getString(<span class=\"fc4\">\"a_s\"</span>);\nÊ       <span class=\"fc2\">double</span> s = rs.getDouble(<span class=\"fc4\">\"sum\"</span>);\nÊ   }\n} <span class=\"fc3\">finally</span> {\nÊ   rs.close();\nÊ   stmt.close();\nÊ   con.close();\n}",
    "hierarchy": [
      "JDBC Driver"
    ],
    "pageId": 781
  },
  {
    "content": "The connection URL must contain the <span class=\"code\">zkHost</span> and the <span class=\"code\">collection</span> parameters. The collection must be a valid\nSolrCloud collection at the specified ZooKeeper host. The collection must also be configured with the <span class=\"code\">/sql</span>\nhandler. The <span class=\"code\">aggregationMode</span> and <span class=\"code\">numWorkers</span> parameters are optional.",
    "hierarchy": [
      "JDBC Driver"
    ],
    "pageId": 781
  },
  {
    "content": "Solr accepts parallel SQL queries through the <span class=\"code\">/sql</span> handler.",
    "hierarchy": [
      "HTTP Interface"
    ],
    "pageId": 781
  },
  {
    "content": "Below is a sample curl command performing a SQL aggregate query in facet mode:",
    "hierarchy": [
      "HTTP Interface"
    ],
    "pageId": 781
  },
  {
    "content": "curl --data-urlencode 'stmt=SELECT to, count(*) FROM collection4 GROUP BY to ORDER BY count(*)\ndesc LIMIT 10' http://localhost:8983/solr/collection4/sql?aggregationMode=facet",
    "hierarchy": [
      "HTTP Interface"
    ],
    "pageId": 781
  },
  {
    "content": "Below is sample result set:",
    "hierarchy": [
      "HTTP Interface"
    ],
    "pageId": 781
  },
  {
    "content": "{<span class=\"fc1\">\"result-set\"</span>:{<span class=\"fc1\">\"docs\"</span>:[\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">9158</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"pete.davis@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">6244</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"tana.jones@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">5874</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"jeff.dasovich@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">5867</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"sara.shackleton@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">5595</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"steven.kean@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">4904</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"vkaminski@aol.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">4622</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"mark.taylor@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">3819</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"kay.mann@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">3678</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"richard.shapiro@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"count(*)\"</span>:<span class=\"fc2\">3653</span>,<span class=\"fc1\">\"to\"</span>:<span class=\"fc3\">\"kate.symes@enron.com\"</span>},\nÊ  {<span class=\"fc1\">\"EOF\"</span>:<span class=\"fc3\">\"true\"</span>,<span class=\"fc1\">\"RESPONSE_TIME\"</span>:<span class=\"fc2\">10</span>}]}\n}",
    "hierarchy": [
    ],
    "pageId": 782
  },
  {
    "content": "Notice that the result set is an array of tuples with key/value pairs that match the SQL column list. The final\ntuple contains the EOF flag which signals the end of the stream.",
    "hierarchy": [
    ],
    "pageId": 782
  },
  {
    "content": "Solr supports a broad range of SQL syntax.",
    "hierarchy": [
      "Solr SQL Syntax"
    ],
    "pageId": 782
  },
  {
    "content": "The SQL parser being used by Solr to translate the SQL statements is case insensitive.\nHowever, for ease of reading, all examples on this page use capitalized keywords.",
    "hierarchy": [
      "Solr SQL Syntax"
    ],
    "pageId": 782
  },
  {
    "content": "The SQL parser will return an error if a reserved word is used in the SQL query. Reserved words can be\nescaped and included in the query using the back tick. For example:",
    "hierarchy": [
      "Solr SQL Syntax",
      "Escaping Reserved Words"
    ],
    "pageId": 782
  },
  {
    "content": "Solr supports limited and unlimited select queries. The syntax between the two types of queries are identical\nexcept for the <span class=\"ff1 fs4\">LIMIT</span> clause in the SQL statement. However, they have very different execution plans and\ndifferent requirements for how the data is stored. The sections below explores both types of queries.",
    "hierarchy": [
      "Solr SQL Syntax",
      "SELECT Statements"
    ],
    "pageId": 782
  },
  {
    "content": "A limited select query follows this basic syntax:",
    "hierarchy": [
      "Solr SQL Syntax",
      "SELECT Statements",
      "Basic SELECT statement with LIMIT"
    ],
    "pageId": 782
  },
  {
    "content": "fa <span class=\"fc1\">desc</span> LIMIT <span class=\"fc2\">100</span>",
    "hierarchy": [
      "Solr SQL Syntax",
      "SELECT Statements",
      "Basic SELECT statement with LIMIT"
    ],
    "pageId": 782
  },
  {
    "content": "We've covered many syntax options with this example, so let’s walk through what’s possible below.",
    "hierarchy": [
      "Solr SQL Syntax",
      "SELECT Statements",
      "Basic SELECT statement with LIMIT"
    ],
    "pageId": 782
  },
  {
    "content": "The WHERE clause must have a field on one side of the predicate. Two constants <span class=\"ff4 fs3\">(5 < 10</span>)\nor two fields <span class=\"ff4 fs3\">(fielda > fieldb)</span> is not supported. Subqueries are also not supported.",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "The <span class=\"ff4 fs3\">WHERE</span> clause allows Solr's search syntax to be injected into the SQL query. In the example:",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "The predicate above will execute a full text search for the phrase 'term1 term2' in fieldC.",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "To execute a non-phrase query, simply add parens inside of the single quotes. For example:",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "The predicate above searches for <span class=\"ff4 fs3\">term1</span> OR <span class=\"ff4 fs3\">term2</span> in <span class=\"ff4 fs3\">fieldC</span>.",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "The Solr range query syntax can be used as follows:",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "Complex boolean queries can be specified as follows:",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "To specify NOT queries, you use the <span class=\"ff4 fs3\">AND NOT</span> syntax as follows:",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates"
    ],
    "pageId": 783
  },
  {
    "content": "The parallel SQL interface supports and pushes down most common SQL operators, specifically:",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": "=Equals\nfielda = 10fielda:10",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": "<>Does not equal\nfielda <> 10-fielda:10",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": "!=Does not equal\nfielda != 10-fielda:10",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": ">Greater than\nfielda > 10fielda:{10 TO *]",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": ">=Greater than or equals\nfielda >= 10fielda:[10 TO *]",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": "<Less than\nfielda < 10fielda:[* TO 10}",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": "<=Less than or equals\nfielda <= 10fielda:[* TO 10]",
    "hierarchy": [
      "WHERE Clause and Boolean Predicates",
      "Supported WHERE Operators"
    ],
    "pageId": 783
  },
  {
    "content": "Some operators that are not supported are BETWEEN, LIKE and IN. However, there are workarounds for\nBETWEEN and LIKE.",
    "hierarchy": [
    ],
    "pageId": 784
  },
  {
    "content": "BETWEEN can be supported with a range query, such as <span class=\"ff2 fs1\">field = [50 TO 100]</span>.",
    "hierarchy": [
    ],
    "pageId": 784
  },
  {
    "content": "A simplistic LIKE can be used with a wildcard, such as <span class=\"ff2 fs1\">field = 'sam*'</span>.",
    "hierarchy": [
    ],
    "pageId": 784
  },
  {
    "content": "The <span class=\"ff2 fs1\">ORDER BY</span> clause maps directly to Solr fields. Multiple <span class=\"ff2 fs1\">ORDER BY</span> fields and directions are supported.",
    "hierarchy": [
      "ORDER BY Clause"
    ],
    "pageId": 784
  },
  {
    "content": "The <span class=\"ff2 fs1\">score</span> field is accepted in the <span class=\"ff2 fs1\">ORDER BY</span> clause in queries where a limit is specified.",
    "hierarchy": [
      "ORDER BY Clause"
    ],
    "pageId": 784
  },
  {
    "content": "If the <span class=\"ff2 fs1\">ORDER BY</span> clause contains the exact fields in the <span class=\"ff2 fs1\">GROUP BY</span> clause, then there is no-limit placed on the\nreturned results. If the <span class=\"ff2 fs1\">ORDER BY</span> clause contains different fields than the <span class=\"ff2 fs1\">GROUP BY</span> clause, a limit of 100 is\nautomatically applied. To increase this limit you must specify a value in the <span class=\"ff2 fs1\">LIMIT</span> clause.",
    "hierarchy": [
      "ORDER BY Clause"
    ],
    "pageId": 784
  },
  {
    "content": "Order by fields are case sensitive.",
    "hierarchy": [
      "ORDER BY Clause"
    ],
    "pageId": 784
  },
  {
    "content": "Limits the result set to the specified size. In the example above the clause <span class=\"ff2 fs1\">LIMIT 100</span> will limit the result set\nto 100 records.",
    "hierarchy": [
      "LIMIT Clause"
    ],
    "pageId": 784
  },
  {
    "content": "There are a few differences to note between limited and unlimited queries:",
    "hierarchy": [
      "LIMIT Clause"
    ],
    "pageId": 784
  },
  {
    "content": "Limited queries support <span class=\"ff2 fs1\">score</span> in the field list and <span class=\"ff2 fs1\">ORDER BY</span>. Unlimited queries do not.",
    "hierarchy": [
      "LIMIT Clause"
    ],
    "pageId": 784
  },
  {
    "content": "Limited queries allow any stored field in the field list. Unlimited queries require the fields to be stored as\na DocValues field.",
    "hierarchy": [
      "LIMIT Clause"
    ],
    "pageId": 784
  },
  {
    "content": "Limited queries allow any indexed field in the <span class=\"ff2 fs1\">ORDER BY</span> list. Unlimited queries require the fields to be\nstored as a DocValues field.",
    "hierarchy": [
      "LIMIT Clause"
    ],
    "pageId": 784
  },
  {
    "content": "The SQL interface supports both MapReduce and Facet implementations for <span class=\"ff2 fs1\">SELECT DISTINCT</span> queries.",
    "hierarchy": [
      "SELECT DISTINCT Queries"
    ],
    "pageId": 784
  },
  {
    "content": "The MapReduce implementation shuffles tuples to worker nodes where the Distinct operation is performed.\nThis implementation can perform the Distinct operation over extremely high cardinality fields.",
    "hierarchy": [
      "SELECT DISTINCT Queries"
    ],
    "pageId": 784
  },
  {
    "content": "The Facet implementation pushes down the Distinct operation into the search engine using the JSON Facet\nAPI. This implementation is designed for high performance, high QPS scenarios on low-to-moderate\ncardinality fields.",
    "hierarchy": [
      "SELECT DISTINCT Queries"
    ],
    "pageId": 784
  },
  {
    "content": "The <span class=\"ff2 fs1\">aggregationMode</span> parameter is available in the both the JDBC driver and HTTP interface to choose the\nunderlying implementation (<span class=\"ff2 fs1\">map_reduce</span> or <span class=\"ff2 fs1\">facet</span>). The SQL syntax is identical for both implementations:",
    "hierarchy": [
      "SELECT DISTINCT Queries"
    ],
    "pageId": 784
  },
  {
    "content": "The SQL interface supports simple statistics calculated on numeric fields. The supported functions are\ncount(*)<span class=\"ff2 fs1\">, </span>min<span class=\"ff2 fs1\">, </span>max<span class=\"ff2 fs1\">, </span>sum<span class=\"ff2 fs1\">, and </span>avg<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Statistics"
    ],
    "pageId": 785
  },
  {
    "content": "Because these functions never require data to be shuffled, the aggregations are pushed down into the\nsearch engine and are generated by the <span class=\"link\">StatsComponent</span>.",
    "hierarchy": [
      "Statistics"
    ],
    "pageId": 785
  },
  {
    "content": "The SQL interface also supports <span class=\"code\">GROUP BY</span> aggregate queries.",
    "hierarchy": [
      "GROUP BY Aggregations"
    ],
    "pageId": 785
  },
  {
    "content": "As with <span class=\"code\">SELECT DISTINCT</span> queries, the SQL interface supports both a MapReduce implementation and a\nFacet implementation. The MapReduce implementation can build aggregations over extremely high\ncardinality fields. The Facet implementations provides high performance aggregation over fields with\nmoderate levels of cardinality.",
    "hierarchy": [
      "GROUP BY Aggregations"
    ],
    "pageId": 785
  },
  {
    "content": "Here is a basic example of a GROUP BY query that requests aggregations:",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Basic GROUP BY with Aggregates"
    ],
    "pageId": 785
  },
  {
    "content": "tableA <span class=\"fc4\">WHERE</span> fieldC = <span class=\"fc5\">'term1 term2'</span>",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Basic GROUP BY with Aggregates"
    ],
    "pageId": 785
  },
  {
    "content": "Let's break this down into pieces:",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Basic GROUP BY with Aggregates"
    ],
    "pageId": 785
  },
  {
    "content": "The Column Identifiers can contain both fields in the Solr index and aggregate functions. The supported\naggregate functions are:",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "count(*): Counts the number of records over a set of buckets.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "sum(field): Sums a numeric field over over a set of buckets.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "avg(field): Averages a numeric field over a set of buckets.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "min(field): Returns the min value of a numeric field over a set of buckets.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "max:(field): Returns the max value of a numerics over a set of buckets.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "The non-function fields in the field list determine the fields to calculate the aggregations over.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "GROUP BY<span class=\"ff1 fs1\"> Clause</span>",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "The <span class=\"code\">GROUP BY</span> clause can contain up to 4 fields in the Solr index. These fields should correspond with the\nnon-function fields in the field list.",
    "hierarchy": [
      "GROUP BY Aggregations",
      "Column Identifiers and Aliases"
    ],
    "pageId": 785
  },
  {
    "content": "The <span class=\"code\">HAVING</span> clause may contain any function listed in the field list. Complex <span class=\"code\">HAVING</span> clauses such as this are\nsupported:",
    "hierarchy": [
      "HAVING Clause"
    ],
    "pageId": 786
  },
  {
    "content": "LIMIT <span class=\"fc5\">100</span>",
    "hierarchy": [
      "HAVING Clause"
    ],
    "pageId": 786
  },
  {
    "content": "It makes sense to create a separate SolrCloud collection just for the <span class=\"code\">/sql</span> handler. This collection can be\ncreated using SolrCloud's standard collection API.",
    "hierarchy": [
      "Best Practices",
      "Separate Collections"
    ],
    "pageId": 786
  },
  {
    "content": "Since this collection only exists to handle <span class=\"code\">/sql</span> requests and provide a pool of worker nodes, this collection\ndoes not need to hold any data. Worker nodes are selected randomly from the entire pool of available nodes\nin the <span class=\"code\">/sql</span> handler's collection. So to grow this collection dynamically replicas can be added to existing\nshards. New replicas will automatically be put to work after they’ve been added.",
    "hierarchy": [
      "Best Practices",
      "Separate Collections"
    ],
    "pageId": 786
  },
  {
    "content": "An earlier section describes how the SQL interface translates the SQL statement to a streaming expression.\nOne of the parameters of the request is the <span class=\"code\">aggregationMode</span>, which defines if the query should use a\nMapReduce-like shuffling technique or push the operation down into the search engine.",
    "hierarchy": [
      "Parallel SQL Queries"
    ],
    "pageId": 786
  },
  {
    "content": "The Parallel SQL architecture consists of three logical tiers: a <span class=\"ff1\">SQL</span> tier, a <span class=\"ff1\">Worker</span> tier, and a <span class=\"ff1\">Data Table</span> tier.\nBy default the SQL and Worker tiers are collapsed into the same physical SolrCloud collection.",
    "hierarchy": [
      "Parallel SQL Queries",
      "Parallelized Queries"
    ],
    "pageId": 786
  },
  {
    "content": "The SQL tier is where the <span class=\"code\">/sql</span> handler resides. The <span class=\"code\">/sql</span> handler takes the SQL query and translates it to a\nparallel query plan. It then selects worker nodes to execute the plan and sends the query plan to each\nworker node to be run in parallel.",
    "hierarchy": [
      "Parallel SQL Queries",
      "Parallelized Queries",
      "SQL Tier"
    ],
    "pageId": 786
  },
  {
    "content": "Once the query plan has been executed by the worker nodes, the <span class=\"code\">/sql</span> handler then performs the final\nmerge of the tuples returned by the worker nodes.",
    "hierarchy": [
      "Parallel SQL Queries",
      "Parallelized Queries",
      "SQL Tier"
    ],
    "pageId": 786
  },
  {
    "content": "The workers in the worker tier receive the query plan from the <span class=\"code\">/sql</span> handler and execute the parallel query\nplan. The parallel execution plan includes the queries that need to be made on the Data Table tier and the",
    "hierarchy": [
      "Parallel SQL Queries",
      "Parallelized Queries",
      "Worker Tier"
    ],
    "pageId": 786
  },
  {
    "content": "relational algebra needed to satisfy the query. Each worker node assigned to the query is shuffled 1/N of the\ntuples from the Data Tables. The worker nodes execute the query plan and stream tuples back to the worker\nnodes.",
    "hierarchy": [
    ],
    "pageId": 787
  },
  {
    "content": "The Data Table tier is where the tables reside. Each table is its own SolrCloud collection. The Data Table layer\nreceives queries from the worker nodes and emits tuples (search results). The Data Table tier also handles\nthe initial sorting and partitioning of tuples sent to the workers. This means the tuples are always sorted and\npartitioned before they hit the network. The partitioned tuples are sent directly to the correct worker nodes\nin the proper sort order, ready to be reduced.",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "The image above shows the three tiers broken out into different SolrCloud collections for clarity. In practice\nthe <span class=\"ff4 fs1\">/sql</span> handler and worker collection by default share the same collection.",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "Note:<span class=\"ff1\"> The image shows the network flow for a single Parallel SQL Query (SQL over MapReduce). This</span>\nnetwork flow is used when <span class=\"ff4 fs1\">map_reduce</span> aggregation mode is used for <span class=\"ff4 fs1\">GROUP BY</span> aggregations or the <span class=\"ff4 fs1\">SELECT</span>\nDISTINCT<span class=\"ff1 fs0\"> query. The traditional SolrCloud network flow (without workers) is used when the </span>facet\naggregation mode is used.",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "Below is a description of the flow:",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "1.The client sends a SQL query to the <span class=\"ff4 fs1\">/sql</span> handler. The request is handled by a single <span class=\"ff4 fs1\">/sql</span> handler\ninstance.",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "2.The <span class=\"ff4 fs1\">/sql</span> handler parses the SQL query and creates the parallel query plan.\n3.The query plan is sent to worker nodes (in green).\n4.The worker nodes execute the plan in parallel. The diagram shows each worker node contacting a\ncollection in the Data Table tier (in blue).",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "5.The collection in the Data Table tier is the table from the SQL query. Notice that the collection has five\nshards each with 3 replicas.",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "6.Notice that each worker contacts one replica from each shard. Because there are 5 workers, each worker\nis returned 1/5 of the search results from each shard. The partitioning is done inside of the Data Table\ntier so there is no duplication of data across the network.",
    "hierarchy": [
      "Data Table Tier"
    ],
    "pageId": 787
  },
  {
    "content": "7.<span class=\"ls1\">Also notice with this design ALL replicas in the data layer are shuffling (sorting & partitioning) data</span>\nsimultaneously. As the number of shards, replicas and workers grows this design allows for a massive\namount of computing power to be applied to a single query.",
    "hierarchy": [
    ],
    "pageId": 788
  },
  {
    "content": "8.<span class=\"ls1\">The worker nodes process the tuples returned from the Data Table tier in parallel. The worker nodes</span>\nperform the relational algebra needed to satisfy the query plan.",
    "hierarchy": [
    ],
    "pageId": 788
  },
  {
    "content": "9.<span class=\"ls1\">The worker nodes stream tuples back to the <span class=\"ff2 fs1\">/sql</span> handler where the final merge is done, and finally the</span>\ntuples are streamed back to the client.",
    "hierarchy": [
    ],
    "pageId": 788
  },
  {
    "content": "The SQL interface supports queries sent from SQL clients and database visualization tools such as\nDbVisualizer and Apache Zeppelin.",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools"
    ],
    "pageId": 788
  },
  {
    "content": "For most Java based clients, the following jars will need to be placed on the client classpath:",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "<span class=\"ls1\">all .jars found in <span class=\"ff2 fs1\">$SOLR_HOME/dist/solrj-libs</span></span>",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "<span class=\"ls1\">the SolrJ .jar found at <span class=\"ff2 fs1\">$SOLR_HOME/dist/solr-solrj-<version>.jar</span></span>",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "If you are using Maven, the <span class=\"ff2 fs1\">org.apache.solr.solr-solrj</span> artifact contains the required jars.",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "Once the jars are available on the classpath, the Solr JDBC driver name is\norg.apache.solr.client.solrj.io.sql.DriverImpl<span class=\"ff1 fs0\"> and a connection can be made with the following</span>\nconnection string format:",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "jdbc:solr://SOLR_ZK_CONNECTION_STRING?collection=COLLECTION_NAME",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "There are other parameters that can be optionally added to the connection string like <span class=\"ff2 fs1\">aggregationMode</span> and\nnumWorkers<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Generic Clients"
    ],
    "pageId": 788
  },
  {
    "content": "A step-by-step guide for setting up <span class=\"link\">DbVisualizer</span> is in the section <span class=\"link\">Solr JDBC - DbVisualizer</span>.",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "DbVisualizer"
    ],
    "pageId": 788
  },
  {
    "content": "A step-by-step guide for setting up <span class=\"link\">SQuirreL SQL</span> is in the section <span class=\"link\">Solr JDBC - SQuirreL SQL</span>.",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "SQuirreL SQL"
    ],
    "pageId": 788
  },
  {
    "content": "A step-by-step guide for setting up <span class=\"link\">Apache Zeppelin</span> is in the section <span class=\"link\">Solr JDBC - Apache Zeppelin</span>.",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Apache Zeppelin (incubating)"
    ],
    "pageId": 788
  },
  {
    "content": "Examples of using Python and Jython for connecting to Solr with the Solr JDBC driver are available in the\nsection <span class=\"link\">Solr JDBC - Python/Jython</span>.",
    "hierarchy": [
      "SQL Clients and Database Visualization Tools",
      "Python/Jython"
    ],
    "pageId": 788
  },
  {
    "content": "Examples of using R for connecting to Solr with the Solr JDBC driver are available in the section <span class=\"link\">Solr JDBC - R</span>.",
    "hierarchy": [
      "R"
    ],
    "pageId": 789
  },
  {
    "content": "Solr's JDBC driver supports DBVisualizer for querying Solr.",
    "hierarchy": [
      "Solr JDBC - DbVisualizer"
    ],
    "pageId": 789
  },
  {
    "content": "For <span class=\"link\">DbVisualizer</span>, you will need to create a new driver for Solr using the DbVisualizer Driver Manager. This\nwill add several SolrJ client .jars to the DbVisualizer classpath. The files required are:",
    "hierarchy": [
      "Solr JDBC - DbVisualizer"
    ],
    "pageId": 789
  },
  {
    "content": "all .jars found in <span class=\"code\">$SOLR_HOME/dist/solrj-lib</span>",
    "hierarchy": [
      "Solr JDBC - DbVisualizer"
    ],
    "pageId": 789
  },
  {
    "content": "the SolrJ .jar found at <span class=\"code\">$SOLR_HOME/dist/solr-solrj-<version>.jar</span>",
    "hierarchy": [
      "Solr JDBC - DbVisualizer"
    ],
    "pageId": 789
  },
  {
    "content": "Once the driver has been created, you can create a connection to Solr with the connection string format\noutlined in the generic section and use the SQL Commander to issue queries.",
    "hierarchy": [
      "Solr JDBC - DbVisualizer"
    ],
    "pageId": 789
  },
  {
    "content": "From the Tools menu, choose Driver Manager to add a driver.",
    "hierarchy": [
      "Solr JDBC - DbVisualizer",
      "Setup Driver",
      "Open Driver Manager"
    ],
    "pageId": 789
  },
  {
    "content": "Provide a name for the driver, and provide the URL format:\njdbc:solr://<zk_connection_string>/?collection=<collection><span class=\"ff2 fs0\">. Do not fill in values for the variables</span>\n“<span class=\"code\">zk_connection_string</span>” and “<span class=\"code\">collection</span>”, those will be provided later when the connection to Solr is\nconfigured. The Driver Class will also be automatically added when the driver .jars are added.",
    "hierarchy": [
      "Name the Driver in Driver Manager"
    ],
    "pageId": 790
  },
  {
    "content": "The driver files to be added are:",
    "hierarchy": [
      "Add Driver Files to Classpath"
    ],
    "pageId": 791
  },
  {
    "content": "all .jars in <span class=\"code\">$SOLR_HOME/dist/solrj-lib</span>",
    "hierarchy": [
      "Add Driver Files to Classpath"
    ],
    "pageId": 791
  },
  {
    "content": "the SolrJ .jar found in <span class=\"code\">$SOLR_HOME/dist/solr-solrj-<version>.jar</span>",
    "hierarchy": [
      "Add Driver Files to Classpath"
    ],
    "pageId": 791
  },
  {
    "content": "Once the driver files have been added, you can close the Driver Manager.",
    "hierarchy": [
      "Review and Close Driver Manager"
    ],
    "pageId": 794
  },
  {
    "content": "Next, create a connection to Solr using the driver just created.",
    "hierarchy": [
      "Create a Connection"
    ],
    "pageId": 794
  },
  {
    "content": "Provide the Solr URL, using the ZooKeeper host and port and the collection. For example,\njdbc:solr://localhost:9983?collection=test",
    "hierarchy": [
      "Specify the Solr URL"
    ],
    "pageId": 796
  },
  {
    "content": "Once the connection has been created, double-click on it to open the connection details screen and connect\nto Solr.",
    "hierarchy": [
      "Open and Connect to Solr"
    ],
    "pageId": 797
  },
  {
    "content": "When the connection is established, you can use the SQL Commander to issue queries and view data.",
    "hierarchy": [
      "Open SQL Commander to Enter Queries"
    ],
    "pageId": 798
  },
  {
    "content": "For <span class=\"link\">SQuirreL SQL</span>, you will need to create a new driver for Solr. This will add several SolrJ client .jars to the\nSQuirreL SQL classpath. The files required are:",
    "hierarchy": [
      "Solr JDBC - SQuirreL SQL"
    ],
    "pageId": 799
  },
  {
    "content": "all .jars found in <span class=\"code\">$SOLR_HOME/dist/solrj-libs</span>",
    "hierarchy": [
      "Solr JDBC - SQuirreL SQL"
    ],
    "pageId": 799
  },
  {
    "content": "the SolrJ .jar found at <span class=\"code\">$SOLR_HOME/dist/solr-solrj-<version>.jar</span>",
    "hierarchy": [
      "Solr JDBC - SQuirreL SQL"
    ],
    "pageId": 799
  },
  {
    "content": "Once the driver has been created, you can create a connection to Solr with the connection string format\noutlined in the generic section and use the editor to issue queries.",
    "hierarchy": [
      "Solr JDBC - SQuirreL SQL"
    ],
    "pageId": 799
  },
  {
    "content": "Provide a name for the driver, and provide the URL format:\njdbc:solr://<zk_connection_string>/?collection=<collection><span class=\"ff2 fs0\">. Do not fill in values for the variables</span>\n“<span class=\"code\">zk_connection_string</span>” and “<span class=\"code\">collection</span>”, those will be defined later when the connection to Solr is\nconfigured.",
    "hierarchy": [
      "Name the Driver"
    ],
    "pageId": 800
  },
  {
    "content": "After adding the .jars, you will need to additionally define the Class Name\norg.apache.solr.client.solrj.io.sql.DriverImpl<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Add the Solr JDBC driver class name"
    ],
    "pageId": 803
  },
  {
    "content": "To define a JDBC connection, you must define an alias.",
    "hierarchy": [
      "Create an Alias"
    ],
    "pageId": 804
  },
  {
    "content": "Once you've successfully connected to Solr, you can use the SQL interface to enter queries and work with",
    "hierarchy": [
      "Querying"
    ],
    "pageId": 805
  },
  {
    "content": "data.",
    "hierarchy": [
    ],
    "pageId": 806
  },
  {
    "content": "The Solr JDBC driver can support Apache Zeppelin.",
    "hierarchy": [
      "Solr JDBC - Apache Zeppelin"
    ],
    "pageId": 806
  },
  {
    "content": "This requires Apache Zeppelin 0.6.0 or greater which contains the JDBC interpreter.",
    "hierarchy": [
      "Solr JDBC - Apache Zeppelin"
    ],
    "pageId": 806
  },
  {
    "content": "To use <span class=\"link\">Apache Zeppelin</span> with Solr, you will need to create a JDBC interpreter for Solr. This will add SolrJ to the\ninterpreter classpath. Once the interpreter has been created, you can create a notebook to issue queries.\nThe <span class=\"link\">Apache Zeppelin JDBC interpreter documentation</span> provides additional information about JDBC prefixes\nand other features.",
    "hierarchy": [
      "Solr JDBC - Apache Zeppelin"
    ],
    "pageId": 806
  },
  {
    "content": "For most installations, Apache Zeppelin configures PostgreSQL as the JDBC interpreter\ndefault driver. The default driver can either be replaced by the Solr driver as outlined above\nor you can add a separate JDBC interpreter prefix as outlined in the <span class=\"link\">Apache Zeppelin JDBC</span>\ninterpreter documentation<span class=\"fc2\">.</span>",
    "hierarchy": [
    ],
    "pageId": 808
  },
  {
    "content": "To facilitate easy copying the parameters mentioned in the screenshots, here is a consolidated list of the\nparameters:",
    "hierarchy": [
      "JDBC Interpreter Copy Sheet"
    ],
    "pageId": 809
  },
  {
    "content": "Name : Solr\nInterpreter : jdbc\ndefault.url : jdbc:solr://SOLR_ZK_CONNECTION_STRING?collection=<collection_name>\ndefault.driver : org.apache.solr.client.solrj.io.sql.DriverImpl\ndefault.user : solr\ndependency : org.apache.solr:solr-solrj:7.3.0",
    "hierarchy": [
    ],
    "pageId": 810
  },
  {
    "content": "For some notebooks, the JDBC interpreter will not be bound to the notebook by default.\nInstructions on how to bind the JDBC interpreter to a notebook are available <span class=\"link\">here</span>.",
    "hierarchy": [
      "Query with the Notebook"
    ],
    "pageId": 810
  },
  {
    "content": "The below code block assumes that the Apache Solr driver is setup as the default JDBC interpreter driver. If\nthat is not the case, instructions for using a different prefix is available <span class=\"link\">here</span>.",
    "hierarchy": [
      "Query with the Notebook"
    ],
    "pageId": 810
  },
  {
    "content": "%jdbc\nselect fielda, fieldb, from test limit 10",
    "hierarchy": [
      "Query with the Notebook"
    ],
    "pageId": 810
  },
  {
    "content": "Solr's JDBC driver supports Python and Jython.",
    "hierarchy": [
      "Solr JDBC - Python/Jython"
    ],
    "pageId": 810
  },
  {
    "content": "Python supports accessing JDBC using the <span class=\"link\">JayDeBeApi</span> library. The CLASSPATH variable must be configured\nto contain the solr-solrj jar and the supporting solrj-lib jars.",
    "hierarchy": [
      "Python"
    ],
    "pageId": 811
  },
  {
    "content": "#!/usr/bin/env bash\n# Java 8 must already be installed",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "pip install JayDeBeApi",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "export CLASSPATH=\"$(echo $(ls /opt/solr/dist/solr-solrj* /opt/solr/dist/solrj-lib/*) | tr ' '\n':')\"",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "python solr_jaydebeapi.py",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "Ê jdbc_url = <span class=\"fc6\">\"jdbc:solr://localhost:9983?collection=test\"</span>\nÊ driverName = <span class=\"fc6\">\"org.apache.solr.client.solrj.io.sql.DriverImpl\"</span>\nÊ statement = <span class=\"fc6\">\"select fielda, fieldb, fieldc, fieldd_s, fielde_i from test limit 10\"</span>",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "Ê conn = jaydebeapi.connect(driverName, jdbc_url)\nÊ curs = conn.cursor()\nÊ curs.execute(statement)\nÊ print(curs.fetchall())",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "Ê conn.close()",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "Ê sys.exit(<span class=\"fc7\">0</span>)",
    "hierarchy": [
      "Python",
      "JayDeBeApi"
    ],
    "pageId": 811
  },
  {
    "content": "Jython supports accessing JDBC natively with Java interfaces or with the zxJDBC library. The CLASSPATH\nvariable must be configured to contain the solr-solrj jar and the supporting solrj-lib jars.",
    "hierarchy": [
      "Jython"
    ],
    "pageId": 811
  },
  {
    "content": "#!/usr/bin/env bash\n# Java 8 and Jython must already be installed",
    "hierarchy": [
    ],
    "pageId": 812
  },
  {
    "content": "export CLASSPATH=\"$(echo $(ls /opt/solr/dist/solr-solrj* /opt/solr/dist/solrj-lib/*) | tr ' '\n':')\"",
    "hierarchy": [
    ],
    "pageId": 812
  },
  {
    "content": "jython [solr_java_native.py | solr_zxjdbc.py]",
    "hierarchy": [
    ],
    "pageId": 812
  },
  {
    "content": "Ê jdbc_url = <span class=\"fc5\">\"jdbc:solr://localhost:9983?collection=test\"</span>\nÊ driverName = <span class=\"fc5\">\"org.apache.solr.client.solrj.io.sql.DriverImpl\"</span>\nÊ statement = <span class=\"fc5\">\"select fielda, fieldb, fieldc, fieldd_s, fielde_i from test limit 10\"</span>",
    "hierarchy": [
      "Java Native"
    ],
    "pageId": 812
  },
  {
    "content": "Ê dbConn = DriverManager.getConnection(jdbc_url)\nÊ stmt = dbConn.createStatement()",
    "hierarchy": [
      "Java Native"
    ],
    "pageId": 812
  },
  {
    "content": "Ê resultSet = stmt.executeQuery(statement)\nÊ <span class=\"fc4\">while</span> resultSet.next():\nÊ   print(resultSet.getString(<span class=\"fc5\">\"fielda\"</span>))",
    "hierarchy": [
      "Java Native"
    ],
    "pageId": 812
  },
  {
    "content": "Ê resultSet.close()\nÊ stmt.close()\nÊ dbConn.close()",
    "hierarchy": [
      "Java Native"
    ],
    "pageId": 812
  },
  {
    "content": "Ê sys.exit(<span class=\"fc6\">0</span>)",
    "hierarchy": [
      "Java Native"
    ],
    "pageId": 812
  },
  {
    "content": "Ê jdbc_url = <span class=\"fc4\">\"jdbc:solr://localhost:9983?collection=test\"</span>\nÊ driverName = <span class=\"fc4\">\"org.apache.solr.client.solrj.io.sql.DriverImpl\"</span>\nÊ statement = <span class=\"fc4\">\"select fielda, fieldb, fieldc, fieldd_s, fielde_i from test limit 10\"</span>",
    "hierarchy": [
    ],
    "pageId": 813
  },
  {
    "content": "Ê <span class=\"fc2\">with</span> zxJDBC.connect(jdbc_url, None, None, driverName) <span class=\"fc2\">as</span> conn:\nÊ   <span class=\"fc2\">with</span> conn:\nÊ     <span class=\"fc2\">with</span> conn.cursor() <span class=\"fc2\">as</span> c:\nÊ       c.execute(statement)\nÊ       print(c.fetchall())",
    "hierarchy": [
    ],
    "pageId": 813
  },
  {
    "content": "Ê sys.exit(<span class=\"fc5\">0</span>)",
    "hierarchy": [
    ],
    "pageId": 813
  },
  {
    "content": "R supports accessing JDBC using the <span class=\"fc7\">RJDBC</span> library.",
    "hierarchy": [
      "Solr JDBC - R"
    ],
    "pageId": 813
  },
  {
    "content": "#!/usr/bin/env bash",
    "hierarchy": [
      "Solr JDBC - R",
      "RJDBC"
    ],
    "pageId": 813
  },
  {
    "content": "# Java 8 must already be installed and R configured with `R CMD javareconf`",
    "hierarchy": [
      "Solr JDBC - R",
      "RJDBC"
    ],
    "pageId": 813
  },
  {
    "content": "Rscript -e 'install.packages(\"RJDBC\", dep=TRUE)'\nRscript solr_rjdbc.R",
    "hierarchy": [
      "Solr JDBC - R",
      "RJDBC"
    ],
    "pageId": 813
  },
  {
    "content": "# https://www.rforge.net/RJDBC/",
    "hierarchy": [
    ],
    "pageId": 814
  },
  {
    "content": "library(\"RJDBC\")",
    "hierarchy": [
    ],
    "pageId": 814
  },
  {
    "content": "solrCP <- c(list.files('/opt/solr/dist/solrj-lib', full.names=TRUE), list.files('/opt/solr/dist',\npattern='solrj', full.names=TRUE, recursive = TRUE))",
    "hierarchy": [
    ],
    "pageId": 814
  },
  {
    "content": "drv <- JDBC(\"org.apache.solr.client.solrj.io.sql.DriverImpl\",\nÊ          solrCP,\nÊ          identifier.quote=\"`\")\nconn <- dbConnect(drv, \"jdbc:solr://localhost:9983?collection=test\", \"user\", \"pwd\")",
    "hierarchy": [
    ],
    "pageId": 814
  },
  {
    "content": "dbGetQuery(conn, \"select fielda, fieldb, fieldc, fieldd_s, fielde_i from test limit 10\")",
    "hierarchy": [
    ],
    "pageId": 814
  },
  {
    "content": "dbDisconnect(conn)",
    "hierarchy": [
    ],
    "pageId": 814
  },
  {
    "content": "The Analytics Component allows users to calculate complex statistical aggregations over result sets.",
    "hierarchy": [
      "Analytics Component"
    ],
    "pageId": 815
  },
  {
    "content": "The component enables interacting with data in a variety of ways, both through a diverse set of analytics\nfunctions as well as powerful faceting functionality. The standard facets are supported within the analytics\ncomponent with additions that leverage its analytical capabilities.",
    "hierarchy": [
      "Analytics Component"
    ],
    "pageId": 815
  },
  {
    "content": "The Analytics component is in a contrib module, therefore it will need to be enabled in the <span class=\"code\">solrconfig.xml</span>\nfor each collection where you would like to use it.",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "Since the Analytics framework is a <span class=\"ff4\">search component</span>, it must be declared as such and added to the search\nhandler.",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "For distributed analytics requests over cloud collections, the component uses the <span class=\"code\">AnalyticsHandler</span> strictly\nfor inter-shard communication. The Analytics Handler should not be used by users to submit analytics\nrequests.",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "To configure Solr to use the Analytics Component, the first step is to add a <span class=\"code\">lib</span> directive so Solr loads the\nAnalytic Component classes (for more about the <span class=\"code\">lib</span> directive, see <span class=\"link\">Lib Directives in SolrConfig</span>). In the section\nof <span class=\"code\">solrconfig.xml</span> where the default <span class=\"code\">lib</span> directive are, add a line:",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "Next you need to enable the request handler and search component. Add the following lines to\nsolrconfig.xml<span class=\"ff2 fs1\">, near the defintions for other request handlers:</span>",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "Ê   <span class=\"fc3\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"last_components\"<span class=\"fc3\">></span></span>\nÊ       <span class=\"fc3\"><str></span>analytics<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"></arr></span>",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "For these changes to take effect, restart Solr or reload the core or collection.",
    "hierarchy": [
      "Analytics Component",
      "Analytics Configuration"
    ],
    "pageId": 815
  },
  {
    "content": "An Analytics request is passed to Solr with the parameter <span class=\"code\">analytics</span> in a request sent to the <span class=\"link\">Search Handler</span>.\nSince the analytics request is sent inside of a search handler request, it will compute results based on the",
    "hierarchy": [
      "Analytics Component",
      "Request Syntax"
    ],
    "pageId": 815
  },
  {
    "content": "result set determined by the search handler.",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "For example, this curl command encodes and POSTs a simple analytics request to the the search handler:",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "curl --data-urlencode 'analytics={\nÊ  \"expressions\" : {\nÊ     \"revenue\" : \"sum(mult(price,quantity))\"\nÊ     }\nÊ  }'\nÊ  http://localhost:8983/solr/sales/select?q=*:*&wt=json&rows=0",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "There are 3 main parts of any analytics request:",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "Expressions\nA list of calculations to perform over the entire result set. Expressions aggregate the search results into a\nsingle value to return. This list is entirely independent of the expressions defined in each of the\ngroupings. Find out more about them in the section <span class=\"link\">Expressions</span>.",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "Functions\nOne or more <span class=\"link\">Variable Functions</span> to be used throughout the rest of the request. These are essentially\nlambda functions and can be combined in a number of ways. These functions for the expressions defined\nin <span class=\"ff2 fs1\">expressions</span> as well as <span class=\"ff2 fs1\">groupings</span>.",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "Groupings\nThe list of <span class=\"link\">Groupings</span> to calculate in addition to the expressions. Groupings hold a set of facets and a list\nof expressions to compute over those facets. The expressions defined in a grouping are only calculated\nover the facets defined in that grouping.",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "Either the <span class=\"ff2 fs1\">expressions</span> or the <span class=\"ff2 fs1\">groupings</span> parameter must be present in the request, or else\nthere will be no analytics to compute. The <span class=\"ff2 fs1\">functions</span> parameter is always optional.",
    "hierarchy": [
    ],
    "pageId": 816
  },
  {
    "content": "{\nÊ   <span class=\"fc2\">\"functions\"</span>: {\nÊ       <span class=\"fc2\">\"sale()\"</span>: <span class=\"fc3\">\"mult(price,quantity)\"</span>\nÊ   },\nÊ   <span class=\"fc2\">\"expressions\"</span> : {\nÊ       <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc3\">\"max(sale())\"</span>,\nÊ       <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc3\">\"median(sale())\"</span>\nÊ   },\nÊ   <span class=\"fc2\">\"groupings\"</span> : {\nÊ       <span class=\"fc2\">\"sales\"</span> : {\nÊ           <span class=\"fc2\">\"expressions\"</span> : {\nÊ               <span class=\"fc2\">\"stddev_sale\"</span> : <span class=\"fc3\">\"stddev(sale())\"</span>,\nÊ               <span class=\"fc2\">\"min_price\"</span> : <span class=\"fc3\">\"min(price)\"</span>,\nÊ               <span class=\"fc2\">\"max_quantity\"</span> : <span class=\"fc3\">\"max(quantity)\"</span>\nÊ           },\nÊ           <span class=\"fc2\">\"facets\"</span> : {\nÊ               <span class=\"fc2\">\"category\"</span> : {\nÊ                   <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"value\"</span>,\nÊ                   <span class=\"fc2\">\"expression\"</span> : <span class=\"fc3\">\"fill_missing(category, 'No Category')\"</span>,\nÊ                   <span class=\"fc2\">\"sort\"</span> : {\nÊ                       <span class=\"fc2\">\"criteria\"</span> : [\nÊ                           {\nÊ                               <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"expression\"</span>,\nÊ                               <span class=\"fc2\">\"expression\"</span> : <span class=\"fc3\">\"min_price\"</span>,\nÊ                               <span class=\"fc2\">\"direction\"</span> : <span class=\"fc3\">\"ascending\"</span>\nÊ                           },\nÊ                           {\nÊ                               <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"facetvalue\"</span>,\nÊ                               <span class=\"fc2\">\"direction\"</span> : <span class=\"fc3\">\"descending\"</span>\nÊ                           }\nÊ                       ],\nÊ                       <span class=\"fc2\">\"limit\"</span> : <span class=\"fc4\">10</span>\nÊ                   }\nÊ               },\nÊ               <span class=\"fc2\">\"temps\"</span> : {\nÊ                   <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"query\"</span>,\nÊ                   <span class=\"fc2\">\"queries\"</span> : {\nÊ                       <span class=\"fc2\">\"hot\"</span> : <span class=\"fc3\">\"temp:[90 TO *]\"</span>,\nÊ                       <span class=\"fc2\">\"cold\"</span> : <span class=\"fc3\">\"temp:[* TO 50]\"</span>\nÊ                   }\nÊ               }\nÊ           }\nÊ       }\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 817
  },
  {
    "content": "Expressions are the way to request pieces of information from the analytics component. These are the",
    "hierarchy": [
      "Expressions"
    ],
    "pageId": 817
  },
  {
    "content": "statistical expressions that you want computed and returned in your response.",
    "hierarchy": [
    ],
    "pageId": 818
  },
  {
    "content": "An expression is built using fields, constants, mapping functions and reduction functions. The ways that\nthese can be defined are described below.",
    "hierarchy": [
      "Constructing an Expression",
      "Expression Components"
    ],
    "pageId": 818
  },
  {
    "content": "Sources\nConstants: The values defined in the expression. The supported constant types are described in the\nAnalytics Expression Source Reference<span class=\"fc0\">.</span>\n•Fields: Solr fields that are read from the index. The supported fields are listed in the <span class=\"link\">Analytics</span>\nExpression Source Reference<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Constructing an Expression",
      "Expression Components"
    ],
    "pageId": 818
  },
  {
    "content": "Mapping Functions\nMapping functions map values for each Solr Document or Reduction. The provided mapping functions\nare detailed in the <span class=\"link\">Analytics Mapping Function Reference</span>.",
    "hierarchy": [
      "Constructing an Expression",
      "Expression Components"
    ],
    "pageId": 818
  },
  {
    "content": "Unreduced Mapping: Mapping a Field with another Field or Constant returns a value for every Solr\nDocument. Unreduced mapping functions can take fields, constants as well as other unreduced\nmapping functions as input.\n•Reduced Mapping: Mapping a Reduction Function with another Reduction Function or Constant\nreturns a single value.",
    "hierarchy": [
      "Constructing an Expression",
      "Expression Components"
    ],
    "pageId": 818
  },
  {
    "content": "Reduction Functions\nFunctions that reduce the values of sources and/or unreduced mapping functions for every Solr\nDocument to a single value. The provided reduction functions are detailed in the <span class=\"link\">Analytics Reduction</span>\nFunction Reference<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Constructing an Expression",
      "Expression Components"
    ],
    "pageId": 818
  },
  {
    "content": "The expression components must be used in the following order to create valid expressions.",
    "hierarchy": [
      "Constructing an Expression",
      "Component Ordering"
    ],
    "pageId": 818
  },
  {
    "content": "1.Reduced Mapping Function\na.Constants\nb.Reduction Function\ni.Sources\nii.Unreduced Mapping Function\nA.Sources\nB.Unreduced Mapping Function\nc.Reduced Mapping Function\n2.Reduction Function",
    "hierarchy": [
      "Constructing an Expression",
      "Component Ordering"
    ],
    "pageId": 818
  },
  {
    "content": "This ordering is based on the following rules:",
    "hierarchy": [
      "Constructing an Expression",
      "Component Ordering"
    ],
    "pageId": 818
  },
  {
    "content": "No reduction function can be an argument of another reduction function. Since all reduction is done",
    "hierarchy": [
      "Constructing an Expression",
      "Component Ordering"
    ],
    "pageId": 818
  },
  {
    "content": "together in one step, one reduction function cannot rely on the result of another.",
    "hierarchy": [
    ],
    "pageId": 819
  },
  {
    "content": "No fields can be left unreduced, since the analytics component cannot return a list of values for an\nexpression (one for every document). Every expression must be reduced to a single value.",
    "hierarchy": [
    ],
    "pageId": 819
  },
  {
    "content": "Mapping functions are not necessary when creating functions, however as many nested mappings as\nneeded can be used.",
    "hierarchy": [
    ],
    "pageId": 819
  },
  {
    "content": "Nested mapping functions must be the same type, so either both must be unreduced or both must be\nreduced. A reduced mapping function cannot take an unreduced mapping function as a parameter and\nvice versa.",
    "hierarchy": [
    ],
    "pageId": 819
  },
  {
    "content": "With the above definitions and ordering, an example expression can be broken up into its components:",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "div(sum(a,fill_missing(b,0)),add(10.5,count(mult(a,c)))))",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "As a whole, this is a reduced mapping function. The <span class=\"code\">div</span> function is a reduced mapping function since it is a\nprovided mapping function<span class=\"fc0\"> and has reduced arguments.</span>",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "If we break down the expression further:",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "sum(a,fill_missing(b,0)): Reduction Function\nsum<span class=\"ff1 fs0\"> is a <span class=\"link\">provided reduction function</span>.</span>",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "◦a<span class=\"ff1 fs0\">: Field</span>\n◦fill_missing(b,0)<span class=\"ff1 fs0\">: Unreduced Mapping Function</span>\nfill_missing<span class=\"ff1 fs0\"> is an unreduced mapping function since it is a <span class=\"link\">provided mapping function</span> and has a</span>\nfield argument.\n▪b<span class=\"ff1 fs0\">: Field</span>\n▪0<span class=\"ff1 fs0\">: Constant</span>\nadd(10.5,count(mult(a,c))): Reduced Mapping Function\nadd<span class=\"ff1 fs0\"> is a reduced mapping function since it is a <span class=\"link\">provided mapping function</span> and has a reduction function</span>\nargument.",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "◦10.5<span class=\"ff1 fs0\">: Constant</span>\n◦count(mult(a,c))<span class=\"ff1 fs0\">: Reduction Function</span>\ncount<span class=\"ff1 fs0\"> is a <span class=\"link\">provided reduction function</span></span>\n▪mult(a,c)<span class=\"ff1 fs0\">: Unreduced Mapping Function</span>\nmult<span class=\"ff1 fs0\"> is an unreduced mapping function since it is a <span class=\"link\">provided mapping function</span> and has two field</span>\narguments.\n▪a<span class=\"ff1 fs0\">: Field</span>\n▪c<span class=\"ff1 fs0\">: Field</span>",
    "hierarchy": [
      "Example Construction"
    ],
    "pageId": 819
  },
  {
    "content": "The root of all multi-valued expressions are multi-valued fields. Single-valued expressions can be started\nwith constants or single-valued fields. All single-valued expressions can be treated as multi-valued",
    "hierarchy": [
      "Expression Cardinality (Multi-Valued and Single-Valued)"
    ],
    "pageId": 819
  },
  {
    "content": "expressions that contain one value.",
    "hierarchy": [
    ],
    "pageId": 820
  },
  {
    "content": "Single-valued expressions and multi-valued expressions can be used together in many mapping functions,\nas well as multi-valued expressions being used alone, and many single-valued expressions being used\ntogether. For example:",
    "hierarchy": [
    ],
    "pageId": 820
  },
  {
    "content": "add(<single-valued double>, <single-valued double>, …)\nReturns a single-valued double expression where the value of the values of each expression are added.",
    "hierarchy": [
    ],
    "pageId": 820
  },
  {
    "content": "add(<single-valued double>, <multi-valued double>)\nReturns a multi-valued double expression where each value of the second expression is added to the\nsingle value of the first expression.",
    "hierarchy": [
    ],
    "pageId": 820
  },
  {
    "content": "add(<multi-valued double>, <single-valued double>)\nActs the same as the above function.",
    "hierarchy": [
    ],
    "pageId": 820
  },
  {
    "content": "add(<multi-valued double>)\nReturns a single-valued double expression which is the sum of the multiple values of the parameter\nexpression.",
    "hierarchy": [
    ],
    "pageId": 820
  },
  {
    "content": "The new analytics component currently supports the types listed in the below table. These types have one-\nway implicit casting enabled for the following relationships:",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "Boolean<span class=\"ff1\">String</span>",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "Date<span class=\"ff1\">Long, String</span>",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "Integer<span class=\"ff1\">Long, Float, Double, String</span>",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "Long<span class=\"ff1\">Double, String</span>",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "Float<span class=\"ff1\">Double, String</span>",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "Double<span class=\"ff1\">String</span>",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "An implicit cast means that if a function requires a certain type of value as a parameter, arguments will be\nautomatically converted to that type if it is possible.",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "For example, <span class=\"ff2 fs1\">concat()</span> only accepts string parameters and since all types can be implicitly cast to strings,\nany type is accepted as an argument.",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "This also goes for dynamically typed functions. <span class=\"ff2 fs1\">fill_missing()</span> requires two arguments of the same type.\nHowever, two types that implicitly cast to the same type can also be used.",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "For example, <span class=\"ff2 fs1\">fill_missing(<long>,<float>)</span> will be cast to <span class=\"ff2 fs1\">fill_missing(<double>,<double>)</span> since long\ncannot be cast to float and float cannot be cast to long implicitly.",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "There is an ordering to implicit casts, where the more specialized type is ordered ahead of the more general",
    "hierarchy": [
      "Types and Implicit Casting"
    ],
    "pageId": 820
  },
  {
    "content": "type. Therefore even though both long and float can be implicitly cast to double and string, they will be cast\nto double. This is because double is a more specialized type than string, which every type can be cast to.",
    "hierarchy": [
    ],
    "pageId": 821
  },
  {
    "content": "The ordering is the same as their order in the above table.",
    "hierarchy": [
    ],
    "pageId": 821
  },
  {
    "content": "Cardinality can also be implicitly cast. Single-valued expressions can always be implicitly cast to multi-valued\nexpressions, since all single-valued expressions are multi-valued expressions with one value.",
    "hierarchy": [
    ],
    "pageId": 821
  },
  {
    "content": "Implicit casting will only occur when an expression will not \"compile\" without it. If an expression follows all\ntyping rules initially, no implicit casting will occur. Certain functions such as <span class=\"ff2 fs1\">string()</span>, <span class=\"ff2 fs1\">date()</span>, <span class=\"ff2 fs1\">round()</span>,\nfloor()<span class=\"ff1 fs0\">, and </span>ceil()<span class=\"ff1 fs0\"> act as explicit casts, declaring the type that is desired. However </span>round()<span class=\"ff1 fs0\">, </span>floor()<span class=\"ff1 fs0\"> and</span>\ncell()<span class=\"ff1 fs0\"> can return either int or long, depending on the argument type.</span>",
    "hierarchy": [
    ],
    "pageId": 821
  },
  {
    "content": "Variable functions are a way to shorten your expressions and make writing analytics queries easier. They are\nessentially lambda functions defined in a request.",
    "hierarchy": [
      "Variable Functions"
    ],
    "pageId": 821
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"functions\"</span> : {\nÊ       <span class=\"fc3\">\"sale()\"</span> : <span class=\"fc4\">\"mult(price,quantity)\"</span>\nÊ   },\nÊ   <span class=\"fc3\">\"expressions\"</span> : {\nÊ       <span class=\"fc3\">\"max_sale\"</span> : <span class=\"fc4\">\"max(sale())\"</span>,\nÊ       <span class=\"fc3\">\"med_sale\"</span> : <span class=\"fc4\">\"median(sale())\"</span>\nÊ   }\n}",
    "hierarchy": [
      "Variable Functions"
    ],
    "pageId": 821
  },
  {
    "content": "In the above request, instead of writing <span class=\"ff2 fs1\">mult(price,quantity)</span> twice, a function <span class=\"ff2 fs1\">sale()</span> was defined to\nabstract this idea. Then that function was used in the multiple expressions.",
    "hierarchy": [
      "Variable Functions"
    ],
    "pageId": 821
  },
  {
    "content": "Suppose that we want to look at the sales of specific categories:",
    "hierarchy": [
      "Variable Functions"
    ],
    "pageId": 821
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"functions\"</span> : {\nÊ       <span class=\"fc3\">\"clothing_sale()\"</span> : <span class=\"fc4\">\"filter(mult(price,quantity),equal(category,'Clothing'))\"</span>,\nÊ       <span class=\"fc3\">\"kitchen_sale()\"</span> : <span class=\"fc4\">\"filter(mult(price,quantity),equal(category,\\\"Kitchen\\\"))\"</span>\nÊ   },\nÊ   <span class=\"fc3\">\"expressions\"</span> : {\nÊ       <span class=\"fc3\">\"max_clothing_sale\"</span> : <span class=\"fc4\">\"max(clothing_sale())\"</span>\nÊ     , <span class=\"fc3\">\"med_clothing_sale\"</span> : <span class=\"fc4\">\"median(clothing_sale())\"</span>\nÊ     , <span class=\"fc3\">\"max_kitchen_sale\"</span> : <span class=\"fc4\">\"max(kitchen_sale())\"</span>\nÊ     , <span class=\"fc3\">\"med_kitchen_sale\"</span> : <span class=\"fc4\">\"median(kitchen_sale())\"</span>\nÊ   }\n}",
    "hierarchy": [
      "Variable Functions"
    ],
    "pageId": 821
  },
  {
    "content": "Instead of making a function for each category, it would be much easier to use <span class=\"code\">category</span> as an input to the\nsale()<span class=\"ff2 fs1\"> function. An example of this functionality is shown below:</span>",
    "hierarchy": [
      "Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"functions\"</span> : {\nÊ       <span class=\"fc3\">\"sale(cat)\"</span> : <span class=\"fc4\">\"filter(mult(price,quantity),equal(category,cat))\"</span>\nÊ   },\nÊ   <span class=\"fc3\">\"expressions\"</span> : {\nÊ       <span class=\"fc3\">\"max_clothing_sale\"</span> : <span class=\"fc4\">\"max(sale(\\\"Clothing\\\"))\"</span>\nÊ     , <span class=\"fc3\">\"med_clothing_sale\"</span> : <span class=\"fc4\">\"median(sale('Clothing'))\"</span>\nÊ     , <span class=\"fc3\">\"max_kitchen_sale\"</span> : <span class=\"fc4\">\"max(sale(\\\"Kitchen\\\"))\"</span>\nÊ     , <span class=\"fc3\">\"med_kitchen_sale\"</span> : <span class=\"fc4\">\"median(sale('Kitchen'))\"</span>\nÊ   }\n}",
    "hierarchy": [
      "Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "Variable Functions can take any number of arguments and use them in the function expression as if they\nwere a field or constant.",
    "hierarchy": [
      "Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "There are analytics functions that take a variable amount of parameters. Therefore there are use cases\nwhere variable functions would need to take a variable amount of parameters.",
    "hierarchy": [
      "Variable Length Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "For example, maybe there are multiple, yet undetermined, number of components to the price of a product.\nFunctions can take a variable length of parameters if the last parameter is followed by <span class=\"code\">..</span>",
    "hierarchy": [
      "Variable Length Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"functions\"</span> : {\nÊ       <span class=\"fc3\">\"sale(cat, costs..)\"</span> : <span class=\"fc4\">\"filter(mult(add(costs),quantity),equal(category,cat))\"</span>\nÊ   },\nÊ   <span class=\"fc3\">\"expressions\"</span> : {\nÊ       <span class=\"fc3\">\"max_clothing_sale\"</span> : <span class=\"fc4\">\"max(sale('Clothing', material, tariff, tax))\"</span>\nÊ     , <span class=\"fc3\">\"med_clothing_sale\"</span> : <span class=\"fc4\">\"median(sale('Clothing', material, tariff, tax))\"</span>\nÊ     , <span class=\"fc3\">\"max_kitchen_sale\"</span> : <span class=\"fc4\">\"max(sale('Kitchen', material, construction))\"</span>\nÊ     , <span class=\"fc3\">\"med_kitchen_sale\"</span> : <span class=\"fc4\">\"median(sale('Kitchen', material, construction))\"</span>\nÊ   }\n}",
    "hierarchy": [
      "Variable Length Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "In the above example a variable length argument is used to encapsulate all of the costs to use for a product.\nThere is no definite number of arguments requested for the variable length parameter, therefore the\nclothing expressions can use 3 and the kitchen expressions can use 2. When the <span class=\"code\">sale()</span> function is called,\ncosts<span class=\"ff2 fs1\"> is expanded to the arguments given.</span>",
    "hierarchy": [
      "Variable Length Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "Therefore in the above request, inside of the <span class=\"code\">sale</span> function:",
    "hierarchy": [
      "Variable Length Arguments"
    ],
    "pageId": 822
  },
  {
    "content": "\nadd(costs)",
    "hierarchy": [
    ],
    "pageId": 823
  },
  {
    "content": "is expanded to both of the following:",
    "hierarchy": [
    ],
    "pageId": 823
  },
  {
    "content": "\nadd(material, tariff, tax)",
    "hierarchy": [
    ],
    "pageId": 823
  },
  {
    "content": "\nadd(material, construction)",
    "hierarchy": [
    ],
    "pageId": 823
  },
  {
    "content": "The following function details are for advanced requests.",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "Although the above functionality allows for an undefined number of arguments to be passed to a function, it\ndoes not allow for interacting with those arguments.",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "Many times we might want to wrap each argument in additional functions. For example maybe we want to\nbe able to look at multiple categories at the same time. So we want to see if <span class=\"ff2 fs1\">category EQUALS x <span class=\"ff6\">OR</span></span>\ncategory EQUALS y<span class=\"ff1 fs0\"> and so on.</span>",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "In order to do this we need to use for-each lambda functions, which transform each value of the variable\nlength parameter. The for-each is started with the <span class=\"ff2 fs1\">:</span> character after the variable length parameter.",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "{\nÊ   <span class=\"fc4\">\"functions\"</span> : {\nÊ       <span class=\"fc4\">\"sale(cats..)\"</span> : <span class=\"fc5\">\"filter(mult(price,quantity),or(cats:equal(category,_)))\"</span>\nÊ   },\nÊ   <span class=\"fc4\">\"expressions\"</span> : {\nÊ       <span class=\"fc4\">\"max_sale_1\"</span> : <span class=\"fc5\">\"max(sale('Clothing', 'Kitchen'))\"</span>\nÊ     , <span class=\"fc4\">\"med_sale_1\"</span> : <span class=\"fc5\">\"median(sale('Clothing', 'Kitchen'))\"</span>\nÊ     , <span class=\"fc4\">\"max_sale_2\"</span> : <span class=\"fc5\">\"max(sale('Electronics', 'Entertainment', 'Travel'))\"</span>\nÊ     , <span class=\"fc4\">\"med_sale_2\"</span> : <span class=\"fc5\">\"median(sale('Electronics', 'Entertainment', 'Travel'))\"</span>\nÊ   }\n}",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "In this example, <span class=\"ff2 fs1\">cats:</span> is the syntax that starts a for-each lambda function over every parameter <span class=\"ff2 fs1\">cats</span>, and\nthe <span class=\"ff2 fs1\">_</span> character is used to refer to the value of <span class=\"ff2 fs1\">cats</span> in each iteration in the for-each. When\nsale(\"Clothing\", \"Kitchen\")<span class=\"ff1 fs0\"> is called, the lambda function </span>equal(category,_)<span class=\"ff1 fs0\"> is applied to both</span>\nClothing and Kitchen inside of the <span class=\"ff2 fs1\">or()</span> function.",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "Using all of these rules, the expression:",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "`sale(\"Clothing\",\"Kitchen\")`",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "is expanded to:",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "`filter(mult(price,quantity),or(equal(category,\"Kitchen\"),equal(category,\"Clothing\")))`",
    "hierarchy": [
      "For-Each Functions"
    ],
    "pageId": 823
  },
  {
    "content": "by the expression parser.",
    "hierarchy": [
    ],
    "pageId": 824
  },
  {
    "content": "Facets, much like in other parts of Solr, allow analytics results to be broken up and grouped by attributes of\nthe data that the expressions are being calculated over.",
    "hierarchy": [
      "Groupings And Facets"
    ],
    "pageId": 824
  },
  {
    "content": "The currently available facets for use in the analytics component are Value Facets, Pivot Facets, Range Facets\nand Query Facets. Each facet is required to have a unique name within the grouping it is defined in, and no\nfacet can be defined outside of a grouping.",
    "hierarchy": [
      "Groupings And Facets"
    ],
    "pageId": 824
  },
  {
    "content": "Groupings allow users to calculate the same grouping of expressions over a set of facets. Groupings must\nhave both <span class=\"code\">expressions</span> and <span class=\"code\">facets</span> given.",
    "hierarchy": [
      "Groupings And Facets"
    ],
    "pageId": 824
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"functions\"</span> : {\nÊ       <span class=\"fc3\">\"sale()\"</span> : <span class=\"fc4\">\"mult(price,quantity)\"</span>\nÊ   },\nÊ   <span class=\"fc3\">\"groupings\"</span> : {\nÊ       <span class=\"fc3\">\"sales_numbers\"</span> : {\nÊ           <span class=\"fc3\">\"expressions\"</span> : {\nÊ               <span class=\"fc3\">\"max_sale\"</span> : <span class=\"fc4\">\"max(sale())\"</span>,\nÊ               <span class=\"fc3\">\"med_sale\"</span> : <span class=\"fc4\">\"median(sale())\"</span>\nÊ           },\nÊ           <span class=\"fc3\">\"facets\"</span> : {\nÊ               <span class=\"fc3\">\"<name>\"</span> : <span class=\"fc4\">\"< facet request >\"</span>\nÊ           }\nÊ       }\nÊ   }\n}",
    "hierarchy": [
      "Groupings And Facets"
    ],
    "pageId": 824
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"analytics_response\"</span> : {\nÊ       <span class=\"fc3\">\"groupings\"</span> : {\nÊ           <span class=\"fc3\">\"sales_numbers\"</span> : {\nÊ               <span class=\"fc3\">\"<name>\"</span> : <span class=\"fc4\">\"< facet response >\"</span>\nÊ           }\nÊ       }\nÊ   }\n}",
    "hierarchy": [
      "Groupings And Facets"
    ],
    "pageId": 824
  },
  {
    "content": "Some Analytics facets allow for complex sorting of their results. The two current sortable facets are <span class=\"link\">Analytic</span>\nValue Facets<span class=\"fc0\"> and </span>Analytic Pivot Facets<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Groupings And Facets",
      "Facet Sorting"
    ],
    "pageId": 824
  },
  {
    "content": "criteria\nThe list of criteria to sort the facet by.",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "It takes the following parameters:",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "type\nThe type of sort. There are two possible values:",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "expression: Sort by the value of an expression defined in the same grouping.\n•facetvalue: Sort by the string-representation of the facet value.",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "Direction\n(Optional)<span class=\"code\"> The direction to sort.</span>",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "ascending <span class=\"ff4\">(Default)</span>\n•\ndescending",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "expression\nWhen <span class=\"ff2 fs1\">type = expression</span>, the name of an expression defined in the same grouping.",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "limit\nLimit the number of returned facet values to the top <span class=\"ff4\">N</span>. <span class=\"ff4\">(Optional)</span>",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "offset\nWhen a limit is set, skip the top <span class=\"ff4\">N</span> facet values. <span class=\"ff4\">(Optional)</span>",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "{\nÊ   <span class=\"fc3\">\"criteria\"</span> : [\nÊ       {\nÊ           <span class=\"fc3\">\"type\"</span> : <span class=\"fc4\">\"expression\"</span>,\nÊ           <span class=\"fc3\">\"expression\"</span> : <span class=\"fc4\">\"max_sale\"</span>,\nÊ           <span class=\"fc3\">\"direction\"</span> : <span class=\"fc4\">\"ascending\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc3\">\"type\"</span> : <span class=\"fc4\">\"facetvalue\"</span>,\nÊ           <span class=\"fc3\">\"direction\"</span> : <span class=\"fc4\">\"descending\"</span>\nÊ       }\nÊ   ],\nÊ   <span class=\"fc3\">\"limit\"</span> : <span class=\"fc5\">10</span>,\nÊ   <span class=\"fc3\">\"offset\"</span> : <span class=\"fc5\">5</span>\n}",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 825
  },
  {
    "content": "Value Facets are used to group documents by the value of a mapping expression applied to each document.\nMapping expressions are expressions that do not include a reduction function.",
    "hierarchy": [
      "Value Facets"
    ],
    "pageId": 825
  },
  {
    "content": "For more information, refer to the <span class=\"link\">Expressions section</span>.",
    "hierarchy": [
    ],
    "pageId": 826
  },
  {
    "content": "mult(quantity, sum(price, tax)): breakup documents by the revenue generated",
    "hierarchy": [
    ],
    "pageId": 826
  },
  {
    "content": "fillmissing(state, \"N/A\"): breakup documents by state, where N/A is used when the document\ndoesn't contain a state",
    "hierarchy": [
    ],
    "pageId": 826
  },
  {
    "content": "Value Facets can be sorted.",
    "hierarchy": [
    ],
    "pageId": 826
  },
  {
    "content": "expression\nThe expression to choose a facet bucket for each document.",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 826
  },
  {
    "content": "sort\nA <span class=\"link\">sort</span> for the results of the pivot.",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 826
  },
  {
    "content": "The <span class=\"ff2 fs1\">sort</span> parameter is optional.",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 826
  },
  {
    "content": "{\nÊ   <span class=\"fc5\">\"type\"</span> : <span class=\"fc6\">\"value\"</span>,\nÊ   <span class=\"fc5\">\"expression\"</span> : <span class=\"fc6\">\"fillmissing(category,'No Category')\"</span>,\nÊ   <span class=\"fc5\">\"sort\"</span> : {}\n}",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 826
  },
  {
    "content": "[\nÊ   { <span class=\"fc5\">\"...\"</span> : <span class=\"fc6\">\"...\"</span> },\nÊ   {\nÊ       <span class=\"fc5\">\"value\"</span> : <span class=\"fc6\">\"Electronics\"</span>,\nÊ       <span class=\"fc5\">\"results\"</span> : {\nÊ           <span class=\"fc5\">\"max_sale\"</span> : <span class=\"fc7\">103.75</span>,\nÊ           <span class=\"fc5\">\"med_sale\"</span> : <span class=\"fc7\">15.5</span>\nÊ       }\nÊ   },\nÊ   {\nÊ       <span class=\"fc5\">\"value\"</span> : <span class=\"fc6\">\"Kitchen\"</span>,\nÊ       <span class=\"fc5\">\"results\"</span> : {\nÊ           <span class=\"fc5\">\"max_sale\"</span> : <span class=\"fc7\">88.25</span>,\nÊ           <span class=\"fc5\">\"med_sale\"</span> : <span class=\"fc7\">11.37</span>\nÊ       }\nÊ   },\nÊ   { <span class=\"fc5\">\"...\"</span> : <span class=\"fc6\">\"...\"</span> }\n]",
    "hierarchy": [
      "Parameters"
    ],
    "pageId": 826
  },
  {
    "content": "This is a replacement for Field Facets in the original Analytics Component. Field Facet\nfunctionality is maintained in Value Facets by using the name of a field as the expression.",
    "hierarchy": [
    ],
    "pageId": 827
  },
  {
    "content": "Pivot Facets are used to group documents by the value of multiple mapping expressions applied to each\ndocument.",
    "hierarchy": [
      "Analytic Pivot Facets"
    ],
    "pageId": 827
  },
  {
    "content": "Pivot Facets work much like layers of <span class=\"link\">Analytic Value Facets</span>. A list of pivots is required, and the order of the\nlist directly impacts the results returned. The first pivot given will be treated like a normal value facet. The\nsecond pivot given will be treated like one value facet for each value of the first pivot. Each of these second-\nlevel value facets will be limited to the documents in their first-level facet bucket. This continues for however\nmany pivots are provided.",
    "hierarchy": [
      "Analytic Pivot Facets"
    ],
    "pageId": 827
  },
  {
    "content": "Sorting is enabled on a per-pivot basis. This means that if your top pivot has a sort with <span class=\"ff5 fs3\">limit:1</span>, then only\nthat first value of the facet will be drilled down into. Sorting in each pivot is independent of the other pivots.",
    "hierarchy": [
      "Analytic Pivot Facets"
    ],
    "pageId": 827
  },
  {
    "content": "pivots\nThe list of pivots to calculate a drill-down facet for. The list is ordered by top-most to bottom-most level.",
    "hierarchy": [
      "Analytic Pivot Facets",
      "Parameters"
    ],
    "pageId": 827
  },
  {
    "content": "name\nThe name of the pivot.",
    "hierarchy": [
      "Analytic Pivot Facets",
      "Parameters"
    ],
    "pageId": 827
  },
  {
    "content": "expression\nThe expression to choose a facet bucket for each document.",
    "hierarchy": [
      "Analytic Pivot Facets",
      "Parameters"
    ],
    "pageId": 827
  },
  {
    "content": "sort\nA <span class=\"link\">sort</span> for the results of the pivot.",
    "hierarchy": [
      "Analytic Pivot Facets",
      "Parameters"
    ],
    "pageId": 827
  },
  {
    "content": "The <span class=\"ff5 fs3\">sort</span> parameter within the pivot object is optional, and can be given in any, none or all\nof the provided pivots.",
    "hierarchy": [
      "Analytic Pivot Facets",
      "Parameters"
    ],
    "pageId": 827
  },
  {
    "content": "{\nÊ   <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"pivot\"</span>,\nÊ   <span class=\"fc2\">\"pivots\"</span> : [\nÊ       {\nÊ           <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"country\"</span>,\nÊ           <span class=\"fc2\">\"expression\"</span> : <span class=\"fc3\">\"country\"</span>,\nÊ           <span class=\"fc2\">\"sort\"</span> : {}\nÊ       },\nÊ       {\nÊ           <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"state\"</span>,\nÊ           <span class=\"fc2\">\"expression\"</span> : <span class=\"fc3\">\"fillmissing(state, fillmissing(providence, territory))\"</span>\nÊ       },\nÊ       {\nÊ           <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"city\"</span>,\nÊ           <span class=\"fc2\">\"expression\"</span> : <span class=\"fc3\">\"fillmissing(city, 'N/A')\"</span>,\nÊ           <span class=\"fc2\">\"sort\"</span> : {}\nÊ       }\nÊ   ]\n}",
    "hierarchy": [
    ],
    "pageId": 828
  },
  {
    "content": "[\nÊ   { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> },\nÊ   {\nÊ       <span class=\"fc2\">\"pivot\"</span> : <span class=\"fc3\">\"Country\"</span>,\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"USA\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">103.75</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">15.5</span>\nÊ       },\nÊ       <span class=\"fc2\">\"children\"</span> : [\nÊ           { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> },\nÊ           {\nÊ               <span class=\"fc2\">\"pivot\"</span> : <span class=\"fc3\">\"State\"</span>,\nÊ               <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"Texas\"</span>,\nÊ               <span class=\"fc2\">\"results\"</span> : {\nÊ                   <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">99.2</span>,\nÊ                   <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">20.35</span>\nÊ               },\nÊ               <span class=\"fc2\">\"children\"</span> : [\nÊ                   { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> },\nÊ                   {\nÊ                       <span class=\"fc2\">\"pivot\"</span> : <span class=\"fc3\">\"City\"</span>,\nÊ                       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"Austin\"</span>,\nÊ                       <span class=\"fc2\">\"results\"</span> : {\nÊ                           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">94.34</span>,\nÊ                           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">17.60</span>\nÊ                       }\nÊ                   },\nÊ                   { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> }\nÊ               ]\nÊ           },\nÊ           { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> }\nÊ       ]\nÊ   },\nÊ   { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> }\n]",
    "hierarchy": [
    ],
    "pageId": 829
  },
  {
    "content": "Range Facets are used to group documents by the value of a field into a given set of ranges. The inputs for\nanalytics range facets are identical to those used for Solr range facets. Refer to the <span class=\"fc6\">Range Facet</span>\ndocumentation<span class=\"fc1\"> for additional questions regarding use.</span>",
    "hierarchy": [
      "Analytics Range Facets"
    ],
    "pageId": 829
  },
  {
    "content": "field\nField to be faceted over",
    "hierarchy": [
      "Analytics Range Facets",
      "Parameters"
    ],
    "pageId": 829
  },
  {
    "content": "start",
    "hierarchy": [
      "Analytics Range Facets",
      "Parameters"
    ],
    "pageId": 829
  },
  {
    "content": "The bottom end of the range",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "end\nThe top end of the range",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "gap\nA list of range gaps to generate facet buckets. If the buckets do not add up to fit the <span class=\"ff2 fs1\">start</span> to <span class=\"ff2 fs1\">end</span> range,\nthen the last <span class=\"ff2 fs1\">gap</span> value will repeated as many times as needed to fill any unused range.",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "hardend\nWhether to cutoff the last facet bucket range at the <span class=\"ff2 fs1\">end</span> value if it spills over. Defaults to <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "include\nThe boundaries to include in the facet buckets. Defaults to <span class=\"ff2 fs1\">lower</span>.",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "lower - All gap-based ranges include their lower bound.\n•upper - All gap-based ranges include their upper bound.\n•edge - The first and last gap ranges include their edge bounds (lower for the first one, upper for the\nlast one) even if the corresponding upper/lower option is not specified.\n•outer - The <span class=\"ff2 fs1\">before</span> and <span class=\"ff2 fs1\">after</span> ranges will be inclusive of their bounds, even if the first or last ranges\nalready include those boundaries.\n•all - Includes all options: <span class=\"ff2 fs1\">lower</span>, <span class=\"ff2 fs1\">upper</span>, <span class=\"ff2 fs1\">edge</span>, and <span class=\"ff2 fs1\">outer</span>",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "others\nAdditional ranges to include in the facet. Defaults to <span class=\"ff2 fs1\">none</span>.",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "before - All records with field values lower then lower bound of the first range.\n•after - All records with field values greater then the upper bound of the last range.\n•between - All records with field values between the lower bound of the first range and the upper\nbound of the last range.\n•none - Include facet buckets for none of the above.\n•all - Include facet buckets for <span class=\"ff2 fs1\">before</span>, <span class=\"ff2 fs1\">after</span> and <span class=\"ff2 fs1\">between</span>.",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "The <span class=\"ff2 fs1\">hardend</span>, <span class=\"ff2 fs1\">include</span> and <span class=\"ff2 fs1\">others</span> parameters are all optional.",
    "hierarchy": [
    ],
    "pageId": 830
  },
  {
    "content": "{\nÊ   <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"range\"</span>,\nÊ   <span class=\"fc2\">\"field\"</span> : <span class=\"fc3\">\"price\"</span>,\nÊ   <span class=\"fc2\">\"start\"</span> : <span class=\"fc3\">\"0\"</span>,\nÊ   <span class=\"fc2\">\"end\"</span> : <span class=\"fc3\">\"100\"</span>,\nÊ   <span class=\"fc2\">\"gap\"</span> : [\nÊ       <span class=\"fc3\">\"5\"</span>,\nÊ       <span class=\"fc3\">\"10\"</span>,\nÊ       <span class=\"fc3\">\"10\"</span>,\nÊ       <span class=\"fc3\">\"25\"</span>\nÊ   ],\nÊ   <span class=\"fc2\">\"hardend\"</span> : <span class=\"fc4\">true</span>,\nÊ   <span class=\"fc2\">\"include\"</span> : [\nÊ       <span class=\"fc3\">\"lower\"</span>,\nÊ       <span class=\"fc3\">\"upper\"</span>\nÊ   ],\nÊ   <span class=\"fc2\">\"others\"</span> : [\nÊ       <span class=\"fc3\">\"after\"</span>,\nÊ       <span class=\"fc3\">\"between\"</span>\nÊ   ]\n}",
    "hierarchy": [
    ],
    "pageId": 831
  },
  {
    "content": "[\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"[0 TO 5]\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">4.75</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">3.45</span>\nÊ       }\nÊ   },\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"[5 TO 15]\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">13.25</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">10.20</span>\nÊ       }\nÊ   },\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"[15 TO 25]\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">22.75</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">18.50</span>\nÊ       }\nÊ   },\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"[25 TO 50]\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">47.55</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">30.33</span>\nÊ       }\nÊ   },\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"[50 TO 75]\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">70.25</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">64.54</span>\nÊ       }\nÊ   },\nÊ   { <span class=\"fc2\">\"...\"</span> : <span class=\"fc3\">\"...\"</span> }\n]",
    "hierarchy": [
    ],
    "pageId": 832
  },
  {
    "content": "Query Facets are used to group documents by given set of queries.",
    "hierarchy": [
      "Query Facets"
    ],
    "pageId": 832
  },
  {
    "content": "queries\nThe list of queries to facet by.",
    "hierarchy": [
      "Query Facets",
      "Parameters"
    ],
    "pageId": 832
  },
  {
    "content": "{\nÊ   <span class=\"fc2\">\"type\"</span> : <span class=\"fc3\">\"query\"</span>,\nÊ   <span class=\"fc2\">\"queries\"</span> : {\nÊ       <span class=\"fc2\">\"high_quantity\"</span> : <span class=\"fc3\">\"quantity:[ 5 TO 14 ] AND price:[ 100 TO * ]\"</span>,\nÊ       <span class=\"fc2\">\"low_quantity\"</span> : <span class=\"fc3\">\"quantity:[ 1 TO 4 ] AND price:[ 100 TO * ]\"</span>\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 833
  },
  {
    "content": "[\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"high_quantity\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">4.75</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">3.45</span>\nÊ       }\nÊ   },\nÊ   {\nÊ       <span class=\"fc2\">\"value\"</span> : <span class=\"fc3\">\"low_quantity\"</span>,\nÊ       <span class=\"fc2\">\"results\"</span> : {\nÊ           <span class=\"fc2\">\"max_sale\"</span> : <span class=\"fc4\">13.25</span>,\nÊ           <span class=\"fc2\">\"med_sale\"</span> : <span class=\"fc4\">10.20</span>\nÊ       }\nÊ   }\n]",
    "hierarchy": [
    ],
    "pageId": 833
  },
  {
    "content": "Expression sources are the source of the data being aggregated in <span class=\"fc6\">analytics expressions</span>.",
    "hierarchy": [
      "Analytics Expression Sources"
    ],
    "pageId": 833
  },
  {
    "content": "These sources can be either Solr fields indexed with docValues, or constants.",
    "hierarchy": [
      "Analytics Expression Sources"
    ],
    "pageId": 833
  },
  {
    "content": "The following <span class=\"fc6\">Solr field types</span> are supported. Fields of these types can be either multi-valued and single-\nvalued.",
    "hierarchy": [
      "Analytics Expression Sources",
      "Supported Field Types"
    ],
    "pageId": 833
  },
  {
    "content": "All fields used in analytics expressions <span class=\"code\">must</span> have <span class=\"fc6\">docValues</span> enabled.",
    "hierarchy": [
      "Analytics Expression Sources",
      "Supported Field Types"
    ],
    "pageId": 833
  },
  {
    "content": "String\nStrField",
    "hierarchy": [
      "Analytics Expression Sources",
      "Supported Field Types"
    ],
    "pageId": 833
  },
  {
    "content": "Boolean\nBoolField",
    "hierarchy": [
      "Analytics Expression Sources",
      "Supported Field Types"
    ],
    "pageId": 833
  },
  {
    "content": "Integer\nTrieIntField",
    "hierarchy": [
      "Analytics Expression Sources",
      "Supported Field Types"
    ],
    "pageId": 833
  },
  {
    "content": "IntPointField",
    "hierarchy": [
    ],
    "pageId": 834
  },
  {
    "content": "Long\nTrieLongField\nLongPointField",
    "hierarchy": [
    ],
    "pageId": 834
  },
  {
    "content": "Float\nTrieFloatField\nFloatPointField",
    "hierarchy": [
    ],
    "pageId": 834
  },
  {
    "content": "Double\nTrieDoubleField\nDoublePointField",
    "hierarchy": [
    ],
    "pageId": 834
  },
  {
    "content": "Date\nTrieDateField\nDatePointField",
    "hierarchy": [
    ],
    "pageId": 834
  },
  {
    "content": "All multi-valued field types, except for PointFields, are de-duplicated, meaning duplicate\nvalues for the same field are removed during indexing. In order to save duplicates, you\nmust use PointField types.",
    "hierarchy": [
    ],
    "pageId": 834
  },
  {
    "content": "Constants can be included in expressions to use along side fields and functions. The available constants are\nshown below. Constants do not need to be surrounded by any function to define them, they can be used\nexactly like fields in an expression.",
    "hierarchy": [
      "Constants"
    ],
    "pageId": 834
  },
  {
    "content": "There are two possible ways of specifying constant strings, as shown below.",
    "hierarchy": [
      "Constants",
      "Strings"
    ],
    "pageId": 834
  },
  {
    "content": "Surrounded by double quotes, inside the quotes both <span class=\"ff5 fs3\">\"</span> and <span class=\"ff5 fs3\">\\</span> must be escaped with a <span class=\"ff5 fs3\">\\</span> character.",
    "hierarchy": [
      "Constants",
      "Strings"
    ],
    "pageId": 834
  },
  {
    "content": "\"Inside of 'double' \\\\ \\\"quotes\\\"\"<span class=\"ff1 fs0\"> => </span>Inside of 'double' \\ \"quotes\"",
    "hierarchy": [
      "Constants",
      "Strings"
    ],
    "pageId": 834
  },
  {
    "content": "Surrounded by single quotes, inside the quotes both <span class=\"ff5 fs3\">'</span> and <span class=\"ff5 fs3\">\\</span> must be escaped with a <span class=\"ff5 fs3\">\\</span> character.",
    "hierarchy": [
      "Constants",
      "Strings"
    ],
    "pageId": 834
  },
  {
    "content": "'Inside of \"single\" \\\\ \\'quotes\\''<span class=\"ff1 fs0\"> => </span>Inside of \"double\" \\ 'quotes'",
    "hierarchy": [
      "Constants",
      "Strings"
    ],
    "pageId": 834
  },
  {
    "content": "Dates can be specified in the same way as they are in Solr queries. Just use ISO-8601 format. For more\ninformation, refer to the <span class=\"link\">Working with Dates</span> section.",
    "hierarchy": [
      "Constants",
      "Dates"
    ],
    "pageId": 834
  },
  {
    "content": "\n2017-07-17T19:35:08Z",
    "hierarchy": [
      "Constants",
      "Dates"
    ],
    "pageId": 834
  },
  {
    "content": "Any non-decimal number will be read as an integer, or as a long if it is too large for an integer. All decimal",
    "hierarchy": [
      "Constants",
      "Numeric"
    ],
    "pageId": 834
  },
  {
    "content": "numbers will be read as doubles.",
    "hierarchy": [
    ],
    "pageId": 835
  },
  {
    "content": "-123421: Integer",
    "hierarchy": [
    ],
    "pageId": 835
  },
  {
    "content": "800000000000: Long",
    "hierarchy": [
    ],
    "pageId": 835
  },
  {
    "content": "230.34: Double",
    "hierarchy": [
    ],
    "pageId": 835
  },
  {
    "content": "Mapping functions map values for each Solr Document or Reduction.",
    "hierarchy": [
      "Analytics Mapping Functions"
    ],
    "pageId": 835
  },
  {
    "content": "Below is a list of all mapping functions provided by the Analytics Component. These mappings can be\nchained together to implement more complex functionality.",
    "hierarchy": [
      "Analytics Mapping Functions"
    ],
    "pageId": 835
  },
  {
    "content": "Negates the result of a numeric expression.",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Negation"
    ],
    "pageId": 835
  },
  {
    "content": "neg(<_Numeric_ T>)<span class=\"code\"> => </span><T>\nneg(10.53) => <span class=\"ff2 fs1\">-10.53</span>\n•neg([1, -4]) => <span class=\"ff2 fs1\">[-1, 4]</span>",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Negation"
    ],
    "pageId": 835
  },
  {
    "content": "Returns the absolute value of the numeric expression.",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Absolute Value"
    ],
    "pageId": 835
  },
  {
    "content": "abs(< Numeric T >)<span class=\"code\"> => </span>< T >\nabs(-10.53) => <span class=\"ff2 fs1\">10.53</span>\n•abs([1, -4]) => <span class=\"ff2 fs1\">[1, 4]</span>",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Absolute Value"
    ],
    "pageId": 835
  },
  {
    "content": "Rounds the numeric expression to the nearest <span class=\"ff2 fs1\">Integer</span> or <span class=\"ff2 fs1\">Long</span> value.",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Round"
    ],
    "pageId": 835
  },
  {
    "content": "round(< Float >)<span class=\"code\"> => </span>< Int >\nround(< Double >)<span class=\"code\"> => </span>< Long >\nround(-1.5) => <span class=\"ff2 fs1\">-1</span>\n•round([1.75, 100.34]) => <span class=\"ff2 fs1\">[2, 100]</span>",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Round"
    ],
    "pageId": 835
  },
  {
    "content": "Rounds the numeric expression to the nearest <span class=\"ff2 fs1\">Integer</span> or <span class=\"ff2 fs1\">Long</span> value that is greater than or equal to the\noriginal value.",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Ceiling"
    ],
    "pageId": 835
  },
  {
    "content": "ceil(< Float >)<span class=\"code\"> => </span>< Int >\nceil(< Double >)<span class=\"code\"> => </span>< Long >\nceil(5.01) => <span class=\"ff2 fs1\">5</span>\n•ceil([-4.999, 6.99]) => <span class=\"ff2 fs1\">[-4, 7]</span>",
    "hierarchy": [
      "Analytics Mapping Functions",
      "Numeric Functions",
      "Ceiling"
    ],
    "pageId": 835
  },
  {
    "content": "Rounds the numeric expression to the nearest <span class=\"code\">Integer</span> or <span class=\"code\">Long</span> value that is less than or equal to the original\nvalue.",
    "hierarchy": [
      "Floor"
    ],
    "pageId": 836
  },
  {
    "content": "floor(< Float >)<span class=\"ff1 fs0\"> => </span>< Int >\nfloor(< Double >)<span class=\"ff1 fs0\"> => </span>< Long >\nfloor(5.75) => <span class=\"code\">5</span>\n•floor([-4.001, 6.01]) => <span class=\"code\">[-5, 6]</span>",
    "hierarchy": [
      "Floor"
    ],
    "pageId": 836
  },
  {
    "content": "Adds the values of the numeric expressions.",
    "hierarchy": [
      "Addition"
    ],
    "pageId": 836
  },
  {
    "content": "add(< Multi Double >)<span class=\"ff1 fs0\"> => </span>< Single Double >\nadd([1, -4]) => <span class=\"code\">-3.0</span>",
    "hierarchy": [
      "Addition"
    ],
    "pageId": 836
  },
  {
    "content": "add(< Single Double >, < Multi Double >)<span class=\"ff1 fs0\"> => </span>< Multi Double >\nadd(3.5, [1, -4]) => <span class=\"code\">[4.5, -0.5]</span>",
    "hierarchy": [
      "Addition"
    ],
    "pageId": 836
  },
  {
    "content": "add(< Multi Double >, < Single Double >)<span class=\"ff1 fs0\"> => </span>< Multi Double >\nadd([1, -4], 3.5) => <span class=\"code\">[4.5, -0.5]</span>",
    "hierarchy": [
      "Addition"
    ],
    "pageId": 836
  },
  {
    "content": "add(< Single Double >, …)<span class=\"ff1 fs0\"> => </span>< Single Double >\nadd(3.5, 100, -27.6) => <span class=\"code\">75.9</span>",
    "hierarchy": [
      "Addition"
    ],
    "pageId": 836
  },
  {
    "content": "Subtracts the values of the numeric expressions.",
    "hierarchy": [
      "Subtraction"
    ],
    "pageId": 836
  },
  {
    "content": "sub(< Single Double >, < Single Double >)<span class=\"ff1 fs0\"> => </span>< Single Double >\nsub(3.5, 100) => <span class=\"code\">-76.5</span>",
    "hierarchy": [
      "Subtraction"
    ],
    "pageId": 836
  },
  {
    "content": "sub(< Single Double >, < Multi Double >)<span class=\"ff1 fs0\"> => </span>< Multi Double >\nsub(3.5, [1, -4]) => <span class=\"code\">[2.5, 7.5]</span>",
    "hierarchy": [
      "Subtraction"
    ],
    "pageId": 836
  },
  {
    "content": "sub(< Multi Double >, < Single Double >)<span class=\"ff1 fs0\"> => </span>< Multi Double >\nsub([1, -4], 3.5) => <span class=\"code\">[-2.5, -7.5]</span>",
    "hierarchy": [
      "Subtraction"
    ],
    "pageId": 836
  },
  {
    "content": "Multiplies the values of the numeric expressions.",
    "hierarchy": [
      "Multiplication"
    ],
    "pageId": 836
  },
  {
    "content": "mult(< Multi Double >)<span class=\"ff1 fs0\"> => </span>< Single Double >\nmult([1, -4]) => <span class=\"code\">-4.0</span>",
    "hierarchy": [
      "Multiplication"
    ],
    "pageId": 836
  },
  {
    "content": "mult(< Single Double >, < Multi Double >)<span class=\"ff1 fs0\"> => </span>< Multi Double >\nmult(3.5, [1, -4]) => <span class=\"code\">[3.5, -16.0]</span>",
    "hierarchy": [
      "Multiplication"
    ],
    "pageId": 836
  },
  {
    "content": "mult(< Multi Double >, < Single Double >)<span class=\"ff1 fs0\"> => </span>< Multi Double >\nmult([1, -4], 3.5) => <span class=\"code\">[3.5, 16.0]</span>",
    "hierarchy": [
      "Multiplication"
    ],
    "pageId": 836
  },
  {
    "content": "mult(< Single Double >, …)<span class=\"ff2 fs1\"> => </span>< Single Double >\nmult(3.5, 100, -27.6) => <span class=\"ff1 fs0\">-9660</span>",
    "hierarchy": [
    ],
    "pageId": 837
  },
  {
    "content": "Divides the values of the numeric expressions.",
    "hierarchy": [
      "Division"
    ],
    "pageId": 837
  },
  {
    "content": "div(< Single Double >, < Single Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >\ndiv(3.5, 100) => <span class=\"ff1 fs0\">.035</span>",
    "hierarchy": [
      "Division"
    ],
    "pageId": 837
  },
  {
    "content": "div(< Single Double >, < Multi Double >)<span class=\"ff2 fs1\"> => </span>< Multi Double >\ndiv(3.5, [1, -4]) => <span class=\"ff1 fs0\">[3.5, -0.875]</span>",
    "hierarchy": [
      "Division"
    ],
    "pageId": 837
  },
  {
    "content": "div(< Multi Double >, < Single Double >)<span class=\"ff2 fs1\"> => </span>< Multi Double >\ndiv([1, -4], 25) => <span class=\"ff1 fs0\">[0.04, -0.16]</span>",
    "hierarchy": [
      "Division"
    ],
    "pageId": 837
  },
  {
    "content": "Takes one numeric expression to the power of another.",
    "hierarchy": [
      "Power"
    ],
    "pageId": 837
  },
  {
    "content": "NOTE:<span class=\"code\"> The square root function <span class=\"ff1 fs0\">sqrt(< Double >)</span> can be used as shorthand for <span class=\"ff1 fs0\">pow(< Double >, .5)</span></span>",
    "hierarchy": [
      "Power"
    ],
    "pageId": 837
  },
  {
    "content": "pow(< Single Double >, < Single Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >\npow(2, 4) => <span class=\"ff1 fs0\">16.0</span>",
    "hierarchy": [
      "Power"
    ],
    "pageId": 837
  },
  {
    "content": "pow(< Single Double >, < Multi Double >)<span class=\"ff2 fs1\"> => </span>< Multi Double >\npow(16, [-1, 0]) => <span class=\"ff1 fs0\">[0.0625, 1]</span>",
    "hierarchy": [
      "Power"
    ],
    "pageId": 837
  },
  {
    "content": "pow(< Multi Double >, < Single Double >)<span class=\"ff2 fs1\"> => </span>< Multi Double >\npow([1, 16], .25) => <span class=\"ff1 fs0\">[1.0, 2.0]</span>",
    "hierarchy": [
      "Power"
    ],
    "pageId": 837
  },
  {
    "content": "Takes one logarithm of numeric expressions, with an optional second numeric expression as the base. If\nonly one expression is given, the natural log is used.",
    "hierarchy": [
      "Logarithm"
    ],
    "pageId": 837
  },
  {
    "content": "log(< Double >)<span class=\"ff2 fs1\"> => </span>< Double >\nlog(5) => <span class=\"ff1 fs0\">1.6094…</span>\n•log([1.0, 100.34]) => <span class=\"ff1 fs0\">[0.0, 4.6085…]</span>",
    "hierarchy": [
      "Logarithm"
    ],
    "pageId": 837
  },
  {
    "content": "log(< Single Double >, < Single Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >\nlog(2, 4) => <span class=\"ff1 fs0\">0.5</span>",
    "hierarchy": [
      "Logarithm"
    ],
    "pageId": 837
  },
  {
    "content": "log(< Single Double >, < Multi Double >)<span class=\"ff2 fs1\"> => </span>< Multi Double >\nlog(16, [2, 4]) => <span class=\"ff1 fs0\">[4, 2]</span>",
    "hierarchy": [
      "Logarithm"
    ],
    "pageId": 837
  },
  {
    "content": "log(< Multi Double >, < Single Double >)<span class=\"ff2 fs1\"> => </span>< Multi Double >\nlog([81, 3], 9) => <span class=\"ff1 fs0\">[2.0, 0.5]</span>",
    "hierarchy": [
      "Logarithm"
    ],
    "pageId": 837
  },
  {
    "content": "Negates the result of a boolean expression.",
    "hierarchy": [
      "Logic",
      "Negation"
    ],
    "pageId": 838
  },
  {
    "content": "neg(< Bool >)<span class=\"ff1 fs1\"> => </span>< Bool>\nneg(F) => <span class=\"code\">T</span>\n•neg([F, T]) => <span class=\"code\">[T, F]</span>",
    "hierarchy": [
      "Logic",
      "Negation"
    ],
    "pageId": 838
  },
  {
    "content": "ANDs the values of the boolean expressions.",
    "hierarchy": [
      "Logic",
      "And"
    ],
    "pageId": 838
  },
  {
    "content": "and(< Multi Bool >)<span class=\"ff1 fs1\"> => </span>< Single Bool >\nand([T, F, T]) => <span class=\"code\">F</span>",
    "hierarchy": [
      "Logic",
      "And"
    ],
    "pageId": 838
  },
  {
    "content": "and(< Single Bool >, < Multi Bool >)<span class=\"ff1 fs1\"> => </span>< Multi Bool >\nand(F, [T, T]) => <span class=\"code\">[F, F]</span>",
    "hierarchy": [
      "Logic",
      "And"
    ],
    "pageId": 838
  },
  {
    "content": "and(< Multi Bool >, < Single Bool >)<span class=\"ff1 fs1\"> => </span>< Multi Bool >\nand([F, T], T) => <span class=\"code\">[F, T]</span>",
    "hierarchy": [
      "Logic",
      "And"
    ],
    "pageId": 838
  },
  {
    "content": "and(< Single Bool >, …)<span class=\"ff1 fs1\"> => </span>< Single Bool >\nand(T, T, T) => <span class=\"code\">T</span>",
    "hierarchy": [
      "Logic",
      "And"
    ],
    "pageId": 838
  },
  {
    "content": "ORs the values of the boolean expressions.",
    "hierarchy": [
      "Logic",
      "Or"
    ],
    "pageId": 838
  },
  {
    "content": "or(< Multi Bool >)<span class=\"ff1 fs1\"> => </span>< Single Bool >\nor([T, F, T]) => <span class=\"code\">T</span>",
    "hierarchy": [
      "Logic",
      "Or"
    ],
    "pageId": 838
  },
  {
    "content": "or(< Single Bool >, < Multi Bool >)<span class=\"ff1 fs1\"> => </span>< Multi Bool >\nor(F, [F, T]) => <span class=\"code\">[F, T]</span>",
    "hierarchy": [
      "Logic",
      "Or"
    ],
    "pageId": 838
  },
  {
    "content": "or(< Multi Bool >, < Single Bool >)<span class=\"ff1 fs1\"> => </span>< Multi Bool >\nor([F, T], T) => <span class=\"code\">[T, T]</span>",
    "hierarchy": [
      "Logic",
      "Or"
    ],
    "pageId": 838
  },
  {
    "content": "or(< Single Bool >, …)<span class=\"ff1 fs1\"> => </span>< Single Bool >\nor(F, F, F) => <span class=\"code\">F</span>",
    "hierarchy": [
      "Logic",
      "Or"
    ],
    "pageId": 838
  },
  {
    "content": "Checks whether any value(s) exist for the expression.",
    "hierarchy": [
      "Logic",
      "Or",
      "Exists"
    ],
    "pageId": 838
  },
  {
    "content": "exists( T )<span class=\"ff1 fs1\"> => </span>< Single Bool >\nexists([1, 2, 3]) => <span class=\"code\">T</span>\n•exists([]) => <span class=\"code\">F</span>\n•exists(empty) => <span class=\"code\">F</span>",
    "hierarchy": [
      "Logic",
      "Or",
      "Exists"
    ],
    "pageId": 838
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">exists('abc')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">T</span></span>",
    "hierarchy": [
    ],
    "pageId": 839
  },
  {
    "content": "Checks whether two expressions' values are equal. The parameters must be the same type, after implicit\ncasting.",
    "hierarchy": [
      "Comparison",
      "Equality"
    ],
    "pageId": 839
  },
  {
    "content": "equal(< Single T >, < Single T >)<span class=\"code\"> => </span>< Single Bool >\n<span class=\"ff2 fs1 ls1\">equal(F, F)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">T</span></span>",
    "hierarchy": [
      "Comparison",
      "Equality"
    ],
    "pageId": 839
  },
  {
    "content": "equal(< Single T >, < Multi T >)<span class=\"code\"> => </span>< Multi Bool >\n<span class=\"ff2 fs1 ls1\">equal(\"a\", [\"a\", \"ab\"])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[T, F]</span></span>",
    "hierarchy": [
      "Comparison",
      "Equality"
    ],
    "pageId": 839
  },
  {
    "content": "equal(< Multi T >, < Single T >)<span class=\"code\"> => </span>< Multi Bool >\n<span class=\"ff2 fs1 ls1\">equal([1.5, -3.0], -3)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[F, T]</span></span>",
    "hierarchy": [
      "Comparison",
      "Equality"
    ],
    "pageId": 839
  },
  {
    "content": "Checks whether a numeric or <span class=\"ff2 fs1\">Date</span> expression's values are greater than another expression’s values. The\nparameters must be the same type, after implicit casting.",
    "hierarchy": [
      "Comparison",
      "Greater Than"
    ],
    "pageId": 839
  },
  {
    "content": "gt(< Single Numeric/Date T >, < Single T >)<span class=\"code\"> => </span>< Single Bool >\n<span class=\"ff2 fs1 ls1\">gt(1800-01-02, 1799-12-20)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">F</span></span>",
    "hierarchy": [
      "Comparison",
      "Greater Than"
    ],
    "pageId": 839
  },
  {
    "content": "gt(< Single Numeric/Date T >, < Multi T >)<span class=\"code\"> => </span>< Multi Bool >\n<span class=\"ff2 fs1 ls1\">gt(30.756, [30, 100])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[F, T]</span></span>",
    "hierarchy": [
      "Comparison",
      "Greater Than"
    ],
    "pageId": 839
  },
  {
    "content": "gt(< Multi Numeric/Date T >, < Single T >)<span class=\"code\"> => </span>< Multi Bool >\n<span class=\"ff2 fs1 ls1\">gt([30, 75.6], 30)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[F, T]</span></span>",
    "hierarchy": [
      "Comparison",
      "Greater Than"
    ],
    "pageId": 839
  },
  {
    "content": "Checks whether a numeric or <span class=\"ff2 fs1\">Date</span> expression's values are greater than or equal to another expression’s\nvalues. The parameters must be the same type, after implicit casting.",
    "hierarchy": [
      "Comparison",
      "Greater Than or Equals"
    ],
    "pageId": 839
  },
  {
    "content": "gte(< Single Numeric/Date T >, < Single T >)<span class=\"code\"> => </span>< Single Bool >\n<span class=\"ff2 fs1 ls1\">gte(1800-01-02, 1799-12-20)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">F</span></span>",
    "hierarchy": [
      "Comparison",
      "Greater Than or Equals"
    ],
    "pageId": 839
  },
  {
    "content": "gte(< Single Numeric/Date T >, < Multi T >)<span class=\"code\"> => </span>< Multi Bool >\n<span class=\"ff2 fs1 ls1\">gte(30.756, [30, 100])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[F, T]</span></span>",
    "hierarchy": [
      "Comparison",
      "Greater Than or Equals"
    ],
    "pageId": 839
  },
  {
    "content": "gte(< Multi Numeric/Date T >, < Single T >)<span class=\"code\"> => </span>< Multi Bool >\n<span class=\"ff2 fs1 ls1\">gte([30, 75.6], 30)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[T, T]</span></span>",
    "hierarchy": [
      "Comparison",
      "Greater Than or Equals"
    ],
    "pageId": 839
  },
  {
    "content": "Checks whether a numeric or <span class=\"ff2 fs1\">Date</span> expression's values are less than another expression’s values. The\nparameters must be the same type, after implicit casting.",
    "hierarchy": [
      "Comparison",
      "Less Than"
    ],
    "pageId": 839
  },
  {
    "content": "lt(< Single Numeric/Date T >, < Single T >)<span class=\"ff2 fs1\"> => </span>< Single Bool >\nlt(1800-01-02, 1799-12-20) => <span class=\"ff1 fs0\">T</span>",
    "hierarchy": [
    ],
    "pageId": 840
  },
  {
    "content": "lt(< Single Numeric/Date T >, < Multi T >)<span class=\"ff2 fs1\"> => </span>< Multi Bool >\nlt(30.756, [30, 100]) => <span class=\"ff1 fs0\">[T, F]</span>",
    "hierarchy": [
    ],
    "pageId": 840
  },
  {
    "content": "lt(< Multi Numeric/Date T >, < Single T >)<span class=\"ff2 fs1\"> => </span>< Multi Bool >\nlt([30, 75.6], 30) => <span class=\"ff1 fs0\">[F, F]</span>",
    "hierarchy": [
    ],
    "pageId": 840
  },
  {
    "content": "Checks whether a numeric or <span class=\"ff1 fs0\">Date</span> expression's values are less than or equal to another expression’s values.\nThe parameters must be the same type, after implicit casting.",
    "hierarchy": [
      "Less Than or Equals"
    ],
    "pageId": 840
  },
  {
    "content": "lte(< Single Numeric/Date T >, < Single T >)<span class=\"ff2 fs1\"> => </span>< Single Bool >\nlte(1800-01-02, 1799-12-20) => <span class=\"ff1 fs0\">T</span>",
    "hierarchy": [
      "Less Than or Equals"
    ],
    "pageId": 840
  },
  {
    "content": "lte(< Single Numeric/Date T >, < Multi T >)<span class=\"ff2 fs1\"> => </span>< Multi Bool >\nlte(30.756, [30, 100]) => <span class=\"ff1 fs0\">[T, F]</span>",
    "hierarchy": [
      "Less Than or Equals"
    ],
    "pageId": 840
  },
  {
    "content": "lte(< Multi Numeric/Date T >, < Single T >)<span class=\"ff2 fs1\"> => </span>< Multi Bool >\nlte([30, 75.6], 30) => <span class=\"ff1 fs0\">[T, F]</span>",
    "hierarchy": [
      "Less Than or Equals"
    ],
    "pageId": 840
  },
  {
    "content": "Returns the maximum of the numeric, <span class=\"ff1 fs0\">Date</span> or <span class=\"ff1 fs0\">String</span> expression(s)' values. The parameters must be the\nsame type, after implicit casting. (Currently the only type not compatible is <span class=\"ff1 fs0\">Boolean</span>, which will be converted\nto a <span class=\"ff1 fs0\">String</span> implicitly in order to compile the expression)",
    "hierarchy": [
      "Top"
    ],
    "pageId": 840
  },
  {
    "content": "top(< Multi T >)<span class=\"ff2 fs1\"> => </span>< Single T >\ntop([30, 400, -10, 0]) => <span class=\"ff1 fs0\">400</span>",
    "hierarchy": [
      "Top"
    ],
    "pageId": 840
  },
  {
    "content": "top(< Single T >, …)<span class=\"ff2 fs1\"> => </span>< Single T >\ntop(\"a\", 1, \"d\") => <span class=\"ff1 fs0\">\"d\"</span>",
    "hierarchy": [
      "Top"
    ],
    "pageId": 840
  },
  {
    "content": "Returns the minimum of the numeric, <span class=\"ff1 fs0\">Date</span> or <span class=\"ff1 fs0\">String</span> expression(s)' values. The parameters must be the\nsame type, after implicit casting. (Currently the only type not compatible is <span class=\"ff1 fs0\">Boolean</span>, which will be converted\nto a <span class=\"ff1 fs0\">String</span> implicitly in order to compile the expression)",
    "hierarchy": [
      "Bottom"
    ],
    "pageId": 840
  },
  {
    "content": "bottom(< Multi T >)<span class=\"ff2 fs1\"> => </span>< Single T >\nbottom([30, 400, -10, 0]) => <span class=\"ff1 fs0\">-10</span>",
    "hierarchy": [
      "Bottom"
    ],
    "pageId": 840
  },
  {
    "content": "bottom(< Single T >, …)<span class=\"ff2 fs1\"> => </span>< Single T >\nbottom(\"a\", 1, \"d\") => <span class=\"ff1 fs0\">\"1\"</span>",
    "hierarchy": [
      "Bottom"
    ],
    "pageId": 840
  },
  {
    "content": "Returns the value(s) of the <span class=\"code\">THEN</span> or <span class=\"code\">ELSE</span> expressions depending on whether the boolean conditional\nexpression's value is <span class=\"code\">true</span> or <span class=\"code\">false</span>. The <span class=\"code\">THEN</span> and <span class=\"code\">ELSE</span> expressions must be of the same type and cardinality\nafter implicit casting is done.",
    "hierarchy": [
      "If"
    ],
    "pageId": 841
  },
  {
    "content": "if(< Single Bool>, < T >, < T >)<span class=\"ff1 fs0\"> => </span>< T >\nif(true, \"abc\", [1,2]) => <span class=\"code\">[\"abc\"]</span>\n•if(false, \"abc\", 123) => <span class=\"code\">\"123\"</span>",
    "hierarchy": [
      "If"
    ],
    "pageId": 841
  },
  {
    "content": "Replace all values from the 1\n expression that are equal to the value of the 2\n expression with the value of\nthe 3\n expression. All parameters must be the same type after implicit casting is done.",
    "hierarchy": [
      "Replace"
    ],
    "pageId": 841
  },
  {
    "content": "replace(< T >, < Single T >, < Single T >)<span class=\"ff1 fs0\"> => </span>< T >\nreplace([1,3], 3, \"4\") => <span class=\"code\">[\"1\", \"4\"]</span>\n•replace(\"abc\", \"abc\", 18) => <span class=\"code\">\"18\"</span>\n•replace(\"abc\", 1, \"def\") => <span class=\"code\">\"abc\"</span>",
    "hierarchy": [
      "Replace"
    ],
    "pageId": 841
  },
  {
    "content": "If the 1\n expression does not have values, fill it with the values for the 2\n expression. Both expressions must\nbe of the same type and cardinality after implicit casting is done",
    "hierarchy": [
      "Fill Missing"
    ],
    "pageId": 841
  },
  {
    "content": "fill_missing(< T >, < T >)<span class=\"ff1 fs0\"> => </span>< T >\nfill_missing([], 3) => <span class=\"code\">[3]</span>\n•fill_missing(empty, \"abc\") => <span class=\"code\">\"abc\"</span>\n•fill_missing(\"abc\", [1]) => <span class=\"code\">[\"abc\"]</span>",
    "hierarchy": [
      "Fill Missing"
    ],
    "pageId": 841
  },
  {
    "content": "Remove all occurrences of the 2\n expression's value from the values of the 1\n expression. Both expressions\nmust be of the same type after implicit casting is done",
    "hierarchy": [
      "Remove"
    ],
    "pageId": 841
  },
  {
    "content": "remove(< T >, < Single T >)<span class=\"ff1 fs0\"> => </span>< T >\nremove([1,2,3,2], 2) => <span class=\"code\">[1, 3]</span>\n•remove(\"1\", 1) => <span class=\"code\">empty</span>\n•remove(1, \"abc\") => <span class=\"code\">\"1\"</span>",
    "hierarchy": [
      "Remove"
    ],
    "pageId": 841
  },
  {
    "content": "Return the values of the 1\n expression if the value of the 2\n expression is <span class=\"code\">true</span>, otherwise return no values.",
    "hierarchy": [
      "Filter"
    ],
    "pageId": 841
  },
  {
    "content": "filter(< T >, < Single Boolean >)<span class=\"ff1 fs0\"> => </span>< T >\nfilter([1,2,3], true) => <span class=\"code\">[1,2,3]</span>\n•filter([1,2,3], false) => <span class=\"code\">[]</span>\n•filter(\"abc\", false) => <span class=\"code\">empty</span>",
    "hierarchy": [
      "Filter"
    ],
    "pageId": 841
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">filter(\"abc\", true)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">1</span></span>",
    "hierarchy": [
    ],
    "pageId": 842
  },
  {
    "content": "Explicitly converts the values of a <span class=\"ff2 fs1\">String</span> or <span class=\"ff2 fs1\">Long</span> expression into <span class=\"ff2 fs1\">Dates</span>.",
    "hierarchy": [
      "Date",
      "Date Parse"
    ],
    "pageId": 842
  },
  {
    "content": "date(< String >)<span class=\"code\"> => </span>< Date >\n<span class=\"ff2 fs1 ls1\">date('1800-01-02')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">1800-01-02T00:00:00Z</span></span>\n•<span class=\"ff2 fs1 ls1\">date(['1800-01-02', '2016-05-23'])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[1800-01-02T…, 2016-05-23T…]</span></span>",
    "hierarchy": [
      "Date",
      "Date Parse"
    ],
    "pageId": 842
  },
  {
    "content": "date(< Long >)<span class=\"code\"> => </span>< Date >\n<span class=\"ff2 fs1 ls1\">date(1232343246648)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">2009-01-19T05:34:06Z</span></span>\n•<span class=\"ff2 fs1 ls1\">date([1232343246648, 223234324664])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[2009-01-19T…, 1977-01-27T…]</span></span>",
    "hierarchy": [
      "Date",
      "Date Parse"
    ],
    "pageId": 842
  },
  {
    "content": "Compute the given date math strings for the values of a <span class=\"ff2 fs1\">Date</span> expression. The date math strings <span class=\"code\">must</span> be\nconstant<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Date",
      "Date Math"
    ],
    "pageId": 842
  },
  {
    "content": "date_math(< Date >, < Constant String >…)<span class=\"code\"> => </span>< Date >\n<span class=\"ff2 fs1 ls1\">date_math(1800-04-15, '+1DAY', '-1MONTH')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">1800-03-16</span></span>\n•<span class=\"ff2 fs1 ls1\">date_math([1800-04-15,2016-05-24], '+1DAY', '-1MONTH')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">[1800-03-16, 2016-04-25]</span></span>",
    "hierarchy": [
      "Date",
      "Date Math"
    ],
    "pageId": 842
  },
  {
    "content": "Explicitly casts the expression to a <span class=\"ff2 fs1\">String</span> expression.",
    "hierarchy": [
      "String",
      "Explicit Casting"
    ],
    "pageId": 842
  },
  {
    "content": "string(< String >)<span class=\"code\"> => </span>< String >\n<span class=\"ff2 fs1 ls1\">string(1)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'1'</span></span>\n•<span class=\"ff2 fs1 ls1\">string([1.5, -2.0])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">['1.5', '-2.0']</span></span>",
    "hierarchy": [
      "String",
      "Explicit Casting"
    ],
    "pageId": 842
  },
  {
    "content": "Concatenations the values of the <span class=\"ff2 fs1\">String</span> expression(s) together.",
    "hierarchy": [
      "String",
      "Concatenation"
    ],
    "pageId": 842
  },
  {
    "content": "concat(< Multi String >)<span class=\"code\"> => </span>< Single String >\n<span class=\"ff2 fs1 ls1\">concat(['a','b','c'])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'abc'</span></span>",
    "hierarchy": [
      "String",
      "Concatenation"
    ],
    "pageId": 842
  },
  {
    "content": "concat(< Single String >, < Multi String >)<span class=\"code\"> => </span>< Multi String >\n<span class=\"ff2 fs1 ls1\">concat(1, ['a','b','c'])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">['1a','1b','1c']</span></span>",
    "hierarchy": [
      "String",
      "Concatenation"
    ],
    "pageId": 842
  },
  {
    "content": "concat(< Multi String >, < Single String >)<span class=\"code\"> => </span>< Multi String >\n<span class=\"ff2 fs1 ls1\">concat(['a','b','c'], 1)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">['a1','b1','c1']</span></span>",
    "hierarchy": [
      "String",
      "Concatenation"
    ],
    "pageId": 842
  },
  {
    "content": "concat(< Single String >…)<span class=\"code\"> => </span>< Single String >",
    "hierarchy": [
      "String",
      "Concatenation"
    ],
    "pageId": 842
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">concat('a','b','c')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'abc'</span></span>\n•<span class=\"ff2 fs1 ls1\">concat('a',empty,'c')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'ac'</span></span>",
    "hierarchy": [
    ],
    "pageId": 843
  },
  {
    "content": "Concatenations the values of the <span class=\"ff2 fs1\">String</span> expression(s) together using the given <span class=\"link\">constant string</span> value as a\nseparator.",
    "hierarchy": [
      "Separated Concatenation"
    ],
    "pageId": 843
  },
  {
    "content": "concat_sep(< Constant String >, < Multi String >)<span class=\"ff4 fs0\"> => </span>< Single String >\n<span class=\"ff2 fs1 ls1\">concat_sep('-', ['a','b'])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'a-b'</span></span>",
    "hierarchy": [
      "Separated Concatenation"
    ],
    "pageId": 843
  },
  {
    "content": "concat_sep(< Constant String >, < Single String >, < Multi String >)<span class=\"ff4 fs0\"> => </span>< Multi String >\n<span class=\"ff2 fs1 ls1\">concat_sep(2,1,['a','b'])</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">['12a','12b']</span></span>",
    "hierarchy": [
      "Separated Concatenation"
    ],
    "pageId": 843
  },
  {
    "content": "concat_sep(< Constant String >, < Multi String >, < Single String >)<span class=\"ff4 fs0\"> => </span>< Multi String >\n<span class=\"ff2 fs1 ls1\">concat_sep(2,['a','b'],1)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">['a21','b21']</span></span>\n•<span class=\"ff2 fs1 ls1\">concat_sep('-','a',2,3)</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'a-2-3'</span></span>\n•<span class=\"ff2 fs1 ls1\">concat_sep(';','a',empty,'c')</span><span class=\"ls1\"> => <span class=\"ff2 fs1\">'a;c'</span></span>",
    "hierarchy": [
      "Separated Concatenation"
    ],
    "pageId": 843
  },
  {
    "content": "Reduction functions reduce the values of <span class=\"link\">sources</span> and/or unreduced <span class=\"link\">mapping functions</span> for every Solr\nDocument to a single value.",
    "hierarchy": [
      "Analytics Reduction Functions"
    ],
    "pageId": 843
  },
  {
    "content": "Below is a list of all reduction functions provided by the Analytics Component. These can be combined using\nmapping functions to implement more complex functionality.",
    "hierarchy": [
      "Analytics Reduction Functions"
    ],
    "pageId": 843
  },
  {
    "content": "The number of existing values for an expression. For single-valued expressions, this is equivalent to\ndocCount<span class=\"ff1 fs0\">. If no expression is given, the number of matching documents is returned.</span>",
    "hierarchy": [
      "Analytics Reduction Functions",
      "Counting Reductions",
      "Count"
    ],
    "pageId": 843
  },
  {
    "content": "count()<span class=\"ff1 fs0\"> => </span>< Single Long ><span class=\"ff1 fs0\"> </span>count(< T >)<span class=\"ff1 fs0\"> => </span>< Single Long >",
    "hierarchy": [
      "Analytics Reduction Functions",
      "Counting Reductions",
      "Count"
    ],
    "pageId": 843
  },
  {
    "content": "The number of documents for which an expression has existing values. For single-valued expressions, this is\nequivalent to <span class=\"ff2 fs1\">count</span>. If no expression is given, the number of matching documents is returned.",
    "hierarchy": [
      "Analytics Reduction Functions",
      "Counting Reductions",
      "Doc Count"
    ],
    "pageId": 843
  },
  {
    "content": "doc_count()<span class=\"ff1 fs0\"> => </span>< Single Long >",
    "hierarchy": [
      "Analytics Reduction Functions",
      "Counting Reductions",
      "Doc Count"
    ],
    "pageId": 843
  },
  {
    "content": "doc_count(< T >)<span class=\"ff1 fs0\"> => </span>< Single Long >",
    "hierarchy": [
      "Analytics Reduction Functions",
      "Counting Reductions",
      "Doc Count"
    ],
    "pageId": 843
  },
  {
    "content": "The number of documents for which an expression has no existing value.",
    "hierarchy": [
      "Analytics Reduction Functions",
      "Counting Reductions",
      "Missing"
    ],
    "pageId": 843
  },
  {
    "content": "missing(< T >)<span class=\"ff2 fs1\"> => </span>< Single Long >",
    "hierarchy": [
    ],
    "pageId": 844
  },
  {
    "content": "The number of unique values for an expression. This function accepts <span class=\"ff1 fs0\">Numeric</span>, <span class=\"ff1 fs0\">Date</span> and <span class=\"ff1 fs0\">String</span>\nexpressions.",
    "hierarchy": [
      "Unique"
    ],
    "pageId": 844
  },
  {
    "content": "unique(< T >)<span class=\"ff2 fs1\"> => </span>< Single Long >",
    "hierarchy": [
      "Unique"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the sum of all values for the expression.",
    "hierarchy": [
      "Math Reductions",
      "Sum"
    ],
    "pageId": 844
  },
  {
    "content": "sum(< Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >",
    "hierarchy": [
      "Math Reductions",
      "Sum"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the variance of all values for the expression.",
    "hierarchy": [
      "Math Reductions",
      "Variance"
    ],
    "pageId": 844
  },
  {
    "content": "variance(< Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >",
    "hierarchy": [
      "Math Reductions",
      "Variance"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the standard deviation of all values for the expression.",
    "hierarchy": [
      "Math Reductions",
      "Standard Deviation"
    ],
    "pageId": 844
  },
  {
    "content": "stddev(< Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >",
    "hierarchy": [
      "Math Reductions",
      "Standard Deviation"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the arithmetic mean of all values for the expression.",
    "hierarchy": [
      "Math Reductions",
      "Mean"
    ],
    "pageId": 844
  },
  {
    "content": "mean(< Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >",
    "hierarchy": [
      "Math Reductions",
      "Mean"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the arithmetic mean of all values for the second expression weighted by the values of the first\nexpression.",
    "hierarchy": [
      "Math Reductions",
      "Weighted Mean"
    ],
    "pageId": 844
  },
  {
    "content": "wmean(< Double >, < Double >)<span class=\"ff2 fs1\"> => </span>< Single Double >",
    "hierarchy": [
      "Math Reductions",
      "Weighted Mean"
    ],
    "pageId": 844
  },
  {
    "content": "The expressions must satisfy the rules for <span class=\"ff1 fs0\">mult</span> function parameters.",
    "hierarchy": [
      "Math Reductions",
      "Weighted Mean"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the minimum value for the expression. This function accepts <span class=\"ff1 fs0\">Numeric</span>, <span class=\"ff1 fs0\">Date</span> and <span class=\"ff1 fs0\">String</span> expressions.",
    "hierarchy": [
      "Ordering Reductions",
      "Minimum"
    ],
    "pageId": 844
  },
  {
    "content": "min(< T >)<span class=\"ff2 fs1\"> => </span>< Single T >",
    "hierarchy": [
      "Ordering Reductions",
      "Minimum"
    ],
    "pageId": 844
  },
  {
    "content": "Returns the maximum value for the expression. This function accepts <span class=\"code\">Numeric</span>, <span class=\"code\">Date</span> and <span class=\"code\">String</span>\nexpressions.",
    "hierarchy": [
      "Maximum"
    ],
    "pageId": 845
  },
  {
    "content": "max(< T >)<span class=\"ff2 fs0\"> => </span>< Single T >",
    "hierarchy": [
      "Maximum"
    ],
    "pageId": 845
  },
  {
    "content": "Returns the median of all values for the expression. This function accepts <span class=\"code\">Numeric</span> and <span class=\"code\">Date</span> expressions.",
    "hierarchy": [
      "Median"
    ],
    "pageId": 845
  },
  {
    "content": "median(< T >)<span class=\"ff2 fs0\"> => </span>< Single T >",
    "hierarchy": [
      "Median"
    ],
    "pageId": 845
  },
  {
    "content": "Calculates the given percentile of all values for the expression. This function accepts <span class=\"code\">Numeric</span>, <span class=\"code\">Date</span> and\nString<span class=\"ff2 fs0\"> expressions for the 2</span>\n parameter.",
    "hierarchy": [
      "Percentile"
    ],
    "pageId": 845
  },
  {
    "content": "The percentile, given as the 1\n parameter, must be a <span class=\"link\">constant double</span> between [0, 100).",
    "hierarchy": [
      "Percentile"
    ],
    "pageId": 845
  },
  {
    "content": "percentile(<Constant Double>, < T >)<span class=\"ff2 fs0\"> => </span>< Single T >",
    "hierarchy": [
      "Percentile"
    ],
    "pageId": 845
  },
  {
    "content": "If the ordinal is positive, the returned value will be the <span class=\"ff4\">n</span>\n smallest value.",
    "hierarchy": [
      "Ordinal"
    ],
    "pageId": 845
  },
  {
    "content": "If the ordinal is negative, the returned value will be the <span class=\"ff4\">n</span>\n largest value.",
    "hierarchy": [
      "Ordinal"
    ],
    "pageId": 845
  },
  {
    "content": "ordinal(<Constant Int>, < T >)<span class=\"ff2 fs0\"> => </span>< Single T >",
    "hierarchy": [
      "Ordinal"
    ],
    "pageId": 845
  },
  {
    "content": "Apache Solr includes the ability to set up a cluster of Solr servers that combines fault tolerance and high\navailability. Called <span class=\"ff1\">SolrCloud</span>, these capabilities provide distributed indexing and search capabilities,\nsupporting the following features:",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "Central configuration for the entire cluster",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "Automatic load balancing and fail-over for queries",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "ZooKeeper integration for cluster coordination and configuration.",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "SolrCloud is flexible distributed search and indexing, without a master node to allocate nodes, shards and\nreplicas. Instead, Solr uses ZooKeeper to manage these locations, depending on configuration files and\nschemas. Queries and updates can be sent to any server. Solr will use the information in the ZooKeeper\ndatabase to figure out which servers need to handle the request.",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "In this section, we'll cover everything you need to know about using Solr in SolrCloud mode. We’ve split up\nthe details into the following topics:",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "<span class=\"link\">Getting Started with SolrCloud</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "<span class=\"link\">How SolrCloud Works</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "◦<span class=\"link\">Shards and Indexing Data in SolrCloud</span>\n◦<span class=\"link\">Distributed Requests</span>\n<span class=\"link\">SolrCloud Resilience</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "◦<span class=\"link\">SolrCloud Recoveries and Write Tolerance</span>\n◦<span class=\"link\">SolrCloud Query Routing And Read Tolerance</span>\n<span class=\"link\">SolrCloud Configuration and Parameters</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "◦<span class=\"link\">Setting Up an External ZooKeeper Ensemble</span>\n◦<span class=\"link\">Using ZooKeeper to Manage Configuration Files</span>\n◦<span class=\"link\">ZooKeeper Access Control</span>\n◦<span class=\"link\">Collections API</span>\n◦<span class=\"link\">Parameter Reference</span>\n◦<span class=\"link\">Command Line Utilities</span>\n◦<span class=\"link\">SolrCloud with Legacy Configuration Files</span>\n◦<span class=\"link\">ConfigSets API</span>\n<span class=\"link\">Rule-based Replica Placement</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "<span class=\"link\">Cross Data Center Replication (CDCR)</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "<span class=\"link\">SolrCloud Autoscaling</span>",
    "hierarchy": [
      "SolrCloud"
    ],
    "pageId": 846
  },
  {
    "content": "SolrCloud is designed to provide a highly available, fault tolerant environment for distributing your indexed\ncontent and query requests across multiple servers.",
    "hierarchy": [
      "Getting Started with SolrCloud"
    ],
    "pageId": 847
  },
  {
    "content": "It's a system in which data is organized into multiple pieces, or shards, that can be hosted on multiple\nmachines, with replicas providing redundancy for both scalability and fault tolerance, and a ZooKeeper\nserver that helps manage the overall structure so that both indexing and search requests can be routed\nproperly.",
    "hierarchy": [
      "Getting Started with SolrCloud"
    ],
    "pageId": 847
  },
  {
    "content": "This section explains SolrCloud and its inner workings in detail, but before you dive in, it's best to have an\nidea of what it is you’re trying to accomplish.",
    "hierarchy": [
      "Getting Started with SolrCloud"
    ],
    "pageId": 847
  },
  {
    "content": "This page provides a simple tutorial to start Solr in SolrCloud mode, so you can begin to get a sense for how\nshards interact with each other during indexing and when serving queries. To that end, we'll use simple\nexamples of configuring SolrCloud on a single machine, which is obviously not a real production\nenvironment, which would include several servers or virtual machines. In a real production environment,\nyou’ll also use the real machine names instead of \"localhost\" which we’ve used here.",
    "hierarchy": [
      "Getting Started with SolrCloud"
    ],
    "pageId": 847
  },
  {
    "content": "In this section you will learn how to start a SolrCloud cluster using startup scripts and a specific configset.",
    "hierarchy": [
      "Getting Started with SolrCloud"
    ],
    "pageId": 847
  },
  {
    "content": "This tutorial assumes that you're already familiar with the basics of using Solr. If you need a\nrefresher, please see the <span class=\"link\">Getting Started section</span> to get a grounding in Solr concepts. If you\nload documents as part of that exercise, you should start over with a fresh Solr installation\nfor these SolrCloud tutorials.",
    "hierarchy": [
      "Getting Started with SolrCloud"
    ],
    "pageId": 847
  },
  {
    "content": "The <span class=\"ff4 fs5\">bin/solr</span> script makes it easy to get started with SolrCloud as it walks you through the process of\nlaunching Solr nodes in cloud mode and adding a collection. To get started, simply do:",
    "hierarchy": [
      "Getting Started with SolrCloud",
      "SolrCloud Example",
      "Interactive Startup"
    ],
    "pageId": 847
  },
  {
    "content": "bin/solr -e cloud",
    "hierarchy": [
      "Getting Started with SolrCloud",
      "SolrCloud Example",
      "Interactive Startup"
    ],
    "pageId": 847
  },
  {
    "content": "This starts an interactive session to walk you through the steps of setting up a simple SolrCloud cluster with\nembedded ZooKeeper.",
    "hierarchy": [
      "Getting Started with SolrCloud",
      "SolrCloud Example",
      "Interactive Startup"
    ],
    "pageId": 847
  },
  {
    "content": "The script starts by asking you how many Solr nodes you want to run in your local cluster, with the default\nbeing 2.",
    "hierarchy": [
      "Getting Started with SolrCloud",
      "SolrCloud Example",
      "Interactive Startup"
    ],
    "pageId": 847
  },
  {
    "content": "Welcome to the SolrCloud example!",
    "hierarchy": [
      "Getting Started with SolrCloud",
      "SolrCloud Example",
      "Interactive Startup"
    ],
    "pageId": 847
  },
  {
    "content": "This interactive session will help you launch a SolrCloud cluster on your local workstation.\nTo begin, how many Solr nodes would you like to run in your local cluster? (specify 1-4 nodes)\n[2]",
    "hierarchy": [
      "Getting Started with SolrCloud",
      "SolrCloud Example",
      "Interactive Startup"
    ],
    "pageId": 847
  },
  {
    "content": "The script supports starting up to 4 nodes, but we recommend using the default of 2 when starting out.\nThese nodes will each exist on a single machine, but will use different ports to mimic operation on different\nservers.",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "Next, the script will prompt you for the port to bind each of the Solr nodes to, such as:",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "ÊPlease enter the port for node1 [8983]",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "Choose any available port for each node; the default for the first node is 8983 and 7574 for the second node.\nThe script will start each node in order and show you the command it uses to start the server, such as:",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "solr start -cloud -s example/cloud/node1/solr -p 8983",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "The first node will also start an embedded ZooKeeper server bound to port 9983. The Solr home for the first\nnode is in <span class=\"ff2 fs1\">example/cloud/node1/solr</span> as indicated by the <span class=\"ff2 fs1\">-s</span> option.",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "After starting up all nodes in the cluster, the script prompts you for the name of the collection to create:",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "ÊPlease provide a name for your new collection: [gettingstarted]",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "The suggested default is \"gettingstarted\" but you might want to choose a name more appropriate for your\nspecific search application.",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "Next, the script prompts you for the number of shards to distribute the collection across. <span class=\"link\">Sharding</span> is\ncovered in more detail later on, so if you're unsure, we suggest using the default of 2 so that you can see\nhow a collection is distributed across multiple nodes in a SolrCloud cluster.",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "Next, the script will prompt you for the number of replicas to create for each shard. <span class=\"link\">Replication</span> is covered in\nmore detail later in the guide, so if you're unsure, then use the default of 2 so that you can see how\nreplication is handled in SolrCloud.",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "Lastly, the script will prompt you for the name of a configuration directory for your collection. You can\nchoose <span class=\"code\">_default</span>, or <span class=\"code\">sample_techproducts_configs</span>. The configuration directories are pulled from\nserver/solr/configsets/<span class=\"ff1 fs0\"> so you can review them beforehand if you wish. The <span class=\"code\">_default</span> configuration is</span>\nuseful when you're still designing a schema for your documents and need some flexibility as you experiment\nwith Solr, since it has schemaless functionality. However, after creating your collection, the schemaless\nfunctionality can be disabled in order to lock down the schema (so that documents indexed after doing so\nwill not alter the schema) or to configure the schema by yourself. This can be done as follows (assuming\nyour collection name is <span class=\"ff2 fs1\">mycollection</span>):",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "curl http://host:8983/solr/mycollection/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
    ],
    "pageId": 848
  },
  {
    "content": "curl http://host:8983/api/collections/mycollection/config -d '{\"set-user-property\":\n{\"update.autoCreateFields\":\"false\"}}'",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "At this point, you should have a new collection created in your local SolrCloud cluster. To verify this, you can\nrun the status command:",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "bin/solr status",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "If you encounter any errors during this process, check the Solr log files in <span class=\"ff2 fs1\">example/cloud/node1/logs</span> and\nexample/cloud/node2/logs<span class=\"code\">.</span>",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "You can see how your collection is deployed across the cluster by visiting the cloud panel in the Solr Admin\nUI: <span class=\"link\">http://localhost:8983/solr/#/~cloud</span>. Solr also provides a way to perform basic diagnostics for a collection\nusing the healthcheck command:",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "bin/solr healthcheck -c gettingstarted",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "The healthcheck command gathers basic information about each replica in a collection, such as number of\ndocs, current status (active, down, etc.), and address (where the replica lives in the cluster).",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "Documents can now be added to SolrCloud using the <span class=\"link\">Post Tool</span>.",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "To stop Solr in SolrCloud mode, you would use the <span class=\"ff2 fs1\">bin/solr</span> script and issue the <span class=\"ff2 fs1\">stop</span> command, as in:",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "bin/solr stop -all",
    "hierarchy": [
    ],
    "pageId": 849
  },
  {
    "content": "You can also get SolrCloud started with all the defaults instead of the interactive session using the following\ncommand:",
    "hierarchy": [
      "Starting with -noprompt"
    ],
    "pageId": 849
  },
  {
    "content": "bin/solr -e cloud -noprompt",
    "hierarchy": [
      "Starting with -noprompt"
    ],
    "pageId": 849
  },
  {
    "content": "You can restart your SolrCloud nodes using the <span class=\"ff2 fs1\">bin/solr</span> script. For instance, to restart node1 running on\nport 8983 (with an embedded ZooKeeper server), you would do:",
    "hierarchy": [
      "Restarting Nodes"
    ],
    "pageId": 849
  },
  {
    "content": "bin/solr restart -c -p 8983 -s example/cloud/node1/solr",
    "hierarchy": [
      "Restarting Nodes"
    ],
    "pageId": 849
  },
  {
    "content": "To restart node2 running on port 7574, you can do:",
    "hierarchy": [
      "Restarting Nodes"
    ],
    "pageId": 849
  },
  {
    "content": "bin/solr restart -c -p 7574 -z localhost:9983 -s example/cloud/node2/solr",
    "hierarchy": [
    ],
    "pageId": 850
  },
  {
    "content": "Notice that you need to specify the ZooKeeper address (<span class=\"ff1 fs1\">-z localhost:9983</span>) when starting node2 so that it\ncan join the cluster with node1.",
    "hierarchy": [
    ],
    "pageId": 850
  },
  {
    "content": "Adding a node to an existing cluster is a bit advanced and involves a little more understanding of Solr. Once\nyou startup a SolrCloud cluster using the startup scripts, you can add a new node to it by:",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "mkdir <solr.home for new Solr node>\ncp <existing solr.xml path> <new solr.home>\nbin/solr start -cloud -s solr.home/solr -p <port num> -z <zk hosts string>",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "Notice that the above requires you to create a Solr home directory. You either need to copy <span class=\"ff1 fs1\">solr.xml</span> to the\nsolr_home<span class=\"ff2 fs0\"> directory, or keep in centrally in ZooKeeper </span>/solr.xml<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "Example (with directory structure) that adds a node to an example started with \"bin/solr -e cloud\":",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "mkdir -p example/cloud/node3/solr\ncp server/solr/solr.xml example/cloud/node3/solr\nbin/solr start -cloud -s example/cloud/node3/solr -p 8987 -z localhost:9983",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "The previous command will start another Solr node on port 8987 with Solr home set to\nexample/cloud/node3/solr<span class=\"ff2 fs0\">. The new node will write its log files to </span>example/cloud/node3/logs<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "Once you're comfortable with how the SolrCloud example works, we recommend using the process\ndescribed in <span class=\"link\">Taking Solr to Production</span> for setting up SolrCloud nodes in production.",
    "hierarchy": [
      "Adding a Node to a Cluster"
    ],
    "pageId": 850
  },
  {
    "content": "The following sections cover provide general information about how various SolrCloud features work. To\nunderstand these features, it's important to first understand a few key concepts that relate to SolrCloud.",
    "hierarchy": [
      "How SolrCloud Works"
    ],
    "pageId": 851
  },
  {
    "content": "<span class=\"link\">Shards and Indexing Data in SolrCloud</span>",
    "hierarchy": [
      "How SolrCloud Works"
    ],
    "pageId": 851
  },
  {
    "content": "<span class=\"link\">Distributed Requests</span>",
    "hierarchy": [
      "How SolrCloud Works"
    ],
    "pageId": 851
  },
  {
    "content": "If you are already familiar with SolrCloud concepts and basic functionality, you can skip to the section\ncovering <span class=\"link\">SolrCloud Configuration and Parameters</span>.",
    "hierarchy": [
      "How SolrCloud Works"
    ],
    "pageId": 851
  },
  {
    "content": "A SolrCloud cluster consists of some \"logical\" concepts layered on top of some \"physical\" concepts.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "A Cluster can host multiple Collections of Solr Documents.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Logical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "A collection can be partitioned into multiple Shards, which contain a subset of the Documents in the\nCollection.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Logical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "The number of Shards that a Collection has determines:",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Logical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "◦The theoretical limit to the number of Documents that Collection can reasonably contain.\n◦The amount of parallelization that is possible for an individual search request.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Logical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "A Cluster is made up of one or more Solr Nodes, which are running instances of the Solr server process.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Physical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "Each Node can host multiple Cores.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Physical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "Each Core in a Cluster is a physical Replica for a logical Shard.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Physical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "Every Replica uses the same configuration specified for the Collection that it is a part of.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Physical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "The number of Replicas that each Shard has determines:",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Physical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "◦The level of redundancy built into the Collection and how fault tolerant the Cluster can be in the event\nthat some Nodes become unavailable.\n◦The theoretical limit in the number concurrent search requests that can be processed under heavy\nload.",
    "hierarchy": [
      "How SolrCloud Works",
      "Key SolrCloud Concepts",
      "Physical Concepts"
    ],
    "pageId": 851
  },
  {
    "content": "When your collection is too large for one node, you can break it up and store it in sections by creating\nmultiple <span class=\"ff1\">shards</span>.",
    "hierarchy": [
      "How SolrCloud Works",
      "Shards and Indexing Data in SolrCloud"
    ],
    "pageId": 851
  },
  {
    "content": "A Shard is a logical partition of the collection, containing a subset of documents from the collection, such\nthat every document in a collection is contained in exactly one Shard. Which shard contains each document\nin a collection depends on the overall \"Sharding\" strategy for that collection.",
    "hierarchy": [
      "How SolrCloud Works",
      "Shards and Indexing Data in SolrCloud"
    ],
    "pageId": 851
  },
  {
    "content": "For example, you might have a collection where the \"country\" field of each document determines which\nshard it is part of, so documents from the same country are co-located. A different collection might simply\nuse a \"hash\" on the uniqueKey of each document to determine its Shard.",
    "hierarchy": [
    ],
    "pageId": 852
  },
  {
    "content": "Before SolrCloud, Solr supported Distributed Search, which allowed one query to be executed across\nmultiple shards, so the query was executed against the entire Solr index and no documents would be\nmissed from the search results. So splitting an index across shards is not exclusively a SolrCloud concept.\nThere were, however, several problems with the distributed approach that necessitated improvement with\nSolrCloud:",
    "hierarchy": [
    ],
    "pageId": 852
  },
  {
    "content": "1.Splitting an index into shards was somewhat manual.\n2.There was no support for distributed indexing, which meant that you needed to explicitly send\ndocuments to a specific shard; Solr couldn't figure out on its own what shards to send documents to.",
    "hierarchy": [
    ],
    "pageId": 852
  },
  {
    "content": "3.There was no load balancing or failover, so if you got a high number of queries, you needed to figure out\nwhere to send them and if one shard died it was just gone.",
    "hierarchy": [
    ],
    "pageId": 852
  },
  {
    "content": "SolrCloud addresses those limitations. There is support for distributing both the index process and the\nqueries automatically, and ZooKeeper provides failover and load balancing. Additionally, every shard can\nhave multiple replicas for additional robustness.",
    "hierarchy": [
    ],
    "pageId": 852
  },
  {
    "content": "In SolrCloud there are no masters or slaves. Instead, every shard consists of at least one physical <span class=\"ff2\">replica</span>,\nexactly one of which is a <span class=\"ff2\">leader</span>. Leaders are automatically elected, initially on a first-come-first-served basis,\nand then based on the ZooKeeper process described at\nhttp://zookeeper.apache.org/doc/trunk/recipes.html#sc_leaderElection.<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Leaders and Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "If a leader goes down, one of the other replicas is automatically elected as the new leader.",
    "hierarchy": [
      "Leaders and Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "When a document is sent to a Solr node for indexing, the system first determines which Shard that\ndocument belongs to, and then which node is currently hosting the leader for that shard. The document is\nthen forwarded to the current leader for indexing, and the leader forwards the update to all of the other\nreplicas.",
    "hierarchy": [
      "Leaders and Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "By default, all replicas are eligible to become leaders if their leader goes down. However, this comes at a\ncost: if all replicas could become a leader at any time, every replica must be in sync with its leader at all\ntimes. New documents added to the leader must be routed to the replicas, and each replica must do a\ncommit. If a replica goes down, or is temporarily unavailable, and then rejoins the cluster, recovery may be\nslow if it has missed a large number of updates.",
    "hierarchy": [
      "Leaders and Replicas",
      "Types of Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "These issues are not a problem for most users. However, some use cases would perform better if the\nreplicas behaved a bit more like the former model, either by not syncing in real-time or by not being eligible\nto become leaders at all.",
    "hierarchy": [
      "Leaders and Replicas",
      "Types of Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "Solr accomplishes this by allowing you to set the replica type when creating a new collection or when adding\na replica. The available types are:",
    "hierarchy": [
      "Leaders and Replicas",
      "Types of Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "NRT<span class=\"ff1\">: This is the default. A NRT replica (NRT = NearRealTime) maintains a transaction log and writes new</span>",
    "hierarchy": [
      "Leaders and Replicas",
      "Types of Replicas"
    ],
    "pageId": 852
  },
  {
    "content": "documents to it's indexes locally. Any replica of this type is eligible to become a leader. Traditionally, this\nwas the only type supported by Solr.",
    "hierarchy": [
    ],
    "pageId": 853
  },
  {
    "content": "TLOG<span class=\"ff1\">: This type of replica maintains a transaction log but does not index document changes locally. This</span>\ntype helps speed up indexing since no commits need to occur in the replicas. When this type of replica\nneeds to update its index, it does so by replicating the index from the leader. This type of replica is also\neligible to become a shard leader; it would do so by first processing its transaction log. If it does become\na leader, it will behave the same as if it was a NRT type of replica.",
    "hierarchy": [
    ],
    "pageId": 853
  },
  {
    "content": "PULL<span class=\"ff1\">: This type of replica does not maintain a transaction log nor index document changes locally. It</span>\nonly replicates the index from the shard leader. It is not eligible to become a shard leader and doesn't\nparticipate in shard leader election at all.",
    "hierarchy": [
    ],
    "pageId": 853
  },
  {
    "content": "If you do not specify the type of replica when it is created, it will be NRT type.",
    "hierarchy": [
    ],
    "pageId": 853
  },
  {
    "content": "There are three combinations of replica types that are recommended:",
    "hierarchy": [
      "Combining Replica Types in a Cluster"
    ],
    "pageId": 853
  },
  {
    "content": "All NRT replicas",
    "hierarchy": [
      "Combining Replica Types in a Cluster"
    ],
    "pageId": 853
  },
  {
    "content": "All TLOG replicas",
    "hierarchy": [
      "Combining Replica Types in a Cluster"
    ],
    "pageId": 853
  },
  {
    "content": "TLOG replicas with PULL replicas",
    "hierarchy": [
      "Combining Replica Types in a Cluster"
    ],
    "pageId": 853
  },
  {
    "content": "Use this for small to medium clusters, or even big clusters where the update (index) throughput is not too\nhigh. NRT is the only type of replica that supports soft-commits, so also use this combination when\nNearRealTime is needed.",
    "hierarchy": [
      "Combining Replica Types in a Cluster",
      "All NRT Replicas"
    ],
    "pageId": 853
  },
  {
    "content": "Use this combination if NearRealTime is not needed and the number of replicas per shard is high, but you\nstill want all replicas to be able to handle update requests.",
    "hierarchy": [
      "Combining Replica Types in a Cluster",
      "All TLOG Replicas"
    ],
    "pageId": 853
  },
  {
    "content": "Use this combination if NearRealTime is not needed, the number of replicas per shard is high, and you want\nto increase availability of search queries over document updates even if that means temporarily serving\noutdated results.",
    "hierarchy": [
      "Combining Replica Types in a Cluster",
      "TLOG replicas plus PULL replicas"
    ],
    "pageId": 853
  },
  {
    "content": "Other combinations of replica types are not recommended. If more than one replica in the shard is writing\nits own index instead of replicating from an NRT replica, a leader election can cause all replicas of the shard\nto become out of sync with the leader, and all would have to replicate the full index.",
    "hierarchy": [
      "Combining Replica Types in a Cluster",
      "Other Combinations of Replica Types"
    ],
    "pageId": 853
  },
  {
    "content": "If a PULL replica goes down or leaves the cluster, there are a few scenarios to consider.",
    "hierarchy": [
      "Recovery with PULL Replicas",
      "Other Combinations of Replica Types"
    ],
    "pageId": 853
  },
  {
    "content": "If the PULL replica cannot sync to the leader because the leader is down, replication would not occur.\nHowever, it would continue to serve queries. Once it can connect to the leader again, replication would\nresume.",
    "hierarchy": [
      "Recovery with PULL Replicas",
      "Other Combinations of Replica Types"
    ],
    "pageId": 853
  },
  {
    "content": "If the PULL replica cannot connect to ZooKeeper, it would be removed from the cluster and queries would\nnot be routed to it from the cluster.",
    "hierarchy": [
    ],
    "pageId": 854
  },
  {
    "content": "If the PULL replica dies or is unreachable for any other reason, it won't be query-able. When it rejoins the\ncluster, it would replicate from the leader and when that is complete, it would be ready to serve queries\nagain.",
    "hierarchy": [
    ],
    "pageId": 854
  },
  {
    "content": "Solr offers the ability to specify the router implementation used by a collection by specifying the\nrouter.name<span class=\"ff1 fs0\"> parameter when <span class=\"link\">creating your collection</span>.</span>",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "If you use the <span class=\"code\">compositeId</span> router (the default), you can send documents with a prefix in the document ID\nwhich will be used to calculate the hash Solr uses to determine the shard a document is sent to for indexing.\nThe prefix can be anything you'd like it to be (it doesn’t have to be the shard name, for example), but it must\nbe consistent so Solr behaves consistently.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "For example, if you want to co-locate documents for a customer, you could use the customer name or ID as\nthe prefix. If your customer is \"IBM\", for example, with a document with the ID \"12345\", you would insert\nthe prefix into the document id field: \"IBM!12345\". The exclamation mark ('!') is critical here, as it\ndistinguishes the prefix used to determine which shard to direct the document to.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "Then at query time, you include the prefix(es) into your query with the <span class=\"code\">_route_</span> parameter (i.e.,\nq=solr&_route_=IBM!<span class=\"ff1 fs0\">) to direct queries to specific shards. In some situations, this may improve query</span>\nperformance because it overcomes network latency when querying all the shards.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "The <span class=\"code\">compositeId</span> router supports prefixes containing up to 2 levels of routing. For example: a prefix routing\nfirst by region, then by customer: \"USA!IBM!12345\"",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "Another use case could be if the customer \"IBM\" has a lot of documents and you want to spread it across\nmultiple shards. The syntax for such a use case would be: <span class=\"code\">shard_key/num!document_id</span> where the <span class=\"code\">/num</span> is\nthe number of bits from the shard key to use in the composite hash.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "So <span class=\"code\">IBM/3!12345</span> will take 3 bits from the shard key and 29 bits from the unique doc id, spreading the tenant\nover 1/8th of the shards in the collection. Likewise if the num value was 2 it would spread the documents\nacross 1/4th the number of shards. At query time, you include the prefix(es) along with the number of bits\ninto your query with the <span class=\"code\">_route_</span> parameter (i.e., <span class=\"code\">q=solr&_route_=IBM/3!</span>) to direct queries to specific\nshards.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "If you do not want to influence how documents are stored, you don't need to specify a prefix in your\ndocument ID.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "If you created the collection and defined the \"implicit\" router at the time of creation, you can additionally\ndefine a <span class=\"code\">router.field</span> parameter to use a field from each document to identify a shard where the\ndocument belongs. If the field specified is missing in the document, however, the document will be rejected.\nYou could also use the <span class=\"code\">_route_</span> parameter to name a specific shard.",
    "hierarchy": [
      "Document Routing"
    ],
    "pageId": 854
  },
  {
    "content": "When you create a collection in SolrCloud, you decide on the initial number shards to be used. But it can be\ndifficult to know in advance the number of shards that you need, particularly when organizational",
    "hierarchy": [
      "Shard Splitting"
    ],
    "pageId": 854
  },
  {
    "content": "requirements can change at a moment's notice, and the cost of finding out later that you chose wrong can\nbe high, involving creating new cores and re-indexing all of your data.",
    "hierarchy": [
    ],
    "pageId": 855
  },
  {
    "content": "The ability to split shards is in the Collections API. It currently allows splitting a shard into two pieces. The\nexisting shard is left as-is, so the split action effectively makes two copies of the data as new shards. You can\ndelete the old shard at a later time when you're ready.",
    "hierarchy": [
    ],
    "pageId": 855
  },
  {
    "content": "More details on how to use shard splitting is in the section on the Collection API's <span class=\"link\">SPLITSHARD command</span>.",
    "hierarchy": [
    ],
    "pageId": 855
  },
  {
    "content": "In most cases, when running in SolrCloud mode, indexing client applications should not send explicit commit\nrequests. Rather, you should configure auto commits with <span class=\"code\">openSearcher=false</span> and auto soft-commits to\nmake recent updates visible in search requests. This ensures that auto commits occur on a regular schedule\nin the cluster.",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "To enforce a policy where client applications should not send explicit commits, you should update all client\napplications that index data into SolrCloud. However, that is not always feasible, so Solr provides the\nIgnoreCommitOptimizeUpdateProcessorFactory<span class=\"ff1 fs0\">, which allows you to ignore explicit commits and/or</span>\noptimize requests from client applications without having refactor your client application code.",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "To activate this request processor you'll need to add the following to your <span class=\"code\">solrconfig.xml</span>:",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "Ê <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.IgnoreCommitOptimizeUpdateProcessorFactory\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"statusCode\"<span class=\"fc3\">></span></span>200<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></processor></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.DistributedUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "As shown in the example above, the processor will return 200 to the client but will ignore the commit /\noptimize request. Notice that you need to wire-in the implicit processors needed by SolrCloud as well, since\nthis custom chain is taking the place of the default chain.",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "In the following example, the processor will raise an exception with a 403 code with a customized error\nmessage:",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "Ê <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.IgnoreCommitOptimizeUpdateProcessorFactory\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"statusCode\"<span class=\"fc3\">></span></span>403<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseMessage\"<span class=\"fc3\">></span></span>Thou shall not issue a commit!<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></processor></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.DistributedUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>",
    "hierarchy": [
      "Ignoring Commits from Client Applications in SolrCloud"
    ],
    "pageId": 855
  },
  {
    "content": "Lastly, you can also configure it to just ignore optimize and let commits pass thru by doing:",
    "hierarchy": [
    ],
    "pageId": 856
  },
  {
    "content": "Ê <span class=\"fc1\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.IgnoreCommitOptimizeUpdateProcessorFactory\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseMessage\"<span class=\"fc1\">></span></span>Thou shall not issue an optimize, but commits are OK!<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"ignoreOptimizeOnly\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></bool></span>\nÊ <span class=\"fc1\"></processor></span>\nÊ <span class=\"fc1\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 856
  },
  {
    "content": "When a Solr node receives a search request, the request is routed behind the scenes to a replica of a shard\nthat is part of the collection being searched.",
    "hierarchy": [
      "Distributed Requests"
    ],
    "pageId": 856
  },
  {
    "content": "The chosen replica acts as an aggregator: it creates internal requests to randomly chosen replicas of every\nshard in the collection, coordinates the responses, issues any subsequent internal requests as needed (for\nexample, to refine facets values, or request additional stored fields), and constructs the final response for\nthe client.",
    "hierarchy": [
      "Distributed Requests"
    ],
    "pageId": 856
  },
  {
    "content": "While one of the advantages of using SolrCloud is the ability to query very large collections distributed\namong various shards, in some cases <span class=\"link\">you may know that you are only interested in results from a subset of</span>\nyour shards<span class=\"fc0\">. You have the option of searching over all of your data or just parts of it.</span>",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "Querying all shards for a collection should look familiar; it's as though SolrCloud didn’t even come into play:",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=*:*",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "If, on the other hand, you wanted to search just one shard, you can specify that shard by its logical ID, as in:",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=*:*&shards=shard1",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "If you want to search a group of shard Ids, you can specify them together:",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=*:*&shards=shard1,shard2",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "In both of the above examples, the shard Id(s) will be used to pick a random replica of that shard.",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "Alternatively, you can specify the explicit replicas you wish to use in place of a shard Ids:",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=*:*&shards=localhost:7574/solr/gettingstarted,\nlocalhost:8983/solr/gettingstarted",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "Or you can specify a list of replicas to choose from for a single shard (for load balancing purposes) by using",
    "hierarchy": [
      "Distributed Requests",
      "Limiting Which Shards are Queried"
    ],
    "pageId": 856
  },
  {
    "content": "the pipe symbol (|):",
    "hierarchy": [
    ],
    "pageId": 857
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=*:*&shards=localhost:7574/solr/gettingstarted|\nlocalhost:7500/solr/gettingstarted",
    "hierarchy": [
    ],
    "pageId": 857
  },
  {
    "content": "And of course, you can specify a list of shards (separated by commas) each defined by a list of replicas\n(seperated by pipes). In this example, 2 shards are queried, the first being a random replica from shard1, the\nsecond being a random replica from the explicit pipe delimited list:",
    "hierarchy": [
    ],
    "pageId": 857
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=*:*&shards=shard1,localhost:7574/solr/gettings\ntarted|localhost:7500/solr/gettingstarted",
    "hierarchy": [
    ],
    "pageId": 857
  },
  {
    "content": "You can directly configure aspects of the concurrency and thread-pooling used within distributed search in\nSolr. This allows for finer grained control and you can tune it to target your own specific requirements. The\ndefault configuration favors throughput over latency.",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "To configure the standard search handler, provide a configuration like this in <span class=\"ff2 fs2\">solrconfig.xml</span>:",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "Ê <span class=\"fc5\"><!-- other params go here --></span>\nÊ <span class=\"fc2\"><shardHandler</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"HttpShardHandlerFactory\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"socketTimeOut\"<span class=\"fc2\">></span></span>1000<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"connTimeOut\"<span class=\"fc2\">></span></span>5000<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></shardHandler></span>",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "The parameters that can be specified are as follows:",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "socketTimeout\nThe amount of time in ms that a socket is allowed to wait. The default is <span class=\"ff2 fs2\">0</span>, where the operating system's\ndefault will be used.",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "connTimeout\nThe amount of time in ms that is accepted for binding / connecting a socket. The default is <span class=\"ff2 fs2\">0</span>, where the\noperating system's default will be used.",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "maxConnectionsPerHost\nThe maximum number of concurrent connections that is made to each individual shard in a distributed\nsearch. The default is <span class=\"ff2 fs2\">20</span>.",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "maxConnections\nThe total maximum number of concurrent connections in distributed searches. The default is <span class=\"ff2 fs2\">10000</span>",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "corePoolSize\nThe retained lowest limit on the number of threads used in coordinating distributed search. The default is\n0<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Configuring the ShardHandlerFactory"
    ],
    "pageId": 857
  },
  {
    "content": "maximumPoolSize\nThe maximum number of threads used for coordinating distributed search. The default is\nInteger.MAX_VALUE<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 858
  },
  {
    "content": "maxThreadIdleTime\nThe amount of time in seconds to wait for before threads are scaled back in response to a reduction in\nload. The default is <span class=\"ff1 fs0\">5</span>.",
    "hierarchy": [
    ],
    "pageId": 858
  },
  {
    "content": "sizeOfQueue\nIf specified, the thread pool will use a backing queue instead of a direct handoff buffer. High throughput\nsystems will want to configure this to be a direct hand off (with <span class=\"ff1 fs0\">-1</span>). Systems that desire better latency will\nwant to configure a reasonable size of queue to handle variations in requests. The default is <span class=\"ff1 fs0\">-1</span>.",
    "hierarchy": [
    ],
    "pageId": 858
  },
  {
    "content": "fairnessPolicy\nChooses the JVM specifics dealing with fair policy queuing, if enabled distributed searches will be handled\nin a First in First out fashion at a cost to throughput. If disabled throughput will be favored over latency.\nThe default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 858
  },
  {
    "content": "Document and term statistics are needed in order to calculate relevancy. Solr provides four implementations\nout of the box when it comes to document stats calculation:",
    "hierarchy": [
      "Configuring statsCache (Distributed IDF)"
    ],
    "pageId": 858
  },
  {
    "content": "LocalStatsCache: This only uses local term and document statistics to compute relevance. In cases with\nuniform term distribution across shards, this works reasonably well. This option is the default if no\n<statsCache><span class=\"ff2 fs1\"> is configured.</span>",
    "hierarchy": [
      "Configuring statsCache (Distributed IDF)"
    ],
    "pageId": 858
  },
  {
    "content": "ExactStatsCache: This implementation uses global values (across the collection) for document\nfrequency.",
    "hierarchy": [
      "Configuring statsCache (Distributed IDF)"
    ],
    "pageId": 858
  },
  {
    "content": "ExactSharedStatsCache: This is exactly like the exact stats cache in its functionality but the global stats\nare reused for subsequent requests with the same terms.",
    "hierarchy": [
      "Configuring statsCache (Distributed IDF)"
    ],
    "pageId": 858
  },
  {
    "content": "LRUStatsCache: This implementation uses an LRU cache to hold global stats, which are shared between\nrequests.",
    "hierarchy": [
      "Configuring statsCache (Distributed IDF)"
    ],
    "pageId": 858
  },
  {
    "content": "The implementation can be selected by setting <span class=\"ff1 fs0\"><statsCache></span> in <span class=\"ff1 fs0\">solrconfig.xml</span>. For example, the following\nline makes Solr use the <span class=\"ff1 fs0\">ExactStatsCache</span> implementation:",
    "hierarchy": [
      "Configuring statsCache (Distributed IDF)"
    ],
    "pageId": 858
  },
  {
    "content": "Each shard serves top-level query requests and then makes sub-requests to all of the other shards. Care\nshould be taken to ensure that the max number of threads serving HTTP requests is greater than the\npossible number of requests from both top-level clients and other shards. If this is not the case, the\nconfiguration may result in a distributed deadlock.",
    "hierarchy": [
      "Avoiding Distributed Deadlock"
    ],
    "pageId": 858
  },
  {
    "content": "For example, a deadlock might occur in the case of two shards, each with just a single thread to service HTTP\nrequests. Both threads could receive a top-level request concurrently, and make sub-requests to each other.\nBecause there are no more remaining threads to service requests, the incoming requests will be blocked",
    "hierarchy": [
      "Avoiding Distributed Deadlock"
    ],
    "pageId": 858
  },
  {
    "content": "until the other pending requests are finished, but they will not finish since they are waiting for the sub-\nrequests. By ensuring that Solr is configured to handle a sufficient number of threads, you can avoid\ndeadlock situations like this.",
    "hierarchy": [
    ],
    "pageId": 859
  },
  {
    "content": "Solr allows you to pass an optional boolean parameter named <span class=\"code\">preferLocalShards</span> to indicate that a\ndistributed query should prefer local replicas of a shard when available. In other words, if a query includes\npreferLocalShards=true<span class=\"ff1 fs0\">, then the query controller will look for local replicas to service the query instead of</span>\nselecting replicas at random from across the cluster. This is useful when a query requests many fields or\nlarge fields to be returned per document because it avoids moving large amounts of data over the network\nwhen it is available locally. In addition, this feature can be useful for minimizing the impact of a problematic\nreplica with degraded performance, as it reduces the likelihood that the degraded replica will be hit by other\nhealthy replicas.",
    "hierarchy": [
      "preferLocalShards Parameter"
    ],
    "pageId": 859
  },
  {
    "content": "Lastly, it follows that the value of this feature diminishes as the number of shards in a collection increases\nbecause the query controller will have to direct the query to non-local replicas for most of the shards. In\nother words, this feature is mostly useful for optimizing queries directed towards collections with a small\nnumber of shards and many replicas. Also, this option should only be used if you are load balancing\nrequests across all nodes that host replicas for the collection you are querying, as Solr's CloudSolrClient will\ndo. If not load-balancing, this feature can introduce a hotspot in the cluster since queries won’t be evenly\ndistributed across the cluster.",
    "hierarchy": [
      "preferLocalShards Parameter"
    ],
    "pageId": 859
  },
  {
    "content": "In this section, we'll cover how does Solr handle reads and writes when all the nodes in the cluster are not\nhealthy",
    "hierarchy": [
      "SolrCloud Resilience"
    ],
    "pageId": 860
  },
  {
    "content": "The following sections cover these topics:",
    "hierarchy": [
      "SolrCloud Resilience"
    ],
    "pageId": 860
  },
  {
    "content": "<span class=\"link\">SolrCloud Recoveries and Write Tolerance</span>",
    "hierarchy": [
      "SolrCloud Resilience"
    ],
    "pageId": 860
  },
  {
    "content": "<span class=\"link\">SolrCloud Query Routing And Read Tolerance</span>",
    "hierarchy": [
      "SolrCloud Resilience"
    ],
    "pageId": 860
  },
  {
    "content": "SolrCloud is highly available and fault tolerant in reads and writes.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance"
    ],
    "pageId": 860
  },
  {
    "content": "SolrCloud is designed to replicate documents to ensure redundancy for your data, and enable you to send\nupdate requests to any node in the cluster. That node will determine if it hosts the leader for the appropriate\nshard, and if not it will forward the request to the the leader, which will then forward it to all existing\nreplicas, using versioning to make sure every replica has the most up-to-date version. If the leader goes\ndown, another replica can take its place. This architecture enables you to be certain that your data can be\nrecovered in the event of a disaster, even if you are using <span class=\"link\">Near Real Time Searching</span>.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance"
    ],
    "pageId": 860
  },
  {
    "content": "A Transaction Log is created for each node so that every change to content or organization is noted. The log\nis used to determine which content in the node should be included in a replica. When a new replica is\ncreated, it refers to the Leader and the Transaction Log to know which content to include. If it fails, it retries.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance",
      "Recovery"
    ],
    "pageId": 860
  },
  {
    "content": "Since the Transaction Log consists of a record of updates, it allows for more robust indexing because it\nincludes redoing the uncommitted updates if indexing is interrupted.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance",
      "Recovery"
    ],
    "pageId": 860
  },
  {
    "content": "If a leader goes down, it may have sent requests to some replicas and not others. So when a new potential\nleader is identified, it runs a synch process against the other replicas. If this is successful, everything should\nbe consistent, the leader registers as active, and normal actions proceed. If a replica is too far out of sync,\nthe system asks for a full replication/replay-based recovery.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance",
      "Recovery"
    ],
    "pageId": 860
  },
  {
    "content": "If an update fails because cores are reloading schemas and some have finished but others have not, the\nleader tells the nodes that the update failed and starts the recovery procedure.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance",
      "Recovery"
    ],
    "pageId": 860
  },
  {
    "content": "When using a replication factor greater than one, an update request may succeed on the shard leader but\nfail on one or more of the replicas. For instance, consider a collection with one shard and a replication factor\nof three. In this case, you have a shard leader and two additional replicas. If an update request succeeds on\nthe leader but fails on both replicas, for whatever reason, the update request is still considered successful\nfrom the perspective of the client. The replicas that missed the update will sync with the leader when they\nrecover.",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance",
      "Achieved Replication Factor"
    ],
    "pageId": 860
  },
  {
    "content": "Behind the scenes, this means that Solr has accepted updates that are only on one of the nodes (the current",
    "hierarchy": [
      "SolrCloud Resilience",
      "SolrCloud Recoveries and Write Tolerance",
      "Write Side Fault Tolerance",
      "Achieved Replication Factor"
    ],
    "pageId": 860
  },
  {
    "content": "leader). Solr supports the optional <span class=\"ff2 fs1\">min_rf</span> parameter on update requests that cause the server to return the\nachieved replication factor for an update request in the response. For the example scenario described\nabove, if the client application included <span class=\"ff2 fs1\">min_rf >= 1</span>, then Solr would return <span class=\"ff2 fs1\">rf=1</span> in the Solr response\nheader because the request only succeeded on the leader. The update request will still be accepted as the\nmin_rf<span class=\"ff1 fs0\"> parameter only tells Solr that the client application wishes to know what the achieved replication</span>\nfactor was for the update request. In other words, <span class=\"ff2 fs1\">min_rf</span> does not mean Solr will enforce a minimum\nreplication factor as Solr does not support rolling back updates that succeed on a subset of replicas.",
    "hierarchy": [
    ],
    "pageId": 861
  },
  {
    "content": "On the client side, if the achieved replication factor is less than the acceptable level, then the client\napplication can take additional measures to handle the degraded state. For instance, a client application may\nwant to keep a log of which update requests were sent while the state of the collection was degraded and\nthen resend the updates once the problem has been resolved. In short, <span class=\"ff2 fs1\">min_rf</span> is an optional mechanism for\na client application to be warned that an update request was accepted while the collection is in a degraded\nstate.",
    "hierarchy": [
    ],
    "pageId": 861
  },
  {
    "content": "SolrCloud is highly available and fault tolerant in reads and writes.",
    "hierarchy": [
      "SolrCloud Query Routing And Read Tolerance"
    ],
    "pageId": 861
  },
  {
    "content": "In a SolrCloud cluster each individual node load balances read requests across all the replicas in collection.\nYou still need a load balancer on the 'outside' that talks to the cluster, or you need a smart client which\nunderstands how to read and interact with Solr's metadata in ZooKeeper and only requests the ZooKeeper\nensemble’s address to start discovering to which nodes it should send requests. (Solr provides a smart Java\nSolrJ client called <span class=\"link\">CloudSolrClient</span>.)",
    "hierarchy": [
      "SolrCloud Query Routing And Read Tolerance",
      "Read Side Fault Tolerance"
    ],
    "pageId": 861
  },
  {
    "content": "Even if some nodes in the cluster are offline or unreachable, a Solr node will be able to correctly respond to a\nsearch request as long as it can communicate with at least one replica of every shard, or one replica of every\nrelevant<span class=\"ff1\"> shard if the user limited the search via the <span class=\"ff2 fs1\">shards</span> or <span class=\"ff2 fs1\">_route_</span> parameters. The more replicas there</span>\nare of every shard, the more likely that the Solr cluster will be able to handle search results in the event of\nnode failures.",
    "hierarchy": [
      "SolrCloud Query Routing And Read Tolerance",
      "Read Side Fault Tolerance"
    ],
    "pageId": 861
  },
  {
    "content": "A Solr node will return the results of a search request as long as it can communicate with at least one replica\nof every shard that it knows about, even if it can <span class=\"ff4\">not</span> communicate with ZooKeeper at the time it receives the\nrequest. This is normally the preferred behavior from a fault tolerance standpoint, but may result in stale or\nincorrect results if there have been major changes to the collection structure that the node has not been\ninformed of via ZooKeeper (i.e., shards may have been added or removed, or split into sub-shards)",
    "hierarchy": [
      "SolrCloud Query Routing And Read Tolerance",
      "Read Side Fault Tolerance",
      "zkConnected"
    ],
    "pageId": 861
  },
  {
    "content": "A <span class=\"ff2 fs1\">zkConnected</span> header is included in every search response indicating if the node that processed the request\nwas connected with ZooKeeper at the time:",
    "hierarchy": [
      "SolrCloud Query Routing And Read Tolerance",
      "Read Side Fault Tolerance",
      "zkConnected"
    ],
    "pageId": 861
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>: {\nÊ   <span class=\"fc2\">\"status\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"zkConnected\"</span>: <span class=\"fc4\">true</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>: <span class=\"fc3\">20</span>,\nÊ   <span class=\"fc2\">\"params\"</span>: {\nÊ     <span class=\"fc2\">\"q\"</span>: <span class=\"fc5\">\"*:*\"</span>\nÊ   }\nÊ },\nÊ <span class=\"fc2\">\"response\"</span>: {\nÊ   <span class=\"fc2\">\"numFound\"</span>: <span class=\"fc3\">107</span>,\nÊ   <span class=\"fc2\">\"start\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"docs\"</span>: [ <span class=\"fc5\">\"...\"</span> ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 862
  },
  {
    "content": "In the event that one or more shards queried are completely unavailable, then Solr's default behavior is to\nfail the request. However, there are many use-cases where partial results are acceptable and so Solr\nprovides a boolean <span class=\"ff2 fs1\">shards.tolerant</span> parameter (default <span class=\"ff2 fs1\">false</span>).",
    "hierarchy": [
      "shards.tolerant"
    ],
    "pageId": 862
  },
  {
    "content": "If <span class=\"ff2 fs1\">shards.tolerant=true</span> then partial results may be returned. If the returned response does not contain\nresults from all the appropriate shards then the response header contains a special flag called\npartialResults<span class=\"ff4 fs0\">.</span>",
    "hierarchy": [
      "shards.tolerant"
    ],
    "pageId": 862
  },
  {
    "content": "The client can specify '<span class=\"ff2 fs1\">shards.info</span>' along with the <span class=\"ff2 fs1\">shards.tolerant</span> parameter to retrieve more fine-\ngrained details.",
    "hierarchy": [
      "shards.tolerant"
    ],
    "pageId": 862
  },
  {
    "content": "Example response with <span class=\"ff2 fs1\">partialResults</span> flag set to 'true':",
    "hierarchy": [
      "shards.tolerant"
    ],
    "pageId": 862
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>: {\nÊ   <span class=\"fc2\">\"status\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"zkConnected\"</span>: <span class=\"fc4\">true</span>,\nÊ   <span class=\"fc2\">\"partialResults\"</span>: <span class=\"fc4\">true</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>: <span class=\"fc3\">20</span>,\nÊ   <span class=\"fc2\">\"params\"</span>: {\nÊ     <span class=\"fc2\">\"q\"</span>: <span class=\"fc5\">\"*:*\"</span>\nÊ   }\nÊ },\nÊ <span class=\"fc2\">\"response\"</span>: {\nÊ   <span class=\"fc2\">\"numFound\"</span>: <span class=\"fc3\">77</span>,\nÊ   <span class=\"fc2\">\"start\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"docs\"</span>: [ <span class=\"fc5\">\"...\"</span> ]\nÊ }\n}",
    "hierarchy": [
      "shards.tolerant"
    ],
    "pageId": 862
  },
  {
    "content": "In this section, we'll cover the various configuration options for SolrCloud.",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "The following sections cover these topics:",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">Setting Up an External ZooKeeper Ensemble</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">Using ZooKeeper to Manage Configuration Files</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">ZooKeeper Access Control</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">Collections API</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">Parameter Reference</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">Command Line Utilities</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">SolrCloud with Legacy Configuration Files</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "<span class=\"link\">ConfigSets API</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters"
    ],
    "pageId": 863
  },
  {
    "content": "Although Solr comes bundled with <span class=\"link\">Apache ZooKeeper</span>, you should consider yourself discouraged from using\nthis internal ZooKeeper in production.",
    "hierarchy": [
      "SolrCloud Configuration and Parameters",
      "Setting Up an External ZooKeeper Ensemble"
    ],
    "pageId": 863
  },
  {
    "content": "Shutting down a redundant Solr instance will also shut down its ZooKeeper server, which might not be quite\nso redundant. Because a ZooKeeper ensemble must have a quorum of more than half its servers running at\nany given time, this can be a problem.",
    "hierarchy": [
      "SolrCloud Configuration and Parameters",
      "Setting Up an External ZooKeeper Ensemble"
    ],
    "pageId": 863
  },
  {
    "content": "The solution to this problem is to set up an external ZooKeeper ensemble. Fortunately, while this process\ncan seem intimidating due to the number of powerful options, setting up a simple ensemble is actually quite\nstraightforward, as described below.",
    "hierarchy": [
      "SolrCloud Configuration and Parameters",
      "Setting Up an External ZooKeeper Ensemble"
    ],
    "pageId": 863
  },
  {
    "content": "When planning how many ZooKeeper nodes to configure, keep in mind that the main principle for a\nZooKeeper ensemble is maintaining a majority of servers to serve requests. This majority is also called a\nquorum<span class=\"ff2\">.</span>",
    "hierarchy": [
      "SolrCloud Configuration and Parameters",
      "Setting Up an External ZooKeeper Ensemble"
    ],
    "pageId": 863
  },
  {
    "content": "It is generally recommended to have an odd number of ZooKeeper servers in your ensemble, so a majority is\nmaintained.",
    "hierarchy": [
      "SolrCloud Configuration and Parameters",
      "Setting Up an External ZooKeeper Ensemble"
    ],
    "pageId": 863
  },
  {
    "content": "For example, if you only have two ZooKeeper nodes and one goes down, 50% of available servers is not a",
    "hierarchy": [
      "SolrCloud Configuration and Parameters",
      "Setting Up an External ZooKeeper Ensemble"
    ],
    "pageId": 863
  },
  {
    "content": "majority, so ZooKeeper will no longer serve requests. However, if you have three ZooKeeper nodes and one\ngoes down, you have 66% of available servers available, and ZooKeeper will continue normally while you\nrepair the one down node. If you have 5 nodes, you could continue operating with two down nodes if\nnecessary.",
    "hierarchy": [
    ],
    "pageId": 864
  },
  {
    "content": "More information on ZooKeeper clusters is available from the ZooKeeper documentation at\nhttp://zookeeper.apache.org/doc/r3.4.11/zookeeperAdmin.html#sc_zkMulitServerSetup<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 864
  },
  {
    "content": "The first step in setting up Apache ZooKeeper is, of course, to download the software. It's available from\nhttp://zookeeper.apache.org/releases.html<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Download Apache ZooKeeper"
    ],
    "pageId": 864
  },
  {
    "content": "When using stand-alone ZooKeeper, you need to take care to keep your version of\nZooKeeper updated with the latest version distributed with Solr. Since you are using it as a\nstand-alone application, it does not get upgraded when you upgrade Solr.",
    "hierarchy": [
      "Download Apache ZooKeeper"
    ],
    "pageId": 864
  },
  {
    "content": "Solr currently uses Apache ZooKeeper v3.4.11.",
    "hierarchy": [
      "Download Apache ZooKeeper"
    ],
    "pageId": 864
  },
  {
    "content": "Creating the instance is a simple matter of extracting the files into a specific target directory. The actual\ndirectory itself doesn't matter, as long as you know where it is, and where you’d like to have ZooKeeper\nstore its internal data.",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Create the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "The next step is to configure your ZooKeeper instance. To do that, create the following file:\n<ZOOKEEPER_HOME>/conf/zoo.cfg<span class=\"ff1 fs0\">. To this file, add the following information:</span>",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Configure the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "tickTime=2000\ndataDir=/var/lib/zookeeper\nclientPort=2181",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Configure the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "The parameters are as follows:",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Configure the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "tickTime\nPart of what ZooKeeper does is to determine which servers are up and running at any given time, and the\nminimum session time out is defined as two \"ticks\". The <span class=\"ff4 fs3\">tickTime</span> parameter specifies, in miliseconds,\nhow long each tick should be.",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Configure the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "dataDir\nThis is the directory in which ZooKeeper will store data about the cluster. This directory should start out\nempty.",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Configure the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "clientPort\nThis is the port on which Solr will access ZooKeeper.",
    "hierarchy": [
      "Setting Up a Single ZooKeeper",
      "Configure the Instance"
    ],
    "pageId": 864
  },
  {
    "content": "Once this file is in place, you're ready to start the ZooKeeper instance.",
    "hierarchy": [
    ],
    "pageId": 865
  },
  {
    "content": "To run the instance, you can simply use the <span class=\"code\">ZOOKEEPER_HOME/bin/zkServer.sh</span> script provided, as with this\ncommand: <span class=\"code\">zkServer.sh start</span>",
    "hierarchy": [
      "Run the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "Again, ZooKeeper provides a great deal of power through additional configurations, but delving into them is\nbeyond the scope of this tutorial. For more information, see the ZooKeeper <span class=\"link\">Getting Started</span> page. For this\nexample, however, the defaults are fine.",
    "hierarchy": [
      "Run the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "Pointing Solr at the ZooKeeper instance you've created is a simple matter of using the <span class=\"code\">-z</span> parameter when\nusing the bin/solr script. For example, in order to point the Solr instance to the ZooKeeper you’ve started on\nport 2181, this is what you’d need to do:",
    "hierarchy": [
      "Point Solr at the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "Starting <span class=\"code\">cloud</span> example with ZooKeeper already running at port 2181 (with all other defaults):",
    "hierarchy": [
      "Point Solr at the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "bin/solr start -e cloud -z localhost:2181 -noprompt",
    "hierarchy": [
      "Point Solr at the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "Add a node pointing to an existing ZooKeeper at port 2181:",
    "hierarchy": [
      "Point Solr at the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "bin/solr start -cloud -s <path to solr home for new node> -p 8987 -z localhost:2181",
    "hierarchy": [
      "Point Solr at the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "When you are not using an example to start solr, make sure you upload the configuration\nset to ZooKeeper before creating the collection.",
    "hierarchy": [
      "Point Solr at the Instance"
    ],
    "pageId": 865
  },
  {
    "content": "To shut down ZooKeeper, use the zkServer script with the \"stop\" command: <span class=\"code\">zkServer.sh stop</span>.",
    "hierarchy": [
      "Shut Down ZooKeeper"
    ],
    "pageId": 865
  },
  {
    "content": "With an external ZooKeeper ensemble, you need to set things up just a little more carefully as compared to\nthe Getting Started example.",
    "hierarchy": [
      "Setting up a ZooKeeper Ensemble"
    ],
    "pageId": 865
  },
  {
    "content": "The difference is that rather than simply starting up the servers, you need to configure them to know about\nand talk to each other first. So your original <span class=\"code\">zoo.cfg</span> file might look like this:",
    "hierarchy": [
      "Setting up a ZooKeeper Ensemble"
    ],
    "pageId": 865
  },
  {
    "content": "dataDir=/var/lib/zookeeperdata/1\nclientPort=2181\ninitLimit=5\nsyncLimit=2\nserver.1=localhost:2888:3888\nserver.2=localhost:2889:3889\nserver.3=localhost:2890:3890",
    "hierarchy": [
      "Setting up a ZooKeeper Ensemble"
    ],
    "pageId": 865
  },
  {
    "content": "Here you see three new parameters:",
    "hierarchy": [
      "Setting up a ZooKeeper Ensemble"
    ],
    "pageId": 865
  },
  {
    "content": "initLimit\nAmount of time, in ticks, to allow followers to connect and sync to a leader. In this case, you have 5 ticks,\neach of which is 2000 milliseconds long, so the server will wait as long as 10 seconds to connect and sync\nwith the leader.",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "syncLimit\nAmount of time, in ticks, to allow followers to sync with ZooKeeper. If followers fall too far behind a\nleader, they will be dropped.",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "server.X\nThese are the IDs and locations of all servers in the ensemble, the ports on which they communicate with\neach other. The server ID must additionally stored in the <span class=\"code\"><dataDir>/myid</span> file and be located in the\ndataDir<span class=\"ff2 fs0\"> of each ZooKeeper instance. The ID identifies each server, so in the case of this first instance, you</span>\nwould create the file <span class=\"code\">/var/lib/zookeeperdata/1/myid</span> with the content \"1\".",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "Now, whereas with Solr you need to create entirely new directories to run multiple instances, all you need\nfor a new ZooKeeper instance, even if it's on the same machine for testing purposes, is a new configuration\nfile. To complete the example you’ll create two more configuration files.",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "The <span class=\"code\"><ZOOKEEPER_HOME>/conf/zoo2.cfg</span> file should have the content:",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "tickTime=2000\ndataDir=/var/lib/zookeeperdata/2\nclientPort=2182\ninitLimit=5\nsyncLimit=2\nserver.1=localhost:2888:3888\nserver.2=localhost:2889:3889\nserver.3=localhost:2890:3890",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "You'll also need to create <span class=\"code\"><ZOOKEEPER_HOME>/conf/zoo3.cfg</span>:",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "tickTime=2000\ndataDir=/var/lib/zookeeperdata/3\nclientPort=2183\ninitLimit=5\nsyncLimit=2\nserver.1=localhost:2888:3888\nserver.2=localhost:2889:3889\nserver.3=localhost:2890:3890",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "Finally, create your <span class=\"code\">myid</span> files in each of the <span class=\"code\">dataDir</span> directories so that each server knows which instance it\nis. The id in the <span class=\"code\">myid</span> file on each machine must match the \"server.X\" definition. So, the ZooKeeper instance\n(or machine) named \"server.1\" in the above example, must have a <span class=\"code\">myid</span> file containing the value \"1\". The\nmyid<span class=\"ff2 fs0\"> file can be any integer between 1 and 255, and must match the server IDs assigned in the </span>zoo.cfg<span class=\"ff2 fs0\"> file.</span>",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "To start the servers, you can simply explicitly reference the configuration files:",
    "hierarchy": [
    ],
    "pageId": 866
  },
  {
    "content": "cd <ZOOKEEPER_HOME>\nbin/zkServer.sh start zoo.cfg\nbin/zkServer.sh start zoo2.cfg\nbin/zkServer.sh start zoo3.cfg",
    "hierarchy": [
    ],
    "pageId": 867
  },
  {
    "content": "Once these servers are running, you can reference them from Solr just as you did before:",
    "hierarchy": [
    ],
    "pageId": 867
  },
  {
    "content": "bin/solr start -e cloud -z localhost:2181,localhost:2182,localhost:2183 -noprompt",
    "hierarchy": [
    ],
    "pageId": 867
  },
  {
    "content": "You may also want to secure the communication between ZooKeeper and Solr.",
    "hierarchy": [
      "Securing the ZooKeeper Connection"
    ],
    "pageId": 867
  },
  {
    "content": "To setup ACL protection of znodes, see <span class=\"link\">ZooKeeper Access Control</span>.",
    "hierarchy": [
      "Securing the ZooKeeper Connection"
    ],
    "pageId": 867
  },
  {
    "content": "For more information on getting the most power from your ZooKeeper installation, check out the <span class=\"link\">ZooKeeper</span>\nAdministrator's Guide<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Securing the ZooKeeper Connection"
    ],
    "pageId": 867
  },
  {
    "content": "With SolrCloud your configuration files are kept in ZooKeeper.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files"
    ],
    "pageId": 867
  },
  {
    "content": "These files are uploaded in either of the following cases:",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files"
    ],
    "pageId": 867
  },
  {
    "content": "When you start a SolrCloud example using the <span class=\"ff1 fs3\">bin/solr</span> script.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files"
    ],
    "pageId": 867
  },
  {
    "content": "When you create a collection using the <span class=\"ff1 fs3\">bin/solr</span> script.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files"
    ],
    "pageId": 867
  },
  {
    "content": "Explicitly upload a configuration set to ZooKeeper.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files"
    ],
    "pageId": 867
  },
  {
    "content": "When you try SolrCloud for the first time using the <span class=\"ff1 fs3\">bin/solr -e cloud</span>, the related configset gets uploaded\nto ZooKeeper automatically and is linked with the newly created collection.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files",
      "Startup Bootstrap"
    ],
    "pageId": 867
  },
  {
    "content": "The below command would start SolrCloud with the default collection name (gettingstarted) and default\nconfigset (_default) uploaded and linked to it.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files",
      "Startup Bootstrap"
    ],
    "pageId": 867
  },
  {
    "content": "bin/solr -e cloud -noprompt",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files",
      "Startup Bootstrap"
    ],
    "pageId": 867
  },
  {
    "content": "You can also explicitly upload a configuration directory when creating a collection using the <span class=\"ff1 fs3\">bin/solr</span> script\nwith the <span class=\"ff1 fs3\">-d</span> option, such as:",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files",
      "Startup Bootstrap"
    ],
    "pageId": 867
  },
  {
    "content": "bin/solr create -c mycollection -d _default",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files",
      "Startup Bootstrap"
    ],
    "pageId": 867
  },
  {
    "content": "The create command will upload a copy of the <span class=\"ff1 fs3\">_default</span> configuration directory to ZooKeeper under\n/configs/mycollection<span class=\"ff2 fs0\">. Refer to the <span class=\"link\">Solr Control Script Reference</span> page for more details about the create</span>\ncommand for creating collections.",
    "hierarchy": [
      "Using ZooKeeper to Manage Configuration Files",
      "Startup Bootstrap"
    ],
    "pageId": 867
  },
  {
    "content": "Once a configuration directory has been uploaded to ZooKeeper, you can update them using the <span class=\"link\">Solr</span>\nControl Script",
    "hierarchy": [
    ],
    "pageId": 868
  },
  {
    "content": "It's a good idea to keep these files under version control.",
    "hierarchy": [
    ],
    "pageId": 868
  },
  {
    "content": "In production situations, <span class=\"link\">Config Sets</span> can also be uploaded to ZooKeeper independent of collection creation\nusing either Solr's <span class=\"link\">Solr Control Script</span> or the <span class=\"link\">CloudSolrClient.uploadConfig</span> java method.",
    "hierarchy": [
      "Uploading Configuration Files using bin/solr or SolrJ"
    ],
    "pageId": 868
  },
  {
    "content": "The below command can be used to upload a new configset using the bin/solr script.",
    "hierarchy": [
      "Uploading Configuration Files using bin/solr or SolrJ"
    ],
    "pageId": 868
  },
  {
    "content": "bin/solr zk upconfig -n <name for configset> -d <path to directory with configset>",
    "hierarchy": [
      "Uploading Configuration Files using bin/solr or SolrJ"
    ],
    "pageId": 868
  },
  {
    "content": "It is strongly recommended that the configurations be kept in a version control system, Git, SVN or similar.",
    "hierarchy": [
      "Uploading Configuration Files using bin/solr or SolrJ"
    ],
    "pageId": 868
  },
  {
    "content": "To update or change your SolrCloud configuration files:",
    "hierarchy": [
      "Managing Your SolrCloud Configuration Files"
    ],
    "pageId": 868
  },
  {
    "content": "1.Download the latest configuration files from ZooKeeper, using the source control checkout process.\n2.Make your changes.\n3.Commit your changed file to source control.\n4.Push the changes back to ZooKeeper.\n5.Reload the collection so that the changes will be in effect.",
    "hierarchy": [
      "Managing Your SolrCloud Configuration Files"
    ],
    "pageId": 868
  },
  {
    "content": "If you will share the same ZooKeeper instance with other applications you should use a <span class=\"ff5\">chroot</span> in ZooKeeper.\nPlease see <span class=\"link\">ZooKeeper chroot</span> for instructions.",
    "hierarchy": [
      "Preparing ZooKeeper before First Cluster Start"
    ],
    "pageId": 868
  },
  {
    "content": "There are certain configuration files containing cluster wide configuration. Since some of these are crucial\nfor the cluster to function properly, you may need to upload such files to ZooKeeper before starting your\nSolr cluster for the first time. Examples of such configuration files (not exhaustive) are <span class=\"ff4 fs3\">solr.xml</span>,\nsecurity.json<span class=\"ff1 fs0\"> and </span>clusterprops.json<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Preparing ZooKeeper before First Cluster Start"
    ],
    "pageId": 868
  },
  {
    "content": "If you for example would like to keep your <span class=\"ff4 fs3\">solr.xml</span> in ZooKeeper to avoid having to copy it to every node's\nsolr_home<span class=\"ff1 fs0\"> directory, you can push it to ZooKeeper with the bin/solr utility (Unix example):</span>",
    "hierarchy": [
      "Preparing ZooKeeper before First Cluster Start"
    ],
    "pageId": 868
  },
  {
    "content": "bin/solr zk cp file:local/file/path/to/solr.xml zk:/solr.xml -z localhost:2181",
    "hierarchy": [
      "Preparing ZooKeeper before First Cluster Start"
    ],
    "pageId": 868
  },
  {
    "content": "This section describes using ZooKeeper access control lists (ACLs) with Solr. For information about\nZooKeeper ACLs, see the ZooKeeper documentation at <span class=\"link\">http://zookeeper.apache.org/doc/r3.4.11/</span>\nzookeeperProgrammers.html#sc_ZooKeeperAccessControl<span class=\"fc0\">.</span>",
    "hierarchy": [
      "ZooKeeper Access Control"
    ],
    "pageId": 868
  },
  {
    "content": "SolrCloud uses ZooKeeper for shared information and for coordination.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "This section describes how to configure Solr to add more restrictive ACLs to the ZooKeeper content it\ncreates, and how to tell Solr about the credentials required to access the content in ZooKeeper. If you want\nto use ACLs in your ZooKeeper nodes, you will have to activate this functionality; by default, Solr behavior is\nopen-unsafe ACL everywhere and uses no credentials.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Content stored in ZooKeeper is critical to the operation of a SolrCloud cluster. Open access to SolrCloud\ncontent on ZooKeeper could lead to a variety of problems. For example:",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Changing configuration might cause Solr to fail or behave in an unintended way.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Changing cluster state information into something wrong or inconsistent might very well make a\nSolrCloud cluster behave strangely.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Adding a delete-collection job to be carried out by the Overseer will cause data to be deleted from the\ncluster.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "You may want to enable ZooKeeper ACLs with Solr if you grant access to your ZooKeeper ensemble to\nentities you do not trust, or if you want to reduce risk of bad actions resulting from, e.g.:",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Malware that found its way into your system.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Other systems using the same ZooKeeper ensemble (a \"bad thing\" might be done by accident).",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "You might even want to limit read-access, if you think there is stuff in ZooKeeper that not everyone should\nknow about. Or you might just in general work on a need-to-know basis.",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "Protecting ZooKeeper itself could mean many different things. <span class=\"ff1\">This section is about protecting Solr</span>\ncontent in ZooKeeper<span class=\"ff2\">. ZooKeeper content basically lives persisted on disk and (partly) in memory of the</span>\nZooKeeper processes. <span class=\"ff1\">This section is not about protecting ZooKeeper data at storage or ZooKeeper</span>\nprocess levels<span class=\"ff2\"> - that's for ZooKeeper to deal with.</span>",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "But this content is also available to \"the outside\" via the ZooKeeper API. Outside processes can connect to\nZooKeeper and create/update/delete/read content; for example, a Solr node in a SolrCloud cluster wants to\ncreate/update/delete/read, and a SolrJ client wants to read from the cluster. It is the responsibility of the\noutside processes that create/update content to setup ACLs on the content. ACLs describe who is allowed to\nread, update, delete, create, etc. Each piece of information (znode/content) in ZooKeeper has its own set of\nACLs, and inheritance or sharing is not possible. The default behavior in Solr is to add one ACL on all the\ncontent it creates - one ACL that gives anyone the permission to do anything (in ZooKeeper terms this is\ncalled \"the open-unsafe ACL\").",
    "hierarchy": [
      "About ZooKeeper ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "We want to be able to:",
    "hierarchy": [
      "How to Enable ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "1.Control the credentials Solr uses for its ZooKeeper connections. The credentials are used to get\npermission to perform operations in ZooKeeper.",
    "hierarchy": [
      "How to Enable ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "2.Control which ACLs Solr will add to znodes (ZooKeeper files/folders) it creates in ZooKeeper.\n3.Control it \"from the outside\", so that you do not have to modify and/or recompile Solr code to turn this",
    "hierarchy": [
      "How to Enable ACLs"
    ],
    "pageId": 869
  },
  {
    "content": "on.",
    "hierarchy": [
    ],
    "pageId": 870
  },
  {
    "content": "Solr nodes, clients and tools (e.g., ZkCLI) always use a java class called <span class=\"ff2 fs1\">SolrZkClient</span> to deal with their\nZooKeeper stuff. The implementation of the solution described here is all about changing <span class=\"ff2 fs1\">SolrZkClient</span>. If\nyou use <span class=\"ff2 fs1\">SolrZkClient</span> in your application, the descriptions below will be true for your application too.",
    "hierarchy": [
    ],
    "pageId": 870
  },
  {
    "content": "You control which credentials provider will be used by configuring the <span class=\"ff2 fs1\">zkCredentialsProvider</span> property in\nsolr.xml<span class=\"ff1 fs0\"> 's </span><solrcloud><span class=\"ff1 fs0\"> section to the name of a class (on the classpath) implementing the</span>\nZkCredentialsProvider<span class=\"ff1 fs0\"> interface. </span>server/solr/solr.xml<span class=\"ff1 fs0\"> in the Solr distribution defines the</span>\nzkCredentialsProvider<span class=\"ff1 fs0\"> such that it will take on the value of the same-named </span>zkCredentialsProvider\nsystem property if it is defined (e.g., by uncommenting the <span class=\"ff2 fs1\">SOLR_ZK_CREDS_AND_ACLS</span> environment variable\ndefinition in <span class=\"ff2 fs1\">solr.in.sh/.cmd</span> - see below), or if not, default to the <span class=\"ff2 fs1\">DefaultZkCredentialsProvider</span>\nimplementation.",
    "hierarchy": [
      "Controlling Credentials"
    ],
    "pageId": 870
  },
  {
    "content": "You can always make you own implementation, but Solr comes with two implementations:",
    "hierarchy": [
      "Controlling Credentials",
      "Out of the Box Credential Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "org.apache.solr.common.cloud.DefaultZkCredentialsProvider: Its <span class=\"ff2 fs1\">getCredentials()</span> returns a list\nof length zero, or \"no credentials used\". This is the default.",
    "hierarchy": [
      "Controlling Credentials",
      "Out of the Box Credential Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "org.apache.solr.common.cloud.VMParamsSingleSetCredentialsDigestZkCredentialsProvider: This\nlets you define your credentials using system properties. It supports at most one set of credentials.",
    "hierarchy": [
      "Controlling Credentials",
      "Out of the Box Credential Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "◦The schema is \"digest\". The username and password are defined by system properties\nzkDigestUsername<span class=\"ff1 fs0\"> and </span>zkDigestPassword<span class=\"ff1 fs0\">. This set of credentials will be added to the list of</span>\ncredentials returned by <span class=\"ff2 fs1\">getCredentials()</span> if both username and password are provided.\n◦If the one set of credentials above is not added to the list, this implementation will fall back to default\nbehavior and use the (empty) credentials list from <span class=\"ff2 fs1\">DefaultZkCredentialsProvider</span>.",
    "hierarchy": [
      "Controlling Credentials",
      "Out of the Box Credential Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "You control which ACLs will be added by configuring <span class=\"ff2 fs1\">zkACLProvider</span> property in <span class=\"ff2 fs1\">solr.xml</span> 's <span class=\"ff2 fs1\"><solrcloud></span>\nsection to the name of a class (on the classpath) implementing the <span class=\"ff2 fs1\">ZkACLProvider</span> interface.\nserver/solr/solr.xml<span class=\"ff1 fs0\"> in the Solr distribution defines the </span>zkACLProvider<span class=\"ff1 fs0\"> such that it will take on the value</span>\nof the same-named <span class=\"ff2 fs1\">zkACLProvider</span> system property if it is defined (e.g., by uncommenting the\nSOLR_ZK_CREDS_AND_ACLS<span class=\"ff1 fs0\"> environment variable definition in </span>solr.in.sh/.cmd<span class=\"ff1 fs0\"> - see below), or if not, default</span>\nto the <span class=\"ff2 fs1\">DefaultZkACLProvider</span> implementation.",
    "hierarchy": [
      "Controlling ACLs",
      "Out of the Box Credential Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "You can always make you own implementation, but Solr comes with:",
    "hierarchy": [
      "Controlling ACLs",
      "Out of the Box ACL Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "org.apache.solr.common.cloud.DefaultZkACLProvider: It returns a list of length one for all <span class=\"ff2 fs1\">zNodePath</span>\n-s. The single ACL entry in the list is \"open-unsafe\". This is the default.",
    "hierarchy": [
      "Controlling ACLs",
      "Out of the Box ACL Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "org.apache.solr.common.cloud.VMParamsAllAndReadonlyDigestZkACLProvider: This lets you define\nyour ACLs using system properties. Its <span class=\"ff2 fs1\">getACLsToAdd()</span> implementation does not use <span class=\"ff2 fs1\">zNodePath</span> for\nanything, so all znodes will get the same set of ACLs. It supports adding one or both of these options:",
    "hierarchy": [
      "Controlling ACLs",
      "Out of the Box ACL Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "◦A user that is allowed to do everything.",
    "hierarchy": [
      "Controlling ACLs",
      "Out of the Box ACL Implementations"
    ],
    "pageId": 870
  },
  {
    "content": "▪<span class=\"ff2 ls1\">The permission is <span class=\"code\">ALL</span> (corresponding to all of <span class=\"code\">CREATE</span>, <span class=\"code\">READ</span>, <span class=\"code\">WRITE</span>, <span class=\"code\">DELETE</span>, and <span class=\"code\">ADMIN</span>), and the</span>\nschema is \"digest\".\n▪<span class=\"ff2 ls1\">The username and password are defined by system properties <span class=\"code\">zkDigestUsername</span> and</span>\nzkDigestPassword<span class=\"ff2 fs0\">, respectively.</span>\n▪<span class=\"ff2 ls1\">This ACL will not be added to the list of ACLs unless both username and password are provided.</span>\n◦<span class=\"ff2 ls1\">A user that is only allowed to perform read operations.</span>\n▪<span class=\"ff2 ls1\">The permission is <span class=\"code\">READ</span> and the schema is <span class=\"code\">digest</span>.</span>\n▪<span class=\"ff2 ls1\">The username and password are defined by system properties <span class=\"code\">zkDigestReadonlyUsername</span> and</span>\nzkDigestReadonlyPassword<span class=\"ff2 fs0\">, respectively.</span>\n▪<span class=\"ff2 ls1\">This ACL will not be added to the list of ACLs unless both username and password are provided.</span>\n<span class=\"code\">org.apache.solr.common.cloud.SaslZkACLProvider</span><span class=\"ls1\">: Requires SASL authentication. Gives all</span>\npermissions for the user specified in system property <span class=\"code\">solr.authorization.superuser</span> (default: <span class=\"code\">solr</span>)\nwhen using SASL, and gives read permissions for anyone else. Designed for a setup where\nconfigurations have already been set up and will not be modified, or where configuration changes are\ncontrolled via Solr APIs. This provider will be useful for administration in a kerberos environment. In such\nan environment, the administrator wants Solr to authenticate to ZooKeeper using SASL, since this is only\nway to authenticate with ZooKeeper via Kerberos.",
    "hierarchy": [
    ],
    "pageId": 871
  },
  {
    "content": "If none of the above ACLs is added to the list, the (empty) ACL list of <span class=\"code\">DefaultZkACLProvider</span> will be used by\ndefault.",
    "hierarchy": [
    ],
    "pageId": 871
  },
  {
    "content": "Notice the overlap in system property names with credentials provider\nVMParamsSingleSetCredentialsDigestZkCredentialsProvider<span class=\"ff2 fs0\"> (described above). This is to let the two</span>\nproviders collaborate in a nice and perhaps common way: we always protect access to content by limiting to\ntwo users - an admin-user and a readonly-user - AND we always connect with credentials corresponding to\nthis same admin-user, basically so that we can do anything to the content/znodes we create ourselves.",
    "hierarchy": [
    ],
    "pageId": 871
  },
  {
    "content": "You can give the readonly credentials to \"clients\" of your SolrCloud cluster - e.g., to be used by SolrJ clients.\nThey will be able to read whatever is necessary to run a functioning SolrJ client, but they will not be able to\nmodify any content in ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 871
  },
  {
    "content": "There are two scripts that impact ZooKeeper ACLs:",
    "hierarchy": [
      "ZooKeeper ACLs in Solr Scripts"
    ],
    "pageId": 871
  },
  {
    "content": "<span class=\"ls1\">For *nix systems: <span class=\"code\">bin/solr</span> & <span class=\"code\">server/scripts/cloud-scripts/zkcli.sh</span></span>",
    "hierarchy": [
      "ZooKeeper ACLs in Solr Scripts"
    ],
    "pageId": 871
  },
  {
    "content": "<span class=\"ls1\">For Windows systems: <span class=\"code\">bin/solr.cmd</span> & <span class=\"code\">server/scripts/cloud-scripts/zkcli.bat</span></span>",
    "hierarchy": [
      "ZooKeeper ACLs in Solr Scripts"
    ],
    "pageId": 871
  },
  {
    "content": "These Solr scripts can enable use of ZK ACLs by setting the appropriate system properties: uncomment the\nfollowing and replace the passwords with ones you choose to enable the above-described VM parameters\nACL and credentials providers in the following files:",
    "hierarchy": [
      "ZooKeeper ACLs in Solr Scripts"
    ],
    "pageId": 871
  },
  {
    "content": "# Settings for ZK ACL\n#SOLR_ZK_CREDS_AND_ACLS=\"-\nDzkACLProvider=org.apache.solr.common.cloud.VMParamsAllAndReadonlyDigestZkACLProvider \\\n#\n-DzkCredentialsProvider=org.apache.solr.common.cloud.VMParamsSingleSetCredentialsDigestZkCredenti\nalsProvider \\\n#  -DzkDigestUsername=admin-user -DzkDigestPassword=CHANGEME-ADMIN-PASSWORD \\\n#  -DzkDigestReadonlyUsername=readonly-user -DzkDigestReadonlyPassword=CHANGEME-READONLY\n-PASSWORD\"\n#SOLR_OPTS=\"$SOLR_OPTS $SOLR_ZK_CREDS_AND_ACLS\"",
    "hierarchy": [
    ],
    "pageId": 872
  },
  {
    "content": "REM Settings for ZK ACL\nREM set SOLR_ZK_CREDS_AND_ACLS=-\nDzkACLProvider=org.apache.solr.common.cloud.VMParamsAllAndReadonlyDigestZkACLProvider ^\nREM\n-DzkCredentialsProvider=org.apache.solr.common.cloud.VMParamsSingleSetCredentialsDigestZkCredenti\nalsProvider ^\nREM  -DzkDigestUsername=admin-user -DzkDigestPassword=CHANGEME-ADMIN-PASSWORD ^\nREM  -DzkDigestReadonlyUsername=readonly-user -DzkDigestReadonlyPassword=CHANGEME-READONLY\n-PASSWORD\nREM set SOLR_OPTS=%SOLR_OPTS% %SOLR_ZK_CREDS_AND_ACLS%",
    "hierarchy": [
    ],
    "pageId": 872
  },
  {
    "content": "# Settings for ZK ACL\n#SOLR_ZK_CREDS_AND_ACLS=\"-\nDzkACLProvider=org.apache.solr.common.cloud.VMParamsAllAndReadonlyDigestZkACLProvider \\\n#\n-DzkCredentialsProvider=org.apache.solr.common.cloud.VMParamsSingleSetCredentialsDigestZkCredenti\nalsProvider \\\n#  -DzkDigestUsername=admin-user -DzkDigestPassword=CHANGEME-ADMIN-PASSWORD \\\n#  -DzkDigestReadonlyUsername=readonly-user -DzkDigestReadonlyPassword=CHANGEME-READONLY\n-PASSWORD\"",
    "hierarchy": [
    ],
    "pageId": 872
  },
  {
    "content": "REM Settings for ZK ACL\nREM set SOLR_ZK_CREDS_AND_ACLS=-\nDzkACLProvider=org.apache.solr.common.cloud.VMParamsAllAndReadonlyDigestZkACLProvider ^\nREM\n-DzkCredentialsProvider=org.apache.solr.common.cloud.VMParamsSingleSetCredentialsDigestZkCredenti\nalsProvider ^\nREM  -DzkDigestUsername=admin-user -DzkDigestPassword=CHANGEME-ADMIN-PASSWORD ^\nREM  -DzkDigestReadonlyUsername=readonly-user -DzkDigestReadonlyPassword=CHANGEME-READONLY\n-PASSWORD",
    "hierarchy": [
    ],
    "pageId": 872
  },
  {
    "content": "Over the lifetime of operating your Solr cluster, you may decide to move from an unsecured ZooKeeper to a\nsecured instance. Changing the configured <span class=\"code\">zkACLProvider</span> in <span class=\"code\">solr.xml</span> will ensure that newly created nodes\nare secure, but will not protect the already existing data. To modify all existing ACLs, you can use the\nupdateacls<span class=\"ff2 fs1\"> command with Solr's ZkCLI. First uncomment the </span>SOLR_ZK_CREDS_AND_ACLS<span class=\"ff2 fs1\"> environment</span>\nvariable definition in <span class=\"code\">server/scripts/cloud-scripts/zkcli.sh</span> (or <span class=\"code\">zkcli.bat</span> on Windows) and fill in the\npasswords for the admin-user and the readonly-user - see above - then run <span class=\"code\">server/scripts/cloud-</span>\nscripts/zkcli.sh -cmd updateacls /zk-path<span class=\"ff2 fs1\">, or on Windows run </span>server\\scripts\\cloud-\nscripts\\zkcli.bat cmd updateacls /zk-path<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Changing ACL Schemes"
    ],
    "pageId": 873
  },
  {
    "content": "Changing ACLs in ZK should only be done while your SolrCloud cluster is stopped. Attempting to do so while\nSolr is running may result in inconsistent state and some nodes becoming inaccessible.",
    "hierarchy": [
      "Changing ACL Schemes"
    ],
    "pageId": 873
  },
  {
    "content": "The VM properties <span class=\"code\">zkACLProvider</span> and <span class=\"code\">zkCredentialsProvider</span>, included in the <span class=\"code\">SOLR_ZK_CREDS_AND_ACLS</span>\nenvironment variable in <span class=\"code\">zkcli.sh/.bat</span>, control the conversion:",
    "hierarchy": [
      "Changing ACL Schemes"
    ],
    "pageId": 873
  },
  {
    "content": "The Credentials Provider must be one that has current admin privileges on the nodes. When omitted, the\nprocess will use no credentials (suitable for an unsecure configuration).",
    "hierarchy": [
      "Changing ACL Schemes"
    ],
    "pageId": 873
  },
  {
    "content": "The ACL Provider will be used to compute the new ACLs. When omitted, the process will set all\npermissions to all users, removing any security present.",
    "hierarchy": [
      "Changing ACL Schemes"
    ],
    "pageId": 873
  },
  {
    "content": "The uncommented <span class=\"code\">SOLR_ZK_CREDS_AND_ACLS</span> environment variable in <span class=\"code\">zkcli.sh/.bat</span> sets the credentials\nand ACL providers to the <span class=\"code\">VMParamsSingleSetCredentialsDigestZkCredentialsProvider</span> and\nVMParamsAllAndReadonlyDigestZkACLProvider<span class=\"ff2 fs1\"> implementations, described earlier in the page.</span>",
    "hierarchy": [
      "Changing ACL Schemes"
    ],
    "pageId": 873
  },
  {
    "content": "The Collections API is used to create, remove, or reload collections.",
    "hierarchy": [
      "Collections API"
    ],
    "pageId": 873
  },
  {
    "content": "In the context of SolrCloud you can use it to create collections with a specific number of shards and replicas,\nmove replicas or shards, and create or delete collection aliases.",
    "hierarchy": [
      "Collections API"
    ],
    "pageId": 873
  },
  {
    "content": "/admin/collections?action=CREATE&name=name",
    "hierarchy": [
      "Collections API",
      "CREATE: Create a Collection"
    ],
    "pageId": 873
  },
  {
    "content": "The CREATE action allows the following parameters:",
    "hierarchy": [
      "Collections API",
      "CREATE: Create a Collection",
      "CREATE Parameters"
    ],
    "pageId": 873
  },
  {
    "content": "name\nThe name of the collection to be created. This parameter is required.",
    "hierarchy": [
      "Collections API",
      "CREATE: Create a Collection",
      "CREATE Parameters"
    ],
    "pageId": 873
  },
  {
    "content": "router.name\nThe router name that will be used. The router defines how documents will be distributed among the\nshards. Possible values are <span class=\"code\">implicit</span> or <span class=\"code\">compositeId</span>, which is the default.",
    "hierarchy": [
      "Collections API",
      "CREATE: Create a Collection",
      "CREATE Parameters"
    ],
    "pageId": 873
  },
  {
    "content": "The <span class=\"code\">implicit</span> router does not automatically route documents to different shards. Whichever shard you\nindicate on the indexing request (or within each document) will be used as the destination for those\ndocuments.",
    "hierarchy": [
      "Collections API",
      "CREATE: Create a Collection",
      "CREATE Parameters"
    ],
    "pageId": 873
  },
  {
    "content": "The <span class=\"ff2 fs1\">compositeId</span> router hashes the value in the uniqueKey field and looks up that hash in the collection's\nclusterstate to determine which shard will receive the document, with the additional ability to manually\ndirect the routing.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "When using the <span class=\"ff2 fs1\">implicit</span> router, the <span class=\"ff2 fs1\">shards</span> parameter is required. When using the <span class=\"ff2 fs1\">compositeId</span> router,\nthe <span class=\"ff2 fs1\">numShards</span> parameter is required.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "For more information, see also the section <span class=\"link\">Document Routing</span>.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "numShards\nThe number of shards to be created as part of the collection. This is a required parameter when the\nrouter.name<span class=\"ff1 fs0\"> is </span>compositeId<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "shards\nA comma separated list of shard names, e.g., <span class=\"ff2 fs1\">shard-x,shard-y,shard-z</span>. This is a required parameter\nwhen the <span class=\"ff2 fs1\">router.name</span> is <span class=\"ff2 fs1\">implicit</span>.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "replicationFactor\nThe number of replicas to be created for each shard. The default is <span class=\"ff2 fs1\">1</span>. This will create a NRT type of\nreplica. If you want another type of replica, see the <span class=\"ff2 fs1\">tlogReplicas</span> and <span class=\"ff2 fs1\">pullReplica</span> parameters. See the\nsection <span class=\"link\">Types of Replicas</span> for more information about replica types.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "nrtReplicas\nThe number of NRT (Near-Real-Time) replicas to create for this collection. This type of replica maintains a\ntransaction log and updates its index locally. If you want all of your replicas to be of this type, you can\nsimply use <span class=\"ff2 fs1\">replicationFactor</span> instead.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "tlogReplicas\nThe number of TLOG replicas to create for this collection. This type of replica maintains a transaction log\nbut only updates its index via replication from a leader. See the section <span class=\"link\">Types of Replicas</span> for more\ninformation about replica types.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "pullReplicas\nThe number of PULL replicas to create for this collection. This type of replica does not maintain a\ntransaction log and only updates its index via replication from a leader. This type is not eligible to become\na leader and should not be the only type of replicas in the collection. See the section <span class=\"link\">Types of Replicas</span> for\nmore information about replica types.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "maxShardsPerNode\nWhen creating collections, the shards and/or replicas are spread across all available (i.e., live) nodes, and\ntwo replicas of the same shard will never be on the same node.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "If a node is not live when the CREATE action is called, it will not get any parts of the new collection, which\ncould lead to too many replicas being created on a single live node. Defining <span class=\"ff2 fs1\">maxShardsPerNode</span> sets a\nlimit on the number of replicas the CREATE action will spread to each node.",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "If the entire collection can not be fit into the live nodes, no collection will be created at all. The default\nmaxShardsPerNode<span class=\"ff1 fs0\"> value is </span>1<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "createNodeSet\nAllows defining the nodes to spread the new collection across. The format is a comma-separated list of",
    "hierarchy": [
    ],
    "pageId": 874
  },
  {
    "content": "node_names, such as <span class=\"ff2 fs1\">localhost:8983_solr,localhost:8984_solr,localhost:8985_solr</span>.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "If not provided, the CREATE operation will create shard-replicas spread across all live Solr nodes.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "Alternatively, use the special value of <span class=\"ff2 fs1\">EMPTY</span> to initially create no shard-replica within the new collection\nand then later use the <span class=\"link\">ADDREPLICA</span> operation to add shard-replicas when and where required.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "createNodeSet.shuffle\nControls wether or not the shard-replicas created for this collection will be assigned to the nodes\nspecified by the <span class=\"ff2 fs1\">createNodeSet</span> in a sequential manner, or if the list of nodes should be shuffled prior to\ncreating individual replicas.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "A <span class=\"ff2 fs1\">false</span> value makes the results of a collection creation predictable and gives more exact control over the\nlocation of the individual shard-replicas, but <span class=\"ff2 fs1\">true</span> can be a better choice for ensuring replicas are\ndistributed evenly across nodes. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "This parameter is ignored if <span class=\"ff2 fs1\">createNodeSet</span> is not also specified.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "collection.configName\nDefines the name of the configuration (which <span class=\"code\">must already be stored in ZooKeeper</span>) to use for this\ncollection. If not provided, Solr will use the configuration of <span class=\"ff2 fs1\">_default</span> configSet to create a new (and\nmutable) configSet named <span class=\"ff2 fs1\"><collectionName>.AUTOCREATED</span> and will use it for the new collection. When\nsuch a collection (that uses a copy of the _default configset) is deleted, the autocreated configset is not\ndeleted by default.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "router.field\nIf this parameter is specified, the router will look at the value of the field in an input document to\ncompute the hash and identify a shard instead of looking at the <span class=\"ff2 fs1\">uniqueKey</span> field. If the field specified is\nnull in the document, the document will be rejected.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "Please note that <span class=\"link\">RealTime Get</span> or retrieval by document ID would also require the parameter <span class=\"ff2 fs1\">_route_</span> (or\nshard.keys<span class=\"ff1 fs0\">) to avoid a distributed search.</span>",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "property.name=value\nSet core property <span class=\"ff4\">name</span> to <span class=\"ff4\">value</span>. See the section <span class=\"link\">Defining core.properties</span> for details on supported\nproperties and values.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "autoAddReplicas\nWhen set to <span class=\"ff2 fs1\">true</span>, enables automatic addition of replicas on shared file systems (such as HDFS) only. See\nthe section <span class=\"link\">autoAddReplicas Settings</span> for more details on settings and overrides. The default is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "rule\nReplica placement rules. See the section <span class=\"link\">Rule-based Replica Placement</span> for details.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "snitch\nDetails of the snitch provider. See the section <span class=\"link\">Rule-based Replica Placement</span> for details.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "policy\nName of the collection-level policy. See <span class=\"link\">Defining Collection-Specific Policies </span> for details.",
    "hierarchy": [
    ],
    "pageId": 875
  },
  {
    "content": "waitForFinalState\nIf <span class=\"ff1 fs0\">true</span>, the request will complete only when all affected replicas become active. The default is <span class=\"ff1 fs0\">false</span>,\nwhich means that the API will return the status of the single action, which may be before the new replica\nis online and active.",
    "hierarchy": [
    ],
    "pageId": 876
  },
  {
    "content": "The response will include the status of the request and the new core names. If the status is anything other\nthan \"success\", an error message will explain why the request failed.",
    "hierarchy": [
      "CREATE Response"
    ],
    "pageId": 876
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CREATE&name=newCollection&numShards=2&replica\ntionFactor=1&wt=xml",
    "hierarchy": [
      "Examples using CREATE"
    ],
    "pageId": 876
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>3764<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"success\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>3450<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"core\"<span class=\"fc2\">></span></span>newCollection_shard1_replica1<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>3597<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"core\"<span class=\"fc2\">></span></span>newCollection_shard2_replica1<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using CREATE"
    ],
    "pageId": 876
  },
  {
    "content": "/admin/collections?action=MODIFYCOLLECTION&collection=<collection-name>&<attribute-\nname>=<attribute-value>&<another-attribute-name>=<another-value>",
    "hierarchy": [
      "MODIFYCOLLECTION: Modify Attributes of a Collection"
    ],
    "pageId": 876
  },
  {
    "content": "It's possible to edit multiple attributes at a time. Changing these values only updates the z-node on\nZooKeeper, they do not change the topology of the collection. For instance, increasing <span class=\"ff1 fs0\">replicationFactor</span>\nwill <span class=\"ff4\">not</span> automatically add more replicas to the collection but <span class=\"ff4\">will</span> allow more ADDREPLICA commands to",
    "hierarchy": [
      "MODIFYCOLLECTION: Modify Attributes of a Collection"
    ],
    "pageId": 876
  },
  {
    "content": "succeed.",
    "hierarchy": [
    ],
    "pageId": 877
  },
  {
    "content": "collection\nThe name of the collection to be modified. This parameter is required.",
    "hierarchy": [
      "MODIFYCOLLECTION Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "attribute=value\nKey-value pairs of attribute names and attribute values. At least one of these is required.",
    "hierarchy": [
      "MODIFYCOLLECTION Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "The attributes that can be modified are:",
    "hierarchy": [
      "MODIFYCOLLECTION Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "maxShardsPerNode\n•replicationFactor\n•autoAddReplicas\n•collection.configName\n•rule\n•snitch\n•policy",
    "hierarchy": [
      "MODIFYCOLLECTION Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "See the <span class=\"link\">CREATE action</span> section above for details on these attributes.",
    "hierarchy": [
      "MODIFYCOLLECTION Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "/admin/collections?action=RELOAD&name=name",
    "hierarchy": [
      "RELOAD: Reload a Collection"
    ],
    "pageId": 877
  },
  {
    "content": "The RELOAD action is used when you have changed a configuration in ZooKeeper.",
    "hierarchy": [
      "RELOAD: Reload a Collection"
    ],
    "pageId": 877
  },
  {
    "content": "name\nThe name of the collection to reload. This parameter is required.",
    "hierarchy": [
      "RELOAD: Reload a Collection",
      "RELOAD Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "RELOAD: Reload a Collection",
      "RELOAD Parameters"
    ],
    "pageId": 877
  },
  {
    "content": "The response will include the status of the request and the cores that were reloaded. If the status is\nanything other than \"success\", an error message will explain why the request failed.",
    "hierarchy": [
      "RELOAD: Reload a Collection",
      "RELOAD Response"
    ],
    "pageId": 877
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=RELOAD&name=newCollection&wt=xml",
    "hierarchy": [
      "RELOAD: Reload a Collection",
      "Examples using RELOAD"
    ],
    "pageId": 877
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>1551<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"success\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"10.0.1.6:8983_solr\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>761<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"10.0.1.4:8983_solr\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>1527<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 878
  },
  {
    "content": "/admin/collections?action=SPLITSHARD&collection=name&shard=shardID",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "Splitting a shard will take an existing shard and break it into two pieces which are written to disk as two\n(new) shards. The original shard will continue to contain the same data as-is but it will start re-routing\nrequests to the new shards. The new shards will have as many replicas as the original shard. A soft commit\nis automatically issued after splitting a shard so that documents are made visible on sub-shards. An explicit\ncommit (hard or soft) is not necessary after a split operation because the index is automatically persisted to\ndisk during the split operation.",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "This command allows for seamless splitting and requires no downtime. A shard being split will continue to\naccept query and indexing requests and will automatically start routing requests to the new shards once this\noperation is complete. This command can only be used for SolrCloud collections created with <span class=\"ff1 fs2\">numShards</span>\nparameter, meaning collections which rely on Solr's hash-based routing mechanism.",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "The split is performed by dividing the original shard's hash range into two equal partitions and dividing up\nthe documents in the original shard according to the new sub-ranges. Two parameters discussed below,\nranges<span class=\"code\"> and </span>split.key<span class=\"code\"> provide further control over how the split occurs.</span>",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "The newly created shards will have as many replicas as the parent shard.",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "You must ensure that the node running the leader of the parent shard has enough free disk space i.e. more\nthan twice the index size, for the split to succeed. The API uses the Autoscaling framework to find nodes that\ncan satisfy the disk requirements for the new replicas but only when an Autoscaling policy is configured.\nRefer to <span class=\"link\">Autoscaling Policy and Preferences</span> section for more details.",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "Shard splitting can be a long running process. In order to avoid timeouts, you should run this as an\nasynchronous call<span class=\"fc1\">.</span>",
    "hierarchy": [
      "SPLITSHARD: Split a Shard"
    ],
    "pageId": 878
  },
  {
    "content": "collection\nThe name of the collection that includes the shard to be split. This parameter is required.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "shard\nThe name of the shard to be split. This parameter is required when <span class=\"ff2 fs1\">split.key</span> is not specified.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "ranges\nA comma-separated list of hash ranges in hexadecimal, such as <span class=\"ff2 fs1\">ranges=0-1f4,1f5-3e8,3e9-5dc</span>.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "This parameter can be used to divide the original shard's hash range into arbitrary hash range intervals\nspecified in hexadecimal. For example, if the original hash range is <span class=\"ff2 fs1\">0-1500</span> then adding the parameter:\nranges=0-1f4,1f5-3e8,3e9-5dc<span class=\"code\"> will divide the original shard into three shards with hash range </span>0-500<span class=\"code\">,</span>\n501-1000<span class=\"code\">, and </span>1001-1500<span class=\"code\"> respectively.</span>",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "split.key\nThe key to use for splitting the index.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "This parameter can be used to split a shard using a route key such that all documents of the specified\nroute key end up in a single dedicated sub-shard. Providing the <span class=\"ff2 fs1\">shard</span> parameter is not required in this\ncase because the route key is enough to figure out the right shard. A route key which spans more than\none shard is not supported.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "For example, suppose <span class=\"ff2 fs1\">split.key=A!</span> hashes to the range <span class=\"ff2 fs1\">12-15</span> and belongs to shard 'shard1' with range\n0-20<span class=\"code\">. Splitting by this route key would yield three sub-shards with ranges </span>0-11<span class=\"code\">, </span>12-15<span class=\"code\"> and </span>16-20<span class=\"code\">. Note</span>\nthat the sub-shard with the hash range of the route key may also contain documents for other route keys\nwhose hash ranges overlap.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "property.name=value\nSet core property <span class=\"ff4\">name</span> to <span class=\"ff4\">value</span>. See the section <span class=\"link\">Defining core.properties</span> for details on supported\nproperties and values.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "waitForFinalState\nIf <span class=\"ff2 fs1\">true</span>, the request will complete only when all affected replicas become active. The default is <span class=\"ff2 fs1\">false</span>,\nwhich means that the API will return the status of the single action, which may be before the new replica\nis online and active.",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>",
    "hierarchy": [
      "SPLITSHARD Parameters"
    ],
    "pageId": 879
  },
  {
    "content": "The output will include the status of the request and the new shard names, which will use the original shard\nas their basis, adding an underscore and a number. For example, \"shard1\" will become \"shard1_0\" and\n\"shard1_1\". If the status is anything other than \"success\", an error message will explain why the request\nfailed.",
    "hierarchy": [
      "SPLITSHARD Response"
    ],
    "pageId": 879
  },
  {
    "content": "Split shard1 of the \"anotherCollection\" collection.",
    "hierarchy": [
    ],
    "pageId": 880
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=SPLITSHARD&collection=anotherCollection&shard\n=shard1&wt=xml",
    "hierarchy": [
    ],
    "pageId": 880
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>6120<span class=\"fc1\"></int></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"success\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>3673<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>anotherCollection_shard1_1_replica1<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>3681<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>anotherCollection_shard1_0_replica1<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>6008<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>6007<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>71<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 880
  },
  {
    "content": "Ê     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>anotherCollection_shard1_1_replica1<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>EMPTY_BUFFER<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>anotherCollection_shard1_0_replica1<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>EMPTY_BUFFER<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 881
  },
  {
    "content": "Shards can only created with this API for collections that use the 'implicit' router (i.e., when the collection\nwas created, <span class=\"ff1 fs2\">router.name=implicit</span>). A new shard with a name can be created for an existing 'implicit'\ncollection.",
    "hierarchy": [
      "CREATESHARD: Create a Shard"
    ],
    "pageId": 881
  },
  {
    "content": "Use SPLITSHARD for collections created with the 'compositeId' router (<span class=\"ff1 fs2\">router.key=compositeId</span>).",
    "hierarchy": [
      "CREATESHARD: Create a Shard"
    ],
    "pageId": 881
  },
  {
    "content": "/admin/collections?action=CREATESHARD&shard=shardName&collection=name",
    "hierarchy": [
      "CREATESHARD: Create a Shard"
    ],
    "pageId": 881
  },
  {
    "content": "collection\nThe name of the collection that includes the shard to be split. This parameter is required.",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "shard\nThe name of the shard to be created. This parameter is required.",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "createNodeSet\nAllows defining the nodes to spread the new collection across. If not provided, the CREATESHARD\noperation will create shard-replica spread across all live Solr nodes.",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "The format is a comma-separated list of node_names, such as\nlocalhost:8983_solr,localhost:8984_solr,localhost:8985_solr<span class=\"code\">.</span>",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "property.name=value\nSet core property <span class=\"ff4\">name</span> to <span class=\"ff4\">value</span>. See the section <span class=\"link\">Defining core.properties</span> for details on supported\nproperties and values.",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "waitForFinalState\nIf <span class=\"ff1 fs2\">true</span>, the request will complete only when all affected replicas become active. The default is <span class=\"ff1 fs2\">false</span>,\nwhich means that the API will return the status of the single action, which may be before the new replica\nis online and active.",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "CREATESHARD: Create a Shard",
      "CREATESHARD Parameters"
    ],
    "pageId": 881
  },
  {
    "content": "The output will include the status of the request. If the status is anything other than \"success\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "CREATESHARD Response"
    ],
    "pageId": 882
  },
  {
    "content": "Create 'shard-z' for the \"anImplicitCollection\" collection.",
    "hierarchy": [
      "Examples using CREATESHARD"
    ],
    "pageId": 882
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CREATESHARD&collection=anImplicitCollection&s\nhard=shard-z&wt=xml",
    "hierarchy": [
      "Examples using CREATESHARD"
    ],
    "pageId": 882
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>558<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using CREATESHARD"
    ],
    "pageId": 882
  },
  {
    "content": "Deleting a shard will unload all replicas of the shard, remove them from <span class=\"code\">clusterstate.json</span>, and (by\ndefault) delete the instanceDir and dataDir for each replica. It will only remove shards that are inactive, or\nwhich have no range given for custom sharding.",
    "hierarchy": [
      "DELETESHARD: Delete a Shard"
    ],
    "pageId": 882
  },
  {
    "content": "/admin/collections?action=DELETESHARD&shard=shardID&collection=name",
    "hierarchy": [
      "DELETESHARD: Delete a Shard"
    ],
    "pageId": 882
  },
  {
    "content": "collection\nThe name of the collection that includes the shard to be deleted. This parameter is required.",
    "hierarchy": [
      "DELETESHARD: Delete a Shard",
      "DELETESHARD Parameters"
    ],
    "pageId": 882
  },
  {
    "content": "shard\nThe name of the shard to be deleted. This parameter is required.",
    "hierarchy": [
      "DELETESHARD: Delete a Shard",
      "DELETESHARD Parameters"
    ],
    "pageId": 882
  },
  {
    "content": "deleteInstanceDir\nBy default Solr will delete the entire instanceDir of each replica that is deleted. Set this to <span class=\"code\">false</span> to prevent\nthe instance directory from being deleted.",
    "hierarchy": [
      "DELETESHARD: Delete a Shard",
      "DELETESHARD Parameters"
    ],
    "pageId": 882
  },
  {
    "content": "deleteDataDir\nBy default Solr will delete the dataDir of each replica that is deleted. Set this to <span class=\"code\">false</span> to prevent the data\ndirectory from being deleted.",
    "hierarchy": [
      "DELETESHARD: Delete a Shard",
      "DELETESHARD Parameters"
    ],
    "pageId": 882
  },
  {
    "content": "deleteIndex\nBy default Solr will delete the index of each replica that is deleted. Set this to <span class=\"code\">false</span> to prevent the index\ndirectory from being deleted.",
    "hierarchy": [
      "DELETESHARD: Delete a Shard",
      "DELETESHARD Parameters"
    ],
    "pageId": 882
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
    ],
    "pageId": 883
  },
  {
    "content": "The output will include the status of the request. If the status is anything other than \"success\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "DELETESHARD Response"
    ],
    "pageId": 883
  },
  {
    "content": "Delete 'shard1' of the \"anotherCollection\" collection.",
    "hierarchy": [
      "Examples using DELETESHARD"
    ],
    "pageId": 883
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETESHARD&collection=anotherCollection&shar\nd=shard1&wt=xml",
    "hierarchy": [
      "Examples using DELETESHARD"
    ],
    "pageId": 883
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>558<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"success\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"10.0.1.4:8983_solr\"<span class=\"fc3\">></span></span>\nÊ     <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ       <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ       <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>27<span class=\"fc3\"></int></span>\nÊ     <span class=\"fc3\"></lst></span>\nÊ   <span class=\"fc3\"></lst></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Examples using DELETESHARD"
    ],
    "pageId": 883
  },
  {
    "content": "The <span class=\"ff1 fs0\">CREATEALIAS</span> action will create a new alias pointing to one or more collections. If an alias by the same\nname already exists, this action will replace the existing alias, effectively acting like an atomic \"MOVE\"\ncommand. Aliases come in 2 flavors: routed and non-routed.",
    "hierarchy": [
      "CREATEALIAS: Create or Modify an Alias for a Collection"
    ],
    "pageId": 883
  },
  {
    "content": "Non-routed aliases are simpler and can serve to rename a collection or to distribute queries across several\ncollections. While it is possible to send updates to an alias spanning multiple collections, non-routed alias\nhave no logic for distributing documents among the referenced collections so all updates will go to the first\ncollection in the list.",
    "hierarchy": [
      "CREATEALIAS: Create or Modify an Alias for a Collection"
    ],
    "pageId": 883
  },
  {
    "content": "/admin/collections?action=CREATEALIAS&name=name&collections=collectionlist",
    "hierarchy": [
      "CREATEALIAS: Create or Modify an Alias for a Collection"
    ],
    "pageId": 883
  },
  {
    "content": "Routed aliases are more complex to configure, but include logic for automatically inspecting a field on the\ndocument and using the value in that field to select a destination collection. Additionally, the routed alias\nautomates the partitioning of data across a series of collections by creating new collections periodically. This",
    "hierarchy": [
      "CREATEALIAS: Create or Modify an Alias for a Collection"
    ],
    "pageId": 883
  },
  {
    "content": "feature allows for indefinite indexing of data without degradation of performance otherwise experienced\ndue to the continuous growth of an index. As new data arrives, a field on the document is inspected and the\ndocument is then potentially re-routed to another collection. The underlying collections can can be queried\nindependently but usually the alias will be used. These collections are created automatically on the fly as\nnew data arrives based on the parameters supplied in this command. For very high volume use cases or for\nuse cases requiring only a limited span of data to be retained, collections older than a given age can be\ndeleted. This delete of old collections only occurs if new documents are sent to the alias.",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "Presently this is only supported for temporal fields stored as a <span class=\"link\">DatePointField or</span>\nTrieDateField<span class=\"fc0\"> type. Other well ordered field types may be added in future versions.</span>",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "localhost:8983/solr/admin/collections?action=CREATEALIAS&name=timedata&router.start=NOW/DAY&route\nr.field=evt_dt&router.name=time&router.interval=%2B1DAY&router.maxFutureMs=3600000&create-\ncollection.collection.configName=myConfig&create-collection.numShards=2",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "If run on Jan 15, 2018, the above will create an alias named timedata, that contains collections with names\nprefixed with <span class=\"code\">timedata</span> and an initial collection named <span class=\"code\">timedata_2018_01_15</span> will be created immediately.\nUpdates sent to this alias with a (required) value in <span class=\"code\">evt_dt</span> that is before or after 2018-01-15 will be rejected,\nuntil the last 60 minutes of 2018-01-15. After 2018-01-15T23:00:00 documents for either 2018-01-15 or 2018-\n01-16 will be accepted. As soon as the system receives a document for an allowable time window for which\nthere is no collection it will automatically create the next required collection (and potentially any intervening\ncollections if <span class=\"code\">router.interval</span> is smaller than <span class=\"code\">router.maxFutureMs</span>). Both the initial collection and any\nsubsequent collections will be created using the specified configset. All collection creation parameters other\nthan <span class=\"code\">name</span> are allowed, prefixed by <span class=\"code\">create-collection.</span>",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "This means that one could, for example, partition their collections by day, and within each daily collection\nroute the data to shards based on customer id. Such shards can be of any type (NRT, PULL or TLOG), and\nrule-based replica placement strategies may also be used.",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "The values supplied in this command for collection creation will be retained in alias properties, and can be\nverified by inspecting <span class=\"code\">aliases.json</span> in ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "Presently only updates are routed and queries are distributed to all collections in the alias,\nbut future features may enable routing of the query to the single appropriate collection\nbased on a special parameter or perhaps a filter on the routed field.",
    "hierarchy": [
    ],
    "pageId": 884
  },
  {
    "content": "name\nThe alias name to be created. This parameter is required. If the alias is to be routed it also functions as a\nprefix for the names of the dependent collections that will be created. It must therefore adhere to normal\nrequirements for collection naming.",
    "hierarchy": [
      "CREATEALIAS Parameters"
    ],
    "pageId": 884
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "CREATEALIAS Parameters"
    ],
    "pageId": 884
  },
  {
    "content": "collections",
    "hierarchy": [
      "CREATEALIAS Parameters",
      "Non-Routed Alias Parameters"
    ],
    "pageId": 884
  },
  {
    "content": "A comma-separated list of collections to be aliased. The collections must already exist in the cluster. This\nparameter signals the creation of a simple (non-routed) alias. If it is present all routing parameters are\nprohibited. If routing parameters are present this parameter is prohibited.",
    "hierarchy": [
    ],
    "pageId": 885
  },
  {
    "content": "router.start\nThe start date/time of data for this time routed alias in Solr's standard date/time format (i.e., ISO-8601 or\n\"NOW\" optionally with <span class=\"link\">date math</span>).",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "The first collection created for the alias will be internally named after this value. If a document is\nsubmitted with an earlier value for router.field then the earliest collection the alias points to then it will\nyield an error since it can't be routed. This date/time MUST NOT have a milliseconds component other\nthan 0. Particularly, this means <span class=\"code\">NOW</span> will fail 999 times out of 1000, though <span class=\"code\">NOW/SECOND</span>, <span class=\"code\">NOW/MINUTE</span>, etc.\nwill work just fine. This parameter is required.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "TZ\nThe timezone to be used when evaluating any date math in router.start or router.interval. This is\nequivalent to the same parameter supplied to search queries, but understand in this case it's persisted\nwith most of the other parameters as an alias property.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "If GMT-4 is supplied for this value then a document dated 2018-01-14T21:00:00:01.2345Z would be stored\nin the myAlias_2018-01-15_01 collection (assuming an interval of +1HOUR).",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "The default timezone is UTC.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "router.field\nThe date field to inspect to determine which underlying collection an incoming document should be\nrouted to. This field is required on all incoming documents.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "router.name\nThe type of routing to use. Presently only <span class=\"code\">time</span> is valid. This parameter is required.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "router.interval\nA date math expression that will be appended to a timestamp to determine the next collection in the\nseries. Any date math expression that can be evaluated if appended to a timestamp of the form 2018-01-\n15T16:17:18 will work here.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "This parameter is required.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "router.maxFutureMs\nThe maximum milliseconds into the future that a document is allowed to have in <span class=\"code\">router.field</span> for it to\nbe accepted without error. If there was no limit, than an erroneous value could trigger many collections\nto be created.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "The default is 10 minutes.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "router.autoDeleteAge\nA date math expression that results in the oldest collections getting deleted automatically.",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "The date math is relative to the timestamp of a newly created collection (typically close to the current\ntime), and thus this must produce an earlier time via rounding and/or subtracting. Collections to be",
    "hierarchy": [
      "Routed Alias Parameters"
    ],
    "pageId": 885
  },
  {
    "content": "deleted must have a time range that is entirely before the computed age. Collections are considered for\ndeletion immediately prior to new collections getting created. Example: <span class=\"ff2 fs1\">/DAY-90DAYS</span>.",
    "hierarchy": [
    ],
    "pageId": 886
  },
  {
    "content": "The default is not to delete.",
    "hierarchy": [
    ],
    "pageId": 886
  },
  {
    "content": "create-collection.*\nThe * wildcard can be replaced with any parameter from the <span class=\"link\">CREATE</span> command except <span class=\"ff2 fs1\">name</span>. All other\nfields are identical in requirements and naming except that we insist that the configset be explicitly\nspecified. The configset must be created beforehand, either uploaded or copied and modified. It's\nprobably a bad idea to use \"data driven\" mode as schema mutations might happen concurrently leading\nto errors.",
    "hierarchy": [
    ],
    "pageId": 886
  },
  {
    "content": "The output will simply be a responseHeader with details of the time it took to process the request. To\nconfirm the creation of the alias, you can look in the Solr Admin UI, under the Cloud section and find the\naliases.json<span class=\"ff1 fs0\"> file. The initial collection for routed aliases should also be visible in various parts of the admin</span>\nUI.",
    "hierarchy": [
      "CREATEALIAS Response"
    ],
    "pageId": 886
  },
  {
    "content": "Create an alias named \"testalias\" and link it to the collections named \"anotherCollection\" and\n\"testCollection\".",
    "hierarchy": [
      "Examples using CREATEALIAS"
    ],
    "pageId": 886
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CREATEALIAS&name=testalias&collections=anothe\nrCollection,testCollection&wt=xml",
    "hierarchy": [
      "Examples using CREATEALIAS"
    ],
    "pageId": 886
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>122<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Examples using CREATEALIAS"
    ],
    "pageId": 886
  },
  {
    "content": "Create an alias named \"myTimeData\" for data begining on <span class=\"ff2 fs1\">2018-01-15</span> in the UTC time zone and\npartitioning daily based on the <span class=\"ff2 fs1\">evt_dt</span> field in the incomming documents. Data more than an hour beyond\nthe latest (most recent) partiton is to be rejected and collections are created using a config set named\nmyConfig and",
    "hierarchy": [
      "Examples using CREATEALIAS"
    ],
    "pageId": 886
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CREATEALIAS&name=myTimeData&router.start=NOW/\nDAY&router.field=evt_dt&router.name=time&router.interval=%2B1DAY&router.maxFutureMs=3600000&creat\ne-collection.collection.configName=myConfig&create-collection.numShards=2",
    "hierarchy": [
      "Examples using CREATEALIAS"
    ],
    "pageId": 886
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1234<span class=\"fc1\"></int></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 887
  },
  {
    "content": "A somewhat contrived example demonstrating the <span class=\"link\">V2 API</span> usage and additional collection creation options.\nNotice that the collection creation parameters follow the v2 API naming convention, not the v1 naming\nconventions.",
    "hierarchy": [
    ],
    "pageId": 887
  },
  {
    "content": "POST /api/c\n{\nÊ <span class=\"fc5\">\"create-routed-alias\"</span> : {\nÊ   <span class=\"fc5\">\"name\"</span>: <span class=\"fc3\">\"somethingTemporalThisWayComes\"</span>,\nÊ   <span class=\"fc5\">\"router\"</span> : {\nÊ     <span class=\"fc5\">\"name\"</span>: <span class=\"fc3\">\"time\"</span>,\nÊ     <span class=\"fc5\">\"field\"</span>: <span class=\"fc3\">\"evt_dt\"</span>,\nÊ     <span class=\"fc5\">\"start\"</span>:<span class=\"fc3\">\"NOW/MINUTE\"</span>,\nÊ     <span class=\"fc5\">\"interval\"</span>:<span class=\"fc3\">\"+2HOUR\"</span>,\nÊ     <span class=\"fc5\">\"maxFutureMs\"</span>:<span class=\"fc3\">\"14400000\"</span>\nÊ   },\nÊ   <span class=\"fc5\">\"create-collection\"</span> : {\nÊ     <span class=\"fc5\">\"config\"</span>:<span class=\"fc3\">\"_default\"</span>,\nÊ     <span class=\"fc5\">\"router\"</span>: {\nÊ       <span class=\"fc5\">\"name\"</span>:<span class=\"fc3\">\"implicit\"</span>,\nÊ       <span class=\"fc5\">\"field\"</span>:<span class=\"fc3\">\"foo_s\"</span>\nÊ     },\nÊ     <span class=\"fc5\">\"shards\"</span>:<span class=\"fc3\">\"foo,bar,baz\"</span>,\nÊ     <span class=\"fc5\">\"numShards\"</span>: <span class=\"fc6\">3</span>,\nÊ     <span class=\"fc5\">\"tlogReplicas\"</span>:<span class=\"fc6\">1</span>,\nÊ     <span class=\"fc5\">\"pullReplicas\"</span>:<span class=\"fc6\">1</span>,\nÊ     <span class=\"fc5\">\"maxShardsPerNode\"</span>:<span class=\"fc6\">2</span>,\nÊ     <span class=\"fc5\">\"properties\"</span> : {\nÊ       <span class=\"fc5\">\"foobar\"</span>:<span class=\"fc3\">\"bazbam\"</span>\nÊ     }\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 887
  },
  {
    "content": "{\nÊ   \"responseHeader\": {\nÊ       \"status\": 0,\nÊ       \"QTime\": 1234\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 888
  },
  {
    "content": "/admin/collections?action=LISTALIASES",
    "hierarchy": [
      "LISTALIASES: List of all aliases in the cluster"
    ],
    "pageId": 888
  },
  {
    "content": "The LISTALIASES action does not take any parameters.",
    "hierarchy": [
      "LISTALIASES: List of all aliases in the cluster"
    ],
    "pageId": 888
  },
  {
    "content": "The output will contain a list of aliases with the corresponding collection names.",
    "hierarchy": [
      "LISTALIASES: List of all aliases in the cluster",
      "LISTALIASES Response"
    ],
    "pageId": 888
  },
  {
    "content": "List the existing aliases, requesting information as XML from Solr:",
    "hierarchy": [
      "LISTALIASES: List of all aliases in the cluster",
      "Examples using LISTALIASES"
    ],
    "pageId": 888
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=LISTALIASES&wt=xml",
    "hierarchy": [
      "LISTALIASES: List of all aliases in the cluster",
      "Examples using LISTALIASES"
    ],
    "pageId": 888
  },
  {
    "content": "Ê   <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"aliases\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"testalias1\"<span class=\"fc2\">></span></span>collection1<span class=\"fc2\"></str></span>\nÊ       <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"testalias2\"<span class=\"fc2\">></span></span>collection1,collection2<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"properties\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"testalias1\"<span class=\"fc2\">/></span></span>\nÊ       <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"testalias2\"<span class=\"fc2\">></span></span>\nÊ           <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"someKey\"<span class=\"fc2\">></span></span>someValue<span class=\"fc2\"></str></span>\nÊ       <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "LISTALIASES: List of all aliases in the cluster",
      "Examples using LISTALIASES"
    ],
    "pageId": 888
  },
  {
    "content": "The <span class=\"ff1 fs2\">ALIASPROP</span> action modifies the properties (metadata) on an alias. If a key is set with a value that is empty\nit will be removed.",
    "hierarchy": [
      "ALIASPROP: Modify Alias Properties for a Collection"
    ],
    "pageId": 888
  },
  {
    "content": "/admin/collections?action=ALIASPROP&name=name&property.someKey=somevalue",
    "hierarchy": [
    ],
    "pageId": 889
  },
  {
    "content": "name\nThe alias name on which to set properties. This parameter is required.",
    "hierarchy": [
      "ALIASPROP Parameters"
    ],
    "pageId": 889
  },
  {
    "content": "property.*\nThe name of the property to be modified replaces '*', the value for the parameter is passed as the value\nfor the property.",
    "hierarchy": [
      "ALIASPROP Parameters"
    ],
    "pageId": 889
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "ALIASPROP Parameters"
    ],
    "pageId": 889
  },
  {
    "content": "The output will simply be a responseHeader with details of the time it took to process the request. To\nconfirm the creation of the property or properties, you can look in the Solr Admin UI, under the Cloud\nsection and find the <span class=\"ff1 fs0\">aliases.json</span> file or use the LISTALIASES api command.",
    "hierarchy": [
      "ALIASPROP Response"
    ],
    "pageId": 889
  },
  {
    "content": "For an alias named \"testalias2\" and set the value \"someValue\" for a property of \"someKey\" and\n\"otherValue\" for \"otherKey\".",
    "hierarchy": [
      "Examples using ALIASPROP"
    ],
    "pageId": 889
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ALIASPROP&name=testalias2&property.someKey=so\nmeValue&property.otherKey=otherValue&wt=xml",
    "hierarchy": [
      "Examples using ALIASPROP"
    ],
    "pageId": 889
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>122<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Examples using ALIASPROP"
    ],
    "pageId": 889
  },
  {
    "content": "/admin/collections?action=DELETEALIAS&name=name",
    "hierarchy": [
      "DELETEALIAS: Delete a Collection Alias"
    ],
    "pageId": 889
  },
  {
    "content": "name\nThe name of the alias to delete. This parameter is required.",
    "hierarchy": [
      "DELETEALIAS: Delete a Collection Alias",
      "DELETEALIAS Parameters"
    ],
    "pageId": 889
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "DELETEALIAS: Delete a Collection Alias",
      "DELETEALIAS Parameters"
    ],
    "pageId": 889
  },
  {
    "content": "The output will simply be a responseHeader with details of the time it took to process the request. To\nconfirm the removal of the alias, you can look in the Solr Admin UI, under the Cloud section, and find the\naliases.json<span class=\"ff2 fs0\"> file.</span>",
    "hierarchy": [
      "DELETEALIAS Response"
    ],
    "pageId": 890
  },
  {
    "content": "Remove the alias named \"testalias\".",
    "hierarchy": [
      "Examples using DELETEALIAS"
    ],
    "pageId": 890
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETEALIAS&name=testalias&wt=xml",
    "hierarchy": [
      "Examples using DELETEALIAS"
    ],
    "pageId": 890
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>117<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using DELETEALIAS"
    ],
    "pageId": 890
  },
  {
    "content": "/admin/collections?action=DELETE&name=collection",
    "hierarchy": [
      "DELETE: Delete a Collection"
    ],
    "pageId": 890
  },
  {
    "content": "name\nThe name of the collection to delete. This parameter is required.",
    "hierarchy": [
      "DELETE: Delete a Collection",
      "DELETE Parameters"
    ],
    "pageId": 890
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "DELETE: Delete a Collection",
      "DELETE Parameters"
    ],
    "pageId": 890
  },
  {
    "content": "The response will include the status of the request and the cores that were deleted. If the status is anything\nother than \"success\", an error message will explain why the request failed.",
    "hierarchy": [
      "DELETE: Delete a Collection",
      "DELETE Response"
    ],
    "pageId": 890
  },
  {
    "content": "Delete the collection named \"newCollection\".",
    "hierarchy": [
      "DELETE: Delete a Collection",
      "Examples using DELETE"
    ],
    "pageId": 890
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETE&name=newCollection&wt=xml",
    "hierarchy": [
      "DELETE: Delete a Collection",
      "Examples using DELETE"
    ],
    "pageId": 890
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>603<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"success\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"10.0.1.6:8983_solr\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>19<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"10.0.1.4:8983_solr\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>67<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 891
  },
  {
    "content": "Deletes a named replica from the specified collection and shard.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica"
    ],
    "pageId": 891
  },
  {
    "content": "If the corresponding core is up and running the core is unloaded, the entry is removed from the clusterstate,\nand (by default) delete the instanceDir and dataDir. If the node/core is down, the entry is taken off the\nclusterstate and if the core comes up later it is automatically unregistered.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica"
    ],
    "pageId": 891
  },
  {
    "content": "/admin/collections?action=DELETEREPLICA&collection=collection&shard=shard&replica=replica",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica"
    ],
    "pageId": 891
  },
  {
    "content": "collection\nThe name of the collection. This parameter is required.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "shard\nThe name of the shard that includes the replica to be removed. This parameter is required.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "replica\nThe name of the replica to remove.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "If <span class=\"ff1 fs2\">count</span> is used instead, this parameter is not required. Otherwise, this parameter must be supplied.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "count\nThe number of replicas to remove. If the requested number exceeds the number of replicas, no replicas\nwill be deleted. If there is only one replica, it will not be removed.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "If <span class=\"ff1 fs2\">replica</span> is used instead, this parameter is not required. Otherwise, this parameter must be supplied.",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "deleteInstanceDir",
    "hierarchy": [
      "DELETEREPLICA: Delete a Replica",
      "DELETEREPLICA Parameters"
    ],
    "pageId": 891
  },
  {
    "content": "By default Solr will delete the entire instanceDir of the replica that is deleted. Set this to <span class=\"ff2 fs1\">false</span> to prevent\nthe instance directory from being deleted.",
    "hierarchy": [
    ],
    "pageId": 892
  },
  {
    "content": "deleteDataDir\nBy default Solr will delete the dataDir of the replica that is deleted. Set this to <span class=\"ff2 fs1\">false</span> to prevent the data\ndirectory from being deleted.",
    "hierarchy": [
    ],
    "pageId": 892
  },
  {
    "content": "deleteIndex\nBy default Solr will delete the index of the replica that is deleted. Set this to <span class=\"ff2 fs1\">false</span> to prevent the index\ndirectory from being deleted.",
    "hierarchy": [
    ],
    "pageId": 892
  },
  {
    "content": "onlyIfDown\nWhen set to <span class=\"ff2 fs1\">true</span>, no action will be taken if the replica is active. Default <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 892
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
    ],
    "pageId": 892
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETEREPLICA&collection=test2&shard=shard2&r\neplica=core_node3&wt=xml",
    "hierarchy": [
      "Examples using DELETEREPLICA"
    ],
    "pageId": 892
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"responseHeader\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"status\"<span class=\"fc3\">></span></span>0<span class=\"fc3\"></int></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"QTime\"<span class=\"fc3\">></span></span>110<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "Examples using DELETEREPLICA"
    ],
    "pageId": 892
  },
  {
    "content": "Add a replica to a shard in a collection. The node name can be specified if the replica is to be created in a\nspecific node.",
    "hierarchy": [
      "ADDREPLICA: Add Replica"
    ],
    "pageId": 892
  },
  {
    "content": "The API uses the Autoscaling framework to find nodes that can satisfy the disk requirements for the new\nreplica but only when an Autoscaling policy is configured. Refer to <span class=\"link\">Autoscaling Policy and Preferences</span>\nsection for more details.",
    "hierarchy": [
      "ADDREPLICA: Add Replica"
    ],
    "pageId": 892
  },
  {
    "content": "/admin/collections?action=ADDREPLICA&collection=collection&shard=shard&node=nodeName",
    "hierarchy": [
      "ADDREPLICA: Add Replica"
    ],
    "pageId": 892
  },
  {
    "content": "collection\nThe name of the collection where the replica should be created. This parameter is required.",
    "hierarchy": [
      "ADDREPLICA: Add Replica",
      "ADDREPLICA Parameters"
    ],
    "pageId": 892
  },
  {
    "content": "shard",
    "hierarchy": [
      "ADDREPLICA: Add Replica",
      "ADDREPLICA Parameters"
    ],
    "pageId": 892
  },
  {
    "content": "The name of the shard to which replica is to be added.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "If <span class=\"ff2 fs1\">shard</span> is not specified, then <span class=\"ff2 fs1\">_route_</span> must be.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "_route_\nIf the exact shard name is not known, users may pass the <span class=\"ff2 fs1\">_route_</span> value and the system would identify\nthe name of the shard.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "Ignored if the <span class=\"ff2 fs1\">shard</span> parameter is also specified.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "node\nThe name of the node where the replica should be created.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "instanceDir\nThe instanceDir for the core that will be created.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "dataDir\nThe directory in which the core should be created.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "type\nThe type of replica to create. These possible values are allowed:",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "nrt: The NRT type maintains a transaction log and updates its index locally. This is the default and the\nmost commonly used.\n•tlog: The TLOG type maintains a transaction log but only updates its index via replication.\n•pull: The PULL type does not maintain a transaction log and only updates its index via replication.\nThis type is not eligible to become a leader.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "See the section <span class=\"link\">Types of Replicas</span> for more information about replica type options.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "property.name=value\nSet core property <span class=\"code\">name</span> to <span class=\"code\">value</span>. See <span class=\"link\">Defining core.properties</span> for details about supported properties and\nvalues.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "waitForFinalState\nIf <span class=\"ff2 fs1\">true</span>, the request will complete only when all affected replicas become active. The default is <span class=\"ff2 fs1\">false</span>,\nwhich means that the API will return the status of the single action, which may be before the new replica\nis online and active.",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>",
    "hierarchy": [
    ],
    "pageId": 893
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDREPLICA&collection=test2&shard=shard2&node\n=192.167.1.2:8983_solr&wt=xml",
    "hierarchy": [
      "Examples using ADDREPLICA"
    ],
    "pageId": 893
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>3764<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"success\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst></span>\nÊ     <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ       <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>3450<span class=\"fc0\"></int></span>\nÊ     <span class=\"fc0\"></lst></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc0\">></span></span>test2_shard2_replica4<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 894
  },
  {
    "content": "Add, edit or delete a cluster-wide property.",
    "hierarchy": [
      "CLUSTERPROP: Cluster Properties"
    ],
    "pageId": 894
  },
  {
    "content": "/admin/collections?action=CLUSTERPROP&name=propertyName&val=propertyValue",
    "hierarchy": [
      "CLUSTERPROP: Cluster Properties"
    ],
    "pageId": 894
  },
  {
    "content": "name\nThe name of the property. Supported properties names are <span class=\"ff1 fs2\">urlScheme</span> and <span class=\"ff1 fs2\">autoAddReplicas and</span>\nlocation<span class=\"code\">. Other names are rejected with an error.</span>",
    "hierarchy": [
      "CLUSTERPROP: Cluster Properties",
      "CLUSTERPROP Parameters"
    ],
    "pageId": 894
  },
  {
    "content": "val\nThe value of the property. If the value is empty or null, the property is unset.",
    "hierarchy": [
      "CLUSTERPROP: Cluster Properties",
      "CLUSTERPROP Parameters"
    ],
    "pageId": 894
  },
  {
    "content": "The response will include the status of the request and the properties that were updated or removed. If the\nstatus is anything other than \"0\", an error message will explain why the request failed.",
    "hierarchy": [
      "CLUSTERPROP: Cluster Properties",
      "CLUSTERPROP Response"
    ],
    "pageId": 894
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CLUSTERPROP&name=urlScheme&val=https&wt=xml",
    "hierarchy": [
      "CLUSTERPROP: Cluster Properties",
      "Examples using CLUSTERPROP"
    ],
    "pageId": 894
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 895
  },
  {
    "content": "Add, edit or delete a collection property.",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties"
    ],
    "pageId": 895
  },
  {
    "content": "/admin/collections?action=COLLECTIONPROP&name=collectionName&propertyName=propertyName&prope\nrtyValue=propertyValue",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties"
    ],
    "pageId": 895
  },
  {
    "content": "name\nThe name of the collection for which the property would be set.",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties",
      "COLLECTIONPROP Parameters"
    ],
    "pageId": 895
  },
  {
    "content": "propertyName\nThe name of the property.",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties",
      "COLLECTIONPROP Parameters"
    ],
    "pageId": 895
  },
  {
    "content": "propertyValue\nThe value of the property. When not provided, the property is deleted.",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties",
      "COLLECTIONPROP Parameters"
    ],
    "pageId": 895
  },
  {
    "content": "The response will include the status of the request and the properties that were updated or removed. If the\nstatus is anything other than \"0\", an error message will explain why the request failed.",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties",
      "COLLECTIONPROP Response"
    ],
    "pageId": 895
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=COLLECTIONPROP&name=coll&propertyName=foo&val\n=bar&wt=xml",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties",
      "Examples using COLLECTIONPROP"
    ],
    "pageId": 895
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
      "COLLECTIONPROP: Collection Properties",
      "Examples using COLLECTIONPROP"
    ],
    "pageId": 895
  },
  {
    "content": "/admin/collections?action=MIGRATE&collection=name&split.key=key1!&target.collection=target_c",
    "hierarchy": [
      "MIGRATE: Migrate Documents to Another Collection"
    ],
    "pageId": 895
  },
  {
    "content": "ollection&forward.timeout=60",
    "hierarchy": [
    ],
    "pageId": 896
  },
  {
    "content": "The MIGRATE command is used to migrate all documents having a given routing key to another collection.\nThe source collection will continue to have the same data as-is but it will start re-routing write requests to\nthe target collection for the number of seconds specified by the <span class=\"ff1 fs0\">forward.timeout</span> parameter. It is the\nresponsibility of the user to switch to the target collection for reads and writes after the MIGRATE action\ncompletes.",
    "hierarchy": [
    ],
    "pageId": 896
  },
  {
    "content": "The routing key specified by the <span class=\"ff1 fs0\">split.key</span> parameter may span multiple shards on both the source and the\ntarget collections. The migration is performed shard-by-shard in a single thread. One or more temporary\ncollections may be created by this command during the ‘migrate' process but they are cleaned up at the end\nautomatically.",
    "hierarchy": [
    ],
    "pageId": 896
  },
  {
    "content": "This is a long running operation and therefore using the <span class=\"ff1 fs0\">async</span> parameter is highly recommended. If the\nasync<span class=\"ff2 fs1\"> parameter is not specified then the operation is synchronous by default and keeping a large read</span>\ntimeout on the invocation is advised. Even with a large read timeout, the request may still timeout but that\ndoesn't necessarily mean that the operation has failed. Users should check logs, cluster state, source and\ntarget collections before invoking the operation again.",
    "hierarchy": [
    ],
    "pageId": 896
  },
  {
    "content": "This command works only with collections using the compositeId router. The target collection must not\nreceive any writes during the time the MIGRATE command is running otherwise some writes may be lost.",
    "hierarchy": [
    ],
    "pageId": 896
  },
  {
    "content": "Please note that the MIGRATE API does not perform any de-duplication on the documents so if the target\ncollection contains documents with the same uniqueKey as the documents being migrated then the target\ncollection will end up with duplicate documents.",
    "hierarchy": [
    ],
    "pageId": 896
  },
  {
    "content": "collection\nThe name of the source collection from which documents will be split. This parameter is required.",
    "hierarchy": [
      "MIGRATE Parameters"
    ],
    "pageId": 896
  },
  {
    "content": "target.collection\nThe name of the target collection to which documents will be migrated. This parameter is required.",
    "hierarchy": [
      "MIGRATE Parameters"
    ],
    "pageId": 896
  },
  {
    "content": "split.key\nThe routing key prefix. For example, if the uniqueKey of a document is \"a!123\", then you would use\nsplit.key=a!<span class=\"ff2 fs1\">. This parameter is required.</span>",
    "hierarchy": [
      "MIGRATE Parameters"
    ],
    "pageId": 896
  },
  {
    "content": "forward.timeout\nThe timeout, in seconds, until which write requests made to the source collection for the given <span class=\"ff1 fs0\">split.key</span>\nwill be forwarded to the target shard. The default is 60 seconds.",
    "hierarchy": [
      "MIGRATE Parameters"
    ],
    "pageId": 896
  },
  {
    "content": "property.name=value\nSet core property <span class=\"ff4\">name</span> to <span class=\"ff4\">value</span>. See the section <span class=\"link\">Defining core.properties</span> for details on supported\nproperties and values.",
    "hierarchy": [
      "MIGRATE Parameters"
    ],
    "pageId": 896
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "MIGRATE Parameters"
    ],
    "pageId": 896
  },
  {
    "content": "The response will include the status of the request.",
    "hierarchy": [
      "MIGRATE Response"
    ],
    "pageId": 896
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=MIGRATE&collection=test1&split.key=a!&target.\ncollection=test2&wt=xml",
    "hierarchy": [
      "Examples using MIGRATE"
    ],
    "pageId": 897
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>19014<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"success\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"core\"<span class=\"fc2\">></span></span>test2_shard1_0_replica1<span class=\"fc2\"></str></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>BUFFERING<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>2479<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"core\"<span class=\"fc2\">></span></span>split_shard1_0_temp_shard1_0_shard1_replica1<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1002<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>21<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1655<span class=\"fc2\"></int></span>\nÊ     <span class=\"fc2\"></lst></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"core\"<span class=\"fc2\">></span></span>split_shard1_0_temp_shard1_0_shard1_replica2<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></lst></span>\nÊ   <span class=\"fc2\"><lst></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>",
    "hierarchy": [
      "Examples using MIGRATE"
    ],
    "pageId": 897
  },
  {
    "content": "Ê       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>4006<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>17<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>test2_shard1_0_replica1<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>EMPTY_BUFFER<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"192.168.43.52:8983_solr\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>31<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"192.168.43.52:8983_solr\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>31<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>test2_shard1_1_replica1<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>BUFFERING<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1742<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>split_shard1_1_temp_shard1_1_shard1_replica1<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1002<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>",
    "hierarchy": [
    ],
    "pageId": 898
  },
  {
    "content": "Ê     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>15<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1917<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>split_shard1_1_temp_shard1_1_shard1_replica2<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>5007<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>8<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core\"<span class=\"fc1\">></span></span>test2_shard1_1_replica1<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>EMPTY_BUFFER<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"192.168.43.52:8983_solr\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>30<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"192.168.43.52:8983_solr\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>30<span class=\"fc1\"></int></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 899
  },
  {
    "content": "/admin/collections?action=ADDROLE&role=roleName&node=nodeName",
    "hierarchy": [
      "ADDROLE: Add a Role"
    ],
    "pageId": 899
  },
  {
    "content": "Assigns a role to a given node in the cluster. The only supported role is <span class=\"ff1 fs2\">overseer</span>.",
    "hierarchy": [
      "ADDROLE: Add a Role"
    ],
    "pageId": 899
  },
  {
    "content": "Use this command to dedicate a particular node as Overseer. Invoke it multiple times to add more nodes.\nThis is useful in large clusters where an Overseer is likely to get overloaded. If available, one among the list\nof nodes which are assigned the 'overseer' role would become the overseer. The system would assign the\nrole to any other node if none of the designated nodes are up and running.",
    "hierarchy": [
    ],
    "pageId": 900
  },
  {
    "content": "role\nThe name of the role. The only supported role as of now is <span class=\"code\">overseer</span>. This parameter is required.",
    "hierarchy": [
      "ADDROLE Parameters"
    ],
    "pageId": 900
  },
  {
    "content": "node\nThe name of the node that will be assigned the role. It is possible to assign a role even before that node is\nstarted. This parameter is started.",
    "hierarchy": [
      "ADDROLE Parameters"
    ],
    "pageId": 900
  },
  {
    "content": "The response will include the status of the request and the properties that were updated or removed. If the\nstatus is anything other than \"0\", an error message will explain why the request failed.",
    "hierarchy": [
      "ADDROLE Response"
    ],
    "pageId": 900
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDROLE&role=overseer&node=192.167.1.2:8983_s\nolr&wt=xml",
    "hierarchy": [
      "Examples using ADDROLE"
    ],
    "pageId": 900
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using ADDROLE"
    ],
    "pageId": 900
  },
  {
    "content": "Remove an assigned role. This API is used to undo the roles assigned using ADDROLE operation",
    "hierarchy": [
      "REMOVEROLE: Remove Role"
    ],
    "pageId": 900
  },
  {
    "content": "/admin/collections?action=REMOVEROLE&role=roleName&node=nodeName",
    "hierarchy": [
      "REMOVEROLE: Remove Role"
    ],
    "pageId": 900
  },
  {
    "content": "role\nThe name of the role. The only supported role as of now is <span class=\"code\">overseer</span>. This parameter is required.",
    "hierarchy": [
      "REMOVEROLE: Remove Role",
      "REMOVEROLE Parameters"
    ],
    "pageId": 900
  },
  {
    "content": "node\nThe name of the node where the role should be removed.",
    "hierarchy": [
      "REMOVEROLE: Remove Role",
      "REMOVEROLE Parameters"
    ],
    "pageId": 900
  },
  {
    "content": "The response will include the status of the request and the properties that were updated or removed. If the\nstatus is anything other than \"0\", an error message will explain why the request failed.",
    "hierarchy": [
      "REMOVEROLE Response"
    ],
    "pageId": 901
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=REMOVEROLE&role=overseer&node=192.167.1.2:898\n3_solr&wt=xml",
    "hierarchy": [
      "Examples using REMOVEROLE"
    ],
    "pageId": 901
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using REMOVEROLE"
    ],
    "pageId": 901
  },
  {
    "content": "Returns the current status of the overseer, performance statistics of various overseer APIs, and the last 10\nfailures per operation type.",
    "hierarchy": [
      "OVERSEERSTATUS: Overseer Status and Statistics"
    ],
    "pageId": 901
  },
  {
    "content": "/admin/collections?action=OVERSEERSTATUS",
    "hierarchy": [
      "OVERSEERSTATUS: Overseer Status and Statistics"
    ],
    "pageId": 901
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=OVERSEERSTATUS",
    "hierarchy": [
      "OVERSEERSTATUS: Overseer Status and Statistics",
      "Examples using OVERSEERSTATUS"
    ],
    "pageId": 901
  },
  {
    "content": "{\nÊ <span class=\"fc5\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc5\">\"status\"</span>:<span class=\"fc6\">0</span>,\nÊ   <span class=\"fc5\">\"QTime\"</span>:<span class=\"fc6\">33</span>},\nÊ <span class=\"fc5\">\"leader\"</span>:<span class=\"fc4\">\"127.0.1.1:8983_solr\"</span>,\nÊ <span class=\"fc5\">\"overseer_queue_size\"</span>:<span class=\"fc6\">0</span>,\nÊ <span class=\"fc5\">\"overseer_work_queue_size\"</span>:<span class=\"fc6\">0</span>,\nÊ <span class=\"fc5\">\"overseer_collection_queue_size\"</span>:<span class=\"fc6\">2</span>,\nÊ <span class=\"fc5\">\"overseer_operations\"</span>:[\nÊ   <span class=\"fc4\">\"createcollection\"</span>,{\nÊ     <span class=\"fc5\">\"requests\"</span>:<span class=\"fc6\">2</span>,\nÊ     <span class=\"fc5\">\"errors\"</span>:<span class=\"fc6\">0</span>,\nÊ     <span class=\"fc5\">\"avgRequestsPerSecond\"</span>:<span class=\"fc6\">0.7467088842794136</span>,\nÊ     <span class=\"fc5\">\"5minRateRequestsPerSecond\"</span>:<span class=\"fc6\">7.525069023276674</span>,\nÊ     <span class=\"fc5\">\"15minRateRequestsPerSecond\"</span>:<span class=\"fc6\">10.271274280947182</span>,",
    "hierarchy": [
      "OVERSEERSTATUS: Overseer Status and Statistics",
      "Examples using OVERSEERSTATUS"
    ],
    "pageId": 901
  },
  {
    "content": "Ê     <span class=\"fc1\">\"avgTimePerRequest\"</span>:<span class=\"fc2\">0.5050685</span>,\nÊ     <span class=\"fc1\">\"medianRequestTime\"</span>:<span class=\"fc2\">0.5050685</span>,\nÊ     <span class=\"fc1\">\"75thPcRequestTime\"</span>:<span class=\"fc2\">0.519016</span>,\nÊ     <span class=\"fc1\">\"95thPcRequestTime\"</span>:<span class=\"fc2\">0.519016</span>,\nÊ     <span class=\"fc1\">\"99thPcRequestTime\"</span>:<span class=\"fc2\">0.519016</span>,\nÊ     <span class=\"fc1\">\"999thPcRequestTime\"</span>:<span class=\"fc2\">0.519016</span>},\nÊ   <span class=\"fc3\">\"removeshard\"</span>,{\nÊ     <span class=\"fc3\">\"...\"</span>\nÊ }],\nÊ <span class=\"fc1\">\"collection_operations\"</span>:[\nÊ   <span class=\"fc3\">\"splitshard\"</span>,{\nÊ     <span class=\"fc1\">\"requests\"</span>:<span class=\"fc2\">1</span>,\nÊ     <span class=\"fc1\">\"errors\"</span>:<span class=\"fc2\">1</span>,\nÊ     <span class=\"fc1\">\"recent_failures\"</span>:[{\nÊ         <span class=\"fc1\">\"request\"</span>:{\nÊ           <span class=\"fc1\">\"operation\"</span>:<span class=\"fc3\">\"splitshard\"</span>,\nÊ           <span class=\"fc1\">\"shard\"</span>:<span class=\"fc3\">\"shard2\"</span>,\nÊ           <span class=\"fc1\">\"collection\"</span>:<span class=\"fc3\">\"example1\"</span>},\nÊ         <span class=\"fc1\">\"response\"</span>:[\nÊ           <span class=\"fc3\">\"Operation splitshard caused exception:\"</span>,",
    "hierarchy": [
    ],
    "pageId": 902
  },
  {
    "content": "Ê           <span class=\"fc3\">\"exception\"</span>,{\nÊ             <span class=\"fc1\">\"msg\"</span>:<span class=\"fc3\">\"No shard with the specified name exists: shard2\"</span>,\nÊ             <span class=\"fc1\">\"rspCode\"</span>:<span class=\"fc2\">400</span>}]}],\nÊ     <span class=\"fc1\">\"avgRequestsPerSecond\"</span>:<span class=\"fc2\">0.8198143044809885</span>,\nÊ     <span class=\"fc1\">\"5minRateRequestsPerSecond\"</span>:<span class=\"fc2\">8.043840552427673</span>,\nÊ     <span class=\"fc1\">\"15minRateRequestsPerSecond\"</span>:<span class=\"fc2\">10.502079828515368</span>,\nÊ     <span class=\"fc1\">\"avgTimePerRequest\"</span>:<span class=\"fc2\">2952.7164175</span>,\nÊ     <span class=\"fc1\">\"medianRequestTime\"</span>:<span class=\"fc2\">2952.7164175000003</span>,\nÊ     <span class=\"fc1\">\"75thPcRequestTime\"</span>:<span class=\"fc2\">5904.384052</span>,\nÊ     <span class=\"fc1\">\"95thPcRequestTime\"</span>:<span class=\"fc2\">5904.384052</span>,\nÊ     <span class=\"fc1\">\"99thPcRequestTime\"</span>:<span class=\"fc2\">5904.384052</span>,\nÊ     <span class=\"fc1\">\"999thPcRequestTime\"</span>:<span class=\"fc2\">5904.384052</span>},\nÊ   <span class=\"fc3\">\"...\"</span>\nÊ ],\nÊ <span class=\"fc1\">\"overseer_queue\"</span>:[\nÊ   <span class=\"fc3\">\"...\"</span>\nÊ ],\nÊ <span class=\"fc3\">\"...\"</span>\nÊ}",
    "hierarchy": [
    ],
    "pageId": 902
  },
  {
    "content": "Fetch the cluster status including collections, shards, replicas, configuration name as well as collection\naliases and cluster properties.",
    "hierarchy": [
      "CLUSTERSTATUS: Cluster Status"
    ],
    "pageId": 902
  },
  {
    "content": "/admin/collections?action=CLUSTERSTATUS",
    "hierarchy": [
      "CLUSTERSTATUS: Cluster Status"
    ],
    "pageId": 902
  },
  {
    "content": "collection\nThe collection name for which information is requested. If omitted, information on all collections in the\ncluster will be returned.",
    "hierarchy": [
    ],
    "pageId": 903
  },
  {
    "content": "shard\nThe shard(s) for which information is requested. Multiple shard names can be specified as a comma-\nseparated list.",
    "hierarchy": [
    ],
    "pageId": 903
  },
  {
    "content": "_route_\nThis can be used if you need the details of the shard where a particular document belongs to and you\ndon't know which shard it falls under.",
    "hierarchy": [
    ],
    "pageId": 903
  },
  {
    "content": "The response will include the status of the request and the status of the cluster.",
    "hierarchy": [
      "CLUSTERSTATUS Response"
    ],
    "pageId": 903
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CLUSTERSTATUS",
    "hierarchy": [
      "Examples using CLUSTERSTATUS"
    ],
    "pageId": 903
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>:<span class=\"fc3\">333</span>},\nÊ <span class=\"fc2\">\"cluster\"</span>:{\nÊ   <span class=\"fc2\">\"collections\"</span>:{\nÊ     <span class=\"fc2\">\"collection1\"</span>:{\nÊ       <span class=\"fc2\">\"shards\"</span>:{\nÊ         <span class=\"fc2\">\"shard1\"</span>:{\nÊ           <span class=\"fc2\">\"range\"</span>:<span class=\"fc4\">\"80000000-ffffffff\"</span>,\nÊ           <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ           <span class=\"fc2\">\"replicas\"</span>:{\nÊ             <span class=\"fc2\">\"core_node1\"</span>:{\nÊ               <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ               <span class=\"fc2\">\"core\"</span>:<span class=\"fc4\">\"collection1\"</span>,\nÊ               <span class=\"fc2\">\"node_name\"</span>:<span class=\"fc4\">\"127.0.1.1:8983_solr\"</span>,\nÊ               <span class=\"fc2\">\"base_url\"</span>:<span class=\"fc4\">\"http://127.0.1.1:8983/solr\"</span>,\nÊ               <span class=\"fc2\">\"leader\"</span>:<span class=\"fc4\">\"true\"</span>},\nÊ             <span class=\"fc2\">\"core_node3\"</span>:{\nÊ               <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ               <span class=\"fc2\">\"core\"</span>:<span class=\"fc4\">\"collection1\"</span>,\nÊ               <span class=\"fc2\">\"node_name\"</span>:<span class=\"fc4\">\"127.0.1.1:8900_solr\"</span>,\nÊ               <span class=\"fc2\">\"base_url\"</span>:<span class=\"fc4\">\"http://127.0.1.1:8900/solr\"</span>}}},\nÊ         <span class=\"fc2\">\"shard2\"</span>:{\nÊ           <span class=\"fc2\">\"range\"</span>:<span class=\"fc4\">\"0-7fffffff\"</span>,\nÊ           <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ           <span class=\"fc2\">\"replicas\"</span>:{",
    "hierarchy": [
      "Examples using CLUSTERSTATUS"
    ],
    "pageId": 903
  },
  {
    "content": "Ê             <span class=\"fc1\">\"core_node2\"</span>:{\nÊ               <span class=\"fc1\">\"state\"</span>:<span class=\"fc2\">\"active\"</span>,\nÊ               <span class=\"fc1\">\"core\"</span>:<span class=\"fc2\">\"collection1\"</span>,\nÊ               <span class=\"fc1\">\"node_name\"</span>:<span class=\"fc2\">\"127.0.1.1:7574_solr\"</span>,\nÊ               <span class=\"fc1\">\"base_url\"</span>:<span class=\"fc2\">\"http://127.0.1.1:7574/solr\"</span>,\nÊ               <span class=\"fc1\">\"leader\"</span>:<span class=\"fc2\">\"true\"</span>},\nÊ             <span class=\"fc1\">\"core_node4\"</span>:{\nÊ               <span class=\"fc1\">\"state\"</span>:<span class=\"fc2\">\"active\"</span>,\nÊ               <span class=\"fc1\">\"core\"</span>:<span class=\"fc2\">\"collection1\"</span>,\nÊ               <span class=\"fc1\">\"node_name\"</span>:<span class=\"fc2\">\"127.0.1.1:7500_solr\"</span>,\nÊ               <span class=\"fc1\">\"base_url\"</span>:<span class=\"fc2\">\"http://127.0.1.1:7500/solr\"</span>}}}},\nÊ       <span class=\"fc1\">\"maxShardsPerNode\"</span>:<span class=\"fc2\">\"1\"</span>,\nÊ       <span class=\"fc1\">\"router\"</span>:{<span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"compositeId\"</span>},\nÊ       <span class=\"fc1\">\"replicationFactor\"</span>:<span class=\"fc2\">\"1\"</span>,\nÊ       <span class=\"fc1\">\"znodeVersion\"</span>: <span class=\"fc3\">11</span>,\nÊ       <span class=\"fc1\">\"autoCreated\"</span>:<span class=\"fc2\">\"true\"</span>,\nÊ       <span class=\"fc1\">\"configName\"</span> : <span class=\"fc2\">\"my_config\"</span>,\nÊ       <span class=\"fc1\">\"aliases\"</span>:[<span class=\"fc2\">\"both_collections\"</span>]\nÊ     },\nÊ     <span class=\"fc1\">\"collection2\"</span>:{\nÊ       <span class=\"fc2\">\"...\"</span>\nÊ     }\nÊ   },\nÊ   <span class=\"fc1\">\"aliases\"</span>:{ <span class=\"fc1\">\"both_collections\"</span>:<span class=\"fc2\">\"collection1,collection2\"</span> },\nÊ   <span class=\"fc1\">\"roles\"</span>:{\nÊ     <span class=\"fc1\">\"overseer\"</span>:[\nÊ       <span class=\"fc2\">\"127.0.1.1:8983_solr\"</span>,\nÊ       <span class=\"fc2\">\"127.0.1.1:7574_solr\"</span>]\nÊ   },\nÊ   <span class=\"fc1\">\"live_nodes\"</span>:[\nÊ     <span class=\"fc2\">\"127.0.1.1:7574_solr\"</span>,\nÊ     <span class=\"fc2\">\"127.0.1.1:7500_solr\"</span>,\nÊ     <span class=\"fc2\">\"127.0.1.1:8983_solr\"</span>,\nÊ     <span class=\"fc2\">\"127.0.1.1:8900_solr\"</span>]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 904
  },
  {
    "content": "Request the status and response of an already submitted <span class=\"link\">Asynchronous Collection API</span> (below) call. This call\nis also used to clear up the stored statuses.",
    "hierarchy": [
      "REQUESTSTATUS: Request Status of an Async Call"
    ],
    "pageId": 904
  },
  {
    "content": "/admin/collections?action=REQUESTSTATUS&requestid=request-id",
    "hierarchy": [
      "REQUESTSTATUS: Request Status of an Async Call"
    ],
    "pageId": 904
  },
  {
    "content": "requestid\nThe user defined request ID for the request. This can be used to track the status of the submitted\nasynchronous task. This parameter is required.",
    "hierarchy": [
      "REQUESTSTATUS: Request Status of an Async Call",
      "REQUESTSTATUS Parameters"
    ],
    "pageId": 904
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=REQUESTSTATUS&requestid=1000&wt=xml",
    "hierarchy": [
      "Examples using REQUESTSTATUS"
    ],
    "pageId": 905
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"state\"<span class=\"fc2\">></span></span>completed<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"msg\"<span class=\"fc2\">></span></span>found 1000 in completed tasks<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using REQUESTSTATUS"
    ],
    "pageId": 905
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=REQUESTSTATUS&requestid=1004&wt=xml",
    "hierarchy": [
      "Examples using REQUESTSTATUS"
    ],
    "pageId": 905
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"state\"<span class=\"fc2\">></span></span>notfound<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"msg\"<span class=\"fc2\">></span></span>Did not find taskid [1004] in any tasks queue<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using REQUESTSTATUS"
    ],
    "pageId": 905
  },
  {
    "content": "Deletes the stored response of an already failed or completed <span class=\"link\">Asynchronous Collection API</span> call.",
    "hierarchy": [
      "DELETESTATUS: Delete Status"
    ],
    "pageId": 905
  },
  {
    "content": "/admin/collections?action=DELETESTATUS&requestid=request-id",
    "hierarchy": [
      "DELETESTATUS: Delete Status"
    ],
    "pageId": 905
  },
  {
    "content": "requestid\nThe request ID of the asynchronous call whose stored response should be cleared.",
    "hierarchy": [
      "DELETESTATUS: Delete Status",
      "DELETESTATUS Parameters"
    ],
    "pageId": 905
  },
  {
    "content": "flush",
    "hierarchy": [
      "DELETESTATUS: Delete Status",
      "DELETESTATUS Parameters"
    ],
    "pageId": 905
  },
  {
    "content": "Set to <span class=\"ff2 fs1\">true</span> to clear all stored completed and failed async request responses.",
    "hierarchy": [
    ],
    "pageId": 906
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETESTATUS&requestid=foo&wt=xml",
    "hierarchy": [
      "Examples using DELETESTATUS"
    ],
    "pageId": 906
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>successfully removed stored response for [foo]<span class=\"fc2\"></str></span>",
    "hierarchy": [
      "Examples using DELETESTATUS"
    ],
    "pageId": 906
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETESTATUS&requestid=bar&wt=xml",
    "hierarchy": [
      "Examples using DELETESTATUS"
    ],
    "pageId": 906
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>[bar] not found in stored responses<span class=\"fc2\"></str></span>",
    "hierarchy": [
      "Examples using DELETESTATUS"
    ],
    "pageId": 906
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETESTATUS&flush=true&wt=xml",
    "hierarchy": [
      "Examples using DELETESTATUS"
    ],
    "pageId": 906
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>1<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>\nÊ <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span> successfully cleared stored collection api responses <span class=\"fc2\"></str></span>",
    "hierarchy": [
      "Examples using DELETESTATUS"
    ],
    "pageId": 906
  },
  {
    "content": "Fetch the names of the collections in the cluster.",
    "hierarchy": [
      "LIST: List Collections"
    ],
    "pageId": 907
  },
  {
    "content": "/admin/collections?action=LIST",
    "hierarchy": [
      "LIST: List Collections"
    ],
    "pageId": 907
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=LIST",
    "hierarchy": [
      "LIST: List Collections",
      "Examples using LIST"
    ],
    "pageId": 907
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>:<span class=\"fc3\">2011</span>},\nÊ <span class=\"fc2\">\"collections\"</span>:[<span class=\"fc4\">\"collection1\"</span>,\nÊ   <span class=\"fc4\">\"example1\"</span>,\nÊ   <span class=\"fc4\">\"example2\"</span>]}",
    "hierarchy": [
      "LIST: List Collections",
      "Examples using LIST"
    ],
    "pageId": 907
  },
  {
    "content": "Assign an arbitrary property to a particular replica and give it the value specified. If the property already\nexists, it will be overwritten with the new value.",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property"
    ],
    "pageId": 907
  },
  {
    "content": "/admin/collections?action=ADDREPLICAPROP&collection=collectionName&shard=shardName&replica=r\neplicaName&property=propertyName&property.value=value",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property"
    ],
    "pageId": 907
  },
  {
    "content": "collection\nThe name of the collection the replica belongs to. This parameter is required.",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "shard\nThe name of the shard the replica belongs to. This parameter is required.",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "replica\nThe replica, e.g., <span class=\"code\">core_node1</span>. This parameter is required.",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "property\nThe name of the property to add. This property is required.",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "This will have the literal <span class=\"code\">property.</span> prepended to distinguish it from system-maintained properties. So\nthese two forms are equivalent:",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "property=special",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "and",
    "hierarchy": [
      "ADDREPLICAPROP: Add Replica Property",
      "ADDREPLICAPROP Parameters"
    ],
    "pageId": 907
  },
  {
    "content": "property=property.special",
    "hierarchy": [
    ],
    "pageId": 908
  },
  {
    "content": "property.value\nThe value to assign to the property. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 908
  },
  {
    "content": "shardUnique\nIf <span class=\"ff1 fs0\">true</span>, then setting this property in one replica will remove the property from all other replicas in that\nshard. The default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 908
  },
  {
    "content": "There is one pre-defined property <span class=\"ff1 fs0\">preferredLeader</span> for which <span class=\"ff1 fs0\">shardUnique</span> is forced to <span class=\"ff1 fs0\">true</span> and an error\nreturned if <span class=\"ff1 fs0\">shardUnique</span> is explicitly set to <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 908
  },
  {
    "content": "PreferredLeader<span class=\"ff2 fs1\"> is a boolean property. Any value assigned that is not equal (case insensitive) to </span>true\nwill be interpreted as <span class=\"ff1 fs0\">false</span> for <span class=\"ff1 fs0\">preferredLeader</span>.",
    "hierarchy": [
    ],
    "pageId": 908
  },
  {
    "content": "The response will include the status of the request. If the status is anything other than \"0\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "ADDREPLICAPROP Response"
    ],
    "pageId": 908
  },
  {
    "content": "This command would set the \"preferredLeader\" property (<span class=\"ff1 fs0\">property.preferredLeader</span>) to \"true\" on\n\"core_node1\", and remove that property from any other replica in the shard.",
    "hierarchy": [
      "Examples using ADDREPLICAPROP"
    ],
    "pageId": 908
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDREPLICAPROP&shard=shard1&collection=collec\ntion1&replica=core_node1&property=preferredLeader&property.value=true&wt=xml",
    "hierarchy": [
      "Examples using ADDREPLICAPROP"
    ],
    "pageId": 908
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>46<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Examples using ADDREPLICAPROP"
    ],
    "pageId": 908
  },
  {
    "content": "This pair of commands will set the \"testprop\" property (<span class=\"ff1 fs0\">property.testprop</span>) to 'value1' and 'value2'\nrespectively for two nodes in the same shard.",
    "hierarchy": [
      "Examples using ADDREPLICAPROP"
    ],
    "pageId": 908
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDREPLICAPROP&shard=shard1&collection=collec\ntion1&replica=core_node1&property=testprop&property.value=value1",
    "hierarchy": [
      "Examples using ADDREPLICAPROP"
    ],
    "pageId": 908
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDREPLICAPROP&shard=shard1&collection=collec\ntion1&replica=core_node3&property=property.testprop&property.value=value2",
    "hierarchy": [
      "Examples using ADDREPLICAPROP"
    ],
    "pageId": 908
  },
  {
    "content": "This pair of commands would result in \"core_node_3\" having the \"testprop\" property (<span class=\"code\">property.testprop</span>)\nvalue set because the second command specifies <span class=\"code\">shardUnique=true</span>, which would cause the property to be\nremoved from \"core_node_1\".",
    "hierarchy": [
    ],
    "pageId": 909
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDREPLICAPROP&shard=shard1&collection=collec\ntion1&replica=core_node1&property=testprop&property.value=value1",
    "hierarchy": [
    ],
    "pageId": 909
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=ADDREPLICAPROP&shard=shard1&collection=collec\ntion1&replica=core_node3&property=testprop&property.value=value2&shardUnique=true",
    "hierarchy": [
    ],
    "pageId": 909
  },
  {
    "content": "Deletes an arbitrary property from a particular replica.",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property"
    ],
    "pageId": 909
  },
  {
    "content": "/admin/collections?action=DELETEREPLICAPROP&collection=collectionName&shard=shardName&replic\na=replicaName&property=propertyName",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property"
    ],
    "pageId": 909
  },
  {
    "content": "collection\nThe name of the collection the replica belongs to. This parameter is required.",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "shard\nThe name of the shard the replica belongs to. This parameter is required.",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "replica\nThe replica, e.g., <span class=\"code\">core_node1</span>. This parameter is required.",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "property\nThe property to add. This will have the literal <span class=\"code\">property.</span> prepended to distinguish it from system-\nmaintained properties. So these two forms are equivalent:",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "property=special",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "and",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "property=property.special",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Parameters"
    ],
    "pageId": 909
  },
  {
    "content": "The response will include the status of the request. If the status is anything other than \"0\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "DELETEREPLICAPROP Response"
    ],
    "pageId": 909
  },
  {
    "content": "This command would delete the preferredLeader (<span class=\"code\">property.preferredLeader</span>) from core_node1.",
    "hierarchy": [
      "DELETEREPLICAPROP: Delete Replica Property",
      "Examples using DELETEREPLICAPROP"
    ],
    "pageId": 909
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=DELETEREPLICAPROP&shard=shard1&collection=col\nlection1&replica=core_node1&property=preferredLeader&wt=xml",
    "hierarchy": [
    ],
    "pageId": 910
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>9<span class=\"fc1\"></int></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 910
  },
  {
    "content": "/admin/collections?action=BALANCESHARDUNIQUE&collection=collectionName&property=propertyName",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes"
    ],
    "pageId": 910
  },
  {
    "content": "Insures that a particular property is distributed evenly amongst the physical nodes that make up a\ncollection. If the property already exists on a replica, every effort is made to leave it there. If the property is\nnot<span class=\"code\"> on any replica on a shard, one is chosen and the property is added.</span>",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes"
    ],
    "pageId": 910
  },
  {
    "content": "collection\nThe name of the collection to balance the property in. This parameter is required.",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes",
      "BALANCESHARDUNIQUE Parameters"
    ],
    "pageId": 910
  },
  {
    "content": "property\nThe property to balance. The literal <span class=\"ff1 fs2\">property.</span> is prepended to this property if not specified explicitly. This\nparameter is required.",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes",
      "BALANCESHARDUNIQUE Parameters"
    ],
    "pageId": 910
  },
  {
    "content": "onlyactivenodes\nDefaults to <span class=\"ff1 fs2\">true</span>. Normally, the property is instantiated on active nodes only. If this parameter is specified\nas <span class=\"ff1 fs2\">false</span>, then inactive nodes are also included for distribution.",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes",
      "BALANCESHARDUNIQUE Parameters"
    ],
    "pageId": 910
  },
  {
    "content": "shardUnique\nSomething of a safety valve. There is one pre-defined property (<span class=\"ff1 fs2\">preferredLeader</span>) that defaults this value\nto <span class=\"ff1 fs2\">true</span>. For all other properties that are balanced, this must be set to <span class=\"ff1 fs2\">true</span> or an error message will be\nreturned.",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes",
      "BALANCESHARDUNIQUE Parameters"
    ],
    "pageId": 910
  },
  {
    "content": "The response will include the status of the request. If the status is anything other than \"0\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes",
      "BALANCESHARDUNIQUE Response"
    ],
    "pageId": 910
  },
  {
    "content": "Either of these commands would put the \"preferredLeader\" property on one replica in every shard in the\n\"collection1\" collection.",
    "hierarchy": [
      "BALANCESHARDUNIQUE: Balance a Property Across Nodes",
      "Examples using BALANCESHARDUNIQUE"
    ],
    "pageId": 910
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=BALANCESHARDUNIQUE&collection=collection1&pro\nperty=preferredLeader&wt=xml",
    "hierarchy": [
    ],
    "pageId": 911
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=BALANCESHARDUNIQUE&collection=collection1&pro\nperty=property.preferredLeader&wt=xml",
    "hierarchy": [
    ],
    "pageId": 911
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>9<span class=\"fc1\"></int></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 911
  },
  {
    "content": "Examining the clusterstate after issuing this call should show exactly one replica in each shard that has this\nproperty.",
    "hierarchy": [
    ],
    "pageId": 911
  },
  {
    "content": "Reassigns leaders in a collection according to the preferredLeader property across active nodes.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders"
    ],
    "pageId": 911
  },
  {
    "content": "/admin/collections?action=REBALANCELEADERS&collection=collectionName",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders"
    ],
    "pageId": 911
  },
  {
    "content": "Leaders are assigned in a collection according to the <span class=\"ff1 fs2\">preferredLeader</span> property on active nodes. This\ncommand should be run after the preferredLeader property has been assigned via the\nBALANCESHARDUNIQUE or ADDREPLICAPROP commands.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders"
    ],
    "pageId": 911
  },
  {
    "content": "It is not <span class=\"ff5\">required</span> that all shards in a collection have a <span class=\"ff1 fs2\">preferredLeader</span> property.\nRebalancing will only attempt to reassign leadership to those replicas that have the\npreferredLeader<span class=\"code\"> property set to </span>true<span class=\"code\"> <span class=\"ff5\">and</span> are not currently the shard leader <span class=\"ff5\">and</span> are</span>\ncurrently active.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders"
    ],
    "pageId": 911
  },
  {
    "content": "collection\nThe name of the collection to rebalance <span class=\"ff1 fs2\">preferredLeaders</span> on. This parameter is required.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders",
      "REBALANCELEADERS Parameters"
    ],
    "pageId": 911
  },
  {
    "content": "maxAtOnce\nThe maximum number of reassignments to have queue up at once. Values <=0 are use the default value\nInteger.MAX_VALUE.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders",
      "REBALANCELEADERS Parameters"
    ],
    "pageId": 911
  },
  {
    "content": "When this number is reached, the process waits for one or more leaders to be successfully assigned\nbefore adding more to the queue.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders",
      "REBALANCELEADERS Parameters"
    ],
    "pageId": 911
  },
  {
    "content": "maxWaitSeconds\nDefaults to <span class=\"ff1 fs2\">60</span>. This is the timeout value when waiting for leaders to be reassigned. If <span class=\"ff1 fs2\">maxAtOnce</span> is less\nthan the number of reassignments that will take place, this is the maximum interval that any <span class=\"ff5\">single</span> wait\nfor at least one reassignment.",
    "hierarchy": [
      "REBALANCELEADERS: Rebalance Leaders",
      "REBALANCELEADERS Parameters"
    ],
    "pageId": 911
  },
  {
    "content": "For example, if 10 reassignments are to take place and <span class=\"ff2 fs1\">maxAtOnce</span> is <span class=\"ff2 fs1\">1</span> and <span class=\"ff2 fs1\">maxWaitSeconds</span> is <span class=\"ff2 fs1\">60</span>, the\nupper bound on the time that the command may wait is 10 minutes.",
    "hierarchy": [
    ],
    "pageId": 912
  },
  {
    "content": "The response will include the status of the request. If the status is anything other than \"0\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "REBALANCELEADERS Response"
    ],
    "pageId": 912
  },
  {
    "content": "Either of these commands would cause all the active replicas that had the <span class=\"ff2 fs1\">preferredLeader</span> property set\nand were <span class=\"ff4\">not</span> already the preferred leader to become leaders.",
    "hierarchy": [
      "Examples using REBALANCELEADERS"
    ],
    "pageId": 912
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=REBALANCELEADERS&collection=collection1&wt=xm\nl\nhttp://localhost:8983/solr/admin/collections?action=REBALANCELEADERS&collection=collection1&maxAt\nOnce=5&maxWaitSeconds=30&wt=xml",
    "hierarchy": [
      "Examples using REBALANCELEADERS"
    ],
    "pageId": 912
  },
  {
    "content": "In this example, two replicas in the \"alreadyLeaders\" section already had the leader assigned to the same\nnode as the <span class=\"ff2 fs1\">preferredLeader</span> property so no action was taken.",
    "hierarchy": [
      "Examples using REBALANCELEADERS"
    ],
    "pageId": 912
  },
  {
    "content": "The replica in the \"inactivePreferreds\" section had the <span class=\"ff2 fs1\">preferredLeader</span> property set but the node was\ndown and no action was taken. The three nodes in the \"successes\" section were made leaders because they\nhad the <span class=\"ff2 fs1\">preferredLeader</span> property set but were not leaders and they were active.",
    "hierarchy": [
      "Examples using REBALANCELEADERS"
    ],
    "pageId": 912
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>123<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"alreadyLeaders\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core_node1\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>success<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"msg\"<span class=\"fc0\">></span></span>Already leader<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"nodeName\"<span class=\"fc0\">></span></span>192.168.1.167:7400_solr<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core_node17\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>success<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"msg\"<span class=\"fc0\">></span></span>Already leader<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"nodeName\"<span class=\"fc0\">></span></span>192.168.1.167:7600_solr<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"inactivePreferreds\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"core_node4\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>skipped<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"msg\"<span class=\"fc0\">></span></span>Node is a referredLeader, but it's inactive. Skipping<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"nodeName\"<span class=\"fc0\">></span></span>192.168.1.167:7500_solr<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"successes\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"_collection1_shard3_replica1\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>success<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"msg\"<span class=\"fc0\">></span></span>\nÊ       Assigned 'Collection: 'collection1', Shard: 'shard3', Core:\n'collection1_shard3_replica1', BaseUrl:\nÊ       'http://192.168.1.167:8983/solr'' to be leader\nÊ     <span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"_collection1_shard5_replica3\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>success<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"msg\"<span class=\"fc0\">></span></span>\nÊ       Assigned 'Collection: 'collection1', Shard: 'shard5', Core:\n'collection1_shard5_replica3', BaseUrl:\nÊ       'http://192.168.1.167:7200/solr'' to be leader\nÊ     <span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ   <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"_collection1_shard4_replica2\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>success<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"msg\"<span class=\"fc0\">></span></span>\nÊ       Assigned 'Collection: 'collection1', Shard: 'shard4', Core:\n'collection1_shard4_replica2', BaseUrl:\nÊ       'http://192.168.1.167:7300/solr'' to be leader\nÊ     <span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 913
  },
  {
    "content": "Examining the clusterstate after issuing this call should show that every live node that has the\npreferredLeader<span class=\"ff1 fs0\"> property should also have the \"leader\" property set to <span class=\"code\">true</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 914
  },
  {
    "content": "In the unlikely event of a shard losing its leader, this command can be invoked to force the election of a new\nleader.",
    "hierarchy": [
      "FORCELEADER: Force Shard Leader"
    ],
    "pageId": 914
  },
  {
    "content": "/admin/collections?action=FORCELEADER&collection=<collectionName>&shard=<shardName>",
    "hierarchy": [
      "FORCELEADER: Force Shard Leader"
    ],
    "pageId": 914
  },
  {
    "content": "collection\nThe name of the collection. This parameter is required.",
    "hierarchy": [
      "FORCELEADER: Force Shard Leader",
      "FORCELEADER Parameters"
    ],
    "pageId": 914
  },
  {
    "content": "shard\nThe name of the shard where leader election should occur. This parameter is required.",
    "hierarchy": [
      "FORCELEADER: Force Shard Leader",
      "FORCELEADER Parameters"
    ],
    "pageId": 914
  },
  {
    "content": "This is an expert level command, and should be invoked only when regular leader election\nis not working. This may potentially lead to loss of data in the event that the new leader\ndoesn't have certain updates, possibly recent ones, which were acknowledged by the old\nleader before going down.",
    "hierarchy": [
      "FORCELEADER: Force Shard Leader",
      "FORCELEADER Parameters"
    ],
    "pageId": 914
  },
  {
    "content": "A expert level utility API to move a collection from shared <span class=\"ff2 fs1\">clusterstate.json</span> ZooKeeper node (created with\nstateFormat=1<span class=\"ff1 fs0\">, the default in all Solr releases prior to 5.0) to the per-collection </span>state.json<span class=\"ff1 fs0\"> stored in</span>\nZooKeeper (created with <span class=\"ff2 fs1\">stateFormat=2</span>, the current default) seamlessly without any application down-time.",
    "hierarchy": [
      "MIGRATESTATEFORMAT: Migrate Cluster State"
    ],
    "pageId": 914
  },
  {
    "content": "/admin/collections?action=MIGRATESTATEFORMAT&collection=<collection_name>",
    "hierarchy": [
      "MIGRATESTATEFORMAT: Migrate Cluster State"
    ],
    "pageId": 914
  },
  {
    "content": "collection\nThe name of the collection to be migrated from <span class=\"ff2 fs1\">clusterstate.json</span> to its own <span class=\"ff2 fs1\">state.json</span> ZooKeeper\nnode. This parameter is required.",
    "hierarchy": [
      "MIGRATESTATEFORMAT: Migrate Cluster State",
      "MIGRATESTATEFORMAT Parameters"
    ],
    "pageId": 914
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "MIGRATESTATEFORMAT: Migrate Cluster State",
      "MIGRATESTATEFORMAT Parameters"
    ],
    "pageId": 914
  },
  {
    "content": "This API is useful in migrating any collections created prior to Solr 5.0 to the more scalable cluster state\nformat now used by default. If a collection was created in any Solr 5.x version or higher, then executing this\ncommand is not necessary.",
    "hierarchy": [
      "MIGRATESTATEFORMAT: Migrate Cluster State",
      "MIGRATESTATEFORMAT Parameters"
    ],
    "pageId": 914
  },
  {
    "content": "Backs up Solr collections and associated configurations to a shared filesystem - for example a Network File\nSystem.",
    "hierarchy": [
      "BACKUP: Backup Collection"
    ],
    "pageId": 914
  },
  {
    "content": "/admin/collections?action=BACKUP&name=myBackupName&collection=myCollectionName&location=/pat\nh/to/my/shared/drive",
    "hierarchy": [
      "BACKUP: Backup Collection"
    ],
    "pageId": 914
  },
  {
    "content": "The BACKUP command will backup Solr indexes and configurations for a specified collection. The BACKUP\ncommand takes one copy from each shard for the indexes. For configurations, it backs up the configSet that\nwas associated with the collection and metadata.",
    "hierarchy": [
    ],
    "pageId": 915
  },
  {
    "content": "collection\nThe name of the collection to be backed up. This parameter is required.",
    "hierarchy": [
      "BACKUP Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "location\nThe location on a shared drive for the backup command to write to. Alternately it can be set as a <span class=\"link\">cluster</span>\nproperty<span class=\"fc0\">.</span>",
    "hierarchy": [
      "BACKUP Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "BACKUP Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "repository\nThe name of a repository to be used for the backup. If no repository is specified then the local filesystem\nrepository will be used automatically.",
    "hierarchy": [
      "BACKUP Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "Restores Solr indexes and associated configurations.",
    "hierarchy": [
      "RESTORE: Restore Collection"
    ],
    "pageId": 915
  },
  {
    "content": "/admin/collections?action=RESTORE&name=myBackupName&location=/path/to/my/shared/drive&collec\ntion=myRestoredCollectionName",
    "hierarchy": [
      "RESTORE: Restore Collection"
    ],
    "pageId": 915
  },
  {
    "content": "The RESTORE operation will create a collection with the specified name in the collection parameter. You\ncannot restore into the same collection the backup was taken from. Also the target collection should not be\npresent at the time the API is called as Solr will create it for you.",
    "hierarchy": [
      "RESTORE: Restore Collection"
    ],
    "pageId": 915
  },
  {
    "content": "The collection created will be have the same number of shards and replicas as the original collection,\npreserving routing information, etc. Optionally, you can override some parameters documented below.",
    "hierarchy": [
      "RESTORE: Restore Collection"
    ],
    "pageId": 915
  },
  {
    "content": "While restoring, if a configSet with the same name exists in ZooKeeper then Solr will reuse that, or else it will\nupload the backed up configSet in ZooKeeper and use that.",
    "hierarchy": [
      "RESTORE: Restore Collection"
    ],
    "pageId": 915
  },
  {
    "content": "You can use the collection <span class=\"link\">CREATEALIAS</span> command to make sure clients don't need to change the endpoint\nto query or index against the newly restored collection.",
    "hierarchy": [
      "RESTORE: Restore Collection"
    ],
    "pageId": 915
  },
  {
    "content": "collection\nThe collection where the indexes will be restored into. This parameter is required.",
    "hierarchy": [
      "RESTORE: Restore Collection",
      "RESTORE Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "location\nThe location on a shared drive for the RESTORE command to read from. Alternately it can be set as a\ncluster property<span class=\"fc0\">.</span>",
    "hierarchy": [
      "RESTORE: Restore Collection",
      "RESTORE Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "RESTORE: Restore Collection",
      "RESTORE Parameters"
    ],
    "pageId": 915
  },
  {
    "content": "repository\nThe name of a repository to be used for the backup. If no repository is specified then the local filesystem\nrepository will be used automatically.",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "Additionally, there are several parameters that may have been set on the original collection that can be\noverridden when restoring the backup:",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "collection.configName\nDefines the name of the configurations to use for this collection. These must already be stored in\nZooKeeper. If not provided, Solr will default to the collection name as the configuration name.",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "replicationFactor\nThe number of replicas to be created for each shard.",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "maxShardsPerNode\nWhen creating collections, the shards and/or replicas are spread across all available (i.e., live) nodes, and\ntwo replicas of the same shard will never be on the same node.",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "If a node is not live when the CREATE operation is called, it will not get any parts of the new collection,\nwhich could lead to too many replicas being created on a single live node. Defining <span class=\"ff1 fs0\">maxShardsPerNode</span>\nsets a limit on the number of replicas CREATE will spread to each node. If the entire collection can not be\nfit into the live nodes, no collection will be created at all.",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "autoAddReplicas\nWhen set to <span class=\"ff1 fs0\">true</span>, enables auto addition of replicas on shared file systems. See the section <span class=\"link\">Automatically</span>\nAdd Replicas in SolrCloud<span class=\"fc0\"> for more details on settings and overrides.</span>",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "property.name=value\nSet core property <span class=\"ff4\">name</span> to <span class=\"ff4\">value</span>. See the section <span class=\"link\">Defining core.properties</span> for details on supported\nproperties and values.",
    "hierarchy": [
    ],
    "pageId": 916
  },
  {
    "content": "Deletes all replicas of all collections in that node. Please note that the node itself will remain as a live node\nafter this operation.",
    "hierarchy": [
      "DELETENODE: Delete Replicas in a Node"
    ],
    "pageId": 916
  },
  {
    "content": "/admin/collections?action=DELETENODE&node=nodeName",
    "hierarchy": [
      "DELETENODE: Delete Replicas in a Node"
    ],
    "pageId": 916
  },
  {
    "content": "node\nThe node to be removed. This parameter is required.",
    "hierarchy": [
      "DELETENODE: Delete Replicas in a Node",
      "DELETENODE Parameters"
    ],
    "pageId": 916
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "DELETENODE: Delete Replicas in a Node",
      "DELETENODE Parameters"
    ],
    "pageId": 916
  },
  {
    "content": "This command recreates replicas in one node (the source) to another node(s) (the target). After each replica\nis copied, the replicas in the source node are deleted.",
    "hierarchy": [
      "REPLACENODE: Move All Replicas in a Node to Another"
    ],
    "pageId": 916
  },
  {
    "content": "For source replicas that are also shard leaders the operation will wait for the number of seconds set with the\ntimeout<span class=\"ff1 fs0\"> parameter to make sure there's an active replica that can become a leader (either an existing</span>\nreplica becoming a leader or the new replica completing recovery and becoming a leader).",
    "hierarchy": [
    ],
    "pageId": 917
  },
  {
    "content": "The API uses the Autoscaling framework to find nodes that can satisfy the disk requirements for the new\nreplicas but only when an Autoscaling policy is configured. Refer to <span class=\"link\">Autoscaling Policy and Preferences</span>\nsection for more details.",
    "hierarchy": [
    ],
    "pageId": 917
  },
  {
    "content": "/admin/collections?action=REPLACENODE&sourceNode=source-node&targetNode=target-node",
    "hierarchy": [
    ],
    "pageId": 917
  },
  {
    "content": "sourceNode\nThe source node from which the replicas need to be copied from. This parameter is required.",
    "hierarchy": [
      "REPLACENODE Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "targetNode\nThe target node where replicas will be copied. If this parameter is not provided, Solr will identify nodes\nautomatically based on policies or number of cores in each node.",
    "hierarchy": [
      "REPLACENODE Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "parallel\nIf this flag is set to <span class=\"ff2 fs1\">true</span>, all replicas are created in separate threads. Keep in mind that this can lead to\nvery high network and disk I/O if the replicas have very large indices. The default is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "REPLACENODE Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
      "REPLACENODE Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "timeout\nTime in seconds to wait until new replicas are created, and until leader replicas are fully recovered. The\ndefault is <span class=\"ff2 fs1\">300</span>, or 5 minutes.",
    "hierarchy": [
      "REPLACENODE Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "This operation does not hold necessary locks on the replicas that belong to on the source\nnode. So don't perform other collection operations in this period.",
    "hierarchy": [
      "REPLACENODE Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "This command moves a replica from one node to a new node. In case of shared filesystems the <span class=\"ff2 fs1\">dataDir</span> will\nbe reused.",
    "hierarchy": [
      "MOVEREPLICA: Move a Replica to a New Node"
    ],
    "pageId": 917
  },
  {
    "content": "The API uses the Autoscaling framework to find nodes that can satisfy the disk requirements for the replica\nto be moved but only when an Autoscaling policy is configured. Refer to <span class=\"link\">Autoscaling Policy and Preferences</span>\nsection for more details.",
    "hierarchy": [
      "MOVEREPLICA: Move a Replica to a New Node"
    ],
    "pageId": 917
  },
  {
    "content": "/admin/collections?action=MOVEREPLICA&collection=collection&shard=shard&replica=replica&sour\nceNode=nodeName&targetNode=nodeName",
    "hierarchy": [
      "MOVEREPLICA: Move a Replica to a New Node"
    ],
    "pageId": 917
  },
  {
    "content": "collection\nThe name of the collection. This parameter is required.",
    "hierarchy": [
      "MOVEREPLICA: Move a Replica to a New Node",
      "MOVEREPLICA Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "shard\nThe name of the shard that the replica belongs to. This parameter is required.",
    "hierarchy": [
      "MOVEREPLICA: Move a Replica to a New Node",
      "MOVEREPLICA Parameters"
    ],
    "pageId": 917
  },
  {
    "content": "replica\nThe name of the replica. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 918
  },
  {
    "content": "sourceNode\nThe name of the node that contains the replica. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 918
  },
  {
    "content": "targetNode\nThe name of the destination node. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 918
  },
  {
    "content": "async\nRequest ID to track this action which will be <span class=\"link\">processed asynchronously</span>.",
    "hierarchy": [
    ],
    "pageId": 918
  },
  {
    "content": "This command can be used to move some replicas from the existing nodes to either a new node or a less\nloaded node to reduce the load on the existing node.",
    "hierarchy": [
      "UTILIZENODE: Utilize a New Node"
    ],
    "pageId": 918
  },
  {
    "content": "This uses your autoscaling policies and preferences to identify which replica needs to be moved. It tries to fix\nany policy violations first and then it tries to move some load off of the most loaded nodes according to the\npreferences.",
    "hierarchy": [
      "UTILIZENODE: Utilize a New Node"
    ],
    "pageId": 918
  },
  {
    "content": "/admin/collections?action=UTILIZENODE&node=nodeName",
    "hierarchy": [
      "UTILIZENODE: Utilize a New Node"
    ],
    "pageId": 918
  },
  {
    "content": "node\nThe name of the node that needs to be utilized. This parameter is required.",
    "hierarchy": [
      "UTILIZENODE: Utilize a New Node",
      "UTILIZENODE Parameters"
    ],
    "pageId": 918
  },
  {
    "content": "Since some collection API calls can be long running tasks (such as SPLITSHARD), you can optionally have the\ncalls run asynchronously. Specifying <span class=\"ff1 fs0\">async=<request-id></span> enables you to make an asynchronous call, the\nstatus of which can be requested using the <span class=\"link\">REQUESTSTATUS</span> call at any time.",
    "hierarchy": [
      "Asynchronous Calls"
    ],
    "pageId": 918
  },
  {
    "content": "As of now, REQUESTSTATUS does not automatically clean up the tracking data structures, meaning the\nstatus of completed or failed tasks stays stored in ZooKeeper unless cleared manually. DELETESTATUS can\nbe used to clear the stored statuses. However, there is a limit of 10,000 on the number of async call\nresponses stored in a cluster.",
    "hierarchy": [
      "Asynchronous Calls"
    ],
    "pageId": 918
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=SPLITSHARD&collection=collection1&shard=shard\n1&async=1000&wt=xml",
    "hierarchy": [
      "Asynchronous Calls",
      "Examples of Async Requests"
    ],
    "pageId": 918
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>99<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"requestid\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 919
  },
  {
    "content": "numShards\nDefaults to <span class=\"ff1 fs3\">1</span>. The number of shards to hash documents to. There must be one leader per shard and each\nleader can have <span class=\"ff4\">N</span> replicas.",
    "hierarchy": [
      "Parameter Reference",
      "Cluster Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "These are set in <span class=\"ff1 fs3\">solr.xml</span>, but by default the <span class=\"ff1 fs3\">host</span> and <span class=\"ff1 fs3\">hostContext</span> parameters are set up to also work with\nsystem properties.",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "host\nDefaults to the first local host address found. If the wrong host address is found automatically, you can\noverride the host address with this parameter.",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "hostPort\nDefaults to the port specified via <span class=\"ff1 fs3\">bin/solr -p <port></span>, or <span class=\"ff1 fs3\">8983</span> if not specified. The port that Solr is\nrunning on. This value is only used when <span class=\"ff1 fs3\">-DzkRun</span> is specified without a value (see below), to calculate the\ndefault port on which embedded ZooKeeper will run. In the <span class=\"ff1 fs3\">solr.xml</span> shipped with Solr, the <span class=\"ff1 fs3\">hostPort</span>\nsystem property is not referenced, and so is ignored. If you want to run Solr on a non-default port, use\nbin/solr -p <port><span class=\"code\"> rather than specifying </span>-DhostPort<span class=\"code\">.</span>",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "hostContext\nDefaults to <span class=\"ff1 fs3\">solr</span>. The context path for the Solr web application.",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "zkRun\nDefaults to <span class=\"ff1 fs3\">localhost:<hostPort+1000></span>. Causes Solr to run an embedded version of ZooKeeper. Set to\nthe address of ZooKeeper on this node; this allows us to know who you are in the list of addresses in the\nzkHost<span class=\"code\"> connect string. Use </span>-DzkRun<span class=\"code\"> (with no value) to get the default value.</span>",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance ZooKeeper Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "zkHost\nThe host address for ZooKeeper. Usually this is a comma-separated list of addresses to each node in your\nZooKeeper ensemble.",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance ZooKeeper Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "zkClientTimeout\nDefaults to 15000. The time a client is allowed to not talk to ZooKeeper before its session expires.",
    "hierarchy": [
      "Parameter Reference",
      "SolrCloud Instance ZooKeeper Parameters"
    ],
    "pageId": 919
  },
  {
    "content": "zkRun<span class=\"ff2 fs1\"> and </span>zkHost<span class=\"ff2 fs1\"> are set up using system properties. </span>zkClientTimeout<span class=\"ff2 fs1\"> is set up in </span>solr.xml<span class=\"ff2 fs1\"> by default, but</span>\ncan also be set using a system property.",
    "hierarchy": [
    ],
    "pageId": 920
  },
  {
    "content": "shard\nDefaults to being automatically assigned based on numShards. Specifies which shard this core acts as a\nreplica of. <span class=\"ff1 fs0\">shard</span> can be specified in the <span class=\"ff1 fs0\">core.properties</span> for each core.",
    "hierarchy": [
      "SolrCloud Core Parameters"
    ],
    "pageId": 920
  },
  {
    "content": "Additional cloud related parameters are discussed in <span class=\"link\">Format of solr.xml</span>",
    "hierarchy": [
      "SolrCloud Core Parameters"
    ],
    "pageId": 920
  },
  {
    "content": "A ZooKeeper Command Line Interface (CLI) script is available to allow you to interact directly with Solr\nconfiguration files stored in ZooKeeper.",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "While Solr's Administration UI includes pages dedicated to the state of your SolrCloud cluster, it does not\nallow you to download or modify related configuration files.",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "See the section <span class=\"link\">Cloud Screens</span> for more information about using the Admin UI screens.",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "The ZooKeeper CLI scripts found in <span class=\"ff1 fs0\">server/scripts/cloud-scripts</span> let you upload configuration\ninformation to ZooKeeper, in the same ways shown in the examples in <span class=\"link\">Parameter Reference</span>. It also provides\na few other commands that let you link collection sets to collections, make ZooKeeper paths or clear them,\nand download configurations from ZooKeeper to the local filesystem.",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "Many of the functions provided by the zkCli.sh script are also provided by the <span class=\"link\">Solr Control Script</span>, which may\nbe more familiar as the start script ZooKeeper maintenance commands are very similar to Unix commands.",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "The <span class=\"ff1 fs0\">zkcli.sh</span> provided by Solr is not the same as the <span class=\"ff1 fs0\">zkCli.sh</span><span class=\"link\"> included in ZooKeeper</span>\ndistributions<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "ZooKeeper's <span class=\"ff1 fs0\">zkCli.sh</span> provides a completely general, application-agnostic shell for\nmanipulating data in ZooKeeper. Solr’s <span class=\"ff1 fs0\">zkcli.sh</span> – discussed in this section – is specific to\nSolr, and has command line arguments specific to dealing with Solr data in ZooKeeper.",
    "hierarchy": [
      "Command Line Utilities"
    ],
    "pageId": 920
  },
  {
    "content": "Use the <span class=\"ff1 fs0\">help</span> option to get a list of available commands from the script itself, as in\n./server/scripts/cloud-scrips/zkcli.sh help<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Command Line Utilities",
      "Using Solr's ZooKeeper CLI"
    ],
    "pageId": 920
  },
  {
    "content": "Both <span class=\"ff1 fs0\">zkcli.sh</span> (for Unix environments) and <span class=\"ff1 fs0\">zkcli.bat</span> (for Windows environments) support the following\ncommand line options:",
    "hierarchy": [
      "Command Line Utilities",
      "Using Solr's ZooKeeper CLI"
    ],
    "pageId": 920
  },
  {
    "content": "-cmd <arg>\nThe CLI Command to be executed. This parameter is <span class=\"code\">mandatory</span>. The following commands are\nsupported:",
    "hierarchy": [
      "Command Line Utilities",
      "Using Solr's ZooKeeper CLI"
    ],
    "pageId": 920
  },
  {
    "content": "\nbootstrap",
    "hierarchy": [
      "Command Line Utilities",
      "Using Solr's ZooKeeper CLI"
    ],
    "pageId": 920
  },
  {
    "content": "\nupconfig\n•\ndownconfig\n•\nlinkconfig\n•\nmakepath\n•<span class=\"ff2 fs1 ls1\">get</span><span class=\"ls1\"> and <span class=\"ff2 fs1\">getfile</span></span>\n•<span class=\"ff2 fs1 ls1\">put</span><span class=\"ls1\"> and <span class=\"ff2 fs1\">putfile</span></span>\n•\nclear\n•\nlist\n•\nls\n•\nclusterprop",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-z<span class=\"code\"> or </span>-zkhost <locations>\nZooKeeper host address. This parameter is <span class=\"code\">mandatory</span> for all CLI commands.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-c<span class=\"code\"> or </span>-collection <name>\nFor <span class=\"ff2 fs1\">linkconfig</span>: name of the collection.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-d<span class=\"code\"> or </span>-confdir <path>\nFor <span class=\"ff2 fs1\">upconfig</span>: a directory of configuration files. For downconfig: the destination of files pulled from\nZooKeeper",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-h<span class=\"code\"> or </span>-help\nDisplay help text.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-n<span class=\"code\"> or </span>-confname <arg>\nFor <span class=\"ff2 fs1\">upconfig</span>, <span class=\"ff2 fs1\">linkconfig</span>, <span class=\"ff2 fs1\">downconfig</span>: name of the configuration set.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-r<span class=\"code\"> or </span>-runzk <port>\nRun ZooKeeper internally by passing the Solr run port; only for clusters on one machine.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-s<span class=\"code\"> or </span>-solrhome <path>\nFor <span class=\"ff2 fs1\">bootstrap</span> or when using <span class=\"ff2 fs1\">-runzk</span>: the <span class=\"code\">mandatory</span> solrhome location.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-name <name>\nFor <span class=\"ff2 fs1\">clusterprop</span>: the <span class=\"code\">mandatory</span> cluster property name.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "-val <value>\nFor <span class=\"ff2 fs1\">clusterprop</span>: the cluster property value. If not specified, <span class=\"code\">null</span> will be used as value.",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "The short form parameter options may be specified with a single dash (e.g., <span class=\"ff2 fs1\">-c</span>\nmycollection<span class=\"ff1 fs0\">).</span>",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "The long form parameter options may be specified using either a single dash (e.g.,\n-collection mycollection<span class=\"ff1 fs0\">) or a double dash (e.g., </span>--collection mycollection<span class=\"ff1 fs0\">)</span>",
    "hierarchy": [
    ],
    "pageId": 921
  },
  {
    "content": "Below are some examples of using the <span class=\"ff2 fs1\">zkcli.sh</span> CLI which assume you have already started the SolrCloud",
    "hierarchy": [
      "ZooKeeper CLI Examples"
    ],
    "pageId": 921
  },
  {
    "content": "example (<span class=\"ff2 fs1\">bin/solr -e cloud -noprompt</span>)",
    "hierarchy": [
    ],
    "pageId": 922
  },
  {
    "content": "If you are on Windows machine, simply replace <span class=\"ff2 fs1\">zkcli.sh</span> with <span class=\"ff2 fs1\">zkcli.bat</span> in these examples.",
    "hierarchy": [
    ],
    "pageId": 922
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:9983 -cmd upconfig -confname\nmy_new_config -confdir server/solr/configsets/_default/conf",
    "hierarchy": [
      "Upload a Configuration Directory"
    ],
    "pageId": 922
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:2181 -cmd bootstrap -solrhome\n/var/solr/data",
    "hierarchy": [
      "Bootstrap ZooKeeper from an Existing solr.home"
    ],
    "pageId": 922
  },
  {
    "content": "Using the boostrap command with a ZooKeeper chroot in the <span class=\"ff2 fs1\">-zkhost</span> parameter, e.g.,\n-zkhost 127.0.0.1:2181/solr<span class=\"ff1 fs0\">, will automatically create the chroot path before uploading</span>\nthe configs.",
    "hierarchy": [
      "Bootstrap ZooKeeper from an Existing solr.home"
    ],
    "pageId": 922
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:9983 -cmd put /my_zk_file.txt 'some\ndata'",
    "hierarchy": [
      "Put Arbitrary Data into a New ZooKeeper file"
    ],
    "pageId": 922
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:9983 -cmd putfile /my_zk_file.txt\n/tmp/my_local_file.txt",
    "hierarchy": [
      "Put a Local File into a New ZooKeeper File"
    ],
    "pageId": 922
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:9983 -cmd linkconfig -collection\ngettingstarted -confname my_new_config",
    "hierarchy": [
      "Link a Collection to a ConfigSet"
    ],
    "pageId": 922
  },
  {
    "content": "This can be useful to create a chroot path in ZooKeeper before first cluster start.",
    "hierarchy": [
      "Create a New ZooKeeper Path"
    ],
    "pageId": 922
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:2181 -cmd makepath /solr",
    "hierarchy": [
      "Create a New ZooKeeper Path"
    ],
    "pageId": 922
  },
  {
    "content": "This command will add or modify a single cluster property in <span class=\"ff2 fs1\">clusterprops.json</span>. Use this command instead\nof the usual getfile -> edit -> putfile cycle.",
    "hierarchy": [
      "Set a Cluster Property"
    ],
    "pageId": 922
  },
  {
    "content": "Unlike the CLUSTERPROP command on the <span class=\"link\">Collections API</span>, this command does <span class=\"ff2\">not</span> require a running Solr\ncluster.",
    "hierarchy": [
    ],
    "pageId": 923
  },
  {
    "content": "./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:2181 -cmd clusterprop -name urlScheme\n-val https",
    "hierarchy": [
    ],
    "pageId": 923
  },
  {
    "content": "If you are migrating from a non-SolrCloud environment to SolrCloud, this information may be helpful.",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "All of the required configuration is already set up in the sample configurations shipped with Solr. You only\nneed to add the following if you are migrating old configuration files. Do not remove these files and\nparameters from a new Solr instance if you intend to use Solr in SolrCloud mode.",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "These properties exist in 3 files: <span class=\"code\">schema.xml</span>, <span class=\"code\">solrconfig.xml</span>, and <span class=\"code\">solr.xml</span>.",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "1.In <span class=\"code\">schema.xml</span>, you must have a <span class=\"code\">_version_</span> field defined:",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "2.In <span class=\"code\">solrconfig.xml</span>, you must have an <span class=\"code\">UpdateLog</span> defined. This should be defined in the <span class=\"code\">updateHandler</span>\nsection.",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "Ê ...\nÊ <span class=\"fc3\"><updateLog></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"dir\"<span class=\"fc3\">></span></span>${solr.data.dir:}<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></updateLog></span>\nÊ ...",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "3.The <span class=\"link\">DistributedUpdateProcessor</span> is part of the default update chain and is automatically injected into any\nof your custom update chains, so you don't actually need to make any changes for this capability.\nHowever, should you wish to add it explicitly, you can still add it to the <span class=\"code\">solrconfig.xml</span> file as part of an\nupdateRequestProcessorChain<span class=\"ff1 fs0\">. For example:</span>",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "Ê <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.DistributedUpdateProcessorFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"my.package.UpdateFactory\"<span class=\"fc3\">/></span></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "If you do not want the DistributedUpdateProcessFactory auto-injected into your chain (for example, if\nyou want to use SolrCloud functionality, but you want to distribute updates yourself) then specify the\nNoOpDistributingUpdateProcessorFactory<span class=\"ff1 fs0\"> update processor factory in your chain:</span>",
    "hierarchy": [
      "SolrCloud with Legacy Configuration Files"
    ],
    "pageId": 923
  },
  {
    "content": "Ê <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc0\">/></span>\nÊ <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.NoOpDistributingUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"my.package.MyDistributedUpdateFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc0\">/></span>",
    "hierarchy": [
    ],
    "pageId": 924
  },
  {
    "content": "In the update process, Solr skips updating processors that have already been run on other nodes.",
    "hierarchy": [
    ],
    "pageId": 924
  },
  {
    "content": "The ConfigSets API enables you to create, delete, and otherwise manage ConfigSets.",
    "hierarchy": [
      "ConfigSets API"
    ],
    "pageId": 924
  },
  {
    "content": "To use a ConfigSet created with this API as the configuration for a collection, use the <span class=\"link\">Collections API</span>.",
    "hierarchy": [
      "ConfigSets API"
    ],
    "pageId": 924
  },
  {
    "content": "This API can only be used with Solr running in SolrCloud mode. If you are not running Solr in SolrCloud\nmode but would still like to use shared configurations, please see the section <span class=\"link\">Config Sets</span>.",
    "hierarchy": [
      "ConfigSets API"
    ],
    "pageId": 924
  },
  {
    "content": "The base URL for all API calls is <span class=\"ff1 fs3\">http://<hostname>:<port>/solr</span>.",
    "hierarchy": [
      "ConfigSets API",
      "ConfigSets API Entry Points"
    ],
    "pageId": 924
  },
  {
    "content": "/admin/configs?action=CREATE: <span class=\"link\">create</span> a ConfigSet, based on an existing ConfigSet",
    "hierarchy": [
      "ConfigSets API",
      "ConfigSets API Entry Points"
    ],
    "pageId": 924
  },
  {
    "content": "/admin/configs?action=DELETE: <span class=\"link\">delete</span> a ConfigSet",
    "hierarchy": [
      "ConfigSets API",
      "ConfigSets API Entry Points"
    ],
    "pageId": 924
  },
  {
    "content": "/admin/configs?action=LIST: <span class=\"link\">list</span> all ConfigSets",
    "hierarchy": [
      "ConfigSets API",
      "ConfigSets API Entry Points"
    ],
    "pageId": 924
  },
  {
    "content": "/admin/configs?action=UPLOAD: <span class=\"link\">upload</span> a ConfigSet",
    "hierarchy": [
      "ConfigSets API",
      "ConfigSets API Entry Points"
    ],
    "pageId": 924
  },
  {
    "content": "/admin/configs?action=CREATE&name=name&baseConfigSet=baseConfigSet",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet"
    ],
    "pageId": 924
  },
  {
    "content": "Create a ConfigSet, based on an existing ConfigSet.",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet"
    ],
    "pageId": 924
  },
  {
    "content": "The following parameters are supported when creating a ConfigSet.",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet",
      "Create ConfigSet Parameters"
    ],
    "pageId": 924
  },
  {
    "content": "name\nThe ConfigSet to be created. This parameter is required.",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet",
      "Create ConfigSet Parameters"
    ],
    "pageId": 924
  },
  {
    "content": "baseConfigSet\nThe ConfigSet to copy as a base. This parameter is required.",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet",
      "Create ConfigSet Parameters"
    ],
    "pageId": 924
  },
  {
    "content": "configSetProp.<span class=\"ff4\">name</span>=<span class=\"ff4\">value</span>\nAny ConfigSet property from base to override.",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet",
      "Create ConfigSet Parameters"
    ],
    "pageId": 924
  },
  {
    "content": "The response will include the status of the request. If the status is anything other than \"success\", an error",
    "hierarchy": [
      "ConfigSets API",
      "Create a ConfigSet",
      "Create ConfigSet Response"
    ],
    "pageId": 924
  },
  {
    "content": "message will explain why the request failed.",
    "hierarchy": [
    ],
    "pageId": 925
  },
  {
    "content": "Create a ConfigSet named 'myConfigSet' based on a 'predefinedTemplate' ConfigSet, overriding the\nimmutable property to false.",
    "hierarchy": [
      "Create ConfigSet Examples"
    ],
    "pageId": 925
  },
  {
    "content": "http://localhost:8983/solr/admin/configs?action=CREATE&name=myConfigSet&baseConfigSet=predefinedT\nemplate&configSetProp.immutable=false&wt=xml",
    "hierarchy": [
      "Create ConfigSet Examples"
    ],
    "pageId": 925
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"responseHeader\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"status\"<span class=\"fc2\">></span></span>0<span class=\"fc2\"></int></span>\nÊ   <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"QTime\"<span class=\"fc2\">></span></span>323<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
      "Create ConfigSet Examples"
    ],
    "pageId": 925
  },
  {
    "content": "/admin/configs?action=DELETE&name=name",
    "hierarchy": [
      "Delete a ConfigSet"
    ],
    "pageId": 925
  },
  {
    "content": "Delete a ConfigSet",
    "hierarchy": [
      "Delete a ConfigSet"
    ],
    "pageId": 925
  },
  {
    "content": "name\nThe ConfigSet to be deleted. This parameter is required.",
    "hierarchy": [
      "Delete a ConfigSet",
      "Delete ConfigSet Parameters"
    ],
    "pageId": 925
  },
  {
    "content": "The output will include the status of the request. If the status is anything other than \"success\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "Delete a ConfigSet",
      "Delete ConfigSet Response"
    ],
    "pageId": 925
  },
  {
    "content": "Delete ConfigSet 'myConfigSet'",
    "hierarchy": [
      "Delete a ConfigSet",
      "Delete ConfigSet Examples"
    ],
    "pageId": 925
  },
  {
    "content": "http://localhost:8983/solr/admin/configs?action=DELETE&name=myConfigSet&wt=xml",
    "hierarchy": [
      "Delete a ConfigSet",
      "Delete ConfigSet Examples"
    ],
    "pageId": 925
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc0\">></span></span>0<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc0\">></span></span>170<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 926
  },
  {
    "content": "/admin/configs?action=LIST",
    "hierarchy": [
      "List ConfigSets"
    ],
    "pageId": 926
  },
  {
    "content": "Fetch the names of the ConfigSets in the cluster.",
    "hierarchy": [
      "List ConfigSets"
    ],
    "pageId": 926
  },
  {
    "content": "http://localhost:8983/solr/admin/configs?action=LIST",
    "hierarchy": [
      "List ConfigSets",
      "List ConfigSet Examples"
    ],
    "pageId": 926
  },
  {
    "content": "{\nÊ <span class=\"fc5\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc5\">\"status\"</span>:<span class=\"fc6\">0</span>,\nÊ   <span class=\"fc5\">\"QTime\"</span>:<span class=\"fc6\">203</span>},\nÊ <span class=\"fc5\">\"configSets\"</span>:[<span class=\"fc3\">\"myConfigSet1\"</span>,\nÊ   <span class=\"fc3\">\"myConfig2\"</span>]}",
    "hierarchy": [
      "List ConfigSets",
      "List ConfigSet Examples"
    ],
    "pageId": 926
  },
  {
    "content": "/admin/configs?action=UPLOAD&name=name",
    "hierarchy": [
      "Upload a ConfigSet"
    ],
    "pageId": 926
  },
  {
    "content": "Upload a ConfigSet, sent in as a zipped file. Please note that a ConfigSet is uploaded in a \"trusted\" mode if\nauthentication is enabled and this upload operation is performed as an authenticated request. Without\nauthentication, a ConfigSet is uploaded in an \"untrusted\" mode. Upon creation of a collection using an\n\"untrusted\" ConfigSet, the following functionality would not work:",
    "hierarchy": [
      "Upload a ConfigSet"
    ],
    "pageId": 926
  },
  {
    "content": "DataImportHandler's ScriptTransformer does not initialize, if specified in the ConfigSet.",
    "hierarchy": [
      "Upload a ConfigSet"
    ],
    "pageId": 926
  },
  {
    "content": "XSLT transformer (tr parameter) cannot be used at request processing time.",
    "hierarchy": [
      "Upload a ConfigSet"
    ],
    "pageId": 926
  },
  {
    "content": "StatelessScriptUpdateProcessor does not initialize, if specified in the ConfigSet.",
    "hierarchy": [
      "Upload a ConfigSet"
    ],
    "pageId": 926
  },
  {
    "content": "name\nThe ConfigSet to be created when the upload is complete. This parameter is required.",
    "hierarchy": [
      "Upload a ConfigSet",
      "Upload ConfigSet Parameters"
    ],
    "pageId": 926
  },
  {
    "content": "The body of the request should contain a zipped config set.",
    "hierarchy": [
      "Upload a ConfigSet",
      "Upload ConfigSet Parameters"
    ],
    "pageId": 926
  },
  {
    "content": "The output will include the status of the request. If the status is anything other than \"success\", an error\nmessage will explain why the request failed.",
    "hierarchy": [
      "Upload ConfigSet Response"
    ],
    "pageId": 927
  },
  {
    "content": "Create a config set named 'myConfigSet' from the zipped file myconfigset.zip. The zip file must be created\nfrom within the <span class=\"code\">conf</span> directory (i.e., <span class=\"code\">solrconfig.xml</span> must be the top level entry in the zip file). Here is an\nexample on how to create the zip file and upload it:",
    "hierarchy": [
      "Upload ConfigSet Examples"
    ],
    "pageId": 927
  },
  {
    "content": "$ (cd solr/server/solr/configsets/sample_techproducts_configs/conf && zip -r - *) >\nmyconfigset.zip",
    "hierarchy": [
      "Upload ConfigSet Examples"
    ],
    "pageId": 927
  },
  {
    "content": "$ curl -X POST --header \"Content-Type:application/octet-stream\" --data-binary @myconfigset.zip\n\"http://localhost:8983/solr/admin/configs?action=UPLOAD&name=myConfigSet\"",
    "hierarchy": [
      "Upload ConfigSet Examples"
    ],
    "pageId": 927
  },
  {
    "content": "The same can be achieved using a Unix pipe, without creating an intermediate zip file, as follows:",
    "hierarchy": [
      "Upload ConfigSet Examples"
    ],
    "pageId": 927
  },
  {
    "content": "$ (cd server/solr/configsets/sample_techproducts_configs/conf && zip -r - *) | curl -X POST\n--header \"Content-Type:application/octet-stream\" --data-binary @-\n\"http://localhost:8983/solr/admin/configs?action=UPLOAD&name=myConfigSet\"",
    "hierarchy": [
      "Upload ConfigSet Examples"
    ],
    "pageId": 927
  },
  {
    "content": "When Solr needs to assign nodes to collections, it can either automatically assign them randomly or the user\ncan specify a set of nodes where it should create the replicas.",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "With very large clusters, it is hard to specify exact node names and it still does not give you fine grained\ncontrol over how nodes are chosen for a shard. The user should be in complete control of where the nodes\nare allocated for each collection, shard and replica. This helps to optimally allocate hardware resources\nacross the cluster.",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "Rule-based replica assignment allows the creation of rules to determine the placement of replicas in the\ncluster. In the future, this feature will help to automatically add or remove replicas when systems go down,\nor when higher throughput is required. This enables a more hands-off approach to administration of the\ncluster.",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "This feature is used in the following instances:",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "Collection creation",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "Shard creation",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "Replica creation",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "Shard splitting",
    "hierarchy": [
      "Rule-based Replica Placement"
    ],
    "pageId": 928
  },
  {
    "content": "There are several situations where this functionality may be used. A few of the rules that could be\nimplemented are listed below:",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "Don't assign more than 1 replica of this collection to a host.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "Assign all replicas to nodes with more than 100GB of free disk space or, assign replicas where there is\nmore disk space.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "Do not assign any replica on a given host because I want to run an overseer there.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "Assign only one replica of a shard in a rack.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "Assign replica in nodes hosting less than 5 cores.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "Assign replicas in nodes hosting the least number of cores.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Common Use Cases"
    ],
    "pageId": 928
  },
  {
    "content": "A rule is a set of conditions that a node must satisfy before a replica core can be created there.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Rule Conditions"
    ],
    "pageId": 928
  },
  {
    "content": "There are three possible conditions.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Rule Conditions"
    ],
    "pageId": 928
  },
  {
    "content": "shard<span class=\"ff2\">: this is the name of a shard or a wild card (* means for all shards). If shard is not specified, then</span>\nthe rule applies to the entire collection.",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Rule Conditions"
    ],
    "pageId": 928
  },
  {
    "content": "replica<span class=\"ff2\">: this can be a number or a wild-card (* means any number zero to infinity).</span>",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Rule Conditions"
    ],
    "pageId": 928
  },
  {
    "content": "tag<span class=\"ff2\">: this is an attribute of a node in the cluster that can be used in a rule, e.g., “freedisk”, “cores”, “rack”,</span>\n“dc”, etc. The tag name can be a custom string. If creating a custom tag, a snitch is responsible for",
    "hierarchy": [
      "Rule-based Replica Placement",
      "Rule Conditions"
    ],
    "pageId": 928
  },
  {
    "content": "providing tags and values. The section <span class=\"link\">Snitches</span> below describes how to add a custom tag, and defines\nsix pre-defined tags (cores, freedisk, host, port, node, and sysprop).",
    "hierarchy": [
    ],
    "pageId": 929
  },
  {
    "content": "A condition can have one of the following operators to set the parameters for the rule.",
    "hierarchy": [
      "Rule Operators"
    ],
    "pageId": 929
  },
  {
    "content": "equals (no operator required)<span class=\"ff1\">: <span class=\"code\">tag:x</span> means tag value must be equal to ‘x'</span>",
    "hierarchy": [
      "Rule Operators"
    ],
    "pageId": 929
  },
  {
    "content": "greater than (>)<span class=\"ff1\">: <span class=\"code\">tag:>x</span> means tag value greater than ‘x'. x must be a number</span>",
    "hierarchy": [
      "Rule Operators"
    ],
    "pageId": 929
  },
  {
    "content": "less than (<)<span class=\"ff1\">: <span class=\"code\">tag:<x</span> means tag value less than ‘x'. x must be a number</span>",
    "hierarchy": [
      "Rule Operators"
    ],
    "pageId": 929
  },
  {
    "content": "not equal (!)<span class=\"ff1\">: <span class=\"code\">tag:!x</span> means tag value MUST NOT be equal to ‘x'. The equals check is performed on</span>\nString value",
    "hierarchy": [
      "Rule Operators"
    ],
    "pageId": 929
  },
  {
    "content": "This can be used as a suffix to any condition. This would first try to satisfy the rule strictly. If Solr can't find\nenough nodes to match the criterion, it tries to find the next best match which may not satisfy the criterion.\nFor example, if we have a rule such as, <span class=\"code\">freedisk:>200~</span>, Solr will try to assign replicas of this collection on\nnodes with more than 200GB of free disk space. If that is not possible, the node which has the most free disk\nspace will be chosen instead.",
    "hierarchy": [
      "Fuzzy Operator (~)"
    ],
    "pageId": 929
  },
  {
    "content": "The nodes are sorted first and the rules are used to sort them. This ensures that even if many nodes match\nthe rules, the best nodes are picked up for node assignment. For example, if there is a rule such as\nfreedisk:>20<span class=\"ff1 fs0\">, nodes are sorted first on disk space descending and the node with the most disk space is</span>\npicked up first. Or, if the rule is <span class=\"code\">cores:<5</span>, nodes are sorted with number of cores ascending and the node\nwith the least number of cores is picked up first.",
    "hierarchy": [
      "Choosing Among Equals"
    ],
    "pageId": 929
  },
  {
    "content": "The rules are persisted along with collection state. So, when a new replica is created, the system will assign\nreplicas satisfying the rules. When a new shard is created as a result of using the Collection API's\nCREATESHARD command<span class=\"fc0\">, ensure that you have created rules specific for that shard name. Rules can be</span>\naltered using the <span class=\"link\">MODIFYCOLLECTION command</span>. However, it is not required to do so if the rules do not\nspecify explicit shard names. For example, a rule such as <span class=\"code\">shard:shard1,replica:*,ip_3:168:</span>, will not\napply to any new shard created. But, if your rule is <span class=\"code\">replica:*,ip_3:168</span>, then it will apply to any new shard\ncreated.",
    "hierarchy": [
      "Rules for New Shards"
    ],
    "pageId": 929
  },
  {
    "content": "The same is applicable to shard splitting. Shard splitting is treated exactly the same way as shard creation.\nEven though <span class=\"code\">shard1_1</span> and <span class=\"code\">shard1_2</span> may be created from <span class=\"code\">shard1</span>, the rules treat them as distinct, unrelated\nshards.",
    "hierarchy": [
      "Rules for New Shards"
    ],
    "pageId": 929
  },
  {
    "content": "Tag values come from a plugin called Snitch. If there is a tag named ‘rack' in a rule, there must be Snitch\nwhich provides the value for ‘rack’ for each node in the cluster. A snitch implements the Snitch interface.\nSolr, by default, provides a default snitch which provides the following tags:",
    "hierarchy": [
      "Snitches"
    ],
    "pageId": 929
  },
  {
    "content": "<span class=\"ff2 ls1\">cores<span class=\"ff1\">: Number of cores in the node</span></span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">freedisk<span class=\"ff1\">: Disk space available in the node</span></span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">host<span class=\"ff1\">: host name of the node</span></span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">port<span class=\"ff1\">: port of the node</span></span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">node<span class=\"ff1\">: node name</span></span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">role<span class=\"ff1\">: The role of the node. The only supported role is 'overseer'</span></span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">ip_1, ip_2, ip_3, ip_4<span class=\"ff1\">: These are ip fragments for each node. For example, in a host with ip <span class=\"code\">192.168.1.2</span>,</span></span>\nip_1 = 2<span class=\"ff1 fs0\">, </span>ip_2 =1<span class=\"ff1 fs0\">, </span>ip_3 = 168<span class=\"ff1 fs0\"> and` ip_4 = 192`</span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "<span class=\"ff2 ls1\">sysprop.{PROPERTY_NAME}<span class=\"ff1\">: These are values available from system properties. <span class=\"code\">sysprop.key</span> means a</span></span>\nvalue that is passed to the node as <span class=\"code\">-Dkey=keyValue</span> during the node startup. It is possible to use rules\nlike <span class=\"code\">sysprop.key:expectedVal,shard:*</span>",
    "hierarchy": [
    ],
    "pageId": 930
  },
  {
    "content": "It is possible to use one or more snitches for a set of rules. If the rules only need tags from default snitch it\nneed not be explicitly configured. For example:",
    "hierarchy": [
      "How Snitches are Configured"
    ],
    "pageId": 930
  },
  {
    "content": "snitch=class:fqn.ClassName,key1:val1,key2:val2,key3:val3",
    "hierarchy": [
      "How Snitches are Configured"
    ],
    "pageId": 930
  },
  {
    "content": "1.<span class=\"ls1\">Identify the set of tags in the rules</span>\n2.<span class=\"ls1\">Create instances of Snitches specified. The default snitch is always created.</span>\n3.<span class=\"ls1\">Ask each Snitch if it can provide values for the any of the tags. If even one tag does not have a snitch, the</span>\nassignment fails.",
    "hierarchy": [
      "How Snitches are Configured"
    ],
    "pageId": 930
  },
  {
    "content": "4.<span class=\"ls1\">After identifying the Snitches, they provide the tag values for each node in the cluster.</span>\n5.<span class=\"ls1\">If the value for a tag is not obtained for a given node, it cannot participate in the assignment.</span>",
    "hierarchy": [
      "How Snitches are Configured"
    ],
    "pageId": 930
  },
  {
    "content": "For this rule, we define the <span class=\"code\">replica</span> condition with operators for \"less than 2\", and use a pre-defined tag\nnamed <span class=\"code\">node</span> to define nodes with any name.",
    "hierarchy": [
      "Replica Placement Examples",
      "Keep less than 2 replicas (at most 1 replica) of this collection on any node"
    ],
    "pageId": 930
  },
  {
    "content": "replica:<2,node:*\n// this is equivalent to replica:<2,node:*,shard:**. We can omit shard:** because ** is the\ndefault value of shard",
    "hierarchy": [
      "Replica Placement Examples",
      "Keep less than 2 replicas (at most 1 replica) of this collection on any node"
    ],
    "pageId": 930
  },
  {
    "content": "For this rule, we use the <span class=\"code\">shard</span> condition to define any shard, the <span class=\"code\">replica</span> condition with operators for \"less\nthan 2\", and finally a pre-defined tag named <span class=\"code\">node</span> to define nodes with any name.",
    "hierarchy": [
      "Replica Placement Examples",
      "For a given shard, keep less than 2 replicas on any node"
    ],
    "pageId": 930
  },
  {
    "content": "shard:*,replica:<2,node:*",
    "hierarchy": [
    ],
    "pageId": 931
  },
  {
    "content": "This rule limits the <span class=\"ff1 fs2\">shard</span> condition to 'shard1', but any number of replicas. We're also referencing a custom\ntag named <span class=\"ff1 fs2\">rack</span>. Before defining this rule, we will need to configure a custom Snitch which provides values\nfor the tag <span class=\"ff1 fs2\">rack</span>.",
    "hierarchy": [
      "Assign all replicas in shard1 to rack 730"
    ],
    "pageId": 931
  },
  {
    "content": "shard:shard1,replica:*,rack:730",
    "hierarchy": [
      "Assign all replicas in shard1 to rack 730"
    ],
    "pageId": 931
  },
  {
    "content": "In this case, the default value of <span class=\"ff1 fs2\">replica</span> is <span class=\"ff1 fs2\">*</span>, or all replicas. It can be omitted and the rule will be reduced to:",
    "hierarchy": [
      "Assign all replicas in shard1 to rack 730"
    ],
    "pageId": 931
  },
  {
    "content": "shard:shard1,rack:730",
    "hierarchy": [
      "Assign all replicas in shard1 to rack 730"
    ],
    "pageId": 931
  },
  {
    "content": "This rule uses the <span class=\"ff1 fs2\">replica</span> condition to define any number of replicas, but adds a pre-defined tag named\ncore<span class=\"code\"> and uses operators for \"less than 5\".</span>",
    "hierarchy": [
      "Create replicas in nodes with less than 5 cores only"
    ],
    "pageId": 931
  },
  {
    "content": "replica:*,cores:<5",
    "hierarchy": [
      "Create replicas in nodes with less than 5 cores only"
    ],
    "pageId": 931
  },
  {
    "content": "Again, we can simplify this to use the default value for <span class=\"ff1 fs2\">replica</span>, like so:",
    "hierarchy": [
      "Create replicas in nodes with less than 5 cores only"
    ],
    "pageId": 931
  },
  {
    "content": "cores:<5",
    "hierarchy": [
      "Create replicas in nodes with less than 5 cores only"
    ],
    "pageId": 931
  },
  {
    "content": "This rule uses only the pre-defined tag <span class=\"ff1 fs2\">host</span> to define an IP address where replicas should not be placed.",
    "hierarchy": [
      "Do not create any replicas in host 192.45.67.3"
    ],
    "pageId": 931
  },
  {
    "content": "host:!192.45.67.3",
    "hierarchy": [
      "Do not create any replicas in host 192.45.67.3"
    ],
    "pageId": 931
  },
  {
    "content": "Rules are specified per collection during collection creation as request parameters. It is possible to specify\nmultiple ‘rule' and ‘snitch’ params as in this example:",
    "hierarchy": [
      "Defining Rules"
    ],
    "pageId": 931
  },
  {
    "content": "snitch=class:EC2Snitch&rule=shard:*,replica:1,dc:dc1&rule=shard:*,replica:<2,dc:dc3",
    "hierarchy": [
      "Defining Rules"
    ],
    "pageId": 931
  },
  {
    "content": "These rules are persisted in <span class=\"ff1 fs2\">clusterstate.json</span> in ZooKeeper and are available throughout the lifetime of\nthe collection. This enables the system to perform any future node allocation without direct user interaction.\nThe rules added during collection creation can be modified later using the <span class=\"link\">MODIFYCOLLECTION</span> API.",
    "hierarchy": [
      "Defining Rules"
    ],
    "pageId": 931
  },
  {
    "content": "Cross Data Center Replication (CDCR) allows you to create multiple SolrCloud data centers and keep them in\nsync.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)"
    ],
    "pageId": 932
  },
  {
    "content": "The <span class=\"link\">SolrCloud</span> architecture is designed to support <span class=\"link\">Near Real Time (NRT)</span> searches on a Solr collection that\nusual consists of multiple nodes in a single data center. CDCR augments this model by forwarding updates\nfrom a Solr collection in one data center to a parallel Solr collection in another data center where the\nnetwork latencies are greater than the SolrCloud model was designed to accommodate.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "What is CDCR?"
    ],
    "pageId": 932
  },
  {
    "content": "For more information about CDCR, see the following sections:",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "What is CDCR?"
    ],
    "pageId": 932
  },
  {
    "content": "<span class=\"link\">CDCR Architecture</span>: A detailed overview of how CDCR works.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "What is CDCR?"
    ],
    "pageId": 932
  },
  {
    "content": "<span class=\"link\">CDCR Configuration</span>: How to set up and initialize CDCR for your cluster.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "What is CDCR?"
    ],
    "pageId": 932
  },
  {
    "content": "<span class=\"link\">CDCR Operations</span>: Information on monitoring CDCR and upgrading your cluster when using CDCR.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "What is CDCR?"
    ],
    "pageId": 932
  },
  {
    "content": "<span class=\"link\">CDCR API</span>: Reference for the CDCR API.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "What is CDCR?"
    ],
    "pageId": 932
  },
  {
    "content": "For the purposes of discussing CDCR, the following terminology is used. If you are already familiar with\nSolrCloud, many of these terms will already be familiar to you.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "Node\nA JVM instance running Solr; a server.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "Cluster\nA set of Solr nodes managed as a single unit by a ZooKeeper ensemble hosting one or more Collections.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "Data Center\nA group of networked servers hosting a Solr cluster. For CDCR, the terms <span class=\"code\">Cluster</span> and <span class=\"code\">Data Center</span> are\ninterchangeable as we assume that each Solr cluster is hosted in a different group of networked servers.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "Shard\nA sub-index of a single logical collection. This may be spread across multiple nodes of the cluster. Each\nshard can have 1-N replicas.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "Leader\nEach shard has replica identified as its leader. All the writes for documents belonging to a shard are\nrouted through the leader.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "Replica\nA copy of a shard for use in failover or load balancing. Replicas comprising a shard can either be leaders\nor non-leaders.",
    "hierarchy": [
      "Cross Data Center Replication (CDCR)",
      "CDCR Glossary"
    ],
    "pageId": 932
  },
  {
    "content": "A convenience term for a replica that is <span class=\"ff2\">not</span> the leader of a shard.",
    "hierarchy": [
    ],
    "pageId": 933
  },
  {
    "content": "Collection\nA logical index, consisting of one or more shards. A cluster can have multiple collections.",
    "hierarchy": [
    ],
    "pageId": 933
  },
  {
    "content": "Update\nAn operation that changes the collection's index in any way. This could be adding a new document,\ndeleting documents or changing a document.",
    "hierarchy": [
    ],
    "pageId": 933
  },
  {
    "content": "Update Log(s)\nAn append-only log of write operations maintained by each node.",
    "hierarchy": [
    ],
    "pageId": 933
  },
  {
    "content": "With CDCR, Source and Target data centers can each serve search queries when CDCR is operating. The\nTarget data center will lag somewhat behind the Source cluster due to propagation delays.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "Data changes on the Source data center are replicated to the Target data center only after they are persisted\nto disk. The data changes can be replicated in near real-time (with a small delay) or could be scheduled to be\nsent at longer intervals to the Target data center. CDCR can \"bootstrap\" the collection to the Target data\ncenter. Since this is a full copy of the entire index, network bandwidth should be considered. Of course both\nSource and Target collections may be empty to start.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "Each shard leader in the Source data center will be responsible for replicating its updates to the\ncorresponding leader in the Target data center. When receiving updates from the Source data center, shard\nleaders in the Target data center will replicate the changes to their own replicas as normal SolrCloud\nupdates.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "This replication model is designed to tolerate some degradation in connectivity, accommodate limited\nbandwidth, and support batch updates to optimize communication.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "Replication supports both a new empty index and pre-built indexes. In the scenario where the replication is\nset up on a pre-built index in the Source cluster and nothing on the Target cluster, CDCR will replicate the\nentire<span class=\"ff1\"> index from the Source to Target.</span>",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "The directional nature of the implementation implies a \"push\" model from the Source collection to the\nTarget collection. Therefore, the Source configuration must be able to \"see\" the ZooKeeper ensemble in the\nTarget cluster. The ZooKeeper ensemble is provided configured in the Source's <span class=\"ff4 fs3\">solrconfig.xml</span> file.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "CDCR is configured to replicate from collections in the Source cluster to collections in the Target cluster on a\ncollection-by-collection basis. Since CDCR is configured in <span class=\"ff4 fs3\">solrconfig.xml</span> (on both Source and Target\nclusters), the settings can be tailored for the needs of each collection.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "CDCR can be configured to replicate from one collection to a second collection <span class=\"ff2\">within the same cluster</span>. That is\na specialized scenario not covered in this Guide.",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview"
    ],
    "pageId": 933
  },
  {
    "content": "When uni-directional updates are configured, updates and deletes are first written to the Source cluster,",
    "hierarchy": [
      "CDCR Architecture",
      "CDCR Architecture Overview",
      "Uni-Directional Architecture"
    ],
    "pageId": 933
  },
  {
    "content": "then forwarded to one or more Target data centers, as illustrated in this graphic:",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "With uni-directional updates, the Target data center(s) will not propagate updates such as adds, updates, or\ndeletes to the Source data center and updates should not be sent to any of the Target data center(s).",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "The data flow sequence is:",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "1.A shard leader receives a new update that is processed by its update processor chain.\n2.The data update is first applied to the local index.\n3.Upon successful application of the data update on the local index, the data update is added to CDCR's\nUpdate Logs queue.",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "4.After the data update is persisted to disk, the data update is sent to the replicas within the data center.\n5.After Step 4 is successful, CDCR reads the data update from the Update Logs and pushes it to the\ncorresponding collection in the Target data center. This is necessary in order to ensure consistency\nbetween the Source and Target data centers.",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "6.The leader on the Target data center writes the data locally and forwards it to all its followers.",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "Steps 1, 2, 3 and 4 are performed synchronously by SolrCloud; Step 5 is performed asynchronously by a\nbackground thread. Given that CDCR replication is performed asynchronously, it becomes possible to push",
    "hierarchy": [
    ],
    "pageId": 934
  },
  {
    "content": "batch updates in order to minimize network communication overhead. Also, if CDCR is unable to push the\nupdate at a given time, for example, due to a degradation in connectivity, it can retry later without any\nimpact on the Source data center.",
    "hierarchy": [
    ],
    "pageId": 935
  },
  {
    "content": "One implication of the architecture is that the leaders in the Source cluster must be able to \"see\" the leaders\nin the Target cluster. Since leaders may change in both Source and Target collections, all nodes in the Source\ncluster must be able to \"see\" all Solr nodes in the Target cluster. Firewalls, ACL rules, etc., must be\nconfigured to allow this.",
    "hierarchy": [
    ],
    "pageId": 935
  },
  {
    "content": "This design works most robustly if both the Source and Target clusters have the same number of shards.\nThere is no requirement that the shards in the Source and Target collection have the same number of\nreplicas.",
    "hierarchy": [
    ],
    "pageId": 935
  },
  {
    "content": "Having different numbers of shards on the Source and Target cluster is possible, but is also an \"expert\"\nconfiguration as that option imposes certain constraints and is not generally recommended. Most of the\nscenarios where having differing numbers of shards are contemplated are better accomplished by hosting\nmultiple shards on each Solr instance.",
    "hierarchy": [
    ],
    "pageId": 935
  },
  {
    "content": "When bi-directional updates are configured, either cluster can act as a Source or a Target, and that role can\nshift between the clusters, as illustrated in this graphic:",
    "hierarchy": [
      "Bi-Directional Architecture"
    ],
    "pageId": 935
  },
  {
    "content": "With bi-directional updates, indexing and querying must be done on a single cluster at a time to maintain\nconsistency. The second cluster is used when the first cluster is down. Simplifying, one cluster can act as\nSource and other as Target but both roles, Source and Target, cannot be assigned to any single cluster at the\nsame time. Failover is handled smoothly without any configuration changes. Updates sent from Source data\ncenter to Target is not propagated back to Source when bi-directional updates are configured.",
    "hierarchy": [
    ],
    "pageId": 936
  },
  {
    "content": "The data flow sequence is similar from Step 1 to 6 above, with an additional step:",
    "hierarchy": [
    ],
    "pageId": 936
  },
  {
    "content": "7.When bi-directional updates are configured, the updates received from Source are flagged on Target and\nnot forwarded further.",
    "hierarchy": [
    ],
    "pageId": 936
  },
  {
    "content": "All the behavior(s) and constraint(s) explained in uni-directional data flow are applicable to the respective\nSource and Target clusters in this scenario.",
    "hierarchy": [
    ],
    "pageId": 936
  },
  {
    "content": "What follows is a discussion of the key features and components in CDCR's architecture:",
    "hierarchy": [
      "Major Components of CDCR"
    ],
    "pageId": 936
  },
  {
    "content": "In order to configure CDCR, the Source data center requires the host address of the ZooKeeper cluster",
    "hierarchy": [
      "Major Components of CDCR",
      "CDCR Configuration"
    ],
    "pageId": 936
  },
  {
    "content": "associated with the Target data center. The ZooKeeper host address is the only information needed by CDCR\nto instantiate the communication with the Target Solr cluster. The CDCR configuration section of\nsolrconfig.xml<span class=\"ff1 fs0\"> file on the Source cluster will therefore contain a list of ZooKeeper hosts. The CDCR</span>\nconfiguration section of <span class=\"ff2 fs1\">solrconfig.xml</span> might also contain secondary/optional configuration, such as the\nnumber of CDC Replicator threads, batch updates related settings, etc.",
    "hierarchy": [
    ],
    "pageId": 937
  },
  {
    "content": "CDCR supports incremental updates to either new or existing collections. CDCR may not be able to keep up\nwith very high volume updates, especially if there are significant communications latencies due to a slow\n\"pipe\" between the data centers. Some scenarios:",
    "hierarchy": [
      "CDCR Initialization"
    ],
    "pageId": 937
  },
  {
    "content": "There is an initial bulk load of a corpus followed by lower volume incremental updates. In this case, one\ncan do the initial bulk load and then enable CDCR. See the section <span class=\"link\">Initial Startup</span> for more information.",
    "hierarchy": [
      "CDCR Initialization"
    ],
    "pageId": 937
  },
  {
    "content": "The index is being built up from scratch, without a significant initial bulk load. CDCR can be set up on\nempty collections and keep them synchronized from the start.",
    "hierarchy": [
      "CDCR Initialization"
    ],
    "pageId": 937
  },
  {
    "content": "The index is always being updated at a volume too high for CDCR to keep up. This is especially possible in\nsituations where the connection between the Source and Target data centers is poor. This scenario is\nunsuitable for CDCR in its current form.",
    "hierarchy": [
      "CDCR Initialization"
    ],
    "pageId": 937
  },
  {
    "content": "The CDCR REST API is the primary form of end-user communication for admin commands.",
    "hierarchy": [
      "Inter-Data Center Communication"
    ],
    "pageId": 937
  },
  {
    "content": "A SolrJ client is used internally for CDCR operations. The SolrJ client gets its configuration information from\nthe <span class=\"ff2 fs1\">solrconfig.xml</span> file. Users of CDCR will not interact directly with the internal SolrJ implementation and\nwill interact with CDCR exclusively through the REST API.",
    "hierarchy": [
      "Inter-Data Center Communication"
    ],
    "pageId": 937
  },
  {
    "content": "CDCR replicates data updates from the Source to the Target data center by leveraging Update Logs. These\nlogs will replace SolrCloud's transaction log.",
    "hierarchy": [
      "Updates Tracking & Pushing"
    ],
    "pageId": 937
  },
  {
    "content": "A background thread regularly checks the Update Logs for new entries, and then forwards them to the\nTarget data center. The thread therefore needs to keep a checkpoint in the form of a pointer to the last\nupdate successfully processed in the Update Logs. Upon acknowledgement from the Target data center that\nupdates have been successfully processed, the Update Logs pointer is updated to reflect the current\ncheckpoint.",
    "hierarchy": [
      "Updates Tracking & Pushing"
    ],
    "pageId": 937
  },
  {
    "content": "This pointer must be synchronized across all the replicas. In the case where the leader goes down and a new\nleader is elected, the new leader will be able to resume replication from the last update by using this\nsynchronized pointer. The strategy to synchronize such a pointer across replicas will be explained next.",
    "hierarchy": [
      "Updates Tracking & Pushing"
    ],
    "pageId": 937
  },
  {
    "content": "If for some reason, the Target data center is offline or fails to process the updates, the thread will\nperiodically try to contact the Target data center and push the updates while buffering updates on the\nSource cluster. One implication of this is that the Source Update Logs directory should be periodically\nmonitored as the updates will continue to accumulate and will not be purged until the connection to the\nTarget data center is restored.",
    "hierarchy": [
      "Updates Tracking & Pushing"
    ],
    "pageId": 937
  },
  {
    "content": "A reliable synchronization of the update checkpoints between the shard leader and shard replicas is critical\nto avoid introducing inconsistency between the Source and Target data centers. Another important\nrequirement is that the synchronization must be performed with minimal network traffic to maximize\nscalability.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "In order to achieve this, the strategy is to:",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "Uniquely identify each update operation. This unique identifier will serve as pointer.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "Rely on two storages: an ephemeral storage on the Source shard leader, and a persistent storage on the\nTarget cluster.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "The shard leader in the Source cluster will be in charge of generating a unique identifier for each update\noperation, and will keep a copy of the identifier of the last processed updates in memory. The identifier will\nbe sent to the Target cluster as part of the update request. On the Target data center side, the shard leader\nwill receive the update request, store it along with the unique identifier in the Update Logs, and replicate it\nto the other shards.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "SolrCloud already provides a unique identifier for each update operation, i.e., a “version” number. This\nversion number is generated using a time-based lmport clock which is incremented for each update\noperation sent. This provides a “happened-before” ordering of the update operations that will be leveraged\nin (1) the initialization of the update checkpoint on the Source cluster, and in (2) the maintenance strategy of\nthe Update Logs.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "The persistent storage on the Target cluster is used only during the election of a new shard leader on the\nSource cluster. If a shard leader goes down on the Source cluster and a new leader is elected, the new leader\nwill contact the Target cluster to retrieve the last update checkpoint and instantiate its ephemeral pointer.\nOn such a request, the Target cluster will retrieve the latest identifier received across all the shards, and\nsend it back to the Source cluster. To retrieve the latest identifier, every shard leader will look up the\nidentifier of the first entry in its Update Logs and send it back to a coordinator. The coordinator will have to\nselect the highest among them.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "This strategy does not require any additional network traffic and ensures reliable pointer synchronization.\nConsistency is principally achieved by leveraging SolrCloud. The update workflow of SolrCloud ensures that\nevery update is applied to the leader and also to any of the replicas. If the leader goes down, a new leader is\nelected. During the leader election, a synchronization is performed between the new leader and the other\nreplicas. This ensures that the new leader has a consistent Update Logs with the previous leader. Having a\nconsistent Update Logs means that:",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "On the Source cluster, the update checkpoint can be reused by the new leader.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "On the Target cluster, the update checkpoint will be consistent between the previous and new leader.\nThis ensures the correctness of the update checkpoint sent by a newly elected leader from the Target\ncluster.",
    "hierarchy": [
      "Synchronization of Update Checkpoints"
    ],
    "pageId": 938
  },
  {
    "content": "The CDCR replication logic requires modification to the maintenance logic of Update Logs on the Source\ndata center. Initially, the Update Logs acts as a fixed size queue, limited to 100 update entries by default. In\nCDCR, the Update Logs must act as a queue of variable size as they need to keep track of all the updates up",
    "hierarchy": [
      "Maintenance of Update Logs"
    ],
    "pageId": 938
  },
  {
    "content": "through the last processed update by the Target data center. Entries in the Update Logs are removed only\nwhen all pointers (one pointer per Target data center) are after them.",
    "hierarchy": [
    ],
    "pageId": 939
  },
  {
    "content": "If the communication with one of the Target data center is slow, the Update Logs on the Source data center\ncan grow to a substantial size. In such a scenario, it is necessary for the Update Logs to be able to efficiently\nfind a given update operation given its identifier. Given that its identifier is an incremental number, it is\npossible to implement an efficient search strategy. Each transaction log file contains as part of its filename\nthe version number of the first element. This is used to quickly traverse all the transaction log files and find\nthe transaction log file containing one specific version number.",
    "hierarchy": [
    ],
    "pageId": 939
  },
  {
    "content": "CDCR provides the following monitoring capabilities over the replication operations:",
    "hierarchy": [
      "Monitoring Operations"
    ],
    "pageId": 939
  },
  {
    "content": "Monitoring of the outgoing and incoming replications, with information such as the Source and Target\nnodes, their status, etc.",
    "hierarchy": [
      "Monitoring Operations"
    ],
    "pageId": 939
  },
  {
    "content": "Statistics about the replication, with information such as operations (add/delete) per second, number of\ndocuments in the queue, etc.",
    "hierarchy": [
      "Monitoring Operations"
    ],
    "pageId": 939
  },
  {
    "content": "Information about the lifecycle and statistics will be provided on a per-shard basis by the CDC Replicator\nthread. The CDCR API can then aggregate this information an a collection level.",
    "hierarchy": [
      "Monitoring Operations"
    ],
    "pageId": 939
  },
  {
    "content": "The CDC Replicator is a background thread that is responsible for replicating updates from a Source data\ncenter to one or more Target data centers. It is responsible for providing monitoring information on a per-\nshard basis. As there can be a large number of collections and shards in a cluster, we will use a fixed-size\npool of CDC Replicator threads that will be shared across shards.",
    "hierarchy": [
      "CDC Replicator"
    ],
    "pageId": 939
  },
  {
    "content": "The current design of CDCR has some limitations. CDCR will continue to evolve over time and many of these\nlimitations will be addressed. Among them are:",
    "hierarchy": [
      "CDCR Limitations"
    ],
    "pageId": 939
  },
  {
    "content": "CDCR is unlikely to be satisfactory for bulk-load situations where the update rate is high, especially if the\nbandwidth between the Source and Target clusters is restricted. In this scenario, the initial bulk load\nshould be performed, the Source and Target data centers synchronized and CDCR be utilized for\nincremental updates.",
    "hierarchy": [
      "CDCR Limitations"
    ],
    "pageId": 939
  },
  {
    "content": "CDCR works most robustly with the same number of shards in the Source and Target collection. The\nshards in the two collections may have different numbers of replicas.",
    "hierarchy": [
      "CDCR Limitations"
    ],
    "pageId": 939
  },
  {
    "content": "Running CDCR with the indexes on HDFS is not currently supported, see the <span class=\"link\">Solr CDCR over HDFS</span> JIRA\nissue.",
    "hierarchy": [
      "CDCR Limitations"
    ],
    "pageId": 939
  },
  {
    "content": "Configuration files (<span class=\"code\">solrconfig.xml</span>, <span class=\"code\">managed-schema</span>, etc.) are not automatically synchronized between\nthe Source and Target clusters. This means that when the Source schema or <span class=\"code\">solrconfig.xml</span> files are\nchanged, those changes must be replicated manually to the Target cluster. This includes adding fields by\nthe <span class=\"link\">Schema API</span> or <span class=\"link\">Managed Resources</span> as well as hand editing those files.",
    "hierarchy": [
      "CDCR Limitations"
    ],
    "pageId": 939
  },
  {
    "content": "The Source and Target configurations differ in the case of the data centers being in separate clusters.\n\"Cluster\" here means separate ZooKeeper ensembles controlling disjoint Solr instances. Whether these data\ncenters are physically separated or not is immaterial for this discussion.",
    "hierarchy": [
      "CDCR Configuration"
    ],
    "pageId": 940
  },
  {
    "content": "As described in the section <span class=\"link\">CDCR Architecture</span>, two approaches are supported: uni-directional updates and\nbi-directional updates.",
    "hierarchy": [
      "CDCR Configuration"
    ],
    "pageId": 940
  },
  {
    "content": "All CDCR configuration is done in the <span class=\"code\">solrconfig.xml</span> file. Because this is a per-collection configuration file,\nall CDCR configuration is done for each collection.",
    "hierarchy": [
      "CDCR Configuration"
    ],
    "pageId": 940
  },
  {
    "content": "Here is a sample of a Source configuration file, a section in <span class=\"code\">solrconfig.xml</span>. The presence of the <span class=\"code\"><replica></span>\nsection causes CDCR to use this cluster as the Source and it should not be present in the Target collections.\nDetails about each setting are after the two examples. The source example has buffering disabled, the\ndefault is enabled:",
    "hierarchy": [
      "CDCR Configuration",
      "Uni-Directional Updates",
      "Source Configuration"
    ],
    "pageId": 940
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replica\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"zkHost\"<span class=\"fc0\">></span></span>10.240.18.211:2181,10.240.18.212:2181<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--</span>",
    "hierarchy": [
    ],
    "pageId": 941
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"source\"<span class=\"fc0\">></span></span>collection1<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"target\"<span class=\"fc0\">></span></span>collection1<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 941
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replicator\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"threadPoolSize\"<span class=\"fc0\">></span></span>8<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"schedule\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"batchSize\"<span class=\"fc0\">></span></span>128<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 941
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"updateLogSynchronizer\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"schedule\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 941
  },
  {
    "content": "Ê <span class=\"fc0\"><updateLog</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateLog\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dir\"<span class=\"fc0\">></span></span>${solr.ulog.dir:}<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--Any parameters from the original <updateLog> section --></span>\nÊ <span class=\"fc0\"></updateLog></span>",
    "hierarchy": [
    ],
    "pageId": 941
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- Other configuration options such as autoCommit should still be present --></span>",
    "hierarchy": [
    ],
    "pageId": 941
  },
  {
    "content": "Here is a typical Target configuration.",
    "hierarchy": [
      "Target Configuration"
    ],
    "pageId": 941
  },
  {
    "content": "Target instance must configure an update processor chain that is specific to CDCR. The update processor\nchain must include the <span class=\"ff1 fs1\">CdcrUpdateProcessorFactory</span>. The task of this processor is to ensure that the\nversion numbers attached to update requests coming from a CDCR Source SolrCloud are reused and not\noverwritten by the Target. A properly configured Target configuration looks similar to this:",
    "hierarchy": [
      "Target Configuration"
    ],
    "pageId": 941
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- recommended for Target clusters --></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"buffer\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaultState\"<span class=\"fc0\">></span></span>disabled<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 942
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"update.chain\"<span class=\"fc0\">></span></span>cdcr-processor-chain<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 942
  },
  {
    "content": "Ê <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RunUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 942
  },
  {
    "content": "Ê <span class=\"fc0\"><updateLog</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateLog\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dir\"<span class=\"fc0\">></span></span>${solr.ulog.dir:}<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--Any parameters from the original <updateLog> section --></span>\nÊ <span class=\"fc0\"></updateLog></span>",
    "hierarchy": [
    ],
    "pageId": 942
  },
  {
    "content": "Ê <span class=\"fc4\"><!-- Other configuration options such as autoCommit should still be present --></span>",
    "hierarchy": [
    ],
    "pageId": 942
  },
  {
    "content": "The configurations in both Cluster 1 and 2 are identical with respective <span class=\"ff1 fs2\">zkHost</span> string specified in each\ncluster's <span class=\"ff1 fs2\">solrconfig.xml</span>.",
    "hierarchy": [
      "Bi-Directional Updates"
    ],
    "pageId": 942
  },
  {
    "content": "Both Cluster 1 and Cluster 2 can act as Source and Target at any given point of time but a\ncluster cannot be both Source and Target at the same time.",
    "hierarchy": [
      "Bi-Directional Updates"
    ],
    "pageId": 942
  },
  {
    "content": "Here is a sample of a Cluster 1 configuration file, a section in <span class=\"ff1 fs2\">solrconfig.xml</span>. Cluster 2 <span class=\"ff1 fs2\">zkhost</span> string is\nspecified in a <span class=\"ff1 fs2\">CdcrRequestHandler</span> declaration:",
    "hierarchy": [
      "Bi-Directional Updates",
      "Cluster 1 Configuration"
    ],
    "pageId": 942
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"update.chain\"<span class=\"fc0\">></span></span>cdcr-processor-chain<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "Ê <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RunUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replica\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"zkHost\"<span class=\"fc0\">></span></span>10.240.19.241:2181,10.240.19.242:2181<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--</span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"source\"<span class=\"fc0\">></span></span>collection1<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"target\"<span class=\"fc0\">></span></span>collection1<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replicator\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"threadPoolSize\"<span class=\"fc0\">></span></span>8<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"schedule\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"batchSize\"<span class=\"fc0\">></span></span>128<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"updateLogSynchronizer\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"schedule\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "Ê <span class=\"fc0\"><updateLog</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateLog\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dir\"<span class=\"fc0\">></span></span>${solr.ulog.dir:}<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--Any parameters from the original <updateLog> section --></span>\nÊ <span class=\"fc0\"></updateLog></span>",
    "hierarchy": [
    ],
    "pageId": 943
  },
  {
    "content": "The configuration of the 2nd cluster is identical to the configuration of Cluster 1, with the Cluster 1 <span class=\"ff1 fs1\">zkHost</span>\nstring specified in <span class=\"ff1 fs1\">CdcrRequestHandler</span> definition:",
    "hierarchy": [
      "Cluster 2 Configuration"
    ],
    "pageId": 943
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"update.chain\"<span class=\"fc0\">></span></span>cdcr-processor-chain<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "Ê <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>\nÊ <span class=\"fc0\"><processor</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.RunUpdateProcessorFactory\"<span class=\"fc0\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replica\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"zkHost\"<span class=\"fc0\">></span></span>10.250.18.211:2181,10.250.18.212:2181<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--</span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"source\"<span class=\"fc0\">></span></span>collection1<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"target\"<span class=\"fc0\">></span></span>collection1<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replicator\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"threadPoolSize\"<span class=\"fc0\">></span></span>8<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"schedule\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"batchSize\"<span class=\"fc0\">></span></span>128<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"updateLogSynchronizer\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"schedule\"<span class=\"fc0\">></span></span>1000<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "Ê <span class=\"fc0\"><updateLog</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.CdcrUpdateLog\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dir\"<span class=\"fc0\">></span></span>${solr.ulog.dir:}<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc4\"><!--Any parameters from the original <updateLog> section --></span>\nÊ <span class=\"fc0\"></updateLog></span>",
    "hierarchy": [
    ],
    "pageId": 944
  },
  {
    "content": "The configuration details, defaults and options are as follows:",
    "hierarchy": [
      "CDCR Configuration Parameters"
    ],
    "pageId": 944
  },
  {
    "content": "CDCR can be configured to forward update requests to one or more Target collections. A Target collection is",
    "hierarchy": [
      "CDCR Configuration Parameters",
      "The Replica Element"
    ],
    "pageId": 944
  },
  {
    "content": "defined with a “replica” list as follows:",
    "hierarchy": [
    ],
    "pageId": 945
  },
  {
    "content": "zkHost\nThe host address for ZooKeeper of the Target SolrCloud. Usually this is a comma-separated list of\naddresses to each node in the Target ZooKeeper ensemble. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 945
  },
  {
    "content": "Source\nThe name of the collection on the Source SolrCloud to be replicated. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 945
  },
  {
    "content": "Target\nThe name of the collection on the Target SolrCloud to which updates will be forwarded. This parameter is\nrequired.",
    "hierarchy": [
    ],
    "pageId": 945
  },
  {
    "content": "The CDC Replicator is the component in charge of forwarding updates to the replicas. The replicator will\nmonitor the update logs of the Source collection and will forward any new updates to the Target collection.",
    "hierarchy": [
      "The Replicator Element"
    ],
    "pageId": 945
  },
  {
    "content": "The replicator uses a fixed thread pool to forward updates to multiple replicas in parallel. If more than one\nreplica is configured, one thread will forward a batch of updates from one replica at a time in a round-robin\nfashion. The replicator can be configured with a “replicator” list as follows:",
    "hierarchy": [
      "The Replicator Element"
    ],
    "pageId": 945
  },
  {
    "content": "threadPoolSize\nThe number of threads to use for forwarding updates. One thread per replica is recommended. The\ndefault is <span class=\"ff2 fs1\">2</span>.",
    "hierarchy": [
      "The Replicator Element"
    ],
    "pageId": 945
  },
  {
    "content": "schedule\nThe delay in milliseconds for the monitoring the update log(s). The default is <span class=\"ff2 fs1\">10</span>.",
    "hierarchy": [
      "The Replicator Element"
    ],
    "pageId": 945
  },
  {
    "content": "batchSize\nThe number of updates to send in one batch. The optimal size depends on the size of the documents.\nLarge batches of large documents can increase your memory usage significantly. The default is <span class=\"ff2 fs1\">128</span>.",
    "hierarchy": [
      "The Replicator Element"
    ],
    "pageId": 945
  },
  {
    "content": "Expert: Non-leader nodes need to synchronize their update logs with their leader node from time to time in\norder to clean deprecated transaction log files. By default, such a synchronization process is performed\nevery minute. The schedule of the synchronization can be modified with a “updateLogSynchronizer” list as\nfollows:",
    "hierarchy": [
      "The updateLogSynchronizer Element"
    ],
    "pageId": 945
  },
  {
    "content": "If the updateLogSynchronizer element is omitted from the Source cluster, transaction logs\nmay accumulate on non-leaders.",
    "hierarchy": [
      "The updateLogSynchronizer Element"
    ],
    "pageId": 945
  },
  {
    "content": "schedule\nThe delay in milliseconds for synchronizing the update logs. The default is <span class=\"ff2 fs1\">60000</span>.",
    "hierarchy": [
      "The updateLogSynchronizer Element"
    ],
    "pageId": 945
  },
  {
    "content": "When buffering updates, the update logs will store all the updates indefinitely. It is best to disable buffering\non both the Source and Target clusters during normal operation as when buffering is enabled the Update\nLogs will grow without limit. Enbling buffering is intended for special maintenance periods. Buffering can be\ndisabled at startup with a “buffer” list and the parameter “defaultState” as follows:",
    "hierarchy": [
      "The Buffer Element"
    ],
    "pageId": 945
  },
  {
    "content": "defaultState\nThe state of the buffer at startup. The default is <span class=\"ff1 fs0\">enabled</span>.",
    "hierarchy": [
    ],
    "pageId": 946
  },
  {
    "content": "Buffering is designed to augment maintenance windows. The following points should be\nkept in mind:",
    "hierarchy": [
    ],
    "pageId": 946
  },
  {
    "content": "When buffering is enabled, the Update Logs will grow without limit; they will never be\npurged.\n•During normal operation, the Update Logs will automatically accrue on the Source data\ncenter if the Target data center is unavailable; It is not necessary to enable buffering for\nCDCR to handle routine network disruptions.\n◦For this reason, monitoring disk usage on the Source data center is recommended\nas an additional check that the Target data center is receiving updates.\n•For uni-directional updates, buffering should <span class=\"ff4\">not</span> be enabled on the Target data center\nas Update Logs would accrue without limit.\n•If buffering is enabled and then disabled, the Update Logs will be removed when their\ncontents have been sent to the Target data center. This process may take some time\nand is triggered by additional updates the Source cluster.\n◦Update Log cleanup is not triggered until a new update is sent to the Source data\ncenter.",
    "hierarchy": [
    ],
    "pageId": 946
  },
  {
    "content": "Solr 6.2 added the functionality to allow CDCR to replicate the entire index from the Source\nto the Target data centers on first time startup as an alternative to the following procedure.\nFor very large indexes, time should be allocated for the initial synchronization if this option\nis chosen.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "This is a general approach for initializing CDCR in a production environment based upon an approach taken\nby the initial working installation of CDCR and generously contributed to illustrate a \"real world\" scenario.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "Customer uses the CDCR approach to keep a remote disaster-recovery instance available for production\nbackup. This is a uni-directional solution.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "Customer has 26 clouds with 200 million assets per cloud (15GB indexes). Total document count is over\n4.8 billion.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "◦Source and Target clouds were synched in 2-3 hour maintenance windows to establish the base index\nfor the Targets.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "As usual, it is good to start small. Sync a single cloud and monitor for a period of time before doing the\nothers. You may need to adjust your settings several times before finding the right balance.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "Before starting, stop or pause the indexers. This is best done during a small maintenance window.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "Stop the SolrCloud instances at the Source.",
    "hierarchy": [
      "Initial Startup"
    ],
    "pageId": 946
  },
  {
    "content": "<span class=\"ls1\">Upload the modified <span class=\"ff2 fs1\">solrconfig.xml</span> to ZooKeeper on both Source and Target as appropriate, see the</span>\nexamples above.",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Sync the index directories from the Source collection to Target collection across to the corresponding</span>\nshard nodes. <span class=\"ff2 fs1\">rsync</span> works well for this.",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "For example, if there are 2 shards on collection1 with 2 replicas for each shard, copy the corresponding\nindex directories from:",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "shard1replica1Sourcetoshard1replica1Target",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "shard1replica2Sourcetoshard1replica2Target",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "shard2replica1Sourcetoshard2replica1Target",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "shard2replica2Sourcetoshard2replica2Target",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Start the ZooKeeper on the Target (DR) side.</span>",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Start the SolrCloud on the Target (DR) side.</span>",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Start the ZooKeeper on the Source side.</span>",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Start the SolrCloud on the Source side. As a general rule, the Target (DR) side of the SolrCloud should be</span>\nstarted before the Source side.",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Activate the CDCR on Source instance using the CDCR API:</span>",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "http://host:port/solr/<collection_name>/cdcr?action=START",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "There is no need to run the <span class=\"ff2 fs1\">/cdcr?action=START</span> command on the Target.",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Disable the buffer on the Target and Source:</span>",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "http://host:port/solr/collection_name/cdcr?action=DISABLEBUFFER",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "<span class=\"ls1\">Re-enable indexing.</span>",
    "hierarchy": [
    ],
    "pageId": 947
  },
  {
    "content": "With CDCR, the Target ZooKeepers will have connections from the Target clouds and the Source clouds. You\nmay need to increase the <span class=\"ff2 fs1\">maxClientCnxns</span> setting in <span class=\"ff2 fs1\">zoo.cfg</span>.",
    "hierarchy": [
      "ZooKeeper Settings"
    ],
    "pageId": 947
  },
  {
    "content": "## set numbers of connection to 800 from client\n## is maxClientCnxns=0 that means no limit\nmaxClientCnxns=800",
    "hierarchy": [
      "ZooKeeper Settings"
    ],
    "pageId": 947
  },
  {
    "content": "1.Network and disk space monitoring are essential. Ensure that the system has plenty of available storage\nto queue up changes if there is a disconnect between the Source and Target. A network outage between\nthe two data centers can cause your disk usage to grow. Some tips:",
    "hierarchy": [
      "Monitoring"
    ],
    "pageId": 948
  },
  {
    "content": "a.Set a monitor for your disks to send alerts when the disk gets over a certain percentage (e.g., 70%).\nb.Run a test. With moderate indexing, how long can the system queue changes before you run out of\ndisk space?\n2.Create a simple way to check the counts between the Source and the Target.\na.Keep in mind that if indexing is running, the Source and Target may not match document for\ndocument. Set an alert to fire if the difference is greater than some percentage of the overall cloud\nsize.",
    "hierarchy": [
      "Monitoring"
    ],
    "pageId": 948
  },
  {
    "content": "When rolling in upgrades to your indexer or application, you should shutdown the Source and the Target.\nDepending on your setup, you may want to pause/stop indexing, deploy the release or patch, then re-enable\nindexing. Then start the Target last.",
    "hierarchy": [
      "Upgrading and Patching Production"
    ],
    "pageId": 948
  },
  {
    "content": "There is no need to reissue the DISABLEBUFFERS or START commands. These are persisted.",
    "hierarchy": [
      "Upgrading and Patching Production"
    ],
    "pageId": 948
  },
  {
    "content": "After starting the Target, run a simple test. Add a test document to each of the Source clouds. Then\ncheck for it on the Target.",
    "hierarchy": [
      "Upgrading and Patching Production"
    ],
    "pageId": 948
  },
  {
    "content": "#send to the Source\ncurl http://<Source>/solr/cloud1/update -H 'Content-type:application/json' -d '[{\"SKU\":\"ABC\"}]'",
    "hierarchy": [
      "Upgrading and Patching Production"
    ],
    "pageId": 948
  },
  {
    "content": "#check the Target\ncurl \"http://<Target>:8983/solr/<collection_name>/select?q=SKU:ABC&indent=true\"",
    "hierarchy": [
      "Upgrading and Patching Production"
    ],
    "pageId": 948
  },
  {
    "content": "The CDCR API is used to control and monitor the replication process. Control actions are performed at a\ncollection level, i.e., by using the following base URL for API calls:\nhttp://localhost:8983/solr/<collection>/cdcr<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "CDCR API"
    ],
    "pageId": 948
  },
  {
    "content": "Monitor actions are performed at a core level, i.e., by using the following base URL for API calls:\nhttp://localhost:8983/solr/<core>/cdcr<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "CDCR API"
    ],
    "pageId": 948
  },
  {
    "content": "Currently, none of the CDCR API calls have parameters.",
    "hierarchy": [
      "CDCR API"
    ],
    "pageId": 948
  },
  {
    "content": "<collection>/cdcr?action=STATUS: <span class=\"link\">Returns the current state</span> of CDCR.",
    "hierarchy": [
      "CDCR API",
      "API Entry Points"
    ],
    "pageId": 948
  },
  {
    "content": "<collection>/cdcr?action=START: <span class=\"link\">Starts CDCR</span> replication",
    "hierarchy": [
      "CDCR API",
      "API Entry Points"
    ],
    "pageId": 948
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\"><collection>/cdcr?action=STOP</span><span class=\"ls1\">: <span class=\"link\">Stops CDCR</span> replication.</span>",
    "hierarchy": [
    ],
    "pageId": 949
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\"><collection>/cdcr?action=ENABLEBUFFER</span><span class=\"ls1\">: <span class=\"link\">Enables the buffering</span> of updates.</span>",
    "hierarchy": [
    ],
    "pageId": 949
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\"><collection>/cdcr?action=DISABLEBUFFER</span><span class=\"ls1\">: <span class=\"link\">Disables the buffering</span> of updates.</span>",
    "hierarchy": [
    ],
    "pageId": 949
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">core/cdcr?action=QUEUES</span><span class=\"ls1\">: <span class=\"link\">Fetches statistics about the queue</span> for each replica and about the update</span>\nlogs.",
    "hierarchy": [
    ],
    "pageId": 949
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">core/cdcr?action=OPS</span><span class=\"ls1\">: <span class=\"link\">Fetches statistics about the replication performance</span> (operations per second) for</span>\neach replica.",
    "hierarchy": [
    ],
    "pageId": 949
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">core/cdcr?action=ERRORS</span><span class=\"ls1\">: <span class=\"link\">Fetches statistics and other information about replication errors</span> for each</span>\nreplica.",
    "hierarchy": [
    ],
    "pageId": 949
  },
  {
    "content": "solr/<collection>/cdcr?action=STATUS",
    "hierarchy": [
      "Control Commands",
      "CDCR STATUS"
    ],
    "pageId": 949
  },
  {
    "content": "http://localhost:8983/solr/techproducts/cdcr?action=STATUS",
    "hierarchy": [
      "Control Commands",
      "CDCR STATUS",
      "CDCR Status Example"
    ],
    "pageId": 949
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"responseHeader\"</span>: {\nÊ <span class=\"fc3\">\"status\"</span>: <span class=\"fc4\">0</span>,\nÊ <span class=\"fc3\">\"QTime\"</span>: <span class=\"fc4\">0</span>\nÊ },\nÊ <span class=\"fc3\">\"status\"</span>: {\nÊ <span class=\"fc3\">\"process\"</span>: <span class=\"fc5\">\"stopped\"</span>,\nÊ <span class=\"fc3\">\"buffer\"</span>: <span class=\"fc5\">\"enabled\"</span>\nÊ }\n}",
    "hierarchy": [
      "Control Commands",
      "CDCR STATUS",
      "CDCR Status Example"
    ],
    "pageId": 949
  },
  {
    "content": "solr/<collection>/cdcr?action=ENABLEBUFFER",
    "hierarchy": [
      "Control Commands",
      "ENABLEBUFFER",
      "CDCR Status Example"
    ],
    "pageId": 949
  },
  {
    "content": "http://localhost:8983/solr/techproducts/cdcr?action=ENABLEBUFFER",
    "hierarchy": [
      "Control Commands",
      "ENABLEBUFFER",
      "Enable Buffer Example"
    ],
    "pageId": 949
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">0</span>\nÊ },\nÊ <span class=\"fc1\">\"status\"</span>: {\nÊ <span class=\"fc1\">\"process\"</span>: <span class=\"fc3\">\"started\"</span>,\nÊ <span class=\"fc1\">\"buffer\"</span>: <span class=\"fc3\">\"enabled\"</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 950
  },
  {
    "content": "solr/<collection>/cdcr?action=DISABLEBUFFER",
    "hierarchy": [
      "DISABLEBUFFER"
    ],
    "pageId": 950
  },
  {
    "content": "http://localhost:8983/solr/techproducts/cdcr?action=DISABLEBUFFER",
    "hierarchy": [
      "DISABLEBUFFER",
      "Disable Buffer Example"
    ],
    "pageId": 950
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">0</span>\nÊ },\nÊ <span class=\"fc1\">\"status\"</span>: {\nÊ <span class=\"fc1\">\"process\"</span>: <span class=\"fc3\">\"started\"</span>,\nÊ <span class=\"fc1\">\"buffer\"</span>: <span class=\"fc3\">\"disabled\"</span>\nÊ }\n}",
    "hierarchy": [
      "DISABLEBUFFER",
      "Disable Buffer Example"
    ],
    "pageId": 950
  },
  {
    "content": "solr/<collection>/cdcr?action=START",
    "hierarchy": [
      "CDCR START",
      "Disable Buffer Example"
    ],
    "pageId": 950
  },
  {
    "content": "http://localhost:8983/solr/techproducts/cdcr?action=START",
    "hierarchy": [
      "CDCR START",
      "CDCR Start Examples"
    ],
    "pageId": 950
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">0</span>\nÊ },\nÊ <span class=\"fc1\">\"status\"</span>: {\nÊ <span class=\"fc1\">\"process\"</span>: <span class=\"fc3\">\"started\"</span>,\nÊ <span class=\"fc1\">\"buffer\"</span>: <span class=\"fc3\">\"enabled\"</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 951
  },
  {
    "content": "solr/<collection>/cdcr?action=STOP",
    "hierarchy": [
      "CDCR STOP"
    ],
    "pageId": 951
  },
  {
    "content": "http://localhost:8983/solr/techproducts/cdcr?action=STOP",
    "hierarchy": [
      "CDCR STOP",
      "CDCR Stop Examples"
    ],
    "pageId": 951
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">0</span>\nÊ },\nÊ <span class=\"fc1\">\"status\"</span>: {\nÊ <span class=\"fc1\">\"process\"</span>: <span class=\"fc3\">\"stopped\"</span>,\nÊ <span class=\"fc1\">\"buffer\"</span>: <span class=\"fc3\">\"enabled\"</span>\nÊ }\n}",
    "hierarchy": [
      "CDCR STOP",
      "CDCR Stop Examples"
    ],
    "pageId": 951
  },
  {
    "content": "solr/<core>/cdcr?action=QUEUES",
    "hierarchy": [
      "CDCR Monitoring Commands",
      "QUEUES",
      "CDCR Stop Examples"
    ],
    "pageId": 951
  },
  {
    "content": "The output is composed of a list “queues” which contains a list of (ZooKeeper) Target hosts, themselves\ncontaining a list of Target collections. For each collection, the current size of the queue and the timestamp of\nthe last update operation successfully processed is provided. The timestamp of the update operation is the\noriginal timestamp, i.e., the time this operation was processed on the Source SolrCloud. This allows an\nestimate the latency of the replication process.",
    "hierarchy": [
      "CDCR Monitoring Commands",
      "QUEUES",
      "QUEUES Response"
    ],
    "pageId": 951
  },
  {
    "content": "The “queues” object also contains information about the update logs, such as the size (in bytes) of the",
    "hierarchy": [
      "CDCR Monitoring Commands",
      "QUEUES",
      "QUEUES Response"
    ],
    "pageId": 951
  },
  {
    "content": "update logs on disk (<span class=\"ff2 fs1\">tlogTotalSize</span>), the number of transaction log files (<span class=\"ff2 fs1\">tlogTotalCount</span>) and the status of\nthe update logs synchronizer (<span class=\"ff2 fs1\">updateLogSynchronizer</span>).",
    "hierarchy": [
    ],
    "pageId": 952
  },
  {
    "content": "http://localhost:8983/solr/<replica_name>/cdcr?action=QUEUES",
    "hierarchy": [
      "QUEUES Examples"
    ],
    "pageId": 952
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>: <span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>: <span class=\"fc3\">1</span>\nÊ },\nÊ <span class=\"fc2\">\"queues\"</span>:{\nÊ   <span class=\"fc2\">\"127.0.0.1: 40342/solr\"</span>:{\nÊ   <span class=\"fc2\">\"Target_collection\"</span>:{\nÊ       <span class=\"fc2\">\"queueSize\"</span>: <span class=\"fc3\">104</span>,\nÊ       <span class=\"fc2\">\"lastTimestamp\"</span>: <span class=\"fc4\">\"2014-12-02T10:32:15.879Z\"</span>\nÊ     }\nÊ   }\nÊ },\nÊ <span class=\"fc2\">\"tlogTotalSize\"</span>:<span class=\"fc3\">3817</span>,\nÊ <span class=\"fc2\">\"tlogTotalCount\"</span>:<span class=\"fc3\">1</span>,\nÊ <span class=\"fc2\">\"updateLogSynchronizer\"</span>: <span class=\"fc4\">\"stopped\"</span>\n}",
    "hierarchy": [
      "QUEUES Examples"
    ],
    "pageId": 952
  },
  {
    "content": "solr/<core>/cdcr?action=OPS",
    "hierarchy": [
      "OPS",
      "QUEUES Examples"
    ],
    "pageId": 952
  },
  {
    "content": "Provides the average number of operations as a sum and broken down by adds/deletes.",
    "hierarchy": [
      "OPS",
      "OPS Response"
    ],
    "pageId": 952
  },
  {
    "content": "http://localhost:8983/solr/<replica_name>/cdcr?action=OPS",
    "hierarchy": [
      "OPS",
      "OPS Examples"
    ],
    "pageId": 952
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">1</span>\nÊ },\nÊ <span class=\"fc1\">\"operationsPerSecond\"</span>:{\nÊ   <span class=\"fc1\">\"127.0.0.1: 59661/solr\"</span>:{\nÊ     <span class=\"fc1\">\"Target_collection\"</span>:{\nÊ         <span class=\"fc1\">\"all\"</span>: <span class=\"fc2\">297.102944952749052</span>,\nÊ         <span class=\"fc1\">\"adds\"</span>: <span class=\"fc2\">297.102944952749052</span>,\nÊ         <span class=\"fc1\">\"deletes\"</span>: <span class=\"fc2\">0.0</span>\nÊ     }\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 953
  },
  {
    "content": "solr/<core>/cdcr?action=ERRORS",
    "hierarchy": [
      "ERRORS"
    ],
    "pageId": 953
  },
  {
    "content": "Provides the number of consecutive errors encountered by the replicator thread, the number of bad\nrequests or internal errors since the start of the replication process, and a list of the last errors encountered\nordered by timestamp.",
    "hierarchy": [
      "ERRORS",
      "ERRORS Response"
    ],
    "pageId": 953
  },
  {
    "content": "http://localhost:8983/solr/<replica_name>/cdcr?action=ERRORS",
    "hierarchy": [
      "ERRORS",
      "ERRORS Examples"
    ],
    "pageId": 953
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">2</span>\nÊ },\nÊ <span class=\"fc1\">\"errors\"</span>: {\nÊ   <span class=\"fc1\">\"127.0.0.1: 36872/solr\"</span>:{\nÊ     <span class=\"fc1\">\"Target_collection\"</span>:{\nÊ       <span class=\"fc1\">\"consecutiveErrors\"</span>:<span class=\"fc2\">3</span>,\nÊ       <span class=\"fc1\">\"bad_request\"</span>:<span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"internal\"</span>:<span class=\"fc2\">3</span>,\nÊ       <span class=\"fc1\">\"last\"</span>:{\nÊ         <span class=\"fc1\">\"2014-12-02T11:04:42.523Z\"</span>:<span class=\"fc3\">\"internal\"</span>,\nÊ         <span class=\"fc1\">\"2014-12-02T11:04:39.223Z\"</span>:<span class=\"fc3\">\"internal\"</span>,\nÊ         <span class=\"fc1\">\"2014-12-02T11:04:38.22Z\"</span>:<span class=\"fc3\">\"internal\"</span>\nÊ       }\nÊ     }\nÊ   }\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 954
  },
  {
    "content": "The goal of autoscaling is to make SolrCloud cluster management easier by\nproviding a way for changes to the cluster to be more automatic and more\nintelligent.",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "Autoscaling includes an API to manage cluster-wide and collection-specific policies and preferences and a\nrules syntax to define the guidelines for your cluster. Also included are features to utilize the policies and\npreferences so they perform actions automatically when certain conditions are met.",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "The following sections describe the autoscaling features of SolrCloud:",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Overview of Autoscaling in SolrCloud</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Autoscaling Policy and Preferences</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Autoscaling Triggers</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Autoscaling Trigger Actions</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Autoscaling Listeners</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Automatically Adding Replicas</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Autoscaling Fault Tolerance</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "<span class=\"link\">Autoscaling API</span>",
    "hierarchy": [
      "SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "Autoscaling in Solr aims to provide good defaults so a SolrCloud cluster remains balanced and stable in the\nface of various cluster change events. This balance is achieved by satisfying a set of rules and sorting\npreferences to select the target of cluster management operations automatically on cluster events.",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "A simple example is automatically adding a replica for a SolrCloud collection when a node containing an\nexisting replica goes down.",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "The goal of autoscaling in SolrCloud is to make cluster management easier, more automatic, and more\nintelligent. It aims to provide good defaults such that the cluster remains balanced and stable in the face of\nvarious events such as a node joining the cluster or leaving the cluster. This is achieved by satisfying a set of\nrules and sorting preferences that help Solr select the target of cluster management operations.",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "There are three distinct problems that this feature solves:",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "When to run cluster management tasks? For example, we might want to add a replica when an existing\nreplica is no longer alive.",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "Which cluster management task to run? For example, do we add a new replica or should we move an\nexisting one to a new node?",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "How do we run the cluster management tasks so the cluster remains balanced and stable?",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "Before we get into the details of how each of these problems are solved, let's take a quick look at the easiest\nway to setup autoscaling for your cluster.",
    "hierarchy": [
      "SolrCloud Autoscaling",
      "Overview of SolrCloud Autoscaling"
    ],
    "pageId": 955
  },
  {
    "content": "Say that we want to create a collection which always requires us to have three replicas available for each\nshard all the time. We can set the <span class=\"code\">replicationFactor=3</span> while creating the collection, but what happens if a\nnode containing one or more of the replicas either crashed or was shutdown for maintenance? In such a\ncase, we'd like to create additional replicas to replace the ones that are no longer available to preserve the\noriginal number of replicas.",
    "hierarchy": [
      "Quick Start: Automatically Adding Replicas"
    ],
    "pageId": 956
  },
  {
    "content": "We have an easy way to enable this behavior without needing to understand the autoscaling features in\ndepth. We can create a collection with such behavior by adding an additional parameter\nautoAddReplicas=true<span class=\"ff2 fs1\"> with the CREATE command of the Collection API. For example:</span>",
    "hierarchy": [
      "Quick Start: Automatically Adding Replicas"
    ],
    "pageId": 956
  },
  {
    "content": "/admin/collections?action=CREATE&name=_name_of_collection_&numShards=1&replicationFactor=3&autoAd\ndReplicas=true",
    "hierarchy": [
      "Quick Start: Automatically Adding Replicas"
    ],
    "pageId": 956
  },
  {
    "content": "A collection created with <span class=\"code\">autoAddReplicas=true</span> will be monitored by Solr such that if a node containing a\nreplica of this collection goes down, Solr will add new replicas on other nodes after waiting for up to thirty\nseconds for the node to come back.",
    "hierarchy": [
      "Quick Start: Automatically Adding Replicas"
    ],
    "pageId": 956
  },
  {
    "content": "You can see the section <span class=\"link\">Autoscaling Automatically Adding Replicas</span> to learn more about how to enable or\ndisable this feature as well as other details.",
    "hierarchy": [
      "Quick Start: Automatically Adding Replicas"
    ],
    "pageId": 956
  },
  {
    "content": "The selection of the node that will host the new replica is made according to the default cluster preferences\nthat we will learn more about in the next sections.",
    "hierarchy": [
      "Quick Start: Automatically Adding Replicas"
    ],
    "pageId": 956
  },
  {
    "content": "Cluster preferences, as the name suggests, apply to all cluster management operations regardless of which\ncollection they affect.",
    "hierarchy": [
      "Cluster Preferences"
    ],
    "pageId": 956
  },
  {
    "content": "A preference is a set of conditions that help Solr select nodes that either maximize or minimize given\nmetrics. For example, a preference such as <span class=\"code\">{minimize:cores}</span> will help Solr select nodes such that the\nnumber of cores on each node is minimized. We write cluster preferences in a way that reduces the overall\nload on the system. You can add more than one preferences to break ties.",
    "hierarchy": [
      "Cluster Preferences"
    ],
    "pageId": 956
  },
  {
    "content": "The default cluster preferences consist of the above example (<span class=\"code\">{minimize:cores}</span>) which is to minimize the\nnumber of cores on all nodes.",
    "hierarchy": [
      "Cluster Preferences"
    ],
    "pageId": 956
  },
  {
    "content": "You can learn more about preferences in the <span class=\"link\">Autoscaling Cluster Preferences</span> section.",
    "hierarchy": [
      "Cluster Preferences"
    ],
    "pageId": 956
  },
  {
    "content": "A cluster policy is a set of conditions that a node, shard, or collection must satisfy before it can be chosen as\nthe target of a cluster management operation. These conditions are applied across the cluster regardless of\nthe collection being managed. For example, the condition <span class=\"code\">{\"cores\":\"<10\", \"node\":\"#ANY\"}</span> means that\nany node must have less than 10 Solr cores in total, regardless of which collection they belong to.",
    "hierarchy": [
      "Cluster Policy"
    ],
    "pageId": 956
  },
  {
    "content": "There are many metrics on which the condition can be based, e.g., system load average, heap usage, free\ndisk space, etc. The full list of supported metrics can be found in the section describing <span class=\"link\">Autoscaling Policy</span>\nAttributes<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Cluster Policy"
    ],
    "pageId": 956
  },
  {
    "content": "When a node, shard, or collection does not satisfy the policy, we call it a <span class=\"ff2\">violation</span>. Solr ensures that cluster\nmanagement operations minimize the number of violations. Cluster management operations are currently\ninvoked manually. In the future, these cluster management operations may be invoked automatically in\nresponse to cluster events such as a node being added or lost.",
    "hierarchy": [
    ],
    "pageId": 957
  },
  {
    "content": "A collection may need conditions in addition to those specified in the cluster policy. In such cases, we can\ncreate named policies that can be used for specific collections. Firstly, we can use the <span class=\"code\">set-policy</span> API to\ncreate a new policy and then specify the <span class=\"code\">policy=<policy_name></span> parameter to the CREATE command of the\nCollection API:",
    "hierarchy": [
      "Collection-Specific Policies"
    ],
    "pageId": 957
  },
  {
    "content": "/admin/collections?action=CREATE&name=coll1&numShards=1&replicationFactor=2&policy=policy1",
    "hierarchy": [
      "Collection-Specific Policies"
    ],
    "pageId": 957
  },
  {
    "content": "The above CREATE collection command will associate a policy named <span class=\"code\">policy1</span> with the collection named\ncoll1<span class=\"ff1 fs0\">. Only a single policy may be associated with a collection.</span>",
    "hierarchy": [
      "Collection-Specific Policies"
    ],
    "pageId": 957
  },
  {
    "content": "Note that the collection-specific policy is applied <span class=\"ff2\">in addition to</span> the cluster policy, i.e., it is not an override\nbut an augmentation. Therefore the collection will follow all conditions laid out in the cluster preferences,\ncluster policy, and the policy named <span class=\"code\">policy1</span>.",
    "hierarchy": [
      "Collection-Specific Policies"
    ],
    "pageId": 957
  },
  {
    "content": "You can learn more about collection-specific policies in the section <span class=\"link\">Defining Collection-Specific Policies</span>.",
    "hierarchy": [
      "Collection-Specific Policies"
    ],
    "pageId": 957
  },
  {
    "content": "Now that we have an idea about how cluster management operations use policies and preferences help Solr\nkeep the cluster balanced and stable, we can talk about when to invoke such operations.",
    "hierarchy": [
      "Triggers"
    ],
    "pageId": 957
  },
  {
    "content": "Triggers are used to watch for events such as a node joining or leaving the cluster. When the event happens,\nthe trigger executes a set of actions that compute and execute a <span class=\"ff2\">plan</span>, i.e., a set of operations to change the\ncluster so that the policy and preferences are respected.",
    "hierarchy": [
      "Triggers"
    ],
    "pageId": 957
  },
  {
    "content": "The <span class=\"code\">autoAddReplicas</span> parameter passed with the CREATE Collection API command in the <span class=\"link\">Quick Start</span> section\nabove automatically creates a trigger that watches for a node going away. When the trigger fires, it executes\na set of actions that compute and execute a plan to move all replicas hosted by the lost node to new nodes\nin the cluster. The target nodes are chosen based on the policy and preferences.",
    "hierarchy": [
      "Triggers"
    ],
    "pageId": 957
  },
  {
    "content": "You can learn more about Triggers in the section <span class=\"link\">Autoscaling Triggers</span>.",
    "hierarchy": [
      "Triggers"
    ],
    "pageId": 957
  },
  {
    "content": "A trigger executes <span class=\"ff2\">actions</span> that tell Solr what to do in response to the trigger. Solr ships with two actions\nthat are added to every trigger by default. The first is called the <span class=\"ff2\">ComputePlanAction</span> and the other is\nExecutePlanAction<span class=\"ff1\">. The former computes the cluster management operations necessary to stabilize the</span>\ncluster and the latter executes them on the cluster.",
    "hierarchy": [
      "Trigger Actions"
    ],
    "pageId": 957
  },
  {
    "content": "You can learn more about Trigger Actions in the section <span class=\"link\">Autoscaling Trigger Actions</span>.",
    "hierarchy": [
      "Trigger Actions"
    ],
    "pageId": 957
  },
  {
    "content": "An Autoscaling <span class=\"ff1\">listener</span> can be attached to a trigger. Solr calls the listener each time the trigger fires as well\nas before and after the actions performed by the trigger. Listeners are useful as a call back mechanism to\nperform tasks such as logging or informing external systems about events. For example, a listener is\nautomatically added by Solr to each trigger to log details of the trigger fire and actions to the <span class=\"code\">.system</span>\ncollection.",
    "hierarchy": [
      "Listeners"
    ],
    "pageId": 958
  },
  {
    "content": "You can learn more about Listeners in the section <span class=\"link\">Autoscaling Listeners</span>.",
    "hierarchy": [
      "Listeners"
    ],
    "pageId": 958
  },
  {
    "content": "The autoscaling APIs available at <span class=\"code\">/admin/autoscaling</span> can be used to read and modify each of the\ncomponents discussed above.",
    "hierarchy": [
      "Autoscaling APIs"
    ],
    "pageId": 958
  },
  {
    "content": "You can learn more about these APIs in the section <span class=\"link\">Autoscaling API</span>.",
    "hierarchy": [
      "Autoscaling APIs"
    ],
    "pageId": 958
  },
  {
    "content": "The autoscaling policy and preferences are a set of rules and sorting preferences that help Solr select the\ntarget of cluster management operations so the overall load on the cluster remains balanced.",
    "hierarchy": [
      "Autoscaling Policy and Preferences"
    ],
    "pageId": 958
  },
  {
    "content": "A preference is a hint to Solr on how to sort nodes based on their utilization. The default cluster preference\nis to sort by the total number of Solr cores (or replicas) hosted by a node. Therefore, by default, when\nselecting a node to add a replica, Solr can apply the preferences and choose the node with the least number\nof cores.",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "More than one preference can be added to break ties. For example, we may choose to use free disk space to\nbreak ties if the number of cores on two nodes are the same. The node with the higher free disk space can\nbe chosen as the target of the cluster operation.",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "Each preference takes the following form:",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "{<span class=\"fc3\">\"<sort_order>\"</span>:<span class=\"fc4\">\"<sort_param>\"</span>, <span class=\"fc3\">\"precision\"</span>:<span class=\"fc4\">\"<precision_val>\"</span>}",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "sort_order\nThe value can be either <span class=\"code\">maximize</span> or <span class=\"code\">minimize</span>. Choose <span class=\"code\">minimize</span> to sort the nodes with least value as the\nleast loaded. For example, <span class=\"code\">{\"minimize\":\"cores\"}</span> sorts the nodes with the least number of cores as the\nleast loaded node. A sort order such as <span class=\"code\">{\"maximize\":\"freedisk\"}</span> sorts the nodes with maximum free\ndisk space as the least loaded node.",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "The objective of the system is to make every node the least loaded. So, in case of a <span class=\"code\">MOVEREPLICA</span>\noperation, it usually targets the <span class=\"ff4\">most loaded</span> node and takes load off of it. In a sort of more loaded to less\nloaded, <span class=\"code\">minimize</span> is akin to sorting in descending order and <span class=\"code\">maximize</span> is akin to sorting in ascending\norder.",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "This is a required parameter.",
    "hierarchy": [
      "Autoscaling Policy and Preferences",
      "Cluster Preferences Specification"
    ],
    "pageId": 958
  },
  {
    "content": "sort_param\nOne and only one of the following supported parameters must be specified:",
    "hierarchy": [
    ],
    "pageId": 959
  },
  {
    "content": "1.cores: The number of total Solr cores on a node.\n2.freedisk: The amount of free disk space for Solr's data home directory. This is always in gigabytes.\n3.sysLoadAvg: The system load average on a node as reported by the Metrics API under the key\nsolr.jvm/os.systemLoadAverage<span class=\"ff2 fs1\">. This is always a double value between 0 and 1 and the higher the</span>\nvalue, the more loaded the node is.\n4.heapUsage: The heap usage of a node as reported by the Metrics API under the key\nsolr.jvm/memory.heap.usage<span class=\"ff2 fs1\">. This is always a double value between 0 and 1 and the higher the</span>\nvalue, the more loaded the node is.",
    "hierarchy": [
    ],
    "pageId": 959
  },
  {
    "content": "precision\nPrecision tells the system the minimum (absolute) difference between 2 values to treat them as distinct\nvalues.",
    "hierarchy": [
    ],
    "pageId": 959
  },
  {
    "content": "For example, a precision of 10 for <span class=\"ff1 fs0\">freedisk</span> means that two nodes whose free disk space is within 10GB\nof each other should be treated as equal for the purpose of sorting. This helps create ties without which\nspecifying multiple preferences is not useful. This is an optional parameter whose value must be a\npositive integer. The maximum value of <span class=\"ff1 fs0\">precision</span> must be less than the maximum value of the\nsort_value<span class=\"ff2 fs1\">, if any.</span>",
    "hierarchy": [
    ],
    "pageId": 959
  },
  {
    "content": "See the section <span class=\"link\">Create and Modify Cluster Preferences</span> for details on how to manage cluster preferences\nwith the API.",
    "hierarchy": [
    ],
    "pageId": 959
  },
  {
    "content": "The following shows the default cluster preferences. This is applied automatically by Solr when no explicit\ncluster preferences have been set using the <span class=\"link\">Autoscaling API</span>.",
    "hierarchy": [
      "Examples of Cluster Preferences",
      "Default Preferences"
    ],
    "pageId": 959
  },
  {
    "content": "[\nÊ {<span class=\"fc3\">\"minimize\"</span>:<span class=\"fc4\">\"cores\"</span>}\n]",
    "hierarchy": [
      "Examples of Cluster Preferences",
      "Default Preferences"
    ],
    "pageId": 959
  },
  {
    "content": "In this example, we want to minimize the number of Solr cores and in case of a tie, maximize the amount of\nfree disk space on each node.",
    "hierarchy": [
      "Examples of Cluster Preferences",
      "Minimize Cores; Maximize Free Disk"
    ],
    "pageId": 959
  },
  {
    "content": "[\nÊ {<span class=\"fc3\">\"minimize\"</span> : <span class=\"fc4\">\"cores\"</span>},\nÊ {<span class=\"fc3\">\"maximize\"</span> : <span class=\"fc4\">\"freedisk\"</span>}\n]",
    "hierarchy": [
      "Examples of Cluster Preferences",
      "Minimize Cores; Maximize Free Disk"
    ],
    "pageId": 959
  },
  {
    "content": "In this example, we add a precision to the <span class=\"ff1 fs0\">freedisk</span> parameter so that nodes with free disk space within",
    "hierarchy": [
      "Examples of Cluster Preferences",
      "Add Precision to Free Disk; Minimize System Load"
    ],
    "pageId": 959
  },
  {
    "content": "10GB of each other are considered equal. In such a case, the tie is broken by minimizing <span class=\"ff2 fs1\">sysLoadAvg</span>.",
    "hierarchy": [
    ],
    "pageId": 960
  },
  {
    "content": "[\nÊ {<span class=\"fc1\">\"minimize\"</span> : <span class=\"fc2\">\"cores\"</span>},\nÊ {<span class=\"fc1\">\"maximize\"</span> : <span class=\"fc2\">\"freedisk\"</span>, <span class=\"fc1\">\"precision\"</span> : <span class=\"fc3\">10</span>},\nÊ {<span class=\"fc1\">\"minimize\"</span> : <span class=\"fc2\">\"sysLoadAvg\"</span>}\n]",
    "hierarchy": [
    ],
    "pageId": 960
  },
  {
    "content": "A policy is a hard rule to be satisfied by each node. If a node does not satisfy the rule then it is called a\nviolation<span class=\"ff1\">. Solr ensures that the number of violations are minimized while invoking any cluster management</span>\noperations.",
    "hierarchy": [
      "Policy Specification"
    ],
    "pageId": 960
  },
  {
    "content": "A policy can have the following attributes:",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "cores\nThis is a special attribute that applies to the entire cluster. It can only be used along with the <span class=\"ff2 fs1\">node</span>\nattribute and no other. This attribute is optional.",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "collection\nThe name of the collection to which the policy rule should apply. If omitted, the rule applies to all\ncollections. This attribute is optional.",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "shard\nThe name of the shard to which the policy rule should apply. If omitted, the rule is applied for all shards in\nthe collection. It supports a special value <span class=\"ff2 fs1\">#EACH</span> which means that the rule is applied for each shard in the\ncollection.",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "type\nThe type of the replica to which the policy rule should apply. If omitted, the rule is applied for all replica\ntypes of this collection/shard. The allowed values are <span class=\"ff2 fs1\">NRT</span>, <span class=\"ff2 fs1\">TLOG</span> and <span class=\"ff2 fs1\">PULL</span>",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "replica\nThe number of replicas that must exist to satisfy the rule. This must be a positive integer. This is a\nrequired attribute.",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "strict\nAn optional boolean value. The default is <span class=\"ff2 fs1\">true</span>. If true, the rule must be satisfied. If false, Solr tries to\nsatisfy the rule on a best effort basis but if no node can satisfy the rule then any node may be chosen.",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "One and only one of the following attributes can be specified in addition to the above attributes:",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "node\nThe name of the node to which the rule should apply. The default value is <span class=\"ff2 fs1\">#ANY</span> which means that any\nnode in the cluster may satisfy the rule.",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "port",
    "hierarchy": [
      "Policy Specification",
      "Policy Attributes"
    ],
    "pageId": 960
  },
  {
    "content": "The port of the node to which the rule should apply.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "freedisk\nThe free disk space in gigabytes of the node. This must be a positive 64-bit integer value.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "host\nThe host name of the node.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "sysLoadAvg\nThe system load average of the node as reported by the Metrics API under the key\nsolr.jvm/os.systemLoadAverage<span class=\"ff1 fs0\">. This is floating point value between 0 and 1.</span>",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "heapUsage\nThe heap usage of the node as reported by the Metrics API under the key <span class=\"ff2 fs1\">solr.jvm/memory.heap.usage</span>.\nThis is floating point value between 0 and 1.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "nodeRole\nThe role of the node. The only supported value currently is <span class=\"ff2 fs1\">overseer</span>.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "ip_1, ip_2, ip_3, ip_4\nThe least significant to most significant segments of IP address. For example, for an IP address\n192.168.1.2<span class=\"ff1 fs0\">, </span>ip_1 = 2<span class=\"ff1 fs0\">, </span>ip_2 = 1<span class=\"ff1 fs0\">, </span>ip_3 = 168<span class=\"ff1 fs0\">, </span>ip_4 = 192<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "sysprop.<system_property_name>\nAny arbitrary system property set on the node on startup.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "metrics:<full-path-to-the metric>\nAny arbitrary metric. For example, <span class=\"ff2 fs1\">metrics:solr.node:CONTAINER.fs.totalSpace</span>. Refer to the <span class=\"ff2 fs1\">key</span>\nparameter in the <span class=\"link\">Metrics API</span> section.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "diskType\nThe type of disk drive being used for Solr's <span class=\"ff2 fs1\">coreRootDirectory</span>. The only two supported values are\nrotational<span class=\"ff1 fs0\"> and </span>ssd<span class=\"ff1 fs0\">. Refer to </span>coreRootDirectory<span class=\"ff1 fs0\"> parameter in the <span class=\"link\">Solr.xml Parameters</span> section.</span>",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "It's value is fetched from the Metrics API with the key named <span class=\"ff2 fs1\">solr.node:CONTAINER.fs.coreRoot.spins</span>.\nThe disk type is auto-detected by Lucene using various heuristics and it is not guaranteed to be correct\nacross all platforms or operating systems. Refer to the <span class=\"link\">Dynamic defaults for ConcurrentMergeScheduler</span>\nsection for more details.",
    "hierarchy": [
    ],
    "pageId": 961
  },
  {
    "content": "Each attribute in the policy may specify one of the following operators along with the value.",
    "hierarchy": [
      "Policy Operators"
    ],
    "pageId": 961
  },
  {
    "content": "<: Less than",
    "hierarchy": [
      "Policy Operators"
    ],
    "pageId": 961
  },
  {
    "content": ">: Greater than",
    "hierarchy": [
      "Policy Operators"
    ],
    "pageId": 961
  },
  {
    "content": "!: Not",
    "hierarchy": [
      "Policy Operators"
    ],
    "pageId": 961
  },
  {
    "content": "None means equal",
    "hierarchy": [
      "Policy Operators"
    ],
    "pageId": 961
  },
  {
    "content": "Do not place more than one replica of the same shard on the same node:",
    "hierarchy": [
      "Limit Replica Placement"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc2\">\"replica\"</span>: <span class=\"fc3\">\"<2\"</span>, <span class=\"fc2\">\"shard\"</span>: <span class=\"fc3\">\"#EACH\"</span>, <span class=\"fc2\">\"node\"</span>: <span class=\"fc3\">\"#ANY\"</span>}",
    "hierarchy": [
      "Limit Replica Placement"
    ],
    "pageId": 962
  },
  {
    "content": "Do not place more than 10 cores in any node. This rule can only be added to the cluster policy because it\nmentions the <span class=\"code\">cores</span> attribute that is only applicable cluster-wide.",
    "hierarchy": [
      "Limit Cores per Node"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc2\">\"cores\"</span>: <span class=\"fc3\">\"<10\"</span>, <span class=\"fc2\">\"node\"</span>: <span class=\"fc3\">\"#ANY\"</span>}",
    "hierarchy": [
      "Limit Cores per Node"
    ],
    "pageId": 962
  },
  {
    "content": "Place exactly 1 replica of each shard of collection <span class=\"code\">xyz</span> on a node running on port <span class=\"code\">8983</span>",
    "hierarchy": [
      "Place Replicas Based on Port"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc2\">\"replica\"</span>: <span class=\"fc4\">1</span>, <span class=\"fc2\">\"shard\"</span>: <span class=\"fc3\">\"#EACH\"</span>, <span class=\"fc2\">\"collection\"</span>: <span class=\"fc3\">\"xyz\"</span>, <span class=\"fc2\">\"port\"</span>: <span class=\"fc3\">\"8983\"</span>}",
    "hierarchy": [
      "Place Replicas Based on Port"
    ],
    "pageId": 962
  },
  {
    "content": "Place all replicas on a node with system property <span class=\"code\">availability_zone=us-east-1a</span>. Note that we have to\nwrite this rule in the negative sense i.e., <span class=\"ff1\">0</span> replicas must be on nodes <span class=\"ff1\">not</span> having the system property\navailability_zone=us-east-1a",
    "hierarchy": [
      "Place Replicas Based on a System Property"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc2\">\"replica\"</span>: <span class=\"fc4\">0</span>, <span class=\"fc2\">\"sysprop.availability_zone\"</span>: <span class=\"fc3\">\"!us-east-1a\"</span>}",
    "hierarchy": [
      "Place Replicas Based on a System Property"
    ],
    "pageId": 962
  },
  {
    "content": "Do not place any replica on a node which has the overseer role. Note that the role is added by the <span class=\"code\">addRole</span>\ncollection API. It is <span class=\"ff1\">not</span> automatically the node which is currently the overseer.",
    "hierarchy": [
      "Place Replicas Based on Node Role"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc2\">\"replica\"</span>: <span class=\"fc4\">0</span>, <span class=\"fc2\">\"nodeRole\"</span>: <span class=\"fc3\">\"overseer\"</span>}",
    "hierarchy": [
      "Place Replicas Based on Node Role"
    ],
    "pageId": 962
  },
  {
    "content": "Place all replicas in nodes with freedisk more than 500GB. Here again, we have to write the rule in the\nnegative sense.",
    "hierarchy": [
      "Place Replicas Based on Free Disk"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc2\">\"replica\"</span>: <span class=\"fc4\">0</span>, <span class=\"fc2\">\"freedisk\"</span>: <span class=\"fc3\">\"<500\"</span>}",
    "hierarchy": [
      "Place Replicas Based on Free Disk"
    ],
    "pageId": 962
  },
  {
    "content": "Place all replicas in nodes with freedisk more than 500GB when possible. Here we use the strict keyword to\nsignal that this rule is to be honored on a best effort basis.",
    "hierarchy": [
      "Try to Place Replicas Based on Free Disk"
    ],
    "pageId": 962
  },
  {
    "content": "{<span class=\"fc1\">\"replica\"</span>: <span class=\"fc2\">0</span>, <span class=\"fc1\">\"freedisk\"</span>: <span class=\"fc3\">\"<500\"</span>, <span class=\"fc1\">\"strict\"</span> : <span class=\"fc4\">false</span>}",
    "hierarchy": [
    ],
    "pageId": 963
  },
  {
    "content": "{ <span class=\"fc1\">\"replica\"</span>: <span class=\"fc2\">0</span>,  <span class=\"fc1\">\"diskType\"</span> : <span class=\"fc3\">\"!ssd\"</span>,  <span class=\"fc1\">\"type\"</span> : <span class=\"fc3\">\"TLOG\"</span> }",
    "hierarchy": [
      "Try to Place all Replicas of type TLOG in nodes with SSD drives"
    ],
    "pageId": 963
  },
  {
    "content": "{ <span class=\"fc1\">\"replica\"</span>: <span class=\"fc2\">0</span>,  <span class=\"fc1\">\"diskType\"</span> : <span class=\"fc3\">\"!rotational\"</span>,  <span class=\"fc1\">\"type\"</span> : <span class=\"fc3\">\"PULL\"</span> }",
    "hierarchy": [
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "By default, the cluster policy, if it exists, is used automatically for all collections in the cluster. However, we\ncan create named policies which can be attached to a collection at the time of its creation by specifying the\npolicy name along with a <span class=\"ff1 fs3\">policy</span> parameter.",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "When a collection-specific policy is used, the rules in that policy are <span class=\"ff2\">appended</span> to the rules in the cluster\npolicy and the combination of both are used. Therefore, it is recommended that you do not add rules to\ncollection-specific policy that conflict with the ones in the cluster policy. Doing so will disqualify all nodes in\nthe cluster from matching all criteria and make the policy useless.",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "It is possible to override conditions specified in the cluster policy using collection-specific policy. For\nexample, if a clause <span class=\"ff1 fs3\">{replica:'<3', node:'#ANY'}</span> is present in the cluster policy and the collection-specific\npolicy has a clause <span class=\"ff1 fs3\">{replica:'<4', node:'#ANY'}</span>, the cluster policy is ignored in favor of the collection\npolicy.",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "Also, if <span class=\"ff1 fs3\">maxShardsPerNode</span> is specified during the time of collection creation, then both <span class=\"ff1 fs3\">maxShardsPerNode</span>\nand the policy rules must be satisfied.",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "Some attributes such as <span class=\"ff1 fs3\">cores</span> can only be used in the cluster policy. See the section above on policy\nattributes for details.",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "The policy is used by these <span class=\"fc6\">Collections API</span> commands:",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "CREATE",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "CREATESHARD",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "ADDREPLICA",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "RESTORE",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "SPLITSHARD",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "In the future, the policy and preferences will be used by the Autoscaling framework to automatically change\nthe cluster in response to events such as a node being added or lost.",
    "hierarchy": [
      "Defining Collection-Specific Policies",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "Triggers are used in autoscaling to watch for cluster events such as nodes joining, leaving, search rate or",
    "hierarchy": [
      "SolrCloud Autoscaling Triggers",
      "Try to Place all Replicas of type PULL on nodes with rotational disk drives"
    ],
    "pageId": 963
  },
  {
    "content": "any other metric breaching a threshold.",
    "hierarchy": [
    ],
    "pageId": 964
  },
  {
    "content": "In the future other cluster, node, and replica events that are important from the point of view of cluster\nperformance will also have available triggers.",
    "hierarchy": [
    ],
    "pageId": 964
  },
  {
    "content": "Trigger implementations verify the state of resources that they monitor. When they detect a change that\nmerits attention they generate events, which are then queued and processed by configured <span class=\"ff2 fs1\">TriggerAction</span>\nimplementations. This usually involves computing and executing a plan to manage the new cluster\nresources (e.g., move replicas). Solr provides predefined implementations of triggers for specific event\ntypes.",
    "hierarchy": [
    ],
    "pageId": 964
  },
  {
    "content": "Triggers execute on the node that runs <span class=\"ff2 fs1\">Overseer</span>. They are scheduled to run periodically, at a default\ninterval of 1 second between each execution (not every execution produces events).",
    "hierarchy": [
    ],
    "pageId": 964
  },
  {
    "content": "Currently the following event types (and corresponding trigger implementations) are defined:",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "nodeAdded: generated when a new node joins the cluster",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "nodeLost: generated when a node leaves the cluster",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "metric: generated when the configured metric crosses a configured lower or upper threshold value",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "searchRate: generated when the 1-minute average search rate exceeds configured upper threshold",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "scheduled: generated according to a scheduled time period such as every 24 hours etc",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "Events are not necessarily generated immediately after the corresponding state change occurred - the\nmaximum rate of events is controlled by the <span class=\"ff2 fs1\">waitFor</span> configuration parameter (see below).",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "The following properties are common to all event types:",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "id\n(string) A unique time-based event id.",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "eventType\n(string) The type of event.",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "source\n(string) The name of the trigger that produced this event.",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "eventTime\n(long) Unix time when the condition that caused this event occurred. For example, for a <span class=\"ff2 fs1\">nodeAdded</span> event\nthis will be the time when the node was added and not when the event was actually generated, which\nmay significantly differ due to the rate limits set by <span class=\"ff2 fs1\">waitFor</span>.",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "properties\n(map, optional) Any additional properties. Currently includes <span class=\"ff2 fs1\">nodeName</span> property that indicates the node\nthat was lost or added.",
    "hierarchy": [
      "Event Types"
    ],
    "pageId": 964
  },
  {
    "content": "When a collection has the parameter <span class=\"ff2 fs1\">autoAddReplicas</span> set to true then a trigger configuration named",
    "hierarchy": [
      "Auto Add Replicas Trigger"
    ],
    "pageId": 964
  },
  {
    "content": ".auto_add_replicas<span class=\"ff2 fs1\"> is automatically created to watch for nodes going away. This trigger produces</span>\nnodeLost<span class=\"ff2 fs1\"> events, which are then processed by configured actions (usually resulting in computing and</span>\nexecuting a plan to add replicas on the live nodes to maintain the expected replication factor).",
    "hierarchy": [
    ],
    "pageId": 965
  },
  {
    "content": "Refer to the section <span class=\"link\">Autoscaling Automatically Adding Replicas</span> to learn more about how the\n.autoAddReplicas<span class=\"ff2 fs1\"> trigger works.</span>",
    "hierarchy": [
    ],
    "pageId": 965
  },
  {
    "content": "This trigger supports one parameter, which is defined in the <span class=\"ff1 fs0\"><solrcloud></span> section of <span class=\"ff1 fs0\">solr.xml</span>:",
    "hierarchy": [
    ],
    "pageId": 965
  },
  {
    "content": "autoReplicaFailoverWaitAfterExpiration\nThe minimum time in milliseconds to wait for initiating replacement of a replica after first noticing it not\nbeing live. This is important to prevent false positives while stopping or starting the cluster. The default is\n120000<span class=\"ff2 fs1\"> (2 minutes). The value provided for this parameter is used as the value for the </span>waitFor<span class=\"ff2 fs1\"> parameter</span>\nin the <span class=\"ff1 fs0\">.auto_add_replicas</span> trigger.",
    "hierarchy": [
    ],
    "pageId": 965
  },
  {
    "content": "See <span class=\"link\">The <solrcloud> Element</span> for more details about how to work with <span class=\"ff1 fs0\">solr.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 965
  },
  {
    "content": "The metric trigger can be used to monitor any metric exposed by the <span class=\"link\">Metrics API</span>. It supports lower and\nupper threshold configurations as well as optional filters to limit operation to specific collection, shards, and\nnodes.",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "This trigger supports the following configuration:",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "metric\n(string, required) The metric property name to be watched in the format metrics:group:prefix, e.g.,\nmetric:solr.node:CONTAINER.fs.coreRoot.usableSpace<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "below\n(double, optional) The lower threshold for the metric value. The trigger produces a metric breached event\nif the metric's value falls below this value.",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "above\n(double, optional) The upper threshold for the metric value. The trigger produces a metric breached\nevent if the metric's value crosses above this value.",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "collection\n(string, optional) The collection used to limit the nodes on which the given metric is watched. When the\nmetric is breached, trigger actions will limit operations to this collection only.",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "shard\n(string, optional) The shard used to limit the nodes on which the given metric is watched. When the\nmetric is breached, trigger actions will limit operations to this shard only.",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "node\n(string, optional) The node on which the given metric is watched. Trigger actions will operate on this node\nonly.",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "preferredOperation\n(string, optional, defaults to <span class=\"ff1 fs0\">MOVEREPLICA</span>) The operation to be performed in response to an event",
    "hierarchy": [
      "Metric Trigger"
    ],
    "pageId": 965
  },
  {
    "content": "generated by this trigger. By default, replicas will be moved from the hot node to others. The only other\nsupported value is <span class=\"ff2 fs1\">ADDREPLICA</span> which adds more replicas if the metric is breached.",
    "hierarchy": [
    ],
    "pageId": 966
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"set-trigger\"</span>: {\nÊ   <span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"metric_trigger\"</span>,\nÊ   <span class=\"fc2\">\"event\"</span>: <span class=\"fc3\">\"metric\"</span>,\nÊ   <span class=\"fc2\">\"waitFor\"</span>: <span class=\"fc3\">\"5s\"</span>,\nÊ   <span class=\"fc2\">\"metric\"</span>: <span class=\"fc3\">\"metric:solr.node:CONTAINER.fs.coreRoot.usableSpace\"</span>,\nÊ   <span class=\"fc2\">\"below\"</span>: <span class=\"fc4\">107374182400</span>,\nÊ   <span class=\"fc2\">\"collection\"</span>: <span class=\"fc3\">\"mycollection\"</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 966
  },
  {
    "content": "The search rate trigger can be used for monitoring 1-minute average search rates in a selected collection,\nand request that either replicas be moved to different nodes or new replicas be added to reduce the per-\nreplica search rate for a collection or shard with search rate hot spots. (Future versions of Solr will also be\nable to automatically remove some replicas when search rate falls below the configured lower threshold).",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "This trigger support the following configuration:",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "collection\n(string, optional) collection name to monitor, or any collection if empty.",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "shard\n(string, optional) shard name within the collection (requires <span class=\"ff2 fs1\">collection</span> to be set), or any shard if empty.",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "node\n(string, optional) node name to monitor, or any if empty.",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "handler\n(string, optional) handler name whose request rate represents the search rate (default is <span class=\"ff2 fs1\">/select</span>). This\nname is used for creating the full metric key, in this case\nsolr.core.<coreName>:QUERY./select.requestTimes:1minRate<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "rate\n(double, required) the upper bound for the request rate metric value.",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "If a rate is exceeded for a node (but not for individual replicas placed on this node) then the action\nrequested by this event is to move one replica (with the highest rate) to another node. If a rate is exceeded\nfor a collection or shard then the action requested is to add some replicas - currently at least 1 and at most\n3, depending on how much the rate is exceeded, proportional to the threshold rate and the current request\nrate.",
    "hierarchy": [
      "Search Rate Trigger"
    ],
    "pageId": 966
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-trigger\"</span>: {\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"search_rate_trigger\"</span>,\nÊ <span class=\"fc2\">\"event\"</span> : <span class=\"fc3\">\"searchRate\"</span>,\nÊ <span class=\"fc2\">\"collection\"</span> : <span class=\"fc3\">\"test\"</span>,\nÊ <span class=\"fc2\">\"handler\"</span> : <span class=\"fc3\">\"/select\"</span>,\nÊ <span class=\"fc2\">\"rate\"</span> : <span class=\"fc4\">100.0</span>,\nÊ <span class=\"fc2\">\"waitFor\"</span> : <span class=\"fc3\">\"1m\"</span>,\nÊ <span class=\"fc2\">\"enabled\"</span> : <span class=\"fc5\">true</span>,\nÊ <span class=\"fc2\">\"actions\"</span> : [\nÊ  {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"compute_plan\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"solr.ComputePlanAction\"</span>\nÊ  },\nÊ  {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"execute_plan\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"solr.ExecutePlanAction\"</span>\nÊ  }\nÊ ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 967
  },
  {
    "content": "The Scheduled trigger generates events according to a fixed rate schedule.",
    "hierarchy": [
      "Scheduled Trigger"
    ],
    "pageId": 967
  },
  {
    "content": "The trigger supports the following configuration:",
    "hierarchy": [
      "Scheduled Trigger"
    ],
    "pageId": 967
  },
  {
    "content": "startTime\n(string, required) The start date/time of the schedule. This should either be a DateMath string e.g.,\n'NOW', or be an ISO-8601 date time string (the same standard used during search and indexing in Solr,\nwhich defaults to UTC), or be specified without the trailing 'Z' accompanied with the <span class=\"ff2 fs2\">timeZone</span> parameter.\nFor example, each of the following values are acceptable:",
    "hierarchy": [
      "Scheduled Trigger"
    ],
    "pageId": 967
  },
  {
    "content": "2018-01-31T15:30:00Z: ISO-8601 date time string. The trailing <span class=\"ff2 fs2\">Z</span> signals that the time is in UTC\n•NOW+5MINUTES: Solr's date math string\n•2018-01-31T15:30:00: No trailing 'Z' signals that the <span class=\"ff2 fs2\">timeZone</span> parameter must be specified to avoid\nambiguity",
    "hierarchy": [
      "Scheduled Trigger"
    ],
    "pageId": 967
  },
  {
    "content": "every\n(string, required) A positive Solr date math string which is added to the <span class=\"ff2 fs2\">startTime</span> or the last run time to\narrive at the next scheduled time.",
    "hierarchy": [
      "Scheduled Trigger"
    ],
    "pageId": 967
  },
  {
    "content": "graceTime\n(string, optional) A positive Solr date math string. This is the additional grace time over the scheduled\ntime within which the trigger is allowed to generate an event.",
    "hierarchy": [
      "Scheduled Trigger"
    ],
    "pageId": 967
  },
  {
    "content": "timeZone\n(string, optional) A time zone string which is used for calculating the scheduled times.",
    "hierarchy": [
    ],
    "pageId": 968
  },
  {
    "content": "preferredOp\n(string, optional, defaults to <span class=\"ff1 fs0\">MOVEREPLICA</span>) The preferred operation to perform in response to an event\ngenerated by this trigger. The only supported values are <span class=\"ff1 fs0\">MOVEREPLICA</span> or <span class=\"ff1 fs0\">ADDREPLICA</span>.",
    "hierarchy": [
    ],
    "pageId": 968
  },
  {
    "content": "This trigger applies the <span class=\"ff1 fs0\">every</span> date math expression on the <span class=\"ff1 fs0\">startTime</span> or the last event time to derive the\nnext scheduled time and if current time is greater than next scheduled time but within <span class=\"ff1 fs0\">graceTime</span> then an\nevent is generated.",
    "hierarchy": [
    ],
    "pageId": 968
  },
  {
    "content": "Apart from the common event properties described in the Event Types section, the trigger adds an\nadditional <span class=\"ff1 fs0\">actualEventTime</span> event property which has the actual event time as opposed to the scheduled\ntime.",
    "hierarchy": [
    ],
    "pageId": 968
  },
  {
    "content": "For example, if the scheduled time was <span class=\"ff1 fs0\">2018-01-31T15:30:00Z</span> and grace time was <span class=\"ff1 fs0\">+15MINUTES</span> then an\nevent may be fired at <span class=\"ff1 fs0\">2018-01-31T15:45:00Z</span>. Such an event will have <span class=\"ff1 fs0\">eventTime</span> as <span class=\"ff1 fs0\">2018-01-31T15:30:00Z</span>,\nthe scheduled time, but the <span class=\"ff1 fs0\">actualEventTime</span> property will have a value of <span class=\"ff1 fs0\">2018-01-31T15:45:00Z</span>, the\nactual time.",
    "hierarchy": [
    ],
    "pageId": 968
  },
  {
    "content": "Trigger configurations are managed using the Autoscaling Write API and the commands <span class=\"ff1 fs0\">set-trigger</span>,\nremove-trigger<span class=\"ff2 fs1\">, </span>suspend-trigger<span class=\"ff2 fs1\">, and </span>resume-trigger<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "Trigger configuration consists of the following properties:",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "name\n(string, required) A unique trigger configuration name.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "event\n(string, required) One of the predefined event types (<span class=\"ff1 fs0\">nodeAdded</span> or <span class=\"ff1 fs0\">nodeLost</span>).",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "actions\n(list of action configs, optional) An ordered list of actions to execute when event is fired.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "waitFor\n(string, optional) The time to wait between generating new events, as an integer number immediately\nfollowed by unit symbol, one of <span class=\"ff1 fs0\">s</span> (seconds), <span class=\"ff1 fs0\">m</span> (minutes), or <span class=\"ff1 fs0\">h</span> (hours). Default is <span class=\"ff1 fs0\">0s</span>.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "enabled\n(boolean, optional) When <span class=\"ff1 fs0\">true</span> the trigger is enabled. Default is <span class=\"ff1 fs0\">true</span>.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "Additional implementation-specific properties may be provided.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "Action configuration consists of the following properties:",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "name\n(string, required) A unique name of the action configuration.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "class\n(string, required) The action implementation class.",
    "hierarchy": [
      "Trigger Configuration"
    ],
    "pageId": 968
  },
  {
    "content": "Additional implementation-specific properties may be provided",
    "hierarchy": [
    ],
    "pageId": 969
  },
  {
    "content": "If the <span class=\"ff2 fs1\">actions</span> configuration is omitted, then by default, the <span class=\"ff2 fs1\">ComputePlanAction</span> and the <span class=\"ff2 fs1\">ExecutePlanAction</span>\nare automatically added to the trigger configuration.",
    "hierarchy": [
    ],
    "pageId": 969
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-trigger\"</span>: {\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"node_added_trigger\"</span>,\nÊ <span class=\"fc2\">\"event\"</span> : <span class=\"fc3\">\"nodeAdded\"</span>,\nÊ <span class=\"fc2\">\"waitFor\"</span> : <span class=\"fc3\">\"1s\"</span>,\nÊ <span class=\"fc2\">\"enabled\"</span> : <span class=\"fc4\">true</span>,\nÊ <span class=\"fc2\">\"actions\"</span> : [\nÊ  {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"compute_plan\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"solr.ComputePlanAction\"</span>\nÊ  },\nÊ  {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"custom_action\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"com.example.CustomAction\"</span>\nÊ  },\nÊ  {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"execute_plan\"</span>,\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"solr.ExecutePlanAction\"</span>\nÊ  }\nÊ ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 969
  },
  {
    "content": "This trigger configuration will compute and execute a plan to allocate the resources available on the new\nnode. A custom action is also used to possibly modify the plan.",
    "hierarchy": [
    ],
    "pageId": 969
  },
  {
    "content": "TriggerAction<span class=\"ff1 fs0\"> implementations process events generated by triggers in order to ensure the cluster's</span>\nhealth and good use of resources.",
    "hierarchy": [
      "SolrCloud Autoscaling Trigger Actions"
    ],
    "pageId": 969
  },
  {
    "content": "Currently two implementations are provided: <span class=\"ff2 fs1\">ComputePlanAction</span> and <span class=\"ff2 fs1\">ExecutePlanAction</span>.",
    "hierarchy": [
      "SolrCloud Autoscaling Trigger Actions"
    ],
    "pageId": 969
  },
  {
    "content": "The <span class=\"ff2 fs1\">ComputePlanAction</span> uses the policy and preferences to calculate the optimal set of Collection API\ncommands which can re-balance the cluster in response to trigger events.",
    "hierarchy": [
      "SolrCloud Autoscaling Trigger Actions",
      "Compute Plan Action"
    ],
    "pageId": 969
  },
  {
    "content": "The following parameters are configurable:",
    "hierarchy": [
      "SolrCloud Autoscaling Trigger Actions",
      "Compute Plan Action"
    ],
    "pageId": 969
  },
  {
    "content": "collections\nA comma-separated list of collection names. If this list is not empty then the computed operations will\nonly calculate collection operations that affect listed collections and ignore any other collection\noperations for collections not listed here. Note that non-collection operations are not affected by this.",
    "hierarchy": [
      "SolrCloud Autoscaling Trigger Actions",
      "Compute Plan Action"
    ],
    "pageId": 969
  },
  {
    "content": "Example configuration:",
    "hierarchy": [
    ],
    "pageId": 970
  },
  {
    "content": "{\nÊ<span class=\"fc1\">\"set-trigger\"</span> : {\nÊ <span class=\"fc1\">\"name\"</span> : <span class=\"fc2\">\"node_added_trigger\"</span>,\nÊ <span class=\"fc1\">\"event\"</span> : <span class=\"fc2\">\"nodeAdded\"</span>,\nÊ <span class=\"fc1\">\"waitFor\"</span> : <span class=\"fc2\">\"1s\"</span>,\nÊ <span class=\"fc1\">\"enabled\"</span> : <span class=\"fc3\">true</span>,\nÊ <span class=\"fc1\">\"actions\"</span> : [\nÊ  {\nÊ   <span class=\"fc1\">\"name\"</span> : <span class=\"fc2\">\"compute_plan\"</span>,\nÊ   <span class=\"fc1\">\"class\"</span> : <span class=\"fc2\">\"solr.ComputePlanAction\"</span>,\nÊ   <span class=\"fc1\">\"collections\"</span> : <span class=\"fc2\">\"test1,test2\"</span>,\nÊ  },\nÊ  {\nÊ   <span class=\"fc1\">\"name\"</span> : <span class=\"fc2\">\"execute_plan\"</span>,\nÊ   <span class=\"fc1\">\"class\"</span> : <span class=\"fc2\">\"solr.ExecutePlanAction\"</span>,\nÊ  }\nÊ ]\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 970
  },
  {
    "content": "In this example only collections <span class=\"ff2 fs1\">test1</span> and <span class=\"ff2 fs1\">test2</span> will be potentially replicated / moved to an added node,\nother collections will be ignored even if they cause policy violations.",
    "hierarchy": [
    ],
    "pageId": 970
  },
  {
    "content": "The <span class=\"ff2 fs1\">ExecutePlanAction</span> executes the Collection API commands emitted by the <span class=\"ff2 fs1\">ComputePlanAction</span> against\nthe cluster using SolrJ. It executes the commands serially, waiting for each of them to succeed before\ncontinuing with the next one.",
    "hierarchy": [
      "Execute Plan Action"
    ],
    "pageId": 970
  },
  {
    "content": "Currently, it has no configurable parameters.",
    "hierarchy": [
      "Execute Plan Action"
    ],
    "pageId": 970
  },
  {
    "content": "If any one of the commands fail, then the complete chain of actions are executed again at the next run of\nthe trigger. If the Overseer node fails while <span class=\"ff2 fs1\">ExecutePlanAction</span> is running, then the new Overseer node will\nrun the chain of actions for the same event again after waiting for any running Collection API operations\nbelonging to the event to complete.",
    "hierarchy": [
      "Execute Plan Action"
    ],
    "pageId": 970
  },
  {
    "content": "Please see <span class=\"link\">SolrCloud Autoscaling Fault Tolerance</span> for more details on fault tolerance within the autoscaling\nframework.",
    "hierarchy": [
      "Execute Plan Action"
    ],
    "pageId": 970
  },
  {
    "content": "Trigger Listeners allow users to configure additional behavior related to trigger events as they are being\nprocessed.",
    "hierarchy": [
      "SolrCloud Autoscaling Listeners"
    ],
    "pageId": 970
  },
  {
    "content": "For example, users may want to record autoscaling events to an external system, or notify an administrator\nwhen a particular type of event occurs or when its processing reaches certain stage (e.g., failed).",
    "hierarchy": [
      "SolrCloud Autoscaling Listeners"
    ],
    "pageId": 970
  },
  {
    "content": "Listener configuration always refers to a specific trigger configuration because a listener is notified of events",
    "hierarchy": [
      "SolrCloud Autoscaling Listeners"
    ],
    "pageId": 970
  },
  {
    "content": "generated by that specific trigger. Several (or none) named listeners can be registered for a trigger, and\nthey will be notified in the order in which they were defined.",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "Listener configuration can specify what processing stages are of interest, and when an event enters this\nprocessing stage the listener will be notified. Currently the following stages are recognized:",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "STARTED - when an event has been generated by a trigger and its processing is starting.",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "ABORTED - when event was being processed while the source trigger closed.",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "BEFORE_ACTION - when a <span class=\"ff2 fs1\">TriggerAction</span> is about to be invoked. Action name and the current\nActionContext<span class=\"ff1 fs0\"> are passed to the listener.</span>",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "AFTER_ACTION - after a <span class=\"ff2 fs1\">TriggerAction</span> has been successfully invoked. Action name, <span class=\"ff2 fs1\">ActionContext</span> and\nthe list of action names invoked so far are passed to the listener.",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "FAILED - when event processing failed (or when a <span class=\"ff2 fs1\">TriggerAction</span> failed)",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "SUCCEEDED - when event processing completes successfully",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "Listener configuration can also specify what particular actions are of interest, both before and/or after they\nare invoked.",
    "hierarchy": [
    ],
    "pageId": 971
  },
  {
    "content": "Currently the following listener configuration properties are supported:",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "name\n(string, required) A unique listener configuration name.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "trigger\n(string, required) The name of an existing trigger configuration.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "class\n(string, required) A listener implementation class name.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "stage\n(list of strings, optional, ignored case) A list of processing stages that this listener should be notified.\nDefault is empty list.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "beforeAction\n(list of strings, optional) A list of action names (as defined in trigger configuration) before which the\nlistener will be notified. Default is empty list.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "afterAction\n(list of strings, optional) A list of action names after which the listener will be notified. Default is empty\nlist.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "Additional implementation-specific properties may be provided, depending on the listener\nimplementation.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "Note: when both <span class=\"ff2 fs1\">stage</span> and <span class=\"ff2 fs1\">beforeAction</span> / <span class=\"ff2 fs1\">afterAction</span> lists are non-empty then the listener will be\nnotified both when a specified stage is entered and before / after specified actions.",
    "hierarchy": [
      "Listener Configuration"
    ],
    "pageId": 971
  },
  {
    "content": "Listener configurations are managed using the Autoscaling Write API, and using <span class=\"code\">set-listener</span> and <span class=\"code\">remove-</span>\nlistener<span class=\"ff2 fs0\"> commands.</span>",
    "hierarchy": [
      "Managing Listener Configurations"
    ],
    "pageId": 972
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Managing Listener Configurations"
    ],
    "pageId": 972
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-listener\"</span>: {\nÊ   <span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"foo\"</span>,\nÊ   <span class=\"fc2\">\"trigger\"</span>: <span class=\"fc3\">\"node_lost_trigger\"</span>,\nÊ   <span class=\"fc2\">\"stage\"</span>: [<span class=\"fc3\">\"STARTED\"</span>, <span class=\"fc3\">\"ABORTED\"</span>, <span class=\"fc3\">\"SUCCEEDED\"</span>, <span class=\"fc3\">\"FAILED\"</span>],\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"solr.SystemLogListener\"</span>\nÊ}\n}",
    "hierarchy": [
      "Managing Listener Configurations"
    ],
    "pageId": 972
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"remove-listener\"</span>: {\nÊ   <span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"foo\"</span>\nÊ}\n}",
    "hierarchy": [
      "Managing Listener Configurations"
    ],
    "pageId": 972
  },
  {
    "content": "Trigger listeners must implement the <span class=\"code\">TriggerListener</span> interface. Solr provides some implementations of\ntrigger listeners, which cover common use cases. These implementations are described below, together with\ntheir configuration parameters.",
    "hierarchy": [
      "Listener Implementations"
    ],
    "pageId": 972
  },
  {
    "content": "This trigger listener sends trigger events and processing context as documents for indexing in SolrCloud\n.system<span class=\"ff2 fs0\"> collection.</span>",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "When a trigger configuration is first created, a corresponding trigger listener configuration that uses\nSystemLogListener<span class=\"ff2 fs0\"> is also automatically created, to make sure that all events and actions related to the</span>\nautoscaling framework are logged to the <span class=\"code\">.system</span> collection.",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "Supported configuration properties:",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "collection\n(string, optional) Specifies the target collection where documents are sent. Default value is <span class=\"code\">.system</span>.",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "enabled\n(boolean, optional) Enables the listener when true. Default value is true.",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "Documents created by this listener have several predefined fields:",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "id - time-based random id",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "type - always set to <span class=\"code\">autoscaling_event</span>",
    "hierarchy": [
      "Listener Implementations",
      "SystemLogListener"
    ],
    "pageId": 972
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">source_s</span><span class=\"ls1\"> - always set to <span class=\"ff2 fs1\">SystemLogListener</span></span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">timestamp</span><span class=\"ls1\"> - current time when document was created</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">stage_s</span><span class=\"ls1\"> - current stage of event processing</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">action_s</span><span class=\"ls1\"> - current action name, if available</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">message_t</span><span class=\"ls1\"> - optional additional message</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">error.message_t</span><span class=\"ls1\"> - message from Throwable, if available</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">error.details_t</span><span class=\"ls1\"> - stacktrace from Throwable, if available</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">before.actions_ss</span><span class=\"ls1\"> - list of action names to be invoked so far</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">after.actions_ss</span><span class=\"ls1\"> - list of action names that have been successfully invoked so far</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">event_str</span><span class=\"ls1\"> - JSON representation of all event properties</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">context_str</span><span class=\"ls1\"> - JSON representation of all <span class=\"ff2 fs1\">ActionContext</span> properties, if available</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "The following fields are created using the information from trigger event:",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">event.id_s</span><span class=\"ls1\"> - event id</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">event.type_s</span><span class=\"ls1\"> - event type</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">event.source_s</span><span class=\"ls1\"> - event source (trigger name)</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">event.time_l</span><span class=\"ls1\"> - Unix time when the event was created (may significantly differ from the time when it was</span>\nactually processed)",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">event.property.*</span><span class=\"ls1\"> - additional fields that represent other arbitrary event properties. These fields use</span>\neither <span class=\"ff2 fs1\">_s</span> or <span class=\"ff2 fs1\">_ss</span> suffix depending on whether the property value is a collection (values inside collection\nare treated as strings, there's no recursive flattening)",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "The following configuration is used for the automatically created listener (in this case for a trigger named\nfoo<span class=\"ff1 fs0\">):</span>",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "{\nÊ<span class=\"fc1\">\"name\"</span> : <span class=\"fc2\">\"foo.system\"</span>,\nÊ<span class=\"fc1\">\"trigger\"</span> : <span class=\"fc2\">\"solr.SystemLogListener\"</span>,\nÊ<span class=\"fc1\">\"stage\"</span> : [<span class=\"fc2\">\"WAITING\"</span>, <span class=\"fc2\">\"STARTED\"</span>, <span class=\"fc2\">\"ABORTED\"</span>, <span class=\"fc2\">\"SUCCEEDED\"</span>, <span class=\"fc2\">\"FAILED\"</span>, <span class=\"fc2\">\"BEFORE_ACTION\"</span>,",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "}",
    "hierarchy": [
    ],
    "pageId": 973
  },
  {
    "content": "This listener uses HTTP POST to send a representation of the event and context to a specified URL. The URL,\npayload, and headers may contain property substitution patterns, which are then replaced with values taken\nfrom the current event or context properties.",
    "hierarchy": [
      "HttpTriggerListener"
    ],
    "pageId": 973
  },
  {
    "content": "Templates use the same syntax as property substitution in Solr configuration files, e.g., <span class=\"ff2 fs1\">${foo.bar:baz}</span>\nmeans that the value of <span class=\"ff2 fs1\">foo.bar</span> property should be taken, and <span class=\"ff2 fs1\">baz</span> should be used if the value is absent.",
    "hierarchy": [
      "HttpTriggerListener"
    ],
    "pageId": 973
  },
  {
    "content": "Supported configuration properties:",
    "hierarchy": [
      "HttpTriggerListener"
    ],
    "pageId": 973
  },
  {
    "content": "url\n(string, required) A URL template.",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "payload\n(string, optional) A payload template. If absent, a JSON map of all properties listed above will be used.",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "contentType\n(string, optional) A payload content type. If absent then <span class=\"ff1 fs0\">application/json</span> will be used.",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "header.*\n(string, optional) A header template(s). The name of the property without \"header.\" prefix defines the\nliteral header name.",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "timeout\n(int, optional) Connection and socket timeout in milliseconds. Default is <span class=\"ff1 fs0\">60000</span> milliseconds (60 seconds).",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "followRedirects\n(boolean, optional) Allows following redirects. Default is <span class=\"ff1 fs0\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "The following properties are available in context and can be referenced from templates:",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "config.* - listener configuration properties",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "event.* - current event properties",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "stage - current stage of event processing",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "actionName - optional current action name",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "context.* - optional ActionContext properties",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "error - optional error string (from Throwable.toString())",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "message - optional message",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"foo\"</span>,\nÊ<span class=\"fc2\">\"trigger\"</span>: <span class=\"fc3\">\"node_added_trigger\"</span>,\nÊ<span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"solr.HttpTriggerListener\"</span>,\nÊ<span class=\"fc2\">\"url\"</span>:",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "Ê<span class=\"fc2\">\"xyz\"</span>: <span class=\"fc3\">\"foobar\"</span>,\nÊ<span class=\"fc2\">\"header.X-Trigger\"</span>: <span class=\"fc3\">\"${config.trigger}\"</span>,\nÊ<span class=\"fc2\">\"payload\"</span>: <span class=\"fc3\">\"actionName=${actionName}, source=${event.source}, type=${event.eventType}\"</span>,\nÊ<span class=\"fc2\">\"contentType\"</span>: <span class=\"fc3\">\"text/plain\"</span>,\nÊ<span class=\"fc2\">\"stage\"</span>: [<span class=\"fc3\">\"STARTED\"</span>, <span class=\"fc3\">\"ABORTED\"</span>, <span class=\"fc3\">\"SUCCEEDED\"</span>, <span class=\"fc3\">\"FAILED\"</span>],\nÊ<span class=\"fc2\">\"beforeAction\"</span>: [<span class=\"fc3\">\"compute_plan\"</span>, <span class=\"fc3\">\"execute_plan\"</span>],\nÊ<span class=\"fc2\">\"afterAction\"</span>: [<span class=\"fc3\">\"compute_plan\"</span>, <span class=\"fc3\">\"execute_plan\"</span>]\n}",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "This configuration specifies that each time one of the listed stages is reached, or before and after each of the\nlisted actions is executed, the listener will send the templated payload to a URL that also depends on the",
    "hierarchy": [
    ],
    "pageId": 974
  },
  {
    "content": "config and the current event, and with a custom header that indicates the trigger name.",
    "hierarchy": [
    ],
    "pageId": 975
  },
  {
    "content": "Solr provides a way to automatically add replicas for a collection when the number of active replicas drops\nbelow the replication factor specified at the time of the creation of the collection.",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas"
    ],
    "pageId": 975
  },
  {
    "content": "The boolean <span class=\"code\">autoAddReplicas</span> parameter can be passed to the CREATE command of the Collection API to\nenable this feature for a given collection.",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "The autoAddReplicas Parameter"
    ],
    "pageId": 975
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CREATE&name=my_collection&numShards=1&replica\ntionFactor=5&autoAddReplicas=true",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "The autoAddReplicas Parameter"
    ],
    "pageId": 975
  },
  {
    "content": "The MODIFYCOLLECTION command can be used to enable/disable this feature for any collection.",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "The autoAddReplicas Parameter"
    ],
    "pageId": 975
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=MODIFYCOLLECTION&name=my_collection&autoAddRe\nplicas=false",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "The autoAddReplicas Parameter"
    ],
    "pageId": 975
  },
  {
    "content": "A Trigger named <span class=\"code\">.autoAddReplicas</span> is automatically created whenever any collection has the\nautoAddReplicas feature enabled.",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "Implementation Using .autoAddReplicas Trigger"
    ],
    "pageId": 975
  },
  {
    "content": "Only one trigger is sufficient to serve all collections having this feature enabled. The <span class=\"code\">.autoAddReplicas</span>\ntrigger watches for nodes that are lost from the cluster and uses the default <span class=\"code\">TriggerActions</span> to create new\nreplicas to replace the ones which were hosted by the lost node. If the old node comes back online, it\nunloads the moved replicas and the node is free to host other replicas as and when required.",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "Implementation Using .autoAddReplicas Trigger"
    ],
    "pageId": 975
  },
  {
    "content": "Since the trigger provides the autoAddReplicas feature for all collections, the <span class=\"code\">suspend-trigger</span> and <span class=\"code\">resume-</span>\ntrigger<span class=\"ff1 fs0\"> Autoscaling API commands can be used to disable and enable this feature for all collections in one</span>\nAPI call.",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "Implementation Using .autoAddReplicas Trigger"
    ],
    "pageId": 975
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"suspend-trigger\"</span>: {\nÊ   <span class=\"fc3\">\"name\"</span> : <span class=\"fc4\">\".autoAddReplicas\"</span>\nÊ }\n}",
    "hierarchy": [
      "SolrCloud Autoscaling Automatically Adding Replicas",
      "Implementation Using .autoAddReplicas Trigger"
    ],
    "pageId": 975
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"resume-trigger\"</span>: {\nÊ   <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\".autoAddReplicas\"</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 976
  },
  {
    "content": "A cluster property, also named <span class=\"ff2 fs2\">autoAddReplicas</span>, can be set to <span class=\"ff2 fs2\">false</span> to disable this feature for all\ncollections. If this cluster property is missing or set to <span class=\"ff2 fs2\">true</span>, the autoAddReplicas is enabled for all\ncollections.",
    "hierarchy": [
      "Using Cluster Property to Enable autoAddReplicas"
    ],
    "pageId": 976
  },
  {
    "content": "Using a cluster property to enable or disable autoAddReplicas is deprecated and only\nsupported for back compatibility. Please use the <span class=\"ff2 fs2\">suspend-trigger</span> and <span class=\"ff2 fs2\">resume-trigger</span> API\ncommands instead.",
    "hierarchy": [
      "Using Cluster Property to Enable autoAddReplicas"
    ],
    "pageId": 976
  },
  {
    "content": "The autoscaling framework uses a few strategies to ensure it's able to still trigger actions in the event of\nunexpected changes to the system.",
    "hierarchy": [
      "SolrCloud Autoscaling Fault Tolerance"
    ],
    "pageId": 976
  },
  {
    "content": "Since triggers execute on the node that runs the Overseer, should the Overseer node go down the <span class=\"ff2 fs2\">nodeLost</span>\nevent would be lost because there would be no mechanism to generate it. Similarly, if a node has been\nadded before the Overseer leader change was completed, the <span class=\"ff2 fs2\">nodeAdded</span> event would not be generated.",
    "hierarchy": [
      "SolrCloud Autoscaling Fault Tolerance",
      "Node Added or Lost Markers"
    ],
    "pageId": 976
  },
  {
    "content": "For this reason Solr implements additional mechanisms to ensure that these events are generated reliably.",
    "hierarchy": [
      "SolrCloud Autoscaling Fault Tolerance",
      "Node Added or Lost Markers"
    ],
    "pageId": 976
  },
  {
    "content": "With standard SolrCloud behavior, when a node joins a cluster its presence is marked as an ephemeral\nZooKeeper path in the <span class=\"ff2 fs2\">/live_nodes/<nodeName></span> ZooKeeper directory. Now an ephemeral path is also\ncreated under <span class=\"ff2 fs2\">/autoscaling/nodeAdded/<nodeName></span>. When a new instance of Overseer leader is started it\nwill run the <span class=\"ff2 fs2\">nodeAdded</span> trigger (if it's configured) and discover the presence of this ZooKeeper path, at which\npoint it will remove it and generate a <span class=\"ff2 fs2\">nodeAdded</span> event.",
    "hierarchy": [
      "SolrCloud Autoscaling Fault Tolerance",
      "Node Added or Lost Markers"
    ],
    "pageId": 976
  },
  {
    "content": "When a node leaves the cluster, up to three remaining nodes will try to create a persistent ZooKeeper path\n/autoscaling/nodeLost/<nodeName><span class=\"ff4 fs0\"> and eventually one of them succeeds. When a new instance of</span>\nOverseer leader is started it will run the <span class=\"ff2 fs2\">nodeLost</span> trigger (if it's configured) and discover the presence of\nthis ZooKeeper path, at which point it will remove it and generate a <span class=\"ff2 fs2\">nodeLost</span> event.",
    "hierarchy": [
      "SolrCloud Autoscaling Fault Tolerance",
      "Node Added or Lost Markers"
    ],
    "pageId": 976
  },
  {
    "content": "Triggers generate events based on their internal state. If the Overseer leader goes down while the trigger is\nabout to generate a new event, it's likely that the event would be lost because a new trigger instance\nrunning on the new Overseer leader would start from a clean slate.",
    "hierarchy": [
      "SolrCloud Autoscaling Fault Tolerance",
      "Trigger State Checkpointing"
    ],
    "pageId": 976
  },
  {
    "content": "For this reason, after each time a trigger is executed its internal state is persisted to ZooKeeper, and on\nOverseer start its internal state is restored.",
    "hierarchy": [
    ],
    "pageId": 977
  },
  {
    "content": "Autoscaling framework limits the rate at which events are processed using several different mechanisms.\nOne is the locking mechanism that prevents concurrent processing of events, and another is a single-\nthreaded executor that runs trigger actions.",
    "hierarchy": [
      "Trigger Event Queues"
    ],
    "pageId": 977
  },
  {
    "content": "This means that the processing of an event may take significant time, and during this time it's possible that\nthe Overseer may go down. In order to avoid losing events that were already generated but not yet fully\nprocessed, events are queued before processing is started.",
    "hierarchy": [
      "Trigger Event Queues"
    ],
    "pageId": 977
  },
  {
    "content": "Separate ZooKeeper queues are created for each trigger, and events produced by triggers are put on these\nper-trigger queues. When a new Overseer leader is started it will first check these queues and process\nevents accumulated there, and only then it will continue to run triggers normally. Queued events that fail\nprocessing during this \"replay\" stage are discarded.",
    "hierarchy": [
      "Trigger Event Queues"
    ],
    "pageId": 977
  },
  {
    "content": "The Autoscaling API is used to manage autoscaling policies, preferences, triggers, listeners and to get\ndiagnostics on the state of the cluster.",
    "hierarchy": [
      "Autoscaling API"
    ],
    "pageId": 977
  },
  {
    "content": "The autoscaling Read API is available at <span class=\"code\">/solr/admin/autoscaling</span> or <span class=\"code\">/api/cluster/autoscaling</span> (v2 API\nstyle). It returns information about the configured cluster preferences, cluster policy, collection-specific\npolicies triggers and listeners.",
    "hierarchy": [
      "Autoscaling API",
      "Read API"
    ],
    "pageId": 977
  },
  {
    "content": "This API does not take any parameters.",
    "hierarchy": [
      "Autoscaling API",
      "Read API"
    ],
    "pageId": 977
  },
  {
    "content": "The output will contain cluster preferences, cluster policy and collection specific policies.",
    "hierarchy": [
      "Autoscaling API",
      "Read API",
      "Read API Response"
    ],
    "pageId": 977
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">2</span>\nÊ   },\nÊ   <span class=\"fc1\">\"cluster-policy\"</span>: [\nÊ       {\nÊ           <span class=\"fc1\">\"replica\"</span>: <span class=\"fc3\">\"<2\"</span>,\nÊ           <span class=\"fc1\">\"shard\"</span>: <span class=\"fc3\">\"#EACH\"</span>,\nÊ           <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"#ANY\"</span>\nÊ       }\nÊ   ],\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 978
  },
  {
    "content": "The diagnostics API shows the violations, if any, of all conditions in the cluster and, if applicable, the\ncollection-specific policy. It is available at the <span class=\"ff1 fs2\">/admin/autoscaling/diagnostics</span> path.",
    "hierarchy": [
      "Diagnostics API"
    ],
    "pageId": 978
  },
  {
    "content": "This API does not take any parameters.",
    "hierarchy": [
      "Diagnostics API"
    ],
    "pageId": 978
  },
  {
    "content": "The output will contain <span class=\"ff1 fs2\">sortedNodes</span> which is a list of nodes in the cluster sorted according to overall load in\ndescending order (as determined by the preferences) and <span class=\"ff1 fs2\">violations</span> which is a list of nodes along with the\nconditions that they violate.",
    "hierarchy": [
      "Diagnostics API",
      "Diagnostics API Response"
    ],
    "pageId": 978
  },
  {
    "content": "Here is an example with no violations but in the <span class=\"ff1 fs2\">sortedNodes</span> section, we can see that the first node is most\nloaded (according to number of cores):",
    "hierarchy": [
      "Diagnostics API",
      "Examples Using Diagnostics API"
    ],
    "pageId": 978
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">65</span>\nÊ   },\nÊ   <span class=\"fc1\">\"diagnostics\"</span>: {\nÊ       <span class=\"fc1\">\"sortedNodes\"</span>: [\nÊ           {\nÊ               <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"127.0.0.1:8983_solr\"</span>,\nÊ               <span class=\"fc1\">\"cores\"</span>: <span class=\"fc2\">3</span>\nÊ           },\nÊ           {\nÊ               <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"127.0.0.1:7574_solr\"</span>,\nÊ               <span class=\"fc1\">\"cores\"</span>: <span class=\"fc2\">2</span>\nÊ           }\nÊ       ],\nÊ       <span class=\"fc1\">\"violations\"</span>: []\nÊ   },\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 979
  },
  {
    "content": "Suppose we added a condition to the cluster policy as follows:",
    "hierarchy": [
    ],
    "pageId": 979
  },
  {
    "content": "{<span class=\"fc1\">\"replica\"</span>: <span class=\"fc3\">\"<2\"</span>, <span class=\"fc1\">\"shard\"</span>: <span class=\"fc3\">\"#EACH\"</span>, <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"#ANY\"</span>}",
    "hierarchy": [
    ],
    "pageId": 979
  },
  {
    "content": "However, since the first node in the first example had more than 1 replica for a shard already, then the\ndiagnostics API will return:",
    "hierarchy": [
    ],
    "pageId": 979
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">45</span>\nÊ   },\nÊ   <span class=\"fc1\">\"diagnostics\"</span>: {\nÊ       <span class=\"fc1\">\"sortedNodes\"</span>: [\nÊ           {\nÊ               <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"127.0.0.1:8983_solr\"</span>,\nÊ               <span class=\"fc1\">\"cores\"</span>: <span class=\"fc2\">3</span>\nÊ           },\nÊ           {\nÊ               <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"127.0.0.1:7574_solr\"</span>,\nÊ               <span class=\"fc1\">\"cores\"</span>: <span class=\"fc2\">2</span>\nÊ           }\nÊ       ],\nÊ       <span class=\"fc1\">\"violations\"</span>: [\nÊ           {\nÊ               <span class=\"fc1\">\"collection\"</span>: <span class=\"fc3\">\"gettingstarted\"</span>,\nÊ               <span class=\"fc1\">\"shard\"</span>: <span class=\"fc3\">\"shard1\"</span>,\nÊ               <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"127.0.0.1:8983_solr\"</span>,\nÊ               <span class=\"fc1\">\"tagKey\"</span>: <span class=\"fc3\">\"127.0.0.1:8983_solr\"</span>,\nÊ               <span class=\"fc1\">\"violation\"</span>: {\nÊ                   <span class=\"fc1\">\"replica\"</span>: <span class=\"fc3\">\"2\"</span>,\nÊ                   <span class=\"fc1\">\"delta\"</span>: <span class=\"fc2\">0</span>\nÊ               },\nÊ               <span class=\"fc1\">\"clause\"</span>: {\nÊ                   <span class=\"fc1\">\"replica\"</span>: <span class=\"fc3\">\"<2\"</span>,\nÊ                   <span class=\"fc1\">\"shard\"</span>: <span class=\"fc3\">\"#EACH\"</span>,\nÊ                   <span class=\"fc1\">\"node\"</span>: <span class=\"fc3\">\"#ANY\"</span>,\nÊ                   <span class=\"fc1\">\"collection\"</span>: <span class=\"fc3\">\"gettingstarted\"</span>\nÊ               }\nÊ           }\nÊ       ]\nÊ   },\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 980
  },
  {
    "content": "In the above example the node with port 8983 has two replicas for <span class=\"ff1 fs1\">shard1</span> in violation of our policy.",
    "hierarchy": [
    ],
    "pageId": 980
  },
  {
    "content": "Suggestions are operations recommended by the system according to the policies and preferences the user\nhas set.",
    "hierarchy": [
      "Suggestions API"
    ],
    "pageId": 980
  },
  {
    "content": "Suggestions are made only if there are <span class=\"ff1 fs1\">violations</span> to active policies. The <span class=\"ff1 fs1\">operation</span> section of the response\nuses the defined preferences to identify the target node.",
    "hierarchy": [
      "Suggestions API"
    ],
    "pageId": 980
  },
  {
    "content": "The API is available at <span class=\"ff1 fs1\">/admin/autoscaling/suggestion</span>. Here is an example output from a suggestion\nrequest:",
    "hierarchy": [
      "Suggestions API"
    ],
    "pageId": 980
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">101</span>},\nÊ <span class=\"fc1\">\"suggestions\"</span>:[{\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"violation\"</span>,\nÊ     <span class=\"fc1\">\"violation\"</span>:{\nÊ       <span class=\"fc1\">\"collection\"</span>:<span class=\"fc3\">\"mycoll\"</span>,\nÊ       <span class=\"fc1\">\"shard\"</span>:<span class=\"fc3\">\"shard2\"</span>,\nÊ       <span class=\"fc1\">\"tagKey\"</span>:<span class=\"fc3\">\"7574\"</span>,\nÊ       <span class=\"fc1\">\"violation\"</span>:{ <span class=\"fc1\">\"delta\"</span>:<span class=\"fc2\">-1</span>},\nÊ       <span class=\"fc1\">\"clause\"</span>:{\nÊ         <span class=\"fc1\">\"replica\"</span>:<span class=\"fc3\">\"0\"</span>,\nÊ         <span class=\"fc1\">\"shard\"</span>:<span class=\"fc3\">\"#EACH\"</span>,\nÊ         <span class=\"fc1\">\"port\"</span>:<span class=\"fc2\">7574</span>,\nÊ         <span class=\"fc1\">\"collection\"</span>:<span class=\"fc3\">\"mycoll\"</span>}},\nÊ     <span class=\"fc1\">\"operation\"</span>:{\nÊ       <span class=\"fc1\">\"method\"</span>:<span class=\"fc3\">\"POST\"</span>,\nÊ       <span class=\"fc1\">\"path\"</span>:<span class=\"fc3\">\"/c/mycoll\"</span>,\nÊ       <span class=\"fc1\">\"command\"</span>:{<span class=\"fc1\">\"move-replica\"</span>:{\nÊ           <span class=\"fc1\">\"targetNode\"</span>:<span class=\"fc3\">\"192.168.43.37:8983_solr\"</span>,\nÊ           <span class=\"fc1\">\"replica\"</span>:<span class=\"fc3\">\"core_node7\"</span>}}}},\nÊ   {\nÊ     <span class=\"fc1\">\"type\"</span>:<span class=\"fc3\">\"violation\"</span>,\nÊ     <span class=\"fc1\">\"violation\"</span>:{\nÊ       <span class=\"fc1\">\"collection\"</span>:<span class=\"fc3\">\"mycoll\"</span>,\nÊ       <span class=\"fc1\">\"shard\"</span>:<span class=\"fc3\">\"shard2\"</span>,\nÊ       <span class=\"fc1\">\"tagKey\"</span>:<span class=\"fc3\">\"7574\"</span>,\nÊ       <span class=\"fc1\">\"violation\"</span>:{ <span class=\"fc1\">\"delta\"</span>:<span class=\"fc2\">-1</span>},\nÊ       <span class=\"fc1\">\"clause\"</span>:{\nÊ         <span class=\"fc1\">\"replica\"</span>:<span class=\"fc3\">\"0\"</span>,\nÊ         <span class=\"fc1\">\"shard\"</span>:<span class=\"fc3\">\"#EACH\"</span>,\nÊ         <span class=\"fc1\">\"port\"</span>:<span class=\"fc2\">7574</span>,\nÊ         <span class=\"fc1\">\"collection\"</span>:<span class=\"fc3\">\"mycoll\"</span>}},\nÊ     <span class=\"fc1\">\"operation\"</span>:{\nÊ       <span class=\"fc1\">\"method\"</span>:<span class=\"fc3\">\"POST\"</span>,\nÊ       <span class=\"fc1\">\"path\"</span>:<span class=\"fc3\">\"/c/mycoll\"</span>,\nÊ       <span class=\"fc1\">\"command\"</span>:{<span class=\"fc1\">\"move-replica\"</span>:{\nÊ           <span class=\"fc1\">\"targetNode\"</span>:<span class=\"fc3\">\"192.168.43.37:7575_solr\"</span>,\nÊ           <span class=\"fc1\">\"replica\"</span>:<span class=\"fc3\">\"core_node15\"</span>}}}}],\nÊ <span class=\"fc1\">\"WARNING\"</span>:<span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>}",
    "hierarchy": [
    ],
    "pageId": 981
  },
  {
    "content": "The suggested <span class=\"ff1 fs1\">operation</span> is an API call that can be invoked to remedy the current violation.",
    "hierarchy": [
    ],
    "pageId": 981
  },
  {
    "content": "The history of autoscaling events is available at <span class=\"ff1 fs1\">/admin/autoscaling/history</span>. It returns information about\npast autoscaling events and details about their processing. This history is kept in the <span class=\"ff1 fs1\">.system</span> collection, and\nis populated by a trigger listener <span class=\"ff1 fs1\">SystemLogListener</span>. By default this listener is added to all new triggers.",
    "hierarchy": [
      "History API"
    ],
    "pageId": 981
  },
  {
    "content": "History events are regular Solr documents so they can be also accessed directly by searching on the <span class=\"ff1 fs1\">.system</span>",
    "hierarchy": [
      "History API"
    ],
    "pageId": 981
  },
  {
    "content": "collection. The history handler acts as a regular search handler, so all query parameters supported by\n/select<span class=\"ff1 fs0\"> handler for that collection are supported here too. However, the history handler makes this process</span>\neasier by offering a simpler syntax and knowledge of field names used by <span class=\"ff2 fs1\">SystemLogListener</span> for\nserialization of event data.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "History documents contain the action context, if it was available, which gives further insight into e.g., exact\noperations that were computed and/or executed.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "Specifically, the following query parameters can be used (they are turned into filter queries, so an implicit\nAND is applied):",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "trigger\nThe name of the trigger.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "eventType\nThe event type or trigger type (e.g., <span class=\"ff2 fs1\">nodeAdded</span>).",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "collection\nThe name of the collection involved in event processing.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "stage\nAn event processing stage.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "action\nA trigger action.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "node\nA node name that the event refers to.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "beforeAction\nA <span class=\"ff2 fs1\">beforeAction</span> stage.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "afterAction\nAn <span class=\"ff2 fs1\">afterAction</span> stage.",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "{\nÊ   <span class=\"fc2\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc2\">\"status\"</span>: <span class=\"fc3\">0</span>,\nÊ       <span class=\"fc2\">\"QTime\"</span>: <span class=\"fc3\">64</span>\nÊ   },\nÊ   <span class=\"fc2\">\"response\"</span>: {\nÊ       <span class=\"fc2\">\"numFound\"</span>: <span class=\"fc3\">2</span>,\nÊ       <span class=\"fc2\">\"start\"</span>: <span class=\"fc3\">0</span>,\nÊ       <span class=\"fc2\">\"docs\"</span>: [\nÊ           {\nÊ               <span class=\"fc2\">\"type\"</span>: <span class=\"fc4\">\"autoscaling_event\"</span>,\nÊ               <span class=\"fc2\">\"source_s\"</span>: <span class=\"fc4\">\"SystemLogListener\"</span>,\nÊ               <span class=\"fc2\">\"id\"</span>: <span class=\"fc4\">\"15f53efdf4bT2qlmj80580yuu997vktddfob3\"</span>,\nÊ               <span class=\"fc2\">\"event.id_s\"</span>: <span class=\"fc4\">\"14f0d67fe7b97d80T2qlmj80580yuu997vktddfob2\"</span>,\nÊ               <span class=\"fc2\">\"event.type_s\"</span>: <span class=\"fc4\">\"NODELOST\"</span>,",
    "hierarchy": [
    ],
    "pageId": 982
  },
  {
    "content": "Ê               <span class=\"fc1\">\"event.source_s\"</span>: <span class=\"fc2\">\".auto_add_replicas\"</span>,\nÊ               <span class=\"fc1\">\"event.time_l\"</span>: <span class=\"fc3\">1508941720006000000</span>,\nÊ               <span class=\"fc1\">\"timestamp\"</span>: <span class=\"fc2\">\"2017-10-25T14:29:10.091Z\"</span>,\nÊ               <span class=\"fc1\">\"event.property.eventTimes_ss\"</span>: [\nÊ                   <span class=\"fc2\">\"1508941720006000000\"</span>\nÊ               ],\nÊ               <span class=\"fc1\">\"event.property._enqueue_time__ss\"</span>: [\nÊ                   <span class=\"fc2\">\"1508941750088000000\"</span>\nÊ               ],\nÊ               <span class=\"fc1\">\"event.property.nodeNames_ss\"</span>: [\nÊ                   <span class=\"fc2\">\"192.168.1.104:7574_solr\"</span>\nÊ               ],\nÊ               <span class=\"fc1\">\"stage_s\"</span>: <span class=\"fc2\">\"STARTED\"</span>,\nÊ               <span class=\"fc1\">\"event_str\"</span>: <span class=\"fc2\">\"{\\n</span>  <span class=\"fc2\">\\\"id\\\":\\\"14f0d67fe7b97d80T2qlmj80580yuu997vktddfob2\\\",\\n</span>",
    "hierarchy": [
    ],
    "pageId": 983
  },
  {
    "content": "Ê               <span class=\"fc1\">\"_version_\"</span>: <span class=\"fc3\">1582240104552857600</span>\nÊ           },\nÊ           {\nÊ               <span class=\"fc1\">\"type\"</span>: <span class=\"fc2\">\"autoscaling_event\"</span>,\nÊ               <span class=\"fc1\">\"source_s\"</span>: <span class=\"fc2\">\"SystemLogListener\"</span>,\nÊ               <span class=\"fc1\">\"id\"</span>: <span class=\"fc2\">\"15f53eff316T2qlmj80580yuu997vktddfob6\"</span>,\nÊ               <span class=\"fc1\">\"event.id_s\"</span>: <span class=\"fc2\">\"14f0d67fe7b97d80T2qlmj80580yuu997vktddfob2\"</span>,\nÊ               <span class=\"fc1\">\"event.type_s\"</span>: <span class=\"fc2\">\"NODELOST\"</span>,\nÊ               <span class=\"fc1\">\"event.source_s\"</span>: <span class=\"fc2\">\".auto_add_replicas\"</span>,\nÊ               <span class=\"fc1\">\"event.time_l\"</span>: <span class=\"fc3\">1508941720006000000</span>,\nÊ               <span class=\"fc1\">\"timestamp\"</span>: <span class=\"fc2\">\"2017-10-25T14:29:15.158Z\"</span>,\nÊ               <span class=\"fc1\">\"event.property.eventTimes_ss\"</span>: [\nÊ                   <span class=\"fc2\">\"1508941720006000000\"</span>\nÊ               ],\nÊ               <span class=\"fc1\">\"event.property._enqueue_time__ss\"</span>: [\nÊ                   <span class=\"fc2\">\"1508941750088000000\"</span>\nÊ               ],\nÊ               <span class=\"fc1\">\"event.property.nodeNames_ss\"</span>: [\nÊ                   <span class=\"fc2\">\"192.168.1.104:7574_solr\"</span>\nÊ               ],\nÊ               <span class=\"fc1\">\"stage_s\"</span>: <span class=\"fc2\">\"SUCCEEDED\"</span>,\nÊ               <span class=\"fc1\">\"event_str\"</span>: <span class=\"fc2\">\"{\\n</span>  <span class=\"fc2\">\\\"id\\\":\\\"14f0d67fe7b97d80T2qlmj80580yuu997vktddfob2\\\",\\n</span>",
    "hierarchy": [
    ],
    "pageId": 983
  },
  {
    "content": "Ê               <span class=\"fc1\">\"_version_\"</span>: <span class=\"fc3\">1582240109859700736</span>\nÊ           }\nÊ       ]\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 983
  },
  {
    "content": "Due to a bug in Solr 7.1.0, the History API is available only at the path\n/admin/autoscaling/history<span class=\"code\">. Using the </span>/api/cluster/autoscaling/history<span class=\"code\"> endpoint</span>\nreturns an error.",
    "hierarchy": [
    ],
    "pageId": 984
  },
  {
    "content": "The Write API is available at the same <span class=\"ff4 fs2\">/admin/autoscaling</span> and <span class=\"ff4 fs2\">/api/cluster/autoscaling</span> endpoints as\nthe Read API but can only be used with the <span class=\"ff5\">POST</span> HTTP verb.",
    "hierarchy": [
      "Write API"
    ],
    "pageId": 984
  },
  {
    "content": "The payload of the POST request is a JSON message with commands to set and remove components.\nMultiple commands can be specified together in the payload. The commands are executed in the order\nspecified and the changes are atomic, i.e., either all succeed or none.",
    "hierarchy": [
      "Write API"
    ],
    "pageId": 984
  },
  {
    "content": "Cluster preferences are specified as a list of sort preferences. Multiple sorting preferences can be specified\nand they are applied in the order they are set.",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "They are defined using the <span class=\"ff4 fs2\">set-cluster-preferences</span> command.",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "Each preference is a JSON map having the following syntax:",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "{'<sort_order>':'<sort_param>', 'precision':'<precision_val>'}",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "See the section <span class=\"link\">Cluster Preferences Specification</span> for details about the allowed values for the <span class=\"ff4 fs2\">sort_order</span>,\nsort_param<span class=\"code\"> and </span>precision<span class=\"code\"> parameters.</span>",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "Changing the cluster preferences after the cluster is already built doesn't automatically reconfigure the\ncluster. However, all future cluster management operations will use the changed preferences.",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "{",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "Ê {<span class=\"fc5\">\"minimize\"</span>: <span class=\"fc6\">\"cores\"</span>}\nÊ ]\n}",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "The output has a key named <span class=\"ff4 fs2\">result</span> which will return either <span class=\"ff4 fs2\">success</span> or <span class=\"ff4 fs2\">failure</span> depending on whether the\ncommand succeeded or failed.",
    "hierarchy": [
      "Write API",
      "Create and Modify Cluster Preferences"
    ],
    "pageId": 984
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">138</span>\nÊ   },\nÊ   <span class=\"fc1\">\"result\"</span>: <span class=\"fc3\">\"success\"</span>,\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 985
  },
  {
    "content": "In this example we add cluster preferences that sort on three different parameters:",
    "hierarchy": [
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"set-cluster-preferences\"</span>: [\nÊ   {\nÊ     <span class=\"fc1\">\"minimize\"</span>: <span class=\"fc3\">\"cores\"</span>,\nÊ     <span class=\"fc1\">\"precision\"</span>: <span class=\"fc2\">2</span>\nÊ   },\nÊ   {\nÊ     <span class=\"fc1\">\"maximize\"</span>: <span class=\"fc3\">\"freedisk\"</span>,\nÊ     <span class=\"fc1\">\"precision\"</span>: <span class=\"fc2\">100</span>\nÊ   },\nÊ   {\nÊ     <span class=\"fc1\">\"minimize\"</span>: <span class=\"fc3\">\"sysLoadAvg\"</span>,\nÊ     <span class=\"fc1\">\"precision\"</span>: <span class=\"fc2\">10</span>\nÊ   }\nÊ ]\n}",
    "hierarchy": [
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "We can remove all cluster preferences by setting preferences to an empty list.",
    "hierarchy": [
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"set-cluster-preferences\"</span>: []\n}",
    "hierarchy": [
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "Cluster policies are set using the <span class=\"ff1 fs2\">set-cluster-policy</span> command.",
    "hierarchy": [
      "Create and Modify Cluster Policies",
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "Like <span class=\"ff1 fs2\">set-cluster-preferences</span>, the policy definition is a JSON map defining the desired attributes and\nvalues.",
    "hierarchy": [
      "Create and Modify Cluster Policies",
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "Refer to the <span class=\"link\">Policy Specification</span> section for details of the allowed values for each condition in the policy.",
    "hierarchy": [
      "Create and Modify Cluster Policies",
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "Input<span class=\"code\">:</span>",
    "hierarchy": [
      "Create and Modify Cluster Policies",
      "Example Setting Cluster Preferences"
    ],
    "pageId": 985
  },
  {
    "content": "{",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "Ê {<span class=\"fc1\">\"replica\"</span>: <span class=\"fc2\">\"<2\"</span>, <span class=\"fc1\">\"shard\"</span>: <span class=\"fc2\">\"#EACH\"</span>, <span class=\"fc1\">\"node\"</span>: <span class=\"fc2\">\"#ANY\"</span>}\nÊ ]\n}",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "Output<span class=\"code\">:</span>",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc3\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc3\">47</span>\nÊ   },\nÊ   <span class=\"fc1\">\"result\"</span>: <span class=\"fc2\">\"success\"</span>,\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc2\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "We can remove all cluster policy conditions by setting policy to an empty list.",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"set-cluster-policy\"</span>: []\n}",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "Changing the cluster policy after the cluster is already built doesn't automatically reconfigure the cluster.\nHowever, all future cluster management operations will use the changed cluster policy.",
    "hierarchy": [
    ],
    "pageId": 986
  },
  {
    "content": "The <span class=\"ff1 fs1\">set-policy</span> command accepts a map of policy names to the list of conditions for that policy. Multiple\nnamed policies can be specified together. A named policy that does not exist already is created and if the\nnamed policy accepts already then it is replaced.",
    "hierarchy": [
      "Create and Modify Collection-Specific Policy"
    ],
    "pageId": 986
  },
  {
    "content": "Refer to the <span class=\"link\">Policy Specification</span> section for details of the allowed values for each condition in the policy.",
    "hierarchy": [
      "Create and Modify Collection-Specific Policy"
    ],
    "pageId": 986
  },
  {
    "content": "{",
    "hierarchy": [
      "Create and Modify Collection-Specific Policy"
    ],
    "pageId": 986
  },
  {
    "content": "Ê <span class=\"fc1\">\"policy1\"</span>: [\nÊ   {<span class=\"fc1\">\"replica\"</span>: <span class=\"fc2\">\"1\"</span>, <span class=\"fc1\">\"shard\"</span>: <span class=\"fc2\">\"#EACH\"</span>, <span class=\"fc1\">\"port\"</span>: <span class=\"fc2\">\"8983\"</span>}\nÊ   ]\nÊ }\n}",
    "hierarchy": [
      "Create and Modify Collection-Specific Policy"
    ],
    "pageId": 986
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">246</span>\nÊ   },\nÊ   <span class=\"fc1\">\"result\"</span>: <span class=\"fc3\">\"success\"</span>,\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 987
  },
  {
    "content": "Changing the policy after the collection is already built doesn't automatically reconfigure the collection.\nHowever, all future cluster management operations will use the changed policy.",
    "hierarchy": [
    ],
    "pageId": 987
  },
  {
    "content": "The <span class=\"ff1 fs1\">remove-policy</span> command accepts a policy name to be removed from Solr. The policy being removed\nmust not be attached to any collection otherwise the command will fail.",
    "hierarchy": [
      "Remove a Collection-Specific Policy"
    ],
    "pageId": 987
  },
  {
    "content": "{<span class=\"fc1\">\"remove-policy\"</span>: <span class=\"fc3\">\"policy1\"</span>}",
    "hierarchy": [
      "Remove a Collection-Specific Policy"
    ],
    "pageId": 987
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"responseHeader\"</span>: {\nÊ       <span class=\"fc1\">\"status\"</span>: <span class=\"fc2\">0</span>,\nÊ       <span class=\"fc1\">\"QTime\"</span>: <span class=\"fc2\">42</span>\nÊ   },\nÊ   <span class=\"fc1\">\"result\"</span>: <span class=\"fc3\">\"success\"</span>,\nÊ   <span class=\"fc1\">\"WARNING\"</span>: <span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>\n}",
    "hierarchy": [
      "Remove a Collection-Specific Policy"
    ],
    "pageId": 987
  },
  {
    "content": "If you attempt to remove a policy that is being used by a collection, this command will fail to delete the\npolicy until the collection itself is deleted.",
    "hierarchy": [
      "Remove a Collection-Specific Policy"
    ],
    "pageId": 987
  },
  {
    "content": "The <span class=\"ff1 fs1\">set-trigger</span> command can be used to create a new trigger or overwrite an existing one.",
    "hierarchy": [
      "Create/Update Trigger"
    ],
    "pageId": 987
  },
  {
    "content": "You can see the section <span class=\"link\">Trigger Configuration</span> for a full list of configuration options.",
    "hierarchy": [
      "Create/Update Trigger"
    ],
    "pageId": 987
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-trigger\"</span>: {\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"node_added_trigger\"</span>,\nÊ <span class=\"fc2\">\"event\"</span> : <span class=\"fc3\">\"nodeAdded\"</span>,\nÊ <span class=\"fc2\">\"waitFor\"</span> : <span class=\"fc3\">\"1s\"</span>\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 988
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-trigger\"</span>: {\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"node_added_trigger\"</span>,\nÊ <span class=\"fc2\">\"event\"</span> : <span class=\"fc3\">\"nodeAdded\"</span>,\nÊ <span class=\"fc2\">\"waitFor\"</span> : <span class=\"fc3\">\"5s\"</span>,\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 988
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-trigger\"</span>: {\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"node_lost_trigger1\"</span>,\nÊ <span class=\"fc2\">\"event\"</span> : <span class=\"fc3\">\"nodeLost\"</span>,\nÊ <span class=\"fc2\">\"waitFor\"</span> : <span class=\"fc3\">\"60s\"</span>,\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 988
  },
  {
    "content": "The <span class=\"ff2 fs1\">remove-trigger</span> command can be used to remove a trigger. It accepts a single parameter: the name of\nthe trigger.",
    "hierarchy": [
      "Remove Trigger"
    ],
    "pageId": 988
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"remove-trigger\"</span>: {\nÊ <span class=\"fc2\">\"name\"</span> : <span class=\"fc3\">\"node_lost_trigger1\"</span>\nÊ}\n}",
    "hierarchy": [
      "Remove Trigger"
    ],
    "pageId": 988
  },
  {
    "content": "The <span class=\"ff2 fs1\">set-listener</span> command can be used to create or modify a listener for a trigger.",
    "hierarchy": [
      "Create/Update Trigger Listener"
    ],
    "pageId": 988
  },
  {
    "content": "You can see the section <span class=\"link\">Trigger Listener Configuration</span> for a full list of configuration options.",
    "hierarchy": [
      "Create/Update Trigger Listener"
    ],
    "pageId": 988
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"set-listener\"</span>: {\nÊ   <span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"foo\"</span>,\nÊ   <span class=\"fc2\">\"trigger\"</span>: <span class=\"fc3\">\"node_added_trigger\"</span>,\nÊ   <span class=\"fc2\">\"stage\"</span>: [<span class=\"fc3\">\"STARTED\"</span>, <span class=\"fc3\">\"ABORTED\"</span>, <span class=\"fc3\">\"SUCCEEDED\"</span>, <span class=\"fc3\">\"FAILED\"</span>],\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"com.example.Listener\"</span>\nÊ}\n}",
    "hierarchy": [
    ],
    "pageId": 989
  },
  {
    "content": "The <span class=\"ff2 fs1\">remove-listener</span> command can be used to remove an existing listener. It accepts a single parameter:\nthe name of the listener.",
    "hierarchy": [
      "Remove Trigger Listener"
    ],
    "pageId": 989
  },
  {
    "content": "{\nÊ<span class=\"fc2\">\"remove-listener\"</span>: {\nÊ   <span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"foo\"</span>\nÊ}\n}",
    "hierarchy": [
      "Remove Trigger Listener"
    ],
    "pageId": 989
  },
  {
    "content": "The <span class=\"ff2 fs1\">set-properties</span> command can be used to change the default properties used by the Autoscaling\nframework.",
    "hierarchy": [
      "Change Autoscaling Properties"
    ],
    "pageId": 989
  },
  {
    "content": "The following properties can be specified in the payload:",
    "hierarchy": [
      "Change Autoscaling Properties"
    ],
    "pageId": 989
  },
  {
    "content": "triggerScheduleDelaySeconds\nThis is the delay in seconds between two executions of a trigger. Every trigger is scheduled using Java's\nScheduledThreadPoolExecutor with this delay. The default is <span class=\"ff2 fs1\">1</span> second.",
    "hierarchy": [
      "Change Autoscaling Properties"
    ],
    "pageId": 989
  },
  {
    "content": "triggerCooldownPeriodSeconds\nSolr pauses all other triggers for this cool down period after a trigger fires so that the system can stabilize\nbefore running triggers again. The default is <span class=\"ff2 fs1\">5</span> seconds.",
    "hierarchy": [
      "Change Autoscaling Properties"
    ],
    "pageId": 989
  },
  {
    "content": "triggerCorePoolSize\nThe core pool size of the <span class=\"ff2 fs1\">ScheduledThreadPoolExecutor</span> used to schedule triggers. The default is <span class=\"ff2 fs1\">4</span>\nthreads.",
    "hierarchy": [
      "Change Autoscaling Properties"
    ],
    "pageId": 989
  },
  {
    "content": "The command allows setting arbitrary properties in addition to the above properties. Such arbitrary\nproperties can be useful in custom <span class=\"ff2 fs1\">TriggerAction</span> instances.",
    "hierarchy": [
      "Change Autoscaling Properties"
    ],
    "pageId": 989
  },
  {
    "content": "{\nÊ \"set-properties\": {\nÊ   \"triggerScheduleDelaySeconds\": 8\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 990
  },
  {
    "content": "The <span class=\"ff2 fs1\">set-properties</span> command replaces older values if present. So using <span class=\"ff2 fs1\">set-properties</span> to set the same\nvalue twice will overwrite the old value. If a property is not specified then it retains the last set value or the\ndefault, if no change was made. A changed value can be unset by using a null value.",
    "hierarchy": [
    ],
    "pageId": 990
  },
  {
    "content": "{\nÊ \"set-properties\": {\nÊ   \"triggerScheduleDelaySeconds\": null\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 990
  },
  {
    "content": "The changed values of these properties, if any, can be read using the Autoscaling <span class=\"link\">Read API</span> in the\nproperties<span class=\"code\"> section.</span>",
    "hierarchy": [
    ],
    "pageId": 990
  },
  {
    "content": "This section describes how to set up distribution and replication in Solr. It is considered \"legacy\" behavior,\nsince while it is still supported in Solr, the SolrCloud functionality described in the previous chapter is where\nthe current development is headed. However, if you don't need all that SolrCloud delivers, search\ndistribution and index replication may be sufficient.",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "This section covers the following topics:",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "Introduction to Scaling and Distribution<span class=\"fc1\">: Conceptual information about distribution and replication in Solr.</span>",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "Distributed Search with Index Sharding<span class=\"fc1\">: Detailed information about implementing distributed searching in</span>\nSolr.",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "Index Replication<span class=\"fc1\">: Detailed information about replicating your Solr indexes.</span>",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "Combining Distribution and Replication<span class=\"fc1\">: Detailed information about replicating shards in a distributed index.</span>",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "Merging Indexes<span class=\"fc1\">: Information about combining separate indexes in Solr.</span>",
    "hierarchy": [
      "Legacy Scaling and Distribution"
    ],
    "pageId": 991
  },
  {
    "content": "Both Lucene and Solr were designed to scale to support large implementations with minimal custom coding.",
    "hierarchy": [
      "Introduction to Scaling and Distribution"
    ],
    "pageId": 992
  },
  {
    "content": "This section covers:",
    "hierarchy": [
      "Introduction to Scaling and Distribution"
    ],
    "pageId": 992
  },
  {
    "content": "<span class=\"link\">distributing<span class=\"fc1\"> an index across multiple servers</span></span>",
    "hierarchy": [
      "Introduction to Scaling and Distribution"
    ],
    "pageId": 992
  },
  {
    "content": "<span class=\"link\">replicating<span class=\"fc1\"> an index on multiple servers</span></span>",
    "hierarchy": [
      "Introduction to Scaling and Distribution"
    ],
    "pageId": 992
  },
  {
    "content": "<span class=\"link\">merging indexes</span>",
    "hierarchy": [
      "Introduction to Scaling and Distribution"
    ],
    "pageId": 992
  },
  {
    "content": "If you need full scale distribution of indexes and queries, as well as replication, load balancing and failover,\nyou may want to use SolrCloud. Full details on configuring and using SolrCloud is available in the section\nSolrCloud<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Introduction to Scaling and Distribution"
    ],
    "pageId": 992
  },
  {
    "content": "If searches are taking too long or the index is approaching the physical limitations of its machine, you\nshould consider distributing the index across two or more Solr servers.",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Distribution Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "To distribute an index, you divide the index into partitions called shards, each of which runs on a separate\nmachine. Solr then partitions searches into sub-searches, which run on the individual shards, reporting\nresults collectively.",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Distribution Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "The architectural details underlying index sharding are invisible to end users, who simply experience faster\nperformance on queries against very large indexes.",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Distribution Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "Replicating an index is useful when:",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Replication Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "You have a large search volume which one machine cannot handle, so you need to distribute searches\nacross multiple read-only copies of the index.",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Replication Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "There is a high volume/high rate of indexing which consumes machine resources and reduces search\nperformance on the indexing machine, so you need to separate indexing and searching.",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Replication Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "You want to make a backup of the index (see <span class=\"link\">Making and Restoring Backups</span>).",
    "hierarchy": [
      "Introduction to Scaling and Distribution",
      "What Problem Does Replication Solve?"
    ],
    "pageId": 992
  },
  {
    "content": "When using traditional index sharding, you will need to consider how to query your documents.",
    "hierarchy": [
      "Distributed Search with Index Sharding"
    ],
    "pageId": 993
  },
  {
    "content": "It is highly recommended that you use <span class=\"link\">SolrCloud</span> when needing to scale up or scale out. The setup described\nbelow is legacy and was used prior to the existence of SolrCloud. SolrCloud provides for a truly distributed\nset of features with support for things like automatic routing, leader election, optimistic concurrency and\nother sanity checks that are expected out of a distributed system.",
    "hierarchy": [
      "Distributed Search with Index Sharding"
    ],
    "pageId": 993
  },
  {
    "content": "Everything on this page is specific to legacy setup of distributed search. Users trying out SolrCloud should\nnot follow any of the steps or information below.",
    "hierarchy": [
      "Distributed Search with Index Sharding"
    ],
    "pageId": 993
  },
  {
    "content": "Update reorders (i.e., replica A may see update X then Y, and replica B may see update Y then X).\ndeleteByQuery<span class=\"ff2\"> also handles reorders the same way, to ensure replicas are consistent. All replicas of a shard</span>\nare consistent, even if the updates arrive in a different order on different replicas.",
    "hierarchy": [
      "Distributed Search with Index Sharding"
    ],
    "pageId": 993
  },
  {
    "content": "When not using SolrCloud, it is up to you to get all your documents indexed on each shard of your server\nfarm. Solr supports distributed indexing (routing) in its true form only in the SolrCloud mode.",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Distributing Documents across Shards"
    ],
    "pageId": 993
  },
  {
    "content": "In the legacy distributed mode, Solr does not calculate universal term/doc frequencies. For most large-scale\nimplementations, it is not likely to matter that Solr calculates TF/IDF at the shard level. However, if your\ncollection is heavily skewed in its distribution across servers, you may find misleading relevancy results in\nyour searches. In general, it is probably best to randomly distribute documents to your shards.",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Distributing Documents across Shards"
    ],
    "pageId": 993
  },
  {
    "content": "If a query request includes the <span class=\"code\">shards</span> parameter, the Solr server distributes the request across all the\nshards listed as arguments to the parameter. The <span class=\"code\">shards</span> parameter uses this syntax:",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "host:port/base_url,host:port/base_url*",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "For example, the <span class=\"code\">shards</span> parameter below causes the search to be distributed across two Solr servers: <span class=\"ff1\">solr1</span>\nand <span class=\"ff1\">solr2</span>, both of which are running on port 8983:",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "http://localhost:8983/solr/core1/select?shards=solr1:8983/solr/core1,solr2:8983/solr/core1&i\nndent=true&q=ipod+solr",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "Rather than require users to include the shards parameter explicitly, it is usually preferred to configure this\nparameter as a default in the RequestHandler section of <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "Do not add the <span class=\"code\">shards</span> parameter to the standard request handler; doing so may cause\nsearch queries may enter an infinite loop. Instead, define a new request handler that uses\nthe <span class=\"code\">shards</span> parameter, and pass distributed search requests to that handler.",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "With Legacy mode, only query requests are distributed. This includes requests to the SearchHandler (or any\nhandler extending from <span class=\"code\">org.apache.solr.handler.component.SearchHandler</span>) using standard\ncomponents that support distributed search.",
    "hierarchy": [
      "Distributed Search with Index Sharding",
      "Executing Distributed Searches with the shards Parameter"
    ],
    "pageId": 993
  },
  {
    "content": "As in SolrCloud mode, when <span class=\"ff2 fs1\">shards.info=true</span>, distributed responses will include information about the\nshard (where each shard represents a logically different index or physical location)",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "The following components support distributed search:",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "The <span class=\"code\">Query</span> component, which returns documents matching a query",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "The <span class=\"code\">Facet</span> component, which processes facet.query and facet.field requests where facets are sorted by\ncount (the default).",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "The <span class=\"code\">Highlighting</span> component, which enables Solr to include \"highlighted\" matches in field values.",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "The <span class=\"code\">Stats</span> component, which returns simple statistics for numeric fields within the DocSet.",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "The <span class=\"code\">Debug</span> component, which helps with debugging.",
    "hierarchy": [
    ],
    "pageId": 994
  },
  {
    "content": "Distributed searching in Solr has the following limitations:",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "Each document indexed must have a unique key.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "If Solr discovers duplicate document IDs, Solr selects the first document and discards subsequent ones.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "The index for distributed searching may become momentarily out of sync if a commit happens between\nthe first and second phase of the distributed search. This might cause a situation where a document that\nonce matched a query and was subsequently changed may no longer match the query but will still be\nretrieved. This situation is expected to be quite rare, however, and is only possible for a single query\nrequest.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "The number of shards is limited by number of characters allowed for GET method's URI; most Web\nservers generally support at least 4000 characters, but many servers limit URI length to reduce their\nvulnerability to Denial of Service (DoS) attacks.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "Shard information can be returned with each document in a distributed search by including <span class=\"ff2 fs1\">fl=id,</span>\n[shard]<span class=\"ff1 fs0\"> in the search request. This returns the shard URL.</span>",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "In a distributed search, the data directory from the core descriptor overrides any data directory in\nsolrconfig.xml.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "Update commands may be sent to any server with distributed indexing configured correctly. Document\nadds and deletes are forwarded to the appropriate server/shard based on a hash of the unique\ndocument id. <span class=\"code\">commit</span> commands and <span class=\"code\">deleteByQuery</span> commands are sent to every server in <span class=\"ff2 fs1\">shards</span>.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "Formerly a limitation was that TF/IDF relevancy computations only used shard-local statistics. This is still the\ncase by default. If your data isn't randomly distributed, or if you want more exact statistics, then remember\nto configure the ExactStatsCache.",
    "hierarchy": [
      "Limitations to Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "Like in SolrCloud mode, inter-shard requests could lead to a distributed deadlock. It can be avoided by\nfollowing the instructions in the section <span class=\"link\">Distributed Requests</span>.",
    "hierarchy": [
      "Avoiding Distributed Deadlock with Distributed Search"
    ],
    "pageId": 994
  },
  {
    "content": "For simple functional testing, it's easiest to just set up two local Solr servers on different ports. (In a\nproduction environment, of course, these servers would be deployed on separate machines.)",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "1.Make two Solr home directories and copy <span class=\"ff2 fs1\">solr.xml</span> into the new directories:",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "mkdir example/nodes\nmkdir example/nodes/node1\n# Copy solr.xml into this solr.home\ncp server/solr/solr.xml example/nodes/node1/.\n# Repeat the above steps for the second node\nmkdir example/nodes/node2\ncp server/solr/solr.xml example/nodes/node2/.",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "2.Start the two Solr instances",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "# Start first node on port 8983\nbin/solr start -s example/nodes/node1 -p 8983",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "# Start second node on port 8984\nbin/solr start -s example/nodes/node2 -p 8984",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "3.Create a core on both the nodes with the sample_techproducts_configs.",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "bin/solr create_core -c core1 -p 8983 -d sample_techproducts_configs\n# Create a core on the Solr node running on port 8984\nbin/solr create_core -c core1 -p 8984 -d sample_techproducts_configs",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "4.In a third window, index an example document to each of the server:",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "bin/post -c core1 example/exampledocs/monitor.xml -port 8983",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "bin/post -c core1 example/exampledocs/monitor2.xml -port 8984",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "5.Search on the node on port 8983:",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "curl http://localhost:8983/solr/core1/select?q=*:*&wt=xml&indent=true",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "This should bring back one document.",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "Search on the node on port 8984:",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "curl http://localhost:8984/solr/core1/select?q=*:*&wt=xml&indent=true",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "This should also bring back a single document.",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "Now do a distributed search across both servers with your browser or <span class=\"ff2 fs1\">curl.</span> In the example below, an",
    "hierarchy": [
    ],
    "pageId": 995
  },
  {
    "content": "extra parameter 'fl' is passed to restrict the returned fields to id and name.",
    "hierarchy": [
    ],
    "pageId": 996
  },
  {
    "content": "curl\nhttp://localhost:8983/solr/core1/select?q=*:*&indent=true&shards=localhost:8983/solr/core1,loc\nalhost:8984/solr/core1&fl=id,name&wt=xml",
    "hierarchy": [
    ],
    "pageId": 996
  },
  {
    "content": "This should contain both the documents as shown below:",
    "hierarchy": [
    ],
    "pageId": 996
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"responseHeader\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"status\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"QTime\"<span class=\"fc1\">></span></span>8<span class=\"fc1\"></int></span>\nÊ   <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"params\"<span class=\"fc1\">></span></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"q\"<span class=\"fc1\">></span></span>*:*<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"shards\"<span class=\"fc1\">></span></span>localhost:8983/solr/core1,localhost:8984/solr/core1<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"indent\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fl\"<span class=\"fc1\">></span></span>id,name<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"wt\"<span class=\"fc1\">></span></span>xml<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><result</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"response\"</span> <span class=\"fc2\">numFound</span>=<span class=\"fc3\">\"2\"</span> <span class=\"fc2\">start</span>=<span class=\"fc3\">\"0\"</span> <span class=\"fc2\">maxScore</span>=<span class=\"fc3\">\"1.0\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc1\">></span></span>3007WFP<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc1\">></span></span>Dell Widescreen UltraSharp 3007WFP<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ   <span class=\"fc1\"><doc></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"id\"<span class=\"fc1\">></span></span>VA902B<span class=\"fc1\"></str></span>\nÊ     <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"name\"<span class=\"fc1\">></span></span>ViewSonic VA902B - flat panel display - TFT - 19\"<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"></doc></span>\nÊ <span class=\"fc1\"></result></span>",
    "hierarchy": [
    ],
    "pageId": 996
  },
  {
    "content": "Index Replication distributes complete copies of a master index to one or more slave servers. The master\nserver continues to manage updates to the index. All querying is handled by the slaves. This division of labor\nenables Solr to scale to provide adequate responsiveness to queries against large search volumes.",
    "hierarchy": [
      "Index Replication"
    ],
    "pageId": 997
  },
  {
    "content": "The figure below shows a Solr configuration using index replication. The master server's index is replicated\non the slaves.",
    "hierarchy": [
      "Index Replication"
    ],
    "pageId": 997
  },
  {
    "content": "Solr includes a Java implementation of index replication that works over HTTP:",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "The configuration affecting replication is controlled by a single file, <span class=\"ff4 fs3\">solrconfig.xml</span>",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "Supports the replication of configuration files as well as index files",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "Works across platforms with same configuration",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "No reliance on OS-dependent file system features (e.g., hard links)",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "Tightly integrated with Solr; an admin page offers fine-grained control of each aspect of replication",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "The Java-based replication feature is implemented as a request handler. Configuring replication is\ntherefore similar to any normal request handler.",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "Although there is no explicit concept of \"master/slave\" nodes in a <span class=\"link\">SolrCloud</span> cluster, the\nReplicationHandler<span class=\"ff2 fs1\"> discussed on this page is still used by SolrCloud as needed to support</span>\n\"shard recovery\" – but this is done in a peer to peer manner.",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "When using SolrCloud, the <span class=\"ff4 fs3\">ReplicationHandler</span> must be available via the <span class=\"ff4 fs3\">/replication</span>\npath. Solr does this implicitly unless overridden explicitly in your <span class=\"ff4 fs3\">solrconfig.xml</span>, but if you\nwish to override the default behavior, make certain that you do not explicitly set any of the\n\"master\" or \"slave\" configuration options mentioned below, or they will interfere with\nnormal SolrCloud operation.",
    "hierarchy": [
      "Index Replication",
      "Index Replication in Solr"
    ],
    "pageId": 997
  },
  {
    "content": "The table below defines the key terms associated with Solr replication.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Index\nA Lucene index is a directory of files. These files make up the searchable and returnable data of a Solr\nCore.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Distribution\nThe copying of an index from the master server to all slaves. The distribution process takes advantage of\nLucene's index file structure.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Inserts and Deletes\nAs inserts and deletes occur in the index, the directory remains unchanged. Documents are always\ninserted into newly created segment files. Documents that are deleted are not removed from the\nsegment files. They are flagged in the file, deletable, and are not removed from the segments until the\nsegment is merged as part of normal index updates.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Master and Slave\nA Solr replication master is a single node which receives all updates initially and keeps everything\norganized. Solr replication slave nodes receive no updates directly, instead all changes (such as inserts,\nupdates, deletes, etc.) are made against the single master node. Changes made on the master are\ndistributed to all the slave nodes which service all query requests from the clients.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Update\nAn update is a single change request against a single Solr instance. It may be a request to delete a\ndocument, add a new document, change a document, delete all documents matching a query, etc.\nUpdates are handled synchronously within an individual Solr instance.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Optimization\nA process that compacts the index and merges segments in order to improve query performance.\nOptimization should only be run on the master nodes. An optimized index may give query performance\ngains compared to an index that has become fragmented over a period of time with many updates.\nDistributing an optimized index requires a much longer time than the distribution of new segments to an\nun-optimized index.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "optimizing is not recommended unless it can be performed regularly as it may lead to a\nsignificantly larger portion of the index consisting of deleted documents than would\nnormally be the case.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Segments\nA self contained subset of an index consisting of some documents and data structures related to the\ninverted index of terms in those documents.",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "mergeFactor\nA parameter that controls the number of segments in an index. For example, when mergeFactor is set to\n3, Solr will fill one segment with documents until the limit maxBufferedDocs is met, then it will start a new\nsegment. When the number of segments specified by mergeFactor is reached (in this example, 3) then",
    "hierarchy": [
      "Replication Terminology"
    ],
    "pageId": 998
  },
  {
    "content": "Solr will merge all the segments into a single index file, then begin writing new documents to a new\nsegment.",
    "hierarchy": [
    ],
    "pageId": 999
  },
  {
    "content": "Snapshot\nA directory containing hard links to the data files of an index. Snapshots are distributed from the master\nnodes when the slaves pull them, \"smart copying\" any segments the slave node does not have in\nsnapshot directory that contains the hard links to the most recent index data files.",
    "hierarchy": [
    ],
    "pageId": 999
  },
  {
    "content": "In addition to <span class=\"code\">ReplicationHandler</span> configuration options specific to the master/slave roles, there are a few\nspecial configuration options that are generally supported (even when using SolrCloud).",
    "hierarchy": [
      "Configuring the ReplicationHandler"
    ],
    "pageId": 999
  },
  {
    "content": "maxNumberOfBackups an integer value dictating the maximum number of backups this node will keep on\ndisk as it receives <span class=\"code\">backup</span> commands.",
    "hierarchy": [
      "Configuring the ReplicationHandler"
    ],
    "pageId": 999
  },
  {
    "content": "Similar to most other request handlers in Solr you may configure a set of <span class=\"link\">defaults, invariants, and/or</span>\nappends<span class=\"fc0\"> parameters corresponding with any request parameters supported by the <span class=\"code\">ReplicationHandler</span></span>\nwhen <span class=\"link\">processing commands</span>.",
    "hierarchy": [
      "Configuring the ReplicationHandler"
    ],
    "pageId": 999
  },
  {
    "content": "Before running a replication, you should set the following parameters on initialization of the handler:",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "replicateAfter\nString specifying action after which replication should occur. Valid values are commit, optimize, or\nstartup. There can be multiple values for this parameter. If you use \"startup\", you need to have a\n\"commit\" and/or \"optimize\" entry also if you want to trigger replication on future commits or optimizes.",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "backupAfter<span class=\"ff1 fs0\"> String specifying action after which a backup should occur. Valid values are commit, optimize,</span>\nor startup. There can be multiple values for this parameter. It is not required for replication, it just makes a\nbackup.",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "maxNumberOfBackups<span class=\"ff1 fs0\"> Integer specifying how many backups to keep. This can be used to delete all but the</span>\nmost recent N backups.",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "confFiles\nThe configuration files to replicate, separated by a comma.",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "commitReserveDuration\nIf your commits are very frequent and your network is slow, you can tweak this parameter to increase the\namount of time expected to be required to transfer data. The default is <span class=\"code\">00:00:10</span> i.e., 10 seconds.",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "The example below shows a possible 'master' configuration for the <span class=\"code\">ReplicationHandler</span>, including a fixed\nnumber of backups and an invariant setting for the <span class=\"code\">maxWriteMBPerSec</span> request parameter to prevent slaves\nfrom saturating its network interface",
    "hierarchy": [
      "Configuring the ReplicationHandler",
      "Configuring the Replication RequestHandler on a Master Server"
    ],
    "pageId": 999
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"master\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replicateAfter\"<span class=\"fc0\">></span></span>optimize<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"backupAfter\"<span class=\"fc0\">></span></span>optimize<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"confFiles\"<span class=\"fc0\">></span></span>schema.xml,stopwords.txt,elevate.xml<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxNumberOfBackups\"<span class=\"fc0\">></span></span>2<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"commitReserveDuration\"<span class=\"fc0\">></span></span>00:00:10<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"invariants\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxWriteMBPerSec\"<span class=\"fc0\">></span></span>16<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1000
  },
  {
    "content": "In the configuration file on the master server, include a line like the following:",
    "hierarchy": [
      "Replicating solrconfig.xml"
    ],
    "pageId": 1000
  },
  {
    "content": "This ensures that the local configuration <span class=\"ff1 fs1\">solrconfig_slave.xml</span> will be saved as <span class=\"ff1 fs1\">solrconfig.xml</span> on the\nslave. All other files will be saved with their original names.",
    "hierarchy": [
      "Replicating solrconfig.xml"
    ],
    "pageId": 1000
  },
  {
    "content": "On the master server, the file name of the slave configuration file can be anything, as long as the name is\ncorrectly identified in the <span class=\"ff1 fs1\">confFiles</span> string; then it will be saved as whatever file name appears after the\ncolon ':'.",
    "hierarchy": [
      "Replicating solrconfig.xml"
    ],
    "pageId": 1000
  },
  {
    "content": "The code below shows how to configure a ReplicationHandler on a slave.",
    "hierarchy": [
      "Configuring the Replication RequestHandler on a Slave Server"
    ],
    "pageId": 1000
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"slave\"<span class=\"fc0\">></span></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- fully qualified url for the replication handler of master. It is</span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"masterUrl\"<span class=\"fc0\">></span></span>http://remote_host:port/solr/core_name/replication<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- Interval in which the slave should poll master.  Format is HH:mm:ss .</span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pollInterval\"<span class=\"fc0\">></span></span>00:00:20<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- THE FOLLOWING PARAMETERS ARE USUALLY NOT REQUIRED--></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- To use compression while transferring the index files. The possible</span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"compression\"<span class=\"fc0\">></span></span>internal<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- The following values are used when the slave connects to the master to</span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"httpConnTimeout\"<span class=\"fc0\">></span></span>5000<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"httpReadTimeout\"<span class=\"fc0\">></span></span>10000<span class=\"fc0\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc4\"><!-- If HTTP Basic authentication is enabled on the master, then the slave</span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"httpBasicAuthUser\"<span class=\"fc0\">></span></span>username<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"httpBasicAuthPassword\"<span class=\"fc0\">></span></span>password<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1001
  },
  {
    "content": "A master may be able to serve only so many slaves without affecting performance. Some organizations have\ndeployed slave servers across multiple data centers. If each slave downloads the index from a remote data\ncenter, the resulting download may consume too much network bandwidth. To avoid performance\ndegradation in cases like this, you can configure one or more slaves as repeaters. A repeater is simply a\nnode that acts as both a master and a slave.",
    "hierarchy": [
      "Setting Up a Repeater with the ReplicationHandler"
    ],
    "pageId": 1001
  },
  {
    "content": "To configure a server as a repeater, the definition of the Replication <span class=\"ff1 fs2\">requestHandler</span> in the",
    "hierarchy": [
      "Setting Up a Repeater with the ReplicationHandler"
    ],
    "pageId": 1001
  },
  {
    "content": "solrconfig.xml<span class=\"ff2 fs1\"> file must include file lists of use for both masters and slaves.</span>",
    "hierarchy": [
    ],
    "pageId": 1002
  },
  {
    "content": "Be sure to set the <span class=\"ff1 fs0\">replicateAfter</span> parameter to commit, even if <span class=\"ff1 fs0\">replicateAfter</span> is set to optimize on\nthe main master. This is because on a repeater (or any slave), a commit is called only after the index is\ndownloaded. The optimize command is never called on slaves.",
    "hierarchy": [
    ],
    "pageId": 1002
  },
  {
    "content": "Optionally, one can configure the repeater to fetch compressed files from the master through the\ncompression parameter to reduce the index download time.",
    "hierarchy": [
    ],
    "pageId": 1002
  },
  {
    "content": "Here is an example of a ReplicationHandler configuration for a repeater:",
    "hierarchy": [
    ],
    "pageId": 1002
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"master\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"replicateAfter\"<span class=\"fc1\">></span></span>commit<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"confFiles\"<span class=\"fc1\">></span></span>schema.xml,stopwords.txt,synonyms.txt<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"slave\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"masterUrl\"<span class=\"fc1\">></span></span>http://master.solr.company.com:8983/solr/core_name/replication<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"pollInterval\"<span class=\"fc1\">></span></span>00:00:60<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1002
  },
  {
    "content": "When a commit or optimize operation is performed on the master, the RequestHandler reads the list of file\nnames which are associated with each commit point. This relies on the <span class=\"ff1 fs0\">replicateAfter</span> parameter in the\nconfiguration to decide which types of events should trigger replication.",
    "hierarchy": [
      "Commit and Optimize Operations"
    ],
    "pageId": 1002
  },
  {
    "content": "These operations are supported:",
    "hierarchy": [
      "Commit and Optimize Operations"
    ],
    "pageId": 1002
  },
  {
    "content": "commit: Triggers replication whenever a commit is performed on the master index.",
    "hierarchy": [
      "Commit and Optimize Operations"
    ],
    "pageId": 1002
  },
  {
    "content": "optimize: Triggers replication whenever the master index is optimized.",
    "hierarchy": [
      "Commit and Optimize Operations"
    ],
    "pageId": 1002
  },
  {
    "content": "startup: Triggers replication whenever the master index starts up.",
    "hierarchy": [
      "Commit and Optimize Operations"
    ],
    "pageId": 1002
  },
  {
    "content": "The <span class=\"ff1 fs0\">replicateAfter</span> parameter can accept multiple arguments. For example:",
    "hierarchy": [
      "Commit and Optimize Operations"
    ],
    "pageId": 1002
  },
  {
    "content": "The master is totally unaware of the slaves.",
    "hierarchy": [
      "Slave Replication"
    ],
    "pageId": 1002
  },
  {
    "content": "The slave continuously keeps polling the master (depending on the <span class=\"ff1 fs0\">pollInterval</span> parameter) to check the\ncurrent index version of the master. If the slave finds out that the master has a newer version of the index it\ninitiates a replication process. The steps are as follows:",
    "hierarchy": [
      "Slave Replication"
    ],
    "pageId": 1002
  },
  {
    "content": "The slave issues a <span class=\"ff1 fs0\">filelist</span> command to get the list of the files. This command returns the names of the",
    "hierarchy": [
      "Slave Replication"
    ],
    "pageId": 1002
  },
  {
    "content": "files as well as some metadata (for example, size, a lastmodified timestamp, an alias if any).",
    "hierarchy": [
    ],
    "pageId": 1003
  },
  {
    "content": "The slave checks with its own index if it has any of those files in the local index. It then runs the\nfilecontent command to download the missing files. This uses a custom format (akin to the HTTP\nchunked encoding) to download the full content or a part of each file. If the connection breaks in\nbetween, the download resumes from the point it failed. At any point, the slave tries 5 times before\ngiving up a replication altogether.",
    "hierarchy": [
    ],
    "pageId": 1003
  },
  {
    "content": "The files are downloaded into a temp directory, so that if either the slave or the master crashes during\nthe download process, no files will be corrupted. Instead, the current replication will simply abort.",
    "hierarchy": [
    ],
    "pageId": 1003
  },
  {
    "content": "After the download completes, all the new files are moved to the live index directory and the file's\ntimestamp is same as its counterpart on the master.",
    "hierarchy": [
    ],
    "pageId": 1003
  },
  {
    "content": "A commit command is issued on the slave by the Slave's ReplicationHandler and the new index is loaded.",
    "hierarchy": [
    ],
    "pageId": 1003
  },
  {
    "content": "To replicate configuration files, list them using using the <span class=\"code\">confFiles</span> parameter. Only files found in the <span class=\"code\">conf</span>\ndirectory of the master's Solr instance will be replicated.",
    "hierarchy": [
      "Replicating Configuration Files"
    ],
    "pageId": 1003
  },
  {
    "content": "Solr replicates configuration files only when the index itself is replicated. That means even if a configuration\nfile is changed on the master, that file will be replicated only after there is a new commit/optimize on\nmaster's index.",
    "hierarchy": [
      "Replicating Configuration Files"
    ],
    "pageId": 1003
  },
  {
    "content": "Unlike the index files, where the timestamp is good enough to figure out if they are identical, configuration\nfiles are compared against their checksum. The <span class=\"code\">schema.xml</span> files (on master and slave) are judged to be\nidentical if their checksums are identical.",
    "hierarchy": [
      "Replicating Configuration Files"
    ],
    "pageId": 1003
  },
  {
    "content": "As a precaution when replicating configuration files, Solr copies configuration files to a temporary directory\nbefore moving them into their ultimate location in the conf directory. The old configuration files are then\nrenamed and kept in the same <span class=\"code\">conf/</span> directory. The ReplicationHandler does not automatically clean up\nthese old files.",
    "hierarchy": [
      "Replicating Configuration Files"
    ],
    "pageId": 1003
  },
  {
    "content": "If a replication involved downloading of at least one configuration file, the ReplicationHandler issues a core-\nreload command instead of a commit command.",
    "hierarchy": [
      "Replicating Configuration Files"
    ],
    "pageId": 1003
  },
  {
    "content": "If documents are added to the slave, then the slave is no longer in sync with its master. However, the slave\nwill not undertake any action to put itself in sync, until the master has new index data.",
    "hierarchy": [
      "Resolving Corruption Issues on Slave Servers"
    ],
    "pageId": 1003
  },
  {
    "content": "When a commit operation takes place on the master, the index version of the master becomes different\nfrom that of the slave. The slave then fetches the list of files and finds that some of the files present on the\nmaster are also present in the local index but with different sizes and timestamps. This means that the\nmaster and slave have incompatible indexes.",
    "hierarchy": [
      "Resolving Corruption Issues on Slave Servers"
    ],
    "pageId": 1003
  },
  {
    "content": "To correct this problem, the slave then copies all the index files from master to a new index directory and\nasks the core to load the fresh index from the new directory.",
    "hierarchy": [
      "Resolving Corruption Issues on Slave Servers"
    ],
    "pageId": 1003
  },
  {
    "content": "You can use the HTTP commands below to control the ReplicationHandler's operations.",
    "hierarchy": [
      "HTTP API Commands for the ReplicationHandler"
    ],
    "pageId": 1003
  },
  {
    "content": "enablereplication\nEnable replication on the \"master\" for all its slaves.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_master_host:port_/solr/_core_name_/replication?command=enablereplication",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "disablereplication\nDisable replication on the master for all its slaves.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_master_host:port_/solr/_core_name_/replication?command=disablereplication",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "indexversion\nReturn the version of the latest replicatable index on the specified master or slave.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_host:port_/solr/_core_name_/replication?command=indexversion",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "fetchindex\nForce the specified slave to fetch a copy of the index from its master.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_slave_host:port_/solr/_core_name_/replication?command=fetchindex",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "If you like, you can pass an extra attribute such as <span class=\"ff1 fs0\">masterUrl</span> or <span class=\"ff1 fs0\">compression</span> (or any other parameter\nwhich is specified in the <span class=\"ff1 fs0\"><lst name=\"slave\"></span> tag) to do a one time replication from a master. This\nobviates the need for hard-coding the master in the slave.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "abortfetch\nAbort copying an index from a master to the specified slave.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_slave_host:port_/solr/_core_name_/replication?command=abortfetch",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "enablepoll\nEnable the specified slave to poll for changes on the master.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_slave_host:port_/solr/_core_name_/replication?command=enablepoll",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "disablepoll\nDisable the specified slave from polling for changes on the master.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_slave_host:port_/solr/_core_name_/replication?command=disablepoll",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "details\nRetrieve configuration details and current status.",
    "hierarchy": [
    ],
    "pageId": 1004
  },
  {
    "content": "http://_slave_host:port_/solr/_core_name_/replication?command=details",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "filelist\nRetrieve a list of Lucene files present in the specified host's index.",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "http://_host:port_/solr/_core_name_/replication?command=filelist&generation=<_generation-\nnumber_>",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "You can discover the generation number of the index by running the <span class=\"ff1 fs1\">indexversion</span> command.",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "backup\nCreate a backup on master if there are committed index data in the server; otherwise, does nothing.",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "http://_master_host:port_/solr/_core_name_/replication?command=backup",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "This command is useful for making periodic backups. There are several supported request parameters:",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "numberToKeep:: This can be used with the backup command unless the <span class=\"ff1 fs1\">maxNumberOfBackups</span>\ninitialization parameter has been specified on the handler – in which case <span class=\"ff1 fs1\">maxNumberOfBackups</span> is\nalways used and attempts to use the <span class=\"ff1 fs1\">numberToKeep</span> request parameter will cause an error.\n•name: (optional) Backup name. The snapshot will be created in a directory called <span class=\"ff1 fs1\">snapshot.<name></span>\nwithin the data directory of the core. By default the name is generated using date in\nyyyyMMddHHmmssSSS<span class=\"ff2 fs0\"> format. If </span>location<span class=\"ff2 fs0\"> parameter is passed, that would be used instead of the data</span>\ndirectory\n•location: Backup location.",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "deletebackup\nDelete any backup created using the <span class=\"ff1 fs1\">backup</span> command.",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "http://_master_host:port_ /solr/_core_name_/replication?command=deletebackup",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "There are two supported parameters:",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "name: The name of the snapshot. A snapshot with the name <span class=\"ff1 fs1\">snapshot.name</span> must exist. If not, an error\nis thrown.\n•location: Location where the snapshot is created.",
    "hierarchy": [
    ],
    "pageId": 1005
  },
  {
    "content": "Optimizing an index is not something most users should generally worry about - but in particular users\nshould be aware of the impacts of optimizing an index when using the <span class=\"ff1 fs1\">ReplicationHandler</span>.",
    "hierarchy": [
      "Distribution and Optimization"
    ],
    "pageId": 1005
  },
  {
    "content": "The time required to optimize a master index can vary dramatically. A small index may be optimized in\nminutes. A very large index may take hours. The variables include the size of the index and the speed of the\nhardware.",
    "hierarchy": [
      "Distribution and Optimization"
    ],
    "pageId": 1005
  },
  {
    "content": "Distributing a newly optimized index may take only a few minutes or up to an hour or more, again\ndepending on the size of the index and the performance capabilities of network connections and disks.\nDuring optimization the machine is under load and does not process queries very well. Given a schedule of\nupdates being driven a few times an hour to the slaves, we cannot run an optimize with every committed\nsnapshot.",
    "hierarchy": [
    ],
    "pageId": 1006
  },
  {
    "content": "Copying an optimized index means that the <span class=\"ff2\">entire</span> index will need to be transferred during the next\nsnappull<span class=\"ff1 fs0\">. This is a large expense, but not nearly as huge as running the optimize everywhere.</span>",
    "hierarchy": [
    ],
    "pageId": 1006
  },
  {
    "content": "Consider this example: on a three-slave one-master configuration, distributing a newly-optimized index\ntakes approximately 80 seconds <span class=\"ff4\">total</span>. Rolling the change across a tier would require approximately ten\nminutes per machine (or machine group). If this optimize were rolled across the query tier, and if each slave\nnode being optimized were disabled and not receiving queries, a rollout would take at least twenty minutes\nand potentially as long as an hour and a half. Additionally, the files would need to be synchronized so that\nthe <span class=\"ff4\">following</span> the optimize, <span class=\"code\">snappull</span> would not think that the independently optimized files were different in\nany way. This would also leave the door open to independent corruption of indexes instead of each being a\nperfect copy of the master.",
    "hierarchy": [
    ],
    "pageId": 1006
  },
  {
    "content": "Optimizing on the master allows for a straight-forward optimization operation. No query slaves need to be\ntaken out of service. The optimized index can be distributed in the background as queries are being\nnormally serviced. The optimization can occur at any time convenient to the application providing index\nupdates.",
    "hierarchy": [
    ],
    "pageId": 1006
  },
  {
    "content": "While optimizing may have some benefits in some situations, a rapidly changing index will not retain those\nbenefits for long, and since optimization is an intensive process, it may be better to consider other options,\nsuch as lowering the merge factor (discussed in the section on <span class=\"link\">Index Configuration</span>).",
    "hierarchy": [
    ],
    "pageId": 1006
  },
  {
    "content": "Do not elect to optimize your index unless you have tangible evidence that it will\nsignificantly improve your search performance. Recent changes in Solr/Lucene have\ndramatically lessened the need to optimize as discussed at the above link.",
    "hierarchy": [
    ],
    "pageId": 1006
  },
  {
    "content": "When your index is too large for a single machine and you have a query volume that single shards cannot\nkeep up with, it's time to replicate each shard in your distributed search setup.",
    "hierarchy": [
      "Combining Distribution and Replication"
    ],
    "pageId": 1007
  },
  {
    "content": "The idea is to combine distributed search with replication. As shown in the figure below, a combined\ndistributed-replication configuration features a master server for each shard and then 1-<span class=\"code\">n</span> slaves that are\nreplicated from the master. As in a standard replicated configuration, the master server handles updates\nand optimizations without adversely affecting query handling performance.",
    "hierarchy": [
      "Combining Distribution and Replication"
    ],
    "pageId": 1007
  },
  {
    "content": "Query requests should be load balanced across each of the shard slaves. This gives you both increased\nquery handling capacity and fail-over backup if a server goes down.",
    "hierarchy": [
      "Combining Distribution and Replication"
    ],
    "pageId": 1007
  },
  {
    "content": "None of the master shards in this configuration know about each other. You index to each master, the index\nis replicated to each slave, and then searches are distributed across the slaves, using one slave from each\nmaster/slave shard.",
    "hierarchy": [
      "Combining Distribution and Replication"
    ],
    "pageId": 1007
  },
  {
    "content": "For high availability you can use a load balancer to set up a virtual IP for each shard's set of slaves. If you are\nnew to load balancing, HAProxy (<span class=\"link\">http://haproxy.1wt.eu/</span>) is a good open source software load-balancer. If a\nslave server goes down, a good load-balancer will detect the failure using some technique (generally a\nheartbeat system), and forward all requests to the remaining live slaves that served with the failed slave. A\nsingle virtual IP should then be set up so that requests can hit a single IP, and get load balanced to each of\nthe virtual IPs for the search slaves.",
    "hierarchy": [
      "Combining Distribution and Replication"
    ],
    "pageId": 1007
  },
  {
    "content": "With this configuration you will have a fully load balanced, search-side fault-tolerant system (Solr does not\nyet support fault-tolerant indexing). Incoming searches will be handed off to one of the functioning slaves,\nthen the slave will distribute the search request across a slave for each of the shards in your configuration.\nThe slave will issue a request to each of the virtual IPs for each shard, and the load balancer will choose one\nof the available slaves. Finally, the results will be combined into a single results set and returned. If any of",
    "hierarchy": [
      "Combining Distribution and Replication"
    ],
    "pageId": 1007
  },
  {
    "content": "the slaves go down, they will be taken out of rotation and the remaining slaves will be used. If a shard\nmaster goes down, searches can still be served from the slaves until you have corrected the problem and\nput the master back into production.",
    "hierarchy": [
    ],
    "pageId": 1008
  },
  {
    "content": "If you need to combine indexes from two different projects or from multiple servers previously used in a\ndistributed configuration, you can use either the IndexMergeTool included in <span class=\"code\">lucene-misc</span> or the\nCoreAdminHandler<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Merging Indexes"
    ],
    "pageId": 1009
  },
  {
    "content": "To merge indexes, they must meet these requirements:",
    "hierarchy": [
      "Merging Indexes"
    ],
    "pageId": 1009
  },
  {
    "content": "The two indexes must be compatible: their schemas should include the same fields and they should\nanalyze fields the same way.",
    "hierarchy": [
      "Merging Indexes"
    ],
    "pageId": 1009
  },
  {
    "content": "The indexes must not include duplicate data.",
    "hierarchy": [
      "Merging Indexes"
    ],
    "pageId": 1009
  },
  {
    "content": "Optimally, the two indexes should be built using the same schema.",
    "hierarchy": [
      "Merging Indexes"
    ],
    "pageId": 1009
  },
  {
    "content": "To merge the indexes, do the following:",
    "hierarchy": [
      "Merging Indexes",
      "Using IndexMergeTool"
    ],
    "pageId": 1009
  },
  {
    "content": "1.Make sure that both indexes you want to merge are closed.\n2.Issue this command:",
    "hierarchy": [
      "Merging Indexes",
      "Using IndexMergeTool"
    ],
    "pageId": 1009
  },
  {
    "content": "java -cp $SOLR/server/solr-webapp/webapp/WEB-INF/lib/lucene-core-\nVERSION.jar:$SOLR/server/solr-webapp/webapp/WEB-INF/lib/lucene-misc-VERSION.jar\norg/apache/lucene/misc/IndexMergeTool /path/to/newindex /path/to/old/index1\n/path/to/old/index2",
    "hierarchy": [
      "Merging Indexes",
      "Using IndexMergeTool"
    ],
    "pageId": 1009
  },
  {
    "content": "This will create a new index at <span class=\"code\">/path/to/newindex</span> that contains both index1 and index2.",
    "hierarchy": [
      "Merging Indexes",
      "Using IndexMergeTool"
    ],
    "pageId": 1009
  },
  {
    "content": "3.Copy this new directory to the location of your application's Solr index (move the old one aside first, of\ncourse) and start Solr.",
    "hierarchy": [
      "Merging Indexes",
      "Using IndexMergeTool"
    ],
    "pageId": 1009
  },
  {
    "content": "The <span class=\"code\">MERGEINDEXES</span> command of the <span class=\"link\">CoreAdminHandler</span> can be used to merge indexes into a new core –\neither from one or more arbitrary <span class=\"code\">indexDir</span> directories or by merging from one or more existing <span class=\"code\">srcCore</span>\ncore names.",
    "hierarchy": [
      "Merging Indexes",
      "Using CoreAdmin"
    ],
    "pageId": 1009
  },
  {
    "content": "See the <span class=\"link\">CoreAdminHandler</span> section for details.",
    "hierarchy": [
      "Merging Indexes",
      "Using CoreAdmin"
    ],
    "pageId": 1009
  },
  {
    "content": "This section tells you how to fine-tune your Solr instance for optimum performance.",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "This section covers the following topics:",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "Configuring solrconfig.xml<span class=\"fc1\">: Describes how to work with the main configuration file for Solr, <span class=\"code\">solrconfig.xml</span>,</span>\ncovering the major sections of the file.",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "Solr Cores and solr.xml<span class=\"fc1\">: Describes how to work with <span class=\"code\">solr.xml</span> and <span class=\"code\">core.properties</span> to configure your Solr</span>\ncore, or multiple Solr cores within a single instance.",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "Configuration APIs<span class=\"fc1\">: Describes several APIs used to configure Solr: Blob Store, Config, Request Parameters</span>\nand Managed Resources.",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "Implicit RequestHandlers<span class=\"fc1\">: Describes various end-points automatically provided by Solr and how to configure</span>\nthem.",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "Solr Plugins<span class=\"fc1\">: Introduces Solr plugins with pointers to more information.</span>",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "JVM Settings<span class=\"fc1\">: Gives some guidance on best practices for working with Java Virtual Machines.</span>",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "V2 API<span class=\"fc1\">: Describes how to use the new V2 APIs, a redesigned API framework covering most Solr APIs.</span>",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "The focus of this section is generally on configuring a single Solr instance, but for those\ninterested in scaling a Solr implementation in a cluster environment, see also the section\nSolrCloud<span class=\"fc1\">. There are also options to scale through sharding or replication, described in the</span>\nsection <span class=\"link\">Legacy Scaling and Distribution</span>.",
    "hierarchy": [
      "The Well-Configured Solr Instance"
    ],
    "pageId": 1010
  },
  {
    "content": "The <span class=\"code\">solrconfig.xml</span> file is the configuration file with the most parameters affecting Solr itself.",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "While configuring Solr, you'll work with <span class=\"code\">solrconfig.xml</span> often, either directly or via the <span class=\"link\">Config API</span> to create\n\"configuration overlays\" (<span class=\"code\">configoverlay.json</span>) to override the values in <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "In <span class=\"code\">solrconfig.xml</span>, you configure important features such as:",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "request handlers, which process the requests to Solr, such as requests to add documents to the index or\nrequests to return results for a query",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "listeners, processes that \"listen\" for particular query-related events; listeners can be used to trigger the\nexecution of special code, such as invoking some common queries to warm-up caches",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "the Request Dispatcher for managing HTTP communications",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "the Admin Web interface",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "parameters related to replication and duplication (these parameters are covered in detail in <span class=\"link\">Legacy</span>\nScaling and Distribution<span class=\"fc1\">)</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "The <span class=\"code\">solrconfig.xml</span> file is located in the <span class=\"code\">conf/</span> directory for each collection. Several well-commented\nexample files can be found in the <span class=\"code\">server/solr/configsets/</span> directories demonstrating best practices for\nmany different types of installations.",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "We've covered the options in the following sections:",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">DataDir and DirectoryFactory in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">Lib Directives in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">Schema Factory Definition in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">IndexConfig in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">RequestHandlers and SearchComponents in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">InitParams in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">UpdateHandlers in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">Query Settings in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">RequestDispatcher in SolrConfig</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">Update Request Processors</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "<span class=\"link\">Codec Factory</span>",
    "hierarchy": [
      "Configuring solrconfig.xml"
    ],
    "pageId": 1011
  },
  {
    "content": "Solr supports variable substitution of property values in config files, which allows runtime specification of\nvarious configuration options in <span class=\"code\">solrconfig.xml</span>. The syntax is <span class=\"code\">${propertyname[:option default value]</span>}.\nThis allows defining a default that can be overridden when Solr is launched. If a default value is not\nspecified, then the property <span class=\"ff4\">must</span> be specified at runtime or the configuration file will generate an error\nwhen parsed.",
    "hierarchy": [
      "Configuring solrconfig.xml",
      "Substituting Properties in Solr Config Files"
    ],
    "pageId": 1011
  },
  {
    "content": "There are multiple methods for specifying properties that can be used in configuration files. Of those below,\nstrongly consider \"config overlay\" as the preferred approach, as it stays local to the config set and because\nit's easy to modify.",
    "hierarchy": [
    ],
    "pageId": 1012
  },
  {
    "content": "Any JVM System properties, usually specified using the <span class=\"code\">-D</span> flag when starting the JVM, can be used as\nvariables in any XML configuration file in Solr.",
    "hierarchy": [
      "JVM System Properties"
    ],
    "pageId": 1012
  },
  {
    "content": "For example, in the sample <span class=\"code\">solrconfig.xml</span> files, you will see this value which defines the locking type to\nuse:",
    "hierarchy": [
      "JVM System Properties"
    ],
    "pageId": 1012
  },
  {
    "content": "Which means the lock type defaults to \"native\" but when starting Solr, you could override this using a JVM\nsystem property by launching the Solr it with:",
    "hierarchy": [
      "JVM System Properties"
    ],
    "pageId": 1012
  },
  {
    "content": "bin/solr start -Dsolr.lock.type=none",
    "hierarchy": [
      "JVM System Properties"
    ],
    "pageId": 1012
  },
  {
    "content": "In general, any Java system property that you want to set can be passed through the <span class=\"code\">bin/solr</span> script using\nthe standard <span class=\"code\">-Dproperty=value</span> syntax. Alternatively, you can add common system properties to the\nSOLR_OPTS<span class=\"ff1 fs0\"> environment variable defined in the Solr include file (</span>bin/solr.in.sh<span class=\"ff1 fs0\"> or </span>bin/solr.in.cmd<span class=\"ff1 fs0\">). For</span>\nmore information about how the Solr include file works, refer to: <span class=\"link\">Taking Solr to Production</span>.",
    "hierarchy": [
      "JVM System Properties"
    ],
    "pageId": 1012
  },
  {
    "content": "The <span class=\"link\">Config API</span> allows you to use an API to modify Solr's configuration, specifically user defined properties.\nChanges made with this API are stored in a file named <span class=\"code\">configoverlay.json</span>. This file should only be edited\nwith the API, but will look like this example:",
    "hierarchy": [
      "Config API to Override solrconfig.xml"
    ],
    "pageId": 1012
  },
  {
    "content": "{<span class=\"fc4\">\"userProps\"</span>:{\nÊ   <span class=\"fc4\">\"dih.db.url\"</span>:<span class=\"fc5\">\"jdbc:oracle:thin:@localhost:1521\"</span>,\nÊ   <span class=\"fc4\">\"dih.db.user\"</span>:<span class=\"fc5\">\"username\"</span>,\nÊ   <span class=\"fc4\">\"dih.db.pass\"</span>:<span class=\"fc5\">\"password\"</span>}}",
    "hierarchy": [
      "Config API to Override solrconfig.xml"
    ],
    "pageId": 1012
  },
  {
    "content": "For more details, see the section <span class=\"link\">Config API</span>.",
    "hierarchy": [
      "Config API to Override solrconfig.xml"
    ],
    "pageId": 1012
  },
  {
    "content": "If the configuration directory for a Solr core contains a file named <span class=\"code\">solrcore.properties</span> that file can contain\nany arbitrary user defined property names and values using the Java standard <span class=\"link\">properties file format</span>, and\nthose properties can be used as variables in the XML configuration files for that Solr core.",
    "hierarchy": [
      "solrcore.properties"
    ],
    "pageId": 1012
  },
  {
    "content": "For example, the following <span class=\"code\">solrcore.properties</span> file could be created in the <span class=\"code\">conf/</span> directory of a collection\nusing one of the example configurations, to override the lockType used.",
    "hierarchy": [
      "solrcore.properties"
    ],
    "pageId": 1012
  },
  {
    "content": "#conf/solrcore.properties\nsolr.lock.type=none",
    "hierarchy": [
    ],
    "pageId": 1013
  },
  {
    "content": "solrcore.properties<span class=\"ff4 fs0\"> won't work in SolrCloud mode (it is not read from ZooKeeper). This</span>\nfeature is likely to be removed in the future. Instead, use another mechanism like a config\noverlay.",
    "hierarchy": [
    ],
    "pageId": 1013
  },
  {
    "content": "The path and name of the <span class=\"ff1 fs2\">solrcore.properties</span> file can be overridden using the\nproperties<span class=\"ff4 fs0\"> property in </span>core.properties<span class=\"ff4 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1013
  },
  {
    "content": "Every Solr core has a <span class=\"ff1 fs2\">core.properties</span> file, automatically created when using the APIs. When you create a\nSolrCloud collection, you can pass through custom parameters to go into each core.properties that will be\ncreated, by prefixing the parameter name with \"property.\" as a URL parameter. Example:",
    "hierarchy": [
      "User-Defined Properties in core.properties"
    ],
    "pageId": 1013
  },
  {
    "content": "http://localhost:8983/solr/admin/collections?action=CREATE&name=gettingstarted&numShards=1&proper\nty.my.custom.prop=edismax",
    "hierarchy": [
      "User-Defined Properties in core.properties"
    ],
    "pageId": 1013
  },
  {
    "content": "That would create a <span class=\"ff1 fs2\">core.properties</span> file that has at least the following properties (others omitted for\nbrevity):",
    "hierarchy": [
      "User-Defined Properties in core.properties"
    ],
    "pageId": 1013
  },
  {
    "content": "#core.properties\nname=gettingstarted\nmy.custom.prop=edismax",
    "hierarchy": [
      "User-Defined Properties in core.properties"
    ],
    "pageId": 1013
  },
  {
    "content": "The <span class=\"ff1 fs2\">my.custom.prop</span> property can then be used as a variable, such as in <span class=\"ff1 fs2\">solrconfig.xml</span>:",
    "hierarchy": [
      "User-Defined Properties in core.properties"
    ],
    "pageId": 1013
  },
  {
    "content": "Ê <span class=\"fc5\"><lst</span> <span class=\"fc6\">name</span>=<span class=\"fc7\">\"defaults\"<span class=\"fc5\">></span></span>\nÊ   <span class=\"fc5\"><str</span> <span class=\"fc6\">name</span>=<span class=\"fc7\">\"defType\"<span class=\"fc5\">></span></span>${my.custom.prop}<span class=\"fc5\"></str></span>\nÊ <span class=\"fc5\"></lst></span>",
    "hierarchy": [
      "User-Defined Properties in core.properties"
    ],
    "pageId": 1013
  },
  {
    "content": "Several attributes of a Solr core are available as \"implicit\" properties that can be used in variable\nsubstitution, independent of where or how they underlying value is initialized. For example: regardless of\nwhether the name for a particular Solr core is explicitly configured in <span class=\"ff1 fs2\">core.properties</span> or inferred from the\nname of the instance directory, the implicit property <span class=\"ff1 fs2\">solr.core.name</span> is available for use as a variable in that\ncore's configuration file…",
    "hierarchy": [
      "Implicit Core Properties"
    ],
    "pageId": 1013
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"collection_name\"<span class=\"fc0\">></span></span>${solr.core.name}<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "All implicit properties use the <span class=\"ff1 fs1\">solr.core.</span> name prefix, and reflect the runtime value of the equivalent\ncore.properties<span class=\"link\"> property<span class=\"fc1\">:</span></span>",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "\nsolr.core.name",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "\nsolr.core.config",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "\nsolr.core.schema",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "\nsolr.core.dataDir",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "\nsolr.core.transient",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "\nsolr.core.loadOnStartup",
    "hierarchy": [
    ],
    "pageId": 1014
  },
  {
    "content": "Where and how Solr stores its indexes are configurable options.",
    "hierarchy": [
      "DataDir and DirectoryFactory in SolrConfig"
    ],
    "pageId": 1014
  },
  {
    "content": "By default, Solr stores its index data in a directory called <span class=\"ff1 fs1\">/data</span> under the core's instance directory\n(<span class=\"ff1 fs1\">instanceDir</span>). If you would like to specify a different directory for storing index data, you can configure the\ndataDir<span class=\"ff2 fs0\"> in the </span>core.properties<span class=\"ff2 fs0\"> file for the core, or use the </span><dataDir><span class=\"ff2 fs0\"> parameter in the </span>solrconfig.xml\nfile. You can specify another directory either with an absolute path or a pathname relative to the instanceDir\nof the SolrCore. For example:",
    "hierarchy": [
      "DataDir and DirectoryFactory in SolrConfig",
      "Specifying a Location for Index Data with the dataDir Parameter"
    ],
    "pageId": 1014
  },
  {
    "content": "The <span class=\"ff1 fs1\">${solr.core.name}</span> substitution will cause the name of the current core to be substituted, which results\nin each core's data being kept in a separate subdirectory.",
    "hierarchy": [
      "DataDir and DirectoryFactory in SolrConfig",
      "Specifying a Location for Index Data with the dataDir Parameter"
    ],
    "pageId": 1014
  },
  {
    "content": "If you are using replication to replicate the Solr index (as described in <span class=\"link\">Legacy Scaling and Distribution</span>), then\nthe <span class=\"ff1 fs1\"><dataDir></span> directory should correspond to the index directory used in the replication configuration.",
    "hierarchy": [
      "DataDir and DirectoryFactory in SolrConfig",
      "Specifying a Location for Index Data with the dataDir Parameter"
    ],
    "pageId": 1014
  },
  {
    "content": "If the environment variable <span class=\"ff1 fs1\">SOLR_DATA_HOME</span> is defined, or if <span class=\"ff1 fs1\">solr.data.home</span> is configured\nfor your DirectoryFactory, or if <span class=\"ff1 fs1\">solr.xml</span> contains an element <span class=\"ff1 fs1\"><solrDataHome></span> then the\nlocation of data directory will be <span class=\"ff1 fs1\"><SOLR_DATA_HOME>/<instance_name>/data</span>.",
    "hierarchy": [
      "DataDir and DirectoryFactory in SolrConfig",
      "Specifying a Location for Index Data with the dataDir Parameter"
    ],
    "pageId": 1014
  },
  {
    "content": "The default <span class=\"ff1 fs1\">solr.NRTCachingDirectoryFactory</span> is filesystem based, and tries to pick the best\nimplementation for the current JVM and platform. You can force a particular implementation and/or config\noptions by specifying <span class=\"ff1 fs1\">solr.MMapDirectoryFactory</span>, <span class=\"ff1 fs1\">solr.NIOFSDirectoryFactory</span>, or\nsolr.SimpleFSDirectoryFactory<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "DataDir and DirectoryFactory in SolrConfig",
      "Specifying the DirectoryFactory For Your Index"
    ],
    "pageId": 1014
  },
  {
    "content": "Ê                 <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.MMapDirectoryFactory\"<span class=\"fc0\">></span></span>\nÊ <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"preload\"<span class=\"fc0\">></span></span>true<span class=\"fc0\"></bool></span>",
    "hierarchy": [
    ],
    "pageId": 1015
  },
  {
    "content": "The <span class=\"ff1 fs1\">solr.RAMDirectoryFactory</span> is memory based, not persistent, and does not work with replication. Use\nthis DirectoryFactory to store your index in RAM.",
    "hierarchy": [
    ],
    "pageId": 1015
  },
  {
    "content": "If you are using Hadoop and would like to store your indexes in HDFS, you should use the\nsolr.HdfsDirectoryFactory<span class=\"ff2 fs0\"> instead of either of the above implementations. For more</span>\ndetails, see the section <span class=\"link\">Running Solr on HDFS</span>.",
    "hierarchy": [
    ],
    "pageId": 1015
  },
  {
    "content": "Solr allows loading plugins by defining <span class=\"ff1 fs1\"><lib/></span> directives in <span class=\"ff1 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
      "Lib Directives in SolrConfig"
    ],
    "pageId": 1015
  },
  {
    "content": "The plugins are loaded in the order they appear in <span class=\"ff1 fs1\">solrconfig.xml</span>. If there are dependencies, list the\nlowest level dependency jar first.",
    "hierarchy": [
      "Lib Directives in SolrConfig"
    ],
    "pageId": 1015
  },
  {
    "content": "Regular expressions can be used to provide control loading jars with dependencies on other jars in the same\ndirectory. All directories are resolved as relative to the Solr <span class=\"ff1 fs1\">instanceDir</span>.",
    "hierarchy": [
      "Lib Directives in SolrConfig"
    ],
    "pageId": 1015
  },
  {
    "content": "Solr's <span class=\"link\">Schema API</span> enables remote clients to access <span class=\"link\">schema</span> information, and make schema modifications,\nthrough a REST interface.",
    "hierarchy": [
      "Schema Factory Definition in SolrConfig"
    ],
    "pageId": 1015
  },
  {
    "content": "Other features such as Solr's <span class=\"link\">Schemaless Mode</span> also work via schema modifications made programatically at\nrun time.",
    "hierarchy": [
      "Schema Factory Definition in SolrConfig"
    ],
    "pageId": 1015
  },
  {
    "content": "Using the Managed Schema is required to be able to use the Schema API to modify your\nschema. However, using Managed Schema does not by itself mean you are also using Solr\nin Schemaless Mode (or \"schema guessing\" mode).",
    "hierarchy": [
    ],
    "pageId": 1016
  },
  {
    "content": "Schemaless mode requires enabling the Managed Schema if it is not already, but full\nschema guessing requires additional configuration as described in the section <span class=\"link\">Schemaless</span>\nMode<span class=\"fc1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1016
  },
  {
    "content": "While the \"read\" features of the Schema API are supported for all schema types, support for making schema\nmodifications programatically depends on the <span class=\"code\"><schemaFactory/></span> in use.",
    "hierarchy": [
    ],
    "pageId": 1016
  },
  {
    "content": "When a <span class=\"code\"><schemaFactory/></span> is not explicitly declared in a <span class=\"code\">solrconfig.xml</span> file, Solr implicitly uses a\nManagedIndexSchemaFactory<span class=\"ff2 fs1\">, which is by default </span>\"mutable\"<span class=\"ff2 fs1\"> and keeps schema information in a </span>managed-\nschema<span class=\"ff2 fs1\"> file.</span>",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "Ê<span class=\"fc4\"><!-- An example of Solr's implicit default behavior if no</span>",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "Ê <span class=\"fc5\"><schemaFactory</span> <span class=\"fc6\">class</span>=<span class=\"fc7\">\"ManagedIndexSchemaFactory\"<span class=\"fc5\">></span></span>\nÊ   <span class=\"fc5\"><bool</span> <span class=\"fc6\">name</span>=<span class=\"fc7\">\"mutable\"<span class=\"fc5\">></span></span>true<span class=\"fc5\"></bool></span>\nÊ   <span class=\"fc5\"><str</span> <span class=\"fc6\">name</span>=<span class=\"fc7\">\"managedSchemaResourceName\"<span class=\"fc5\">></span></span>managed-schema<span class=\"fc5\"></str></span>\nÊ <span class=\"fc5\"></schemaFactory></span>",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "If you wish to explicitly configure <span class=\"code\">ManagedIndexSchemaFactory</span> the following options are available:",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "mutable - controls whether changes may be made to the Schema data. This must be set to <span class=\"ff4\">true</span> to allow\nedits to be made with the Schema API.",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "managedSchemaResourceName is an optional parameter that defaults to \"managed-schema\", and defines\na new name for the schema file that can be anything other than “schema.xml”.",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "With the default configuration shown above, you can use the <span class=\"link\">Schema API</span> to modify the schema as much as\nyou want, and then later change the value of <span class=\"code\">mutable</span> to <span class=\"ff4\">false</span> if you wish to \"lock\" the schema in place and\nprevent future changes.",
    "hierarchy": [
      "Solr Uses Managed Schema by Default"
    ],
    "pageId": 1016
  },
  {
    "content": "An alternative to using a managed schema is to explicitly configure a <span class=\"code\">ClassicIndexSchemaFactory</span>.\nClassicIndexSchemaFactory<span class=\"ff2 fs1\"> requires the use of a </span>schema.xml<span class=\"ff2 fs1\"> configuration file, and disallows any</span>\nprogramatic changes to the Schema at run time. The <span class=\"code\">schema.xml</span> file must be edited manually and is only\nloaded only when the collection is loaded.",
    "hierarchy": [
      "Classic schema.xml"
    ],
    "pageId": 1016
  },
  {
    "content": "Ê <span class=\"fc5\"><schemaFactory</span> <span class=\"fc6\">class</span>=<span class=\"fc7\">\"ClassicIndexSchemaFactory\"<span class=\"fc5\">/></span></span>",
    "hierarchy": [
      "Classic schema.xml"
    ],
    "pageId": 1016
  },
  {
    "content": "If you have an existing Solr collection that uses <span class=\"code\">ClassicIndexSchemaFactory</span>, and you wish to convert to use",
    "hierarchy": [
      "Classic schema.xml",
      "Switching from schema.xml to Managed Schema"
    ],
    "pageId": 1016
  },
  {
    "content": "a managed schema, you can simply modify the <span class=\"ff2 fs1\">solrconfig.xml</span> to specify the use of the\nManagedIndexSchemaFactory<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1017
  },
  {
    "content": "Once Solr is restarted and it detects that a <span class=\"ff2 fs1\">schema.xml</span> file exists, but the <span class=\"ff2 fs1\">managedSchemaResourceName</span> file\n(i.e., “managed-schema”) does not exist, the existing <span class=\"ff2 fs1\">schema.xml</span> file will be renamed to <span class=\"ff2 fs1\">schema.xml.bak</span>\nand the contents are re-written to the managed schema file. If you look at the resulting file, you'll see this at\nthe top of the page:",
    "hierarchy": [
    ],
    "pageId": 1017
  },
  {
    "content": "You are now free to use the <span class=\"link\">Schema API</span> as much as you want to make changes, and remove the\nschema.xml.bak<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1017
  },
  {
    "content": "If you have started Solr with managed schema enabled and you would like to switch to manually editing a\nschema.xml<span class=\"ff1 fs0\"> file, you should take the following steps:</span>",
    "hierarchy": [
      "Switching from Managed Schema to Manually Edited schema.xml"
    ],
    "pageId": 1017
  },
  {
    "content": "1.Rename the <span class=\"ff2 fs1\">managed-schema</span> file to <span class=\"ff2 fs1\">schema.xml</span>.\n2.Modify <span class=\"ff2 fs1\">solrconfig.xml</span> to replace the <span class=\"ff2 fs1\">schemaFactory</span> class.\na.Remove any <span class=\"ff2 fs1\">ManagedIndexSchemaFactory</span> definition if it exists.\nb.Add a <span class=\"ff2 fs1\">ClassicIndexSchemaFactory</span> definition as shown above\n3.Reload the core(s).",
    "hierarchy": [
      "Switching from Managed Schema to Manually Edited schema.xml"
    ],
    "pageId": 1017
  },
  {
    "content": "If you are using SolrCloud, you may need to modify the files via ZooKeeper. The <span class=\"ff2 fs1\">bin/solr</span> script provides an\neasy way to download the files from ZooKeeper and upload them back after edits. See the section\nZooKeeper Operations<span class=\"fc0\"> for more information.</span>",
    "hierarchy": [
      "Switching from Managed Schema to Manually Edited schema.xml"
    ],
    "pageId": 1017
  },
  {
    "content": "To have full control over your <span class=\"ff2 fs1\">schema.xml</span> file, you may also want to disable schema\nguessing, which allows unknown fields to be added to the schema during indexing. The\nproperties that enable this feature are discussed in the section <span class=\"link\">Schemaless Mode</span>.",
    "hierarchy": [
      "Switching from Managed Schema to Manually Edited schema.xml"
    ],
    "pageId": 1017
  },
  {
    "content": "The <span class=\"ff2 fs1\"><indexConfig></span> section of <span class=\"ff2 fs1\">solrconfig.xml</span> defines low-level behavior of the Lucene index writers.",
    "hierarchy": [
      "IndexConfig in SolrConfig"
    ],
    "pageId": 1017
  },
  {
    "content": "By default, the settings are commented out in the sample <span class=\"ff2 fs1\">solrconfig.xml</span> included with Solr, which means\nthe defaults are used. In most cases, the defaults are fine.",
    "hierarchy": [
      "IndexConfig in SolrConfig"
    ],
    "pageId": 1017
  },
  {
    "content": "Ê ...",
    "hierarchy": [
      "IndexConfig in SolrConfig"
    ],
    "pageId": 1017
  },
  {
    "content": "Once accumulated document updates exceed this much memory space (defined in megabytes), then the\npending updates are flushed. This can also create new segments or trigger a merge. Using this setting is\ngenerally preferable to <span class=\"code\">maxBufferedDocs</span>. If both <span class=\"code\">maxBufferedDocs</span> and <span class=\"code\">ramBufferSizeMB</span> are set in\nsolrconfig.xml<span class=\"ff2 fs0\">, then a flush will occur when either limit is reached. The default is 100Mb.</span>",
    "hierarchy": [
      "ramBufferSizeMB"
    ],
    "pageId": 1018
  },
  {
    "content": "Sets the number of document updates to buffer in memory before they are flushed as a new segment. This\nmay also trigger a merge. The default Solr configuration sets to flush by RAM usage (<span class=\"code\">ramBufferSizeMB</span>).",
    "hierarchy": [
      "maxBufferedDocs"
    ],
    "pageId": 1018
  },
  {
    "content": "Controls whether newly written (and not yet merged) index segments should use the <span class=\"link\">Compound File</span>\nSegments<span class=\"fc1\"> format. The default is false.</span>",
    "hierarchy": [
      "useCompoundFile"
    ],
    "pageId": 1018
  },
  {
    "content": "Defines how merging segments is done.",
    "hierarchy": [
      "Merging Index Segments",
      "mergePolicyFactory"
    ],
    "pageId": 1018
  },
  {
    "content": "The default in Solr is to use a <span class=\"code\">TieredMergePolicy</span>, which merges segments of approximately equal size,\nsubject to an allowed number of segments per tier.",
    "hierarchy": [
      "Merging Index Segments",
      "mergePolicyFactory"
    ],
    "pageId": 1018
  },
  {
    "content": "Other policies available are the <span class=\"code\">LogByteSizeMergePolicy</span>, <span class=\"code\">LogDocMergePolicy</span>, and\nUninvertDocValuesMergePolicy<span class=\"ff2 fs0\">. For more information on these policies, please see <span class=\"link\">the MergePolicy</span></span>\njavadocs<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Merging Index Segments",
      "mergePolicyFactory"
    ],
    "pageId": 1018
  },
  {
    "content": "Ê <span class=\"fc2\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"maxMergeAtOnce\"<span class=\"fc2\">></span></span>10<span class=\"fc2\"></int></span>\nÊ <span class=\"fc2\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"segmentsPerTier\"<span class=\"fc2\">></span></span>10<span class=\"fc2\"></int></span>",
    "hierarchy": [
      "Merging Index Segments",
      "mergePolicyFactory"
    ],
    "pageId": 1018
  },
  {
    "content": "The most common adjustment users make to the configuration of TieredMergePolicy (or\nLogByteSizeMergePolicy) are the \"merge factors\" to change how many segments should be merged at one\ntime.",
    "hierarchy": [
      "Merging Index Segments",
      "Controlling Segment Sizes: Merge Factors"
    ],
    "pageId": 1018
  },
  {
    "content": "For TieredMergePolicy, this is controlled by setting the <span class=\"code\"><int name=\"maxMergeAtOnce\"></span> and <span class=\"code\"><int</span>",
    "hierarchy": [
      "Merging Index Segments",
      "Controlling Segment Sizes: Merge Factors"
    ],
    "pageId": 1018
  },
  {
    "content": "name=\"segmentsPerTier\"><span class=\"ff2 fs1\"> options, while LogByteSizeMergePolicy has a single </span><int name=\"mergeFactor\">\noption (all of which default to <span class=\"ff1 fs0\">10</span>).",
    "hierarchy": [
    ],
    "pageId": 1019
  },
  {
    "content": "To understand why these options are important, consider what happens when an update is made to an\nindex using LogByteSizeMergePolicy: Documents are always added to the most recently opened segment.\nWhen a segment fills up, a new segment is created and subsequent updates are placed there.",
    "hierarchy": [
    ],
    "pageId": 1019
  },
  {
    "content": "If creating a new segment would cause the number of lowest-level segments to exceed the <span class=\"ff1 fs0\">mergeFactor</span>\nvalue, then all those segments are merged together to form a single large segment. Thus, if the merge\nfactor is 10, each merge results in the creation of a single segment that is roughly ten times larger than each\nof its ten constituents. When there are 10 of these larger segments, then they in turn are merged into an\neven larger single segment. This process can continue indefinitely.",
    "hierarchy": [
    ],
    "pageId": 1019
  },
  {
    "content": "When using TieredMergePolicy, the process is the same, but instead of a single <span class=\"ff1 fs0\">mergeFactor</span> value, the\nsegmentsPerTier<span class=\"ff2 fs1\"> setting is used as the threshold to decide if a merge should happen, and the</span>\nmaxMergeAtOnce<span class=\"ff2 fs1\"> setting determines how many segments should be included in the merge.</span>",
    "hierarchy": [
    ],
    "pageId": 1019
  },
  {
    "content": "Choosing the best merge factors is generally a trade-off of indexing speed vs. searching speed. Having\nfewer segments in the index generally accelerates searches, because there are fewer places to look. It also\ncan also result in fewer physical files on disk. But to keep the number of segments low, merges will occur\nmore often, which can add load to the system and slow down updates to the index.",
    "hierarchy": [
    ],
    "pageId": 1019
  },
  {
    "content": "Conversely, keeping more segments can accelerate indexing, because merges happen less often, making an\nupdate is less likely to trigger a merge. But searches become more computationally expensive and will likely\nbe slower, because search terms must be looked up in more index segments. Faster index updates also\nmeans shorter commit turnaround times, which means more timely search results.",
    "hierarchy": [
    ],
    "pageId": 1019
  },
  {
    "content": "If the configuration options for the built-in merge policies do not fully suit your use case, you can customize\nthem: either by creating a custom merge policy factory that you specify in your configuration, or by\nconfiguring a <span class=\"link\">merge policy wrapper</span> which uses a <span class=\"ff1 fs0\">wrapped.prefix</span> configuration option to control how the\nfactory it wraps will be configured:",
    "hierarchy": [
      "Customizing Merge Policies"
    ],
    "pageId": 1019
  },
  {
    "content": "Ê <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"sort\"<span class=\"fc3\">></span></span>timestamp desc<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"wrapped.prefix\"<span class=\"fc3\">></span></span>inner<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"inner.class\"<span class=\"fc3\">></span></span>org.apache.solr.index.TieredMergePolicyFactory<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"inner.maxMergeAtOnce\"<span class=\"fc3\">></span></span>10<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"inner.segmentsPerTier\"<span class=\"fc3\">></span></span>10<span class=\"fc3\"></int></span>",
    "hierarchy": [
      "Customizing Merge Policies"
    ],
    "pageId": 1019
  },
  {
    "content": "The example above shows Solr's <span class=\"ff1 fs0\">SortingMergePolicyFactory</span> being configured to sort documents in\nmerged segments by <span class=\"ff1 fs0\">\"timestamp desc\"</span>, and wrapped around a <span class=\"ff1 fs0\">TieredMergePolicyFactory</span> configured to\nuse the values <span class=\"ff1 fs0\">maxMergeAtOnce=10</span> and <span class=\"ff1 fs0\">segmentsPerTier=10</span> via the <span class=\"ff1 fs0\">inner</span> prefix defined by\nSortingMergePolicyFactory<span class=\"ff2 fs1\"> 's </span>wrapped.prefix<span class=\"ff2 fs1\"> option. For more information on using</span>\nSortingMergePolicyFactory<span class=\"ff2 fs1\">, see <span class=\"link\">the segmentTerminateEarly parameter</span>.</span>",
    "hierarchy": [
      "Customizing Merge Policies"
    ],
    "pageId": 1019
  },
  {
    "content": "The merge scheduler controls how merges are performed. The default <span class=\"code\">ConcurrentMergeScheduler</span>\nperforms merges in the background using separate threads. The alternative, <span class=\"code\">SerialMergeScheduler</span>, does\nnot perform merges with separate threads.",
    "hierarchy": [
      "mergeScheduler"
    ],
    "pageId": 1020
  },
  {
    "content": "The <span class=\"code\">ConcurrentMergeScheduler</span> has two configurable attributes:",
    "hierarchy": [
      "mergeScheduler"
    ],
    "pageId": 1020
  },
  {
    "content": "maxMergeCount\nThe maximum number of simultaneous merges that are allowed. If a merge is necessary yet we already\nhave this many threads running, the indexing thread will block until a merge thread has completed. Note\nthat Solr will only run the smallest <span class=\"code\">maxThreadCount</span> merges at a time.",
    "hierarchy": [
      "mergeScheduler"
    ],
    "pageId": 1020
  },
  {
    "content": "maxThreadCount\nThe maximum number of simultaneous merge threads that should be running at once. This must be less\nthan <span class=\"code\">maxMergeCount</span>.",
    "hierarchy": [
      "mergeScheduler"
    ],
    "pageId": 1020
  },
  {
    "content": "The defaults for the above attributes are dynamically set based on whether the underlying disk drive is\nrotational disk or not. Refer to the <span class=\"link\">Dynamic defaults for ConcurrentMergeScheduler</span> section for more details.",
    "hierarchy": [
      "mergeScheduler"
    ],
    "pageId": 1020
  },
  {
    "content": "Ê <span class=\"fc4\"><int</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"maxMergeCount\"<span class=\"fc4\">></span></span>9<span class=\"fc4\"></int></span>\nÊ <span class=\"fc4\"><int</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"maxThreadCount\"<span class=\"fc4\">></span></span>4<span class=\"fc4\"></int></span>",
    "hierarchy": [
      "mergeScheduler"
    ],
    "pageId": 1020
  },
  {
    "content": "When using Solr in for <span class=\"link\">Near Real Time Searching</span> a merged segment warmer can be configured to warm the\nreader on the newly merged segment, before the merge commits. This is not required for near real-time\nsearch, but will reduce search latency on opening a new near real-time reader after a merge completes.",
    "hierarchy": [
      "mergedSegmentWarmer"
    ],
    "pageId": 1020
  },
  {
    "content": "Each Lucene segment is typically comprised of a dozen or so files. Lucene can be configured to bundle all of\nthe files for a segment into a single compound file using a file extension of <span class=\"code\">.cfs</span>; it's an abbreviation for\nCompound File Segment.",
    "hierarchy": [
      "Compound File Segments"
    ],
    "pageId": 1020
  },
  {
    "content": "CFS segments may incur a minor performance hit for various reasons, depending on the runtime\nenvironment. For example, filesystem buffers are typically associated with open file descriptors, which may\nlimit the total cache space available to each index.",
    "hierarchy": [
      "Compound File Segments"
    ],
    "pageId": 1020
  },
  {
    "content": "On systems where the number of open files allowed per process is limited, CFS may avoid hitting that limit.",
    "hierarchy": [
      "Compound File Segments"
    ],
    "pageId": 1020
  },
  {
    "content": "The open files limit might also be tunable for your OS with the Linux/Unix <span class=\"ff2 fs1\">ulimit</span> command, or something\nsimilar for other operating systems.",
    "hierarchy": [
    ],
    "pageId": 1021
  },
  {
    "content": "To configure whether <span class=\"ff4\">newly written segments</span> should use CFS, see the <span class=\"ff2 fs1\">useCompoundFile</span>\nsetting described above. To configure whether <span class=\"ff4\">merged segments</span> use CFS, review the\nJavadocs for your <span class=\"ff2 fs1\">mergePolicyFactory</span>.",
    "hierarchy": [
    ],
    "pageId": 1021
  },
  {
    "content": "Many <span class=\"link\">Merge Policy</span> implementations support <span class=\"ff2 fs1\">noCFSRatio</span> and <span class=\"ff2 fs1\">maxCFSSegmentSizeMB</span>\nsettings with default values that prevent compound files from being used for large\nsegments, but do use compound files for small segments.",
    "hierarchy": [
    ],
    "pageId": 1021
  },
  {
    "content": "The LockFactory options specify the locking implementation to use.",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "The set of valid lock type options depends on the <span class=\"link\">DirectoryFactory</span> you have configured. The values listed\nbelow are are supported by <span class=\"ff2 fs1\">StandardDirectoryFactory</span> (the default):",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "native (default) uses NativeFSLockFactory to specify native OS file locking. If a second Solr process\nattempts to access the directory, it will fail. Do not use when multiple Solr web applications are\nattempting to share a single index.",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "simple uses SimpleFSLockFactory to specify a plain file for locking.",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "single (expert) uses SingleInstanceLockFactory. Use for special situations of a read-only index directory,\nor when there is no possibility of more than one process trying to modify the index (even sequentially).\nThis type will protect against multiple cores within the <span class=\"ff4\">same</span> JVM attempting to access the same index.\nWARNING! If multiple Solr instances in different JVMs modify an index, this type will <span class=\"ff4\">not</span> protect against\nindex corruption.",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "hdfs uses HdfsLockFactory to support reading and writing index and transaction log files to a HDFS\nfilesystem. See the section <span class=\"link\">Running Solr on HDFS</span> for more details on using this feature.",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "For more information on the nuances of each LockFactory, see <span class=\"link\">http://wiki.apache.org/lucene-java/</span>\nAvailableLockFactories<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Index Locks",
      "lockType"
    ],
    "pageId": 1021
  },
  {
    "content": "The maximum time to wait for a write lock on an IndexWriter. The default is 1000, expressed in milliseconds.",
    "hierarchy": [
      "Index Locks",
      "writeLockTimeout"
    ],
    "pageId": 1021
  },
  {
    "content": "There are a few other parameters that may be important to configure for your implementation. These",
    "hierarchy": [
      "Other Indexing Settings"
    ],
    "pageId": 1021
  },
  {
    "content": "settings affect how or when updates are made to an index.",
    "hierarchy": [
    ],
    "pageId": 1022
  },
  {
    "content": "deletionPolicy\nControls how commits are retained in case of rollback. The default is <span class=\"ff2 fs1\">SolrDeletionPolicy</span>, which has\nsub-parameters for the maximum number of commits to keep (<span class=\"ff2 fs1\">maxCommitsToKeep</span>), the maximum\nnumber of optimized commits to keep (<span class=\"ff2 fs1\">maxOptimizedCommitsToKeep</span>), and the maximum age of any\ncommit to keep (<span class=\"ff2 fs1\">maxCommitAge</span>), which supports <span class=\"ff2 fs1\">DateMathParser</span> syntax.",
    "hierarchy": [
    ],
    "pageId": 1022
  },
  {
    "content": "infoStream\nThe InfoStream setting instructs the underlying Lucene classes to write detailed debug information from\nthe indexing process as Solr log messages.",
    "hierarchy": [
    ],
    "pageId": 1022
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxCommitsToKeep\"<span class=\"fc1\">></span></span>1<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxOptimizedCommitsToKeep\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxCommitAge\"<span class=\"fc1\">></span></span>1DAY<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1022
  },
  {
    "content": "After the <span class=\"ff2 fs1\"><query></span> section of <span class=\"ff2 fs1\">solrconfig.xml</span>, request handlers and search components are configured.",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig"
    ],
    "pageId": 1022
  },
  {
    "content": "A <span class=\"ff4\">request handler</span> processes requests coming to Solr. These might be query requests or index update\nrequests. You will likely need several of these defined, depending on how you want Solr to handle the\nvarious requests you will make.",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig"
    ],
    "pageId": 1022
  },
  {
    "content": "A <span class=\"ff4\">search component</span> is a feature of search, such as highlighting or faceting. The search component is defined\nin <span class=\"ff2 fs1\">solrconfig.xml</span> separate from the request handlers, and then registered with a request handler as\nneeded.",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig"
    ],
    "pageId": 1022
  },
  {
    "content": "These are often referred to as \"requestHandler\" and \"searchComponent\", which is how they are defined in\nsolrconfig.xml<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig"
    ],
    "pageId": 1022
  },
  {
    "content": "Every request handler is defined with a name and a class. The name of the request handler is referenced\nwith the request to Solr, typically as a path. For example, if Solr is installed at <span class=\"ff2 fs1\">http://localhost:8983/solr/</span>\nand you have a collection named \"gettingstarted\", you can make a request that looks like this:",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig",
      "Request Handlers"
    ],
    "pageId": 1022
  },
  {
    "content": "http://localhost:8983/solr/gettingstarted/select?q=solr",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig",
      "Request Handlers"
    ],
    "pageId": 1022
  },
  {
    "content": "This query will be processed by the request handler with the name <span class=\"ff2 fs1\">/select</span>. We've only used the \"q\"\nparameter here, which includes our query term, a simple keyword of \"solr\". If the request handler has more\nparameters defined, those will be used with any query we send to this request handler unless they are over-\nridden by the client (or user) in the query itself.",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig",
      "Request Handlers"
    ],
    "pageId": 1022
  },
  {
    "content": "If you have another request handler defined, you would send your request with that name. For example,\n/update<span class=\"ff1 fs0\"> is a request handler that handles index updates (i.e., sending new documents to the index). By</span>",
    "hierarchy": [
      "RequestHandlers and SearchComponents in SolrConfig",
      "Request Handlers"
    ],
    "pageId": 1022
  },
  {
    "content": "default, <span class=\"ff2 fs1\">/select</span> is a request handler that handles query requests.",
    "hierarchy": [
    ],
    "pageId": 1023
  },
  {
    "content": "Request handlers can also process requests for nested paths of their names, for example, a request using\n/myhandler/extrapath<span class=\"ff1 fs0\"> may be processed by a request handler registered with the name </span>/myhandler<span class=\"ff1 fs0\">. If a</span>\nrequest handler is explicitly defined by the name <span class=\"ff2 fs1\">/myhandler/extrapath</span>, that would take precedence over\nthe nested path. This assumes you are using the request handler classes included with Solr; if you create\nyour own request handler, you should make sure it includes the ability to handle nested paths if you want to\nuse them with your custom request handler.",
    "hierarchy": [
    ],
    "pageId": 1023
  },
  {
    "content": "It is also possible to configure defaults for request handlers with a section called <span class=\"ff2 fs1\">initParams</span>. These defaults\ncan be used when you want to have common properties that will be used by each separate handler. For\nexample, if you intend to create several request handlers that will all request the same list of fields in the\nresponse, you can configure an <span class=\"ff2 fs1\">initParams</span> section with your list of fields. For more information about\ninitParams<span class=\"ff1 fs0\">, see the section <span class=\"link\">InitParams in SolrConfig</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 1023
  },
  {
    "content": "The primary request handler defined with Solr by default is the \"SearchHandler\", which handles search\nqueries. The request handler is defined, and then a list of defaults for the handler are defined with a\ndefaults<span class=\"ff1 fs0\"> list.</span>",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "For example, in the default <span class=\"ff2 fs1\">solrconfig.xml</span>, the first request handler defined looks like this:",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"echoParams\"<span class=\"fc3\">></span></span>explicit<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"rows\"<span class=\"fc3\">></span></span>10<span class=\"fc3\"></int></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "This example defines the <span class=\"ff2 fs1\">rows</span> parameter, which defines how many search results to return, to \"10\". The\nechoParams<span class=\"ff1 fs0\"> parameter defines that the parameters defined in the query should be returned when debug</span>\ninformation is returned. Note also that the way the defaults are defined in the list varies if the parameter is a\nstring, an integer, or another type.",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "All of the parameters described in the section <span class=\"link\">Searching</span> can be defined as defaults for any of the\nSearchHandlers.",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "Besides <span class=\"ff2 fs1\">defaults</span>, there are other options for the SearchHandler, which are:",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "appends: This allows definition of parameters that are added to the user query. These might be <span class=\"link\">filter</span>\nqueries<span class=\"fc0\">, or other query rules that should be added to each query. There is no mechanism in Solr to allow</span>\na client to override these additions, so you should be absolutely sure you always want these parameters\napplied to queries.",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "Ê <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"fq\"<span class=\"fc3\">></span></span>inStock:true<span class=\"fc3\"></str></span>",
    "hierarchy": [
      "SearchHandlers"
    ],
    "pageId": 1023
  },
  {
    "content": "In this example, the filter query \"inStock:true\" will always be added to every query.",
    "hierarchy": [
    ],
    "pageId": 1024
  },
  {
    "content": "invariants: This allows definition of parameters that cannot be overridden by a client. The values\ndefined in an <span class=\"ff2 fs1\">invariants</span> section will always be used regardless of the values specified by the user, by\nthe client, in <span class=\"ff2 fs1\">defaults</span> or in <span class=\"ff2 fs1\">appends</span>.",
    "hierarchy": [
    ],
    "pageId": 1024
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet.field\"<span class=\"fc1\">></span></span>cat<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet.field\"<span class=\"fc1\">></span></span>manu_exact<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet.query\"<span class=\"fc1\">></span></span>price:[* TO 500]<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet.query\"<span class=\"fc1\">></span></span>price:[500 TO *]<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1024
  },
  {
    "content": "In this example, facet fields have been defined which limits the facets that will be returned by Solr. If the\nclient requests facets, the facets defined with a configuration like this are the only facets they will see.",
    "hierarchy": [
    ],
    "pageId": 1024
  },
  {
    "content": "The final section of a request handler definition is <span class=\"ff2 fs1\">components</span>, which defines a list of search components\nthat can be used with a request handler. They are only registered with the request handler. How to define a\nsearch component is discussed further on in the section on <span class=\"link\">Search Components</span> below. The <span class=\"ff2 fs1\">components</span>\nelement can only be used with a request handler that is a SearchHandler.",
    "hierarchy": [
    ],
    "pageId": 1024
  },
  {
    "content": "The <span class=\"ff2 fs1\">solrconfig.xml</span> file includes many other examples of SearchHandlers that can be used or modified as\nneeded.",
    "hierarchy": [
    ],
    "pageId": 1024
  },
  {
    "content": "The UpdateRequestHandlers are request handlers which process updates to the index.",
    "hierarchy": [
      "UpdateRequestHandlers"
    ],
    "pageId": 1024
  },
  {
    "content": "In this guide, we've covered these handlers in detail in the section <span class=\"link\">Uploading Data with Index Handlers</span>.",
    "hierarchy": [
      "UpdateRequestHandlers"
    ],
    "pageId": 1024
  },
  {
    "content": "It is possible to configure a request handler to search across shards of a cluster, used with distributed\nsearch. More information about distributed search and how to configure the shardHandler is in the section\nDistributed Search with Index Sharding<span class=\"fc0\">.</span>",
    "hierarchy": [
      "ShardHandlers"
    ],
    "pageId": 1024
  },
  {
    "content": "Solr includes many out-of-the-box request handlers that are not configured in <span class=\"ff2 fs1\">solrconfig.xml</span>, and so are\nreferred to as \"implicit\" - see <span class=\"link\">Implicit RequestHandlers</span>.",
    "hierarchy": [
      "Implicit Request Handlers"
    ],
    "pageId": 1024
  },
  {
    "content": "Search components define the logic that is used by the SearchHandler to perform queries for users.",
    "hierarchy": [
      "Search Components"
    ],
    "pageId": 1024
  },
  {
    "content": "There are several default search components that work with all SearchHandlers without any additional\nconfiguration. If no components are defined (with the exception of <span class=\"ff2 fs1\">first-components</span> and <span class=\"ff2 fs1\">last-components</span>\n- see below), these are executed by default, in the following order:",
    "hierarchy": [
      "Search Components",
      "Default Components"
    ],
    "pageId": 1024
  },
  {
    "content": "query\nsolr.QueryComponent\nDescribed in the section <span class=\"link\">Query Syntax and</span>\nParsing<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "facet\nsolr.FacetComponent\nDescribed in the section <span class=\"link\">Faceting</span>.",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "mlt\nsolr.MoreLikeThisComponent\nDescribed in the section <span class=\"link\">MoreLikeThis</span>.",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "highlight\nsolr.HighlightComponent\nDescribed in the section <span class=\"link\">Highlighting</span>.",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "stats\nsolr.StatsComponent\nDescribed in the section <span class=\"link\">The Stats</span>\nComponent<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "debug\nsolr.DebugComponent\nDescribed in the section on <span class=\"link\">Common</span>\nQuery Parameters<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "expand\nsolr.ExpandComponent\nDescribed in the section <span class=\"link\">Collapse and</span>\nExpand Results<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "If you register a new search component with one of these default names, the newly defined component will\nbe used instead of the default.",
    "hierarchy": [
    ],
    "pageId": 1025
  },
  {
    "content": "It's possible to define some components as being used before (with <span class=\"code\">first-components</span>) or after (with <span class=\"code\">last-</span>\ncomponents<span class=\"ff2 fs0\">) the default components listed above.</span>",
    "hierarchy": [
      "First-Components and Last-Components"
    ],
    "pageId": 1025
  },
  {
    "content": "first-components<span class=\"ff2 fs0\"> and/or </span>last-components<span class=\"ff2 fs0\"> may only be used in conjunction with the</span>\ndefault components. If you define your own <span class=\"code\">components</span>, the default components will not\nbe executed, and <span class=\"code\">first-components</span> and <span class=\"code\">last-components</span> are disallowed.",
    "hierarchy": [
      "First-Components and Last-Components"
    ],
    "pageId": 1025
  },
  {
    "content": "Ê <span class=\"fc4\"><str></span>mycomponent<span class=\"fc4\"></str></span>",
    "hierarchy": [
      "First-Components and Last-Components"
    ],
    "pageId": 1025
  },
  {
    "content": "Ê <span class=\"fc4\"><str></span>spellcheck<span class=\"fc4\"></str></span>",
    "hierarchy": [
      "First-Components and Last-Components"
    ],
    "pageId": 1025
  },
  {
    "content": "If you define <span class=\"code\">components</span>, the default components (see above) will not be executed, and <span class=\"code\">first-components</span>\nand <span class=\"code\">last-components</span> are disallowed:",
    "hierarchy": [
      "Components"
    ],
    "pageId": 1025
  },
  {
    "content": "Ê <span class=\"fc4\"><str></span>mycomponent<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><str></span>query<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><str></span>debug<span class=\"fc4\"></str></span>",
    "hierarchy": [
      "Components"
    ],
    "pageId": 1025
  },
  {
    "content": "Many of the other useful components are described in sections of this Guide for the features they support.\nThese are:",
    "hierarchy": [
      "Other Useful Components"
    ],
    "pageId": 1026
  },
  {
    "content": "SpellCheckComponent, described in the section <span class=\"link\">Spell Checking</span>.",
    "hierarchy": [
      "Other Useful Components"
    ],
    "pageId": 1026
  },
  {
    "content": "TermVectorComponent, described in the section <span class=\"link\">The Term Vector Component</span>.",
    "hierarchy": [
      "Other Useful Components"
    ],
    "pageId": 1026
  },
  {
    "content": "QueryElevationComponent, described in the section <span class=\"link\">The Query Elevation Component</span>.",
    "hierarchy": [
      "Other Useful Components"
    ],
    "pageId": 1026
  },
  {
    "content": "TermsComponent, described in the section <span class=\"link\">The Terms Component</span>.",
    "hierarchy": [
      "Other Useful Components"
    ],
    "pageId": 1026
  },
  {
    "content": "The <span class=\"code\"><initParams></span> section of <span class=\"code\">solrconfig.xml</span> allows you to define request handler parameters outside of\nthe handler configuration.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "There are a couple of use cases where this might be desired:",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "Some handlers are implicitly defined in code - see <span class=\"link\">Implicit RequestHandlers</span> - and there should be a way\nto add/append/override some of the implicitly defined properties.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "There are a few properties that are used across handlers. This helps you keep only a single definition of\nthose properties and apply them over multiple handlers.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "For example, if you want several of your search handlers to return the same list of fields, you can create an\n<initParams><span class=\"ff2 fs0\"> section without having to define the same set of parameters in each request handler</span>\ndefinition. If you have a single request handler that should return different fields, you can define the\noverriding parameters in individual <span class=\"code\"><requestHandler></span> sections as usual.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "The properties and configuration of an <span class=\"code\"><initParams></span> section mirror the properties and configuration of a\nrequest handler. It can include sections for defaults, appends, and invariants, the same as any request\nhandler.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "For example, here is one of the <span class=\"code\"><initParams></span> sections defined by default in the <span class=\"code\">_default</span> example:",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"df\"<span class=\"fc3\">></span></span>_text_<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "This sets the default search field (\"df\") to be \"<span class=\"ff4\">text</span>\" for all of the request handlers named in the path section.\nIf we later want to change the <span class=\"code\">/query</span> request handler to search a different field by default, we could\noverride the <span class=\"code\"><initParams></span> by defining the parameter in the <span class=\"code\"><requestHandler></span> section for <span class=\"code\">/query</span>.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "The syntax and semantics are similar to that of a <span class=\"code\"><requestHandler></span>. The following are the attributes",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "path\nA comma-separated list of paths which will use the parameters. Wildcards can be used in paths to define\nnested paths, as described below.",
    "hierarchy": [
      "InitParams in SolrConfig"
    ],
    "pageId": 1026
  },
  {
    "content": "name\nThe name of this set of parameters. The name can be used directly in a requestHandler definition if a\npath is not explicitly named. If you give your <span class=\"ff1 fs0\"><initParams></span> a name, you can refer to the params in a\n<requestHandler><span class=\"ff2 fs1\"> that is not defined as a path.</span>",
    "hierarchy": [
    ],
    "pageId": 1027
  },
  {
    "content": "For example, if an <span class=\"ff1 fs0\"><initParams></span> section has the name \"myParams\", you can call the name when defining\nyour request handler:",
    "hierarchy": [
    ],
    "pageId": 1027
  },
  {
    "content": "An <span class=\"ff1 fs0\"><initParams></span> section can support wildcards to define nested paths that should use the parameters\ndefined. A single asterisk (*) denotes that a nested path one level deeper should use the parameters.\nDouble asterisks (**) denote all nested paths no matter how deep should use the parameters.",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "For example, if we have an <span class=\"ff1 fs0\"><initParams></span> that looks like this:",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"fl\"<span class=\"fc1\">></span></span>_text_<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"invariants\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"rows\"<span class=\"fc1\">></span></span>10<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"appends\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"df\"<span class=\"fc1\">></span></span>title<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></lst></span>",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "We've defined three paths with this section:",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "/myhandler declared as a direct path.",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "/root/* with a single asterisk to indicate the parameters should apply to paths that are one level deep.",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "/root1/** with double asterisks to indicate the parameters should apply to all nested paths, no matter\nhow deep.",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "When we define the request handlers, the wildcards will work in the following ways:",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "The <span class=\"ff1 fs0\">/myhandler</span> class was named as a path in the <span class=\"ff1 fs0\"><initParams></span> so this will use those parameters.",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "Next we have a request handler named <span class=\"ff1 fs0\">/root/search5</span>:",
    "hierarchy": [
      "Wildcards in initParams"
    ],
    "pageId": 1027
  },
  {
    "content": "We defined a wildcard for nested paths that are one level deeper than <span class=\"ff2 fs1\">/root</span>, so this request handler will use\nthe parameters. This one, however, will not, because <span class=\"ff2 fs1\">/root/search5/test</span> is more than one level deep from\n/root<span class=\"ff1 fs0\">:</span>",
    "hierarchy": [
    ],
    "pageId": 1028
  },
  {
    "content": "If we want to define all levels of nested paths, we should use double asterisks, as in the example path\n/root1/**<span class=\"ff1 fs0\">:</span>",
    "hierarchy": [
    ],
    "pageId": 1028
  },
  {
    "content": "Any path under <span class=\"ff2 fs1\">/root1</span>, whether explicitly defined in a request handler or not, will use the parameters\ndefined in the matching <span class=\"ff2 fs1\">initParams</span> section.",
    "hierarchy": [
    ],
    "pageId": 1028
  },
  {
    "content": "The settings in this section are configured in the <span class=\"ff2 fs1\"><updateHandler></span> element in <span class=\"ff2 fs1\">solrconfig.xml</span> and may\naffect the performance of index updates. These settings affect how updates are done internally.\n<updateHandler><span class=\"ff1 fs0\"> configurations do not affect the higher level configuration of <span class=\"link\">RequestHandlers</span> that</span>\nprocess client update requests.",
    "hierarchy": [
      "UpdateHandlers in SolrConfig"
    ],
    "pageId": 1028
  },
  {
    "content": "Ê ...",
    "hierarchy": [
      "UpdateHandlers in SolrConfig"
    ],
    "pageId": 1028
  },
  {
    "content": "Data sent to Solr is not searchable until it has been <span class=\"ff4\">committed</span> to the index. The reason for this is that in\nsome cases commits can be slow and they should be done in isolation from other possible commit requests\nto avoid overwriting data. So, it's preferable to provide control over when data is committed. Several options\nare available to control the timing of commits.",
    "hierarchy": [
      "UpdateHandlers in SolrConfig",
      "Commits"
    ],
    "pageId": 1028
  },
  {
    "content": "In Solr, a <span class=\"ff2 fs1\">commit</span> is an action which asks Solr to \"commit\" those changes to the Lucene index files. By default\ncommit actions result in a \"hard commit\" of all the Lucene index files to stable storage (disk). When a client\nincludes a <span class=\"ff2 fs1\">commit=true</span> parameter with an update request, this ensures that all index segments affected by\nthe adds & deletes on an update are written to disk as soon as index updates are completed.",
    "hierarchy": [
      "UpdateHandlers in SolrConfig",
      "Commits",
      "commit and softCommit"
    ],
    "pageId": 1028
  },
  {
    "content": "If an additional flag <span class=\"ff2 fs1\">softCommit=true</span> is specified, then Solr performs a 'soft commit', meaning that Solr will\ncommit your changes to the Lucene data structures quickly but not guarantee that the Lucene index files are\nwritten to stable storage. This is an implementation of Near Real Time storage, a feature that boosts\ndocument visibility, since you don't have to wait for background merges and storage (to ZooKeeper, if using\nSolrCloud<span class=\"fc0\">) to finish before moving on to something else. A full commit means that, if a server crashes, Solr</span>\nwill know exactly where your data was stored; a soft commit means that the data is stored, but the location\ninformation isn’t yet stored. The tradeoff is that a soft commit gives you faster visibility because it’s not\nwaiting for background merges to finish.",
    "hierarchy": [
      "UpdateHandlers in SolrConfig",
      "Commits",
      "commit and softCommit"
    ],
    "pageId": 1028
  },
  {
    "content": "For more information about Near Real Time operations, see <span class=\"link\">Near Real Time Searching</span>.",
    "hierarchy": [
    ],
    "pageId": 1029
  },
  {
    "content": "These settings control how often pending updates will be automatically pushed to the index. An alternative\nto <span class=\"code\">autoCommit</span> is to use <span class=\"code\">commitWithin</span>, which can be defined when making the update request to Solr (i.e.,\nwhen pushing documents), or in an update RequestHandler.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "maxDocs\nThe number of updates that have occurred since the last commit.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "maxTime\nThe number of milliseconds since the oldest uncommitted update.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "openSearcher\nWhether to open a new searcher when performing a commit. If this is <span class=\"code\">false</span>, the commit will flush recent\nindex changes to stable storage, but does not cause a new searcher to be opened to make those changes\nvisible. The default is <span class=\"code\">true</span>.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "If either of the <span class=\"code\">maxDocs</span> or <span class=\"code\">maxTime</span> limits are reached, Solr automatically performs a commit operation. If the\nautoCommit<span class=\"ff1 fs0\"> tag is missing, then only explicit commits will update the index. The decision whether to use</span>\nauto-commit or not depends on the needs of your application.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "Determining the best auto-commit settings is a tradeoff between performance and accuracy. Settings that\ncause frequent updates will improve the accuracy of searches because new content will be searchable more\nquickly, but performance may suffer because of the frequent updates. Less frequent updates may improve\nperformance but it will take longer for updates to show up in queries.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "Ê <span class=\"fc3\"><maxDocs></span>10000<span class=\"fc3\"></maxDocs></span>\nÊ <span class=\"fc3\"><maxTime></span>30000<span class=\"fc3\"></maxTime></span>\nÊ <span class=\"fc3\"><openSearcher></span>false<span class=\"fc3\"></openSearcher></span>",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "You can also specify 'soft' autoCommits in the same way that you can specify 'soft' commits, except that\ninstead of using <span class=\"code\">autoCommit</span> you set the <span class=\"code\">autoSoftCommit</span> tag.",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "Ê <span class=\"fc3\"><maxTime></span>60000<span class=\"fc3\"></maxTime></span>",
    "hierarchy": [
      "autoCommit"
    ],
    "pageId": 1029
  },
  {
    "content": "The <span class=\"code\">commitWithin</span> settings allow forcing document commits to happen in a defined time period. This is used\nmost frequently with <span class=\"link\">Near Real Time Searching</span>, and for that reason the default is to perform a soft commit.\nThis does not, however, replicate new documents to slave servers in a master/slave environment. If that's a\nrequirement for your implementation, you can force a hard commit by adding a parameter, as in this\nexample:",
    "hierarchy": [
      "commitWithin"
    ],
    "pageId": 1029
  },
  {
    "content": "Ê <span class=\"fc0\"><softCommit></span>false<span class=\"fc0\"></softCommit></span>",
    "hierarchy": [
    ],
    "pageId": 1030
  },
  {
    "content": "With this configuration, when you call <span class=\"ff1 fs1\">commitWithin</span> as part of your update message, it will automatically\nperform a hard commit every time.",
    "hierarchy": [
    ],
    "pageId": 1030
  },
  {
    "content": "The UpdateHandler section is also where update-related event listeners can be configured. These can be\ntriggered to occur after any commit (<span class=\"ff1 fs1\">event=\"postCommit\"</span>) or only after optimize commands\n(<span class=\"ff1 fs1\">event=\"postOptimize\"</span>).",
    "hierarchy": [
      "Event Listeners"
    ],
    "pageId": 1030
  },
  {
    "content": "Users can write custom update event listener classes in Solr plugins. As of Solr 7.1, <span class=\"ff1 fs1\">RunExecutableListener</span>\nwas removed for security reasons.",
    "hierarchy": [
      "Event Listeners"
    ],
    "pageId": 1030
  },
  {
    "content": "As described in the section <span class=\"link\">RealTime Get</span>, a transaction log is required for that feature. It is configured in the\nupdateHandler<span class=\"ff2 fs0\"> section of </span>solrconfig.xml<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "Realtime Get currently relies on the update log feature, which is enabled by default. It relies on an update\nlog, which is configured in <span class=\"ff1 fs1\">solrconfig.xml</span>, in a section like:",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "Ê <span class=\"fc0\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"dir\"<span class=\"fc0\">></span></span>${solr.ulog.dir:}<span class=\"fc0\"></str></span>",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "Three additional expert-level configuration settings affect indexing performance and how far a replica can\nfall behind on updates before it must enter into full recovery - see the section on <span class=\"link\">write side fault tolerance</span>\nfor more information:",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "numRecordsToKeep\nThe number of update records to keep per log. The default is <span class=\"ff1 fs1\">100</span>.",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "maxNumLogsToKeep\nThe maximum number of logs keep. The default is <span class=\"ff1 fs1\">10</span>.",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "numVersionBuckets\nThe number of buckets used to keep track of max version values when checking for re-ordered updates;\nincrease this value to reduce the cost of synchronizing access to version buckets during high-volume\nindexing, this requires <span class=\"ff1 fs1\">(8 bytes (long) * numVersionBuckets)</span> of heap space per Solr core. The default\nis <span class=\"ff1 fs1\">65536</span>.",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "An example, to be included under <span class=\"ff1 fs1\"><config><updateHandler></span> in <span class=\"ff1 fs1\">solrconfig.xml</span>, employing the above\nadvanced settings:",
    "hierarchy": [
      "Transaction Log"
    ],
    "pageId": 1030
  },
  {
    "content": "Ê <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"dir\"<span class=\"fc0\">></span></span>${solr.ulog.dir:}<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"numRecordsToKeep\"<span class=\"fc0\">></span></span>500<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"maxNumLogsToKeep\"<span class=\"fc0\">></span></span>20<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"numVersionBuckets\"<span class=\"fc0\">></span></span>65536<span class=\"fc0\"></int></span>",
    "hierarchy": [
    ],
    "pageId": 1031
  },
  {
    "content": "The settings in this section affect the way that Solr will process and respond to queries.",
    "hierarchy": [
      "Query Settings in SolrConfig"
    ],
    "pageId": 1031
  },
  {
    "content": "These settings are all configured in child elements of the <span class=\"ff1 fs2\"><query></span> element in <span class=\"ff1 fs2\">solrconfig.xml</span>.",
    "hierarchy": [
      "Query Settings in SolrConfig"
    ],
    "pageId": 1031
  },
  {
    "content": "Ê ...",
    "hierarchy": [
      "Query Settings in SolrConfig"
    ],
    "pageId": 1031
  },
  {
    "content": "Solr caches are associated with a specific instance of an Index Searcher, a specific view of an index that\ndoesn't change during the lifetime of that searcher. As long as that Index Searcher is being used, any items\nin its cache will be valid and available for reuse. Caching in Solr differs from caching in many other\napplications in that cached Solr objects do not expire after a time interval; instead, they remain valid for the\nlifetime of the Index Searcher.",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "When a new searcher is opened, the current searcher continues servicing requests while the new one auto-\nwarms its cache. The new searcher uses the current searcher's cache to pre-populate its own. When the new\nsearcher is ready, it is registered as the current searcher and begins handling all new search requests. The\nold searcher will be closed once it has finished servicing all its requests.",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "In Solr, there are three cache implementations: <span class=\"ff1 fs2\">solr.search.LRUCache</span>, <span class=\"ff1 fs2\">solr.search.FastLRUCache,</span> and\nsolr.search.LFUCache<span class=\"code\">.</span>",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "The acronym LRU stands for Least Recently Used. When an LRU cache fills up, the entry with the oldest last-\naccessed timestamp is evicted to make room for the new entry. The net effect is that entries that are\naccessed frequently tend to stay in the cache, while those that are not accessed frequently tend to drop out\nand will be re-fetched from the index if needed again.",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "The <span class=\"ff1 fs2\">FastLRUCache</span>, which was introduced in Solr 1.4, is designed to be lock-free, so it is well suited for caches\nwhich are hit several times in a request.",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "Both <span class=\"ff1 fs2\">LRUCache</span> and <span class=\"ff1 fs2\">FastLRUCache</span> use an auto-warm count that supports both integers and percentages\nwhich get evaluated relative to the current size of the cache when warming happens.",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "The <span class=\"ff1 fs2\">LFUCache</span> refers to the Least Frequently Used cache. This works in a way similar to the LRU cache, except\nthat when the cache fills up, the entry that has been used the least is evicted.",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "The Statistics page in the Solr Admin UI will display information about the performance of all the active\ncaches. This information can help you fine-tune the sizes of the various caches appropriately for your",
    "hierarchy": [
      "Query Settings in SolrConfig",
      "Caches"
    ],
    "pageId": 1031
  },
  {
    "content": "particular application. When a Searcher terminates, a summary of its cache usage is also written to the log.",
    "hierarchy": [
    ],
    "pageId": 1032
  },
  {
    "content": "Each cache has settings to define its initial size (<span class=\"ff2 fs1\">initialSize</span>), maximum size (<span class=\"ff2 fs1\">size</span>) and number of items to\nuse for during warming (<span class=\"ff2 fs1\">autowarmCount</span>). The LRU and FastLRU cache implementations can take a\npercentage instead of an absolute value for <span class=\"ff2 fs1\">autowarmCount</span>.",
    "hierarchy": [
    ],
    "pageId": 1032
  },
  {
    "content": "FastLRUCache and LFUCache support <span class=\"ff2 fs1\">showItems</span> attribute. This is the number of cache items to display in\nthe stats page for the cache. It is for debugging.",
    "hierarchy": [
    ],
    "pageId": 1032
  },
  {
    "content": "Details of each cache are described below.",
    "hierarchy": [
    ],
    "pageId": 1032
  },
  {
    "content": "This cache is used by <span class=\"ff2 fs1\">SolrIndexSearcher</span> for filters (DocSets) for unordered sets of all documents that\nmatch a query. The numeric attributes control the number of entries in the cache.",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "The most typical way Solr uses the <span class=\"ff2 fs1\">filterCache</span> is to cache results of each <span class=\"ff2 fs1\">fq</span> search parameter, though\nthere are some other cases as well. Subsequent queries using the same parameter filter query result in\ncache hits and rapid returns of results. See <span class=\"link\">Searching</span> for a detailed discussion of the <span class=\"ff2 fs1\">fq</span> parameter. Another\nSolr feature using this cache is the <span class=\"ff2 fs1\">filter(…)</span> syntax in the default Lucene query parser.",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "Solr also uses this cache for faceting when the configuration parameter <span class=\"ff2 fs1\">facet.method</span> is set to <span class=\"ff2 fs1\">fc</span>. For a\ndiscussion of faceting, see <span class=\"link\">Searching</span>.",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "The filter cache uses a specialized cache named as FastLRUCache which is optimized for fast concurrent\naccess with the trade-off that writes and evictions are costlier than the LRUCache used for query result cache\nand document cache.",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "Ê            <span class=\"fc4\">size</span>=<span class=\"fc5\">\"512\"</span>\nÊ            <span class=\"fc4\">initialSize</span>=<span class=\"fc5\">\"512\"</span>\nÊ            <span class=\"fc4\">autowarmCount</span>=<span class=\"fc5\">\"128\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "The FastLRUCache used for filter cache also supports a <span class=\"ff2 fs1\">maxRamMB</span> parameter which restricts the maximum\namount of heap used by this cache. The FastLRUCache only supports evictions by either heap usage or size\nbut not both. Therefore, the <span class=\"ff2 fs1\">size</span> parameter is ignored if <span class=\"ff2 fs1\">maxRamMB</span> is specified.",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "Ê            <span class=\"fc4\">maxRamMB</span>=<span class=\"fc5\">\"1000\"</span>\nÊ            <span class=\"fc4\">autowarmCount</span>=<span class=\"fc5\">\"128\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "filterCache"
    ],
    "pageId": 1032
  },
  {
    "content": "This cache holds the results of previous searches: ordered lists of document IDs (DocList) based on a query,\na sort, and the range of documents requested.",
    "hierarchy": [
      "queryResultCache"
    ],
    "pageId": 1032
  },
  {
    "content": "The <span class=\"ff2 fs1\">queryResultCache</span> has an additional (optional) setting to limit the maximum amount of RAM used\n(<span class=\"ff2 fs1\">maxRamMB</span>). This lets you specify the maximum heap size, in megabytes, used by the contents of this cache.\nWhen the cache grows beyond this size, oldest accessed queries will be evicted until the heap usage of the\ncache decreases below the specified limit. If a <span class=\"ff2 fs1\">size</span> is specified in addition to <span class=\"ff2 fs1\">maxRamMB</span> then both heap usage",
    "hierarchy": [
      "queryResultCache"
    ],
    "pageId": 1032
  },
  {
    "content": "and maximum size limits are respected.",
    "hierarchy": [
    ],
    "pageId": 1033
  },
  {
    "content": "Ê                 <span class=\"fc2\">size</span>=<span class=\"fc3\">\"512\"</span>\nÊ                 <span class=\"fc2\">initialSize</span>=<span class=\"fc3\">\"512\"</span>\nÊ                 <span class=\"fc2\">autowarmCount</span>=<span class=\"fc3\">\"128\"</span>\nÊ                 <span class=\"fc2\">maxRamMB</span>=<span class=\"fc3\">\"1000\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
    ],
    "pageId": 1033
  },
  {
    "content": "This cache holds Lucene Document objects (the stored fields for each document). Since Lucene internal\ndocument IDs are transient, this cache is not auto-warmed. The size for the <span class=\"ff2 fs1\">documentCache</span> should always be\ngreater than <span class=\"ff2 fs1\">max_results</span> times the <span class=\"ff2 fs1\">max_concurrent_queries</span>, to ensure that Solr does not need to refetch\na document during a request. The more fields you store in your documents, the higher the memory usage of\nthis cache will be.",
    "hierarchy": [
      "documentCache"
    ],
    "pageId": 1033
  },
  {
    "content": "Ê              <span class=\"fc2\">size</span>=<span class=\"fc3\">\"512\"</span>\nÊ              <span class=\"fc2\">initialSize</span>=<span class=\"fc3\">\"512\"</span>\nÊ              <span class=\"fc2\">autowarmCount</span>=<span class=\"fc3\">\"0\"<span class=\"fc1\">/></span></span>",
    "hierarchy": [
      "documentCache"
    ],
    "pageId": 1033
  },
  {
    "content": "You can also define named caches for your own application code to use. You can locate and use your cache\nobject by name by calling the <span class=\"ff2 fs1\">SolrIndexSearcher</span> methods <span class=\"ff2 fs1\">getCache()</span>, <span class=\"ff2 fs1\">cacheLookup()</span> and <span class=\"ff2 fs1\">cacheInsert()</span>.",
    "hierarchy": [
      "User Defined Caches"
    ],
    "pageId": 1033
  },
  {
    "content": "Ê                         <span class=\"fc2\">size</span>=<span class=\"fc3\">\"4096\"</span>\nÊ                         <span class=\"fc2\">initialSize</span>=<span class=\"fc3\">\"1024\"</span>\nÊ                         <span class=\"fc2\">autowarmCount</span>=<span class=\"fc3\">\"1024\"</span>\nÊ                         <span class=\"fc2\">regenerator</span>=<span class=\"fc3\">\"org.mycompany.mypackage.MyRegenerator\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
      "User Defined Caches"
    ],
    "pageId": 1033
  },
  {
    "content": "If you want auto-warming of your cache, include a <span class=\"ff2 fs1\">regenerator</span> attribute with the fully qualified name of a\nclass that implements <span class=\"ff2 fs1\">solr.search.CacheRegenerator</span>. You can also use the <span class=\"ff2 fs1\">NoOpRegenerator</span>, which\nsimply repopulates the cache with old items. Define it with the <span class=\"ff2 fs1\">regenerator</span> parameter as`:\nregenerator=\"solr.NoOpRegenerator\"`.",
    "hierarchy": [
      "User Defined Caches"
    ],
    "pageId": 1033
  },
  {
    "content": "This sets the maximum number of clauses allowed in a boolean query. This can affect range or prefix\nqueries that expand to a query with a large number of boolean terms. If this limit is exceeded, an exception\nis thrown.",
    "hierarchy": [
      "Query Sizing and Warming",
      "maxBooleanClauses"
    ],
    "pageId": 1033
  },
  {
    "content": "This option modifies a global property that effects all Solr cores. If multiple <span class=\"code\">solrconfig.xml</span>\nfiles disagree on this property, the value at any point in time will be based on the last Solr\ncore that was initialized.",
    "hierarchy": [
    ],
    "pageId": 1034
  },
  {
    "content": "If this parameter is set to true, then fields that are not directly requested will be loaded lazily as needed. This\ncan boost performance if the most common queries only need a small subset of fields, especially if\ninfrequently accessed fields are large in size.",
    "hierarchy": [
      "enableLazyFieldLoading"
    ],
    "pageId": 1034
  },
  {
    "content": "This parameter configures Solr to use a filter to satisfy a search. If the requested sort does not include\n\"score\", the <span class=\"code\">filterCache</span> will be checked for a filter matching the query. For most situations, this is only\nuseful if the same search is requested often with different sort options and none of them ever use \"score\".",
    "hierarchy": [
      "useFilterForSortedQuery"
    ],
    "pageId": 1034
  },
  {
    "content": "Used with the <span class=\"code\">queryResultCache</span>, this will cache a superset of the requested number of document IDs. For\nexample, if the a search in response to a particular query requests documents 10 through 19, and\nqueryWindowSize<span class=\"ff2 fs1\"> is 50, documents 0 through 49 will be cached.</span>",
    "hierarchy": [
      "queryResultWindowSize"
    ],
    "pageId": 1034
  },
  {
    "content": "This parameter sets the maximum number of documents to cache for any entry in the <span class=\"code\">queryResultCache</span>.",
    "hierarchy": [
      "queryResultMaxDocsCached"
    ],
    "pageId": 1034
  },
  {
    "content": "This setting controls whether search requests for which there is not a currently registered searcher should\nwait for a new searcher to warm up (false) or proceed immediately (true). When set to \"false\", requests will\nblock until the searcher has warmed its caches.",
    "hierarchy": [
      "useColdSearcher"
    ],
    "pageId": 1034
  },
  {
    "content": "This parameter sets the maximum number of searchers that may be warming up in the background at any\ngiven time. Exceeding this limit will raise an error. For read-only slaves, a value of two is reasonable. Masters",
    "hierarchy": [
      "maxWarmingSearchers"
    ],
    "pageId": 1034
  },
  {
    "content": "should probably be set a little higher.",
    "hierarchy": [
    ],
    "pageId": 1035
  },
  {
    "content": "As described in the section on <span class=\"link\">Caches</span>, new Index Searchers are cached. It's possible to use the triggers for\nlisteners to perform query-related tasks. The most common use of this is to define queries to further\n\"warm\" the Index Searchers while they are starting. One benefit of this approach is that field caches are pre-\npopulated for faster sorting.",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "Good query selection is key with this type of listener. It's best to choose your most common and/or heaviest\nqueries and include not just the keywords used, but any other parameters such as sorting or filtering\nrequests.",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "There are two types of events that can trigger a listener. A <span class=\"ff2 fs2\">firstSearcher</span> event occurs when a new\nsearcher is being prepared but there is no current registered searcher to handle requests or to gain auto-\nwarming data from (i.e., on Solr startup). A <span class=\"ff2 fs2\">newSearcher</span> event is fired whenever a new searcher is being\nprepared and there is a current searcher handling requests.",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "The (commented out) examples below can be found in the <span class=\"ff2 fs2\">solrconfig.xml</span> file of the\nsample_techproducts_configs<span class=\"ff1 fs0\"> <span class=\"link\">config set</span>included with Solr, and demonstrate using the</span>\nsolr.QuerySenderListener<span class=\"ff1 fs0\"> class to warm a set of explicit queries:</span>",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "Ê <span class=\"fc1\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"queries\"<span class=\"fc1\">></span></span>\nÊ <span class=\"fc6\"><!--</span>",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "Ê <span class=\"fc1\"></arr></span>",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "Ê <span class=\"fc1\"><arr</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"queries\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><lst><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"q\"<span class=\"fc1\">></span></span>static firstSearcher warming in solrconfig.xml<span class=\"fc1\"></str></lst></span>\nÊ <span class=\"fc1\"></arr></span>",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "The above code comes from a <span class=\"ff5\">sample</span> <span class=\"ff2 fs2\">solrconfig.xml</span>.",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "A key best practice is to modify these defaults before taking your application to production,\nbut please note: while the sample queries are commented out in the section for the\n\"newSearcher\", the sample query is not commented out for the \"firstSearcher\" event.",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "There is no point in auto-warming your Index Searcher with the query string \"static\nfirstSearcher warming in solrconfig.xml\" if that is not relevant to your search application.",
    "hierarchy": [
      "Query-Related Listeners"
    ],
    "pageId": 1035
  },
  {
    "content": "The <span class=\"code\">requestDispatcher</span> element of <span class=\"code\">solrconfig.xml</span> controls the way the Solr HTTP <span class=\"code\">RequestDispatcher</span>\nimplementation responds to requests.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig"
    ],
    "pageId": 1036
  },
  {
    "content": "Included are parameters for defining if it should handle <span class=\"code\">/select</span> urls (for Solr 1.1 compatibility), if it will\nsupport remote streaming, the maximum size of file uploads and how it will respond to HTTP cache headers\nin requests.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig"
    ],
    "pageId": 1036
  },
  {
    "content": "handleSelect<span class=\"ff2 fs1\"> is for legacy back-compatibility; those new to Solr do not need to change</span>\nanything about the way this is configured by default.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "handleSelect Element"
    ],
    "pageId": 1036
  },
  {
    "content": "The first configurable item is the <span class=\"code\">handleSelect</span> attribute on the <span class=\"code\"><requestDispatcher></span> element itself. This\nattribute can be set to one of two values, either \"true\" or \"false\". It governs how Solr responds to requests\nsuch as <span class=\"code\">/select?qt=XXX</span>. The default value \"false\" will ignore requests to <span class=\"code\">/select</span> if a requestHandler is not\nexplicitly registered with the name <span class=\"code\">/select</span>. A value of \"true\" will route query requests to the parser defined\nwith the <span class=\"code\">qt</span> value.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "handleSelect Element"
    ],
    "pageId": 1036
  },
  {
    "content": "In recent versions of Solr, a <span class=\"code\">/select</span> requestHandler is defined by default, so a value of \"false\" will work fine.\nSee the section <span class=\"link\">RequestHandlers and SearchComponents in SolrConfig</span> for more information.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "handleSelect Element"
    ],
    "pageId": 1036
  },
  {
    "content": "Ê ...",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "handleSelect Element"
    ],
    "pageId": 1036
  },
  {
    "content": "The <span class=\"code\"><requestParsers></span> sub-element controls values related to parsing requests. This is an empty XML\nelement that doesn't have any content, only attributes.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "requestParsers Element"
    ],
    "pageId": 1036
  },
  {
    "content": "enableRemoteStreaming\nThis attribute controls whether remote streaming of content is allowed. If omitted or set to <span class=\"code\">false</span> (the\ndefault), streaming will not be allowed. Setting it to <span class=\"code\">true</span> lets you specify the location of content to be\nstreamed using <span class=\"code\">stream.file</span> or <span class=\"code\">stream.url</span> parameters.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "requestParsers Element"
    ],
    "pageId": 1036
  },
  {
    "content": "enableStreamBody\nThis attribute controls whether streaming content from the HTTP parameter <span class=\"code\">stream.body</span> is allowed. If\nomitted or set to <span class=\"code\">false</span> (the default), streaming will not be allowed. Setting it to <span class=\"code\">true</span> lets you pass data in\nthe <span class=\"code\">stream.body</span> parameter.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "requestParsers Element"
    ],
    "pageId": 1036
  },
  {
    "content": "If you enable remote streaming, be sure that you have authentication enabled. Otherwise, someone\ncould potentially gain access to your content by accessing arbitrary URLs. It's also a good idea to place\nSolr behind a firewall to prevent it from being accessed from untrusted clients.",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "requestParsers Element"
    ],
    "pageId": 1036
  },
  {
    "content": "multipartUploadLimitInKB\nThis attribute sets an upper limit in kilobytes on the size of a document that may be submitted in a multi-\npart HTTP POST request. The value specified is multiplied by 1024 to determine the size in bytes. A value",
    "hierarchy": [
      "RequestDispatcher in SolrConfig",
      "requestParsers Element"
    ],
    "pageId": 1036
  },
  {
    "content": "of <span class=\"ff2 fs1\">-1</span> means MAX_INT, which is also the system default if omitted.",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "formdataUploadLimitInKB\nThis attribute sets a limit in kilobytes on the size of form data (<span class=\"ff2 fs1\">application/x-www-form-urlencoded</span>)\nsubmitted in a HTTP POST request, which can be used to pass request parameters that will not fit in a\nURL. A value of <span class=\"ff2 fs1\">-1</span> means MAX_INT, which is also the system default if omitted.",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "addHttpRequestToContext\nThis attribute can be used to indicate that the original <span class=\"ff2 fs1\">HttpServletRequest</span> object should be included in\nthe context map of the <span class=\"ff2 fs1\">SolrQueryRequest</span> using the key <span class=\"ff2 fs1\">httpRequest</span>. This <span class=\"ff2 fs1\">HttpServletRequest</span> is not\nused by any Solr component, but may be useful when developing custom plugins.",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "Ê               <span class=\"fc2\">enableStreamBody</span>=<span class=\"fc3\">\"false\"</span>\nÊ               <span class=\"fc2\">multipartUploadLimitInKB</span>=<span class=\"fc3\">\"2048\"</span>\nÊ               <span class=\"fc2\">formdataUploadLimitInKB</span>=<span class=\"fc3\">\"2048\"</span>\nÊ               <span class=\"fc2\">addHttpRequestToContext</span>=<span class=\"fc3\">\"false\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "The below command is an example of how to enable RemoteStreaming and BodyStreaming through the\nConfig API<span class=\"fc0\">:</span>",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "curl -H 'Content-type:application/json' -d '{\"set-property\":\n{\"requestDispatcher.requestParsers.enableRemoteStreaming\": true}, \"set-property\":\n{\"requestDispatcher.requestParsers.enableStreamBody\": true}}'\nhttp://localhost:8983/solr/gettingstarted/config",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "curl -H 'Content-type:application/json' -d '{\"set-property\":\n{\"requestDispatcher.requestParsers.enableRemoteStreaming\": true}, \"set-\nproperty\":{\"requestDispatcher.requestParsers.enableStreamBody\": true}}'\nhttp://localhost:8983/api/cores/gettingstarted/config",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "curl -H 'Content-type:application/json' -d '{\"set-property\":\n{\"requestDispatcher.requestParsers.enableRemoteStreaming\": true}, \"set-\nproperty\":{\"requestDispatcher.requestParsers.enableStreamBody\": true}}'\nhttp://localhost:8983/api/collections/gettingstarted/config",
    "hierarchy": [
    ],
    "pageId": 1037
  },
  {
    "content": "The <span class=\"code\"><httpCaching></span> element controls HTTP cache control headers. Do not confuse these settings with Solr's\ninternal cache configuration. This element controls caching of HTTP responses as defined by the W3C HTTP\nspecifications.",
    "hierarchy": [
      "httpCaching Element"
    ],
    "pageId": 1038
  },
  {
    "content": "This element allows for three attributes and one sub-element. The attributes of the <span class=\"code\"><httpCaching></span> element\ncontrol whether a 304 response to a GET request is allowed, and if so, what sort of response it should be.\nWhen an HTTP client application issues a GET, it may optionally specify that a 304 response is acceptable if\nthe resource has not been modified since the last time it was fetched.",
    "hierarchy": [
      "httpCaching Element"
    ],
    "pageId": 1038
  },
  {
    "content": "never304\nIf present with the value <span class=\"code\">true</span>, then a GET request will never respond with a 304 code, even if the\nrequested resource has not been modified. When this attribute is set to true, the next two attributes are\nignored. Setting this to true is handy for development, as the 304 response can be confusing when\ntinkering with Solr responses through a web browser or other client that supports cache headers.",
    "hierarchy": [
      "httpCaching Element"
    ],
    "pageId": 1038
  },
  {
    "content": "lastModFrom\nThis attribute may be set to either <span class=\"code\">openTime</span> (the default) or <span class=\"code\">dirLastMod</span>. The value <span class=\"code\">openTime</span> indicates\nthat last modification times, as compared to the If-Modified-Since header sent by the client, should be\ncalculated relative to the time the Searcher started. Use <span class=\"code\">dirLastMod</span> if you want times to exactly\ncorrespond to when the index was last updated on disk.",
    "hierarchy": [
      "httpCaching Element"
    ],
    "pageId": 1038
  },
  {
    "content": "etagSeed\nThis value of this attribute is sent as the value of the <span class=\"code\">ETag</span> header. Changing this value can be helpful to\nforce clients to re-fetch content even when the indexes have not changed---for example, when you've\nmade some changes to the configuration.",
    "hierarchy": [
      "httpCaching Element"
    ],
    "pageId": 1038
  },
  {
    "content": "Ê            <span class=\"fc3\">lastModFrom</span>=<span class=\"fc4\">\"openTime\"</span>\nÊ            <span class=\"fc3\">etagSeed</span>=<span class=\"fc4\">\"Solr\"<span class=\"fc2\">></span></span>\nÊ <span class=\"fc2\"><cacheControl></span>max-age=30, public<span class=\"fc2\"></cacheControl></span>",
    "hierarchy": [
      "httpCaching Element"
    ],
    "pageId": 1038
  },
  {
    "content": "In addition to these attributes, <span class=\"code\"><httpCaching></span> accepts one child element: <span class=\"code\"><cacheControl></span>. The content of\nthis element will be sent as the value of the Cache-Control header on HTTP responses. This header is used to\nmodify the default caching behavior of the requesting client. The possible values for the Cache-Control\nheader are defined by the HTTP 1.1 specification in <span class=\"link\">Section 14.9</span>.",
    "hierarchy": [
      "httpCaching Element",
      "cacheControl Element"
    ],
    "pageId": 1038
  },
  {
    "content": "Setting the max-age field controls how long a client may re-use a cached response before requesting it\nagain from the server. This time interval should be set according to how often you update your index and\nwhether or not it is acceptable for your application to use content that is somewhat out of date. Setting\nmust-revalidate<span class=\"ff2 fs1\"> will tell the client to validate with the server that its cached copy is still good before re-</span>\nusing it. This will ensure that the most timely result is used, while avoiding a second fetch of the content if it\nisn't needed, at the cost of a request to the server to do the check.",
    "hierarchy": [
      "httpCaching Element",
      "cacheControl Element"
    ],
    "pageId": 1038
  },
  {
    "content": "Every update request received by Solr is run through a chain of plugins known as Update Request\nProcessors, or <span class=\"code\">URPs</span>.",
    "hierarchy": [
      "Update Request Processors"
    ],
    "pageId": 1039
  },
  {
    "content": "This can be useful, for example, to add a field to the document being indexed; to change the value of a\nparticular field; or to drop an update if the incoming document doesn't fulfill certain criteria. In fact, a\nsurprisingly large number of features in Solr are implemented as Update Processors and therefore it is\nnecessary to understand how such plugins work and where are they configured.",
    "hierarchy": [
      "Update Request Processors"
    ],
    "pageId": 1039
  },
  {
    "content": "An Update Request Processor is created as part of a <span class=\"link\">chain</span> of one or more update processors. Solr creates a\ndefault update request processor chain comprising of a few update request processors which enable\nessential Solr features. This default chain is used to process every update request unless a user chooses to\nconfigure and specify a different custom update request processor chain.",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "The easiest way to describe an Update Request Processor is to look at the Javadocs of the abstract class\nUpdateRequestProcessor<span class=\"fc1\">. Every UpdateRequestProcessor must have a corresponding factory class which</span>\nextends <span class=\"link\">UpdateRequestProcessorFactory</span>. This factory class is used by Solr to create a new instance of this\nplugin. Such a design provides two benefits:",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "1.An update request processor need not be thread safe because it is used by one and only one request\nthread and destroyed once the request is complete.",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "2.The factory class can accept configuration parameters and maintain any state that may be required\nbetween requests. The factory class must be thread-safe.",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "Every update request processor chain is constructed during loading of a Solr core and cached until the core\nis unloaded. Each <span class=\"ff4 fs3\">UpdateRequestProcessorFactory</span> specified in the chain is also instantiated and initialized\nwith configuration that may have been specified in <span class=\"ff4 fs3\">solrconfig.xml</span>.",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "When an update request is received by Solr, it looks up the update chain to be used for this request. A new\ninstance of each UpdateRequestProcessor specified in the chain is created using the corresponding factory.\nThe update request is parsed into corresponding <span class=\"link\">UpdateCommand</span> objects which are run through the chain.\nEach UpdateRequestProcessor instance is responsible for invoking the next plugin in the chain. It can\nchoose to short circuit the chain by not invoking the next processor and even abort further processing by\nthrowing an exception.",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "A single update request may contain a batch of multiple new documents or deletes and\ntherefore the corresponding processXXX methods of an UpdateRequestProcessor will be\ninvoked multiple times for every individual update. However, it is guaranteed that a single\nthread will serially invoke these methods.",
    "hierarchy": [
      "Update Request Processors",
      "URP Anatomy and Lifecycle"
    ],
    "pageId": 1039
  },
  {
    "content": "Update request processors chains can be created by either creating the whole chain directly in\nsolrconfig.xml<span class=\"ff2 fs1\"> or by creating individual update processors in </span>solrconfig.xml<span class=\"ff2 fs1\"> and then dynamically</span>\ncreating the chain at run-time by specifying all processors via request parameters.",
    "hierarchy": [
      "Update Request Processors",
      "Update Request Processor Configuration"
    ],
    "pageId": 1039
  },
  {
    "content": "However, before we understand how to configure update processor chains, we must learn about the default\nupdate processor chain because it provides essential features which are needed in most custom request\nprocessor chains as well.",
    "hierarchy": [
    ],
    "pageId": 1040
  },
  {
    "content": "In case no update processor chains are configured in <span class=\"code\">solrconfig.xml</span>, Solr will automatically create a\ndefault update processor chain which will be used for all update requests. This default update processor\nchain consists of the following processors (in order):",
    "hierarchy": [
      "Default Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "1.LogUpdateProcessorFactory - Tracks the commands processed during this request and logs them\n2.DistributedUpdateProcessorFactory - Responsible for distributing update requests to the right node\ne.g., routing requests to the leader of the right shard and distributing updates from the leader to each\nreplica. This processor is activated only in SolrCloud mode.",
    "hierarchy": [
      "Default Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "3.RunUpdateProcessorFactory - Executes the update using internal Solr APIs.",
    "hierarchy": [
      "Default Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "Each of these perform an essential function and as such any custom chain usually contain all of these\nprocessors. The <span class=\"code\">RunUpdateProcessorFactory</span> is usually the last update processor in any custom chain.",
    "hierarchy": [
      "Default Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "The following example demonstrates how a custom chain can be configured inside <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Custom Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "Ê <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.processor.SignatureUpdateProcessorFactory\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><bool</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"enabled\"<span class=\"fc3\">></span></span>true<span class=\"fc3\"></bool></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"signatureField\"<span class=\"fc3\">></span></span>id<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><bool</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"overwriteDupes\"<span class=\"fc3\">></span></span>false<span class=\"fc3\"></bool></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"fields\"<span class=\"fc3\">></span></span>name,features,cat<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"signatureClass\"<span class=\"fc3\">></span></span>solr.processor.Lookup3Signature<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></processor></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.LogUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>\nÊ <span class=\"fc3\"><processor</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc3\">/></span>",
    "hierarchy": [
      "Custom Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "In the above example, a new update processor chain named \"dedupe\" is created with\nSignatureUpdateProcessorFactory<span class=\"ff1 fs0\">, </span>LogUpdateProcessorFactory<span class=\"ff1 fs0\"> and </span>RunUpdateProcessorFactory<span class=\"ff1 fs0\"> in the</span>\nchain. The <span class=\"code\">SignatureUpdateProcessorFactory</span> is further configured with different parameters such as\n\"signatureField\", \"overwriteDupes\", etc. This chain is an example of how Solr can be configured to perform\nde-duplication of documents by calculating a signature using the value of name, features, cat fields which is\nthen used as the \"id\" field. As you may have noticed, this chain does not specify the\nDistributedUpdateProcessorFactory<span class=\"ff1 fs0\">. Because this processor is critical for Solr to operate properly, Solr</span>\nwill automatically insert <span class=\"code\">DistributedUpdateProcessorFactory</span> in any chain that does not include it just prior\nto the <span class=\"code\">RunUpdateProcessorFactory</span>.",
    "hierarchy": [
      "Custom Update Request Processor Chain"
    ],
    "pageId": 1040
  },
  {
    "content": "Do not forget to add <span class=\"ff4 fs2\">RunUpdateProcessorFactory</span> at the end of any chains you define in\nsolrconfig.xml<span class=\"code\">. Otherwise update requests processed by that chain will not actually affect</span>\nthe indexed data.",
    "hierarchy": [
    ],
    "pageId": 1041
  },
  {
    "content": "Update request processors can also be configured independent of a chain in <span class=\"ff4 fs2\">solrconfig.xml</span>.",
    "hierarchy": [
      "Configuring Individual Processors as Top-Level Plugins"
    ],
    "pageId": 1041
  },
  {
    "content": "Ê <span class=\"fc4\"><bool</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"enabled\"<span class=\"fc4\">></span></span>true<span class=\"fc4\"></bool></span>\nÊ <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"signatureField\"<span class=\"fc4\">></span></span>id<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><bool</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"overwriteDupes\"<span class=\"fc4\">></span></span>false<span class=\"fc4\"></bool></span>\nÊ <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"fields\"<span class=\"fc4\">></span></span>name,features,cat<span class=\"fc4\"></str></span>\nÊ <span class=\"fc4\"><str</span> <span class=\"fc5\">name</span>=<span class=\"fc6\">\"signatureClass\"<span class=\"fc4\">></span></span>solr.processor.Lookup3Signature<span class=\"fc4\"></str></span>",
    "hierarchy": [
      "Configuring Individual Processors as Top-Level Plugins"
    ],
    "pageId": 1041
  },
  {
    "content": "In this case, an instance of <span class=\"ff4 fs2\">SignatureUpdateProcessorFactory</span> is configured with the name \"signature\" and\na <span class=\"ff4 fs2\">RemoveBlankFieldUpdateProcessorFactory</span> is defined with the name \"remove_blanks\". Once the above\nhas been specified in <span class=\"ff4 fs2\">solrconfig.xml</span>, we can be refer to them in update request processor chains in\nsolrconfig.xml<span class=\"code\"> as follows:</span>",
    "hierarchy": [
      "Configuring Individual Processors as Top-Level Plugins"
    ],
    "pageId": 1041
  },
  {
    "content": "Ê <span class=\"fc4\"><processor</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc4\">/></span>",
    "hierarchy": [
      "Configuring Individual Processors as Top-Level Plugins"
    ],
    "pageId": 1041
  },
  {
    "content": "In a single node, stand-alone Solr, each update is run through all the update processors in a chain exactly\nonce. But the behavior of update request processors in SolrCloud deserves special consideration.",
    "hierarchy": [
      "Update Processors in SolrCloud"
    ],
    "pageId": 1041
  },
  {
    "content": "A critical SolrCloud functionality is the routing and distributing of requests. For update requests this routing\nis implemented by the <span class=\"ff4 fs2\">DistributedUpdateRequestProcessor</span>, and this processor is given a special status by\nSolr due to its important function.",
    "hierarchy": [
      "Update Processors in SolrCloud"
    ],
    "pageId": 1041
  },
  {
    "content": "In SolrCloud mode, all processors in the chain <span class=\"ff2\">before</span> the <span class=\"ff4 fs2\">DistributedUpdateProcessor</span> are run on the first\nnode that receives an update from the client, regardless of this node's status as a leader or replica. The\nDistributedUpdateProcessor<span class=\"code\"> then forwards the update to the appropriate shard leader for the update (or</span>\nto multiple leaders in the event of an update that affects multiple documents, such as a delete by query or\ncommit). The shard leader uses a transaction log to apply <span class=\"fc7\">Atomic Updates & Optimistic Concurrency</span> and\nthen forwards the update to all of the shard replicas. The leader and each replica run all of the processors in\nthe chain that are listed <span class=\"ff2\">after</span> the <span class=\"ff4 fs2\">DistributedUpdateProcessor</span>.",
    "hierarchy": [
      "Update Processors in SolrCloud"
    ],
    "pageId": 1041
  },
  {
    "content": "For example, consider the \"dedupe\" chain which we saw in a section above. Assume that a 3-node SolrCloud",
    "hierarchy": [
      "Update Processors in SolrCloud"
    ],
    "pageId": 1041
  },
  {
    "content": "cluster exists where node A hosts the leader of shard1, node B hosts the leader of shard2 and node C hosts\nthe replica of shard2. Assume that an update request is sent to node A which forwards the update to node B\n(because the update belongs to shard2) which then distributes the update to its replica node C. Let's see\nwhat happens at each node:",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "Node A<span class=\"ff1\">: Runs the update through the <span class=\"code\">SignatureUpdateProcessor</span> (which computes the signature and</span>\nputs it in the \"id\" field), then <span class=\"code\">LogUpdateProcessor</span> and then <span class=\"code\">DistributedUpdateProcessor</span>. This\nprocessor determines that the update actually belongs to node B and is forwarded to node B. The\nupdate is not processed further. This is required because the next processor, <span class=\"code\">RunUpdateProcessor</span>, will\nexecute the update against the local shard1 index which would lead to duplicate data on shard1 and\nshard2.",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "Node B<span class=\"ff1\">: Receives the update and sees that it was forwarded by another node. The update is directly sent</span>\nto <span class=\"code\">DistributedUpdateProcessor</span> because it has already been through the <span class=\"code\">SignatureUpdateProcessor</span>\non node A and doing the same signature computation again would be redundant. The\nDistributedUpdateProcessor<span class=\"ff1 fs0\"> determines that the update indeed belongs to this node, distributes it to</span>\nits replica on Node C and then forwards the update further in the chain to <span class=\"code\">RunUpdateProcessor</span>.",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "Node C<span class=\"ff1\">: Receives the update and sees that it was distributed by its leader. The update is directly sent to</span>\nDistributedUpdateProcessor<span class=\"ff1 fs0\"> which performs some consistency checks and forwards the update</span>\nfurther in the chain to <span class=\"code\">RunUpdateProcessor</span>.",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "In summary:",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "1.All processors before <span class=\"code\">DistributedUpdateProcessor</span> are only run on the first node that receives an\nupdate request whether it be a forwarding node (e.g., node A in the above example) or a leader (e.g.,\nnode B). We call these \"pre-processors\" or just \"processors\".",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "2.All processors after <span class=\"code\">DistributedUpdateProcessor</span> run only on the leader and the replica nodes. They are\nnot executed on forwarding nodes. Such processors are called \"post-processors\".",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "In the previous section, we saw that the <span class=\"code\">updateRequestProcessorChain</span> was configured with\nprocessor=\"remove_blanks, signature\"<span class=\"ff1 fs0\">. This means that such processors are of the #1 kind and are run</span>\nonly on the forwarding nodes. Similarly, we can configure them as the #2 kind by specifying with the\nattribute \"post-processor\" as follows:",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "Ê <span class=\"fc2\"><processor</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.RunUpdateProcessorFactory\"</span> <span class=\"fc2\">/></span>",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "However executing a processor only on the forwarding nodes is a great way of distributing an expensive\ncomputation such as de-duplication across a SolrCloud cluster by sending requests randomly via a load\nbalancer. Otherwise the expensive computation is repeated on both the leader and replica nodes.",
    "hierarchy": [
    ],
    "pageId": 1042
  },
  {
    "content": "While a replica is in <span class=\"link\">recovery</span>, inbound update requests are buffered to the transaction log.\nAfter recovery has completed successfully, those buffered update requests are replayed. As\nof this writing, however, custom update chain post-processors are never invoked for\nbuffered update requests. See <span class=\"link\">SOLR-8030</span>. To work around this problem until SOLR-8030\nhas been fixed, <span class=\"ff4\">avoid specifying post-processors in custom update chains</span>.",
    "hierarchy": [
    ],
    "pageId": 1043
  },
  {
    "content": "If the <span class=\"ff5 fs2\">AtomicUpdateProcessorFactory</span> is in the update chain before the <span class=\"ff5 fs2\">DistributedUpdateProcessor</span>, the\nincoming document to the chain will be a partial document.",
    "hierarchy": [
      "Atomic Update Processor Factory"
    ],
    "pageId": 1043
  },
  {
    "content": "Because <span class=\"ff5 fs2\">DistributedUpdateProcessor</span> is responsible for processing <span class=\"link\">Atomic Updates</span> into full documents on\nthe leader node, this means that pre-processors which are executed only on the forwarding nodes can only\noperate on the partial document. If you have a processor which must process a full document then the only\nchoice is to specify it as a post-processor.",
    "hierarchy": [
      "Atomic Update Processor Factory"
    ],
    "pageId": 1043
  },
  {
    "content": "The <span class=\"ff5 fs2\">update.chain</span> parameter can be used in any update request to choose a custom chain which has been\nconfigured in <span class=\"ff5 fs2\">solrconfig.xml</span>. For example, in order to choose the \"dedupe\" chain described in a previous\nsection, one can issue the following request:",
    "hierarchy": [
      "Using Custom Chains",
      "update.chain Request Parameter"
    ],
    "pageId": 1043
  },
  {
    "content": "curl \"http://localhost:8983/solr/gettingstarted/update/json?update.chain=dedupe&commit=true\" -H\n'Content-type: application/json' -d '\n[\nÊ {\nÊ   \"name\" : \"The Lightning Thief\",\nÊ   \"features\" : \"This is just a test\",\nÊ   \"cat\" : [\"book\",\"hardcover\"]\nÊ },\nÊ {\nÊ   \"name\" : \"The Lightning Thief\",\nÊ   \"features\" : \"This is just a test\",\nÊ   \"cat\" : [\"book\",\"hardcover\"]\nÊ }\n]'",
    "hierarchy": [
      "Using Custom Chains",
      "update.chain Request Parameter"
    ],
    "pageId": 1043
  },
  {
    "content": "The above should dedupe the two identical documents and index only one of them.",
    "hierarchy": [
      "Using Custom Chains",
      "update.chain Request Parameter"
    ],
    "pageId": 1043
  },
  {
    "content": "We can dynamically construct a custom update request processor chain using the <span class=\"ff5 fs2\">processor</span> and <span class=\"ff5 fs2\">post-</span>\nprocessor<span class=\"code\"> request parameters. Multiple processors can be specified as a comma-separated value for these</span>\ntwo parameters. For example:",
    "hierarchy": [
      "Using Custom Chains",
      "Processor & Post-Processor Request Parameters"
    ],
    "pageId": 1043
  },
  {
    "content": "curl\n\"http://localhost:8983/solr/gettingstarted/update/json?processor=remove_blanks,signature&commit=t\nrue\" -H 'Content-type: application/json' -d '\n[\nÊ {\nÊ   \"name\" : \"The Lightning Thief\",\nÊ   \"features\" : \"This is just a test\",\nÊ   \"cat\" : [\"book\",\"hardcover\"]\nÊ },\nÊ {\nÊ   \"name\" : \"The Lightning Thief\",\nÊ   \"features\" : \"This is just a test\",\nÊ   \"cat\" : [\"book\",\"hardcover\"]",
    "hierarchy": [
    ],
    "pageId": 1044
  },
  {
    "content": "Ê }\n]'",
    "hierarchy": [
    ],
    "pageId": 1044
  },
  {
    "content": "curl \"http://localhost:8983/solr/gettingstarted/update/json?processor=remove_blanks&post-\nprocessor=signature&commit=true\" -H 'Content-type: application/json' -d '\n[\nÊ {\nÊ   \"name\" : \"The Lightning Thief\",\nÊ   \"features\" : \"This is just a test\",\nÊ   \"cat\" : [\"book\",\"hardcover\"]\nÊ },\nÊ {\nÊ   \"name\" : \"The Lightning Thief\",\nÊ   \"features\" : \"This is just a test\",\nÊ   \"cat\" : [\"book\",\"hardcover\"]\nÊ }\n]'",
    "hierarchy": [
    ],
    "pageId": 1044
  },
  {
    "content": "In the first example, Solr will dynamically create a chain which has \"signature\" and \"remove_blanks\" as pre-\nprocessors to be executed only on the forwarding node where as in the second example, \"remove_blanks\"\nwill be executed as a pre-processor and \"signature\" will be executed on the leader and replicas as a post-\nprocessor.",
    "hierarchy": [
    ],
    "pageId": 1044
  },
  {
    "content": "We can also specify a custom chain to be used by default for all requests sent to specific update handlers\ninstead of specifying the names in request parameters for each request.",
    "hierarchy": [
      "Configuring a Custom Chain as a Default"
    ],
    "pageId": 1044
  },
  {
    "content": "This can be done by adding either \"update.chain\" or \"processor\" and \"post-processor\" as default parameter\nfor a given path which can be done either via <span class=\"link\">initParams</span> or by adding them in a <span class=\"link\">\"defaults\" section</span> which is\nsupported by all request handlers.",
    "hierarchy": [
      "Configuring a Custom Chain as a Default"
    ],
    "pageId": 1044
  },
  {
    "content": "The following is an <span class=\"ff2 fs1\">initParam</span> defined in the <span class=\"link\">schemaless configuration</span> which applies a custom update chain",
    "hierarchy": [
      "Configuring a Custom Chain as a Default"
    ],
    "pageId": 1044
  },
  {
    "content": "to all request handlers starting with \"/update/\".",
    "hierarchy": [
    ],
    "pageId": 1045
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"update.chain\"<span class=\"fc2\">></span></span>add-unknown-fields-to-the-schema<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1045
  },
  {
    "content": "Alternately, one can achieve a similar effect using the \"defaults\" as shown in the example below:",
    "hierarchy": [
    ],
    "pageId": 1045
  },
  {
    "content": "Ê <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"defaults\"<span class=\"fc2\">></span></span>\nÊ   <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"update.chain\"<span class=\"fc2\">></span></span>add-unknown-fields-to-the-schema<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1045
  },
  {
    "content": "What follows are brief descriptions of the currently available update request processors. An\nUpdateRequestProcessorFactory<span class=\"ff1 fs0\"> can be integrated into an update chain in </span>solrconfig.xml<span class=\"ff1 fs0\"> as necessary.</span>\nYou are strongly urged to examine the Javadocs for these classes; these descriptions are abridged snippets\ntaken for the most part from the Javadocs.",
    "hierarchy": [
      "Update Request Processor Factories"
    ],
    "pageId": 1045
  },
  {
    "content": "AddSchemaFieldsUpdateProcessorFactory\nThis processor will dynamically add fields to the schema if an input document contains one or more fields\nthat don't match any field or dynamic field in the schema.",
    "hierarchy": [
      "Update Request Processor Factories",
      "General Use UpdateProcessorFactories"
    ],
    "pageId": 1045
  },
  {
    "content": "AtomicUpdateProcessorFactory\nThis processor will convert conventional field-value documents to atomic update documents. This\nprocessor can be used at runtime (without defining it in <span class=\"code\">solrconfig.xml</span>), see the section\nAtomicUpdateProcessorFactory<span class=\"fc0\"> below.</span>",
    "hierarchy": [
      "Update Request Processor Factories",
      "General Use UpdateProcessorFactories"
    ],
    "pageId": 1045
  },
  {
    "content": "ClassificationUpdateProcessorFactory\nThis processor uses Lucene's classification module to provide simple document classification. See\nhttps://wiki.apache.org/solr/SolrClassification<span class=\"fc0\"> for more details on how to use this processor.</span>",
    "hierarchy": [
      "Update Request Processor Factories",
      "General Use UpdateProcessorFactories"
    ],
    "pageId": 1045
  },
  {
    "content": "CloneFieldUpdateProcessorFactory\nClones the values found in any matching <span class=\"ff2\">source</span> field into the configured <span class=\"ff2\">dest</span> field.",
    "hierarchy": [
      "Update Request Processor Factories",
      "General Use UpdateProcessorFactories"
    ],
    "pageId": 1045
  },
  {
    "content": "DefaultValueUpdateProcessorFactory\nA simple processor that adds a default value to any document which does not already have a value in\nfieldName.",
    "hierarchy": [
      "Update Request Processor Factories",
      "General Use UpdateProcessorFactories"
    ],
    "pageId": 1045
  },
  {
    "content": "DocBasedVersionConstraintsProcessorFactory\nThis Factory generates an UpdateProcessor that helps to enforce version constraints on documents\nbased on per-document version numbers using a configured name of a versionField.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "DocExpirationUpdateProcessorFactory\nUpdate Processor Factory for managing automatic \"expiration\" of documents.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "FieldNameMutatingUpdateProcessorFactory\nModifies field names by replacing all matches to the configured <span class=\"code\">pattern</span> with the configured\nreplacement<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "IgnoreCommitOptimizeUpdateProcessorFactory\nAllows you to ignore commit and/or optimize requests from client applications when running in\nSolrCloud mode, for more information, see: Shards and Indexing Data in SolrCloud",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "CloneFieldUpdateProcessorFactory\nClones the values found in any matching <span class=\"ff4\">source</span> field into the configured <span class=\"ff4\">dest</span> field.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "RegexpBoostProcessorFactory\nA processor which will match content of \"inputField\" against regular expressions found in\n\"boostFilename\", and if it matches will return the corresponding boost value from the file and output this\nto \"boostField\" as a double value.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "SignatureUpdateProcessorFactory\nUses a defined set of fields to generate a hash \"signature\" for the document. Useful for only indexing\none copy of \"similar\" documents.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "StatelessScriptUpdateProcessorFactory\nAn update request processor factory that enables the use of update processors implemented as scripts.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "TemplateUpdateProcessorFactory\nAllows adding new fields to documents based on a template pattern. This update processor can also be\nused at runtime (without defining it in <span class=\"code\">solrconfig.xml</span>), see the section\nTemplateUpdateProcessorFactory<span class=\"fc1\"> below.</span>",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "TimestampUpdateProcessorFactory\nAn update processor that adds a newly generated date value of \"NOW\" to any document being added\nthat does not already have a value in the specified field.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "URLClassifyProcessorFactory\nUpdate processor which examines a URL and outputs to various other fields with characteristics of that\nURL, including length, number of path levels, whether it is a top level URL (levels==0), whether it looks like\na landing/index page, a canonical representation of the URL (e.g., stripping index.html), the domain and\npath parts of the URL, etc.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "UUIDUpdateProcessorFactory\nAn update processor that adds a newly generated UUID value to any document being added that does\nnot already have a value in the specified field. This processor can also be used at runtime (without\ndefining it in <span class=\"code\">solrconfig.xml</span>), see the section <span class=\"fc0\">UUIDUpdateProcessorFactory</span> below.",
    "hierarchy": [
    ],
    "pageId": 1046
  },
  {
    "content": "These factories all provide functionality to <span class=\"code\">modify</span> fields in a document as they're being indexed. When using\nany of these factories, please consult the <span class=\"link\">FieldMutatingUpdateProcessorFactory javadocs</span> for details on the\ncommon options they all support for configuring which fields are modified.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "ConcatFieldUpdateProcessorFactory\nConcatenates multiple values for fields matching the specified conditions using a configurable delimiter.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "CountFieldValuesUpdateProcessorFactory\nReplaces any list of values for a field matching the specified conditions with the the count of the number\nof values for that field.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "FieldLengthUpdateProcessorFactory\nReplaces any CharSequence values found in fields matching the specified conditions with the lengths of\nthose CharSequences (as an Integer).",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "FirstFieldValueUpdateProcessorFactory\nKeeps only the first value of fields matching the specified conditions.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "HTMLStripFieldUpdateProcessorFactory\nStrips all HTML Markup in any CharSequence values found in fields matching the specified conditions.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "IgnoreFieldUpdateProcessorFactory\nIgnores and removes fields matching the specified conditions from any document being added to the\nindex.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "LastFieldValueUpdateProcessorFactory\nKeeps only the last value of fields matching the specified conditions.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "MaxFieldValueUpdateProcessorFactory\nAn update processor that keeps only the the maximum value from any selected fields where multiple\nvalues are found.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "MinFieldValueUpdateProcessorFactory\nAn update processor that keeps only the the minimum value from any selected fields where multiple\nvalues are found.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "ParseBooleanFieldUpdateProcessorFactory\nAttempts to mutate selected fields that have only CharSequence-typed values into Boolean values.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "ParseDateFieldUpdateProcessorFactory\nAttempts to mutate selected fields that have only CharSequence-typed values into Solr date values.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "ParseNumericFieldUpdateProcessorFactory<span class=\"fc1\"> derived classes</span>\nParseDoubleFieldUpdateProcessorFactory\nAttempts to mutate selected fields that have only CharSequence-typed values into Double values.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "ParseFloatFieldUpdateProcessorFactory\nAttempts to mutate selected fields that have only CharSequence-typed values into Float values.",
    "hierarchy": [
      "FieldMutatingUpdateProcessorFactory Derived Factories"
    ],
    "pageId": 1047
  },
  {
    "content": "ParseIntFieldUpdateProcessorFactory\nAttempts to mutate selected fields that have only CharSequence-typed values into Integer values.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "ParseLongFieldUpdateProcessorFactory\nAttempts to mutate selected fields that have only CharSequence-typed values into Long values.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "PreAnalyzedUpdateProcessorFactory\nAn update processor that parses configured fields of any document being added using <span class=\"code\">PreAnalyzedField</span>\nwith the configured format parser.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "RegexReplaceProcessorFactory\nAn updated processor that applies a configured regex to any CharSequence values found in the selected\nfields, and replaces any matches with the configured replacement string.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "RemoveBlankFieldUpdateProcessorFactory\nRemoves any values found which are CharSequence with a length of 0 (i.e., empty strings).",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "TrimFieldUpdateProcessorFactory\nTrims leading and trailing whitespace from any CharSequence values found in fields matching the\nspecified conditions.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "TruncateFieldUpdateProcessorFactory\nTruncates any CharSequence values found in fields matching the specified conditions to a maximum\ncharacter length.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "UniqFieldsUpdateProcessorFactory\nRemoves duplicate values found in fields matching the specified conditions.",
    "hierarchy": [
    ],
    "pageId": 1048
  },
  {
    "content": "These processors are included in Solr releases as \"contribs\", and require additional jars loaded at runtime.\nSee the README files associated with each contrib for details:",
    "hierarchy": [
      "Update Processor Factories That Can Be Loaded as Plugins"
    ],
    "pageId": 1048
  },
  {
    "content": "The <span class=\"ff4 fs1\">langid</span> contrib provides\nLangDetectLanguageIdentifierUpdateProcessorFactory\nIdentifies the language of a set of input fields using <span class=\"fc0\">http://code.google.com/p/language-detection</span>.",
    "hierarchy": [
      "Update Processor Factories That Can Be Loaded as Plugins"
    ],
    "pageId": 1048
  },
  {
    "content": "TikaLanguageIdentifierUpdateProcessorFactory\nIdentifies the language of a set of input fields using Tika's LanguageIdentifier.",
    "hierarchy": [
      "Update Processor Factories That Can Be Loaded as Plugins"
    ],
    "pageId": 1048
  },
  {
    "content": "The <span class=\"ff4 fs1\">uima</span> contrib provides\nUIMAUpdateRequestProcessorFactory\nUpdate document(s) to be indexed with UIMA extracted information.",
    "hierarchy": [
      "Update Processor Factories That Can Be Loaded as Plugins"
    ],
    "pageId": 1048
  },
  {
    "content": "The <span class=\"ff4 fs1\">analysis-extras</span> contrib provides\nOpenNLPExtractNamedEntitiesUpdateProcessorFactory\nUpdate document(s) to be indexed with named entities extracted using an OpenNLP NER model.",
    "hierarchy": [
      "Update Processor Factories That Can Be Loaded as Plugins"
    ],
    "pageId": 1048
  },
  {
    "content": "These are listed for completeness, but are part of the Solr infrastructure, particularly SolrCloud. Other than\ninsuring you do <span class=\"ff2\">not</span> remove them when modifying the update request handlers (or any copies you make),\nyou will rarely, if ever, need to change these.",
    "hierarchy": [
      "Update Processor Factories You Should <span class=\"ff2\">Not</span> Modify or Remove"
    ],
    "pageId": 1049
  },
  {
    "content": "DistributedUpdateProcessorFactory\nUsed to distribute updates to all necessary nodes.",
    "hierarchy": [
      "Update Processor Factories You Should <span class=\"ff2\">Not</span> Modify or Remove"
    ],
    "pageId": 1049
  },
  {
    "content": "NoOpDistributingUpdateProcessorFactory\nAn alternative No-Op implementation of <span class=\"ff4 fs1\">DistributingUpdateProcessorFactory</span> that always returns\nnull. Designed for experts who want to bypass distributed updates and use their own custom update\nlogic.",
    "hierarchy": [
      "Update Processor Factories You Should <span class=\"ff2\">Not</span> Modify or Remove"
    ],
    "pageId": 1049
  },
  {
    "content": "LogUpdateProcessorFactory\nA logging processor. This keeps track of all commands that have passed through the chain and prints\nthem on finish().",
    "hierarchy": [
      "Update Processor Factories You Should <span class=\"ff2\">Not</span> Modify or Remove"
    ],
    "pageId": 1049
  },
  {
    "content": "RunUpdateProcessorFactory\nExecutes the update commands using the underlying UpdateHandler. Almost all processor chains should\nend with an instance of <span class=\"ff4 fs1\">RunUpdateProcessorFactory</span> unless the user is explicitly executing the update\ncommands in an alternative custom <span class=\"ff4 fs1\">UpdateRequestProcessorFactory</span>.",
    "hierarchy": [
      "Update Processor Factories You Should <span class=\"ff2\">Not</span> Modify or Remove"
    ],
    "pageId": 1049
  },
  {
    "content": "These Update processors do not need any configuration in <span class=\"ff4 fs1\">solrconfig.xml</span>. They are automatically\ninitialized when their name is added to the <span class=\"ff4 fs1\">processor</span> parameter sent with an update request. Multiple\nprocessors can be used by appending multiple processor names separated by commas.",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime"
    ],
    "pageId": 1049
  },
  {
    "content": "The <span class=\"ff4 fs1\">AtomicUpdateProcessorFactory</span> is used to atomically update documents.",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "Use the parameter <span class=\"ff4 fs1\">processor=atomic</span> to invoke it. Use it to convert your normal <span class=\"ff4 fs1\">update</span> operations to\natomic update operations. This is particularly useful when you use endpoints such as <span class=\"ff4 fs1\">/update/csv</span> or\n/update/json/docs<span class=\"code\"> which does not otherwise have a syntax for atomic operations.</span>",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "For example:",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "processor=atomic&atomic.field1=add&atomic.field2=set&atomic.field3=inc&atomic.field4=remove&atomi\nc.field4=remove",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "The above parameters convert a normal <span class=\"ff4 fs1\">update</span> operation in the following ways:",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "field1 to an atomic <span class=\"ff4 fs1\">add</span> operation",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "field2 to an atomic <span class=\"ff4 fs1\">set</span> operation",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "field3 to an atomic <span class=\"ff4 fs1\">inc</span> operation",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "field4 to an atomic <span class=\"ff4 fs1\">remove</span> operation",
    "hierarchy": [
      "Update Processors That Can Be Used at Runtime",
      "AtomicUpdateProcessorFactory"
    ],
    "pageId": 1049
  },
  {
    "content": "The <span class=\"code\">TemplateUpdateProcessorFactory</span> can be used to add new fields to documents based on a template\npattern.",
    "hierarchy": [
      "TemplateUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "Use the parameter <span class=\"code\">processor=template</span> to use it. The template parameter <span class=\"code\">template.field</span> (multivalued)\ndefines the field to add and the pattern. Templates may contain placeholders which refer to other fields in\nthe document. You can have multiple <span class=\"code\">Template.field</span> parameters in a single request.",
    "hierarchy": [
      "TemplateUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "For example:",
    "hierarchy": [
      "TemplateUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "processor=template&template.field=fullName:Mr. {firstName} {lastName}",
    "hierarchy": [
      "TemplateUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "The above example would add a new field to the document called <span class=\"code\">fullName</span>. The fields <span class=\"code\">firstName and</span>\nlastName<span class=\"ff2 fs1\"> are supplied from the document fields. If either of them is missing, that part is replaced with an</span>\nempty string. If those fields are multi-valued, only the first value is used.",
    "hierarchy": [
      "TemplateUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "The <span class=\"code\">UUIDUpdateProcessorFactory</span> is used to add generated UUIDs to documents.",
    "hierarchy": [
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "Use the parameter <span class=\"code\">processor=uuid</span> to invoke it. You will also need to specify the field where the UUID will\nbe added with the <span class=\"code\">uuid.fieldName</span> parameter.",
    "hierarchy": [
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "For example:",
    "hierarchy": [
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "processor=uuid&uuid.fieldName=somefield_name",
    "hierarchy": [
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "A <span class=\"code\">codecFactory</span> can be specified in <span class=\"code\">solrconfig.xml</span> to determine which Lucene <span class=\"code\">Codec</span> is used when writing\nthe index to disk.",
    "hierarchy": [
      "Codec Factory",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "If not specified, Lucene's default codec is implicitly used.",
    "hierarchy": [
      "Codec Factory",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "There are two alternatives to Lucene's default codec.",
    "hierarchy": [
      "Codec Factory",
      "Alternatives to the Default Codec",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "The <span class=\"code\">solr.SchemaCodecFactory</span> supports 2 key features:",
    "hierarchy": [
      "Codec Factory",
      "Alternatives to the Default Codec",
      "solr.SchemaCodecFactory",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "Schema based per-fieldtype configuration for <span class=\"code\">docValuesFormat</span> and <span class=\"code\">postingsFormat</span> - see the <span class=\"link\">Field Type</span>\nProperties<span class=\"fc1\"> section for more details.</span>",
    "hierarchy": [
      "Codec Factory",
      "Alternatives to the Default Codec",
      "solr.SchemaCodecFactory",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "A <span class=\"code\">compressionMode</span> option:",
    "hierarchy": [
      "Codec Factory",
      "Alternatives to the Default Codec",
      "solr.SchemaCodecFactory",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "◦BEST_SPEED<span class=\"ff2 fs1\"> (default) is optimized for search speed performance</span>\n◦BEST_COMPRESSION<span class=\"ff2 fs1\"> is optimized for disk space usage</span>",
    "hierarchy": [
      "Codec Factory",
      "Alternatives to the Default Codec",
      "solr.SchemaCodecFactory",
      "UUIDUpdateProcessorFactory"
    ],
    "pageId": 1050
  },
  {
    "content": "Example:",
    "hierarchy": [
    ],
    "pageId": 1051
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"compressionMode\"<span class=\"fc1\">></span></span>BEST_COMPRESSION<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1051
  },
  {
    "content": "This factory for Lucene's <span class=\"ff2 fs1\">SimpleTextCodecFactory</span> produces a plain text human-readable index format.",
    "hierarchy": [
      "solr.SimpleTextCodecFactory"
    ],
    "pageId": 1051
  },
  {
    "content": "FOR RECREATIONAL USE ONLY<span class=\"ff1\">. This codec should never be used in production.</span>\nSimpleTextCodec<span class=\"ff1 fs0\"> is relatively slow and takes up a large amount of disk space. Its use</span>\nshould be limited to educational and debugging purposes.",
    "hierarchy": [
      "solr.SimpleTextCodecFactory"
    ],
    "pageId": 1051
  },
  {
    "content": "Example:",
    "hierarchy": [
      "solr.SimpleTextCodecFactory"
    ],
    "pageId": 1051
  },
  {
    "content": "In Solr, the term <span class=\"code\">core</span> is used to refer to a single index and associated transaction log and configuration files\n(including the <span class=\"ff4 fs2\">solrconfig.xml</span> and Schema files, among others). Your Solr installation can have multiple\ncores if needed, which allows you to index data with different structures in the same server, and maintain\nmore control over how your data is presented to different audiences. In SolrCloud mode you will be more\nfamiliar with the term <span class=\"code\">collection.</span> Behind the scenes a collection consists of one or more cores.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "Cores can be created using <span class=\"ff4 fs2\">bin/solr</span> script or as part of SolrCloud collection creation using the APIs. Core-\nspecific properties (such as the directories to use for the indexes or configuration files, the core name, and\nother options) are defined in a <span class=\"ff4 fs2\">core.properties</span> file. Any <span class=\"ff4 fs2\">core.properties</span> file in any directory of your Solr\ninstallation (or in a directory under where <span class=\"ff4 fs2\">solr_home</span> is defined) will be found by Solr and the defined\nproperties will be used for the core named in the file.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "In standalone mode, <span class=\"ff4 fs2\">solr.xml</span> must reside in <span class=\"ff4 fs2\">solr_home</span>. In SolrCloud mode, <span class=\"ff4 fs2\">solr.xml</span> will be loaded from\nZooKeeper if it exists, with fallback to <span class=\"ff4 fs2\">solr_home</span>.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "In older versions of Solr, cores had to be predefined as <span class=\"ff4 fs2\"><core></span> tags in <span class=\"ff4 fs2\">solr.xml</span> in order for\nSolr to know about them. Now, however, Solr supports automatic discovery of cores and\nthey no longer need to be explicitly defined. The recommended way is to dynamically\ncreate cores/collections using the APIs.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "The following sections describe these options in more detail.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "<span class=\"link\">Format of solr.xml</span>: Details on how to define <span class=\"ff4 fs2\">solr.xml</span>, including the acceptable parameters for the\nsolr.xml<span class=\"ff2 fs1\"> file</span>",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "<span class=\"link\">Defining core.properties</span>: Details on placement of <span class=\"ff4 fs2\">core.properties</span> and available property options.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "<span class=\"link\">CoreAdmin API</span>: Tools and commands for core administration using a REST API.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "<span class=\"link\">Config Sets</span>: How to use configsets to avoid duplicating effort when defining a new core.",
    "hierarchy": [
      "Solr Cores and solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "The <span class=\"ff4 fs2\">solr.xml</span> file defines some global configuration options that apply to all or many cores.",
    "hierarchy": [
      "Solr Cores and solr.xml",
      "Format of solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "This section will describe the default <span class=\"ff4 fs2\">solr.xml</span> file included with Solr and how to modify it for your needs.\nFor details on how to configure <span class=\"ff4 fs2\">core.properties</span>, see the section <span class=\"link\">Defining core.properties</span>.",
    "hierarchy": [
      "Solr Cores and solr.xml",
      "Format of solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "You can find <span class=\"ff4 fs2\">solr.xml</span> in your <span class=\"ff4 fs2\">$SOLR_HOME</span> directory (usually <span class=\"ff4 fs2\">server/solr</span>) in standalone mode or in\nZooKeeper when using SolrCloud. The default <span class=\"ff4 fs2\">solr.xml</span> file looks like this:",
    "hierarchy": [
      "Solr Cores and solr.xml",
      "Format of solr.xml",
      "Defining solr.xml"
    ],
    "pageId": 1052
  },
  {
    "content": "Ê <span class=\"fc0\"><solrcloud></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"host\"<span class=\"fc0\">></span></span>${host:}<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"hostPort\"<span class=\"fc0\">></span></span>${jetty.port:8983}<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"hostContext\"<span class=\"fc0\">></span></span>${hostContext:solr}<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"zkClientTimeout\"<span class=\"fc0\">></span></span>${zkClientTimeout:15000}<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"genericCoreNodeNames\"<span class=\"fc0\">></span></span>${genericCoreNodeNames:true}<span class=\"fc0\"></bool></span>\nÊ <span class=\"fc0\"></solrcloud></span>",
    "hierarchy": [
    ],
    "pageId": 1053
  },
  {
    "content": "Ê <span class=\"fc0\"><shardHandlerFactory</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"shardHandlerFactory\"</span>\nÊ   <span class=\"fc2\">class</span>=<span class=\"fc3\">\"HttpShardHandlerFactory\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"socketTimeout\"<span class=\"fc0\">></span></span>${socketTimeout:0}<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"connTimeout\"<span class=\"fc0\">></span></span>${connTimeout:0}<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></shardHandlerFactory></span>",
    "hierarchy": [
    ],
    "pageId": 1053
  },
  {
    "content": "As you can see, the discovery Solr configuration is \"SolrCloud friendly\". However, the presence of the\n<solrcloud><span class=\"ff2 fs0\"> element does <span class=\"code\">not</span> mean that the Solr instance is running in SolrCloud mode. Unless the</span>\n-DzkHost<span class=\"ff2 fs0\"> or </span>-DzkRun<span class=\"ff2 fs0\"> are specified at startup time, this section is ignored.</span>",
    "hierarchy": [
    ],
    "pageId": 1053
  },
  {
    "content": "There are no attributes that you can specify in the <span class=\"ff1 fs1\"><solr></span> tag, which is the root element of <span class=\"ff1 fs1\">solr.xml</span>. The\ntables below list the child nodes of each XML element in <span class=\"ff1 fs1\">solr.xml</span>.",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "adminHandler\nThis attribute does not need to be set.",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "If used, this attribute should be set to the FQN (Fully qualified name) of a class that inherits from\nCoreAdminHandler. For example, <span class=\"ff1 fs1\"><str name=\"adminHandler\">com.myorg.MyAdminHandler</str></span> would\nconfigure the custom admin handler (MyAdminHandler) to handle admin requests.",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "If this attribute isn't set, Solr uses the default admin handler,\norg.apache.solr.handler.admin.CoreAdminHandler<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "collectionsHandler\nAs above, for custom CollectionsHandler implementations.",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "infoHandler\nAs above, for custom InfoHandler implementations.",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "coreLoadThreads\nSpecifies the number of threads that will be assigned to load cores in parallel.",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "coreRootDirectory\nThe root of the core discovery tree, defaults to <span class=\"ff1 fs1\">$SOLR_HOME</span> (by default, <span class=\"ff1 fs1\">server/solr</span>).",
    "hierarchy": [
      "Solr.xml Parameters",
      "The <solr> Element"
    ],
    "pageId": 1053
  },
  {
    "content": "managementPath\nCurrently non-operational.",
    "hierarchy": [
    ],
    "pageId": 1054
  },
  {
    "content": "sharedLib\nSpecifies the path to a common library directory that will be shared across all cores. Any JAR files in this\ndirectory will be added to the search path for Solr plugins. This path is relative to <span class=\"ff1 fs0\">$SOLR_HOME</span>. Custom\nhandlers may be placed in this directory.",
    "hierarchy": [
    ],
    "pageId": 1054
  },
  {
    "content": "shareSchema\nThis attribute, when set to <span class=\"ff1 fs0\">true</span>, ensures that the multiple cores pointing to the same Schema resource\nfile will be referring to the same IndexSchema Object. Sharing the IndexSchema Object makes loading\nthe core faster. If you use this feature, make sure that no core-specific property is used in your Schema\nfile.",
    "hierarchy": [
    ],
    "pageId": 1054
  },
  {
    "content": "transientCacheSize\nDefines how many cores with <span class=\"ff1 fs0\">transient=true</span> that can be loaded before swapping the least recently\nused core for a new core.",
    "hierarchy": [
    ],
    "pageId": 1054
  },
  {
    "content": "configSetBaseDir\nThe directory under which configSets for Solr cores can be found. Defaults to <span class=\"ff1 fs0\">$SOLR_HOME/configsets</span>.",
    "hierarchy": [
    ],
    "pageId": 1054
  },
  {
    "content": "This element defines several parameters that relate so SolrCloud. This section is ignored unless theSolr\ninstance is started with either <span class=\"ff1 fs0\">-DzkRun</span> or <span class=\"ff1 fs0\">-DzkHost</span>",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "distribUpdateConnTimeout\nUsed to set the underlying <span class=\"ff1 fs0\">connTimeout</span> for intra-cluster updates.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "distribUpdateSoTimeout\nUsed to set the underlying <span class=\"ff1 fs0\">socketTimeout</span> for intra-cluster updates.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "host\nThe hostname Solr uses to access cores.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "hostContext\nThe url context path.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "hostPort\nThe port Solr uses to access cores.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "In the default <span class=\"ff1 fs0\">solr.xml</span> file, this is set to <span class=\"ff1 fs0\">${jetty.port:8983}</span>, which will use the Solr port defined in\nJetty, and otherwise fall back to 8983.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "leaderVoteWait\nWhen SolrCloud is starting up, how long each Solr node will wait for all known replicas for that shard to\nbe found before assuming that any nodes that haven't reported are down.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "leaderConflictResolveWait\nWhen trying to elect a leader for a shard, this property sets the maximum time a replica will wait to see\nconflicting state information to be resolved; temporary conflicts in state information can occur when\ndoing rolling restarts, especially when the node hosting the Overseer is restarted.",
    "hierarchy": [
      "The <solrcloud> Element"
    ],
    "pageId": 1054
  },
  {
    "content": "Typically, the default value of <span class=\"ff2 fs1\">180000</span> (ms) is sufficient for conflicts to be resolved; you may need to\nincrease this value if you have hundreds or thousands of small collections in SolrCloud.",
    "hierarchy": [
    ],
    "pageId": 1055
  },
  {
    "content": "zkClientTimeout\nA timeout for connection to a ZooKeeper server. It is used with SolrCloud.",
    "hierarchy": [
    ],
    "pageId": 1055
  },
  {
    "content": "zkHost\nIn SolrCloud mode, the URL of the ZooKeeper host that Solr should use for cluster state information.",
    "hierarchy": [
    ],
    "pageId": 1055
  },
  {
    "content": "genericCoreNodeNames\nIf <span class=\"ff2 fs1\">TRUE</span>, node names are not based on the address of the node, but on a generic name that identifies the\ncore. When a different machine takes over serving that core things will be much easier to understand.",
    "hierarchy": [
    ],
    "pageId": 1055
  },
  {
    "content": "zkCredentialsProvider<span class=\"code\"> & </span>zkACLProvider\nOptional parameters that can be specified if you are using <span class=\"link\">ZooKeeper Access Control</span>.",
    "hierarchy": [
    ],
    "pageId": 1055
  },
  {
    "content": "class\nThe class to use for logging. The corresponding JAR file must be available to Solr, perhaps through a\n<lib><span class=\"ff1 fs0\"> directive in </span>solrconfig.xml<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "The <logging> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "enabled\ntrue/false - whether to enable logging or not.",
    "hierarchy": [
      "The <logging> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "size\nThe number of log events that are buffered.",
    "hierarchy": [
      "The <logging> Element",
      "The <logging><watcher> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "threshold\nThe logging level above which your particular logging implementation will record. For example when\nusing log4j one might specify DEBUG, WARN, INFO, etc.",
    "hierarchy": [
      "The <logging> Element",
      "The <logging><watcher> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "Custom shard handlers can be defined in <span class=\"ff2 fs1\">solr.xml</span> if you wish to create a custom shard handler.",
    "hierarchy": [
      "The <shardHandlerFactory> Element",
      "The <logging><watcher> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "Since this is a custom shard handler, sub-elements are specific to the implementation. The default and only\nshard handler provided by Solr is the <span class=\"ff2 fs1\">HttpShardHandlerFactory</span> in which case, the following sub-elements\ncan be specified:",
    "hierarchy": [
      "The <shardHandlerFactory> Element",
      "The <logging><watcher> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "socketTimeout\nThe read timeout for intra-cluster query and administrative requests. The default is the same as the\ndistribUpdateSoTimeout<span class=\"ff1 fs0\"> specified in the </span><solrcloud><span class=\"ff1 fs0\"> section.</span>",
    "hierarchy": [
      "The <shardHandlerFactory> Element",
      "The <logging><watcher> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "connTimeout\nThe connection timeout for intra-cluster query and administrative requests. Defaults to the\ndistribUpdateConnTimeout<span class=\"ff1 fs0\"> specified in the </span><solrcloud><span class=\"ff1 fs0\"> section.</span>",
    "hierarchy": [
      "The <shardHandlerFactory> Element",
      "The <logging><watcher> Element"
    ],
    "pageId": 1055
  },
  {
    "content": "urlScheme\nThe URL scheme to be used in distributed search.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "maxConnectionsPerHost\nMaximum connections allowed per host. Defaults to <span class=\"ff1 fs0\">20</span>.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "maxConnections\nMaximum total connections allowed. Defaults to <span class=\"ff1 fs0\">10000</span>.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "corePoolSize\nThe initial core size of the threadpool servicing requests. Default is <span class=\"ff1 fs0\">0</span>.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "maximumPoolSize\nThe maximum size of the threadpool servicing requests. Default is unlimited.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "maxThreadIdleTime\nThe amount of time in seconds that idle threads persist for in the queue, before being killed. Default is <span class=\"ff1 fs0\">5</span>\nseconds.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "sizeOfQueue\nIf the threadpool uses a backing queue, what is its maximum size to use direct handoff. Default is to use a\nSynchronousQueue.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "fairnessPolicy\nA boolean to configure if the threadpool favors fairness over throughput. Default is false to favor\nthroughput.",
    "hierarchy": [
    ],
    "pageId": 1056
  },
  {
    "content": "The <span class=\"ff1 fs0\"><metrics></span> element in <span class=\"ff1 fs0\">solr.xml</span> allows you to customize the metrics reported by Solr. You can define\nsystem properties that should not be returned, or define custom suppliers and reporters.",
    "hierarchy": [
      "The <metrics> Element"
    ],
    "pageId": 1056
  },
  {
    "content": "In a default <span class=\"ff1 fs0\">solr.xml</span> you will not see any <span class=\"ff1 fs0\"><metrics></span> configuration. If you would like to customize the\nmetrics for your installation, see the section <span class=\"link\">Metrics Configuration</span>.",
    "hierarchy": [
      "The <metrics> Element"
    ],
    "pageId": 1056
  },
  {
    "content": "Solr supports variable substitution of JVM system property values in <span class=\"ff1 fs0\">solr.xml</span>, which allows runtime\nspecification of various configuration options. The syntax is <span class=\"ff1 fs0\">${propertyname[:option default value]}</span>.\nThis allows defining a default that can be overridden when Solr is launched. If a default value is not\nspecified, then the property must be specified at runtime or the <span class=\"ff1 fs0\">solr.xml</span> file will generate an error when\nparsed.",
    "hierarchy": [
      "Substituting JVM System Properties in solr.xml"
    ],
    "pageId": 1056
  },
  {
    "content": "Any JVM system properties usually specified using the <span class=\"ff1 fs0\">-D</span> flag when starting the JVM, can be used as\nvariables in the <span class=\"ff1 fs0\">solr.xml</span> file.",
    "hierarchy": [
      "Substituting JVM System Properties in solr.xml"
    ],
    "pageId": 1056
  },
  {
    "content": "For example, in the <span class=\"ff1 fs0\">solr.xml</span> file shown below, the <span class=\"ff1 fs0\">socketTimeout</span> and <span class=\"ff1 fs0\">connTimeout</span> values are each set to\n\"0\". However, if you start Solr using <span class=\"ff1 fs0\">bin/solr -DsocketTimeout=1000</span>, the <span class=\"ff1 fs0\">socketTimeout</span> option of the\nHttpShardHandlerFactory<span class=\"ff2 fs1\"> to be overridden using a value of 1000ms, while the </span>connTimeout<span class=\"ff2 fs1\"> option will</span>\ncontinue to use the default property value of \"0\".",
    "hierarchy": [
      "Substituting JVM System Properties in solr.xml"
    ],
    "pageId": 1056
  },
  {
    "content": "Ê <span class=\"fc0\"><shardHandlerFactory</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"shardHandlerFactory\"</span>\nÊ                      <span class=\"fc2\">class</span>=<span class=\"fc3\">\"HttpShardHandlerFactory\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"socketTimeout\"<span class=\"fc0\">></span></span>${socketTimeout:0}<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"connTimeout\"<span class=\"fc0\">></span></span>${connTimeout:0}<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></shardHandlerFactory></span>",
    "hierarchy": [
    ],
    "pageId": 1057
  },
  {
    "content": "Core discovery means that creating a core is as simple as a <span class=\"ff1 fs2\">core.properties</span> file located on disk.",
    "hierarchy": [
      "Defining core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "The <span class=\"ff1 fs2\">core.properties</span> file is a simple Java Properties file where each line is just a key=value pair, e.g.,\nname=core1<span class=\"code\">. Notice that no quotes are required.</span>",
    "hierarchy": [
      "Defining core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "A minimal <span class=\"ff1 fs2\">core.properties</span> file looks like the example below. However, it can also be empty, see\ninformation on placement of <span class=\"ff1 fs2\">core.properties</span> below.",
    "hierarchy": [
      "Defining core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "name=my_core_name",
    "hierarchy": [
      "Defining core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "Solr cores are configured by placing a file named <span class=\"ff1 fs2\">core.properties</span> in a sub-directory under <span class=\"ff1 fs2\">solr.home</span>.\nThere are no a-priori limits to the depth of the tree, nor are there limits to the number of cores that can be\ndefined. Cores may be anywhere in the tree with the exception that cores may <span class=\"ff4\">not</span> be defined under an\nexisting core. That is, the following is not allowed:",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "./cores/core1/core.properties\n./cores/core1/coremore/core5/core.properties",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "In this example, the enumeration will stop at \"core1\".",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "The following is legal:",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "./cores/somecores/core1/core.properties\n./cores/somecores/core2/core.properties\n./cores/othercores/core3/core.properties\n./cores/extracores/deepertree/core4/core.properties",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "It is possible to segment Solr into multiple cores, each with its own configuration and indices. Cores may be\ndedicated to a single application or to very different ones, but all are administered through a common\nadministration interface. You can create new Solr cores on the fly, shutdown cores, even replace one\nrunning core with another, all without ever stopping or restarting Solr.",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "Your <span class=\"ff1 fs2\">core.properties</span> file can be empty if necessary. Suppose <span class=\"ff1 fs2\">core.properties</span> is located in\n./cores/core1<span class=\"code\"> (relative to </span>solr_home<span class=\"code\">) but is empty. In this case, the core name is assumed to be \"core1\".</span>",
    "hierarchy": [
      "Defining core.properties",
      "Placement of core.properties"
    ],
    "pageId": 1057
  },
  {
    "content": "The instanceDir will be the folder containing <span class=\"ff2 fs1\">core.properties</span> (i.e., <span class=\"ff2 fs1\">./cores/core1</span>). The dataDir will be\n../cores/core1/data<span class=\"ff1 fs0\">, etc.</span>",
    "hierarchy": [
    ],
    "pageId": 1058
  },
  {
    "content": "You can run Solr without configuring any cores.",
    "hierarchy": [
    ],
    "pageId": 1058
  },
  {
    "content": "The minimal <span class=\"ff2 fs1\">core.properties</span> file is an empty file, in which case all of the properties are defaulted\nappropriately.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "Java properties files allow the hash (<span class=\"ff2 fs1\">#</span>) or bang (<span class=\"ff2 fs1\">!</span>) characters to specify comment-to-end-of-line.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "The following properties are available:",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "name\nThe name of the SolrCore. You'll use this name to reference the SolrCore when running commands with\nthe CoreAdminHandler.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "config\nThe configuration file name for a given core. The default is <span class=\"ff2 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "schema\nThe schema file name for a given core. The default is <span class=\"ff2 fs1\">schema.xml</span> but please note that if you are using a\n\"managed schema\" (the default behavior) then any value for this property which does not match the\neffective <span class=\"ff2 fs1\">managedSchemaResourceName</span> will be read once, backed up, and converted for managed schema\nuse. See <span class=\"link\">Schema Factory Definition in SolrConfig</span> for more details.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "dataDir\nThe core's data directory (where indexes are stored) as either an absolute pathname, or a path relative to\nthe value of <span class=\"ff2 fs1\">instanceDir</span>. This is <span class=\"ff2 fs1\">data</span> by default.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "configSet\nThe name of a defined configset, if desired, to use to configure the core (see the section <span class=\"link\">Config Sets</span> for\nmore details).",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "properties\nThe name of the properties file for this core. The value can be an absolute pathname or a path relative to\nthe value of <span class=\"ff2 fs1\">instanceDir</span>.",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "transient\nIf <span class=\"ff4\">true</span>, the core can be unloaded if Solr reaches the <span class=\"ff2 fs1\">transientCacheSize</span>. The default if not specified is\nfalse<span class=\"ff1\">. Cores are unloaded in order of least recently used first. <span class=\"ff5\">Setting this to <span class=\"ff6\">true</span> is not recommended in</span></span>",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "loadOnStartup\nIf <span class=\"ff4\">true</span>, the default if it is not specified, the core will loaded when Solr starts. <span class=\"ff5\">Setting this to <span class=\"ff6\">false</span> is not</span>",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "coreNodeName\nUsed only in SolrCloud, this is a unique identifier for the node hosting this replica. By default a\ncoreNodeName<span class=\"ff1 fs0\"> is generated automatically, but setting this attribute explicitly allows you to manually</span>",
    "hierarchy": [
      "Defining core.properties Files"
    ],
    "pageId": 1058
  },
  {
    "content": "assign a new core to replace an existing replica. For example, this can be useful when replacing a\nmachine that has had a hardware failure by restoring from backups on a new machine with a new\nhostname or port.",
    "hierarchy": [
    ],
    "pageId": 1059
  },
  {
    "content": "ulogDir\nThe absolute or relative directory for the update log for this core (SolrCloud).",
    "hierarchy": [
    ],
    "pageId": 1059
  },
  {
    "content": "shard\nThe shard to assign this core to (SolrCloud).",
    "hierarchy": [
    ],
    "pageId": 1059
  },
  {
    "content": "collection\nThe name of the collection this core is part of (SolrCloud).",
    "hierarchy": [
    ],
    "pageId": 1059
  },
  {
    "content": "roles\nFuture parameter for SolrCloud or a way for users to mark nodes for their own use.",
    "hierarchy": [
    ],
    "pageId": 1059
  },
  {
    "content": "Additional user-defined properties may be specified for use as variables. For more information on how to\ndefine local properties, see the section <span class=\"link\">Substituting Properties in Solr Config Files</span>.",
    "hierarchy": [
    ],
    "pageId": 1059
  },
  {
    "content": "The Core Admin API is primarily used under the covers by the <span class=\"link\">Collections API</span> when running a <span class=\"link\">SolrCloud</span>\ncluster.",
    "hierarchy": [
      "CoreAdmin API"
    ],
    "pageId": 1059
  },
  {
    "content": "SolrCloud users should not typically use the CoreAdmin API directly, but the API may be useful for users of\nsingle-node or master/slave Solr installations for core maintenance operations.",
    "hierarchy": [
      "CoreAdmin API"
    ],
    "pageId": 1059
  },
  {
    "content": "The CoreAdmin API is implemented by the CoreAdminHandler, which is a special purpose <span class=\"link\">request handler</span>\nthat is used to manage Solr cores. Unlike other request handlers, the CoreAdminHandler is not attached to a\nsingle core. Instead, there is a single instance of the CoreAdminHandler in each Solr node that manages all\nthe cores running in that node and is accessible at the <span class=\"ff2 fs1\">/solr/admin/cores</span> path.",
    "hierarchy": [
      "CoreAdmin API"
    ],
    "pageId": 1059
  },
  {
    "content": "CoreAdmin actions can be executed by via HTTP requests that specify an <span class=\"ff2 fs1\">action</span> request parameter, with\nadditional action specific arguments provided as additional parameters.",
    "hierarchy": [
      "CoreAdmin API"
    ],
    "pageId": 1059
  },
  {
    "content": "All action names are uppercase, and are defined in depth in the sections below.",
    "hierarchy": [
      "CoreAdmin API"
    ],
    "pageId": 1059
  },
  {
    "content": "The <span class=\"ff2 fs1\">STATUS</span> action returns the status of all running Solr cores, or status for only the named core.",
    "hierarchy": [
      "CoreAdmin API",
      "STATUS"
    ],
    "pageId": 1059
  },
  {
    "content": "admin/cores?action=STATUS&core=core-name",
    "hierarchy": [
      "CoreAdmin API",
      "STATUS"
    ],
    "pageId": 1059
  },
  {
    "content": "core\nThe name of a core, as listed in the \"name\" attribute of a <span class=\"ff2 fs1\"><core></span> element in <span class=\"ff2 fs1\">solr.xml</span>.",
    "hierarchy": [
      "CoreAdmin API",
      "STATUS",
      "STATUS Parameters"
    ],
    "pageId": 1059
  },
  {
    "content": "indexInfo\nIf <span class=\"ff2 fs1\">false</span>, information about the index will not be returned with a core STATUS request. In Solr\nimplementations with a large number of cores (i.e., more than hundreds), retrieving the index\ninformation for each core can take a lot of time and isn't always required. The default is <span class=\"ff2 fs1\">true</span>.",
    "hierarchy": [
      "CoreAdmin API",
      "STATUS",
      "STATUS Parameters"
    ],
    "pageId": 1059
  },
  {
    "content": "The <span class=\"code\">CREATE</span> action creates a new core and registers it.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "If a Solr core with the given name already exists, it will continue to handle requests while the new core is\ninitializing. When the new core is ready, it will take new requests and the old core will be unloaded.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "admin/cores?action=CREATE&name=core-name&instanceDir=\npath/to/dir&config=solrconfig.xml&dataDir=data",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "Note that this command is the only one of the Core Admin API commands that <span class=\"ff1\">does not</span> support the <span class=\"code\">core</span>\nparameter. Instead, the <span class=\"code\">name</span> parameter is required, as shown below.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "Your CREATE call must be able to find a configuration, or it will not succeed.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "When you are running SolrCloud and create a new core for a collection, the configuration\nwill be inherited from the collection. Each collection is linked to a configName, which is\nstored in ZooKeeper. This satisfies the config requirement. There is something to note,\nthough – if you're running SolrCloud, you should <span class=\"ff1\">NOT</span> be using the CoreAdmin API at all.\nUse the <span class=\"link\">Collections API</span>.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "When you are not running SolrCloud, if you have <span class=\"link\">Config Sets</span> defined, you can use the\nconfigSet parameter as documented below. If there are no config sets, then the\ninstanceDir<span class=\"ff2 fs1\"> specified in the CREATE call must already exist, and it must contain a </span>conf\ndirectory which in turn must contain <span class=\"code\">solrconfig.xml</span>, your schema (usually named either\nmanaged-schema<span class=\"ff2 fs1\"> or </span>schema.xml<span class=\"ff2 fs1\">), and any files referenced by those configs.</span>",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "The config and schema filenames can be specified with the <span class=\"code\">config</span> and <span class=\"code\">schema</span> parameters,\nbut these are expert options. One thing you could do to avoid creating the <span class=\"code\">conf</span> directory is\nuse <span class=\"code\">config</span> and <span class=\"code\">schema</span> parameters that point at absolute paths, but this can lead to\nconfusing configurations unless you fully understand what you are doing.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "The <span class=\"code\">core.properties</span> file is built as part of the CREATE command. If you create a\ncore.properties<span class=\"ff2 fs1\"> file yourself in a core directory and then try to use CREATE to add that</span>\ncore to Solr, you will get an error telling you that another core is already defined there. The\ncore.properties<span class=\"ff2 fs1\"> file must NOT exist before calling the CoreAdmin API with the CREATE</span>\ncommand.",
    "hierarchy": [
      "CREATE"
    ],
    "pageId": 1060
  },
  {
    "content": "name\nThe name of the new core. Same as <span class=\"code\">name</span> on the <span class=\"code\"><core></span> element. This parameter is required.",
    "hierarchy": [
      "CREATE",
      "CREATE Core Parameters"
    ],
    "pageId": 1060
  },
  {
    "content": "instanceDir\nThe directory where files for this core should be stored. Same as <span class=\"code\">instanceDir</span> on the <span class=\"code\"><core></span> element.\nThe default is the value specified for the <span class=\"code\">name</span> parameter if not supplied.",
    "hierarchy": [
      "CREATE",
      "CREATE Core Parameters"
    ],
    "pageId": 1060
  },
  {
    "content": "config",
    "hierarchy": [
      "CREATE",
      "CREATE Core Parameters"
    ],
    "pageId": 1060
  },
  {
    "content": "Name of the config file (i.e., <span class=\"ff2 fs1\">solrconfig.xml</span>) relative to <span class=\"ff2 fs1\">instanceDir</span>.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "schema\nName of the schema file to use for the core. Please note that if you are using a \"managed schema\" (the\ndefault behavior) then any value for this property which does not match the effective\nmanagedSchemaResourceName<span class=\"ff1 fs0\"> will be read once, backed up, and converted for managed schema use. See</span>\nSchema Factory Definition in SolrConfig<span class=\"fc0\"> for details.</span>",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "dataDir\nName of the data directory relative to <span class=\"ff2 fs1\">instanceDir</span>.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "configSet\nName of the configset to use for this core. For more information, see the section <span class=\"link\">Config Sets</span>.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "collection\nThe name of the collection to which this core belongs. The default is the name of the core.\ncollection.param=value<span class=\"ff1 fs0\"> causes a property of </span>param=value<span class=\"ff1 fs0\"> to be set if a new collection is being created.</span>\nUse <span class=\"ff2 fs1\">collection.configName=config-name</span> to point to the configuration for a new collection.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "While it's possible to create a core for a non-existent collection, this approach is not\nsupported and not recommended. Always create a collection using the <span class=\"link\">Collections API</span>\nbefore creating a core directly for it.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "shard\nThe shard id this core represents. Normally you want to be auto-assigned a shard id.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "property.name=value\nSets the core property <span class=\"ff4\">name</span> to <span class=\"ff4\">value</span>. See the section on defining <span class=\"link\">core.properties file contents</span>.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "Use <span class=\"ff2 fs1\">collection.configName=configname</span> to point to the config for a new collection.",
    "hierarchy": [
    ],
    "pageId": 1061
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=CREATE&name=my_core&collection=my_collection&shard=\nshard2",
    "hierarchy": [
      "CREATE Example"
    ],
    "pageId": 1061
  },
  {
    "content": "The RELOAD action loads a new core from the configuration of an existing, registered Solr core. While the\nnew core is initializing, the existing one will continue to handle requests. When the new Solr core is ready, it\ntakes over and the old core is unloaded.",
    "hierarchy": [
      "RELOAD"
    ],
    "pageId": 1061
  },
  {
    "content": "admin/cores?action=RELOAD&core=core-name",
    "hierarchy": [
      "RELOAD"
    ],
    "pageId": 1061
  },
  {
    "content": "This is useful when you've made changes to a Solr core’s configuration on disk, such as adding new field\ndefinitions. Calling the RELOAD action lets you apply the new configuration without having to restart Solr.",
    "hierarchy": [
      "RELOAD"
    ],
    "pageId": 1061
  },
  {
    "content": "RELOAD performs \"live\" reloads of SolrCore, reusing some existing objects. Some\nconfiguration options, such as the <span class=\"code\">dataDir</span> location and <span class=\"code\">IndexWriter</span>-related settings in\nsolrconfig.xml<span class=\"ff2 fs1\"> can not be changed and made active with a simple RELOAD action.</span>",
    "hierarchy": [
    ],
    "pageId": 1062
  },
  {
    "content": "core\nThe name of the core, as listed in the \"name\" attribute of a <span class=\"code\"><core></span> element in <span class=\"code\">solr.xml</span>. This parameter\nis required.",
    "hierarchy": [
      "RELOAD Core Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "The <span class=\"code\">RENAME</span> action changes the name of a Solr core.",
    "hierarchy": [
      "RENAME"
    ],
    "pageId": 1062
  },
  {
    "content": "admin/cores?action=RENAME&core=core-name&other=other-core-name",
    "hierarchy": [
      "RENAME"
    ],
    "pageId": 1062
  },
  {
    "content": "core\nThe name of the Solr core to be renamed. This parameter is required.",
    "hierarchy": [
      "RENAME",
      "RENAME Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "other\nThe new name for the Solr core. If the persistent attribute of <span class=\"code\"><solr></span> is <span class=\"code\">true</span>, the new name will be written\nto <span class=\"code\">solr.xml</span> as the <span class=\"code\">name</span> attribute of the <span class=\"code\"><core></span> attribute. This parameter is required.",
    "hierarchy": [
      "RENAME",
      "RENAME Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
      "RENAME",
      "RENAME Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "SWAP<span class=\"ff2 fs1\"> atomically swaps the names used to access two existing Solr cores. This can be used to swap new</span>\ncontent into production. The prior core remains available and can be swapped back, if necessary. Each core\nwill be known by the name of the other, after the swap.",
    "hierarchy": [
      "SWAP"
    ],
    "pageId": 1062
  },
  {
    "content": "admin/cores?action=SWAP&core=core-name&other=other-core-name",
    "hierarchy": [
      "SWAP"
    ],
    "pageId": 1062
  },
  {
    "content": "Do not use <span class=\"code\">SWAP</span> with a SolrCloud node. It is not supported and can result in the core being\nunusable.",
    "hierarchy": [
      "SWAP"
    ],
    "pageId": 1062
  },
  {
    "content": "core\nThe name of one of the cores to be swapped. This parameter is required.",
    "hierarchy": [
      "SWAP",
      "SWAP Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "other\nThe name of one of the cores to be swapped. This parameter is required.",
    "hierarchy": [
      "SWAP",
      "SWAP Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
      "SWAP",
      "SWAP Parameters"
    ],
    "pageId": 1062
  },
  {
    "content": "The <span class=\"code\">UNLOAD</span> action removes a core from Solr. Active requests will continue to be processed, but no new\nrequests will be sent to the named core. If a core is registered under more than one name, only the given\nname is removed.",
    "hierarchy": [
      "UNLOAD"
    ],
    "pageId": 1063
  },
  {
    "content": "admin/cores?action=UNLOAD&core=core-name",
    "hierarchy": [
      "UNLOAD"
    ],
    "pageId": 1063
  },
  {
    "content": "The <span class=\"code\">UNLOAD</span> action requires a parameter (<span class=\"code\">core</span>) identifying the core to be removed. If the persistent attribute\nof <span class=\"code\"><solr></span> is set to <span class=\"code\">true</span>, the <span class=\"code\"><core></span> element with this <span class=\"code\">name</span> attribute will be removed from <span class=\"code\">solr.xml</span>.",
    "hierarchy": [
      "UNLOAD"
    ],
    "pageId": 1063
  },
  {
    "content": "Unloading all cores in a SolrCloud collection causes the removal of that collection's\nmetadata from ZooKeeper.",
    "hierarchy": [
      "UNLOAD"
    ],
    "pageId": 1063
  },
  {
    "content": "core\nThe name of a core to be removed. This parameter is required.",
    "hierarchy": [
      "UNLOAD",
      "UNLOAD Parameters"
    ],
    "pageId": 1063
  },
  {
    "content": "deleteIndex\nIf <span class=\"code\">true</span>, will remove the index when unloading the core. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "UNLOAD",
      "UNLOAD Parameters"
    ],
    "pageId": 1063
  },
  {
    "content": "deleteDataDir\nIf <span class=\"code\">true</span>, removes the <span class=\"code\">data</span> directory and all sub-directories. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "UNLOAD",
      "UNLOAD Parameters"
    ],
    "pageId": 1063
  },
  {
    "content": "deleteInstanceDir\nIf <span class=\"code\">true</span>, removes everything related to the core, including the index directory, configuration files and\nother related files. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "UNLOAD",
      "UNLOAD Parameters"
    ],
    "pageId": 1063
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
      "UNLOAD",
      "UNLOAD Parameters"
    ],
    "pageId": 1063
  },
  {
    "content": "The <span class=\"code\">MERGEINDEXES</span> action merges one or more indexes to another index. The indexes must have completed\ncommits, and should be locked against writes until the merge is complete or the resulting merged index\nmay become corrupted. The target core index must already exist and have a compatible schema with the\none or more indexes that will be merged to it. Another commit on the target core should also be performed\nafter the merge is complete.",
    "hierarchy": [
      "MERGEINDEXES"
    ],
    "pageId": 1063
  },
  {
    "content": "admin/cores?action=MERGEINDEXES&core=new-core-name&indexDir=\npath/to/core1/data/index&indexDir=path/to/core2/data/index",
    "hierarchy": [
      "MERGEINDEXES"
    ],
    "pageId": 1063
  },
  {
    "content": "In this example, we use the <span class=\"code\">indexDir</span> parameter to define the index locations of the source cores. The <span class=\"code\">core</span>\nparameter defines the target index. A benefit of this approach is that we can merge any Lucene-based index\nthat may not be associated with a Solr core.",
    "hierarchy": [
      "MERGEINDEXES"
    ],
    "pageId": 1063
  },
  {
    "content": "Alternatively, we can instead use a <span class=\"code\">srcCore</span> parameter, as in this example:",
    "hierarchy": [
      "MERGEINDEXES"
    ],
    "pageId": 1063
  },
  {
    "content": "admin/cores?action=mergeindexes&core=new-core-name&srcCore=core1-name&srcCore=core2-name",
    "hierarchy": [
      "MERGEINDEXES"
    ],
    "pageId": 1063
  },
  {
    "content": "This approach allows us to define cores that may not have an index path that is on the same physical server",
    "hierarchy": [
      "MERGEINDEXES"
    ],
    "pageId": 1063
  },
  {
    "content": "as the target core. However, we can only use Solr cores as the source indexes. Another benefit of this\napproach is that we don't have as high a risk for corruption if writes occur in parallel with the source index.",
    "hierarchy": [
    ],
    "pageId": 1064
  },
  {
    "content": "We can make this call run asynchronously by specifying the <span class=\"ff2 fs1\">async</span> parameter and passing a request-id. This\nid can then be used to check the status of the already submitted task using the REQUESTSTATUS API.",
    "hierarchy": [
    ],
    "pageId": 1064
  },
  {
    "content": "core\nThe name of the target core/index. This parameter is required.",
    "hierarchy": [
      "MERGEINDEXES Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "indexDir\nMulti-valued, directories that would be merged.",
    "hierarchy": [
      "MERGEINDEXES Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "srcCore\nMulti-valued, source cores that would be merged.",
    "hierarchy": [
      "MERGEINDEXES Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously",
    "hierarchy": [
      "MERGEINDEXES Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "The <span class=\"ff2 fs1\">SPLIT</span> action splits an index into two or more indexes. The index being split can continue to handle\nrequests. The split pieces can be placed into a specified directory on the server's filesystem or it can be\nmerged into running Solr cores.",
    "hierarchy": [
      "SPLIT"
    ],
    "pageId": 1064
  },
  {
    "content": "The <span class=\"ff2 fs1\">SPLIT</span> action supports five parameters, which are described in the table below.",
    "hierarchy": [
      "SPLIT"
    ],
    "pageId": 1064
  },
  {
    "content": "core\nThe name of the core to be split. This parameter is required.",
    "hierarchy": [
      "SPLIT",
      "SPLIT Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "path\nMulti-valued, the directory path in which a piece of the index will be written. Either this parameter or\ntargetCore<span class=\"ff1 fs0\"> must be specified. If this is specified, the </span>targetCore<span class=\"ff1 fs0\"> parameter may not be used.</span>",
    "hierarchy": [
      "SPLIT",
      "SPLIT Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "targetCore\nMulti-valued, the target Solr core to which a piece of the index will be merged. Either this parameter or\npath<span class=\"ff1 fs0\"> must be specified. If this is specified, the </span>path<span class=\"ff1 fs0\"> parameter may not be used.</span>",
    "hierarchy": [
      "SPLIT",
      "SPLIT Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "ranges\nA comma-separated list of hash ranges in hexadecimal format. If this parameter is used, <span class=\"ff2 fs1\">split.key</span>\nshould not be. See the <span class=\"link\">SPLIT Examples</span> below for an example of how this parameter can be used.",
    "hierarchy": [
      "SPLIT",
      "SPLIT Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "split.key\nThe key to be used for splitting the index. If this parameter is used, <span class=\"ff2 fs1\">ranges</span> should not be. See the <span class=\"link\">SPLIT</span>\nExamples<span class=\"fc0\"> below for an example of how this parameter can be used.</span>",
    "hierarchy": [
      "SPLIT",
      "SPLIT Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "async\nRequest ID to track this action which will be processed asynchronously.",
    "hierarchy": [
      "SPLIT",
      "SPLIT Parameters"
    ],
    "pageId": 1064
  },
  {
    "content": "The <span class=\"code\">core</span> index will be split into as many pieces as the number of <span class=\"code\">path</span> or <span class=\"code\">targetCore</span> parameters.",
    "hierarchy": [
      "SPLIT Examples"
    ],
    "pageId": 1065
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=SPLIT&core=core0&targetCore=core1&targetCore=core2",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with two targetCore parameters:"
    ],
    "pageId": 1065
  },
  {
    "content": "Here the <span class=\"code\">core</span> index will be split into two pieces and merged into the two <span class=\"code\">targetCore</span> indexes.",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with two targetCore parameters:"
    ],
    "pageId": 1065
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=SPLIT&core=core0&path=/path/to/index/1&path=/path/t\no/index/2",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with two path parameters:"
    ],
    "pageId": 1065
  },
  {
    "content": "The <span class=\"code\">core</span> index will be split into two pieces and written into the two directory paths specified.",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with two path parameters:"
    ],
    "pageId": 1065
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=SPLIT&core=core0&targetCore=core1&split.key=A!",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with the split.key parameter:"
    ],
    "pageId": 1065
  },
  {
    "content": "Here all documents having the same route key as the <span class=\"code\">split.key</span> i.e., 'A!' will be split from the <span class=\"code\">core</span> index\nand written to the <span class=\"code\">targetCore</span>.",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with the split.key parameter:"
    ],
    "pageId": 1065
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=SPLIT&core=core0&targetCore=core1&targetCore=core2&\ntargetCore=core3&ranges=0-1f4,1f5-3e8,3e9-5dc",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with ranges parameter:"
    ],
    "pageId": 1065
  },
  {
    "content": "This example uses the <span class=\"code\">ranges</span> parameter with hash ranges 0-500, 501-1000 and 1001-1500 specified in\nhexadecimal. Here the index will be split into three pieces with each targetCore receiving documents\nmatching the hash ranges specified i.e., core1 will get documents with hash range 0-500, core2 will receive\ndocuments with hash range 501-1000 and finally, core3 will receive documents with hash range 1001-1500.\nAt least one hash range must be specified. Please note that using a single hash range equal to a route key's\nhash range is NOT equivalent to using the <span class=\"code\">split.key</span> parameter because multiple route keys can hash to\nthe same range.",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with ranges parameter:"
    ],
    "pageId": 1065
  },
  {
    "content": "The <span class=\"code\">targetCore</span> must already exist and must have a compatible schema with the <span class=\"code\">core</span> index. A commit is\nautomatically called on the <span class=\"code\">core</span> index before it is split.",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with ranges parameter:"
    ],
    "pageId": 1065
  },
  {
    "content": "This command is used as part of the <span class=\"link\">SPLITSHARD</span> command but it can be used for non-cloud Solr cores as\nwell. When used against a non-cloud core without <span class=\"code\">split.key</span> parameter, this action will split the source\nindex and distribute its documents alternately so that each split piece contains an equal number of\ndocuments. If the <span class=\"code\">split.key</span> parameter is specified then only documents having the same route key will be\nsplit from the source index.",
    "hierarchy": [
      "SPLIT Examples",
      "Usage with ranges parameter:"
    ],
    "pageId": 1065
  },
  {
    "content": "Request the status of an already submitted asynchronous CoreAdmin API call.",
    "hierarchy": [
      "REQUESTSTATUS"
    ],
    "pageId": 1066
  },
  {
    "content": "admin/cores?action=REQUESTSTATUS&requestid=id",
    "hierarchy": [
      "REQUESTSTATUS"
    ],
    "pageId": 1066
  },
  {
    "content": "The REQUESTSTATUS command has only one parameter.",
    "hierarchy": [
      "REQUESTSTATUS",
      "Core REQUESTSTATUS Parameters"
    ],
    "pageId": 1066
  },
  {
    "content": "requestid\nThe user defined request-id for the asynchronous request. This parameter is required.",
    "hierarchy": [
      "REQUESTSTATUS",
      "Core REQUESTSTATUS Parameters"
    ],
    "pageId": 1066
  },
  {
    "content": "The call below will return the status of an already submitted asynchronous CoreAdmin call.",
    "hierarchy": [
      "REQUESTSTATUS",
      "Core REQUESTSTATUS Parameters"
    ],
    "pageId": 1066
  },
  {
    "content": "http://localhost:8983/solr/admin/cores?action=REQUESTSTATUS&requestid=1",
    "hierarchy": [
      "REQUESTSTATUS",
      "Core REQUESTSTATUS Parameters"
    ],
    "pageId": 1066
  },
  {
    "content": "The <span class=\"code\">REQUESTRECOVERY</span> action manually asks a core to recover by synching with the leader. This should be\nconsidered an \"expert\" level command and should be used in situations where the node (SorlCloud replica)\nis unable to become active automatically.",
    "hierarchy": [
      "REQUESTRECOVERY"
    ],
    "pageId": 1066
  },
  {
    "content": "admin/cores?action=REQUESTRECOVERY&core=core-name",
    "hierarchy": [
      "REQUESTRECOVERY"
    ],
    "pageId": 1066
  },
  {
    "content": "core\nThe name of the core to re-sync. This parameter is required.",
    "hierarchy": [
      "REQUESTRECOVERY",
      "REQUESTRECOVERY Parameters"
    ],
    "pageId": 1066
  },
  {
    "content": "http://localhost:8981/solr/admin/cores?action=REQUESTRECOVERY&core=gettingstarted_shard1_replica1",
    "hierarchy": [
      "REQUESTRECOVERY",
      "REQUESTRECOVERY Examples"
    ],
    "pageId": 1066
  },
  {
    "content": "The core to specify can be found by expanding the appropriate ZooKeeper node via the admin UI.",
    "hierarchy": [
      "REQUESTRECOVERY",
      "REQUESTRECOVERY Examples"
    ],
    "pageId": 1066
  },
  {
    "content": "On a multicore Solr instance, you may find that you want to share configuration between a number of\ndifferent cores. You can achieve this using named configsets, which are essentially shared configuration\ndirectories stored under a configurable configset base directory.",
    "hierarchy": [
      "Config Sets"
    ],
    "pageId": 1066
  },
  {
    "content": "To create a configset, simply add a new directory under the configset base directory. The configset will be\nidentified by the name of this directory. Then into this copy the config directory you want to share. The\nstructure should look something like this:",
    "hierarchy": [
      "Config Sets"
    ],
    "pageId": 1066
  },
  {
    "content": "/<configSetBaseDir>\nÊ   /configset1\nÊ       /conf\nÊ           /managed-schema\nÊ           /solrconfig.xml\nÊ   /configset2\nÊ       /conf\nÊ           /managed-schema\nÊ           /solrconfig.xml",
    "hierarchy": [
    ],
    "pageId": 1067
  },
  {
    "content": "The default base directory is <span class=\"ff1 fs1\">$SOLR_HOME/configsets</span>, and it can be configured in <span class=\"ff1 fs1\">solr.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 1067
  },
  {
    "content": "To create a new core using a configset, pass <span class=\"ff1 fs1\">configSet</span> as one of the core properties. For example, if you do\nthis via the CoreAdmin API:",
    "hierarchy": [
    ],
    "pageId": 1067
  },
  {
    "content": "curl\nhttp://localhost:8983/admin/cores?action=CREATE&name=mycore&instanceDir=path/to/instance&conf\nigSet=configset2",
    "hierarchy": [
    ],
    "pageId": 1067
  },
  {
    "content": "curl -v -X POST -H 'Content-type: application/json' -d '{\"create\":[{\"name\":\"mycore\",\n\"instanceDir\":\"path/to/instance\", \"configSet\":\"configSet2\"}]}'\nhttp://localhost:8983/api/cores",
    "hierarchy": [
    ],
    "pageId": 1067
  },
  {
    "content": "Solr includes several APIs that can be used to modify settings in <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Configuration APIs"
    ],
    "pageId": 1068
  },
  {
    "content": "<span class=\"link\">Blob Store API</span>",
    "hierarchy": [
      "Configuration APIs"
    ],
    "pageId": 1068
  },
  {
    "content": "<span class=\"link\">Config API</span>",
    "hierarchy": [
      "Configuration APIs"
    ],
    "pageId": 1068
  },
  {
    "content": "<span class=\"link\">Request Parameters API</span>",
    "hierarchy": [
      "Configuration APIs"
    ],
    "pageId": 1068
  },
  {
    "content": "<span class=\"link\">Managed Resources</span>",
    "hierarchy": [
      "Configuration APIs"
    ],
    "pageId": 1068
  },
  {
    "content": "The Blob Store REST API provides REST methods to store, retrieve or list files in a Lucene index.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API"
    ],
    "pageId": 1068
  },
  {
    "content": "It can be used to upload a jar file which contains standard Solr components such as RequestHandlers,\nSearchComponents, or other custom code you have written for Solr. Schema components <span class=\"ff4\">do not</span> yet support\nthe Blob Store.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API"
    ],
    "pageId": 1068
  },
  {
    "content": "When using the blob store, note that the API does not delete or overwrite a previous object if a new one is\nuploaded with the same name. It always adds a new version of the blob to the index. Deletes can be\nperformed with standard REST delete commands.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API"
    ],
    "pageId": 1068
  },
  {
    "content": "The blob store is only available when running in SolrCloud mode.<span class=\"ff2\"> Solr in standalone mode does not</span>\nsupport use of a blob store.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API"
    ],
    "pageId": 1068
  },
  {
    "content": "The blob store API is implemented as a requestHandler. A special collection named \".system\" is used to\nstore the blobs. This collection can be created in advance, but if it does not exist it will be created\nautomatically.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API"
    ],
    "pageId": 1068
  },
  {
    "content": "Before uploading blobs to the blob store, a special collection must be created and it must be named\n.system<span class=\"ff2 fs1\">. Solr will automatically create this collection if it does not already exist, but you can also create it</span>\nmanually if you choose.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API",
      "About the .system Collection"
    ],
    "pageId": 1068
  },
  {
    "content": "The BlobHandler is automatically registered in the .system collection. The <span class=\"code\">solrconfig.xml</span>, Schema, and\nother configuration files for the collection are automatically provided by the system and don't need to be\ndefined specifically.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API",
      "About the .system Collection"
    ],
    "pageId": 1068
  },
  {
    "content": "If you do not use the <span class=\"code\">-shards</span> or <span class=\"code\">-replicationFactor</span> options, then defaults of numShards=1 and\nreplicationFactor=3 (or maximum nodes in the cluster) will be used.",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API",
      "About the .system Collection"
    ],
    "pageId": 1068
  },
  {
    "content": "You can create the <span class=\"code\">.system</span> collection with the <span class=\"link\">Collections API</span>, as in this example:",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API",
      "About the .system Collection"
    ],
    "pageId": 1068
  },
  {
    "content": "curl\nhttp://localhost:8983/solr/admin/collections?action=CREATE&name=.system&replicationFactor=2",
    "hierarchy": [
      "Configuration APIs",
      "Blob Store API",
      "About the .system Collection"
    ],
    "pageId": 1068
  },
  {
    "content": "curl -X POST -H 'Content-type: application/json' -d '{\"create\":{\"name\":\".system\",\n\"replicationFactor\": 2}}' http://localhost:8983/api/collections",
    "hierarchy": [
    ],
    "pageId": 1069
  },
  {
    "content": "The <span class=\"ff2 fs2\">bin/solr</span> script cannot be used to create the <span class=\"ff2 fs2\">.system</span> collection.",
    "hierarchy": [
    ],
    "pageId": 1069
  },
  {
    "content": "After the <span class=\"ff2 fs2\">.system</span> collection has been created, files can be uploaded to the blob store with a request similar\nto the following:",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "curl -X POST -H 'Content-Type: application/octet-stream' --data-binary @{filename}\nhttp://localhost:8983/solr/.system/blob/{blobname}",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "For example, to upload a file named \"test1.jar\" as a blob named \"test\", you would make a POST request like:",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "curl -X POST -H 'Content-Type: application/octet-stream' --data-binary @test1.jar\nhttp://localhost:8983/solr/.system/blob/test",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "A GET request will return the list of blobs and other details:",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "curl http://localhost:8983/solr/.system/blob?omitHeader=true",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "Output:",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"response\"</span>:{<span class=\"fc3\">\"numFound\"</span>:<span class=\"fc4\">1</span>,<span class=\"fc3\">\"start\"</span>:<span class=\"fc4\">0</span>,<span class=\"fc3\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc3\">\"id\"</span>:<span class=\"fc5\">\"test/1\"</span>,\nÊ       <span class=\"fc3\">\"md5\"</span>:<span class=\"fc5\">\"20ff915fa3f5a5d66216081ae705c41b\"</span>,\nÊ       <span class=\"fc3\">\"blobName\"</span>:<span class=\"fc5\">\"test\"</span>,\nÊ       <span class=\"fc3\">\"version\"</span>:<span class=\"fc4\">1</span>,\nÊ       <span class=\"fc3\">\"timestamp\"</span>:<span class=\"fc5\">\"2015-02-04T16:45:48.374Z\"</span>,\nÊ       <span class=\"fc3\">\"size\"</span>:<span class=\"fc4\">13108</span>}]\nÊ }\n}",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "Details on individual blobs can be accessed with a request similar to:",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "curl http://localhost:8983/solr/.system/blob/{blobname}",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "For example, this request will return only the blob named 'test':",
    "hierarchy": [
      "Upload Files to Blob Store"
    ],
    "pageId": 1069
  },
  {
    "content": "curl http://localhost:8983/solr/.system/blob/test?omitHeader=true",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "Output:",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"response\"</span>:{<span class=\"fc1\">\"numFound\"</span>:<span class=\"fc2\">1</span>,<span class=\"fc1\">\"start\"</span>:<span class=\"fc2\">0</span>,<span class=\"fc1\">\"docs\"</span>:[\nÊ     {\nÊ       <span class=\"fc1\">\"id\"</span>:<span class=\"fc3\">\"test/1\"</span>,\nÊ       <span class=\"fc1\">\"md5\"</span>:<span class=\"fc3\">\"20ff915fa3f5a5d66216081ae705c41b\"</span>,\nÊ       <span class=\"fc1\">\"blobName\"</span>:<span class=\"fc3\">\"test\"</span>,\nÊ       <span class=\"fc1\">\"version\"</span>:<span class=\"fc2\">1</span>,\nÊ       <span class=\"fc1\">\"timestamp\"</span>:<span class=\"fc3\">\"2015-02-04T16:45:48.374Z\"</span>,\nÊ       <span class=\"fc1\">\"size\"</span>:<span class=\"fc2\">13108</span>}]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "The filestream response writer can return a particular version of a blob for download, as in:",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "curl http://localhost:8983/solr/.system/blob/{blobname}/{version}?wt=filestream >\n{outputfilename}",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "For the latest version of a blob, the {version} can be omitted,",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "curl http://localhost:8983/solr/.system/blob/{blobname}?wt=filestream > {outputfilename}",
    "hierarchy": [
    ],
    "pageId": 1070
  },
  {
    "content": "To use the blob as the class for a request handler or search component, you create a request handler in\nsolrconfig.xml<span class=\"ff2 fs0\"> as usual. You will need to define the following parameters:</span>",
    "hierarchy": [
      "Use a Blob in a Handler or Component"
    ],
    "pageId": 1070
  },
  {
    "content": "class\nthe fully qualified class name. For example, if you created a new request handler class called\nCRUDHandler, you would enter <span class=\"ff1 fs2\">org.apache.solr.core.CRUDHandler</span>.",
    "hierarchy": [
      "Use a Blob in a Handler or Component"
    ],
    "pageId": 1070
  },
  {
    "content": "runtimeLib\nSet to true to require that this component should be loaded from the classloader that loads the runtime\njars.",
    "hierarchy": [
      "Use a Blob in a Handler or Component"
    ],
    "pageId": 1070
  },
  {
    "content": "For example, to use a blob named test, you would configure <span class=\"ff1 fs2\">solrconfig.xml</span> like this:",
    "hierarchy": [
      "Use a Blob in a Handler or Component"
    ],
    "pageId": 1070
  },
  {
    "content": "If there are parameters available in the custom handler, you can define them in the same way as any other\nrequest handler definition.",
    "hierarchy": [
      "Use a Blob in a Handler or Component"
    ],
    "pageId": 1070
  },
  {
    "content": "Blob store can only be used to dynamically load components configured in\nsolrconfig.xml<span class=\"ff2 fs1\">. Components specified in </span>schema.xml<span class=\"ff2 fs1\"> cannot be loaded from blob store.</span>",
    "hierarchy": [
    ],
    "pageId": 1071
  },
  {
    "content": "The Config API enables manipulating various aspects of your <span class=\"code\">solrconfig.xml</span> using REST-like API calls.",
    "hierarchy": [
      "Config API"
    ],
    "pageId": 1071
  },
  {
    "content": "This feature is enabled by default and works similarly in both SolrCloud and standalone mode. Many\ncommonly edited properties (such as cache sizes and commit settings) and request handler definitions can\nbe changed with this API.",
    "hierarchy": [
      "Config API"
    ],
    "pageId": 1071
  },
  {
    "content": "When using this API, <span class=\"code\">solrconfig.xml</span> is not changed. Instead, all edited configuration is stored in a file\ncalled <span class=\"code\">configoverlay.json</span>. The values in <span class=\"code\">configoverlay.json</span> override the values in <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Config API"
    ],
    "pageId": 1071
  },
  {
    "content": "/config: retrieve or modify the config. GET to retrieve and POST for executing commands",
    "hierarchy": [
      "Config API",
      "Config API Entry Points"
    ],
    "pageId": 1071
  },
  {
    "content": "/config/overlay: retrieve the details in the <span class=\"code\">configoverlay.json</span> alone",
    "hierarchy": [
      "Config API",
      "Config API Entry Points"
    ],
    "pageId": 1071
  },
  {
    "content": "/config/params: allows creating parameter sets that can override or take the place of parameters\ndefined in <span class=\"code\">solrconfig.xml</span>. See the <span class=\"link\">Request Parameters API</span> section for more details.",
    "hierarchy": [
      "Config API",
      "Config API Entry Points"
    ],
    "pageId": 1071
  },
  {
    "content": "All configuration items, can be retrieved by sending a GET request to the <span class=\"code\">/config</span> endpoint - the results will\nbe the effective configuration resulting from merging settings in <span class=\"code\">configoverlay.json</span> with those in\nsolrconfig.xml<span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
      "Config API",
      "Retrieving the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config",
    "hierarchy": [
      "Config API",
      "Retrieving the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "To restrict the returned results to a top level section, e.g., <span class=\"code\">query</span>, <span class=\"code\">requestHandler</span> or <span class=\"code\">updateHandler</span>, append\nthe name of the section to the <span class=\"code\">/config</span> endpoint following a slash. For example, to retrieve configuration for\nall request handlers:",
    "hierarchy": [
      "Config API",
      "Retrieving the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config/requestHandler",
    "hierarchy": [
      "Config API",
      "Retrieving the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "To further restrict returned results to a single component within a top level section, use the <span class=\"code\">componentName</span>\nrequest param, e.g., to return configuration for the <span class=\"code\">/select</span> request handler:",
    "hierarchy": [
      "Config API",
      "Retrieving the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config/requestHandler?componentName=/select",
    "hierarchy": [
      "Config API",
      "Retrieving the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "This API uses specific commands to tell Solr what property or type of property to add to\nconfigoverlay.json<span class=\"ff2 fs1\">. The commands are passed as part of the data sent with the request.</span>",
    "hierarchy": [
      "Config API",
      "Commands to Modify the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "The config commands are categorized into 3 different sections which manipulate various data structures in",
    "hierarchy": [
      "Config API",
      "Commands to Modify the Config"
    ],
    "pageId": 1071
  },
  {
    "content": "solrconfig.xml<span class=\"ff2 fs1\">. Each of these is described below.</span>",
    "hierarchy": [
    ],
    "pageId": 1072
  },
  {
    "content": "<span class=\"link\">Common Properties</span>",
    "hierarchy": [
    ],
    "pageId": 1072
  },
  {
    "content": "<span class=\"link\">Components</span>",
    "hierarchy": [
    ],
    "pageId": 1072
  },
  {
    "content": "<span class=\"link\">User-defined properties</span>",
    "hierarchy": [
    ],
    "pageId": 1072
  },
  {
    "content": "The common properties are those that are frequently need to be customized in a Solr instance. They are\nmanipulated with two commands:",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "set-property: Set a well known property. The names of the properties are predefined and fixed. If the\nproperty has already been set, this command will overwrite the previous setting.",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "unset-property: Remove a property set using the <span class=\"ff1 fs0\">set-property</span> command.",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "The properties that are configured with these commands are predefined and listed below. The names of\nthese properties are derived from their XML paths as found in <span class=\"ff1 fs0\">solrconfig.xml</span>.",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.autoCommit.maxDocs",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.autoCommit.maxTime",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.autoCommit.openSearcher",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.autoSoftCommit.maxDocs",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.autoSoftCommit.maxTime",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.commitWithin.softCommit",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nupdateHandler.indexWriter.closeWaitsForMerges",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.filterCache.class",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.filterCache.size",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.filterCache.initialSize",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.filterCache.autowarmCount",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.filterCache.regenerator",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.queryResultCache.class",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.queryResultCache.size",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.queryResultCache.initialSize",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.queryResultCache.autowarmCount",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.queryResultCache.regenerator",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.documentCache.class",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.documentCache.size",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.documentCache.initialSize",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.documentCache.autowarmCount",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.documentCache.regenerator",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.fieldValueCache.class",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.fieldValueCache.size",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\nquery.fieldValueCache.initialSize",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "query.fieldValueCache.autowarmCount",
    "hierarchy": [
      "Commands for Common Properties"
    ],
    "pageId": 1072
  },
  {
    "content": "\n•\nquery.fieldValueCache.regenerator",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nquery.useFilterForSortedQuery",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nquery.queryResultWindowSize",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nquery.queryResultMaxDocCached",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nquery.enableLazyFieldLoading",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nquery.boolToFilterOptimizer",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nquery.maxBooleanClauses",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\njmx.agentId",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\njmx.serviceUrl",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\njmx.rootName",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nrequestDispatcher.handleSelect",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nrequestDispatcher.requestParsers.multipartUploadLimitInKB",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nrequestDispatcher.requestParsers.formdataUploadLimitInKB",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nrequestDispatcher.requestParsers.enableRemoteStreaming",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nrequestDispatcher.requestParsers.enableStreamBody",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "\nrequestDispatcher.requestParsers.addHttpRequestToContext",
    "hierarchy": [
    ],
    "pageId": 1073
  },
  {
    "content": "Custom request handlers, search components, and other types of localized Solr components (such as\ncustom query parsers, update processors, etc.) can be added, updated and deleted with specific commands\nfor the component being modified.",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components"
    ],
    "pageId": 1073
  },
  {
    "content": "The syntax is similar in each case: <span class=\"ff2 fs1\">add-<component-name></span>, <span class=\"ff2 fs1\">update-<component-name></span>, and <span class=\"ff2 fs1\">delete-</span>\n<component-name><span class=\"ff1 fs0\">. The command name is not case sensitive, so </span>Add-RequestHandler<span class=\"ff1 fs0\">, </span>ADD-REQUESTHANDLER\nand <span class=\"ff2 fs1\">add-requesthandler</span> are all equivalent.",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components"
    ],
    "pageId": 1073
  },
  {
    "content": "In each case, <span class=\"ff2 fs1\">add-</span> commands add the new configuration to <span class=\"ff2 fs1\">configoverlay.json</span>, which will override any\nother settings for the component in <span class=\"ff2 fs1\">solrconfig.xml</span>; <span class=\"ff2 fs1\">update-</span> commands overwrite an existing setting in\nconfigoverlay.json<span class=\"ff1 fs0\">; and </span>delete-<span class=\"ff1 fs0\"> commands remove the setting from </span>configoverlay.json<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components"
    ],
    "pageId": 1073
  },
  {
    "content": "Settings removed from <span class=\"ff2 fs1\">configoverlay.json</span> are not removed from <span class=\"ff2 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components"
    ],
    "pageId": 1073
  },
  {
    "content": "The full list of available commands follows below:",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components"
    ],
    "pageId": 1073
  },
  {
    "content": "These commands are the most commonly used:",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\nadd-requesthandler",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\nupdate-requesthandler",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\ndelete-requesthandler",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\nadd-searchcomponent",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\nupdate-searchcomponent",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\ndelete-searchcomponent",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\nadd-initparams",
    "hierarchy": [
      "Commands for Custom Handlers and Local Components",
      "General Purpose Commands"
    ],
    "pageId": 1073
  },
  {
    "content": "\nupdate-initparams",
    "hierarchy": [
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-initparams",
    "hierarchy": [
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-queryresponsewriter",
    "hierarchy": [
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-queryresponsewriter",
    "hierarchy": [
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-queryresponsewriter",
    "hierarchy": [
    ],
    "pageId": 1074
  },
  {
    "content": "These commands allow registering more advanced customizations to Solr:",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-queryparser",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-queryparser",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-queryparser",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-valuesourceparser",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-valuesourceparser",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-valuesourceparser",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-transformer",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-transformer",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-transformer",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-updateprocessor",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-updateprocessor",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-updateprocessor",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-queryconverter",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-queryconverter",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-queryconverter",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-listener",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-listener",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-listener",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nadd-runtimelib",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\nupdate-runtimelib",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "\ndelete-runtimelib",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "See the section <span class=\"link\">Creating and Updating Request Handlers</span> below for examples of using these commands.",
    "hierarchy": [
      "Advanced Commands"
    ],
    "pageId": 1074
  },
  {
    "content": "The Config API does not let you create or edit <span class=\"ff2 fs1\">updateRequestProcessorChain</span> elements. However, it is\npossible to create <span class=\"ff2 fs1\">updateProcessor</span> entries and can use them by name to create a chain.",
    "hierarchy": [
      "What about updateRequestProcessorChain?"
    ],
    "pageId": 1074
  },
  {
    "content": "example:",
    "hierarchy": [
      "What about updateRequestProcessorChain?"
    ],
    "pageId": 1074
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json' -d '{\n\"add-updateprocessor\" : { \"name\" : \"firstFld\",\nÊ                         \"class\": \"solr.FirstFieldValueUpdateProcessorFactory\",\nÊ                         \"fieldName\":\"test_s\"}}'",
    "hierarchy": [
      "What about updateRequestProcessorChain?"
    ],
    "pageId": 1074
  },
  {
    "content": "You can use this directly in your request by adding a parameter in the <span class=\"ff2 fs1\">updateRequestProcessorChain</span> for\nthe specific update processor called <span class=\"ff2 fs1\">processor=firstFld</span>.",
    "hierarchy": [
    ],
    "pageId": 1075
  },
  {
    "content": "Solr lets users templatize the <span class=\"ff2 fs1\">solrconfig.xml</span> using the place holder format\n${variable_name:default_val}<span class=\"ff1 fs0\">. You could set the values using system properties, for example,</span>\n-Dvariable_name= my_customvalue<span class=\"ff1 fs0\">. The same can be achieved during runtime using these commands:</span>",
    "hierarchy": [
      "Commands for User-Defined Properties"
    ],
    "pageId": 1075
  },
  {
    "content": "set-user-property: Set a user-defined property. If the property has already been set, this command will\noverwrite the previous setting.",
    "hierarchy": [
      "Commands for User-Defined Properties"
    ],
    "pageId": 1075
  },
  {
    "content": "unset-user-property: Remove a user-defined property.",
    "hierarchy": [
      "Commands for User-Defined Properties"
    ],
    "pageId": 1075
  },
  {
    "content": "The structure of the request is similar to the structure of requests using other commands, in the format of\n\"command\":{\"variable_name\":\"property_value\"}<span class=\"ff1 fs0\">. You can add more than one variable at a time if</span>\nnecessary.",
    "hierarchy": [
      "Commands for User-Defined Properties"
    ],
    "pageId": 1075
  },
  {
    "content": "For more information about user-defined properties, see the section <span class=\"link\">User defined properties in</span>\ncore.properties<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Commands for User-Defined Properties"
    ],
    "pageId": 1075
  },
  {
    "content": "See also the section <span class=\"link\">Creating and Updating User-Defined Properties</span> below for examples of how to use this\ntype of command.",
    "hierarchy": [
      "Commands for User-Defined Properties"
    ],
    "pageId": 1075
  },
  {
    "content": "By using this API, you will be generating JSON representations of properties defined in <span class=\"ff2 fs1\">solrconfig.xml</span>. To\nunderstand how properties should be represented with the API, let's take a look at a few examples.",
    "hierarchy": [
      "How to Map solrconfig.xml Properties to JSON"
    ],
    "pageId": 1075
  },
  {
    "content": "Here is what a request handler looks like in <span class=\"ff2 fs1\">solrconfig.xml</span>:",
    "hierarchy": [
      "How to Map solrconfig.xml Properties to JSON"
    ],
    "pageId": 1075
  },
  {
    "content": "Ê <span class=\"fc3\"><lst</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"defaults\"<span class=\"fc3\">></span></span>\nÊ   <span class=\"fc3\"><str</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"echoParams\"<span class=\"fc3\">></span></span>explicit<span class=\"fc3\"></str></span>\nÊ   <span class=\"fc3\"><int</span> <span class=\"fc4\">name</span>=<span class=\"fc5\">\"rows\"<span class=\"fc3\">></span></span>10<span class=\"fc3\"></str></span>\nÊ <span class=\"fc3\"></lst></span>",
    "hierarchy": [
      "How to Map solrconfig.xml Properties to JSON"
    ],
    "pageId": 1075
  },
  {
    "content": "The same request handler defined with the Config API would look like this:",
    "hierarchy": [
      "How to Map solrconfig.xml Properties to JSON"
    ],
    "pageId": 1075
  },
  {
    "content": "{\nÊ <span class=\"fc6\">\"add-requesthandler\"</span>:{\nÊ   <span class=\"fc6\">\"name\"</span>:<span class=\"fc5\">\"/query\"</span>,\nÊ   <span class=\"fc6\">\"class\"</span>:<span class=\"fc5\">\"solr.SearchHandler\"</span>,\nÊ   <span class=\"fc6\">\"defaults\"</span>:{\nÊ     <span class=\"fc6\">\"echoParams\"</span>:<span class=\"fc5\">\"explicit\"</span>,\nÊ     <span class=\"fc6\">\"rows\"</span>: <span class=\"fc7\">10</span>\nÊ   }\nÊ }\n}",
    "hierarchy": [
      "How to Map solrconfig.xml Properties to JSON"
    ],
    "pageId": 1075
  },
  {
    "content": "The QueryElevationComponent searchComponent in <span class=\"ff2 fs1\">solrconfig.xml</span> looks like this:",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "Ê <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"queryFieldType\"<span class=\"fc1\">></span></span>string<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"config-file\"<span class=\"fc1\">></span></span>elevate.xml<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "And the same searchComponent with the Config API:",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "{\nÊ <span class=\"fc4\">\"add-searchcomponent\"</span>:{\nÊ   <span class=\"fc4\">\"name\"</span>:<span class=\"fc3\">\"elevator\"</span>,\nÊ   <span class=\"fc4\">\"class\"</span>:<span class=\"fc3\">\"solr.QueryElevationComponent\"</span>,\nÊ   <span class=\"fc4\">\"queryFieldType\"</span>:<span class=\"fc3\">\"string\"</span>,\nÊ   <span class=\"fc4\">\"config-file\"</span>:<span class=\"fc3\">\"elevate.xml\"</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "Removing the searchComponent with the Config API:",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "{\nÊ <span class=\"fc4\">\"delete-searchcomponent\"</span>:<span class=\"fc3\">\"elevator\"</span>\n}",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "A simple highlighter looks like this in <span class=\"ff2 fs1\">solrconfig.xml</span> (example has been truncated for space):",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "Ê   <span class=\"fc1\"><highlighting></span>\nÊ     <span class=\"fc1\"><fragmenter</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"gap\"</span>\nÊ                 <span class=\"fc2\">default</span>=<span class=\"fc3\">\"true\"</span>\nÊ                 <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.highlight.GapFragmenter\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"hl.fragsize\"<span class=\"fc1\">></span></span>100<span class=\"fc1\"></int></span>\nÊ       <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"></fragmenter></span>",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "Ê     <span class=\"fc1\"><formatter</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"html\"</span>\nÊ                <span class=\"fc2\">default</span>=<span class=\"fc3\">\"true\"</span>\nÊ                <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.highlight.HtmlFormatter\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"hl.simple.pre\"<span class=\"fc1\">><span class=\"fc5\"><![CDATA[</span></span></span><em><span class=\"fc5\">]]><span class=\"fc1\"></str></span></span>\nÊ         <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"hl.simple.post\"<span class=\"fc1\">><span class=\"fc5\"><![CDATA[</span></span></span></em><span class=\"fc5\">]]><span class=\"fc1\"></str></span></span>\nÊ       <span class=\"fc1\"></lst></span>\nÊ     <span class=\"fc1\"></formatter></span>",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "Ê     <span class=\"fc1\"><encoder</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"html\"</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.highlight.HtmlEncoder\"</span> <span class=\"fc1\">/></span>\n...\nÊ   <span class=\"fc1\"></highlighting></span>",
    "hierarchy": [
    ],
    "pageId": 1076
  },
  {
    "content": "The same highlighter with the Config API:",
    "hierarchy": [
    ],
    "pageId": 1077
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"add-searchcomponent\"</span>: {\nÊ       <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"highlight\"</span>,\nÊ       <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.HighlightComponent\"</span>,\nÊ       <span class=\"fc1\">\"\"</span>: {\nÊ           <span class=\"fc1\">\"gap\"</span>: {\nÊ               <span class=\"fc1\">\"default\"</span>: <span class=\"fc2\">\"true\"</span>,\nÊ               <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"gap\"</span>,\nÊ               <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.highlight.GapFragmenter\"</span>,\nÊ               <span class=\"fc1\">\"defaults\"</span>: {\nÊ                   <span class=\"fc1\">\"hl.fragsize\"</span>: <span class=\"fc3\">100</span>\nÊ               }\nÊ           }\nÊ       },\nÊ       <span class=\"fc1\">\"html\"</span>: [{\nÊ           <span class=\"fc1\">\"default\"</span>: <span class=\"fc2\">\"true\"</span>,\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"html\"</span>,\nÊ           <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.highlight.HtmlFormatter\"</span>,\nÊ           <span class=\"fc1\">\"defaults\"</span>: {\nÊ               <span class=\"fc1\">\"hl.simple.pre\"</span>: <span class=\"fc2\">\"before-\"</span>,\nÊ               <span class=\"fc1\">\"hl.simple.post\"</span>: <span class=\"fc2\">\"-after\"</span>\nÊ           }\nÊ       }, {\nÊ           <span class=\"fc1\">\"name\"</span>: <span class=\"fc2\">\"html\"</span>,\nÊ           <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.highlight.HtmlEncoder\"</span>\nÊ       }]\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 1077
  },
  {
    "content": "Set autoCommit properties in <span class=\"ff2 fs1\">solrconfig.xml</span>:",
    "hierarchy": [
    ],
    "pageId": 1077
  },
  {
    "content": "Ê <span class=\"fc4\"><maxTime></span>15000<span class=\"fc4\"></maxTime></span>\nÊ <span class=\"fc4\"><openSearcher></span>false<span class=\"fc4\"></openSearcher></span>",
    "hierarchy": [
    ],
    "pageId": 1077
  },
  {
    "content": "Define the same properties with the Config API:",
    "hierarchy": [
    ],
    "pageId": 1077
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"set-property\"</span>: {\nÊ   <span class=\"fc1\">\"updateHandler.autoCommit.maxTime\"</span>:<span class=\"fc3\">15000</span>,\nÊ   <span class=\"fc1\">\"updateHandler.autoCommit.openSearcher\"</span>:<span class=\"fc5\">false</span>\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 1077
  },
  {
    "content": "The Config API always allows changing the configuration of any component by name. However, some\nconfigurations such as <span class=\"code\">listener</span> or <span class=\"code\">initParams</span> do not require a name in <span class=\"code\">solrconfig.xml</span>. In order to be\nable to <span class=\"code\">update</span> and <span class=\"code\">delete</span> of the same item in <span class=\"code\">configoverlay.json</span>, the name attribute becomes\nmandatory.",
    "hierarchy": [
      "Name Components for the Config API"
    ],
    "pageId": 1078
  },
  {
    "content": "This change sets the <span class=\"code\">query.filterCache.autowarmCount</span> to 1000 items and unsets the\nquery.filterCache.size<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Common Properties"
    ],
    "pageId": 1078
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json' -d'{\nÊ   \"set-property\" : {\"query.filterCache.autowarmCount\":1000},\nÊ   \"unset-property\" :\"query.filterCache.size\"}'",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Common Properties"
    ],
    "pageId": 1078
  },
  {
    "content": "Using the <span class=\"code\">/config/overlay</span> endpoint, you can verify the changes with a request like this:",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Common Properties"
    ],
    "pageId": 1078
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/config/overlay?omitHeader=true",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Common Properties"
    ],
    "pageId": 1078
  },
  {
    "content": "And you should get a response like this:",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Common Properties"
    ],
    "pageId": 1078
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"overlay\"</span>:{\nÊ   <span class=\"fc2\">\"znodeVersion\"</span>:<span class=\"fc3\">1</span>,\nÊ   <span class=\"fc2\">\"props\"</span>:{<span class=\"fc2\">\"query\"</span>:{<span class=\"fc2\">\"filterCache\"</span>:{\nÊ         <span class=\"fc2\">\"autowarmCount\"</span>:<span class=\"fc3\">1000</span>,\nÊ         <span class=\"fc2\">\"size\"</span>:<span class=\"fc3\">25</span>}}}}}",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Common Properties"
    ],
    "pageId": 1078
  },
  {
    "content": "To create a request handler, we can use the <span class=\"code\">add-requesthandler</span> command:",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Request Handlers"
    ],
    "pageId": 1078
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json'  -d '{\nÊ \"add-requesthandler\" : {\nÊ   \"name\": \"/mypath\",\nÊ   \"class\":\"solr.DumpRequestHandler\",\nÊ   \"defaults\":{ \"x\":\"y\" ,\"a\":\"b\", \"rows\":10 },\nÊ   \"useParams\":\"x\"\nÊ }\n}'",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Request Handlers"
    ],
    "pageId": 1078
  },
  {
    "content": "Make a call to the new request handler to check if it is registered:",
    "hierarchy": [
      "Config API Examples",
      "Creating and Updating Request Handlers"
    ],
    "pageId": 1078
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/mypath?omitHeader=true",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "And you should see the following as output:",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"params\"</span>:{\nÊ   <span class=\"fc1\">\"indent\"</span>:<span class=\"fc2\">\"true\"</span>,\nÊ   <span class=\"fc1\">\"a\"</span>:<span class=\"fc2\">\"b\"</span>,\nÊ   <span class=\"fc1\">\"x\"</span>:<span class=\"fc2\">\"y\"</span>,\nÊ   <span class=\"fc1\">\"rows\"</span>:<span class=\"fc2\">\"10\"</span>},\nÊ <span class=\"fc1\">\"context\"</span>:{\nÊ   <span class=\"fc1\">\"webapp\"</span>:<span class=\"fc2\">\"/solr\"</span>,\nÊ   <span class=\"fc1\">\"path\"</span>:<span class=\"fc2\">\"/mypath\"</span>,\nÊ   <span class=\"fc1\">\"httpMethod\"</span>:<span class=\"fc2\">\"GET\"</span>}}",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "To update a request handler, you should use the <span class=\"ff1 fs1\">update-requesthandler</span> command:",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json'  -d '{\nÊ \"update-requesthandler\": {\nÊ   \"name\": \"/mypath\",\nÊ   \"class\":\"solr.DumpRequestHandler\",\nÊ   \"defaults\": {\"x\":\"new value for X\", \"rows\":\"20\"},\nÊ   \"useParams\":\"x\"\nÊ }\n}'",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "As another example, we'll create another request handler, this time adding the 'terms' component as part\nof the definition:",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json' -d '{\nÊ \"add-requesthandler\": {\nÊ   \"name\": \"/myterms\",\nÊ   \"class\":\"solr.SearchHandler\",\nÊ   \"defaults\": {\"terms\":true, \"distrib\":false},\nÊ   \"components\": [ \"terms\" ]\nÊ }\n}'",
    "hierarchy": [
    ],
    "pageId": 1079
  },
  {
    "content": "This command sets a user property.",
    "hierarchy": [
      "Creating and Updating User-Defined Properties"
    ],
    "pageId": 1079
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H'Content-type:application/json' -d '{\nÊ   \"set-user-property\" : {\"variable_name\":\"some_value\"}}'",
    "hierarchy": [
      "Creating and Updating User-Defined Properties"
    ],
    "pageId": 1079
  },
  {
    "content": "Again, we can use the <span class=\"ff1 fs1\">/config/overlay</span> endpoint to verify the changes have been made:",
    "hierarchy": [
      "Creating and Updating User-Defined Properties"
    ],
    "pageId": 1079
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config/overlay?omitHeader=true",
    "hierarchy": [
    ],
    "pageId": 1080
  },
  {
    "content": "And we would expect to see output like this:",
    "hierarchy": [
    ],
    "pageId": 1080
  },
  {
    "content": "{<span class=\"fc1\">\"overlay\"</span>:{\nÊ  <span class=\"fc1\">\"znodeVersion\"</span>:<span class=\"fc2\">5</span>,\nÊ  <span class=\"fc1\">\"userProps\"</span>:{\nÊ    <span class=\"fc1\">\"variable_name\"</span>:<span class=\"fc3\">\"some_value\"</span>}}\n}",
    "hierarchy": [
    ],
    "pageId": 1080
  },
  {
    "content": "To unset the variable, issue a command like this:",
    "hierarchy": [
    ],
    "pageId": 1080
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H'Content-type:application/json' -d\n'{\"unset-user-property\" : \"variable_name\"}'",
    "hierarchy": [
    ],
    "pageId": 1080
  },
  {
    "content": "Every core watches the ZooKeeper directory for the configset being used with that core. In standalone\nmode, however, there is no watch (because ZooKeeper is not running). If there are multiple cores in the\nsame node using the same configset, only one ZooKeeper watch is used. For instance, if the configset\n'myconf' is used by a core, the node would watch <span class=\"ff1 fs2\">/configs/myconf</span>. Every write operation performed\nthrough the API would 'touch' the directory (sets an empty byte[] to trigger watches) and all watchers are\nnotified. Every core would check if the Schema file, <span class=\"ff1 fs2\">solrconfig.xml</span> or <span class=\"ff1 fs2\">configoverlay.json</span> is modified by\ncomparing the <span class=\"ff1 fs2\">znode</span> versions and if modified, the core is reloaded.",
    "hierarchy": [
      "How the Config API Works"
    ],
    "pageId": 1080
  },
  {
    "content": "If <span class=\"ff1 fs2\">params.json</span> is modified, the params object is just updated without a core reload (see the section <span class=\"link\">Request</span>\nParameters API<span class=\"fc0\"> for more information about <span class=\"ff1 fs2\">params.json</span>).</span>",
    "hierarchy": [
      "How the Config API Works"
    ],
    "pageId": 1080
  },
  {
    "content": "If an empty command is sent to the <span class=\"ff1 fs2\">/config</span> endpoint, the watch is triggered on all cores using this\nconfigset. For example:",
    "hierarchy": [
      "How the Config API Works",
      "Empty Command"
    ],
    "pageId": 1080
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H'Content-type:application/json' -d '{}'",
    "hierarchy": [
      "How the Config API Works",
      "Empty Command"
    ],
    "pageId": 1080
  },
  {
    "content": "Directly editing any files without 'touching' the directory <span class=\"code\">will not</span> make it visible to all nodes.",
    "hierarchy": [
      "How the Config API Works",
      "Empty Command"
    ],
    "pageId": 1080
  },
  {
    "content": "It is possible for components to watch for the configset 'touch' events by registering a listener using\nSolrCore#registerConfListener()<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "How the Config API Works",
      "Empty Command"
    ],
    "pageId": 1080
  },
  {
    "content": "Any component can register a listener using:",
    "hierarchy": [
      "How the Config API Works",
      "Listening to Config Changes"
    ],
    "pageId": 1080
  },
  {
    "content": "SolrCore#addConfListener(Runnable listener)",
    "hierarchy": [
      "How the Config API Works",
      "Listening to Config Changes"
    ],
    "pageId": 1080
  },
  {
    "content": "to get notified for config changes. This is not very useful if the files modified result in core reloads (i.e.,\nconfigoverlay.xml<span class=\"ff2 fs0\"> or Schema). Components can use this to reload the files they are interested in.</span>",
    "hierarchy": [
      "How the Config API Works",
      "Listening to Config Changes"
    ],
    "pageId": 1080
  },
  {
    "content": "The Request Parameters API allows creating parameter sets, a.k.a. paramsets, that can override or take the\nplace of parameters defined in <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "The parameter sets defined with this API can be used in requests to Solr, or referenced directly in\nsolrconfig.xml<span class=\"ff2 fs1\"> request handler definitions.</span>",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "It is really another endpoint of the <span class=\"link\">Config API</span> instead of a separate API, and has distinct commands. It does\nnot replace or modify any sections of <span class=\"code\">solrconfig.xml</span>, but instead provides another approach to handling\nparameters used in requests. It behaves in the same way as the Config API, by storing parameters in\nanother file that will be used at runtime. In this case, the parameters are stored in a file named\nparams.json<span class=\"ff2 fs1\">. This file is kept in ZooKeeper or in the </span>conf<span class=\"ff2 fs1\"> directory of a standalone Solr instance.</span>",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "The settings stored in <span class=\"code\">params.json</span> are used at query time to override settings defined in <span class=\"code\">solrconfig.xml</span> in\nsome cases as described below.",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "When might you want to use this feature?",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "To avoid frequently editing your <span class=\"code\">solrconfig.xml</span> to update request parameters that change often.",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "To reuse parameters across various request handlers.",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "To mix and match parameter sets at request time.",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "To avoid a reload of your collection for small parameter changes.",
    "hierarchy": [
      "Request Parameters API"
    ],
    "pageId": 1081
  },
  {
    "content": "All requests are sent to the <span class=\"code\">/config/params</span> endpoint of the Config API.",
    "hierarchy": [
      "Request Parameters API",
      "The Request Parameters Endpoint"
    ],
    "pageId": 1081
  },
  {
    "content": "The request to set, unset, or update request parameters is sent as a set of Maps with names. These objects\ncan be directly used in a request or a request handler definition.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "The available commands are:",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "set: Create or overwrite a parameter set map.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "unset: delete a parameter set map.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "update: update a parameter set map. This is equivalent to a <span class=\"code\">map.putAll(newMap)</span>. Both the maps are\nmerged and if the new map has same keys as old they are overwritten.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "You can mix these commands into a single request if necessary.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "Each map must include a name so it can be referenced later, either in a direct request to Solr or in a request\nhandler definition.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "In the following example, we are setting 2 sets of parameters named 'myFacets' and 'myQueries'.",
    "hierarchy": [
      "Request Parameters API",
      "Setting Request Parameters"
    ],
    "pageId": 1081
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config/params -H 'Content-type:application/json'  -d\n'{\nÊ \"set\":{\nÊ   \"myFacets\":{\nÊ     \"facet\":\"true\",\nÊ     \"facet.limit\":5}},\nÊ \"set\":{\nÊ   \"myQueries\":{\nÊ     \"defType\":\"edismax\",\nÊ     \"rows\":\"5\",\nÊ     \"df\":\"text_all\"}}\n}'",
    "hierarchy": [
    ],
    "pageId": 1082
  },
  {
    "content": "In the above example all the parameters are equivalent to the \"defaults\" in <span class=\"ff1 fs1\">solrconfig.xml</span>. It is possible to\nadd invariants and appends as follows:",
    "hierarchy": [
    ],
    "pageId": 1082
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config/params -H 'Content-type:application/json'  -d\n'{\nÊ \"set\":{\nÊ   \"my_handler_params\":{\nÊ     \"facet.limit\":5,\nÊ     \"_invariants_\": {\nÊ       \"facet\":true,\nÊ      },\nÊ     \"_appends_\":{\"facet.field\":[\"field1\",\"field2\"]\nÊ    }\nÊ  }}\n}'",
    "hierarchy": [
    ],
    "pageId": 1082
  },
  {
    "content": "After creating the <span class=\"ff1 fs1\">my_handler_params</span> paramset in the above section, it is possible to define a request\nhandler as follows:",
    "hierarchy": [
      "Using Request Parameters with RequestHandlers"
    ],
    "pageId": 1082
  },
  {
    "content": "It will be equivalent to a standard request handler definition such as this one:",
    "hierarchy": [
      "Using Request Parameters with RequestHandlers"
    ],
    "pageId": 1082
  },
  {
    "content": "Ê <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet.limit\"<span class=\"fc0\">></span></span>5<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"invariants\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet\"<span class=\"fc0\">></span></span>true<span class=\"fc0\"></bool></span>\nÊ <span class=\"fc0\"></lst></span>\nÊ <span class=\"fc0\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"appends\"<span class=\"fc0\">></span></span>\nÊ   <span class=\"fc0\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"facet.field\"<span class=\"fc0\">></span></span>\nÊ     <span class=\"fc0\"><str></span>field1<span class=\"fc0\"></str></span>\nÊ     <span class=\"fc0\"><str></span>field2<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"></arr></span>\nÊ <span class=\"fc0\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1083
  },
  {
    "content": "Solr ships with many out-of-the-box request handlers that may only be configured via the Request\nParameters API, because their configuration is not present in <span class=\"ff1 fs1\">solrconfig.xml</span>. See <span class=\"link\">Implicit RequestHandlers</span>\nfor the paramset to use when configuring an implicit request handler.",
    "hierarchy": [
      "Implicit RequestHandlers with the Request Parameters API"
    ],
    "pageId": 1083
  },
  {
    "content": "To see the expanded paramset and the resulting effective parameters for a RequestHandler defined with\nuseParams<span class=\"code\">, use the </span>expandParams<span class=\"code\"> request param. As an example, for the </span>/export<span class=\"code\"> request handler:</span>",
    "hierarchy": [
      "Viewing Expanded Paramsets and Effective Parameters with RequestHandlers"
    ],
    "pageId": 1083
  },
  {
    "content": "curl\nhttp://localhost:8983/solr/techproducts/config/requestHandler?componentName=/export&expandParams=\ntrue",
    "hierarchy": [
      "Viewing Expanded Paramsets and Effective Parameters with RequestHandlers"
    ],
    "pageId": 1083
  },
  {
    "content": "To see the paramsets that have been created, you can use the <span class=\"ff1 fs1\">/config/params</span> endpoint to read the\ncontents of <span class=\"ff1 fs1\">params.json</span>, or use the name in the request:",
    "hierarchy": [
      "Viewing Request Parameters"
    ],
    "pageId": 1083
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config/params",
    "hierarchy": [
      "Viewing Request Parameters"
    ],
    "pageId": 1083
  },
  {
    "content": "#Or use the paramset name\ncurl http://localhost:8983/solr/techproducts/config/params/myQueries",
    "hierarchy": [
      "Viewing Request Parameters"
    ],
    "pageId": 1083
  },
  {
    "content": "When making a request, the <span class=\"ff1 fs1\">useParams</span> parameter applies the request parameters sent to the request. This\nis translated at request time to the actual parameters.",
    "hierarchy": [
      "The useParams Parameter"
    ],
    "pageId": 1083
  },
  {
    "content": "For example (using the names we set up in the earlier examples, please replace with your own name):",
    "hierarchy": [
      "The useParams Parameter"
    ],
    "pageId": 1083
  },
  {
    "content": "http://localhost/solr/techproducts/select?useParams=myQueries",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "It is possible to pass more than one parameter set in the same request. For example:",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "http://localhost/solr/techproducts/select?useParams=myFacets,myQueries",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "In the above example the param set 'myQueries' is applied on top of 'myFacets'. So, values in 'myQueries'\ntake precedence over values in 'myFacets'. Additionally, any values passed in the request take precedence\nover <span class=\"ff1 fs1\">useParams</span> parameters. This acts like the \"defaults\" specified in the <span class=\"ff1 fs1\"><requestHandler></span> definition in\nsolrconfig.xml<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "The parameter sets can be used directly in a request handler definition as follows. Please note that the\nuseParams<span class=\"ff2 fs0\"> specified is always applied even if the request contains </span>useParams<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "Ê <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"defaults\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"terms\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></bool></span>\nÊ   <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"distrib\"<span class=\"fc1\">></span></span>false<span class=\"fc1\"></bool></span>\nÊ <span class=\"fc1\"></lst></span>\nÊ <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"components\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str></span>terms<span class=\"fc1\"></str></span>\nÊ <span class=\"fc1\"></arr></span>",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "To summarize, parameters are applied in this order:",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "parameters defined in <span class=\"ff1 fs1\"><invariants></span> in <span class=\"ff1 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "parameters applied in <span class=\"ff1 fs1\">invariants</span> in <span class=\"ff1 fs1\">params.json</span> and that is specified in the requesthandler definition\nor even in request",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "parameters defined in the request directly.",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "parameter sets defined in the request, in the order they have been listed with <span class=\"ff1 fs1\">useParams</span>.",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "parameter sets defined in <span class=\"ff1 fs1\">params.json</span> that have been defined in the request handler.",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "parameters defined in <span class=\"ff1 fs1\"><defaults></span> in <span class=\"ff1 fs1\">solrconfig.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 1084
  },
  {
    "content": "The RequestParams Object can be accessed using the method <span class=\"ff1 fs1\">SolrConfig#getRequestParams()</span>. Each\nparamset can be accessed by their name using the method <span class=\"ff1 fs1\">RequestParams#getRequestParams(String</span>\nname)<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Public APIs"
    ],
    "pageId": 1084
  },
  {
    "content": "The Solr \"films\" example demonstrates the use of the parameters API. You can use this example in your Solr\ninstallation (in the <span class=\"ff1 fs1\">example/films</span> directory) or view the files in the Apache GitHub mirror at\nhttps://github.com/apache/lucene-solr/tree/master/solr/example/films<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Examples Using the Request Parameters API"
    ],
    "pageId": 1084
  },
  {
    "content": "Managed resources expose a REST API endpoint for performing Create-Read-Update-Delete (CRUD)\noperations on a Solr object.",
    "hierarchy": [
      "Managed Resources"
    ],
    "pageId": 1085
  },
  {
    "content": "Any long-lived Solr object that has configuration settings and/or data is a good candidate to be a managed\nresource. Managed resources complement other programmatically manageable components in Solr, such\nas the RESTful schema API to add fields to a managed schema.",
    "hierarchy": [
      "Managed Resources"
    ],
    "pageId": 1085
  },
  {
    "content": "Consider a Web-based UI that offers Solr-as-a-Service where users need to configure a set of stop words and\nsynonym mappings as part of an initial setup process for their search application. This type of use case can\neasily be supported using the Managed Stop Filter & Managed Synonym Graph Filter Factories provided by\nSolr, via the Managed resources REST API.",
    "hierarchy": [
      "Managed Resources"
    ],
    "pageId": 1085
  },
  {
    "content": "Users can also write their own custom plugins, that leverage the same internal hooks to make additional\nresources REST managed.",
    "hierarchy": [
      "Managed Resources"
    ],
    "pageId": 1085
  },
  {
    "content": "All of the examples in this section assume you are running the \"techproducts\" Solr example:",
    "hierarchy": [
      "Managed Resources"
    ],
    "pageId": 1085
  },
  {
    "content": "bin/solr -e techproducts",
    "hierarchy": [
      "Managed Resources"
    ],
    "pageId": 1085
  },
  {
    "content": "Let's begin learning about managed resources by looking at a couple of examples provided by Solr for\nmanaging stop words and synonyms using a REST API. After reading this section, you’ll be ready to dig into\nthe details of how managed resources are implemented in Solr so you can start building your own\nimplementation.",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview"
    ],
    "pageId": 1085
  },
  {
    "content": "To begin, you need to define a field type that uses the <span class=\"link\">ManagedStopFilterFactory</span>, such as:",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview",
      "Managing Stop Words"
    ],
    "pageId": 1085
  },
  {
    "content": "Ê <span class=\"fc3\"><analyzer></span>\nÊ   <span class=\"fc3\"><tokenizer</span> <span class=\"fc4\">class</span>=<span class=\"fc5\">\"solr.StandardTokenizerFactory\"<span class=\"fc3\">/></span></span>",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview",
      "Managing Stop Words"
    ],
    "pageId": 1085
  },
  {
    "content": "Ê <span class=\"fc3\"></analyzer></span>",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview",
      "Managing Stop Words"
    ],
    "pageId": 1085
  },
  {
    "content": "There are two important things to notice about this field type definition:",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview",
      "Managing Stop Words"
    ],
    "pageId": 1085
  },
  {
    "content": "The filter implementation class is <span class=\"code\">solr.ManagedStopFilterFactory</span>. This is a special implementation of\nthe <span class=\"link\">StopFilterFactory</span> that uses a set of stop words that are managed from a REST API.\nThe <span class=\"code\">managed=”english”</span> attribute gives a name to the set of managed stop words, in this case indicating\nthe stop words are for English text.",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview",
      "Managing Stop Words"
    ],
    "pageId": 1085
  },
  {
    "content": "The REST endpoint for managing the English stop words in the techproducts collection is:\n/solr/techproducts/schema/analysis/stopwords/english<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Managed Resources",
      "Managed Resources Overview",
      "Managing Stop Words"
    ],
    "pageId": 1085
  },
  {
    "content": "The example resource path should be mostly self-explanatory. It should be noted that the\nManagedStopFilterFactory implementation determines the <span class=\"ff2 fs1\">/schema/analysis/stopwords</span> part of the path,\nwhich makes sense because this is an analysis component defined by the schema.",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "It follows that a field type that uses the following filter:",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "Ê       <span class=\"fc2\">managed</span>=<span class=\"fc3\">\"french\"</span> <span class=\"fc1\">/></span>",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "would resolve to path: <span class=\"ff2 fs1\">/solr/techproducts/schema/analysis/stopwords/french</span>.",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "So now let's see this API in action, starting with a simple GET request:",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/english\"",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "Assuming you sent this request to Solr, the response body is a JSON document:",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "{\nÊ <span class=\"fc4\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc4\">\"status\"</span>:<span class=\"fc5\">0</span>,\nÊ   <span class=\"fc4\">\"QTime\"</span>:<span class=\"fc5\">1</span>\nÊ },\nÊ <span class=\"fc4\">\"wordSet\"</span>:{\nÊ   <span class=\"fc4\">\"initArgs\"</span>:{<span class=\"fc4\">\"ignoreCase\"</span>:<span class=\"fc6\">true</span>},\nÊ   <span class=\"fc4\">\"initializedOn\"</span>:<span class=\"fc3\">\"2014-03-28T20:53:53.058Z\"</span>,\nÊ   <span class=\"fc4\">\"managedList\"</span>:[\nÊ     <span class=\"fc3\">\"a\"</span>,\nÊ     <span class=\"fc3\">\"an\"</span>,\nÊ     <span class=\"fc3\">\"and\"</span>,\nÊ     <span class=\"fc3\">\"are\"</span>,\nÊ      ]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "The <span class=\"ff2 fs1\">sample_techproducts_configs</span> <span class=\"fc7\">configset</span> ships with a pre-built set of managed stop words, however\nyou should only interact with this file using the API and not edit it directly.",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "One thing that should stand out to you in this response is that it contains a <span class=\"ff2 fs1\">managedList</span> of words as well as\ninitArgs<span class=\"ff1 fs0\">. This is an important concept in this framework<span class=\"code\"> </span>—<span class=\"code\"> </span>managed resources typically have configuration</span>\nand data. For stop words, the only configuration parameter is a boolean that determines whether to ignore\nthe case of tokens during stop word filtering (ignoreCase=true|false). The data is a list of words, which is\nrepresented as a JSON array named <span class=\"ff2 fs1\">managedList</span> in the response.",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "Now, let's add a new word to the English stop word list using an HTTP PUT:",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "curl -X PUT -H 'Content-type:application/json' --data-binary '[\"foo\"]'\n\"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/english\"",
    "hierarchy": [
    ],
    "pageId": 1086
  },
  {
    "content": "Here we're using curl to PUT a JSON list containing a single word “foo” to the managed English stop words\nset. Solr will return 200 if the request was successful. You can also put multiple words in a single PUT\nrequest.",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "You can test to see if a specific word exists by sending a GET request for that word as a child resource of the\nset, such as:",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/english/foo\"",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "This request will return a status code of 200 if the child resource (foo) exists or 404 if it does not exist the\nmanaged list.",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "To delete a stop word, you would do:",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "curl -X DELETE \"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/english/foo\"",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "PUT/POST is used to add terms to an existing list instead of replacing the list entirely. This\nis because it is more common to add a term to an existing list than it is to replace a list\naltogether, so the API favors the more common approach of incrementally adding terms\nespecially since deleting individual terms is also supported.",
    "hierarchy": [
    ],
    "pageId": 1087
  },
  {
    "content": "For the most part, the API for managing synonyms behaves similar to the API for stop words, except instead\nof working with a list of words, it uses a map, where the value for each entry in the map is a set of synonyms\nfor a term. As with stop words, the <span class=\"ff2 fs2\">sample_techproducts_configs</span> <span class=\"link\">configset</span> includes a pre-built set of\nsynonym mappings suitable for the sample data that is activated by the following field type definition in\nschema.xml<span class=\"ff1 fs0\">:</span>",
    "hierarchy": [
      "Managing Synonyms"
    ],
    "pageId": 1087
  },
  {
    "content": "Ê <span class=\"fc4\"><analyzer</span> <span class=\"fc5\">type</span>=<span class=\"fc6\">\"index\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.StandardTokenizerFactory\"<span class=\"fc4\">/></span></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.ManagedStopFilterFactory\"</span> <span class=\"fc5\">managed</span>=<span class=\"fc6\">\"english\"</span> <span class=\"fc4\">/></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.ManagedSynonymGraphFilterFactory\"</span> <span class=\"fc5\">managed</span>=<span class=\"fc6\">\"english\"</span> <span class=\"fc4\">/></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.FlattenGraphFilterFactory\"<span class=\"fc4\">/></span></span> <span class=\"fc7\"><!-- required on index analyzers after graph</span>",
    "hierarchy": [
      "Managing Synonyms"
    ],
    "pageId": 1087
  },
  {
    "content": "Ê <span class=\"fc4\"></analyzer></span>\nÊ <span class=\"fc4\"><analyzer</span> <span class=\"fc5\">type</span>=<span class=\"fc6\">\"query\"<span class=\"fc4\">></span></span>\nÊ   <span class=\"fc4\"><tokenizer</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.StandardTokenizerFactory\"<span class=\"fc4\">/></span></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.ManagedStopFilterFactory\"</span> <span class=\"fc5\">managed</span>=<span class=\"fc6\">\"english\"</span> <span class=\"fc4\">/></span>\nÊ   <span class=\"fc4\"><filter</span> <span class=\"fc5\">class</span>=<span class=\"fc6\">\"solr.ManagedSynonymGraphFilterFactory\"</span> <span class=\"fc5\">managed</span>=<span class=\"fc6\">\"english\"</span> <span class=\"fc4\">/></span>\nÊ <span class=\"fc4\"></analyzer></span>",
    "hierarchy": [
      "Managing Synonyms"
    ],
    "pageId": 1087
  },
  {
    "content": "To get the map of managed synonyms, send a GET request to:",
    "hierarchy": [
      "Managing Synonyms"
    ],
    "pageId": 1087
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/schema/analysis/synonyms/english\"",
    "hierarchy": [
      "Managing Synonyms"
    ],
    "pageId": 1087
  },
  {
    "content": "This request will return a response that looks like:",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">3</span>},\nÊ <span class=\"fc1\">\"synonymMappings\"</span>:{\nÊ   <span class=\"fc1\">\"initArgs\"</span>:{\nÊ     <span class=\"fc1\">\"ignoreCase\"</span>:<span class=\"fc3\">true</span>,\nÊ     <span class=\"fc1\">\"format\"</span>:<span class=\"fc4\">\"solr\"</span>},\nÊ   <span class=\"fc1\">\"initializedOn\"</span>:<span class=\"fc4\">\"2014-12-16T22:44:05.33Z\"</span>,\nÊ   <span class=\"fc1\">\"managedMap\"</span>:{\nÊ     <span class=\"fc1\">\"GB\"</span>:\nÊ       [<span class=\"fc4\">\"GiB\"</span>,\nÊ        <span class=\"fc4\">\"Gigabyte\"</span>],\nÊ     <span class=\"fc1\">\"TV\"</span>:\nÊ       [<span class=\"fc4\">\"Television\"</span>],\nÊ     <span class=\"fc1\">\"happy\"</span>:\nÊ       [<span class=\"fc4\">\"glad\"</span>,\nÊ        <span class=\"fc4\">\"joyful\"</span>]}}}",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "Managed synonyms are returned under the <span class=\"ff2 fs1\">managedMap</span> property which contains a JSON Map where the\nvalue of each entry is a set of synonyms for a term, such as \"happy\" has synonyms \"glad\" and \"joyful\" in the\nexample above.",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "To add a new synonym mapping, you can PUT/POST a single mapping such as:",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "curl -X PUT -H 'Content-type:application/json' --data-binary '{\"mad\":[\"angry\",\"upset\"]}'\n\"http://localhost:8983/solr/techproducts/schema/analysis/synonyms/english\"",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "The API will return status code 200 if the PUT request was successful. To determine the synonyms for a\nspecific term, you send a GET request for the child resource, such as\n/schema/analysis/synonyms/english/mad<span class=\"ff1 fs0\"> would return </span>[\"angry\",\"upset\"]<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "You can also PUT a list of symmetric synonyms, which will be expanded into a mapping for each term in the\nlist. For example, you could PUT the following list of symmetric synonyms using the JSON list syntax instead\nof a map:",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "curl -X PUT -H 'Content-type:application/json' --data-binary '[\"funny\", \"entertaining\",\n\"whimiscal\", \"jocular\"]'\n\"http://localhost:8983/solr/techproducts/schema/analysis/synonyms/english\"",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "Note that the expansion is performed when processing the PUT request so the underlying persistent state is\nstill a managed map. Consequently, if after sending the previous PUT request, you did a GET for\n/schema/analysis/synonyms/english/jocular<span class=\"ff1 fs0\">, then you would receive a list containing </span>[\"funny\",\n\"entertaining\", \"whimiscal\"]<span class=\"ff1 fs0\">. Once you've created synonym mappings using a list, each term must be</span>\nmanaged separately.",
    "hierarchy": [
    ],
    "pageId": 1088
  },
  {
    "content": "Lastly, you can delete a mapping by sending a DELETE request to the managed endpoint.",
    "hierarchy": [
    ],
    "pageId": 1089
  },
  {
    "content": "Changes made to managed resources via this REST API are not applied to the active Solr components until\nthe Solr collection (or Solr core in single server mode) is reloaded.",
    "hierarchy": [
      "Applying Managed Resource Changes"
    ],
    "pageId": 1089
  },
  {
    "content": "For example: after adding or deleting a stop word, you must reload the core/collection before changes\nbecome active; related APIs: <span class=\"link\">CoreAdmin API</span> and <span class=\"link\">Collections API</span>.",
    "hierarchy": [
      "Applying Managed Resource Changes"
    ],
    "pageId": 1089
  },
  {
    "content": "This approach is required when running in distributed mode so that we are assured changes are applied to\nall cores in a collection at the same time so that behavior is consistent and predictable. It goes without\nsaying that you don't want one of your replicas working with a different set of stop words or synonyms than\nthe others.",
    "hierarchy": [
      "Applying Managed Resource Changes"
    ],
    "pageId": 1089
  },
  {
    "content": "One subtle outcome of this <span class=\"code\">apply-changes-at-reload</span> approach is that the once you make changes with the\nAPI, there is no way to read the active data. In other words, the API returns the most up-to-date data from\nan API perspective, which could be different than what is currently being used by Solr components.",
    "hierarchy": [
      "Applying Managed Resource Changes"
    ],
    "pageId": 1089
  },
  {
    "content": "However, the intent of this API implementation is that changes will be applied using a reload within a short\ntime frame after making them so the time in which the data returned by the API differs from what is active\nin the server is intended to be negligible.",
    "hierarchy": [
      "Applying Managed Resource Changes"
    ],
    "pageId": 1089
  },
  {
    "content": "Changing things like stop words and synonym mappings typically require re-indexing\nexisting documents if being used by index-time analyzers. The RestManager framework\ndoes not guard you from this, it simply makes it possible to programmatically build up a set\nof stop words, synonyms etc.",
    "hierarchy": [
      "Applying Managed Resource Changes"
    ],
    "pageId": 1089
  },
  {
    "content": "Metadata about registered ManagedResources is available using the <span class=\"ff5 fs3\">/schema/managed</span> endpoint for each\ncollection.",
    "hierarchy": [
      "RestManager Endpoint"
    ],
    "pageId": 1089
  },
  {
    "content": "Assuming you have the <span class=\"ff5 fs3\">managed_en</span> field type shown above defined in your <span class=\"ff5 fs3\">schema.xml</span>, sending a GET\nrequest to the following resource will return metadata about which schema-related resources are being\nmanaged by the RestManager:",
    "hierarchy": [
      "RestManager Endpoint"
    ],
    "pageId": 1089
  },
  {
    "content": "curl \"http://localhost:8983/solr/techproducts/schema/managed\"",
    "hierarchy": [
      "RestManager Endpoint"
    ],
    "pageId": 1089
  },
  {
    "content": "The response body is a JSON document containing metadata about managed resources under the /schema\nroot:",
    "hierarchy": [
      "RestManager Endpoint"
    ],
    "pageId": 1089
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc1\">\"status\"</span>:<span class=\"fc2\">0</span>,\nÊ   <span class=\"fc1\">\"QTime\"</span>:<span class=\"fc2\">3</span>\nÊ },\nÊ <span class=\"fc1\">\"managedResources\"</span>:[\nÊ   {\nÊ     <span class=\"fc1\">\"resourceId\"</span>:<span class=\"fc3\">\"/schema/analysis/stopwords/english\"</span>,\nÊ     <span class=\"fc1\">\"class\"</span>:<span class=\"fc3\">\"org.apache.solr.rest.schema.analysis.ManagedWordSetResource\"</span>,\nÊ     <span class=\"fc1\">\"numObservers\"</span>:<span class=\"fc3\">\"1\"</span>\nÊ   },\nÊ   {\nÊ     <span class=\"fc1\">\"resourceId\"</span>:<span class=\"fc3\">\"/schema/analysis/synonyms/english\"</span>,\nÊ     <span class=\"fc1\">\"class\"</span>:",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "Ê     <span class=\"fc1\">\"numObservers\"</span>:<span class=\"fc3\">\"1\"</span>\nÊ   }\nÊ ]\n}",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "You can also create new managed resource using PUT/POST to the appropriate URL – before ever\nconfiguring anything that uses these resources.",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "For example, imagine we want to build up a set of German stop words. Before we can start adding stop\nwords, we need to create the endpoint:",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "/solr/techproducts/schema/analysis/stopwords/german",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "To create this endpoint, send the following PUT/POST request to the endpoint we wish to create:",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "curl -X PUT -H 'Content-type:application/json' --data-binary \\\n'{\"class\":\"org.apache.solr.rest.schema.analysis.ManagedWordSetResource\"}' \\\n\"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/german\"",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "Solr will respond with status code 200 if the request is successful. Effectively, this action registers a new\nendpoint for a managed resource in the RestManager. From here you can start adding German stop words\nas we saw above:",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "curl -X PUT -H 'Content-type:application/json' --data-binary '[\"die\"]' \\\n\"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/german\"",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "For most users, creating resources in this way should never be necessary, since managed resources are\ncreated automatically when configured.",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "However, You may want to explicitly delete managed resources if they are no longer being used by a Solr\ncomponent.",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "For instance, the managed resource for German that we created above can be deleted because there are no\nSolr components that are using it, whereas the managed resource for English stop words cannot be deleted",
    "hierarchy": [
    ],
    "pageId": 1090
  },
  {
    "content": "because there is a token filter declared in <span class=\"ff2 fs1\">schema.xml</span> that is using it.",
    "hierarchy": [
    ],
    "pageId": 1091
  },
  {
    "content": "curl -X DELETE \"http://localhost:8983/solr/techproducts/schema/analysis/stopwords/german\"",
    "hierarchy": [
    ],
    "pageId": 1091
  },
  {
    "content": "Solr ships with many out-of-the-box RequestHandlers, which are called implicit because they are not\nconfigured in <span class=\"code\">solrconfig.xml</span>.",
    "hierarchy": [
      "Implicit RequestHandlers"
    ],
    "pageId": 1092
  },
  {
    "content": "These handlers have pre-defined default parameters, known as <span class=\"ff4\">paramsets</span>, which can be modified if\nnecessary.",
    "hierarchy": [
      "Implicit RequestHandlers"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/file\nShowFileRequestHa\nndler\n_ADMIN_FILE\nReturns content of files in <span class=\"code\">${solr.home}</span> <span class=\"code\">/conf/</span>.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/loggi\nng\nLoggingHandler\n_ADMIN_LOGGI\nNG\nRetrieve/modify registered loggers.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/luke\nLukeRequestHandle\nr\n_ADMIN_LUKE\nExpose the internal lucene index.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/mbean\ns\nSolrInfoMBeanHand\nler\n_ADMIN_MBEAN\nS\nProvide info about all registered <span class=\"link\">SolrInfoMBeans</span>.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/ping\nPingRequestHandler\n_ADMIN_PING\nHealth check.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/plugi\nns\nPluginInfoHandler<span class=\"fc1\">N/AReturn info about all registered plugins.</span>",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/prope\nrties\nPropertiesRequestH\nandler\n_ADMIN_PROPE\nRTIES\nReturn JRE system properties.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/segme\nnts\nSegmentsInfoReque\nstHandler\n_ADMIN_SEGME\nNTS\nReturn info on last commit generation Lucene index\nsegments.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/syste\nm\nSystemInfoHandler\n_ADMIN_SYSTE\nM\nReturn server statistics and settings",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/admin/threa\nds\nThreadDumpHandle\nr\n_ADMIN_THREA\nDS\nReturn info on all JVM threads.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/analysis/do\ncument\nDocumentAnalysisR\nequestHandler\n_ANALYSIS_DO\nCUMENT\nReturn a breakdown of the analysis process of the\ngiven document.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/analysis/fi\neld\nFieldAnalysisReques\ntHandler\n_ANALYSIS_FI\nELD\nReturn index- and query-time analysis over the given\nfield(s)/field type(s).",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/config\nSolrConfigHandler\n_CONFIG\nRetrieve/modify Solr configuration.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/debug/dump\nDumpRequestHandl\ner\n_DEBUG_DUMP\nEcho the request contents back to the client.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/export\nExportHandler\n_EXPORT\nExport full sorted result sets.",
    "hierarchy": [
      "Implicit RequestHandlers",
      "List of Implicitly Available Endpoints"
    ],
    "pageId": 1092
  },
  {
    "content": "/get\nRealTimeGetHandle\nr\n_GET\nReal-time get: low-latency retrieval of the latest\nversion of a document.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/graph\nGraphHandler\n_ADMIN_GRAPH\nReturn <span class=\"link\">GraphML</span> formatted output from a <span class=\"ff2 fs1\">gather</span>\nNodes<span class=\"link\"> streaming expression<span class=\"fc0\">.</span></span>",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/replication\nReplicationHandler\n_REPLICATION\nReplicate indexes for SolrCloud recovery and\nMaster/Slave index distribution.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/schema\nSchemaHandler\n_SCHEMA\nRetrieve/modify Solr schema.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/sql\nSQLHandler\n_SQL\nFront end of the Parallel SQL interface.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/stream\nStreamHandler\n_STREAM\nDistributed stream processing.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/terms\nSearchHandler\n_TERMS\nReturn a field's indexed terms and the number of\ndocuments containing each term.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/update\nUpdateRequestHan\ndler\n_UPDATE\nAdd, delete and update indexed documents\nformatted as SolrXML, CSV, SolrJSON or javabin.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/update/csv\nUpdateRequestHan\ndler\n_UPDATE_CSV\nAdd and update CSV-formatted documents.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/update/json\nUpdateRequestHan\ndler\n_UPDATE_JSON\nAdd, delete and update SolrJSON-formatted\ndocuments.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "/update/json\n/docs\nUpdateRequestHan\ndler\n_UPDATE_JSON\n_DOCS\nAdd and update custom JSON-formatted documents.",
    "hierarchy": [
    ],
    "pageId": 1093
  },
  {
    "content": "You can see configuration for all request handlers, including the implicit request handlers, via the <span class=\"link\">Config</span>\nAPI<span class=\"fc0\">. For the <span class=\"ff2 fs1\">gettingstarted</span> collection:</span>",
    "hierarchy": [
      "How to View the Configuration"
    ],
    "pageId": 1093
  },
  {
    "content": "curl http://localhost:8983/solr/gettingstarted/config/requestHandler",
    "hierarchy": [
      "How to View the Configuration"
    ],
    "pageId": 1093
  },
  {
    "content": "To restrict the results to the configuration for a particular request handler, use the <span class=\"ff2 fs1\">componentName</span> request\nparameter. To see just the configuration for the <span class=\"ff2 fs1\">/export</span> request handler:",
    "hierarchy": [
      "How to View the Configuration"
    ],
    "pageId": 1093
  },
  {
    "content": "curl \"http://localhost:8983/solr/gettingstarted/config/requestHandler?componentName=/export\"",
    "hierarchy": [
      "How to View the Configuration"
    ],
    "pageId": 1093
  },
  {
    "content": "To include the expanded paramset in the response, as well as the effective parameters from merging the\nparamset parameters with the built-in parameters, use the <span class=\"ff2 fs1\">expandParams</span> request param. For the <span class=\"ff2 fs1\">/export</span>\nrequest handler, you can make a request like this:",
    "hierarchy": [
      "How to View the Configuration"
    ],
    "pageId": 1093
  },
  {
    "content": "curl\n\"http://localhost:8983/solr/gettingstarted/config/requestHandler?componentName=/export&expandPara\nms=true\"",
    "hierarchy": [
    ],
    "pageId": 1094
  },
  {
    "content": "Because implicit request handlers are not present in <span class=\"ff1 fs2\">solrconfig.xml</span>, configuration of their associated\ndefault<span class=\"code\">, </span>invariant<span class=\"code\"> and </span>appends<span class=\"code\"> parameters may be edited via<span class=\"link\">ÊRequest Parameters API</span> using the paramset</span>\nlisted in the above table. However, other parameters, including SearchHandler components, may not be\nmodified. The invariants and appends specified in the implicit configuration cannot be overridden.",
    "hierarchy": [
      "How to Edit the Configuration"
    ],
    "pageId": 1094
  },
  {
    "content": "Solr allows you to load custom code to perform a variety of tasks within Solr, from custom Request Handlers\nto process your searches, to custom Analyzers and Token Filters for your text field. You can even load\ncustom Field Types. These pieces of custom code are called plugins.",
    "hierarchy": [
      "Solr Plugins"
    ],
    "pageId": 1095
  },
  {
    "content": "Not everyone will need to create plugins for their Solr instances - what's provided is usually enough for most\napplications. However, if there’s something that you need, you may want to review the Solr Wiki\ndocumentation on plugins at <span class=\"link\">SolrPlugins</span>.",
    "hierarchy": [
      "Solr Plugins"
    ],
    "pageId": 1095
  },
  {
    "content": "If you have a plugin you would like to use, and you are running in SolrCloud mode, you can use the Blob\nStore API and the Config API to load the jars to Solr. The commands to use are described in the section\nAdding Custom Plugins in SolrCloud Mode<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Solr Plugins"
    ],
    "pageId": 1095
  },
  {
    "content": "In SolrCloud mode, custom plugins need to be shared across all nodes of the cluster.",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode"
    ],
    "pageId": 1095
  },
  {
    "content": "When running Solr in SolrCloud mode and you want to use custom code (such as custom analyzers,\ntokenizers, query parsers, and other plugins), it can be cumbersome to add jars to the classpath on all nodes\nin your cluster. Using the <span class=\"link\">Blob Store API</span> and special commands with the <span class=\"link\">Config API</span>, you can upload jars to a\nspecial system-level collection and dynamically load plugins from them at runtime without needing to\nrestart any nodes.",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode"
    ],
    "pageId": 1095
  },
  {
    "content": "In addition to requiring that Solr is running in <span class=\"link\">SolrCloud</span> mode, this feature is also disabled\nby default unless all Solr nodes are run with the <span class=\"ff5 fs4\">-Denable.runtime.lib=true</span> option on\nstartup.",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode"
    ],
    "pageId": 1095
  },
  {
    "content": "Before enabling this feature, users should carefully consider the issues discussed in the\nSecuring Runtime Libraries<span class=\"fc1\"> section below.</span>",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode"
    ],
    "pageId": 1095
  },
  {
    "content": "The first step is to use the <span class=\"link\">Blob Store API</span> to upload your jar files. This will to put your jars in the <span class=\"ff5 fs4\">.system</span>\ncollection and distribute them across your SolrCloud nodes. These jars are added to a separate classloader\nand only accessible to components that are configured with the property <span class=\"ff5 fs4\">runtimeLib=true</span>. These\ncomponents are loaded lazily because the <span class=\"ff5 fs4\">.system</span> collection may not be loaded when a particular core is\nloaded.",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode",
      "Uploading Jar Files"
    ],
    "pageId": 1095
  },
  {
    "content": "The runtime library feature uses a special set of commands for the <span class=\"link\">Config API</span> to add, update, or remove jar\nfiles currently available in the blob store to the list of runtime libraries.",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode",
      "Config API Commands to use Jars as Runtime Libraries"
    ],
    "pageId": 1095
  },
  {
    "content": "The following commands are used to manage runtime libs:",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode",
      "Config API Commands to use Jars as Runtime Libraries"
    ],
    "pageId": 1095
  },
  {
    "content": "\nadd-runtimelib",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode",
      "Config API Commands to use Jars as Runtime Libraries"
    ],
    "pageId": 1095
  },
  {
    "content": "\nupdate-runtimelib",
    "hierarchy": [
      "Solr Plugins",
      "Adding Custom Plugins in SolrCloud Mode",
      "Config API Commands to use Jars as Runtime Libraries"
    ],
    "pageId": 1095
  },
  {
    "content": "\ndelete-runtimelib",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json' -d '{\nÊ  \"add-runtimelib\": { \"name\":\"jarblobname\", \"version\":2 },\nÊ  \"update-runtimelib\": { \"name\":\"jarblobname\", \"version\":3 },\nÊ  \"delete-runtimelib\": \"jarblobname\"\n}'",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "curl http://localhost:8983/api/collections/techproducts/config -H 'Content-\ntype:application/json' -d '{\nÊ  \"add-runtimelib\": { \"name\":\"jarblobname\", \"version\":2 },\nÊ  \"update-runtimelib\": { \"name\":\"jarblobname\", \"version\":3 },\nÊ  \"delete-runtimelib\": \"jarblobname\"\n}'",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "The name to use is the name of the blob that you specified when you uploaded your jar to the blob store.\nYou should also include the version of the jar found in the blob store that you want to use. These details are\nadded to <span class=\"ff2 fs1\">configoverlay.json</span>.",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "The default <span class=\"ff2 fs1\">SolrResourceLoader</span> does not have visibility to the jars that have been defined as runtime\nlibraries. There is a classloader that can access these jars which is made available only to those components\nwhich are specially annotated.",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "Every pluggable component can have an optional extra attribute called <span class=\"ff2 fs1\">runtimeLib=true</span>, which means that\nthe components are not loaded at core load time. Instead, they will be loaded on demand. If all the\ndependent jars are not available when the component is loaded, an error is thrown.",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "This example shows creating a ValueSourceParser using a jar that has been loaded to the Blob store.",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json' -d '{\nÊ \"create-valuesourceparser\": {\nÊ   \"name\": \"nvl\",\nÊ   \"runtimeLib\": true,\nÊ   \"class\": \"solr.org.apache.solr.search.function.NvlValueSourceParser,\nÊ   \"nvlFloatValue\": 0.0 }\n}'",
    "hierarchy": [
    ],
    "pageId": 1096
  },
  {
    "content": "curl http://localhost:8983/api/collections/techproducts/config -H 'Content-\ntype:application/json' -d '{\nÊ \"create-valuesourceparser\": {\nÊ   \"name\": \"nvl\",\nÊ   \"runtimeLib\": true,\nÊ   \"class\": \"solr.org.apache.solr.search.function.NvlValueSourceParser,\nÊ   \"nvlFloatValue\": 0.0 }\n}'",
    "hierarchy": [
    ],
    "pageId": 1097
  },
  {
    "content": "A drawback of this feature is that it could be used to load malicious executable code into the system.\nHowever, it is possible to restrict the system to load only trusted jars using <span class=\"link\">PKI</span> to verify that the executables\nloaded into the system are trustworthy.",
    "hierarchy": [
      "Securing Runtime Libraries"
    ],
    "pageId": 1097
  },
  {
    "content": "The following steps will allow you enable security for this feature. The instructions assume you have started\nall your Solr nodes with the <span class=\"ff2 fs2\">-Denable.runtime.lib=true</span>.",
    "hierarchy": [
      "Securing Runtime Libraries"
    ],
    "pageId": 1097
  },
  {
    "content": "The first step is to generate an RSA private key. The example below uses a 512-bit key, but you should use\nthe strength appropriate to your needs.",
    "hierarchy": [
      "Securing Runtime Libraries",
      "Step 1: Generate an RSA Private Key"
    ],
    "pageId": 1097
  },
  {
    "content": "$ openssl genrsa -out priv_key.pem 512",
    "hierarchy": [
      "Securing Runtime Libraries",
      "Step 1: Generate an RSA Private Key"
    ],
    "pageId": 1097
  },
  {
    "content": "The public portion of the key should be output in DER format so Java can read it.",
    "hierarchy": [
      "Securing Runtime Libraries",
      "Step 2: Output the Public Key"
    ],
    "pageId": 1097
  },
  {
    "content": "$ openssl rsa -in priv_key.pem -pubout -outform DER -out pub_key.der",
    "hierarchy": [
      "Securing Runtime Libraries",
      "Step 2: Output the Public Key"
    ],
    "pageId": 1097
  },
  {
    "content": "The <span class=\"ff2 fs2\">.der</span> files that are output from Step 2 should then be loaded to ZooKeeper under a node <span class=\"ff2 fs2\">/keys/exe</span> so\nthey are available throughout every node. You can load any number of public keys to that node and all are\nvalid. If a key is removed from the directory, the signatures of that key will cease to be valid. So, before\nremoving the a key, make sure to update your runtime library configurations with valid signatures with the\nupdate-runtimelib<span class=\"code\"> command.</span>",
    "hierarchy": [
      "Securing Runtime Libraries",
      "Step 3: Load the Key to ZooKeeper"
    ],
    "pageId": 1097
  },
  {
    "content": "At the current time, you can only use the ZooKeeper <span class=\"ff2 fs2\">zkCli.sh</span> (or <span class=\"ff2 fs2\">zkCli.cmd</span> on Windows) script to issue\nthese commands (the Solr version has the same name, but is not the same). If you have your own\nZooKeeper ensemble running already, you can find the script in <span class=\"ff2 fs2\">$ZK_INSTALL/bin/zkCli.sh</span> (or <span class=\"ff2 fs2\">zkCli.cmd</span> if\nyou are using Windows).",
    "hierarchy": [
      "Securing Runtime Libraries",
      "Step 3: Load the Key to ZooKeeper"
    ],
    "pageId": 1097
  },
  {
    "content": "If you are running the embedded ZooKeeper that is included with Solr, you <span class=\"code\">do not</span> have\nthis script already; in order to use it, you will need to download a copy of ZooKeeper v3.4.11\nfrom <span class=\"link\">http://zookeeper.apache.org/</span>. Don't worry about configuring the download, you’re\njust trying to get the command line utility script. When you start the script, you will connect\nto the embedded ZooKeeper.",
    "hierarchy": [
    ],
    "pageId": 1098
  },
  {
    "content": "To load the keys, you will need to connect to ZooKeeper with <span class=\"ff4 fs2\">zkCli.sh</span>, create the directories, and then\ncreate the key file, as in the following example.",
    "hierarchy": [
    ],
    "pageId": 1098
  },
  {
    "content": "# Connect to ZooKeeper\n# Replace the server location below with the correct ZooKeeper connect string for your\ninstallation.\n$ .bin/zkCli.sh -server localhost:9983",
    "hierarchy": [
    ],
    "pageId": 1098
  },
  {
    "content": "# After connection, you will interact with the ZK prompt.\n# Create the directories\n[zk: localhost:9983(CONNECTED) 5] create /keys\n[zk: localhost:9983(CONNECTED) 5] create /keys/exe",
    "hierarchy": [
    ],
    "pageId": 1098
  },
  {
    "content": "# Now create the public key file in ZooKeeper\n# The second path is the path to the .der file on your local machine\n[zk: localhost:9983(CONNECTED) 5] create /keys/exe/pub_key.der /myLocal/pathTo/pub_key.der",
    "hierarchy": [
    ],
    "pageId": 1098
  },
  {
    "content": "After this, any attempt to load a jar will fail. All your jars must be signed with one of your private keys for Solr\nto trust it. The process to sign your jars and use the signature is outlined in Steps 4-6.",
    "hierarchy": [
    ],
    "pageId": 1098
  },
  {
    "content": "Next you need to sign the sha1 digest of your jar file and get the base64 string.",
    "hierarchy": [
      "Step 4: Sign the jar File"
    ],
    "pageId": 1098
  },
  {
    "content": "$ openssl dgst -sha1 -sign priv_key.pem myjar.jar | openssl enc -base64",
    "hierarchy": [
      "Step 4: Sign the jar File"
    ],
    "pageId": 1098
  },
  {
    "content": "The output of this step will be a string that you will need to add the jar to your classpath in Step 6 below.",
    "hierarchy": [
      "Step 4: Sign the jar File"
    ],
    "pageId": 1098
  },
  {
    "content": "Load your jar to the Blob store, using the <span class=\"link\">Blob Store API</span>. This step does not require a signature; you will\nneed the signature in Step 6 to add it to your classpath.",
    "hierarchy": [
      "Step 5: Load the jar to the Blob Store"
    ],
    "pageId": 1098
  },
  {
    "content": "curl -X POST -H 'Content-Type: application/octet-stream' --data-binary @{filename}\nhttp://localhost:8983/solr/.system/blob/{blobname}",
    "hierarchy": [
      "Step 5: Load the jar to the Blob Store"
    ],
    "pageId": 1098
  },
  {
    "content": "The blob name that you give the jar file in this step will be used as the name in the next step.",
    "hierarchy": [
      "Step 5: Load the jar to the Blob Store"
    ],
    "pageId": 1098
  },
  {
    "content": "Finally, add the jar to the classpath using the Config API as detailed above. In this step, you will need to\nprovide the signature of the jar that you got in Step 4.",
    "hierarchy": [
      "Step 6: Add the jar to the Classpath"
    ],
    "pageId": 1098
  },
  {
    "content": "curl http://localhost:8983/solr/techproducts/config -H 'Content-type:application/json'  -d '{\nÊ \"add-runtimelib\": {\nÊ   \"name\":\"blobname\",\nÊ   \"version\":2,\nÊ\n\"sig\":\"mW1Gwtz2QazjfVdrLFHfbGwcr8xzFYgUOLu68LHqWRDvLG0uLcy1McQ+AzVmeZFBf1yLPDEHBWJb5KXr8bdbHN\n/\nÊ\nPYgUB1nsr9pk4EFyD9KfJ8TqeH/ijQ9waa/vjqyiKEI9U550EtSzruLVZ32wJ7smvV0fj2YYhrUaaPzOn9g0=\" }\n}'",
    "hierarchy": [
    ],
    "pageId": 1099
  },
  {
    "content": "curl http://localhost:8983/api/collections/techproducts/config -H 'Content-\ntype:application/json'  -d '{\nÊ \"add-runtimelib\": {\nÊ   \"name\":\"blobname\",\nÊ   \"version\":2,\nÊ\n\"sig\":\"mW1Gwtz2QazjfVdrLFHfbGwcr8xzFYgUOLu68LHqWRDvLG0uLcy1McQ+AzVmeZFBf1yLPDEHBWJb5KXr8bdbHN\n/\nÊ\nPYgUB1nsr9pk4EFyD9KfJ8TqeH/ijQ9waa/vjqyiKEI9U550EtSzruLVZ32wJ7smvV0fj2YYhrUaaPzOn9g0=\" }\n}'",
    "hierarchy": [
    ],
    "pageId": 1099
  },
  {
    "content": "Optimizing the JVM can be a key factor in getting the most from your Solr installation.",
    "hierarchy": [
      "JVM Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "Configuring your JVM can be a complex topic and a full discussion is beyond the scope of this document.\nLuckily, most modern JVMs are quite good at making the best use of available resources with default\nsettings. The following sections contain a few tips that may be helpful when the defaults are not optimal for\nyour situation.",
    "hierarchy": [
      "JVM Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "For more general information about improving Solr performance, see <span class=\"link\">https://wiki.apache.org/solr/</span>\nSolrPerformanceFactors<span class=\"fc1\">.</span>",
    "hierarchy": [
      "JVM Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "The most important JVM configuration settings are those that determine the amount of memory it is allowed\nto allocate. There are two primary command-line options that set memory limits for the JVM. These are <span class=\"code\">-Xms</span>,\nwhich sets the initial size of the JVM's memory heap, and <span class=\"code\">-Xmx</span>, which sets the maximum size to which the\nheap is allowed to grow.",
    "hierarchy": [
      "JVM Settings",
      "Choosing Memory Heap Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "If your Solr application requires more heap space than you specify with the <span class=\"code\">-Xms</span> option, the heap will grow\nautomatically. It's quite reasonable to not specify an initial size and let the heap grow as needed. The only\ndownside is a somewhat slower startup time since the application will take longer to initialize. Setting the\ninitial heap size higher than the default may avoid a series of heap expansions, which often results in objects\nbeing shuffled around within the heap, as the application spins up.",
    "hierarchy": [
      "JVM Settings",
      "Choosing Memory Heap Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "The maximum heap size, set with <span class=\"code\">-Xmx</span>, is more critical. If the memory heap grows to this size, object\ncreation may begin to fail and throw <span class=\"code\">OutOfMemoryException</span>. Setting this limit too low can cause spurious\nerrors in your application, but setting it too high can be detrimental as well.",
    "hierarchy": [
      "JVM Settings",
      "Choosing Memory Heap Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "It doesn't always cause an error when the heap reaches the maximum size. Before an error is raised, the\nJVM will first try to reclaim any available space that already exists in the heap. Only if all garbage collection\nattempts fail will your application see an exception. As long as the maximum is big enough, your app will run\nwithout error, but it may run more slowly if forced garbage collection kicks in frequently.",
    "hierarchy": [
      "JVM Settings",
      "Choosing Memory Heap Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "The larger the heap the longer it takes to do garbage collection. This can mean minor, random pauses or, in\nextreme cases, \"freeze the world\" pauses of a minute or more. As a practical matter, this can become a\nserious problem for heap sizes that exceed about two gigabytes, even if far more physical memory is\navailable. On robust hardware, you may get better results running multiple JVMs, rather than just one with a\nlarge memory heap. Some specialized JVM implementations may have customized garbage collection\nalgorithms that do better with large heaps. Consult your JVM vendor's documentation.",
    "hierarchy": [
      "JVM Settings",
      "Choosing Memory Heap Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "When setting the maximum heap size, be careful not to let the JVM consume all available physical memory.\nIf the JVM process space grows too large, the operating system will start swapping it, which will severely\nimpact performance. In addition, the operating system uses memory space not allocated to processes for\nfile system cache and other purposes. This is especially important for I/O-intensive applications, like\nLucene/Solr. The larger your indexes, the more you will benefit from filesystem caching by the OS. It may\nrequire some experimentation to determine the optimal tradeoff between heap space for the JVM and\nmemory space for the OS to use.",
    "hierarchy": [
      "JVM Settings",
      "Choosing Memory Heap Settings"
    ],
    "pageId": 1100
  },
  {
    "content": "On systems with many CPUs/cores, it can also be beneficial to tune the layout of the heap and/or the\nbehavior of the garbage collector. Adjusting the relative sizes of the generational pools in the heap can\naffect how often GC sweeps occur and whether they run concurrently. Configuring the various settings of\nhow the garbage collector should behave can greatly reduce the overall performance impact when it does\nrun. There is a lot of good information on this topic available on Sun's website. A good place to start is here:\nOracle’s Java HotSpot Garbage Collection<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1101
  },
  {
    "content": "If you are using Sun's JVM, add the <span class=\"code\">-server</span> command-line option when you start Solr. This tells the JVM that\nit should optimize for a long running, server process. If the Java runtime on your system is a JRE, rather than\na full JDK distribution (including <span class=\"code\">javac</span> and other development tools), then it is possible that it may not\nsupport the <span class=\"code\">-server</span> JVM option. Test this by running <span class=\"code\">java -help</span> and look for <span class=\"code\">-server</span> as an available\noption in the displayed usage message.",
    "hierarchy": [
      "Use the Server HotSpot VM"
    ],
    "pageId": 1101
  },
  {
    "content": "A great way to see what JVM settings your server is using, along with other useful information, is to use the\nadmin RequestHandler, <span class=\"code\">solr/admin/system</span>. This request handler will display a wealth of server statistics\nand settings.",
    "hierarchy": [
      "Checking JVM Settings"
    ],
    "pageId": 1101
  },
  {
    "content": "You can also use any of the tools that are compatible with the Java Management Extensions (JMX). See the\nsection <span class=\"link\">Using JMX with Solr</span> for more information.",
    "hierarchy": [
      "Checking JVM Settings"
    ],
    "pageId": 1101
  },
  {
    "content": "The v2 API is a modernized self-documenting API interface covering most current Solr APIs. It is anticipated\nthat once the v2 API reaches full coverage, and Solr-internal API usages like SolrJ and the Admin UI have\nbeen converted from the old API to the v2 API, the old API will eventually be retired.",
    "hierarchy": [
      "v2 API"
    ],
    "pageId": 1102
  },
  {
    "content": "For now the two API styles will coexist, and all the old APIs will continue to work without any change. You can\ndisable all v2 API endpoints by starting your servers with this system property: <span class=\"code\">-Ddisable.v2.api=true</span>.",
    "hierarchy": [
      "v2 API"
    ],
    "pageId": 1102
  },
  {
    "content": "The old API and the v2 API differ in three principle ways:",
    "hierarchy": [
      "v2 API"
    ],
    "pageId": 1102
  },
  {
    "content": "1.Command format: The old API commands and associated parameters are provided through URL request\nparameters on HTTP GET requests, while in the v2 API most API commands are provided via a JSON body\nPOST'ed to v2 API endpoints. The v2 API also supports HTTP methods GET and DELETE where\nappropriate.",
    "hierarchy": [
      "v2 API"
    ],
    "pageId": 1102
  },
  {
    "content": "2.Endpoint structure: The v2 API endpoint structure has been rationalized and regularized.\n3.Documentation: The v2 APIs are self-documenting: append <span class=\"code\">/_introspect</span> to any valid v2 API path and\nthe API specification will be returned in JSON format.",
    "hierarchy": [
      "v2 API"
    ],
    "pageId": 1102
  },
  {
    "content": "Following are some v2 API URL paths and path prefixes, along with some of the operations that are\nsupported at these paths and their sub-paths.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/collections<span class=\"ff2 fs1\"> or equivalently: </span>/api/c<span class=\"ff2 fs1\">Create, alias, backup, and restore a collection.</span>",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/update\nUpdate requests.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/config\nConfiguration requests.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/schema\nSchema requests.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/handler-name\nHandler-specific requests.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/shards\nSplit a shard, create a shard, add a replica.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/shards/shard-name\nDelete a shard, force leader election",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/collection-name/shards/shard-name\n/replica-name\nDelete a replica.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/cores\nCreate a core.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/cores/core-name\nReload, rename, delete, and unload a core.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/node\nPerform overseer operation, rejoin leader election.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/cluster\nAdd role, remove role, set cluster property.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "/api/c/.system/blob\nUpload and download blobs and metadata.",
    "hierarchy": [
      "v2 API",
      "v2 API Path Prefixes"
    ],
    "pageId": 1102
  },
  {
    "content": "Append <span class=\"code\">/_introspect</span> to any valid v2 API path and the API specification will be returned in JSON format.",
    "hierarchy": [
      "Introspect"
    ],
    "pageId": 1103
  },
  {
    "content": "http://localhost:8983/api/c/_introspect",
    "hierarchy": [
      "Introspect"
    ],
    "pageId": 1103
  },
  {
    "content": "To limit the introspect output to include just one particular HTTP method, add request param <span class=\"code\">method</span> with\nvalue <span class=\"code\">GET</span>, <span class=\"code\">POST</span>, or <span class=\"code\">DELETE</span>.",
    "hierarchy": [
      "Introspect"
    ],
    "pageId": 1103
  },
  {
    "content": "http://localhost:8983/api/c/_introspect?method=POST",
    "hierarchy": [
      "Introspect"
    ],
    "pageId": 1103
  },
  {
    "content": "Most endpoints support commands provided in a body sent via POST. To limit the introspect output to only\none command, add request param <span class=\"code\">command=command-name</span>.",
    "hierarchy": [
      "Introspect"
    ],
    "pageId": 1103
  },
  {
    "content": "http://localhost:8983/api/c/gettingstarted/_introspect?method=POST&command=modify",
    "hierarchy": [
      "Introspect"
    ],
    "pageId": 1103
  },
  {
    "content": "Example: <span class=\"code\">http://localhost:8983/api/c/gettingstarted/get/_introspect</span>",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"spec\"</span>:[{\nÊ     <span class=\"fc2\">\"documentation\"</span>:<span class=\"fc3\">\"https://lucene.apache.org/solr/guide/real-time-get.html\"</span>,\nÊ     <span class=\"fc2\">\"description\"</span>:<span class=\"fc3\">\"RealTime Get allows retrieving documents by ID before the documents have</span>",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "Ê     <span class=\"fc2\">\"methods\"</span>:[<span class=\"fc3\">\"GET\"</span>],\nÊ     <span class=\"fc2\">\"url\"</span>:{\nÊ       <span class=\"fc2\">\"paths\"</span>:[<span class=\"fc3\">\"/c/gettingstarted/get\"</span>],\nÊ       <span class=\"fc2\">\"params\"</span>:{\nÊ         <span class=\"fc2\">\"id\"</span>:{\nÊ           <span class=\"fc2\">\"type\"</span>:<span class=\"fc3\">\"string\"</span>,\nÊ           <span class=\"fc2\">\"description\"</span>:<span class=\"fc3\">\"A single document ID to retrieve.\"</span>},\nÊ         <span class=\"fc2\">\"ids\"</span>:{\nÊ           <span class=\"fc2\">\"type\"</span>:<span class=\"fc3\">\"string\"</span>,\nÊ           <span class=\"fc2\">\"description\"</span>:<span class=\"fc3\">\"One or more document IDs to retrieve. Separate by commas if more than</span>",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "Ê         <span class=\"fc2\">\"fq\"</span>:{\nÊ           <span class=\"fc2\">\"type\"</span>:<span class=\"fc3\">\"string\"</span>,\nÊ           <span class=\"fc2\">\"description\"</span>:<span class=\"fc3\">\"An optional filter query to add to the query. One use case for this is</span>",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "Ê <span class=\"fc2\">\"WARNING\"</span>:<span class=\"fc3\">\"This response format is experimental.  It is likely to change in the future.\"</span>,\nÊ <span class=\"fc2\">\"availableSubPaths\"</span>:{}\n}",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "Description of some of the keys in the above example:",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "documentation: URL to the online Solr reference guide section for this API",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "description: A text description of the feature/variable/command etc.",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "spec/methods: HTTP methods supported by this API",
    "hierarchy": [
      "Introspect",
      "Interpreting the Introspect Output"
    ],
    "pageId": 1103
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">spec/url/paths</span><span class=\"ls1\">: URL paths supported by this API</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">spec/url/params</span><span class=\"ls1\">: List of supported URL request params</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">availableSubPaths</span><span class=\"ls1\">: List of valid URL subpaths and the HTTP method(s) each supports</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Example of introspect for a POST API:\nhttp://localhost:8983/api/c/gettingstarted/_introspect?method=POST&command=modify",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"spec\"</span>:[{\nÊ     <span class=\"fc1\">\"documentation\"</span>:<span class=\"fc2\">\"https://lucene.apache.org/solr/guide/collections-api.html\"</span>,\nÊ     <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"Several collection-level operations are supported with this endpoint: modify</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê     <span class=\"fc1\">\"methods\"</span>:[<span class=\"fc2\">\"POST\"</span>],\nÊ     <span class=\"fc1\">\"url\"</span>:{<span class=\"fc1\">\"paths\"</span>:[<span class=\"fc2\">\"/collections/{collection}\"</span>,\nÊ         <span class=\"fc2\">\"/c/{collection}\"</span>]},\nÊ     <span class=\"fc1\">\"commands\"</span>:{<span class=\"fc1\">\"modify\"</span>:{\nÊ         <span class=\"fc1\">\"documentation\"</span>:<span class=\"fc2\">\"https://lucene.apache.org/solr/guide/collections-</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê         <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"Modifies specific attributes of a collection. Multiple attributes can be</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê         <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"object\"</span>,\nÊ         <span class=\"fc1\">\"properties\"</span>:{\nÊ           <span class=\"fc1\">\"rule\"</span>:{\nÊ             <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"array\"</span>,\nÊ             <span class=\"fc1\">\"documentation\"</span>:<span class=\"fc2\">\"https://lucene.apache.org/solr/guide/rule-based-replica-</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê             <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"Modifies the rules for where replicas should be located in a</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê             <span class=\"fc1\">\"items\"</span>:{<span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"string\"</span>}},\nÊ           <span class=\"fc1\">\"snitch\"</span>:{\nÊ             <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"array\"</span>,\nÊ             <span class=\"fc1\">\"documentation\"</span>:<span class=\"fc2\">\"https://lucene.apache.org/solr/guide/rule-based-replica-</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê             <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"Details of the snitch provider\"</span>,\nÊ             <span class=\"fc1\">\"items\"</span>:{<span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"string\"</span>}},\nÊ           <span class=\"fc1\">\"autoAddReplicas\"</span>:{\nÊ             <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"boolean\"</span>,\nÊ             <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"When set to true, enables auto addition of replicas on shared file</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê           <span class=\"fc1\">\"replicationFactor\"</span>:{\nÊ             <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"string\"</span>,\nÊ             <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"The number of replicas to be created for each shard. Replicas are</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê           <span class=\"fc1\">\"maxShardsPerNode\"</span>:{\nÊ             <span class=\"fc1\">\"type\"</span>:<span class=\"fc2\">\"integer\"</span>,\nÊ             <span class=\"fc1\">\"description\"</span>:<span class=\"fc2\">\"When creating collections, the shards and/or replicas are spread</span>",
    "hierarchy": [
    ],
    "pageId": 1104
  },
  {
    "content": "Ê <span class=\"fc2\">\"WARNING\"</span>:<span class=\"fc0\">\"This response format is experimental.  It is likely to change in the future.\"</span>,\nÊ <span class=\"fc2\">\"availableSubPaths\"</span>:{\nÊ   <span class=\"fc2\">\"/c/gettingstarted/select\"</span>:[<span class=\"fc0\">\"POST\"</span>, <span class=\"fc0\">\"GET\"</span>],\nÊ   <span class=\"fc2\">\"/c/gettingstarted/config\"</span>:[<span class=\"fc0\">\"POST\"</span>, <span class=\"fc0\">\"GET\"</span>],\nÊ   <span class=\"fc2\">\"/c/gettingstarted/schema\"</span>:[<span class=\"fc0\">\"POST\"</span>, <span class=\"fc0\">\"GET\"</span>],\nÊ   <span class=\"fc2\">\"/c/gettingstarted/export\"</span>:[<span class=\"fc0\">\"POST\"</span>, <span class=\"fc0\">\"GET\"</span>],\nÊ   <span class=\"fc2\">\"/c/gettingstarted/admin/ping\"</span>:[<span class=\"fc0\">\"POST\"</span>, <span class=\"fc0\">\"GET\"</span>],\nÊ   <span class=\"fc2\">\"/c/gettingstarted/update\"</span>:[<span class=\"fc0\">\"POST\"</span>]}\n}",
    "hierarchy": [
    ],
    "pageId": 1105
  },
  {
    "content": "The <span class=\"ff1 fs1\">\"commands\"</span> section in the above example has one entry for each command supported at this endpoint.\nThe key is the command name and the value is a json object describing the command structure using JSON\nschema (see <span class=\"link\">http://json-schema.org/</span> for a description).",
    "hierarchy": [
    ],
    "pageId": 1105
  },
  {
    "content": "For the \"gettingstarted\" collection, set the replication factor and whether to automatically add replicas (see\nabove for the introspect output for the <span class=\"ff1 fs1\">\"modify\"</span> command used here):",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "$ curl http://localhost:8983/api/c/gettingstarted -H 'Content-type:application/json' -d '\n{ modify: { replicationFactor: \"3\", autoAddReplicas: false } }'",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "{\"responseHeader\":{\"status\":0,\"QTime\":842}}",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "See the state of the cluster:",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "$ curl http://localhost:8983/api/cluster",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "{\"responseHeader\":{\"status\":0,\"QTime\":0},\"collections\":[\"gettingstarted\",\".system\"]}",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "Set a cluster property:",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "$ curl http://localhost:8983/api/cluster -H 'Content-type: application/json' -d '\n{ set-property: { name: autoAddReplicas, val: \"false\" } }'",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "{\"responseHeader\":{\"status\":0,\"QTime\":4}}",
    "hierarchy": [
      "Invocation Examples"
    ],
    "pageId": 1105
  },
  {
    "content": "Administration and monitoring can be performed using the web-based administration console, through the\ncommand line interface, or using REST APIs.",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Common administrative tasks include:",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Metrics Reporting<span class=\"fc1\">: Details of Solr's metrics registries and Metrics API.</span>",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "MBean Request Handler<span class=\"fc1\">: How to use Solr's MBeans for programmatic access to the system plugins and</span>\nstats.",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Configuring Logging<span class=\"fc1\">: Describes how to configure logging for Solr.</span>",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Using JMX with Solr<span class=\"fc1\">: Describes how to use Java Management Extensions with Solr.</span>",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Monitoring Solr with Prometheus and Grafana<span class=\"fc1\">: Describes how to monitor Solr with Prometheus and</span>\nGrafana.",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Performance Statistics Reference<span class=\"fc1\">: Additional information on statistics returned from JMX.</span>",
    "hierarchy": [
      "Monitoring Solr"
    ],
    "pageId": 1106
  },
  {
    "content": "Solr includes a developer API and instrumentation for the collection of detailed performance-oriented\nmetrics throughout the life-cycle of Solr service and its various components.",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "Internally this feature uses the <span class=\"link\">Dropwizard Metrics API</span>, which uses the following classes of meters to\nmeasure events:",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "counters<span class=\"ff2\"> - simply count events. They provide a single long value, e.g., the number of requests.</span>",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "meters<span class=\"ff2\"> - additionally compute rates of events. Provide a count (as above) and 1-, 5-, and 15-minute</span>\nexponentially decaying rates, similar to the Unix system load average.",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "histograms<span class=\"ff2\"> - calculate approximate distribution of events according to their values. Provide the</span>\nfollowing approximate statistics, with a similar exponential decay as above: mean (arithmetic average),\nmedian, maximum, minimum, standard deviation, and 75\n, 95\n, 98\n, 99\n and 999\n percentiles.\n•timers<span class=\"ff2\"> - measure the number and duration of events. They provide a count and histogram of timings.</span>",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "gauges<span class=\"ff2\"> - offer instantaneous reading of a current value, e.g., current queue depth, current number of</span>\nactive connections, free heap size.",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "Each group of related metrics with unique names is managed in a <span class=\"ff1\">metric registry</span>. Solr maintains several\nsuch registries, each corresponding to a high-level group such as: <span class=\"code\">jvm</span>, <span class=\"code\">jetty</span>, <span class=\"code\">node</span>, and <span class=\"code\">core</span> (see <span class=\"link\">Metric</span>\nRegistries<span class=\"fc1\"> below).</span>",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "For each group (and/or for each registry) there can be several <span class=\"ff1\">reporters</span>, which are components responsible\nfor communication of metrics from selected registries to external systems. Currently implemented reporters\nsupport emitting metrics via JMX, Ganglia, Graphite and SLF4J.",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "There is also a dedicated <span class=\"code\">/admin/metrics</span> handler that can be queried to report all or a subset of the current\nmetrics from multiple registries.",
    "hierarchy": [
      "Metrics Reporting"
    ],
    "pageId": 1107
  },
  {
    "content": "Solr includes multiple metric registries, which group related metrics.",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries"
    ],
    "pageId": 1107
  },
  {
    "content": "Metrics are maintained and accumulated through all lifecycles of components from the start of the process\nuntil its shutdown - e.g., metrics for a particular SolrCore are tracked through possibly several load, unload\nand/or rename operations, and are deleted only when a core is explicitly deleted. However, metrics are not\npersisted across process restarts; restarting Solr will discard all collected metrics.",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries"
    ],
    "pageId": 1107
  },
  {
    "content": "These are the major groups of metrics that are collected:",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries"
    ],
    "pageId": 1107
  },
  {
    "content": "This registry is returned at <span class=\"code\">solr.jvm</span> and includes the following information. When making requests with the\nMetrics API<span class=\"fc1\">, you can specify <span class=\"code\">&group=jvm</span> to limit to only these metrics.</span>",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries",
      "JVM Registry"
    ],
    "pageId": 1107
  },
  {
    "content": "direct and mapped buffer pools",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries",
      "JVM Registry"
    ],
    "pageId": 1107
  },
  {
    "content": "class loading / unloading",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries",
      "JVM Registry"
    ],
    "pageId": 1107
  },
  {
    "content": "OS memory, CPU time, file descriptors, swap, system load",
    "hierarchy": [
      "Metrics Reporting",
      "Metric Registries",
      "JVM Registry"
    ],
    "pageId": 1107
  },
  {
    "content": "<span class=\"ls1\">GC count and time</span>",
    "hierarchy": [
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">heap, non-heap memory and GC pools</span>",
    "hierarchy": [
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">number of threads, their states and deadlocks</span>",
    "hierarchy": [
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">System properties such as Java information, various installation directory paths, ports, and similar</span>\ninformation. You can control what appears here by modifying <span class=\"ff2 fs1\">solr.xml</span>.",
    "hierarchy": [
    ],
    "pageId": 1108
  },
  {
    "content": "This registry is returned at <span class=\"ff2 fs1\">solr.node</span> and includes the following information. When making requests with\nthe <span class=\"link\">Metrics API</span>, you can specify <span class=\"ff2 fs1\">&group=node</span> to limit to only these metrics.",
    "hierarchy": [
      "Node / CoreContainer Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">handler requests (count, timing): collections, info, admin, configSets, etc.</span>",
    "hierarchy": [
      "Node / CoreContainer Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">number of cores (loaded, lazy, unloaded)</span>",
    "hierarchy": [
      "Node / CoreContainer Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "The <span class=\"link\">Core (SolrCore) Registry</span> includes <span class=\"ff2 fs1\">solr.core.<collection></span>, one for each core. When making requests\nwith the <span class=\"link\">Metrics API</span>, you can specify <span class=\"ff2 fs1\">&group=core</span> to limit to only these metrics.",
    "hierarchy": [
      "Core (SolrCore) Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">all common RequestHandlers report: request timers / counters, timeouts, errors. Handlers that support</span>\nprocess distributed shard requests also report <span class=\"ff2 fs1\">shardRequests</span> sub-counters for each type of distributed\nrequest.",
    "hierarchy": [
      "Core (SolrCore) Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"link\">index-level events<span class=\"fc0\">: meters for minor / major merges, number of merged docs, number of deleted docs,</span></span>\ngauges for currently running merges and their size.",
    "hierarchy": [
      "Core (SolrCore) Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">shard replication and transaction log replay on replicas (TBD, SOLR-9856)</span>",
    "hierarchy": [
      "Core (SolrCore) Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">open / available / pending connections for shard handler and update handler</span>",
    "hierarchy": [
      "Core (SolrCore) Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "This registry is returned at <span class=\"ff2 fs1\">solr.jetty</span> and includes the following information. When making requests with\nthe <span class=\"link\">Metrics API</span>, you can specify <span class=\"ff2 fs1\">&group=jetty</span> to limit to only these metrics.",
    "hierarchy": [
      "Jetty Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">threads and pools,</span>",
    "hierarchy": [
      "Jetty Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">connection and request timers,</span>",
    "hierarchy": [
      "Jetty Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "<span class=\"ls1\">meters for responses by HTTP class (1xx, 2xx, etc.)</span>",
    "hierarchy": [
      "Jetty Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "In the future, metrics will be added for shard leaders and cluster nodes, including aggregations from per-\ncore metrics.",
    "hierarchy": [
      "Jetty Registry"
    ],
    "pageId": 1108
  },
  {
    "content": "The metrics available in your system can be customized by modifying the <span class=\"ff2 fs1\"><metrics></span> element in <span class=\"ff2 fs1\">solr.xml</span>.",
    "hierarchy": [
      "Metrics Configuration"
    ],
    "pageId": 1108
  },
  {
    "content": "See also the section <span class=\"link\">Format of Solr.xml</span> for more information about the <span class=\"ff2 fs1\">solr.xml</span> file,\nwhere to find it, and how to edit it.",
    "hierarchy": [
      "Metrics Configuration"
    ],
    "pageId": 1108
  },
  {
    "content": "This section of <span class=\"code\">solr.xml</span> allows you to define the system properties which are considered system-sensitive\nand should not be exposed via the Metrics API.",
    "hierarchy": [
      "The <metrics><hiddenSysProps> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "If this section is not defined, the following default configuration is used which hides password and\nauthentication information:",
    "hierarchy": [
      "The <metrics><hiddenSysProps> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "Ê <span class=\"fc2\"><hiddenSysProps></span>\nÊ   <span class=\"fc2\"><str></span>javax.net.ssl.keyStorePassword<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str></span>javax.net.ssl.trustStorePassword<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str></span>basicauth<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str></span>zkDigestPassword<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"><str></span>zkDigestReadonlyPassword<span class=\"fc2\"></str></span>\nÊ <span class=\"fc2\"></hiddenSysProps></span>",
    "hierarchy": [
      "The <metrics><hiddenSysProps> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "Reporters consume the metrics data generated by Solr. See the section <span class=\"link\">Reporters</span> below for more details on\nhow to configure custom reporters.",
    "hierarchy": [
      "The <metrics><reporters> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "Suppliers help Solr generate metrics data. The <span class=\"code\"><metrics><suppliers></span> section of <span class=\"code\">solr.xml</span> allows you to\ndefine your own implementations of metrics and configure parameters for them.",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "Implementation of a custom metrics supplier is beyond the scope of this guide, but there are other\ncustomizations possible with the default implementation, via the elements described below.",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "<counter>\nThis element defines the implementation and configuration of a <span class=\"code\">Counter</span> supplier. The default\nimplementation does not support any configuration.",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "<meter>\nThis element defines the implementation of a <span class=\"code\">Meter</span> supplier. The default implementation supports an\nadditional parameter:",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "<str name=\"clock\">\nThe type of clock to use for calculating EWMA rates. The supported values are:",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "user, the default, which uses <span class=\"code\">System.nanoTime()</span>\n•cpu, which uses the current thread's CPU time",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "<histogram>\nThis element defines the implementation of a <span class=\"code\">Histogram</span> supplier. This element also supports the <span class=\"code\">clock</span>\nparameter shown above with the <span class=\"code\">meter</span> element, and also:",
    "hierarchy": [
      "The <metrics><suppliers> Element"
    ],
    "pageId": 1109
  },
  {
    "content": "<str name=\"reservoir\">\nThe fully-qualified class name of the <span class=\"ff1 fs0\">Reservoir</span> implementation to use. The default is\ncom.codahale.metrics.ExponentiallyDecayingReservoir<span class=\"ff2 fs1\"> but there are other options available with</span>\nthe <span class=\"link\">Codahale Metrics library</span> that Solr uses. The following parameters are supported, within the\nmentioned limitations:",
    "hierarchy": [
    ],
    "pageId": 1110
  },
  {
    "content": "size, the reservoir size. The default is 1028.\n•alpha, the decay parameter. The default is 0.015. This is only valid for the\nExponentiallyDecayingReservoir<span class=\"ff2 fs1\">.</span>\n•window, the window size, in seconds, and only valid for the <span class=\"ff1 fs0\">SlidingTimeWindowReservoir</span>. The\ndefault is 300 (5 minutes).",
    "hierarchy": [
    ],
    "pageId": 1110
  },
  {
    "content": "<timer>\nThis element defines an implementation of a <span class=\"ff1 fs0\">Timer</span> supplier. The default implementation supports the\nclock<span class=\"ff2 fs1\"> and </span>reservoir<span class=\"ff2 fs1\"> parameters described above.</span>",
    "hierarchy": [
    ],
    "pageId": 1110
  },
  {
    "content": "As an example of a section of <span class=\"ff1 fs0\">solr.xml</span> that defines some of these custom parameters, the following defines\nthe default <span class=\"ff1 fs0\">Meter</span> supplier with a non-default <span class=\"ff1 fs0\">clock</span> and the default <span class=\"ff1 fs0\">Timer</span> is used with a non-default\nreservoir:",
    "hierarchy": [
    ],
    "pageId": 1110
  },
  {
    "content": "Ê <span class=\"fc2\"><suppliers></span>\nÊ   <span class=\"fc2\"><meter></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"clock\"<span class=\"fc2\">></span></span>cpu<span class=\"fc2\"></str></span>\nÊ   <span class=\"fc2\"></meter></span>\nÊ   <span class=\"fc2\"><timer></span>\nÊ     <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"reservoir\"<span class=\"fc2\">></span></span>com.codahale.metrics.SlidingTimeWindowReservoir<span class=\"fc2\"></str></span>\nÊ     <span class=\"fc2\"><long</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"window\"<span class=\"fc2\">></span></span>600<span class=\"fc2\"></long></span>\nÊ   <span class=\"fc2\"></timer></span>\nÊ <span class=\"fc2\"></suppliers></span>",
    "hierarchy": [
    ],
    "pageId": 1110
  },
  {
    "content": "Reporter configurations are specified in <span class=\"ff1 fs0\">solr.xml</span> file in <span class=\"ff1 fs0\"><metrics><reporter></span> sections, for example:",
    "hierarchy": [
      "Reporters"
    ],
    "pageId": 1110
  },
  {
    "content": "Ê<span class=\"fc0\"><metrics></span>\nÊ <span class=\"fc0\"><reporter</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"graphite\"</span> <span class=\"fc2\">group</span>=<span class=\"fc3\">\"node, jvm\"</span> <span class=\"fc2\">class</span>=",
    "hierarchy": [
    ],
    "pageId": 1111
  },
  {
    "content": "Ê   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"host\"<span class=\"fc0\">></span></span>graphite-server<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"port\"<span class=\"fc0\">></span></span>9999<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"period\"<span class=\"fc0\">></span></span>60<span class=\"fc0\"></int></span>\nÊ <span class=\"fc0\"></reporter></span>\nÊ <span class=\"fc0\"><reporter</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"collection1Updates\"</span> <span class=\"fc2\">registry</span>=<span class=\"fc3\">\"solr.core.collection1\"</span> <span class=\"fc2\">class</span>=",
    "hierarchy": [
    ],
    "pageId": 1111
  },
  {
    "content": "Ê   <span class=\"fc0\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"period\"<span class=\"fc0\">></span></span>300<span class=\"fc0\"></int></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"prefix\"<span class=\"fc0\">></span></span>example<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"logger\"<span class=\"fc0\">></span></span>updatesLogger<span class=\"fc0\"></str></span>\nÊ   <span class=\"fc0\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc0\">></span></span>QUERYHANDLER./update<span class=\"fc0\"></str></span>\nÊ <span class=\"fc0\"></reporter></span>\nÊ<span class=\"fc0\"></metrics></span>\n...",
    "hierarchy": [
    ],
    "pageId": 1111
  },
  {
    "content": "This example configures two reporters: <span class=\"link\">Graphite</span> and <span class=\"link\">SLF4J</span>. See below for more details on how to configure\nreporters.",
    "hierarchy": [
    ],
    "pageId": 1111
  },
  {
    "content": "Reporter plugins use the following arguments:",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "name\nThe unique name of the reporter plugin (required).",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "class\nThe fully-qualified implementation class of the plugin, which must extend <span class=\"ff1 fs2\">SolrMetricReporter</span>\n(required).",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "group\nOne or more of the predefined groups (see above).",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "registry\nOne or more of valid fully-qualified registry names.",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "If both <span class=\"ff1 fs2\">group</span> and <span class=\"ff1 fs2\">registry</span> attributes are specified only the <span class=\"ff1 fs2\">group</span> attribute is considered. If neither\nattribute is specified then the plugin will be used for all groups and registries. Multiple group or registry\nnames can be specified, separated by comma and/or space.",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "Additionally, several implementation-specific initialization arguments can be specified in nested elements.\nThere are some arguments that are common to SLF4J, Ganglia and Graphite reporters:",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "period\nThe period in seconds between reports. Default value is <span class=\"ff1 fs2\">60</span>.",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "prefix\nA prefix to be added to metric names, which may be helpful in logical grouping of related Solr instances,",
    "hierarchy": [
      "Reporter Arguments"
    ],
    "pageId": 1111
  },
  {
    "content": "e.g., machine name or cluster name. Default is empty string, i.e., just the registry name and metric name\nwill be used to form a fully-qualified metric name.",
    "hierarchy": [
    ],
    "pageId": 1112
  },
  {
    "content": "filter\nIf not empty then only metric names that start with this value will be reported. Default is no filtering, i.e.,\nall metrics from the selected registry will be reported.",
    "hierarchy": [
    ],
    "pageId": 1112
  },
  {
    "content": "Reporters are instantiated for every group and registry that they were configured for, at the time when the\nrespective components are initialized (e.g., on JVM startup or SolrCore load).",
    "hierarchy": [
    ],
    "pageId": 1112
  },
  {
    "content": "When reporters are created their configuration is validated (and e.g., necessary connections are\nestablished). Uncaught errors at this initialization stage cause the reporter to be discarded from the running\nconfiguration.",
    "hierarchy": [
    ],
    "pageId": 1112
  },
  {
    "content": "Reporters are closed when the corresponding component is being closed (e.g., on SolrCore close, or JVM\nshutdown) but metrics that they reported are still maintained in respective registries, as explained in the\nprevious section.",
    "hierarchy": [
    ],
    "pageId": 1112
  },
  {
    "content": "The following sections provide information on implementation-specific arguments. All implementation\nclasses provided with Solr can be found under <span class=\"ff2 fs1\">org.apache.solr.metrics.reporters</span>.",
    "hierarchy": [
    ],
    "pageId": 1112
  },
  {
    "content": "The JMX Reporter uses the <span class=\"ff2 fs1\">org.apache.solr.metrics.reporters.SolrJmxReporter</span> class.",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "It takes the following arguments:",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "domain\nThe JMX domain name. If not specified then the registry name will be used.",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "serviceUrl\nThe service URL for a JMX server. If not specified, Solr will attempt to discover if the JVM has an MBean\nserver and will use that address. See below for additional information on this.",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "agentId\nThe agent ID for a JMX server. Note either <span class=\"ff2 fs1\">serviceUrl</span> or <span class=\"ff2 fs1\">agentId</span> can be specified but not both - if both\nare specified then the default MBean server will be used.",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "Object names created by this reporter are hierarchical, dot-separated but also properly structured to form\ncorresponding hierarchies in e.g., JConsole. This hierarchy consists of the following elements in the top-\ndown order:",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "registry name (e.g., <span class=\"ff2 fs1\">solr.core.collection1.shard1.replica1</span>). Dot-separated registry names are also\nsplit into ObjectName hierarchy levels, so that metrics for this registry will be shown under\n/solr/core/collection1/shard1/replica1<span class=\"ff1 fs0\"> in JConsole, with each domain part being assigned to </span>dom1,\ndom2, … domN<span class=\"ff1 fs0\"> property.</span>",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "reporter name (the value of reporter's <span class=\"ff2 fs1\">name</span> attribute)",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "category, scope and name for request handlers",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "or additional <span class=\"ff2 fs1\">name1, name2, … nameN</span> elements for metrics from other components.",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "The JMX Reporter replaces the JMX functionality available in Solr versions before 7.0. If you have upgraded",
    "hierarchy": [
      "JMX Reporter"
    ],
    "pageId": 1112
  },
  {
    "content": "from an earlier version and have an MBean Server running when Solr starts, Solr will automatically discover\nthe location of the local MBean server and use a default configuration for the SolrJmxReporter.",
    "hierarchy": [
    ],
    "pageId": 1113
  },
  {
    "content": "You can start a local MBean server with a system property at startup by adding\n-Dcom.sun.management.jmxremote<span class=\"ff1 fs0\"> to your start command. This will not add the reporter configuration to</span>\nsolr.xml<span class=\"ff1 fs0\">, so if you enable it with a system property, you must always start Solr with the system property or</span>\nJMX will not be enabled in subsequent starts.",
    "hierarchy": [
    ],
    "pageId": 1113
  },
  {
    "content": "The SLF4J Reporter uses the <span class=\"ff2 fs1\">org.apache.solr.metrics.reporters.SolrSlf4jReporter</span> class.",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "It takes the following arguments, in addition to the common arguments <span class=\"link\">above</span>.",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "logger\nThe name of the logger to use. Default is empty, in which case the group or registry name will be used if\nspecified in the plugin configuration.",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "Users can specify logger name (and the corresponding logger configuration in e.g., Log4j configuration) to\noutput metrics-related logging to separate file(s), which can then be processed by external applications.",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "Each log line produced by this reporter consists of configuration-specific fields, and a message that follows\nthis format:",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "type=COUNTER, name={}, count={}",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "type=GAUGE, name={}, value={}",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "type=TIMER, name={}, count={}, min={}, max={}, mean={}, stddev={}, median={}, p75={}, p95={},\np98={}, p99={}, p999={}, mean_rate={}, m1={}, m5={}, m15={}, rate_unit={}, duration_unit={}",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "type=METER, name={}, count={}, mean_rate={}, m1={}, m5={}, m15={}, rate_unit={}",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "type=HISTOGRAM, name={}, count={}, min={}, max={}, mean={}, stddev={}, median={}, p75={}, p95={},\np98={}, p99={}, p999={}",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "(curly braces added only as placeholders for actual values).",
    "hierarchy": [
      "SLF4J Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "The <span class=\"link\">Graphite</span> Reporter uses the <span class=\"ff2 fs1\">org.apache.solr.metrics.reporters.SolrGraphiteReporter</span>) class.",
    "hierarchy": [
      "Graphite Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "It takes the following attributes, in addition to the common attributes <span class=\"link\">above</span>.",
    "hierarchy": [
      "Graphite Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "host\nThe host name where Graphite server is running (required).",
    "hierarchy": [
      "Graphite Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "port\nThe port number for the server (required).",
    "hierarchy": [
      "Graphite Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "pickled",
    "hierarchy": [
      "Graphite Reporter"
    ],
    "pageId": 1113
  },
  {
    "content": "If <span class=\"ff2 fs1\">true</span>, use \"pickled\" Graphite protocol which may be more efficient. Default is <span class=\"ff2 fs1\">false</span> (use plain-text\nprotocol).",
    "hierarchy": [
    ],
    "pageId": 1114
  },
  {
    "content": "When plain-text protocol is used (<span class=\"ff2 fs1\">pickled==false</span>) it's possible to use this reporter to integrate with\nsystems other than Graphite, if they can accept space-separated and line-oriented input over network in the\nfollowing format:",
    "hierarchy": [
    ],
    "pageId": 1114
  },
  {
    "content": "dot.separated.metric.name[.and.attribute] value epochTimestamp",
    "hierarchy": [
    ],
    "pageId": 1114
  },
  {
    "content": "For example:",
    "hierarchy": [
    ],
    "pageId": 1114
  },
  {
    "content": "example.solr.node.cores.lazy 0 1482932097\nexample.solr.node.cores.loaded 1 1482932097\nexample.solr.jetty.org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses.count 21\n1482932097\nexample.solr.jetty.org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses.m1_rate\n2.5474287707930614 1482932097\nexample.solr.jetty.org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses.m5_rate\n3.8003171557510305 1482932097\nexample.solr.jetty.org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses.m15_rate\n4.0623076220244245 1482932097\nexample.solr.jetty.org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses.mean_rate\n0.5698031798408144 1482932097",
    "hierarchy": [
    ],
    "pageId": 1114
  },
  {
    "content": "The <span class=\"link\">Ganglia</span> reporter uses the <span class=\"ff2 fs1\">org.apache.solr.metrics.reporters.SolrGangliaReporter</span> class.",
    "hierarchy": [
      "Ganglia Reporter"
    ],
    "pageId": 1114
  },
  {
    "content": "It take the following arguments, in addition to the common arguments <span class=\"link\">above</span>.",
    "hierarchy": [
      "Ganglia Reporter"
    ],
    "pageId": 1114
  },
  {
    "content": "host\nThe host name where Ganglia server is running (required).",
    "hierarchy": [
      "Ganglia Reporter"
    ],
    "pageId": 1114
  },
  {
    "content": "port\nThe port number for the server.",
    "hierarchy": [
      "Ganglia Reporter"
    ],
    "pageId": 1114
  },
  {
    "content": "multicast\nWhen <span class=\"ff2 fs1\">true</span> use multicast UDP communication, otherwise use UDP unicast. Default is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
      "Ganglia Reporter"
    ],
    "pageId": 1114
  },
  {
    "content": "These two reporters can be used for aggregation of metrics reported from replicas to shard leader (the\n\"shard\" reporter), and from any local registry to the Overseer node.",
    "hierarchy": [
      "Shard and Cluster Reporters"
    ],
    "pageId": 1114
  },
  {
    "content": "Metric reports from these reporters are periodically sent as batches of regular SolrInputDocuments, so they\ncan be processed by any Solr handler. By default they are sent to <span class=\"ff2 fs1\">/admin/metrics/collector</span> handler (an\ninstance of <span class=\"ff2 fs1\">MetricsCollectorHandler</span>) on a target node, which aggregates these reports and keeps them in\nadditional local metric registries so that they can be accessed using <span class=\"ff2 fs1\">/admin/metrics</span> handler, and re-\nreported elsewhere as necessary.",
    "hierarchy": [
      "Shard and Cluster Reporters"
    ],
    "pageId": 1114
  },
  {
    "content": "In case of shard reporter the target node is the shard leader, in case of cluster reporter the target node is\nthe Overseer leader.",
    "hierarchy": [
    ],
    "pageId": 1115
  },
  {
    "content": "This reporter uses predefined <span class=\"code\">shard</span> group, and the implementing class must be (a subclass of)\nsolr.SolrShardReporter<span class=\"ff1 fs0\">. It publishes selected metrics from replicas to the node where shard leader is</span>\nlocated. Reports use a target registry name that is the replica's registry name with a <span class=\"code\">.leader</span> suffix, e.g., for\na SolrCore name <span class=\"code\">collection1_shard1_replica_n3</span> the target registry name is\nsolr.core.collection1.shard1.replica_n3.leader<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "The following configuration properties are supported:",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "handler\nThe handler path where reports are sent. Default is <span class=\"code\">/admin/metrics/collector</span>.",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "period\nHow often reports are sent, in seconds. Default is <span class=\"code\">60</span>. Setting this to <span class=\"code\">0</span> disables the reporter.",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "filter\nAn optional regular expression(s) matching selected metrics to be reported.",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "The following filter expressions are used by default:",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "TLOG.*\nCORE\\.fs.*\nREPLICATION.*\nINDEX\\.flush.*\nINDEX\\.merge\\.major.*\nUPDATE\\./update/.*requests\nQUERY\\./select.*requests",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "Example configuration:",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "Ê     <span class=\"fc2\"><reporter</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"test\"</span> <span class=\"fc3\">group</span>=<span class=\"fc4\">\"shard\"</span> <span class=\"fc3\">class</span>=<span class=\"fc4\">\"solr.SolrShardReporter\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><int</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"period\"<span class=\"fc2\">></span></span>11<span class=\"fc2\"></int></span>\nÊ       <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"filter\"<span class=\"fc2\">></span></span>UPDATE\\./update/.*requests<span class=\"fc2\"></str></span>\nÊ       <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"filter\"<span class=\"fc2\">></span></span>QUERY\\./select.*requests<span class=\"fc2\"></str></span>\nÊ     <span class=\"fc2\"></reporter></span>",
    "hierarchy": [
      "Shard Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "This reporter uses predefined <span class=\"code\">cluster</span> group and the implementing class must be (a subclass of)\nsolr.SolrClusterReporter<span class=\"ff1 fs0\">. It publishes selected metrics from any local registry to the Overseer leader</span>\nnode.",
    "hierarchy": [
      "Cluster Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "The following configuration properties are supported:",
    "hierarchy": [
      "Cluster Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "handler\nThe handler path where reports are sent. Default is <span class=\"code\">/admin/metrics/collector</span>.",
    "hierarchy": [
      "Cluster Reporter"
    ],
    "pageId": 1115
  },
  {
    "content": "period\nHow often reports are sent, in seconds. Default is <span class=\"ff1 fs0\">60</span>. Setting this to <span class=\"ff1 fs0\">0</span> disables the reporter.",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "report\nreport configuration(s), see below.",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "Each report configuration consists of the following properties:",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "registry\nA regular expression pattern matching local source registries (see\nSolrMetricManager.registryNames(String…)<span class=\"ff2 fs1\">), may contain regex capture groups (required).</span>",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "group\nThe target registry name where metrics will be grouped. This can be a regular expression pattern that\ncontains back-references to capture groups collected by registry pattern (required).",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "label\nAn optional prefix to prepend to metric names, may contain back-references to capture groups collected\nby registry pattern.",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "filter\nAn optional regular expression(s) matching selected metrics to be reported.",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "The following report specifications are used by default (their result is a single additional metric registry in\nOverseer, called <span class=\"ff1 fs0\">solr.cluster</span>):",
    "hierarchy": [
    ],
    "pageId": 1116
  },
  {
    "content": "Ê  <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"report\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>cluster<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"registry\"<span class=\"fc1\">></span></span>solr\\.jetty<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"label\"<span class=\"fc1\">></span></span>jetty<span class=\"fc1\"></str></span>\nÊ  <span class=\"fc1\"></lst></span>\nÊ  <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"report\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>cluster<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"registry\"<span class=\"fc1\">></span></span>solr\\.node<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"label\"<span class=\"fc1\">></span></span>node<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>CONTAINER\\.cores\\..*<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>CONTAINER\\.fs\\..*<span class=\"fc1\"></str></span>\nÊ  <span class=\"fc1\"></lst></span>\nÊ  <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"report\"<span class=\"fc1\">></span></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>cluster<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"label\"<span class=\"fc1\">></span></span>jvm<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"registry\"<span class=\"fc1\">></span></span>solr\\.jvm<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>memory\\.total\\..*<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>memory\\.heap\\..*<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>os\\.SystemLoadAverage<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>os\\.FreePhysicalMemorySize<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>os\\.FreeSwapSpaceSize<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>os\\.OpenFileDescriptorCount<span class=\"fc1\"></str></span>\nÊ    <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>threads\\.count<span class=\"fc1\"></str></span>\nÊ  <span class=\"fc1\"></lst></span>\nÊ  <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"report\"<span class=\"fc1\">></span></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>cluster<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"registry\"<span class=\"fc1\">></span></span>solr\\.core\\.(.*)\\.leader<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"label\"<span class=\"fc1\">></span></span>leader.$1<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>QUERY\\./select/.*<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>UPDATE\\./update/.*<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>INDEX\\..*<span class=\"fc1\"></str></span>\nÊ   <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>TLOG\\..*<span class=\"fc1\"></str></span>\nÊ  <span class=\"fc1\"></lst></span>",
    "hierarchy": [
    ],
    "pageId": 1117
  },
  {
    "content": "Example configuration:",
    "hierarchy": [
    ],
    "pageId": 1117
  },
  {
    "content": "Ê        <span class=\"fc1\"><reporter</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"test\"</span> <span class=\"fc2\">group</span>=<span class=\"fc3\">\"cluster\"</span> <span class=\"fc2\">class</span>=<span class=\"fc3\">\"solr.SolrClusterReporter\"<span class=\"fc1\">></span></span>\nÊ          <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"handler\"<span class=\"fc1\">></span></span>/admin/metrics/collector<span class=\"fc1\"></str></span>\nÊ          <span class=\"fc1\"><int</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"period\"<span class=\"fc1\">></span></span>11<span class=\"fc1\"></int></span>\nÊ          <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"report\"<span class=\"fc1\">></span></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>aggregated_jvms<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"label\"<span class=\"fc1\">></span></span>jvm<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"registry\"<span class=\"fc1\">></span></span>solr\\.jvm<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>memory\\.total\\..*<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>memory\\.heap\\..*<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>os\\.SystemLoadAverage<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>threads\\.count<span class=\"fc1\"></str></span>\nÊ          <span class=\"fc1\"></lst></span>\nÊ          <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"report\"<span class=\"fc1\">></span></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>aggregated_shard_leaders<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"registry\"<span class=\"fc1\">></span></span>solr\\.core\\.(.*)\\.leader<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"label\"<span class=\"fc1\">></span></span>leader.$1<span class=\"fc1\"></str></span>\nÊ            <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"filter\"<span class=\"fc1\">></span></span>UPDATE\\./update/.*<span class=\"fc1\"></str></span>\nÊ          <span class=\"fc1\"></lst></span>\nÊ        <span class=\"fc1\"></reporter></span>",
    "hierarchy": [
    ],
    "pageId": 1118
  },
  {
    "content": "These metrics are available only on a per-core basis. Metrics can be aggregated across cores using Shard\nand Cluster reporters.",
    "hierarchy": [
      "Core Level Metrics"
    ],
    "pageId": 1118
  },
  {
    "content": "These metrics are collected in respective registries for each core (e.g., <span class=\"ff1 fs3\">solr.core.collection1….</span>), under\nthe <span class=\"ff1 fs3\">INDEX</span> category.",
    "hierarchy": [
      "Core Level Metrics",
      "Index Merge Metrics"
    ],
    "pageId": 1118
  },
  {
    "content": "Basic metrics are always collected - collection of additional metrics can be turned on using boolean\nparameters in the <span class=\"ff1 fs3\">/config/indexConfig/metrics</span> section of <span class=\"ff1 fs3\">solrconfig.xml</span>:",
    "hierarchy": [
      "Core Level Metrics",
      "Index Merge Metrics"
    ],
    "pageId": 1118
  },
  {
    "content": "Ê ...\nÊ <span class=\"fc1\"><indexConfig></span>\nÊ   <span class=\"fc1\"><metrics></span>\nÊ     <span class=\"fc1\"><majorMergeDocs></span>524288<span class=\"fc1\"></majorMergeDocs></span>\nÊ     <span class=\"fc1\"><bool</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"mergeDetails\"<span class=\"fc1\">></span></span>true<span class=\"fc1\"></bool></span>\nÊ   <span class=\"fc1\"></metrics></span>\nÊ   ...\nÊ <span class=\"fc1\"></indexConfig></span>\n...",
    "hierarchy": [
      "Core Level Metrics",
      "Index Merge Metrics"
    ],
    "pageId": 1118
  },
  {
    "content": "The following metrics are collected:",
    "hierarchy": [
      "Core Level Metrics",
      "Index Merge Metrics"
    ],
    "pageId": 1118
  },
  {
    "content": "INDEX.merge.major - timer for merge operations that include at least \"majorMergeDocs\" (default value\nfor this parameter is 512k documents).",
    "hierarchy": [
      "Core Level Metrics",
      "Index Merge Metrics"
    ],
    "pageId": 1118
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.minor</span><span class=\"ls1\"> - timer for merge operations that include less than \"majorMergeDocs\".</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.errors</span><span class=\"ls1\"> - counter for merge errors.</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.flush</span><span class=\"ls1\"> - meter for index flush operations.</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "Additionally, the following gauges are reported, which help to monitor the momentary state of index merge\noperations:",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.major.running</span><span class=\"ls1\"> - number of running major merge operations (depending on the</span>\nimplementation of <span class=\"ff2 fs1\">MergeScheduler</span> that is used there can be several concurrently running merge\noperations).",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.minor.running</span><span class=\"ls1\"> - as above, for minor merge operations.</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.major.running.docs</span><span class=\"ls1\"> - total number of documents in the segments being currently</span>\nmerged in major merge operations.",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.minor.running.docs</span><span class=\"ls1\"> - as above, for minor merge operations.</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.major.running.segments</span><span class=\"ls1\"> - number of segments being currently merged in major merge</span>\noperations.",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.minor.running.segments</span><span class=\"ls1\"> - as above, for minor merge operations.</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "If the boolean flag <span class=\"ff2 fs1\">mergeDetails</span> is true then the following additional metrics are collected:",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.major.docs</span><span class=\"ls1\"> - meter for the number of documents merged in major merge operations</span>",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "<span class=\"ff2 fs1 ls1\">INDEX.merge.major.deletedDocs</span><span class=\"ls1\"> - meter for the number of deleted documents expunged in major</span>\nmerge operations",
    "hierarchy": [
    ],
    "pageId": 1119
  },
  {
    "content": "The <span class=\"ff2 fs1\">admin/metrics</span> endpoint provides access to all the metrics for all metric groups.",
    "hierarchy": [
      "Metrics API"
    ],
    "pageId": 1119
  },
  {
    "content": "A few query parameters are available to limit your request to only certain metrics:",
    "hierarchy": [
      "Metrics API"
    ],
    "pageId": 1119
  },
  {
    "content": "group\nThe metric group to retrieve. The default is <span class=\"ff2 fs1\">all</span> to retrieve all metrics for all groups. Other possible values\nare: <span class=\"ff2 fs1\">jvm</span>, <span class=\"ff2 fs1\">jetty</span>, <span class=\"ff2 fs1\">node</span>, and <span class=\"ff2 fs1\">core</span>. More than one group can be specified in a request; multiple group\nnames should be separated by a comma.",
    "hierarchy": [
      "Metrics API"
    ],
    "pageId": 1119
  },
  {
    "content": "type\nThe type of metric to retrieve. The default is <span class=\"ff2 fs1\">all</span> to retrieve all metric types. Other possible values are\ncounter<span class=\"ff1 fs0\">, </span>gauge<span class=\"ff1 fs0\">, </span>histogram<span class=\"ff1 fs0\">, </span>meter<span class=\"ff1 fs0\">, and </span>timer<span class=\"ff1 fs0\">. More than one type can be specified in a request; multiple</span>\ntypes should be separated by a comma.",
    "hierarchy": [
      "Metrics API"
    ],
    "pageId": 1119
  },
  {
    "content": "prefix\nThe first characters of metric name that will filter the metrics returned to those starting with the provided\nstring. It can be combined with <span class=\"ff2 fs1\">group</span> and/or <span class=\"ff2 fs1\">type</span> parameters. More than one prefix can be specified in a\nrequest; multiple prefixes should be separated by a comma. Prefix matching is also case-sensitive.",
    "hierarchy": [
      "Metrics API"
    ],
    "pageId": 1119
  },
  {
    "content": "regex\nA regular expression matching metric names. Note: dot separators in metric names must be escaped, eg.\nQUERY\\./select\\..*<span class=\"ff1 fs0\"> is a valid regex that matches all metrics with the </span>QUERY./select.<span class=\"ff1 fs0\"> prefix.</span>",
    "hierarchy": [
      "Metrics API"
    ],
    "pageId": 1119
  },
  {
    "content": "property\nAllows requesting only this metric from any compound metric. Multiple <span class=\"ff1 fs0\">property</span> parameters can be\ncombined to act as an OR request. For example, to only get the 99th and 999th percentile values from all\nmetric types and groups, you can add <span class=\"ff1 fs0\">&property=p99_ms&property=p999_ms</span> to your request. This can be\ncombined with <span class=\"ff1 fs0\">group</span>, <span class=\"ff1 fs0\">type</span>, and <span class=\"ff1 fs0\">prefix</span> as necessary.",
    "hierarchy": [
    ],
    "pageId": 1120
  },
  {
    "content": "key\nfully-qualified metric name, which specifies one concrete metric instance (parameter can be specified\nmultiple times to retrieve multiple concrete metrics). <span class=\"code\">NOTE: when this parameter is used, other</span>\nselection methods listed above are ignored.<span class=\"ff2\"> Fully-qualified name consists of registry name, colon and</span>\nmetric name, with optional colon and metric property. Colons in names can be escaped using back-slash\n\\<span class=\"ff2 fs1\"> character. Examples:</span>",
    "hierarchy": [
    ],
    "pageId": 1120
  },
  {
    "content": "\nkey=solr.node:CONTAINER.fs.totalSpace\n•\nkey=solr.core.collection1:QUERY./select.requestTimes:max_ms\n•\nkey=solr.jvm:system.properties:user.name",
    "hierarchy": [
    ],
    "pageId": 1120
  },
  {
    "content": "compact\nWhen false, a more verbose format of the response will be returned. Instead of a response like this:",
    "hierarchy": [
    ],
    "pageId": 1120
  },
  {
    "content": "{<span class=\"fc1\">\"metrics\"</span>: [\nÊ   <span class=\"fc2\">\"solr.core.gettingstarted\"</span>,\nÊ   {\nÊ     <span class=\"fc1\">\"CORE.aliases\"</span>: {\nÊ       <span class=\"fc1\">\"value\"</span>: [<span class=\"fc2\">\"gettingstarted\"</span>]\nÊ     },\nÊ     <span class=\"fc1\">\"CORE.coreName\"</span>: {\nÊ       <span class=\"fc1\">\"value\"</span>: <span class=\"fc2\">\"gettingstarted\"</span>\nÊ     },\nÊ     <span class=\"fc1\">\"CORE.indexDir\"</span>: {\nÊ       <span class=\"fc1\">\"value\"</span>: <span class=\"fc2\">\"/solr/example/schemaless/solr/gettingstarted/data/index/\"</span>\nÊ     },\nÊ     <span class=\"fc1\">\"CORE.instanceDir\"</span>: {\nÊ       <span class=\"fc1\">\"value\"</span>: <span class=\"fc2\">\"/solr/example/schemaless/solr/gettingstarted\"</span>\nÊ     },\nÊ     <span class=\"fc1\">\"CORE.refCount\"</span>: {\nÊ       <span class=\"fc1\">\"value\"</span>: <span class=\"fc3\">1</span>\nÊ     },\nÊ     <span class=\"fc1\">\"CORE.startTime\"</span>: {\nÊ       <span class=\"fc1\">\"value\"</span>: <span class=\"fc2\">\"2017-03-14T11:43:23.822Z\"</span>\nÊ     }\nÊ   }\nÊ ]}",
    "hierarchy": [
    ],
    "pageId": 1120
  },
  {
    "content": "The response will look like this:",
    "hierarchy": [
    ],
    "pageId": 1120
  },
  {
    "content": "{<span class=\"fc1\">\"metrics\"</span>: [\nÊ   <span class=\"fc2\">\"solr.core.gettingstarted\"</span>,\nÊ   {\nÊ     <span class=\"fc1\">\"CORE.aliases\"</span>: [\nÊ       <span class=\"fc2\">\"gettingstarted\"</span>\nÊ     ],\nÊ     <span class=\"fc1\">\"CORE.coreName\"</span>: <span class=\"fc2\">\"gettingstarted\"</span>,\nÊ     <span class=\"fc1\">\"CORE.indexDir\"</span>: <span class=\"fc2\">\"/solr/example/schemaless/solr/gettingstarted/data/index/\"</span>,\nÊ     <span class=\"fc1\">\"CORE.instanceDir\"</span>: <span class=\"fc2\">\"/solr/example/schemaless/solr/gettingstarted\"</span>,\nÊ     <span class=\"fc1\">\"CORE.refCount\"</span>: <span class=\"fc3\">1</span>,\nÊ     <span class=\"fc1\">\"CORE.startTime\"</span>: <span class=\"fc2\">\"2017-03-14T11:43:23.822Z\"</span>\nÊ   }\nÊ ]}",
    "hierarchy": [
    ],
    "pageId": 1121
  },
  {
    "content": "Like other request handlers, the Metrics API can also take the <span class=\"ff1 fs1\">wt</span> parameter to define the output format.",
    "hierarchy": [
    ],
    "pageId": 1121
  },
  {
    "content": "Request only \"counter\" type metrics in the \"core\" group, returned in JSON:",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "http://localhost:8983/solr/admin/metrics?type=counter&group=core",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "Request only \"core\" group metrics that start with \"INDEX\", returned in XML:",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "http://localhost:8983/solr/admin/metrics?wt=xml&prefix=INDEX&group=core",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "Request only \"core\" group metrics that end with \".requests\":",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "http://localhost:8983/solr/admin/metrics?regex=.*\\.requests&group=core",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "Request only \"user.name\" property of \"system.properties\" metric from registry \"solr.jvm\":",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "http://localhost:8983/solr/admin/metrics?wt=xml?key=solr.jvm:system.properties:user.name",
    "hierarchy": [
      "Examples"
    ],
    "pageId": 1121
  },
  {
    "content": "The MBean Request Handler offers programmatic access to the information provided on the <span class=\"link\">Plugin/Stats</span>\npage of the Admin UI.",
    "hierarchy": [
      "MBean Request Handler"
    ],
    "pageId": 1122
  },
  {
    "content": "The MBean Request Handler accepts the following parameters:",
    "hierarchy": [
      "MBean Request Handler"
    ],
    "pageId": 1122
  },
  {
    "content": "key\nRestricts results by object key.",
    "hierarchy": [
      "MBean Request Handler"
    ],
    "pageId": 1122
  },
  {
    "content": "cat\nRestricts results by category name.",
    "hierarchy": [
      "MBean Request Handler"
    ],
    "pageId": 1122
  },
  {
    "content": "stats\nSpecifies whether statistics are returned with results. You can override the <span class=\"code\">stats</span> parameter on a per-field\nbasis. The default is <span class=\"code\">false</span>.",
    "hierarchy": [
      "MBean Request Handler"
    ],
    "pageId": 1122
  },
  {
    "content": "wt\nThe output format. This operates the same as the <span class=\"code\">wt</span><span class=\"link\"> parameter in a query</span>. The default is <span class=\"code\">json</span>.",
    "hierarchy": [
      "MBean Request Handler"
    ],
    "pageId": 1122
  },
  {
    "content": "The following examples assume you are running Solr's <span class=\"code\">techproducts</span> example configuration:",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "bin/solr start -e techproducts",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "To return information about the CACHE category only:",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "http://localhost:8983/solr/techproducts/admin/mbeans?cat=CACHE",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "To return information and statistics about the CACHE category only, formatted in XML:",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "http://localhost:8983/solr/techproducts/admin/mbeans?stats=true&cat=CACHE&wt=xml",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "To return information for everything, and statistics for everything except the <span class=\"code\">fieldCache</span>:",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "http://localhost:8983/solr/techproducts/admin/mbeans?stats=true&f.fieldCache.stats=false",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "To return information and statistics for the <span class=\"code\">fieldCache</span> only:",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "http://localhost:8983/solr/techproducts/admin/mbeans?key=fieldCache&stats=true",
    "hierarchy": [
      "MBean Request Handler",
      "MBeanRequestHandler Examples"
    ],
    "pageId": 1122
  },
  {
    "content": "Solr logs are a key way to know what's happening in the system. There are several ways to adjust the default\nlogging configuration.",
    "hierarchy": [
      "Configuring Logging"
    ],
    "pageId": 1123
  },
  {
    "content": "In addition to the logging options described below, there is a way to configure which\nrequest parameters (such as parameters sent as part of queries) are logged with an\nadditional request parameter called <span class=\"ff4 fs3\">logParamsList</span>. See the section on <span class=\"link\">Common Query</span>\nParameters<span class=\"fc1\"> for more information.</span>",
    "hierarchy": [
      "Configuring Logging"
    ],
    "pageId": 1123
  },
  {
    "content": "You can control the amount of logging output in Solr by using the Admin Web interface. Select the <span class=\"ff1\">LOGGING</span>\nlink. Note that this page only lets you change settings in the running system and is not saved for the next\nrun. (For more information about the Admin Web interface, see <span class=\"link\">Using the Solr Administration User</span>\nInterface<span class=\"fc1\">.)</span>",
    "hierarchy": [
      "Configuring Logging",
      "Temporary Logging Settings"
    ],
    "pageId": 1123
  },
  {
    "content": "This part of the Admin Web interface allows you to set the logging level for many different log categories.\nFortunately, any categories that are <span class=\"ff1\">unset</span> will have the logging level of its parent. This makes it possible to\nchange many categories at once by adjusting the logging level of their parent.",
    "hierarchy": [
      "Configuring Logging",
      "Temporary Logging Settings"
    ],
    "pageId": 1123
  },
  {
    "content": "When you select <span class=\"ff1\">Level</span>, you see the following menu:",
    "hierarchy": [
      "Configuring Logging",
      "Temporary Logging Settings"
    ],
    "pageId": 1123
  },
  {
    "content": "Directories are shown with their current logging levels. The Log Level Menu floats over these. To set a log\nlevel for a particular directory, select it and click the appropriate log level button.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "Log levels settings are as follows:",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "FINESTReports everything.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "FINEReports everything but the least important\nmessages.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "CONFIGReports configuration errors.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "INFOReports everything but normal status.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "WARNReports all warnings.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "SEVEREReports only the most severe warnings.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "OFFTurns off logging.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "UNSETRemoves the previous log setting.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "Multiple settings at one time are allowed.",
    "hierarchy": [
    ],
    "pageId": 1124
  },
  {
    "content": "There is also a way of sending REST commands to the logging endpoint to do the same. Example:",
    "hierarchy": [
      "Loglevel API"
    ],
    "pageId": 1124
  },
  {
    "content": "# Set the root logger to level WARN\ncurl -s http://localhost:8983/solr/admin/info/logging --data-binary \"set=root:WARN\"",
    "hierarchy": [
      "Loglevel API"
    ],
    "pageId": 1124
  },
  {
    "content": "You can temporarily choose a different logging level as you start Solr. There are two ways:",
    "hierarchy": [
      "Choosing Log Level at Startup"
    ],
    "pageId": 1125
  },
  {
    "content": "The first way is to set the <span class=\"code\">SOLR_LOG_LEVEL</span> environment variable before you start Solr, or place the same\nvariable in <span class=\"code\">bin/solr.in.sh</span> or <span class=\"code\">bin/solr.in.cmd</span>. The variable must contain an uppercase string with a\nsupported log level (see above).",
    "hierarchy": [
      "Choosing Log Level at Startup"
    ],
    "pageId": 1125
  },
  {
    "content": "The second way is to start Solr with the -v or -q options, see <span class=\"link\">Solr Control Script Reference</span> for details.\nExamples:",
    "hierarchy": [
      "Choosing Log Level at Startup"
    ],
    "pageId": 1125
  },
  {
    "content": "# Start with verbose (DEBUG) looging\nbin/solr start -f -v\n# Start with quiet (WARN) logging\nbin/solr start -f -q",
    "hierarchy": [
      "Choosing Log Level at Startup"
    ],
    "pageId": 1125
  },
  {
    "content": "Solr uses <span class=\"link\">Log4J version 1.2</span> for logging which is configured using <span class=\"code\">server/resources/log4j.properties</span>.\nTake a moment to inspect the contents of the <span class=\"code\">log4j.properties</span> file so that you are familiar with its\nstructure. By default, Solr log messages will be written to <span class=\"code\">SOLR_LOGS_DIR/solr.log</span>.",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "When you're ready to deploy Solr in production, set the variable <span class=\"code\">SOLR_LOGS_DIR</span> to the location where you\nwant Solr to write log files, such as <span class=\"code\">/var/solr/logs</span>. You may also want to tweak <span class=\"code\">log4j.properties</span>. Note\nthat if you installed Solr as a service using the instructions provided in <span class=\"link\">Taking Solr to Production</span>, then see\n/var/solr/log4j.properties<span class=\"ff2 fs1\"> instead of the default </span>server/resources<span class=\"ff2 fs1\"> version.</span>",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "When starting Solr in the foreground (<span class=\"code\">-f</span> option), all logs will be sent to the console, in addition to <span class=\"code\">solr.log</span>.\nWhen starting Solr in the background, it will write all <span class=\"code\">stdout</span> and <span class=\"code\">stderr</span> output to a log file in <span class=\"code\">solr-<port>-</span>\nconsole.log<span class=\"ff2 fs1\">, and automatically disable the CONSOLE logger configured in </span>log4j.properties<span class=\"ff2 fs1\">, having the</span>\nsame effect as if you removed the CONSOLE appender from the rootLogger manually.",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "Also, in <span class=\"code\">log4j.properties</span> if the default log rotation size threshold of 32MB is too small for production\nservers then you should increase it to a larger value (such as 100MB or more).",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "log4j.appender.file.MaxFileSize=100MB",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "Java Garbage Collection logs are rotated by the JVM when size hits 20M, for a max of 9 generations. Old GC\nlogs are moved to <span class=\"code\">SOLR_LOGS_DIR/archived</span>. These settings can only be changed by editing the start scripts.",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "On every startup of Solr, the start script will clean up old logs and rotate the main <span class=\"code\">solr.log</span> file. If you\nchanged the <span class=\"code\">log4j.appender.file.MaxBackupIndex</span> setting in <span class=\"code\">log4j.properties</span>, you also need to change\nthe corresponding setting <span class=\"code\">-rotate_solr_logs 10</span> in the start script.",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "You can disable the automatic log rotation at startup by changing the setting <span class=\"code\">SOLR_LOG_PRESTART_ROTATION</span>\nfound in <span class=\"code\">bin/solr.in.sh</span> or <span class=\"code\">bin/solr.in.cmd</span> to false.",
    "hierarchy": [
      "Permanent Logging Settings"
    ],
    "pageId": 1125
  },
  {
    "content": "For high-volume search applications, logging every query can generate a large amount of logs and,\ndepending on the volume, potentially impact performance. If you mine these logs for additional insights into\nyour application, then logging every query request may be useful.",
    "hierarchy": [
      "Logging Slow Queries"
    ],
    "pageId": 1126
  },
  {
    "content": "On the other hand, if you're only concerned about warnings and error messages related to requests, then\nyou can set the log verbosity to WARN. However, this poses a potential problem in that you won’t know if\nany queries are slow, as slow queries are still logged at the INFO level.",
    "hierarchy": [
      "Logging Slow Queries"
    ],
    "pageId": 1126
  },
  {
    "content": "Solr provides a way to set your log verbosity threshold to WARN and be able to set a latency threshold above\nwhich a request is considered \"slow\" and log that request at the WARN level to help you identify slow\nqueries in your application. To enable this behavior, configure the <span class=\"code\"><slowQueryThresholdMillis></span> element in\nthe <span class=\"ff1\">query</span> section of <span class=\"code\">solrconfig.xml</span>:",
    "hierarchy": [
      "Logging Slow Queries"
    ],
    "pageId": 1126
  },
  {
    "content": "Any queries that take longer than the specified threshold will be logged as \"slow\" queries at the WARN level.",
    "hierarchy": [
      "Logging Slow Queries"
    ],
    "pageId": 1126
  },
  {
    "content": "Java Management Extensions (JMX)<span class=\"fc2\"> is a technology that makes it possible for complex systems to be</span>\ncontrolled by tools without the systems and tools having any previous knowledge of each other. In essence,\nit is a standard interface by which complex systems can be viewed and manipulated.",
    "hierarchy": [
      "Using JMX with Solr"
    ],
    "pageId": 1127
  },
  {
    "content": "Solr, like any other good citizen of the Java universe, can be controlled via a JMX interface. Once enabled, you\ncan use a JMX client, like jconsole, to connect with Solr.",
    "hierarchy": [
      "Using JMX with Solr"
    ],
    "pageId": 1127
  },
  {
    "content": "If you are unfamiliar with JMX, you may find the following overview useful: <span class=\"link\">http://docs.oracle.com/javase/8/</span>\ndocs/technotes/guides/management/agent.html<span class=\"fc2\">.</span>",
    "hierarchy": [
      "Using JMX with Solr"
    ],
    "pageId": 1127
  },
  {
    "content": "JMX support is configured by defining a metrics reporter, as described in the section the section <span class=\"link\">JMX</span>\nReporter<span class=\"fc2\">.</span>",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring JMX"
    ],
    "pageId": 1127
  },
  {
    "content": "If you have an existing MBean server running in Solr's JVM, or if you start Solr with the system property\n-Dcom.sun.management.jmxremote<span class=\"ff2 fs1\">, Solr will automatically identify it’s location on startup even if you have</span>\nnot defined a reporter explicitly in <span class=\"code\">solr.xml</span>. You can also define the location of the MBean server with\nparameters defined in the reporter definition.",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring JMX"
    ],
    "pageId": 1127
  },
  {
    "content": "Versions of Solr prior to 7.0 defined JMX support in <span class=\"code\">solrconfig.xml</span>. This has been changed to the metrics\nreporter configuration defined above. Parameters for the reporter configuration allow defining the location\nor address of an existing MBean server.",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring MBean Servers"
    ],
    "pageId": 1127
  },
  {
    "content": "An MBean server can be started at the time of Solr's startup by passing the system parameter\n-Dcom.sun.management.jmxremote<span class=\"ff2 fs1\">. See Oracle’s documentation for additional settings available to start and</span>\ncontrol an MBean server at <span class=\"link\">http://docs.oracle.com/javase/8/docs/technotes/guides/management/</span>\nagent.html<span class=\"fc2\">.</span>",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring MBean Servers"
    ],
    "pageId": 1127
  },
  {
    "content": "If you need to attach a JMX-enabled Java profiling tool, such as JConsole or VisualVM, to a remote Solr server,\nthen you need to enable remote JMX access when starting the Solr server. Simply change the\nENABLE_REMOTE_JMX_OPTS<span class=\"ff2 fs1\"> property in the </span>solr.in.sh<span class=\"ff2 fs1\"> or </span>solr.in.cmd<span class=\"ff2 fs1\"> (for Windows) file to true. You'll also</span>\nneed to choose a port for the JMX RMI connector to bind to, such as 18983. For example, if your Solr include\nscript sets:",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring MBean Servers",
      "Configuring a Remote Connection to Solr JMX"
    ],
    "pageId": 1127
  },
  {
    "content": "ENABLE_REMOTE_JMX_OPTS=true\nRMI_PORT=18983",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring MBean Servers",
      "Configuring a Remote Connection to Solr JMX"
    ],
    "pageId": 1127
  },
  {
    "content": "The JMX RMI connector will allow Java profiling tools to attach to port 18983. When enabled, the following\nproperties are passed to the JVM when starting Solr:",
    "hierarchy": [
      "Using JMX with Solr",
      "Configuring MBean Servers",
      "Configuring a Remote Connection to Solr JMX"
    ],
    "pageId": 1127
  },
  {
    "content": "-Dcom.sun.management.jmxremote \\\n-Dcom.sun.management.jmxremote.local.only=false \\\n-Dcom.sun.management.jmxremote.ssl=false \\\n-Dcom.sun.management.jmxremote.authenticate=false \\\n-Dcom.sun.management.jmxremote.port=18983 \\\n-Dcom.sun.management.jmxremote.rmi.port=18983",
    "hierarchy": [
    ],
    "pageId": 1128
  },
  {
    "content": "We don't recommend enabling remote JMX access in production, but it can sometimes be useful when doing\nperformance and user-acceptance testing prior to going into production.",
    "hierarchy": [
    ],
    "pageId": 1128
  },
  {
    "content": "For more information about these settings, see: <span class=\"link\">http://docs.oracle.com/javase/8/docs/technotes/guides/</span>\nmanagement/agent.html<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1128
  },
  {
    "content": "Making JMX connections into machines running behind NATs (e.g., Amazon's EC2 service) is\nnot a simple task. The <span class=\"ff1 fs2\">java.rmi.server.hostname</span> system property may help, but running\njconsole<span class=\"ff2 fs0\"> on the server itself and using a remote desktop is often the simplest solution. See</span>\nhttp://web.archive.org/web/20130525022506/http://jmsbrdy.com/monitoring-java-\napplications-running-on-ec2-i<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1128
  },
  {
    "content": "If you use <span class=\"link\">Prometheus</span> and <span class=\"link\">Grafana</span> for metrics storage and data visualization, Solr includes a Prometheus\nexporter to collect metrics and other data.",
    "hierarchy": [
      "Monitoring Solr with Prometheus and Grafana"
    ],
    "pageId": 1129
  },
  {
    "content": "A Prometheus exporter (<span class=\"code\">solr-exporter</span>) allows users to monitor not only Solr metrics which come from\nMetrics API<span class=\"fc1\">, but also facet counts which come from </span>Searching<span class=\"fc1\"> and responses to </span>Collections API<span class=\"fc1\"> commands</span>\nand <span class=\"link\">PingRequestHandler</span> requests.",
    "hierarchy": [
      "Monitoring Solr with Prometheus and Grafana"
    ],
    "pageId": 1129
  },
  {
    "content": "This graphic provides a more detailed view:",
    "hierarchy": [
      "Monitoring Solr with Prometheus and Grafana"
    ],
    "pageId": 1129
  },
  {
    "content": "This feature is considered experimental, meaning future improvements may break\ncompatibility.",
    "hierarchy": [
      "Monitoring Solr with Prometheus and Grafana"
    ],
    "pageId": 1129
  },
  {
    "content": "The Prometheus exporter is included in Solr as a contrib, and is located in <span class=\"code\">contrib/prometheus-exporter</span> in\nyour Solr instance.",
    "hierarchy": [
      "Monitoring Solr with Prometheus and Grafana"
    ],
    "pageId": 1129
  },
  {
    "content": "There are three aspects to running <span class=\"code\">solr-exporter</span>:",
    "hierarchy": [
      "Monitoring Solr with Prometheus and Grafana"
    ],
    "pageId": 1129
  },
  {
    "content": "<span class=\"ls1\">Modify the <span class=\"ff2 fs1\">solr-exporter-config.xml</span> to define the data to collect. Solr has a default configuration you</span>\ncan use, but if you would like to modify it before running the exporter the first time, see the section\nbelow <span class=\"link\">Exporter Configuration</span>.",
    "hierarchy": [
    ],
    "pageId": 1130
  },
  {
    "content": "<span class=\"ls1\">Start the exporter from within Solr. See the section below <span class=\"link\">Starting the Exporter</span>.</span>",
    "hierarchy": [
    ],
    "pageId": 1130
  },
  {
    "content": "<span class=\"ls1\">Modify your Prometheus configuration to listen on the correct port. See the section below <span class=\"link\">Prometheus</span></span>\nConfiguration",
    "hierarchy": [
    ],
    "pageId": 1130
  },
  {
    "content": "You can start <span class=\"ff2 fs1\">solr-exporter</span> by running <span class=\"ff2 fs1\">./bin/solr-exporter</span> (Linux) or <span class=\"ff2 fs1\">.\\bin\\solr-exporter.cmd</span>\n(Windows) from the <span class=\"ff2 fs1\">contrib/prometheus-exporter</span> directory.",
    "hierarchy": [
      "Starting the Exporter"
    ],
    "pageId": 1130
  },
  {
    "content": "See the commands below depending on your operating system and Solr operating mode:",
    "hierarchy": [
      "Starting the Exporter"
    ],
    "pageId": 1130
  },
  {
    "content": "$ cd contrib/prometheus-exporter\n$ ./bin/solr-exporter -p 9854 -b http://localhost:8983/solr -f ./conf/solr-exporter-\nconfig.xml -n 8",
    "hierarchy": [
      "Starting the Exporter"
    ],
    "pageId": 1130
  },
  {
    "content": "$ cd contrib/prometheus-exporter\n$ ./bin/solr-exporter -p 9854 -z localhost:2181/solr -f ./conf/solr-exporter-config.xml -n 16",
    "hierarchy": [
      "Starting the Exporter"
    ],
    "pageId": 1130
  },
  {
    "content": "> cd contrib\\prometheus-exporter\n> .\\bin\\solr-exporter.cmd -p 9854 -b http://localhost:8983/solr -f .\\conf\\solr-exporter-\nconfig.xml -n 8",
    "hierarchy": [
      "Starting the Exporter"
    ],
    "pageId": 1130
  },
  {
    "content": "> cd contrib\\prometheus-exporter\n> .\\bin\\solr-exporter -p 9854 -z localhost:2181/solr -f .\\conf\\solr-exporter-config.xml -n 16",
    "hierarchy": [
      "Starting the Exporter"
    ],
    "pageId": 1130
  },
  {
    "content": "The parameters in the example start commands shown above",
    "hierarchy": [
      "Starting the Exporter",
      "Command Line Parameters"
    ],
    "pageId": 1130
  },
  {
    "content": "h<span class=\"code\">, </span>--help",
    "hierarchy": [
      "Starting the Exporter",
      "Command Line Parameters"
    ],
    "pageId": 1130
  },
  {
    "content": "Displays command line help and usage.",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "-p<span class=\"code\">, </span>--port\nThe port where Prometheus will listen for new data. This port will be used to configure Prometheus. It\ncan be any port not already in use on your server. The default is <span class=\"ff2 fs1\">9983</span>.",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "-b<span class=\"code\">, </span>--baseurl\nThe Solr base URL (such as <span class=\"ff2 fs1\">http://localhost:8983/solr</span>) when Solr is running in Standalone mode. If\nyou are running Solr in SolrCloud mode, do not specify this parameter. If neither the <span class=\"ff2 fs1\">-b</span> parameter nor\nthe <span class=\"ff2 fs1\">-z</span> parameter are defined, the default is <span class=\"ff2 fs1\">-b http://localhost:8983/solr</span>.",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "-z<span class=\"code\">, </span>--zkhost\nThe ZooKeeper connect string (such as <span class=\"ff2 fs1\">localhost:8983</span>, or <span class=\"ff2 fs1\">localhost:2181/solr</span>) when Solr is running\nin SolrCloud mode. If you are running Solr in Standalone mode, do not specify this parameter. If neither\nthe <span class=\"ff2 fs1\">-b</span> parameter nor the <span class=\"ff2 fs1\">-z</span> parameter are defined, the <span class=\"ff2 fs1\">-b</span> parameter default is used.",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "-f<span class=\"code\">, </span>--config-file\nThe path to the configuration file that defines the Solr metrics to read. The default is\ncontrib/prometheus-exporter/conf/solr-exporter-config.xml<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "-n<span class=\"code\">, </span>--num-threads\nThe number of threads. The <span class=\"ff2 fs1\">solr-exporter</span> creates thread pools for requests to Solr. Request latency can\nbe improved by increasing the number of threads. The default is <span class=\"ff2 fs1\">1</span>.",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "The Solr's metrics exposed by <span class=\"ff2 fs1\">solr-exporter</span> can be seen at:\nhttp://localhost:9983/solr/admin/metrics<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1131
  },
  {
    "content": "The configuration for the <span class=\"ff2 fs1\">solr-exporter</span> defines the data to get from Solr. This includes the metrics, but can\nalso include queries to the PingRequestHandler, the Collections API, and a query to any query request\nhandler.",
    "hierarchy": [
      "Exporter Configuration"
    ],
    "pageId": 1131
  },
  {
    "content": "A default example configuration is in <span class=\"ff2 fs1\">contrib/prometheus-exporter/config/solr-exporter-config.xml</span>.\nBelow is a slightly shortened version of it:",
    "hierarchy": [
      "Exporter Configuration"
    ],
    "pageId": 1131
  },
  {
    "content": "Ê <span class=\"fc2\"><rules></span>",
    "hierarchy": [
      "Exporter Configuration"
    ],
    "pageId": 1131
  },
  {
    "content": "Ê   <span class=\"fc2\"><ping></span>\nÊ     <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"request\"<span class=\"fc2\">></span></span>\nÊ       <span class=\"fc2\"><lst</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"query\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><str</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"path\"<span class=\"fc2\">></span></span>/admin/ping<span class=\"fc2\"></str></span>\nÊ       <span class=\"fc2\"></lst></span>\nÊ       <span class=\"fc2\"><arr</span> <span class=\"fc3\">name</span>=<span class=\"fc4\">\"jsonQueries\"<span class=\"fc2\">></span></span>\nÊ         <span class=\"fc2\"><str></span>\nÊ           . as $object | $object |\nÊ           (if $object.status == \"OK\" then 1.0 else 0.0 end) as $value |\nÊ           {",
    "hierarchy": [
      "Exporter Configuration"
    ],
    "pageId": 1131
  },
  {
    "content": "Ê             name         : \"solr_ping\",\nÊ             type         : \"GAUGE\",\nÊ             help         : \"See following URL: https://lucene.apache.org/solr/guide/ping.html\",\nÊ             label_names  : [],\nÊ             label_values : [],\nÊ             value        : $value\nÊ           }\nÊ         <span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></ping></span>",
    "hierarchy": [
    ],
    "pageId": 1132
  },
  {
    "content": "Ê   <span class=\"fc1\"><metrics></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"request\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"query\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"path\"<span class=\"fc1\">></span></span>/admin/metrics<span class=\"fc1\"></str></span>\nÊ         <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"params\"<span class=\"fc1\">></span></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"group\"<span class=\"fc1\">></span></span>all<span class=\"fc1\"></str></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"type\"<span class=\"fc1\">></span></span>all<span class=\"fc1\"></str></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"prefix\"<span class=\"fc1\">></str></span></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"property\"<span class=\"fc1\">></str></span></span>\nÊ         <span class=\"fc1\"></lst></span>\nÊ       <span class=\"fc1\"></lst></span>\nÊ       <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"jsonQueries\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc4\"><!--</span>",
    "hierarchy": [
    ],
    "pageId": 1132
  },
  {
    "content": "Ê         <span class=\"fc1\"><str></span>\nÊ           .metrics[\"solr.jetty\"] | to_entries | .[] | select(.key |\nstartswith(\"org.eclipse.jetty.server.handler.DefaultHandler\")) | select(.key | endswith(\"xx-\nresponses\")) as $object |\nÊ           $object.key | split(\".\") | last | split(\"-\") | first as $status |\nÊ           $object.value.count as $value |\nÊ           {\nÊ           name         : \"solr_metrics_jetty_response_total\",\nÊ           type         : \"COUNTER\",\nÊ           help         : \"See following URL: https://lucene.apache.org/solr/guide/metrics-\nreporting.html\",\nÊ           label_names  : [\"status\"],\nÊ           label_values : [$status],\nÊ           value        : $value\nÊ           }\nÊ         <span class=\"fc1\"></str></span>\n...\nÊ       <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></metrics></span>",
    "hierarchy": [
    ],
    "pageId": 1132
  },
  {
    "content": "Ê   <span class=\"fc1\"><collections></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"request\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"query\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"path\"<span class=\"fc1\">></span></span>/admin/collections<span class=\"fc1\"></str></span>",
    "hierarchy": [
    ],
    "pageId": 1132
  },
  {
    "content": "Ê         <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"params\"<span class=\"fc1\">></span></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"action\"<span class=\"fc1\">></span></span>CLUSTERSTATUS<span class=\"fc1\"></str></span>\nÊ         <span class=\"fc1\"></lst></span>\nÊ       <span class=\"fc1\"></lst></span>\nÊ       <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"jsonQueries\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><str></span>\nÊ           .cluster.live_nodes | length as $value|\nÊ           {\nÊ             name         : \"solr_collections_live_nodes\",\nÊ             type         : \"GAUGE\",\nÊ             help         : \"See following URL:\nhttps://lucene.apache.org/solr/guide/collections-api.html#clusterstatus\",\nÊ             label_names  : [],\nÊ             label_values : [],\nÊ             value        : $value\nÊ           }\nÊ         <span class=\"fc1\"></str></span>\n...\nÊ       <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></collections></span>",
    "hierarchy": [
    ],
    "pageId": 1133
  },
  {
    "content": "Ê   <span class=\"fc1\"><search></span>\nÊ     <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"request\"<span class=\"fc1\">></span></span>\nÊ       <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"query\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"collection\"<span class=\"fc1\">></span></span>collection1<span class=\"fc1\"></str></span>\nÊ         <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"path\"<span class=\"fc1\">></span></span>/select<span class=\"fc1\"></str></span>\nÊ         <span class=\"fc1\"><lst</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"params\"<span class=\"fc1\">></span></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"q\"<span class=\"fc1\">></span></span>*:*<span class=\"fc1\"></str></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"start\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></str></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"rows\"<span class=\"fc1\">></span></span>0<span class=\"fc1\"></str></span>\nÊ           <span class=\"fc1\"><str</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"json.facet\"<span class=\"fc1\">></span></span>\nÊ             {\nÊ               category: {\nÊ                 type: terms,\nÊ                 field: cat\nÊ               }\nÊ             }\nÊ           <span class=\"fc1\"></str></span>\nÊ         <span class=\"fc1\"></lst></span>\nÊ       <span class=\"fc1\"></lst></span>\nÊ       <span class=\"fc1\"><arr</span> <span class=\"fc2\">name</span>=<span class=\"fc3\">\"jsonQueries\"<span class=\"fc1\">></span></span>\nÊ         <span class=\"fc1\"><str></span>\nÊ           .facets.category.buckets[] as $object |\nÊ           $object.val as $term |\nÊ           $object.count as $value |\nÊ           {\nÊ             name         : \"solr_facets_category\",\nÊ             type         : \"GAUGE\",\nÊ             help         : \"Category facets\",\nÊ             label_names  : [\"term\"],\nÊ             label_values : [$term],",
    "hierarchy": [
    ],
    "pageId": 1133
  },
  {
    "content": "Ê             value        : $value\nÊ           }\nÊ         <span class=\"fc1\"></str></span>\nÊ       <span class=\"fc1\"></arr></span>\nÊ     <span class=\"fc1\"></lst></span>\nÊ   <span class=\"fc1\"></search></span>",
    "hierarchy": [
    ],
    "pageId": 1134
  },
  {
    "content": "Ê <span class=\"fc1\"></rules></span>",
    "hierarchy": [
    ],
    "pageId": 1134
  },
  {
    "content": "The <span class=\"ff1 fs2\">solr-exporter</span> works by making a request to Solr according to the definitions in the configuration file,\nscraping the response, and converting it to a JSON structure Prometheus can understand. The configuration\nfile defines the elements to request, how to scrape them, and where to place the extracted data in the JSON\ntemplate.",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "The <span class=\"ff1 fs2\">solr-exporter</span> configuration file always starts and closes with two simple elements:",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "Ê <span class=\"fc1\"><rules></span>",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "Ê <span class=\"fc1\"></rules></span>",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "Between these elements, the data the <span class=\"ff1 fs2\">solr-exporter</span> should request is defined. There are several possible\ntypes of requests to make:",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "<ping>\nScrape the response to a <span class=\"link\">PingRequestHandler</span> request.",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "<metrics>\nScrape the response to a <span class=\"link\">Metrics API</span> request.",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "<collections>\nScrape the response to a <span class=\"link\">Collections API</span> request.",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "<search>\nScrape the response to a <span class=\"link\">search</span> request.",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "Within each of these types, we need to define the query and how to work with the response. To do this, we\ndefine two additional elements:",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "<query>\nDefines the query parameter(s) used for the request. This section uses several additional properties to\ndefine your query:",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "collection\nThe collection to issue the query against. Only used in SolrCloud mode.",
    "hierarchy": [
      "Configuration Tags and Elements"
    ],
    "pageId": 1134
  },
  {
    "content": "core\nThe core to issue the query against. Only used in Standalone mode.",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "path\nThe path to the query endpoint where the request will be sent. Examples include <span class=\"ff1 fs0\">admin/metrics</span> or\n/select<span class=\"ff2 fs1\"> or </span>admin/collections<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "params\nAdditional query parameters. These will vary depending on the request type and the endpoint. For\nexample, if using the Metrics endpoint, you can add parameters to limit the query to a certain group\nand/or prefix. If you're using the Collections API, the command you want to use would be a\nparameter.",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "<jsonQueries>\nThis is an array that defines one or more JSON Queries in jq syntax. For more details about how to\nstructure these queries, see <span class=\"link\">the jq user manual</span>.",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "A jq query has to output JSON in the following format:",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"name\"</span>: <span class=\"fc3\">\"solr_ping\"</span>,\nÊ <span class=\"fc2\">\"type\"</span>: <span class=\"fc3\">\"GAUGE\"</span>,\nÊ <span class=\"fc2\">\"help\"</span>: <span class=\"fc3\">\"See following URL: https://lucene.apache.org/solr/guide/ping.html\"</span>,\nÊ <span class=\"fc2\">\"label_names\"</span>: [<span class=\"fc3\">\"base_url\"</span>,<span class=\"fc3\">\"core\"</span>],\nÊ <span class=\"fc2\">\"label_values\"</span>: [<span class=\"fc3\">\"http://localhost:8983/solr\"</span>,<span class=\"fc3\">\"collection1\"</span>],\nÊ <span class=\"fc2\">\"value\"</span>: <span class=\"fc4\">1.0</span>\n}",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "See the section <span class=\"link\">Exposition Format</span> below for information about what information should go into each\nproperty, and an example of how the above example is translated for Prometheus.",
    "hierarchy": [
    ],
    "pageId": 1135
  },
  {
    "content": "The <span class=\"ff1 fs0\">solr-exporter</span> converts the JSON to the following exposition format:",
    "hierarchy": [
      "Exposition Format"
    ],
    "pageId": 1135
  },
  {
    "content": "# TYPE <name> <type>\n# HELP <name> <help>\n<name>{<label_names[0]>=<label_values[0]>,<label_names[1]>=<labelvalues[1]>,...} <value>",
    "hierarchy": [
      "Exposition Format"
    ],
    "pageId": 1135
  },
  {
    "content": "The following parameters should be set:",
    "hierarchy": [
      "Exposition Format"
    ],
    "pageId": 1135
  },
  {
    "content": "name\nThe metric name to set. For more details, see <span class=\"link\">Prometheus naming best practices</span>.",
    "hierarchy": [
      "Exposition Format"
    ],
    "pageId": 1135
  },
  {
    "content": "type\nThe type of the metric, can be <span class=\"ff1 fs0\">COUNTER</span>, <span class=\"ff1 fs0\">GAUGE</span>, <span class=\"ff1 fs0\">SUMMARY</span>, <span class=\"ff1 fs0\">HISTOGRAM</span> or <span class=\"ff1 fs0\">UNTYPED</span>. For more details, see\nPrometheus metric types<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Exposition Format"
    ],
    "pageId": 1135
  },
  {
    "content": "help",
    "hierarchy": [
      "Exposition Format"
    ],
    "pageId": 1135
  },
  {
    "content": "Help text for the metric.",
    "hierarchy": [
    ],
    "pageId": 1136
  },
  {
    "content": "label_names\nLabel names for the metric. For more details, see <span class=\"link\">Prometheus naming best practices</span>.",
    "hierarchy": [
    ],
    "pageId": 1136
  },
  {
    "content": "label_values\nLabel values for the metric. For more details, see <span class=\"link\">Prometheus naming best practices</span>.",
    "hierarchy": [
    ],
    "pageId": 1136
  },
  {
    "content": "value\nValue for the metric. Value must be set to Double type.",
    "hierarchy": [
    ],
    "pageId": 1136
  },
  {
    "content": "For example, <span class=\"ff2 fs1\">solr-exporter</span> converts the JSON in the previous section to the following:",
    "hierarchy": [
    ],
    "pageId": 1136
  },
  {
    "content": "# TYPE solr_ping gauge\n# HELP solr_ping See following URL: https://lucene.apache.org/solr/guide/ping.html\nsolr_ping{base_url=\"http://localhost:8983/solr\",core=\"collection1\"} 1.0",
    "hierarchy": [
    ],
    "pageId": 1136
  },
  {
    "content": "In order for Prometheus to know about the <span class=\"ff2 fs1\">solr-exporter</span>, the listen address must be added to\nprometheus.yml<span class=\"ff1 fs0\">, as in this example:</span>",
    "hierarchy": [
      "Prometheus Configuration"
    ],
    "pageId": 1136
  },
  {
    "content": "scrape_configs:\nÊ - job_name: 'solr'\nÊ   static_configs:\nÊ     - targets: ['localhost:9854']",
    "hierarchy": [
      "Prometheus Configuration"
    ],
    "pageId": 1136
  },
  {
    "content": "If you already have a section for <span class=\"ff2 fs1\">scrape_configs</span>, you can add the <span class=\"ff2 fs1\">job_name</span> and other values in the same\nsection.",
    "hierarchy": [
      "Prometheus Configuration"
    ],
    "pageId": 1136
  },
  {
    "content": "When you apply the settings to Prometheus, it will start to pull Solr's metrics from <span class=\"ff2 fs1\">solr-exporter</span>.",
    "hierarchy": [
      "Prometheus Configuration"
    ],
    "pageId": 1136
  },
  {
    "content": "A Grafana sample dashboard is provided in the following JSON file: <span class=\"ff2 fs1\">contrib/prometheus-</span>\nexporter/conf/grafana-solr-dashboard.json<span class=\"ff1 fs0\">. You can place this with your other Grafana dashboard</span>\nconfigurations and modify it as necessary depending on any customization you've done for the <span class=\"ff2 fs1\">solr-</span>\nexporter<span class=\"ff1 fs0\"> configuration.</span>",
    "hierarchy": [
      "Sample Grafana Dashboard"
    ],
    "pageId": 1136
  },
  {
    "content": "This screenshot shows what it might look like:",
    "hierarchy": [
      "Sample Grafana Dashboard"
    ],
    "pageId": 1136
  },
  {
    "content": "This page explains some of the statistics that Solr exposes.",
    "hierarchy": [
      "Performance Statistics Reference"
    ],
    "pageId": 1138
  },
  {
    "content": "There are two approaches to retrieving metrics. First, you can use the <span class=\"link\">Metrics API</span>, or you can enable JMX\nand get metrics from the <span class=\"link\">MBean Request Handler</span> or via an external tool such as JConsole. The below\ndescriptions focus on retrieving the metrics using the Metrics API, but the metric names are the same if\nusing the MBean Request Handler or an external tool.",
    "hierarchy": [
      "Performance Statistics Reference"
    ],
    "pageId": 1138
  },
  {
    "content": "These statistics are per core. When you are running in SolrCloud mode these statistics would co-relate to the\nperformance of an individual replica.",
    "hierarchy": [
      "Performance Statistics Reference"
    ],
    "pageId": 1138
  },
  {
    "content": "The update request handler is an endpoint to send data to Solr. We can see how many update requests are\nbeing fired, how fast is it performing, and other valuable information regarding requests.",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Update Request Handler"
    ],
    "pageId": 1138
  },
  {
    "content": "Registry & Path:<span class=\"ff2\"> <span class=\"code\">solr.<core>:UPDATE./update</span></span>",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Update Request Handler"
    ],
    "pageId": 1138
  },
  {
    "content": "You can request update request handler statistics with an API request such as\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=UPDATE<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Update Request Handler"
    ],
    "pageId": 1138
  },
  {
    "content": "Can be useful to measure and track number of search queries, response times, etc. If you are not using the\n“select” handler then the path needs to be changed appropriately. Similarly if you are using the “sql”\nhandler or “export” handler, the realtime handler “get”, or any other handler similar statistics can be found\nfor that as well.",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Search Request Handler"
    ],
    "pageId": 1138
  },
  {
    "content": "Registry & Path<span class=\"ff2\">: <span class=\"code\">solr.<core>:QUERY./select</span></span>",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Search Request Handler"
    ],
    "pageId": 1138
  },
  {
    "content": "You can request statistics for the <span class=\"code\">/select</span> request handler with an API request such as\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=QUERY./select<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Search Request Handler"
    ],
    "pageId": 1138
  },
  {
    "content": "All of the update and search request handlers will provide the following statistics.",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Commonly Used Stats for Request Handlers"
    ],
    "pageId": 1138
  },
  {
    "content": "To get request times, specifically, you can send an API request such as:",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Commonly Used Stats for Request Handlers"
    ],
    "pageId": 1138
  },
  {
    "content": "\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=UPDATE./update.requestTimes",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Commonly Used Stats for Request Handlers"
    ],
    "pageId": 1138
  },
  {
    "content": "\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=QUERY./select.requestTimes",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Commonly Used Stats for Request Handlers"
    ],
    "pageId": 1138
  },
  {
    "content": "15minRateRequests per second received over the past 15 minutes.",
    "hierarchy": [
      "Performance Statistics Reference",
      "Request Handler Statistics",
      "Commonly Used Stats for Request Handlers"
    ],
    "pageId": 1138
  },
  {
    "content": "5minRateRequests per second received over the past 5 minutes.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "p75_msRequest processing time for the request which belongs to the 75\n Percentile.\nE.g., if 100 requests are received, then the 75\n fastest request time will be\nreported by this statistic.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "p95_msRequest processing time in milliseconds for the request which belongs to the\n95\n Percentile. E.g., if 100 requests are received, then the 95\n fastest request\ntime will be reported in this statistic.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "p999_msRequest processing time in milliseconds for the request which belongs to the\n99.9\n Percentile. E.g., if 1000 requests are received, then the 999\n fastest\nrequest time will be reported in this statistic.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "p99_msRequest processing time in milliseconds for the request which belongs to the\n99\n Percentile. E.g., if 100 requests are received, then the 99\n fastest request\ntime will be reported in this statistic.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "countTotal number of requests made since the Solr process was started.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "median_msMedian of all the request processing time.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "avgRequestsPerSecondAverage number of requests received per second.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "avgTimePerRequestAverage time taken for processing the requests. This parameter will decay over\ntime, with a bias toward activity in the last 5 minutes.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "Other types of data such as errors and timeouts are also provided. These are available under different\nmetric names. For example:",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=UPDATE./update.errors",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=QUERY./select.errors",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "The table below shows the metric names and attributes to request:",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "QUERY./select.errors\nUPDATE./update.errors\nNumber of errors encountered by handler. In addition to a count of errors,\nmean, 1 minute, 5 minute, and 15 minute rates are also available.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "QUERY./select.clientErrors\nUPDATE./update.clientError\ns\nNumber of syntax or parse errors made by a client while making requests.\nIn addition to a count of errors, mean, 1 minute, 5 minute, and 15 minute\nrates are also available.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "QUERY./select.serverErrors\nUPDATE./update.serverError\ns\nNumber of errors thrown by the server while executing the request. In\naddition to a count of errors, mean, 1 minute, 5 minute, and 15 minute\nrates are also available.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "QUERY./select.timeouts\nUPDATE./update.timeouts\nNumber of responses received with partial results. In addition to a count\nof timeout events, mean, 1 minute, 5 minute, and 15 minute rates are also\navailable.",
    "hierarchy": [
    ],
    "pageId": 1139
  },
  {
    "content": "QUERY./select.totalTime\nUPDATE./update.totalTime\nThe sum of all request processing times since the Solr process was started.",
    "hierarchy": [
    ],
    "pageId": 1140
  },
  {
    "content": "QUERY./select.handlerStart\nUPDATE./update.handlerStar\nt\nEpoch time when the handler was registered.",
    "hierarchy": [
    ],
    "pageId": 1140
  },
  {
    "content": "This section has information on the total number of adds and how many commits have been fired against a\nSolr core.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "Registry & Path:<span class=\"code\"> <span class=\"ff2 fs1\">solr.<core>:UPDATE.updateHandler</span></span>",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "You can get all update handler statistics shown in the table below with an API request such as\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=UPDATE.updateHandler<span class=\"code\">.</span>",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "The following describes the specific statistics you can get:",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.adds\nTotal number of “add” requests since last commit.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.autoCommitMaxTi\nme\nMaximum time between two auto-commits execution.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.autoCommits\nTotal number of auto-commits executed.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.commits\nNumber of total commits executed.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "In addition to a count of commits, mean, 1 minute, 5 minute,\nand 15 minute rates are also available.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.cumulativeAdds\nNumber of “effective” additions executed over the lifetime. The\ncounter is incremented when “add‘ command is executed while\ndecremented when “rollback” is executed.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "In addition to a count of adds, mean, 1 minute, 5 minute, and 15\nminute rates are also available.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.cumulativeDelet\nesById\nNumber of document deletions executed by ID over the\nlifetime. The counter is incremented when “delete” command is\nexecuted and decremented when “rollback” is executed.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "In addition to a count of deletes, mean, 1 minute, 5 minute, and\n15 minute rates are also available.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.cumulativeDelet\nesByQuery\nNumber of document deletions executed by query over the\nlifetime. The counter is incremented when “delete” command is\nexecuted and decremented when “rollback” is executed.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "In addition to a count of deletes, mean, 1 minute, 5 minute, and\n15 minute rates are also available.",
    "hierarchy": [
      "Update Handler"
    ],
    "pageId": 1140
  },
  {
    "content": "UPDATE.updateHandler.cumulativeError\ns\nNumber of error messages received while performing\naddition/deletion actions on documents over the lifetime.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "In addition to a count of errors, mean, 1 minute, 5 minute, and\n15 minute rates are also available.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.deletesById\nCurrently uncommitted deletions by ID.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.deletesByQuery\nCurrently uncommitted deletions by query.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.docsPending\nNumber of documents which are pending commit.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.errors\nNumber of error messages received while performing\naddition/deletion/commit/rollback actions on documents over\nthe lifetime of the core.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.expungeDeletes\nNumber of commit commands issued with expunge deletes.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "In addition to a count of expunge deletes, mean, 1 minute, 5\nminute, and 15 minute rates are also available.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.merges\nNumber of index merges that have occurred.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "In addition to a count of merges, mean, 1 minute, 5 minute, and\n15 minute rates are also available.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.optimizes\nNumber of explicit optimize commands issued.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "In addition to a count of optimizations, mean, 1 minute, 5\nminute, and 15 minute rates are also available.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.rollbacks\nNumber of rollbacks executed.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "In addition to a count of rollbacks, mean, 1 minute, 5 minute,\nand 15 minute rates are also available.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.softAutoCommitM\naxTime\nMaximum document ‘adds' between two soft auto-commits.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "UPDATE.updateHandler.softAutoCommits\nNumber of soft commits executed.",
    "hierarchy": [
    ],
    "pageId": 1141
  },
  {
    "content": "This cache holds Lucene Document objects (the stored fields for each document). Since Lucene internal\ndocument IDs are transient, this cache cannot be auto-warmed.",
    "hierarchy": [
      "Cache Statistics",
      "Document Cache"
    ],
    "pageId": 1141
  },
  {
    "content": "Registry and Path:<span class=\"code\"> <span class=\"ff2 fs1\">solr.<core>:CACHE.searcher.documentCache</span></span>",
    "hierarchy": [
      "Cache Statistics",
      "Document Cache"
    ],
    "pageId": 1141
  },
  {
    "content": "You can get the statistics shown in the table below with an API request such as\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=CACHE.searcher.documentCache<span class=\"code\">.</span>",
    "hierarchy": [
      "Cache Statistics",
      "Document Cache"
    ],
    "pageId": 1141
  },
  {
    "content": "This cache holds the results of previous searches: ordered lists of document IDs based on a query, a sort,\nand the range of documents requested",
    "hierarchy": [
      "Query Result Cache"
    ],
    "pageId": 1142
  },
  {
    "content": "Registry and Path:<span class=\"ff2\"> <span class=\"code\">solr.<core>:CACHE.searcher.queryResultCache</span></span>",
    "hierarchy": [
      "Query Result Cache"
    ],
    "pageId": 1142
  },
  {
    "content": "You can get the statistics shown in the table below with an API request such as\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=CACHE.searcher.queryResultCache<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Query Result Cache"
    ],
    "pageId": 1142
  },
  {
    "content": "This cache is used for filters for unordered sets of all documents that match a query.",
    "hierarchy": [
      "Filter Cache"
    ],
    "pageId": 1142
  },
  {
    "content": "Registry and Path:<span class=\"ff2\"> <span class=\"code\">solr.<core>:CACHE.searcher.filterCache</span></span>",
    "hierarchy": [
      "Filter Cache"
    ],
    "pageId": 1142
  },
  {
    "content": "You can get the statistics shown in the table below with an API request such as\nhttp://localhost:8983/solr/admin/metrics?group=core&prefix=CACHE.searcher.filterCache<span class=\"ff2 fs1\">.</span>",
    "hierarchy": [
      "Filter Cache"
    ],
    "pageId": 1142
  },
  {
    "content": "The following statistics are available for each of the caches mentioned above:",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "cumulative_evictionsNumber of cache evictions across all caches since this node has been running.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "cumulative_hitratioRatio of cache hits to lookups across all the caches since this node has been\nrunning.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "cumulative_hitsNumber of cache hits across all the caches since this node has been running.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "cumulative_insertsNumber of cache insertions across all the caches since this node has been\nrunning.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "cumulative_lookupsNumber of cache lookups across all the caches since this node has been\nrunning.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "evictionsNumber of cache evictions for the current index searcher.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "hitratioRatio of cache hits to lookups for the current index searcher.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "hitsNumber of hits for the current index searcher.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "insertsNumber of inserts into the cache.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "lookupsNumber of lookups against the cache.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "sizeSize of the cache at that particular instance (in KBs).",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "warmupTimeWarm-up time for the registered index searcher. This time is taken in account\nfor the “auto-warming” of caches.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "More information on Solr caches is available in the section <span class=\"link\">Query Settings in SolrConfig</span>.",
    "hierarchy": [
      "Statistics for Caches"
    ],
    "pageId": 1142
  },
  {
    "content": "When planning how to secure Solr, you should consider which of the available features or approaches are\nright for you.",
    "hierarchy": [
      "Securing Solr"
    ],
    "pageId": 1143
  },
  {
    "content": "Authentication or authorization of users using:",
    "hierarchy": [
      "Securing Solr"
    ],
    "pageId": 1143
  },
  {
    "content": "◦<span class=\"link\">Kerberos Authentication Plugin</span>\n◦<span class=\"link\">Basic Authentication Plugin</span>\n◦<span class=\"link\">Rule-Based Authorization Plugin</span>\n◦<span class=\"link\">Custom authentication or authorization plugin</span>\n<span class=\"link\">Enabling SSL</span>",
    "hierarchy": [
      "Securing Solr"
    ],
    "pageId": 1143
  },
  {
    "content": "If using SolrCloud, <span class=\"link\">ZooKeeper Access Control</span>",
    "hierarchy": [
      "Securing Solr"
    ],
    "pageId": 1143
  },
  {
    "content": "No Solr API, including the Admin UI, is designed to be exposed to non-trusted parties. Tune\nyour firewall so that only trusted computers and people are allowed access. Because of this,\nthe project will not regard e.g., Admin UI XSS issues as security vulnerabilities. However, we\nstill ask you to report such issues in JIRA.",
    "hierarchy": [
      "Securing Solr"
    ],
    "pageId": 1143
  },
  {
    "content": "Solr has security frameworks for supporting authentication and authorization of users. This allows for\nverifying a user's identity and for restricting access to resources in a Solr cluster.",
    "hierarchy": [
      "Authentication and Authorization Plugins"
    ],
    "pageId": 1144
  },
  {
    "content": "Solr includes some plugins out of the box, and additional plugins can be developed using the authentication\nand authorization frameworks described below.",
    "hierarchy": [
      "Authentication and Authorization Plugins"
    ],
    "pageId": 1144
  },
  {
    "content": "All authentication and authorization plugins can work with Solr whether they are running in SolrCloud mode\nor standalone mode. All authentication and authorization configuration, including users and permission\nrules, are stored in a file named <span class=\"code\">security.json</span>. When using Solr in standalone mode, this file must be in the\n$SOLR_HOME<span class=\"ff2 fs1\"> directory (usually </span>server/solr<span class=\"ff2 fs1\">). When using SolrCloud, this file must be located in ZooKeeper.</span>",
    "hierarchy": [
      "Authentication and Authorization Plugins"
    ],
    "pageId": 1144
  },
  {
    "content": "The following section describes how to enable plugins with <span class=\"code\">security.json</span> and place them in the proper\nlocations for your mode of operation.",
    "hierarchy": [
      "Authentication and Authorization Plugins"
    ],
    "pageId": 1144
  },
  {
    "content": "All of the information required to initialize either type of security plugin is stored in a <span class=\"code\">security.json</span> file.\nThis file contains 2 sections, one each for authentication and authorization.",
    "hierarchy": [
      "Authentication and Authorization Plugins",
      "Enable Plugins with security.json"
    ],
    "pageId": 1144
  },
  {
    "content": "{\nÊ <span class=\"fc3\">\"authentication\"</span> : {\nÊ   <span class=\"fc3\">\"class\"</span>: <span class=\"fc4\">\"class.that.implements.authentication\"</span>\nÊ },\nÊ <span class=\"fc3\">\"authorization\"</span>: {\nÊ   <span class=\"fc3\">\"class\"</span>: <span class=\"fc4\">\"class.that.implements.authorization\"</span>\nÊ }\n}",
    "hierarchy": [
      "Authentication and Authorization Plugins",
      "Enable Plugins with security.json"
    ],
    "pageId": 1144
  },
  {
    "content": "The <span class=\"code\">/security.json</span> file needs to be in the proper location before a Solr instance comes up so Solr starts\nwith the security plugin enabled. See the section <span class=\"link\">Using security.json with Solr</span> below for information on how\nto do this.",
    "hierarchy": [
      "Authentication and Authorization Plugins",
      "Enable Plugins with security.json"
    ],
    "pageId": 1144
  },
  {
    "content": "Depending on the plugin(s) in use, other information will be stored in <span class=\"code\">security.json</span> such as user\ninformation or rules to create roles and permissions. This information is added through the APIs for each\nplugin provided by Solr, or, in the case of a custom plugin, the approach designed by you.",
    "hierarchy": [
      "Authentication and Authorization Plugins",
      "Enable Plugins with security.json"
    ],
    "pageId": 1144
  },
  {
    "content": "Here is a more detailed <span class=\"code\">security.json</span> example. In this, the Basic authentication and rule-based\nauthorization plugins are enabled, and some data has been added:",
    "hierarchy": [
      "Authentication and Authorization Plugins",
      "Enable Plugins with security.json"
    ],
    "pageId": 1144
  },
  {
    "content": "{",
    "hierarchy": [
    ],
    "pageId": 1145
  },
  {
    "content": "Ê  <span class=\"fc1\">\"class\"</span>:<span class=\"fc2\">\"solr.BasicAuthPlugin\"</span>,\nÊ  <span class=\"fc1\">\"credentials\"</span>:{<span class=\"fc1\">\"solr\"</span>:<span class=\"fc2\">\"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0=</span>",
    "hierarchy": [
    ],
    "pageId": 1145
  },
  {
    "content": "},",
    "hierarchy": [
    ],
    "pageId": 1145
  },
  {
    "content": "Ê  <span class=\"fc1\">\"class\"</span>:<span class=\"fc2\">\"solr.RuleBasedAuthorizationPlugin\"</span>,\nÊ  <span class=\"fc1\">\"permissions\"</span>:[{<span class=\"fc1\">\"name\"</span>:<span class=\"fc2\">\"security-edit\"</span>,\nÊ     <span class=\"fc1\">\"role\"</span>:<span class=\"fc2\">\"admin\"</span>}],\nÊ  <span class=\"fc1\">\"user-role\"</span>:{<span class=\"fc1\">\"solr\"</span>:<span class=\"fc2\">\"admin\"</span>}\n}}",
    "hierarchy": [
    ],
    "pageId": 1145
  },
  {
    "content": "While configuring Solr to use an authentication or authorization plugin, you will need to upload a\nsecurity.json<span class=\"code\"> file to ZooKeeper. The following command writes the file as it uploads it - you could also</span>\nupload a file that you have already created locally.",
    "hierarchy": [
      "Using security.json with Solr",
      "In SolrCloud Mode"
    ],
    "pageId": 1145
  },
  {
    "content": ">server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:2181 -cmd put /security.json\nÊ '{\"authentication\": {\"class\": \"org.apache.solr.security.KerberosPlugin\"}}'",
    "hierarchy": [
      "Using security.json with Solr",
      "In SolrCloud Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "Note that this example defines the <span class=\"ff1 fs3\">KerberosPlugin</span> for authentication. You will want to modify this section\nas appropriate for the plugin you are using.",
    "hierarchy": [
      "Using security.json with Solr",
      "In SolrCloud Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "This example also defines <span class=\"ff1 fs3\">security.json</span> on the command line, but you can also define a file locally and\nupload it to ZooKeeper.",
    "hierarchy": [
      "Using security.json with Solr",
      "In SolrCloud Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "Depending on the authentication and authorization plugin that you use, you may have user\ninformation stored in <span class=\"ff1 fs3\">security.json</span>. If so, we highly recommend that you implement\naccess control in your ZooKeeper nodes. Information about how to enable this is available\nin the section <span class=\"link\">ZooKeeper Access Control</span>.",
    "hierarchy": [
      "Using security.json with Solr",
      "In SolrCloud Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "Once <span class=\"ff1 fs3\">security.json</span> has been uploaded to ZooKeeper, you should use the appropriate APIs for the plugins\nyou're using to update it. You can edit it manually, but you must take care to remove any version data so it\nwill be properly updated across all ZooKeeper nodes. The version data is found at the end of the\nsecurity.json<span class=\"code\"> file, and will appear as the letter \"v\" followed by a number, such as </span>{\"v\":138}<span class=\"code\">.</span>",
    "hierarchy": [
      "Using security.json with Solr",
      "In SolrCloud Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "When running Solr in standalone mode, you need to create the <span class=\"ff1 fs3\">security.json</span> file and put it in the\n$SOLR_HOME<span class=\"code\"> directory for your installation (this is the same place you have located </span>solr.xml<span class=\"code\"> and is usually</span>\nserver/solr<span class=\"code\">).</span>",
    "hierarchy": [
      "Using security.json with Solr",
      "In Standalone Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "If you are using <span class=\"link\">Legacy Scaling and Distribution</span>, you will need to place <span class=\"ff1 fs3\">security.json</span> on each node of the\ncluster.",
    "hierarchy": [
      "Using security.json with Solr",
      "In Standalone Mode"
    ],
    "pageId": 1145
  },
  {
    "content": "You can use the authentication and authorization APIs, but if you are using the legacy scaling model, you will\nneed to make the same API requests on each node separately. You can also edit <span class=\"ff2 fs1\">security.json</span> by hand if\nyou prefer.",
    "hierarchy": [
    ],
    "pageId": 1146
  },
  {
    "content": "Authentication plugins help in securing the endpoints of Solr by authenticating incoming requests. A custom\nplugin can be implemented by extending the AuthenticationPlugin class.",
    "hierarchy": [
      "Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "An authentication plugin consists of two parts:",
    "hierarchy": [
      "Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "1.Server-side component, which intercepts and authenticates incoming requests to Solr using a\nmechanism defined in the plugin, such as Kerberos, Basic Auth or others.",
    "hierarchy": [
      "Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "2.Client-side component, i.e., an extension of <span class=\"ff2 fs1\">HttpClientConfigurer</span>, which enables a SolrJ client to make\nrequests to a secure Solr instance using the authentication mechanism which the server understands.",
    "hierarchy": [
      "Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "Specify the authentication plugin in <span class=\"ff2 fs1\">/security.json</span> as in this example:",
    "hierarchy": [
      "Authentication Plugins",
      "Enabling a Plugin"
    ],
    "pageId": 1146
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"authentication\"</span>: {\nÊ   <span class=\"fc2\">\"class\"</span>: <span class=\"fc3\">\"class.that.implements.authentication\"</span>,\nÊ   <span class=\"fc2\">\"other_data\"</span> : <span class=\"fc3\">\"...\"</span>}\n}",
    "hierarchy": [
      "Authentication Plugins",
      "Enabling a Plugin"
    ],
    "pageId": 1146
  },
  {
    "content": "All of the content in the authentication block of <span class=\"ff2 fs1\">security.json</span> would be passed on as a map to the\nplugin during initialization.",
    "hierarchy": [
      "Authentication Plugins",
      "Enabling a Plugin"
    ],
    "pageId": 1146
  },
  {
    "content": "An authentication plugin can also be used with a standalone Solr instance by passing in\n-DauthenticationPlugin=<plugin class name><span class=\"ff1 fs0\"> during startup.</span>",
    "hierarchy": [
      "Authentication Plugins",
      "Enabling a Plugin"
    ],
    "pageId": 1146
  },
  {
    "content": "Solr has the following implementations of authentication plugins:",
    "hierarchy": [
      "Authentication Plugins",
      "Available Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "<span class=\"link\">Kerberos Authentication Plugin</span>",
    "hierarchy": [
      "Authentication Plugins",
      "Available Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "<span class=\"link\">Basic Authentication Plugin</span>",
    "hierarchy": [
      "Authentication Plugins",
      "Available Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "<span class=\"link\">Hadoop Authentication Plugin</span>",
    "hierarchy": [
      "Authentication Plugins",
      "Available Authentication Plugins"
    ],
    "pageId": 1146
  },
  {
    "content": "An authorization plugin can be written for Solr by extending the <span class=\"link\">AuthorizationPlugin</span> interface.",
    "hierarchy": [
      "Authorization"
    ],
    "pageId": 1146
  },
  {
    "content": "Make sure that the plugin implementation is in the classpath.",
    "hierarchy": [
      "Authorization",
      "Loading a Custom Plugin"
    ],
    "pageId": 1146
  },
  {
    "content": "The plugin can then be initialized by specifying the same in <span class=\"ff2 fs1\">security.json</span> in the following manner:",
    "hierarchy": [
      "Authorization",
      "Loading a Custom Plugin"
    ],
    "pageId": 1146
  },
  {
    "content": "{\nÊ <span class=\"fc1\">\"authorization\"</span>: {\nÊ   <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"org.apache.solr.security.MockAuthorizationPlugin\"</span>,\nÊ   <span class=\"fc1\">\"other_data\"</span> : <span class=\"fc2\">\"...\"</span>}\n}",
    "hierarchy": [
    ],
    "pageId": 1147
  },
  {
    "content": "All of the content in the <span class=\"ff1 fs1\">authorization</span> block of <span class=\"ff1 fs1\">security.json</span> would be passed on as a map to the plugin\nduring initialization.",
    "hierarchy": [
    ],
    "pageId": 1147
  },
  {
    "content": "The authorization plugin is only supported in SolrCloud mode. Also, reloading the plugin\nisn't yet supported and requires a restart of the Solr installation (meaning, the JVM should\nbe restarted, not simply a core reload).",
    "hierarchy": [
    ],
    "pageId": 1147
  },
  {
    "content": "Solr has one implementation of an authorization plugin:",
    "hierarchy": [
      "Available Authorization Plugins"
    ],
    "pageId": 1147
  },
  {
    "content": "<span class=\"link\">Rule-Based Authorization Plugin</span>",
    "hierarchy": [
      "Available Authorization Plugins"
    ],
    "pageId": 1147
  },
  {
    "content": "There are a lot of requests that originate from the Solr nodes itself. For example, requests from overseer to\nnodes, recovery threads, etc. Each Authentication plugin declares whether it is capable of securing inter-\nnode requests or not. If not, Solr will fall back to using a special internode authentication mechanism where\neach Solr node is a super user and is fully trusted by other Solr nodes, described below.",
    "hierarchy": [
      "Securing Inter-Node Requests"
    ],
    "pageId": 1147
  },
  {
    "content": "The PKIAuthenticationPlugin is used when there is any request going on between two Solr nodes, and the\nconfigured Authentication plugin does not wish to handle inter-node security.",
    "hierarchy": [
      "Securing Inter-Node Requests",
      "PKIAuthenticationPlugin"
    ],
    "pageId": 1147
  },
  {
    "content": "For each outgoing request <span class=\"ff1 fs1\">PKIAuthenticationPlugin</span> adds a special header <span class=\"ff1 fs1\">'SolrAuth'</span> which carries the\ntimestamp and principal encrypted using the private key of that node. The public key is exposed through an\nAPI so that any node can read it whenever it needs it. Any node who gets the request with that header,\nwould get the public key from the sender and decrypt the information. If it is able to decrypt the data, the\nrequest trusted. It is invalid if the timestamp is more than 5 secs old. This assumes that the clocks of\ndifferent nodes in the cluster are synchronized.",
    "hierarchy": [
      "Securing Inter-Node Requests",
      "PKIAuthenticationPlugin"
    ],
    "pageId": 1147
  },
  {
    "content": "The timeout is configurable through a system property called <span class=\"ff1 fs1\">pkiauth.ttl</span>. For example, if you wish to\nbump up the time-to-live to 10 seconds (10000 milliseconds), start each node with a property <span class=\"ff1 fs1\">'-</span>\nDpkiauth.ttl=10000'<span class=\"ff2 fs0\">.</span>",
    "hierarchy": [
      "Securing Inter-Node Requests",
      "PKIAuthenticationPlugin"
    ],
    "pageId": 1147
  },
  {
    "content": "Solr can support Basic authentication for users with the use of the BasicAuthPlugin.",
    "hierarchy": [
      "Basic Authentication Plugin"
    ],
    "pageId": 1147
  },
  {
    "content": "An authorization plugin is also available to configure Solr with permissions to perform various activities in\nthe system. The authorization plugin is described in the section <span class=\"link\">Rule-Based Authorization Plugin</span>.",
    "hierarchy": [
      "Basic Authentication Plugin"
    ],
    "pageId": 1147
  },
  {
    "content": "To use Basic authentication, you must first create a <span class=\"code\">security.json</span> file. This file and where to put it is\ndescribed in detail in the section <span class=\"link\">Enable Plugins with security.json</span>.",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "For Basic authentication, the <span class=\"code\">security.json</span> file must have an <span class=\"code\">authentication</span> part which defines the class\nbeing used for authentication. Usernames and passwords (as a sha256(password+salt) hash) could be\nadded when the file is created, or can be added later with the Basic authentication API, described below.",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "The <span class=\"code\">authorization</span> part is not related to Basic authentication, but is a separate authorization plugin\ndesigned to support fine-grained user access control. For more information, see the section <span class=\"link\">Rule-Based</span>\nAuthorization Plugin<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "An example <span class=\"code\">security.json</span> showing both sections is shown below to show how these plugins can work\ntogether:",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "{",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "Ê  <span class=\"fc3\">\"class\"</span>:<span class=\"fc5\">\"solr.BasicAuthPlugin\"</span>,\nÊ  <span class=\"fc3\">\"credentials\"</span>:{<span class=\"fc3\">\"solr\"</span>:<span class=\"fc5\">\"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0=</span>",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "},",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "Ê  <span class=\"fc3\">\"class\"</span>:<span class=\"fc5\">\"solr.RuleBasedAuthorizationPlugin\"</span>,\nÊ  <span class=\"fc3\">\"permissions\"</span>:[{<span class=\"fc3\">\"name\"</span>:<span class=\"fc5\">\"security-edit\"</span>,",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "}}",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "There are several things defined in this file:",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "Basic authentication and rule-based authorization plugins are enabled.\nThe parameter <span class=\"code\">\"blockUnknown\":true</span> means that unauthenticated requests are not allowed to pass\nthrough.\nA user called 'solr', with a password <span class=\"code\">'SolrRocks'</span> has been defined.\nThe 'admin' role has been defined, and it has permission to edit security settings.\nThe 'solr' user has been defined to the 'admin' role.",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "Save your settings to a file called <span class=\"code\">security.json</span> locally. If you are using Solr in standalone mode, you\nshould put this file in <span class=\"code\">$SOLR_HOME</span>.",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "If <span class=\"code\">blockUnknown</span> does not appear in the <span class=\"code\">security.json</span> file, it will default to <span class=\"code\">false</span>. This has the effect of not\nrequiring authentication at all. In some cases, you may want this; for example, if you want to have\nsecurity.json<span class=\"ff2 fs1\"> in place but aren't ready to enable authentication. However, you will want to ensure that this</span>\nparameter is set to <span class=\"code\">true</span> in order for authentication to be truly enabled in your system.",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "If you are using SolrCloud, you must upload <span class=\"code\">security.json</span> to ZooKeeper. You can use this example\ncommand, ensuring that the ZooKeeper port is correct:",
    "hierarchy": [
      "Enable Basic Authentication"
    ],
    "pageId": 1148
  },
  {
    "content": "bin/solr zk cp file:path_to_local_security.json zk:/security.json -z localhost:9983",
    "hierarchy": [
    ],
    "pageId": 1149
  },
  {
    "content": "There are a few things to keep in mind when using the Basic authentication plugin.",
    "hierarchy": [
      "Caveats"
    ],
    "pageId": 1149
  },
  {
    "content": "Credentials are sent in plain text by default. It's recommended to use SSL for communication when Basic\nauthentication is enabled, as described in the section <span class=\"link\">Enabling SSL</span>.",
    "hierarchy": [
      "Caveats"
    ],
    "pageId": 1149
  },
  {
    "content": "A user who has access to write permissions to <span class=\"ff1 fs1\">security.json</span> will be able to modify all the permissions\nand how users have been assigned permissions. Special care should be taken to only grant access to\nediting security to appropriate users.",
    "hierarchy": [
      "Caveats"
    ],
    "pageId": 1149
  },
  {
    "content": "Your network should, of course, be secure. Even with Basic authentication enabled, you should not\nunnecessarily expose Solr to the outside world.",
    "hierarchy": [
      "Caveats"
    ],
    "pageId": 1149
  },
  {
    "content": "An Authentication API allows modifying user IDs and passwords. The API provides an endpoint with specific\ncommands to set user details or delete a user.",
    "hierarchy": [
      "Editing Authentication Plugin Configuration"
    ],
    "pageId": 1149
  },
  {
    "content": "v1: <span class=\"ff1 fs1\">http://localhost:8983/solr/admin/authentication</span>",
    "hierarchy": [
      "Editing Authentication Plugin Configuration",
      "API Entry Point"
    ],
    "pageId": 1149
  },
  {
    "content": "v2: <span class=\"ff1 fs1\">http://localhost:8983/api/cluster/security/authentication</span>",
    "hierarchy": [
      "Editing Authentication Plugin Configuration",
      "API Entry Point"
    ],
    "pageId": 1149
  },
  {
    "content": "This endpoint is not collection-specific, so users are created for the entire Solr cluster. If users need to be\nrestricted to a specific collection, that can be done with the authorization rules.",
    "hierarchy": [
      "Editing Authentication Plugin Configuration",
      "API Entry Point"
    ],
    "pageId": 1149
  },
  {
    "content": "The <span class=\"ff1 fs1\">set-user</span> command allows you to add users and change their passwords. For example, the following\ndefines two users and their passwords:",
    "hierarchy": [
      "Editing Authentication Plugin Configuration",
      "Add a User or Edit a Password"
    ],
    "pageId": 1149
  },
  {
    "content": "curl --user solr:SolrRocks http://localhost:8983/solr/admin/authentication -H 'Content-\ntype:application/json' -d '{\"set-user\": {\"tom\":\"TomIsCool\", \"harry\":\"HarrysSecret\"}}'",
    "hierarchy": [
      "Editing Authentication Plugin Configuration",
      "Add a User or Edit a Password"
    ],
    "pageId": 1149
  },
  {
    "content": "curl --user solr:SolrRocks http://localhost:8983/api/cluster/security/authentication -H\n'Content-type:application/json' -d '{\"set-user\": {\"tom\":\"TomIsCool\",\n\"harry\":\"HarrysSecret\"}}'",
    "hierarchy": [
      "Editing Authentication Plugin Configuration",
      "Add a User or Edit a Password"
    ],
    "pageId": 1149
  },
  {
    "content": "The <span class=\"code\">delete-user</span> command allows you to remove a user. The user password does not need to be sent to\nremove a user. In the following example, we've asked that user IDs 'tom' and 'harry' be removed from the\nsystem.",
    "hierarchy": [
      "Delete a User"
    ],
    "pageId": 1150
  },
  {
    "content": "curl --user solr:SolrRocks http://localhost:8983/solr/admin/authentication -H 'Content-\ntype:application/json' -d  '{\"delete-user\": [\"tom\", \"harry\"]}'",
    "hierarchy": [
      "Delete a User"
    ],
    "pageId": 1150
  },
  {
    "content": "curl --user solr:SolrRocks http://localhost:8983/api/cluster/security/authentication -H\n'Content-type:application/json' -d  '{\"delete-user\": [\"tom\", \"harry\"]}'",
    "hierarchy": [
      "Delete a User"
    ],
    "pageId": 1150
  },
  {
    "content": "Set properties for the authentication plugin. The only currently supported property for the Basic\nAuthentication plugin is <span class=\"code\">blockUnknown</span>.",
    "hierarchy": [
      "Set a Property"
    ],
    "pageId": 1150
  },
  {
    "content": "curl --user solr:SolrRocks http://localhost:8983/solr/admin/authentication -H 'Content-\ntype:application/json' -d  '{\"set-property\": {\"blockUnknown\":false}}'",
    "hierarchy": [
      "Set a Property"
    ],
    "pageId": 1150
  },
  {
    "content": "curl --user solr:SolrRocks http://localhost:8983/api/cluster/security/authentication -H\n'Content-type:application/json' -d  '{\"set-property\": {\"blockUnknown\":false}}'",
    "hierarchy": [
      "Set a Property"
    ],
    "pageId": 1150
  },
  {
    "content": "In SolrJ, the basic authentication credentials need to be set for each request as in this example:",
    "hierarchy": [
      "Using Basic Auth with SolrJ"
    ],
    "pageId": 1150
  },
  {
    "content": "SolrRequest req ;<span class=\"fc2\">//create a new request object</span>\nreq.setBasicAuthCredentials(userName, password);\nsolrClient.request(req);",
    "hierarchy": [
      "Using Basic Auth with SolrJ"
    ],
    "pageId": 1150
  },
  {
    "content": "Query example:",
    "hierarchy": [
      "Using Basic Auth with SolrJ"
    ],
    "pageId": 1150
  },
  {
    "content": "QueryRequest req = <span class=\"fc1\">new</span> QueryRequest(<span class=\"fc1\">new</span> SolrQuery(<span class=\"fc2\">\"*:*\"</span>));\nreq.setBasicAuthCredentials(userName, password);\nQueryResponse rsp = req.process(solrClient);",
    "hierarchy": [
    ],
    "pageId": 1151
  },
  {
    "content": "Add the following line to the <span class=\"ff1 fs1\">solr.in.sh</span> or <span class=\"ff1 fs1\">solr.in.cmd</span> file. This example tells the <span class=\"ff1 fs1\">bin/solr</span> command line\nto to use \"basic\" as the type of authentication, and to pass credentials with the user-name \"solr\" and\npassword \"SolrRocks\":",
    "hierarchy": [
      "Using the Solr Control Script with Basic Auth"
    ],
    "pageId": 1151
  },
  {
    "content": "SOLR_AUTH_TYPE=\"basic\"\nSOLR_AUTHENTICATION_OPTS=\"-Dbasicauth=solr:SolrRocks\"",
    "hierarchy": [
      "Using the Solr Control Script with Basic Auth"
    ],
    "pageId": 1151
  },
  {
    "content": "The Hadoop authentication plugin enables Solr to use the <span class=\"link\">Hadoop authentication library</span> for securing Solr\nnodes.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "This authentication plugin is a thin wrapper that delegates all functionality to the Hadoop authentication\nlibrary. All configuration parameters for the library are passed through the plugin.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "This plugin can be particularly useful in leveraging an extended set of features or newly available features in\nthe Hadoop authentication library.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "Please note that the version of Hadoop library used by Solr is upgraded periodically. While Solr will ensure\nthe stability and backwards compatibility of the structure of the plugin configuration (viz., the parameter\nnames of this plugin), the values of these parameters may change based on the version of Hadoop library.\nPlease review the Hadoop documentation for the version used by your Solr installation for more details.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "For some of the authentication schemes (e.g., Kerberos), Solr provides a native implementation of\nauthentication plugin. If you require a more stable setup, in terms of configuration, ability to perform rolling\nupgrades, backward compatibility, etc., you should consider using such plugin. Please review the section\nAuthentication and Authorization Plugins<span class=\"fc0\"> for an overview of authentication plugin options in Solr.</span>",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "There are two plugin classes:",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "HadoopAuthPlugin: This can be used with standalone Solr as well as Solrcloud with <span class=\"link\">PKI authentication</span> for\ninternode communication.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "ConfigurableInternodeAuthHadoopPlugin: This is an extension of HadoopAuthPlugin that allows you to\nconfigure the authentication scheme for internode communication.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "For most SolrCloud or standalone Solr setups, the <span class=\"ff1 fs1\">HadoopAuthPlugin</span> should suffice.",
    "hierarchy": [
      "Hadoop Authentication Plugin"
    ],
    "pageId": 1151
  },
  {
    "content": "class\nShould be either <span class=\"ff1 fs1\">solr.HadoopAuthPlugin</span> or <span class=\"ff1 fs1\">solr.ConfigurableInternodeAuthHadoopPlugin</span>. This\nparameter is required.",
    "hierarchy": [
      "Hadoop Authentication Plugin",
      "Plugin Configuration"
    ],
    "pageId": 1151
  },
  {
    "content": "type\nThe type of authentication scheme to be configured. See <span class=\"link\">configuration</span> options. This parameter is\nrequired.",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "sysPropPrefix\nThe prefix to be used to define the Java system property for configuring the authentication mechanism.\nThis property is required.",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "The name of the Java system property is defined by appending the configuration parameter name to this\nprefix value. For example, if the prefix is <span class=\"ff1 fs0\">solr</span> then the Java system property <span class=\"ff1 fs0\">solr.kerberos.principal</span>\ndefines the value of configuration parameter <span class=\"ff1 fs0\">kerberos.principal</span>.",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "authConfigs\nConfiguration parameters required by the authentication scheme defined by the type property. This\nproperty is required. For more details, see <span class=\"link\">Hadoop configuration</span> options.",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "defaultConfigs\nDefault values for the configuration parameters specified by the <span class=\"ff1 fs0\">authConfigs</span> property. The default\nvalues are specified as a collection of key-value pairs (i.e., <span class=\"ff1 fs0\">\"property-name\": \"default_value\"</span>).",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "enableDelegationToken\nIf <span class=\"ff1 fs0\">true</span>, the delegation tokens functionality will be enabled.",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "initKerberosZk\nFor enabling initialization of kerberos before connecting to ZooKeeper (if applicable).",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "proxyUserConfigs\nConfigures proxy users for the underlying Hadoop authentication mechanism. This configuration is\nexpressed as a collection of key-value pairs (i.e., <span class=\"ff1 fs0\">\"property-name\": \"default_value\"</span>).",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "clientBuilderFactory\nNo | The <span class=\"ff1 fs0\">HttpClientBuilderFactory</span> implementation used for the Solr internal communication. Only\napplicable for <span class=\"ff1 fs0\">ConfigurableInternodeAuthHadoopPlugin</span>.",
    "hierarchy": [
    ],
    "pageId": 1152
  },
  {
    "content": "This example lets you configure Solr to use Kerberos Authentication, similar to how you would use the\nKerberos Authentication Plugin<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Example Configurations",
      "Kerberos Authentication using Hadoop Authentication Plugin"
    ],
    "pageId": 1152
  },
  {
    "content": "After consulting the Hadoop authentication library's documentation, you can supply per host configuration\nparameters using the <span class=\"ff1 fs0\">solr.*</span> prefix. As an example, the Hadoop authentication library expects a parameter\nkerberos.principal<span class=\"ff2 fs1\">, which can be supplied as a system property named </span>solr.kerberos.principal<span class=\"ff2 fs1\"> when</span>\nstarting a Solr node. Refer to the section <span class=\"link\">Kerberos Authentication Plugin</span> for other typical configuration\nparameters.",
    "hierarchy": [
      "Example Configurations",
      "Kerberos Authentication using Hadoop Authentication Plugin"
    ],
    "pageId": 1152
  },
  {
    "content": "Please note that this example uses <span class=\"ff1 fs0\">ConfigurableInternodeAuthHadoopPlugin</span>, and hence you must provide\nthe <span class=\"ff1 fs0\">clientBuilderFactory</span> implementation. As a result, all internode communication will use the Kerberos\nmechanism, instead of PKI authentication.",
    "hierarchy": [
      "Example Configurations",
      "Kerberos Authentication using Hadoop Authentication Plugin"
    ],
    "pageId": 1152
  },
  {
    "content": "To setup this plugin, use the following in your <span class=\"ff2 fs1\">security.json</span> file.",
    "hierarchy": [
    ],
    "pageId": 1153
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"authentication\"</span>: {\nÊ       <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.ConfigurableInternodeAuthHadoopPlugin\"</span>,\nÊ       <span class=\"fc1\">\"sysPropPrefix\"</span>: <span class=\"fc2\">\"solr.\"</span>,\nÊ       <span class=\"fc1\">\"type\"</span>: <span class=\"fc2\">\"kerberos\"</span>,\nÊ       <span class=\"fc1\">\"clientBuilderFactory\"</span>: <span class=\"fc2\">\"org.apache.solr.client.solrj.impl.Krb5HttpClientBuilder\"</span>,\nÊ       <span class=\"fc1\">\"initKerberosZk\"</span>: <span class=\"fc2\">\"true\"</span>,\nÊ       <span class=\"fc1\">\"authConfigs\"</span>: [\nÊ           <span class=\"fc2\">\"kerberos.principal\"</span>,\nÊ           <span class=\"fc2\">\"kerberos.keytab\"</span>,\nÊ           <span class=\"fc2\">\"kerberos.name.rules\"</span>\nÊ       ],\nÊ       <span class=\"fc1\">\"defaultConfigs\"</span>: {\nÊ       }\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 1153
  },
  {
    "content": "Similar to the previous example, this is an example of setting up a Solr cluster that uses delegation tokens.\nRefer to the parameters in the Hadoop authentication library's <span class=\"link\">documentation</span> or refer to the section\nKerberos Authentication Plugin<span class=\"fc0\"> for further details. Please note that this example does not use Kerberos and</span>\nthe requests made to Solr must contain valid delegation tokens.",
    "hierarchy": [
      "Simple Authentication with Delegation Tokens"
    ],
    "pageId": 1153
  },
  {
    "content": "To setup this plugin, use the following in your <span class=\"ff2 fs1\">security.json</span> file.",
    "hierarchy": [
      "Simple Authentication with Delegation Tokens"
    ],
    "pageId": 1153
  },
  {
    "content": "{\nÊ   <span class=\"fc1\">\"authentication\"</span>: {\nÊ       <span class=\"fc1\">\"class\"</span>: <span class=\"fc2\">\"solr.HadoopAuthPlugin\"</span>,\nÊ       <span class=\"fc1\">\"sysPropPrefix\"</span>: <span class=\"fc2\">\"solr.\"</span>,\nÊ       <span class=\"fc1\">\"type\"</span>: <span class=\"fc2\">\"simple\"</span>,\nÊ       <span class=\"fc1\">\"enableDelegationToken\"</span>:<span class=\"fc2\">\"true\"</span>,\nÊ       <span class=\"fc1\">\"authConfigs\"</span>: [\nÊ           <span class=\"fc2\">\"delegation-token.token-kind\"</span>,\nÊ           <span class=\"fc2\">\"delegation-token.update-interval.sec\"</span>,\nÊ           <span class=\"fc2\">\"delegation-token.max-lifetime.sec\"</span>,\nÊ           <span class=\"fc2\">\"delegation-token.renewal-interval.sec\"</span>,\nÊ           <span class=\"fc2\">\"delegation-token.removal-scan-interval.sec\"</span>,\nÊ           <span class=\"fc2\">\"cookie.domain\"</span>,\nÊ           <span class=\"fc2\">\"signer.secret.provider\"</span>,\nÊ           <span class=\"fc2\">\"zk-dt-secret-manager.enable\"</span>,\nÊ           <span class=\"fc2\">\"zk-dt-secret-manager.znodeWorkingPath\"</span>,\nÊ           <span class=\"fc2\">\"signer.secret.provider.zookeeper.path\"</span>\nÊ       ],\nÊ       <span class=\"fc1\">\"defaultConfigs\"</span>: {\nÊ           <span class=\"fc1\">\"delegation-token.token-kind\"</span>: <span class=\"fc2\">\"solr-dt\"</span>,\nÊ           <span class=\"fc1\">\"signer.secret.provider\"</span>: <span class=\"fc2\">\"zookeeper\"</span>,\nÊ           <span class=\"fc1\">\"zk-dt-secret-manager.enable\"</span>: <span class=\"fc2\">\"true\"</span>,\nÊ           <span class=\"fc1\">\"token.validity\"</span>: <span class=\"fc2\">\"36000\"</span>,\nÊ           <span class=\"fc1\">\"zk-dt-secret-manager.znodeWorkingPath\"</span>: <span class=\"fc2\">\"solr/security/zkdtsm\"</span>,\nÊ           <span class=\"fc1\">\"signer.secret.provider.zookeeper.path\"</span>: <span class=\"fc2\">\"/token\"</span>,\nÊ           <span class=\"fc1\">\"cookie.domain\"</span>: <span class=\"fc2\">\"127.0.0.1\"</span>\nÊ       }\nÊ   }\n}",
    "hierarchy": [
    ],
    "pageId": 1154
  },
  {
    "content": "If you are using Kerberos to secure your network environment, the Kerberos authentication plugin can be\nused to secure a Solr cluster.",
    "hierarchy": [
      "Kerberos Authentication Plugin"
    ],
    "pageId": 1154
  },
  {
    "content": "This allows Solr to use a Kerberos service principal and keytab file to authenticate with ZooKeeper and\nbetween nodes of the Solr cluster (if applicable). Users of the Admin UI and all clients (such as <span class=\"link\">SolrJ</span>) would\nalso need to have a valid ticket before being able to use the UI or send requests to Solr.",
    "hierarchy": [
      "Kerberos Authentication Plugin"
    ],
    "pageId": 1154
  },
  {
    "content": "Support for the Kerberos authentication plugin is available in SolrCloud mode or standalone mode.",
    "hierarchy": [
      "Kerberos Authentication Plugin"
    ],
    "pageId": 1154
  },
  {
    "content": "If you are using Solr with a Hadoop cluster secured with Kerberos and intend to store your\nSolr indexes in HDFS, also see the section <span class=\"link\">Running Solr on HDFS</span> for additional steps to\nconfigure Solr for that purpose. The instructions on this page apply only to scenarios where\nSolr will be secured with Kerberos. If you only need to store your indexes in a Kerberized\nHDFS system, please see the other section referenced above.",
    "hierarchy": [
      "Kerberos Authentication Plugin"
    ],
    "pageId": 1154
  },
  {
    "content": "When setting up Solr to use Kerberos, configurations are put in place for Solr to use a <span class=\"code\">service principal</span>, or a\nKerberos username, which is registered with the Key Distribution Center (KDC) to authenticate requests. The\nconfigurations define the service principal name and the location of the keytab file that contains the\ncredentials.",
    "hierarchy": [
      "How Solr Works With Kerberos"
    ],
    "pageId": 1155
  },
  {
    "content": "The Solr authentication model uses a file called <span class=\"ff4 fs2\">security.json</span>. A description of this file and how it is\ncreated and maintained is covered in the section <span class=\"link\">Authentication and Authorization Plugins</span>. If this file is\ncreated after an initial startup of Solr, a restart of each node of the system is required.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "security.json"
    ],
    "pageId": 1155
  },
  {
    "content": "Each Solr node must have a service principal registered with the Key Distribution Center (KDC). The Kerberos\nplugin uses SPNego to negotiate authentication.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "Using <span class=\"ff4 fs2\">HTTP/host1@YOUR-DOMAIN.ORG</span>, as an example of a service principal:",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "HTTP indicates the type of requests which this service principal will be used to authenticate. The <span class=\"ff4 fs2\">HTTP/</span> in\nthe service principal is a must for SPNego to work with requests to Solr over HTTP.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "host1 is the host name of the machine hosting the Solr node.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "YOUR-DOMAIN.ORG is the organization wide Kerberos realm.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "Multiple Solr nodes on the same host may have the same service principal, since the host name is common\nto them all.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "Along with the service principal, each Solr node needs a keytab file which should contain the credentials of\nthe service principal used. A keytab file contains encrypted credentials to support passwordless logins while\nobtaining Kerberos tickets from the KDC. For each Solr node, the keytab file should be kept in a secure\nlocation and not shared with users of the cluster.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "Since a Solr cluster requires internode communication, each node must also be able to make Kerberos\nenabled requests to other nodes. By default, Solr uses the same service principal and keytab as a 'client\nprincipal' for internode communication. You may configure a distinct client principal explicitly, but doing so\nis not recommended and is not covered in the examples below.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Service Principals and Keytab Files"
    ],
    "pageId": 1155
  },
  {
    "content": "When setting up a kerberized SolrCloud cluster, it is recommended to enable Kerberos security for\nZooKeeper as well.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Kerberized ZooKeeper"
    ],
    "pageId": 1155
  },
  {
    "content": "In such a setup, the client principal used to authenticate requests with ZooKeeper can be shared for\ninternode communication as well. This has the benefit of not needing to renew the ticket granting tickets\n(TGTs) separately, since the Zookeeper client used by Solr takes care of this. To achieve this, a single JAAS\nconfiguration (with the app name as Client) can be used for the Kerberos plugin as well as for the Zookeeper\nclient.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Kerberized ZooKeeper"
    ],
    "pageId": 1155
  },
  {
    "content": "See the <span class=\"link\">ZooKeeper Configuration</span> section below for an example of starting ZooKeeper in Kerberos mode.",
    "hierarchy": [
      "How Solr Works With Kerberos",
      "Kerberized ZooKeeper"
    ],
    "pageId": 1155
  },
  {
    "content": "In order for your browser to access the Solr Admin UI after enabling Kerberos authentication, it must be\nable to negotiate with the Kerberos authenticator service to allow you access. Each browser supports this\ndifferently, and some (like Chrome) do not support it at all. If you see 401 errors when trying to access the\nSolr Admin UI after enabling Kerberos authentication, it's likely your browser has not been configured\nproperly to know how or where to negotiate the authentication request.",
    "hierarchy": [
      "Browser Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Detailed information on how to set up your browser is beyond the scope of this documentation; please see\nyour system administrators for Kerberos for details on how to configure your browser.",
    "hierarchy": [
      "Browser Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Before attempting to configure Solr to use Kerberos authentication, please review each\nstep outlined below and consult with your local Kerberos administrators on each detail to\nbe sure you know the correct values for each parameter. Small errors can cause Solr to not\nstart or not function properly, and are notoriously difficult to diagnose.",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Configuration of the Kerberos plugin has several parts:",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Create service principals and keytab files",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "ZooKeeper configuration",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Create or update <span class=\"ff5 fs3\">/security.json</span>",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Define <span class=\"ff5 fs3\">jaas-client.conf</span>",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Solr startup parameters",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "We'll walk through each of these steps below.",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "To use host names instead of IP addresses, use the <span class=\"ff5 fs3\">SOLR_HOST</span> configuration in\nbin/solr.in.sh<span class=\"ff2 fs0\"> or pass a </span>-Dhost=<hostname><span class=\"ff2 fs0\"> system parameter during Solr startup. This</span>\nguide uses IP addresses. If you specify a hostname, replace all the IP addresses in the\nguide with the Solr hostname as appropriate.",
    "hierarchy": [
      "Kerberos Authentication Configuration"
    ],
    "pageId": 1156
  },
  {
    "content": "Before configuring Solr, make sure you have a Kerberos service principal for each Solr host and ZooKeeper\n(if ZooKeeper has not already been configured) available in the KDC server, and generate a keytab file as\nshown below.",
    "hierarchy": [
      "Kerberos Authentication Configuration",
      "Get Service Principals and Keytabs"
    ],
    "pageId": 1156
  },
  {
    "content": "This example assumes the hostname is <span class=\"ff5 fs3\">192.168.0.107</span> and your home directory is <span class=\"ff5 fs3\">/home/foo/</span>. This\nexample should be modified for your own environment.",
    "hierarchy": [
      "Kerberos Authentication Configuration",
      "Get Service Principals and Keytabs"
    ],
    "pageId": 1156
  },
  {
    "content": "root@kdc:/# kadmin.local\nAuthenticating as principal foo/admin@EXAMPLE.COM with password.",
    "hierarchy": [
    ],
    "pageId": 1157
  },
  {
    "content": "kadmin.local:  addprinc HTTP/192.168.0.107\nWARNING: no policy specified for HTTP/192.168.0.107@EXAMPLE.COM; defaulting to no policy\nEnter password for principal \"HTTP/192.168.0.107@EXAMPLE.COM\":\nRe-enter password for principal \"HTTP/192.168.0.107@EXAMPLE.COM\":\nPrincipal \"HTTP/192.168.0.107@EXAMPLE.COM\" created.",
    "hierarchy": [
    ],
    "pageId": 1157
  },
  {
    "content": "kadmin.local:  ktadd -k /tmp/107.keytab HTTP/192.168.0.107\nEntry for principal HTTP/192.168.0.107 with kvno 2, encryption type aes256-cts-hmac-sha1-96 added\nto keytab WRFILE:/tmp/107.keytab.\nEntry for principal HTTP/192.168.0.107 with kvno 2, encryption type arcfour-hmac added to keytab\nWRFILE:/tmp/107.keytab.\nEntry for principal HTTP/192.168.0.107 with kvno 2, encryption type des3-cbc-sha1 added to keytab\nWRFILE:/tmp/108.keytab.\nEntry for principal HTTP/192.168.0.107 with kvno 2, encryption type des-cbc-crc added to keytab\nWRFILE:/tmp/107.keytab.",
    "hierarchy": [
    ],
    "pageId": 1157
  },
  {
    "content": "kadmin.local:  quit",
    "hierarchy": [
    ],
    "pageId": 1157
  },
  {
    "content": "Copy the keytab file from the KDC server's <span class=\"ff1 fs1\">/tmp/107.keytab</span> location to the Solr host at\n/keytabs/107.keytab<span class=\"ff2 fs0\">. Repeat this step for each Solr node.</span>",
    "hierarchy": [
    ],
    "pageId": 1157
  },
  {
    "content": "You might need to take similar steps to create a ZooKeeper service principal and keytab if it has not already\nbeen set up. In that case, the example below shows a different service principal for ZooKeeper, so the above\nmight be repeated with <span class=\"ff1 fs1\">zookeeper/host1</span> as the service principal for one of the nodes",
    "hierarchy": [
    ],
    "pageId": 1157
  },
  {
    "content": "If you are using a ZooKeeper that has already been configured to use Kerberos, you can skip the ZooKeeper-\nrelated steps shown here.",
    "hierarchy": [
      "ZooKeeper Configuration"
    ],
    "pageId": 1157
  },
  {
    "content": "Since ZooKeeper manages the communication between nodes in a SolrCloud cluster, it must also be able to\nauthenticate with each node of the cluster. Configuration requires setting up a service principal for\nZooKeeper, defining a JAAS configuration file and instructing ZooKeeper to use both of those items.",
    "hierarchy": [
      "ZooKeeper Configuration"
    ],
    "pageId": 1157
  },
  {
    "content": "The first step is to create a file <span class=\"ff1 fs1\">java.env</span> in ZooKeeper's <span class=\"ff1 fs1\">conf</span> directory and add the following to it, as in this\nexample:",
    "hierarchy": [
      "ZooKeeper Configuration"
    ],
    "pageId": 1157
  },
  {
    "content": "export JVMFLAGS=\"-Djava.security.auth.login.config=/etc/zookeeper/conf/jaas-client.conf\"",
    "hierarchy": [
      "ZooKeeper Configuration"
    ],
    "pageId": 1157
  },
  {
    "content": "The JAAS configuration file should contain the following parameters. Be sure to change the <span class=\"ff1 fs1\">principal</span> and\nkeyTab<span class=\"ff2 fs0\"> path as appropriate. The file must be located in the path defined in the step above, with the filename</span>\nspecified.",
    "hierarchy": [
      "ZooKeeper Configuration"
    ],
    "pageId": 1157
  },
  {
    "content": "Server {\nÊcom.sun.security.auth.module.Krb5LoginModule required\nÊ useKeyTab=true\nÊ keyTab=\"/keytabs/zkhost1.keytab\"\nÊ storeKey=true\nÊ doNotPrompt=true\nÊ useTicketCache=false\nÊ debug=true\nÊ principal=\"zookeeper/host1@EXAMPLE.COM\";\n};",
    "hierarchy": [
    ],
    "pageId": 1158
  },
  {
    "content": "Finally, add the following lines to the ZooKeeper configuration file <span class=\"ff1 fs1\">zoo.cfg</span>:",
    "hierarchy": [
    ],
    "pageId": 1158
  },
  {
    "content": "authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider\njaasLoginRenew=3600000",
    "hierarchy": [
    ],
    "pageId": 1158
  },
  {
    "content": "Once all of the pieces are in place, start ZooKeeper with the following parameter pointing to the JAAS\nconfiguration file:",
    "hierarchy": [
    ],
    "pageId": 1158
  },
  {
    "content": "bin/zkServer.sh start -Djava.security.auth.login.config=/etc/zookeeper/conf/jaas-client.conf",
    "hierarchy": [
    ],
    "pageId": 1158
  },
  {
    "content": "Create the <span class=\"ff1 fs1\">security.json</span> file.",
    "hierarchy": [
      "Create security.json"
    ],
    "pageId": 1158
  },
  {
    "content": "In SolrCloud mode, you can set up Solr to use the Kerberos plugin by uploading the <span class=\"ff1 fs1\">security.json</span> to\nZooKeeper while you create it, as follows:",
    "hierarchy": [
      "Create security.json"
    ],
    "pageId": 1158
  },
  {
    "content": "server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:2181 -cmd put /security.json\n'{\"authentication\":{\"class\": \"org.apache.solr.security.KerberosPlugin\"}}'",
    "hierarchy": [
      "Create security.json"
    ],
    "pageId": 1158
  },
  {
    "content": "If you are using Solr in standalone mode, you need to create the <span class=\"ff1 fs1\">security.json</span> file and put it in your\n$SOLR_HOME<span class=\"ff2 fs0\"> directory.</span>",
    "hierarchy": [
      "Create security.json"
    ],
    "pageId": 1158
  },
  {
    "content": "More details on how to use a <span class=\"ff1 fs1\">/security.json</span> file in Solr are available in the section <span class=\"link\">Authentication and</span>\nAuthorization Plugins<span class=\"fc0\">.</span>",
    "hierarchy": [
      "Create security.json"
    ],
    "pageId": 1158
  },
  {
    "content": "If you already have a <span class=\"ff1 fs1\">/security.json</span> file in ZooKeeper, download the file, add or modify\nthe authentication section and upload it back to ZooKeeper using the <span class=\"link\">Command Line</span>\nUtilities<span class=\"fc0\"> available in Solr.</span>",
    "hierarchy": [
      "Create security.json"
    ],
    "pageId": 1158
  },
  {
    "content": "The JAAS configuration file defines the properties to use for authentication, such as the service principal and\nthe location of the keytab file. Other properties can also be set to ensure ticket caching and other features.",
    "hierarchy": [
      "Define a JAAS Configuration File"
    ],
    "pageId": 1158
  },
  {
    "content": "The following example can be copied and modified slightly for your environment. The location of the file can",
    "hierarchy": [
      "Define a JAAS Configuration File"
    ],
    "pageId": 1158
  },
  {
    "content": "be anywhere on the server, but it will be referenced when starting Solr so it must be readable on the\nfilesystem. The JAAS file may contain multiple sections for different users, but each section must have a\nunique name so it can be uniquely referenced in each application.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "In the below example, we have created a JAAS configuration file with the name and path of <span class=\"ff2 fs1\">/home/foo/jaas-</span>\nclient.conf<span class=\"ff1 fs0\">. We will use this name and path when we define the Solr start parameters in the next section.</span>\nNote that the client <span class=\"ff2 fs1\">principal</span> here is the same as the service principal. This will be used to authenticate\ninternode requests and requests to ZooKeeper. Make sure to use the correct <span class=\"ff2 fs1\">principal</span> hostname and the\nkeyTab<span class=\"ff1 fs0\"> file path.</span>",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "Client {\nÊ com.sun.security.auth.module.Krb5LoginModule required\nÊ useKeyTab=true\nÊ keyTab=\"/keytabs/107.keytab\"\nÊ storeKey=true\nÊ useTicketCache=true\nÊ debug=true\nÊ principal=\"HTTP/192.168.0.107@EXAMPLE.COM\";\n};",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "The first line of this file defines the section name, which will be used with the <span class=\"ff2 fs1\">solr.kerberos.jaas.appname</span>\nparameter, defined below.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "The main properties we are concerned with are the <span class=\"ff2 fs1\">keyTab</span> and <span class=\"ff2 fs1\">principal</span> properties, but there are others\nwhich may be required for your environment. The <span class=\"link\">javadocs for the Krb5LoginModule</span> (the class that's being\nused and is called in the second line above) provide a good outline of the available properties, but for\nreference the ones in use in the above example are explained here:",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "useKeyTab: this boolean property defines if we should use a keytab file (true, in this case).",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "keyTab: the location and name of the keytab file for the principal this section of the JAAS configuration\nfile is for. The path should be enclosed in double-quotes.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "storeKey: this boolean property allows the key to be stored in the private credentials of the user.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "useTicketCache: this boolean property allows the ticket to be obtained from the ticket cache.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "debug: this boolean property will output debug messages for help in troubleshooting.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "principal: the name of the service principal to be used.",
    "hierarchy": [
    ],
    "pageId": 1159
  },
  {
    "content": "While starting up Solr, the following host-specific parameters need to be passed. These parameters can be\npassed at the command line with the <span class=\"ff2 fs1\">bin/solr</span> start command (see <span class=\"link\">Solr Control Script Reference</span> for details\non how to pass system parameters) or defined in <span class=\"ff2 fs1\">bin/solr.in.sh</span> or <span class=\"ff2 fs1\">bin/solr.in.cmd</span> as appropriate for\nyour operating system.",
    "hierarchy": [
      "Solr Startup Parameters"
    ],
    "pageId": 1159
  },
  {
    "content": "solr.kerberos.name.rules\nUsed to map Kerberos principals to short names. Default value is <span class=\"ff2 fs1\">DEFAULT</span>. Example of a name rule:\nRULE:[1:$1@$0](.*EXAMPLE.COM)s/@.*//<span class=\"ff1 fs0\">.</span>",
    "hierarchy": [
      "Solr Startup Parameters"
    ],
    "pageId": 1159
  },
  {
    "content": "solr.kerberos.cookie.domain",
    "hierarchy": [
      "Solr Startup Parameters"
    ],
    "pageId": 1159
  },
  {
    "content": "Used to issue cookies and should have the hostname of the Solr node. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "solr.kerberos.cookie.portaware\nWhen set to <span class=\"ff2 fs1\">true</span>, cookies are differentiated based on host and port, as opposed to standard cookies\nwhich are not port aware. This should be set if more than one Solr node is hosted on the same host. The\ndefault is <span class=\"ff2 fs1\">false</span>.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "solr.kerberos.principal\nThe service principal. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "solr.kerberos.keytab\nKeytab file path containing service principal credentials. This parameter is required.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "solr.kerberos.jaas.appname\nThe app name (section name) within the JAAS configuration file which is required for internode\ncommunication. Default is <span class=\"ff2 fs1\">Client</span>, which is used for ZooKeeper authentication as well. If different users\nare used for ZooKeeper and Solr, they will need to have separate sections in the JAAS configuration file.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "java.security.auth.login.config\nPath to the JAAS configuration file for configuring a Solr client for internode communication. This\nparameter is required.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "Here is an example that could be added to <span class=\"ff2 fs1\">bin/solr.in.sh</span>. Make sure to change this example to use the\nright hostname and the keytab file path.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "SOLR_AUTH_TYPE=\"kerberos\"\nSOLR_AUTHENTICATION_OPTS=\"-Djava.security.auth.login.config=/home/foo/jaas-client.conf\n-Dsolr.kerberos.cookie.domain=192.168.0.107 -Dsolr.kerberos.cookie.portaware=true\n-Dsolr.kerberos.principal=HTTP/192.168.0.107@EXAMPLE.COM\n-Dsolr.kerberos.keytab=/keytabs/107.keytab\"",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "If your KDC uses AES-256 encryption, you need to add the Java Cryptography Extension\n(JCE) Unlimited Strength Jurisdiction Policy Files to your JRE before a Kerberized Solr can\ninteract with the KDC.",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "You will know this when you see an error like this in your Solr logs: \"KrbException:\nEncryption type AES256 CTS mode with HMAC SHA1-96 is not supported/enabled\".",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "For Java 1.8, this is available here: <span class=\"link\">http://www.oracle.com/technetwork/java/javase/</span>\ndownloads/jce8-download-2133166.html<span class=\"fc0\">.</span>",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "Replace the <span class=\"ff2 fs1\">local_policy.jar</span> present in <span class=\"ff2 fs1\">JAVA_HOME/jre/lib/security/</span> with the new\nlocal_policy.jar<span class=\"ff1 fs0\"> from the downloaded package and restart the Solr node.</span>",
    "hierarchy": [
    ],
    "pageId": 1160
  },
  {
    "content": "The Kerberos plugin can be configured to use delegation tokens, which allow an application to reuse the\nauthentication of an end-user or another application.",
    "hierarchy": [
      "Using Delegation Tokens"
    ],
    "pageId": 1160
  },
  {
    "content": "There are a few use cases for Solr where this might be helpful:",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "Using distributed clients (such as MapReduce) where each client may not have access to the user's\ncredentials.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "When load on the Kerberos server is high. Delegation tokens can reduce the load because they do not\naccess the server after the first request.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "If requests or permissions need to be delegated to another user.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "To enable delegation tokens, several parameters must be defined. These parameters can be passed at the\ncommand line with the <span class=\"ff2 fs1\">bin/solr</span> start command (see <span class=\"link\">Solr Control Script Reference</span> for details on how to\npass system parameters) or defined in <span class=\"ff2 fs1\">bin/solr.in.sh</span> or <span class=\"ff2 fs1\">bin/solr.in.cmd</span> as appropriate for your\noperating system.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "solr.kerberos.delegation.token.enabled\nThis is <span class=\"ff2 fs1\">false</span> by default, set to <span class=\"ff2 fs1\">true</span> to enable delegation tokens. This parameter is required if you want to\nenable tokens.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "solr.kerberos.delegation.token.kind\nThe type of delegation tokens. By default this is <span class=\"ff2 fs1\">solr-dt</span>. Likely this does not need to change. No other\noption is available at this time.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "solr.kerberos.delegation.token.validity\nTime, in seconds, for which delegation tokens are valid. The default is 36000 seconds.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "solr.kerberos.delegation.token.signer.secret.provider\nWhere delegation token information is stored internally. The default is <span class=\"ff2 fs1\">zookeeper</span> which must be the\nlocation for delegation tokens to work across Solr servers (when running in SolrCloud mode). No other\noption is available at this time.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "solr.kerberos.delegation.token.signer.secret.provider.zookeper.path\nThe ZooKeeper path where the secret provider information is stored. This is in the form of the path +\n/security/token. The path can include the chroot or the chroot can be omitted if you are not using it. This\nexample includes the chroot: <span class=\"ff2 fs1\">server1:9983,server2:9983,server3:9983/solr/security/token</span>.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "solr.kerberos.delegation.token.secret.manager.znode.working.path\nThe ZooKeeper path where token information is stored. This is in the form of the path + /security/zkdtsm.\nThe path can include the chroot or the chroot can be omitted if you are not using it. This example\nincludes the chroot: <span class=\"ff2 fs1\">server1:9983,server2:9983,server3:9983/solr/security/zkdtsm</span>.",
    "hierarchy": [
    ],
    "pageId": 1161
  },
  {
    "content": "Once the configuration is complete, you can start Solr with the <span class=\"ff2 fs1\">bin/solr</span> script, as in the example below,\nwhich is for users in SolrCloud mode only. This example assumes you modified <span class=\"ff2 fs1\">bin/solr.in.sh</span> or\nbin/solr.in.cmd<span class=\"ff1 fs0\">, with the proper values, but if you did not, you would pass the system parameters along</span>\nwith the start command. Note you also need to customize the <span class=\"ff2 fs1\">-z</span> property as appropriate for the location of\nyour ZooKeeper nodes.",
    "hierarchy": [
      "Start Solr"
    ],
    "pageId": 1161
  },
  {
    "content": "bin/solr -c -z server1:2181,server2:2181,server3:2181/solr",
    "hierarchy": [
      "Start Solr"
    ],
    "pageId": 1161
  },
  {
    "content": "1.Do a <span class=\"code\">kinit</span> with your username. For example, <span class=\"code\">kinit user@EXAMPLE.COM</span>.\n2.Try to access Solr using <span class=\"code\">curl</span>. You should get a successful response.",
    "hierarchy": [
      "Test the Configuration"
    ],
    "pageId": 1162
  },
  {
    "content": "curl --negotiate -u : \"http://192.168.0.107:8983/solr/\"",
    "hierarchy": [
      "Test the Configuration"
    ],
    "pageId": 1162
  },
  {
    "content": "To use Kerberos authentication in a SolrJ application, you need the following two lines before you create a\nSolrClient:",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr"
    ],
    "pageId": 1162
  },
  {
    "content": "HttpClientUtil.setConfigurer(<span class=\"fc4\">new</span> Krb5HttpClientConfigurer());",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr"
    ],
    "pageId": 1162
  },
  {
    "content": "You need to specify a Kerberos service principal for the client and a corresponding keytab in the JAAS client\nconfiguration file above. This principal should be different from the service principal we created for Solr.",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr"
    ],
    "pageId": 1162
  },
  {
    "content": "Here's an example:",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr"
    ],
    "pageId": 1162
  },
  {
    "content": "SolrJClient {\nÊ com.sun.security.auth.module.Krb5LoginModule required\nÊ useKeyTab=true\nÊ keyTab=\"/keytabs/foo.keytab\"\nÊ storeKey=true\nÊ useTicketCache=true\nÊ debug=true\nÊ principal=\"solrclient@EXAMPLE.COM\";\n};",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr"
    ],
    "pageId": 1162
  },
  {
    "content": "Delegation tokens are also supported with SolrJ, in the following ways:",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr",
      "Delegation Tokens with SolrJ"
    ],
    "pageId": 1162
  },
  {
    "content": "DelegationTokenRequest and <span class=\"code\">DelegationTokenResponse</span> can be used to get, cancel, and renew\ndelegation tokens.",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr",
      "Delegation Tokens with SolrJ"
    ],
    "pageId": 1162
  },
  {
    "content": "HttpSolrClient.Builder includes a <span class=\"code\">withDelegationToken</span> function for creating an HttpSolrClient that\nuses a delegation token to authenticate.",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr",
      "Delegation Tokens with SolrJ"
    ],
    "pageId": 1162
  },
  {
    "content": "Sample code to get a delegation token:",
    "hierarchy": [
      "Using SolrJ with a Kerberized Solr",
      "Delegation Tokens with SolrJ"
    ],
    "pageId": 1162
  },
  {
    "content": "solrClient) <span class=\"fc0\">throws</span> Exception {\nÊ   DelegationTokenRequest.Get get = <span class=\"fc0\">new</span> DelegationTokenRequest.Get(renewer) {\nÊ     <span class=\"fc3\">@Override</span>\nÊ     <span class=\"fc0\">public</span> SolrParams getParams() {\nÊ       ModifiableSolrParams params = <span class=\"fc0\">new</span> ModifiableSolrParams(super.getParams());\nÊ       params.set(<span class=\"fc4\">\"user\"</span>, user);\nÊ       <span class=\"fc0\">return</span> params;\nÊ     }\nÊ   };\nÊ   DelegationTokenResponse.Get getResponse = get.process(solrClient);\nÊ   <span class=\"fc0\">return</span> getResponse.getDelegationToken();\nÊ }",
    "hierarchy": [
    ],
    "pageId": 1163
  },
  {
    "content": "To create a <span class=\"ff1 fs1\">HttpSolrClient</span> that uses delegation tokens:",
    "hierarchy": [
    ],
    "pageId": 1163
  },
  {
    "content": "HttpSolrClient client = <span class=\"fc0\">new</span> HttpSolrClient.Builder(<span class=\"fc4\">\"http://localhost:8983/solr\"</span>)\n.withDelegationToken(token).build();",
    "hierarchy": [
    ],
    "pageId": 1163
  },
  {
    "content": "To create a <span class=\"ff1 fs1\">CloudSolrClient</span> that uses delegation tokens:",
    "hierarchy": [
    ],
    "pageId": 1163
  },
  {
    "content": "CloudSolrClient client = <span class=\"fc0\">new</span> CloudSolrClient.Builder()\nÊ               .withZkHost(<span class=\"fc4\">\"http://localhost:2181\"</span>)\nÊ               .withLBHttpSolrClientBuilder(<span class=\"fc0\">new</span> LBHttpSolrClient.Builder()\nÊ                   .withResponseParser(client.getParser())\nÊ                   .withHttpSolrClientBuilder(\nÊ                       <span class=\"fc0\">new</span> HttpSolrClient.Builder()\nÊ                           .withKerberosDelegationToken(token)\nÊ                   ))\nÊ                       .build();",
    "hierarchy": [
    ],
    "pageId": 1163
  },
  {
    "content": "Hadoop's delegation token responses are in JSON map format. A response parser for that\nis available in <span class=\"ff1 fs1\">DelegationTokenResponse</span>. Other response parsers may not work well with\nHadoop responses.",
    "hierarchy": [
    ],
    "pageId": 1163
  },
  {
    "content": "Solr allows configuring roles to control user access to the system.",
    "hierarchy": [
      "Rule-Based Authorization Plugin"
    ],
    "pageId": 1163
  },
  {
    "content": "This is accomplished through rule-based permission definitions which are assigned to users. The roles are\nfully customizable, and provide the ability to limit access to specific collections, request handlers, request\nparameters, and request methods.",
    "hierarchy": [
      "Rule-Based Authorization Plugin"
    ],
    "pageId": 1163
  },
  {
    "content": "The roles can be used with any of the authentication plugins or with a custom authentication plugin if you\nhave created one. You will only need to ensure that you configure the role-to-user mappings with the proper\nuser IDs that your authentication system provides.",
    "hierarchy": [
      "Rule-Based Authorization Plugin"
    ],
    "pageId": 1163
  },
  {
    "content": "Once defined through the API, roles are stored in <span class=\"ff1 fs1\">security.json</span>.",
    "hierarchy": [
      "Rule-Based Authorization Plugin"
    ],
    "pageId": 1163
  },
  {
    "content": "The plugin must be enabled in <span class=\"code\">security.json</span>. This file and where to put it in your system is described in\ndetail in the section <span class=\"link\">Enable Plugins with security.json</span>.",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "This file has two parts, the <span class=\"code\">authentication</span> part and the <span class=\"code\">authorization</span> part. The <span class=\"code\">authentication</span> part\nstores information about the class being used for authentication.",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "The <span class=\"code\">authorization</span> part is not related to Basic authentication, but is a separate authorization plugin\ndesigned to support fine-grained user access control. When creating <span class=\"code\">security.json</span> you can add the\npermissions to the file, or you can use the Authorization API described below to add them as needed.",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "This example <span class=\"code\">security.json</span> shows how the <span class=\"link\">Basic authentication plugin</span> can work with this authorization\nplugin:",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "{",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "Ê  <span class=\"fc3\">\"credentials\"</span>:{<span class=\"fc3\">\"solr\"</span>:<span class=\"fc4\">\"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0=</span>",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "},",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "Ê  <span class=\"fc3\">\"permissions\"</span>:[{<span class=\"fc3\">\"name\"</span>:<span class=\"fc4\">\"security-edit\"</span>,",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "}}",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "There are several things defined in this example:",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "Basic authentication plugin is enabled.\nAll requests w/o credentials will be rejected with a 401 error. Set <span class=\"code\">'blockUnknown'</span> to false (or remove it\naltogether) if you wish to let unauthenticated requests to go through. However, if a particular resource\nis protected by a rule, they are rejected anyway with a 401 error.\nA user named 'solr', with a password has been defined.\nRule-based authorization plugin is enabled.\nThe 'admin' role has been defined, and it has permission to edit security settings.\nThe 'solr' user has been defined to the 'admin' role.",
    "hierarchy": [
      "Enable the Authorization Plugin"
    ],
    "pageId": 1164
  },
  {
    "content": "Each role is comprised of one or more permissions which define what the user is allowed to do. Each\npermission is made up of several attributes that define the allowed activity. There are some pre-defined\npermissions which cannot be modified.",
    "hierarchy": [
      "Permission Attributes"
    ],
    "pageId": 1164
  },
  {
    "content": "The permissions are consulted in order they appear in <span class=\"code\">security.json</span>. The first permission that matches is\napplied for each user, so the strictest permissions should be at the top of the list. Permissions order can be",
    "hierarchy": [
      "Permission Attributes"
    ],
    "pageId": 1164
  },
  {
    "content": "controlled with a parameter of the Authorization API, as described below.",
    "hierarchy": [
    ],
    "pageId": 1165
  },
  {
    "content": "There are several permissions that are pre-defined. These have fixed default values, which cannot be\nmodified, and new attributes cannot be added. To use these attributes, simply define a role that includes\nthis permission, and then assign a user to that role.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "The pre-defined permissions are:",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "security-edit:<span class=\"ff1\"> this permission is allowed to edit the security configuration, meaning any update action</span>\nthat modifies <span class=\"code\">security.json</span> through the APIs will be allowed.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "security-read<span class=\"ff1\">: this permission is allowed to read the security configuration, meaning any action that</span>\nreads <span class=\"code\">security.json</span> settings through the APIs will be allowed.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "schema-edit<span class=\"ff1\">: this permission is allowed to edit a collection's schema using the <span class=\"link\">Schema API</span>. Note that</span>\nthis allows schema edit permissions for <span class=\"ff4\">all</span> collections. If edit permissions should only be applied to\nspecific collections, a custom permission would need to be created.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "schema-read<span class=\"ff1\">: this permission is allowed to read a collection's schema using the <span class=\"link\">Schema API</span>. Note that</span>\nthis allows schema read permissions for <span class=\"ff4\">all</span> collections. If read permissions should only be applied to\nspecific collections, a custom permission would need to be created.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "config-edit<span class=\"ff1\">: this permission is allowed to edit a collection's configuration using the <span class=\"link\">Config API</span>, the</span>\nRequest Parameters API<span class=\"fc0\">, and other APIs which modify <span class=\"code\">configoverlay.json</span>. Note that this allows</span>\nconfiguration edit permissions for <span class=\"ff4\">all</span> collections. If edit permissions should only be applied to specific\ncollections, a custom permission would need to be created.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "core-admin-read<span class=\"ff1\">: Read operations on the core admin API</span>",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "core-admin-edit<span class=\"ff1\">: Core admin commands that can mutate the system state.</span>",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "config-read<span class=\"ff1\">: this permission is allowed to read a collection's configuration using the <span class=\"link\">Config API</span>, the</span>\nRequest Parameters API<span class=\"fc0\">, and other APIs which modify <span class=\"code\">configoverlay.json</span>. Note that this allows</span>\nconfiguration read permissions for <span class=\"ff4\">all</span> collections. If read permissions should only be applied to specific\ncollections, a custom permission would need to be created.",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "collection-admin-edit<span class=\"ff1\">: this permission is allowed to edit a collection's configuration using the</span>\nCollections API<span class=\"fc0\">. Note that this allows configuration edit permissions for <span class=\"ff4\">all</span> collections. If edit permissions</span>\nshould only be applied to specific collections, a custom permission would need to be created. Specifically,\nthe following actions of the Collections API would be allowed:",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "◦CREATE\n◦RELOAD\n◦SPLITSHARD\n◦CREATESHARD\n◦DELETESHARD\n◦CREATEALIAS\n◦DELETEALIAS\n◦DELETE\n◦DELETEREPLICA",
    "hierarchy": [
      "Predefined Permissions"
    ],
    "pageId": 1165
  },
  {
    "content": "◦<span class=\"ff2 ls1\">ADDREPLICA</span>\n◦<span class=\"ff2 ls1\">CLUSTERPROP</span>\n◦<span class=\"ff2 ls1\">MIGRATE</span>\n◦<span class=\"ff2 ls1\">ADDROLE</span>\n◦<span class=\"ff2 ls1\">REMOVEROLE</span>\n◦<span class=\"ff2 ls1\">ADDREPLICAPROP</span>\n◦<span class=\"ff2 ls1\">DELETEREPLICAPROP</span>\n◦<span class=\"ff2 ls1\">BALANCESHARDUNIQUE</span>\n◦<span class=\"ff2 ls1\">REBALANCELEADERS</span>\n<span class=\"code\">collection-admin-read<span class=\"ff2\">: this permission is allowed to read a collection's configuration using the</span></span>\nCollections API<span class=\"fc0\">. Note that this allows configuration read permissions for <span class=\"ff4\">all</span> collections. If read</span>\npermissions should only be applied to specific collections, a custom permission would need to be\ncreated. Specifically, the following actions of the Collections API would be allowed:",
    "hierarchy": [
    ],
    "pageId": 1166
  },
  {
    "content": "◦<span class=\"ff2 ls1\">LIST</span>\n◦<span class=\"ff2 ls1\">OVERSEERSTATUS</span>\n◦<span class=\"ff2 ls1\">CLUSTERSTATUS</span>\n◦<span class=\"ff2 ls1\">REQUESTSTATUS</span>\n<span class=\"code\">update<span class=\"ff2\">: this permission is allowed to perform any update action on any collection. This includes sending</span></span>\ndocuments for indexing (using an <span class=\"link\">update request handler</span>). This applies to all collections by default\n(<span class=\"ff5 fs1\">collection:\"*\"</span>).",
    "hierarchy": [
    ],
    "pageId": 1166
  },
  {
    "content": "<span class=\"code\">read<span class=\"ff2\">: this permission is allowed to perform any read action on any collection. This includes querying</span></span>\nusing search handlers (using <span class=\"link\">request handlers</span>) such as <span class=\"ff5 fs1\">/select</span>, <span class=\"ff5 fs1\">/get</span>, <span class=\"ff5 fs1\">/browse</span>, <span class=\"ff5 fs1\">/tvrh</span>, <span class=\"ff5 fs1\">/terms</span>,\n/clustering<span class=\"ff2 fs0\">, </span>/elevate<span class=\"ff2 fs0\">, </span>/export<span class=\"ff2 fs0\">, </span>/spell<span class=\"ff2 fs0\">, </span>/clustering<span class=\"ff2 fs0\">, and </span>/sql<span class=\"ff2 fs0\">. This applies to all collections by default</span>\n( <span class=\"ff5 fs1\">collection:\"*\"</span> ).",
    "hierarchy": [
    ],
    "pageId": 1166
  },
  {
    "content": "<span class=\"code\">all<span class=\"ff2\">: Any requests coming to Solr.</span></span>",
    "hierarchy": [
    ],
    "pageId": 1166
  },
  {
    "content": "/admin/authorization<span class=\"ff2 fs0\">: takes a set of commands to create permissions, map permissions to roles, and map</span>\nroles to users.",
    "hierarchy": [
      "Authorization API",
      "Authorization API Endpoint"
    ],
    "pageId": 1166
  },
  {
    "content": "Three commands control managing permissions:",
    "hierarchy": [
      "Authorization API",
      "Manage Permissions"
    ],
    "pageId": 1166
  },
  {
    "content": "<span class=\"ff5 fs1 ls1\">set-permission</span><span class=\"ls1\">: create a new permission, overwrite an existing permission definition, or assign a pre-</span>\ndefined permission to a role.",
    "hierarchy": [
      "Authorization API",
      "Manage Permissions"
    ],
    "pageId": 1166
  },
  {
    "content": "<span class=\"ff5 fs1 ls1\">update-permission</span><span class=\"ls1\">: update some attributes of an existing permission definition.</span>",
    "hierarchy": [
      "Authorization API",
      "Manage Permissions"
    ],
    "pageId": 1166
  },
  {
    "content": "<span class=\"ff5 fs1 ls1\">delete-permission</span><span class=\"ls1\">: remove a permission definition.</span>",
    "hierarchy": [
      "Authorization API",
      "Manage Permissions"
    ],
    "pageId": 1166
  },
  {
    "content": "Permissions need to be created if they are not on the list of pre-defined permissions above.",
    "hierarchy": [
      "Authorization API",
      "Manage Permissions"
    ],
    "pageId": 1166
  },
  {
    "content": "Several properties can be used to define your custom permission.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "name\nThe name of the permission. This is required only if it is a predefined permission.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "collection\nThe collection or collections the permission will apply to.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "When the path that will be allowed is collection-specific, such as when setting permissions to allow use of\nthe Schema API, omitting the collection property will allow the defined path and/or method for all\ncollections. However, when the path is one that is non-collection-specific, such as the Collections API, the\ncollection value must be <span class=\"ff2 fs1\">null</span>. The default value is <span class=\"ff2 fs1\">*</span>, or all collections.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "path\nA request handler name, such as <span class=\"ff2 fs1\">/update</span> or <span class=\"ff2 fs1\">/select</span>. A wild card is supported, to allow for all paths as\nappropriate (such as, <span class=\"ff2 fs1\">/update/*</span>).",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "method\nHTTP methods that are allowed for this permission. You could allow only GET requests, or have a role that\nallows PUT and POST requests. The method values that are allowed for this property are GET, POST,\nPUT,DELETE and HEAD.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "params\nThe names and values of request parameters. This property can be omitted if all request parameters are\nto be matched, but will restrict access only to the values provided if defined.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "For example, this property could be used to limit the actions a role is allowed to perform with the\nCollections API. If the role should only be allowed to perform the LIST or CLUSTERSTATUS requests, you\nwould define this as follows:",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "{<span class=\"fc1\">\"params\"</span>: {\nÊ  <span class=\"fc1\">\"action\"</span>: [<span class=\"fc2\">\"LIST\"</span>, <span class=\"fc2\">\"CLUSTERSTATUS\"</span>]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "The value of the parameter can be a simple string or it could be a regular expression. Use the prefix\nREGEX:<span class=\"ff1 fs0\"> to use a regular expression match instead of a string identity match</span>",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "If the commands LIST and CLUSTERSTATUS are case insensitive, the above example should be as follows",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "{<span class=\"fc1\">\"params\"</span>: {\nÊ  <span class=\"fc1\">\"action\"</span>: [<span class=\"fc2\">\"REGEX:(?i)LIST\"</span>, <span class=\"fc2\">\"REGEX:(?i)CLUSTERSTATUS\"</span>]\nÊ }\n}",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "before\nThis property allows ordering of permissions. The value of this property is the index of the permission\nthat this new permission should be placed before in <span class=\"ff2 fs1\">security.json</span>. The index is automatically assigned\nin the order they are created.",
    "hierarchy": [
    ],
    "pageId": 1167
  },
  {
    "content": "role\nThe name of the role(s) to give this permission. This name will be used to map user IDs to the role to\ngrant these permissions. The value can be wildcard such as (<span class=\"ff1 fs0\">*</span>), which means that any user is OK, but no\nuser is NOT OK.",
    "hierarchy": [
    ],
    "pageId": 1168
  },
  {
    "content": "The following creates a new permission named \"collection-mgr\" that is allowed to create and list collections.\nThe permission will be placed before the \"read\" permission. Note also that we have defined \"collection as\nnull<span class=\"ff2 fs1\">, this is because requests to the Collections API are never collection-specific.</span>",
    "hierarchy": [
    ],
    "pageId": 1168
  },
  {
    "content": "curl --user solr:SolrRocks -H 'Content-type:application/json' -d '{\nÊ \"set-permission\": {\"collection\": null,\nÊ                    \"path\":\"/admin/collections\",\nÊ                    \"params\":{\"action\":[\"LIST\", \"CREATE\"]},\nÊ                    \"before\": 3,\nÊ                    \"role\": \"admin\"}\n}' http://localhost:8983/solr/admin/authorization",
    "hierarchy": [
    ],
    "pageId": 1168
  },
  {
    "content": "Apply an update permission on all collections to a role called <span class=\"ff1 fs0\">dev</span> and read permissions to a role called\nguest<span class=\"ff2 fs1\">:</span>",
    "hierarchy": [
    ],
    "pageId": 1168
  },
  {
    "content": "curl --user solr:SolrRocks -H 'Content-type:application/json' -d '{\nÊ \"set-permission\": {\"name\": \"update\", \"role\":\"dev\"},\nÊ \"set-permission\": {\"name\": \"read\", \"role\":\"guest\"}\n}' http://localhost:8983/solr/admin/authorization",
    "hierarchy": [
    ],
    "pageId": 1168
  },
  {
    "content": "Permissions can be accessed using their index in the list. Use the <span class=\"ff1 fs0\">/admin/authorization</span> API to see the\nexisting permissions and their indices.",
    "hierarchy": [
      "Update or Delete Permissions"
    ],
    "pageId": 1168
  },
  {
    "content": "The following example updates the <span class=\"ff1 fs0\">'role'</span> attribute of permission at index <span class=\"ff1 fs0\">3</span>:",
    "hierarchy": [
      "Update or Delete Permissions"
    ],
    "pageId": 1168
  },
  {
    "content": "curl --user solr:SolrRocks -H 'Content-type:application/json' -d '{\nÊ \"update-permission\": {\"index\": 3,\nÊ                      \"role\": [\"admin\", \"dev\"]}\n}' http://localhost:8983/solr/admin/authorization",
    "hierarchy": [
      "Update or Delete Permissions"
    ],
    "pageId": 1168
  },
  {
    "content": "The following example deletes permission at index <span class=\"ff1 fs0\">3</span>:",
    "hierarchy": [
      "Update or Delete Permissions"
    ],
    "pageId": 1168
  },
  {
    "content": "curl --user solr:SolrRocks -H 'Content-type:application/json' -d '{\nÊ \"delete-permission\": 3\n}' http://localhost:8983/solr/admin/authorization",
    "hierarchy": [
      "Update or Delete Permissions"
    ],
    "pageId": 1168
  },
  {
    "content": "A single command allows roles to be mapped to users:",
    "hierarchy": [
      "Map Roles to Users"
    ],
    "pageId": 1168
  },
  {
    "content": "set-user-role: map a user to a permission.",
    "hierarchy": [
      "Map Roles to Users"
    ],
    "pageId": 1168
  },
  {
    "content": "To remove a user's permission, you should set the role to <span class=\"ff2 fs1\">null</span>. There is no command to delete a user role.",
    "hierarchy": [
    ],
    "pageId": 1169
  },
  {
    "content": "The values supplied to the command are simply a user ID and one or more roles the user should have.",
    "hierarchy": [
    ],
    "pageId": 1169
  },
  {
    "content": "For example, the following would grant a user \"solr\" the \"admin\" and \"dev\" roles, and remove all roles from\nthe user ID \"harry\":",
    "hierarchy": [
    ],
    "pageId": 1169
  },
  {
    "content": "curl -u solr:SolrRocks -H 'Content-type:application/json' -d '{\nÊ  \"set-user-role\" : {\"solr\": [\"admin\",\"dev\"],\nÊ                     \"harry\": null}\n}' http://localhost:8983/solr/admin/authorization",
    "hierarchy": [
    ],
    "pageId": 1169
  },
  {
    "content": "Solr can encrypt communications to and from clients, and between nodes in SolrCloud mode, with SSL.",
    "hierarchy": [
      "Enabling SSL"
    ],
    "pageId": 1170
  },
  {
    "content": "This section describes enabling SSL using a self-signed certificate.",
    "hierarchy": [
      "Enabling SSL"
    ],
    "pageId": 1170
  },
  {
    "content": "For background on SSL certificates and keys, see <span class=\"link\">http://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/</span>.",
    "hierarchy": [
      "Enabling SSL"
    ],
    "pageId": 1170
  },
  {
    "content": "To generate a self-signed certificate and a single key that will be used to authenticate both the server and\nthe client, we'll use the JDK <span class=\"code\">keytool</span> command and create a separate keystore. This keystore will also be\nused as a truststore below. It’s possible to use the keystore that comes with the JDK for these purposes, and\nto use a separate truststore, but those options aren’t covered here.",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Generate a Self-Signed Certificate and a Key"
    ],
    "pageId": 1170
  },
  {
    "content": "Run the commands below in the <span class=\"code\">server/etc/</span> directory in the binary Solr distribution. It's assumed that you\nhave the JDK <span class=\"code\">keytool</span> utility on your <span class=\"code\">PATH</span>, and that <span class=\"code\">openssl</span> is also on your <span class=\"code\">PATH</span>. See\nhttps://www.openssl.org/related/binaries.html<span class=\"fc1\"> for OpenSSL binaries for Windows and Solaris.</span>",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Generate a Self-Signed Certificate and a Key"
    ],
    "pageId": 1170
  },
  {
    "content": "The <span class=\"code\">-ext SAN=…</span> <span class=\"code\">keytool</span> option allows you to specify all the DNS names and/or IP addresses that will be\nallowed during hostname verification (but see below for how to skip hostname verification between Solr\nnodes so that you don't have to specify all hosts here).",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Generate a Self-Signed Certificate and a Key"
    ],
    "pageId": 1170
  },
  {
    "content": "In addition to <span class=\"code\">localhost</span> and <span class=\"code\">127.0.0.1</span>, this example includes a LAN IP address <span class=\"code\">192.168.1.3</span> for the\nmachine the Solr nodes will be running on:",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Generate a Self-Signed Certificate and a Key"
    ],
    "pageId": 1170
  },
  {
    "content": "keytool -genkeypair -alias solr-ssl -keyalg RSA -keysize 2048 -keypass secret -storepass secret\n-validity 9999 -keystore solr-ssl.keystore.jks -ext SAN=DNS:localhost,IP:192.168.1.3,IP:127.0.0.1\n-dname \"CN=localhost, OU=Organizational Unit, O=Organization, L=Location, ST=State, C=Country\"",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Generate a Self-Signed Certificate and a Key"
    ],
    "pageId": 1170
  },
  {
    "content": "The above command will create a keystore file named <span class=\"code\">solr-ssl.keystore.jks</span> in the current directory.",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Generate a Self-Signed Certificate and a Key"
    ],
    "pageId": 1170
  },
  {
    "content": "curl isn't capable of using JKS formatted keystores, so the JKS keystore needs to be converted to PEM format,\nwhich curl understands.",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Convert the Certificate and Key to PEM Format for Use with curl"
    ],
    "pageId": 1170
  },
  {
    "content": "First convert the JKS keystore into PKCS12 format using <span class=\"code\">keytool</span>:",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Convert the Certificate and Key to PEM Format for Use with curl"
    ],
    "pageId": 1170
  },
  {
    "content": "keytool -importkeystore -srckeystore solr-ssl.keystore.jks -destkeystore solr-ssl.keystore.p12\n-srcstoretype jks -deststoretype pkcs12",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Convert the Certificate and Key to PEM Format for Use with curl"
    ],
    "pageId": 1170
  },
  {
    "content": "The keytool application will prompt you to create a destination keystore password and for the source\nkeystore password, which was set when creating the keystore (\"secret\" in the example shown above).",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Convert the Certificate and Key to PEM Format for Use with curl"
    ],
    "pageId": 1170
  },
  {
    "content": "Next convert the PKCS12 format keystore, including both the certificate and the key, into PEM format using",
    "hierarchy": [
      "Enabling SSL",
      "Basic SSL Setup",
      "Convert the Certificate and Key to PEM Format for Use with curl"
    ],
    "pageId": 1170
  },
  {
    "content": "the <span class=\"ff2 fs1\">openssl</span> command:",
    "hierarchy": [
    ],
    "pageId": 1171
  },
  {
    "content": "openssl pkcs12 -in solr-ssl.keystore.p12 -out solr-ssl.pem",
    "hierarchy": [
    ],
    "pageId": 1171
  },
  {
    "content": "If you want to use curl on OS X Yosemite (10.10), you'll need to create a certificate-only version of the PEM\nformat, as follows:",
    "hierarchy": [
    ],
    "pageId": 1171
  },
  {
    "content": "openssl pkcs12 -nokeys -in solr-ssl.keystore.p12 -out solr-ssl.cacert.pem",
    "hierarchy": [
    ],
    "pageId": 1171
  },
  {
    "content": "The Solr Control Script is already setup to pass SSL-related Java system properties to the JVM. To activate the\nSSL settings, uncomment and update the set of properties beginning with SOLR_SSL_* in <span class=\"ff2 fs1\">bin/solr.in.sh</span>.\n(or <span class=\"ff2 fs1\">bin\\solr.in.cmd</span> on Windows).",
    "hierarchy": [
      "Set Common SSL-Related System Properties"
    ],
    "pageId": 1171
  },
  {
    "content": "If you setup Solr as a service on Linux using the steps outlined in <span class=\"link\">Taking Solr to Production</span>,\nthen make these changes in <span class=\"ff2 fs1\">/var/solr/solr.in.sh</span> instead.",
    "hierarchy": [
      "Set Common SSL-Related System Properties"
    ],
    "pageId": 1171
  },
  {
    "content": "SOLR_SSL_KEY_STORE=etc/solr-ssl.keystore.jks\nSOLR_SSL_KEY_STORE_PASSWORD=secret\nSOLR_SSL_TRUST_STORE=etc/solr-ssl.keystore.jks\nSOLR_SSL_TRUST_STORE_PASSWORD=secret\n# Require clients to authenticate\nSOLR_SSL_NEED_CLIENT_AUTH=false\n# Enable clients to authenticate (but not require)\nSOLR_SSL_WANT_CLIENT_AUTH=false\n# Define Key Store type if necessary\nSOLR_SSL_KEY_STORE_TYPE=JKS\nSOLR_SSL_TRUST_STORE_TYPE=JKS",
    "hierarchy": [
      "Set Common SSL-Related System Properties"
    ],
    "pageId": 1171
  },
  {
    "content": "When you start Solr, the <span class=\"ff2 fs1\">bin/solr</span> script includes the settings in <span class=\"ff2 fs1\">bin/solr.in.sh</span> and will pass these SSL-\nrelated system properties to the JVM.",
    "hierarchy": [
      "Set Common SSL-Related System Properties"
    ],
    "pageId": 1171
  },
  {
    "content": "Enable either SOLR_SSL_NEED_CLIENT_AUTH or SOLR_SSL_WANT_CLIENT_AUTH but not\nboth at the same time. They are mutually exclusive and Jetty will select one of them which\nmay not be what you expect.",
    "hierarchy": [
      "Set Common SSL-Related System Properties"
    ],
    "pageId": 1171
  },
  {
    "content": "Similarly, when you start Solr on Windows, the <span class=\"ff2 fs1\">bin\\solr.cmd</span> script includes the settings in <span class=\"ff2 fs1\">bin\\solr.in.cmd</span>\n- uncomment and update the set of properties beginning with <span class=\"ff2 fs1\">SOLR_SSL_*</span> to pass these SSL-related system\nproperties to the JVM:",
    "hierarchy": [
      "Set Common SSL-Related System Properties"
    ],
    "pageId": 1171
  },
  {
    "content": "set SOLR_SSL_KEY_STORE=etc/solr-ssl.keystore.jks\nset SOLR_SSL_KEY_STORE_PASSWORD=secret\nset SOLR_SSL_TRUST_STORE=etc/solr-ssl.keystore.jks\nset SOLR_SSL_TRUST_STORE_PASSWORD=secret\nREM Require clients to authenticate\nset SOLR_SSL_NEED_CLIENT_AUTH=false\nREM Enable clients to authenticate (but not require)\nset SOLR_SSL_WANT_CLIENT_AUTH=false",
    "hierarchy": [
    ],
    "pageId": 1172
  },
  {
    "content": "Start Solr using the command shown below; by default clients will not be required to authenticate:",
    "hierarchy": [
      "Run Single Node Solr using SSL"
    ],
    "pageId": 1172
  },
  {
    "content": "bin/solr -p 8984",
    "hierarchy": [
      "Run Single Node Solr using SSL"
    ],
    "pageId": 1172
  },
  {
    "content": "bin\\solr.cmd -p 8984",
    "hierarchy": [
      "Run Single Node Solr using SSL"
    ],
    "pageId": 1172
  },
  {
    "content": "This section describes how to run a two-node SolrCloud cluster with no initial collections and a single-node\nexternal ZooKeeper. The commands below assume you have already created the keystore described above.",
    "hierarchy": [
      "SSL with SolrCloud"
    ],
    "pageId": 1172
  },
  {
    "content": "ZooKeeper does not support encrypted communication with clients like Solr. There are\nseveral related JIRA tickets where SSL support is being planned/worked on: <span class=\"link\">ZOOKEEPER-</span>\n235<span class=\"fc1\">; </span>ZOOKEEPER-236<span class=\"fc1\">; </span>ZOOKEEPER-1000<span class=\"fc1\">; and </span>ZOOKEEPER-2120<span class=\"fc1\">.</span>",
    "hierarchy": [
      "SSL with SolrCloud",
      "Configure ZooKeeper"
    ],
    "pageId": 1172
  },
  {
    "content": "Before you start any SolrCloud nodes, you must configure your Solr cluster properties in ZooKeeper, so that\nSolr nodes know to communicate via SSL.",
    "hierarchy": [
      "SSL with SolrCloud",
      "Configure ZooKeeper"
    ],
    "pageId": 1172
  },
  {
    "content": "This section assumes you have created and started a single-node external ZooKeeper on port 2181 on\nlocalhost - see <span class=\"link\">Setting Up an External ZooKeeper Ensemble</span>.",
    "hierarchy": [
      "SSL with SolrCloud",
      "Configure ZooKeeper"
    ],
    "pageId": 1172
  },
  {
    "content": "The <span class=\"ff2 fs4\">urlScheme</span> cluster-wide property needs to be set to <span class=\"ff2 fs4\">https</span> before any Solr node starts up. The example\nbelow uses the <span class=\"ff2 fs4\">zkcli</span> tool that comes with the binary Solr distribution to do this:",
    "hierarchy": [
      "SSL with SolrCloud",
      "Configure ZooKeeper"
    ],
    "pageId": 1172
  },
  {
    "content": "server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:2181 -cmd clusterprop -name urlScheme\n-val https",
    "hierarchy": [
      "SSL with SolrCloud",
      "Configure ZooKeeper"
    ],
    "pageId": 1172
  },
  {
    "content": "server\\scripts\\cloud-scripts\\zkcli.bat -zkhost localhost:2181 -cmd clusterprop -name urlScheme\n-val https",
    "hierarchy": [
    ],
    "pageId": 1173
  },
  {
    "content": "If you have set up your ZooKeeper cluster to use a <span class=\"link\">chrootÊfor Solr</span>, make sure you use the correct <span class=\"ff2 fs1\">zkhost</span>\nstring with <span class=\"ff2 fs1\">zkcli</span>, e.g., <span class=\"ff2 fs1\">-zkhost localhost:2181/solr</span>.",
    "hierarchy": [
    ],
    "pageId": 1173
  },
  {
    "content": "Create two copies of the <span class=\"ff2 fs1\">server/solr/</span> directory which will serve as the Solr home directories for each of\nyour two SolrCloud nodes:",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Create Solr Home Directories for Two Nodes"
    ],
    "pageId": 1173
  },
  {
    "content": "mkdir cloud\ncp -r server/solr cloud/node1\ncp -r server/solr cloud/node2",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Create Solr Home Directories for Two Nodes"
    ],
    "pageId": 1173
  },
  {
    "content": "mkdir cloud\nxcopy /E server\\solr cloud\\node1\\\nxcopy /E server\\solr cloud\\node2\\",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Create Solr Home Directories for Two Nodes"
    ],
    "pageId": 1173
  },
  {
    "content": "Next, start the first Solr node on port 8984. Be sure to stop the standalone server first if you started it when\nworking through the previous section on this page.",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Start the First Solr Node"
    ],
    "pageId": 1173
  },
  {
    "content": "bin/solr -cloud -s cloud/node1 -z localhost:2181 -p 8984",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Start the First Solr Node"
    ],
    "pageId": 1173
  },
  {
    "content": "bin\\solr.cmd -cloud -s cloud\\node1 -z localhost:2181 -p 8984",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Start the First Solr Node"
    ],
    "pageId": 1173
  },
  {
    "content": "Notice the use of the <span class=\"ff2 fs1\">-s</span> option to set the location of the Solr home directory for node1.",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Start the First Solr Node"
    ],
    "pageId": 1173
  },
  {
    "content": "If you created your SSL key without all DNS names/IP addresses on which Solr nodes will run, you can tell\nSolr to skip hostname verification for inter-Solr-node communications by setting the\nsolr.ssl.checkPeerName<span class=\"code\"> system property to </span>false<span class=\"code\">:</span>",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Start the First Solr Node"
    ],
    "pageId": 1173
  },
  {
    "content": "bin/solr -cloud -s cloud/node1 -z localhost:2181 -p 8984 -Dsolr.ssl.checkPeerName=false",
    "hierarchy": [
      "Run SolrCloud with SSL",
      "Start the First Solr Node"
    ],
    "pageId": 1173
  },
  {
    "content": "bin\\solr.cmd -cloud -s cloud\\node1 -z localhost:2181 -p 8984 -Dsolr.ssl.checkPeerName=false",
    "hierarchy": [
    ],
    "pageId": 1174
  },
  {
    "content": "Finally, start the second Solr node on port 7574 - again, to skip hostname verification, add\n-Dsolr.ssl.checkPeerName=false<span class=\"ff4 fs0\">;</span>",
    "hierarchy": [
      "Start the Second Solr Node"
    ],
    "pageId": 1174
  },
  {
    "content": "bin/solr -cloud -s cloud/node2 -z localhost:2181 -p 7574",
    "hierarchy": [
      "Start the Second Solr Node"
    ],
    "pageId": 1174
  },
  {
    "content": "bin\\solr.cmd -cloud -s cloud\\node2 -z localhost:2181 -p 7574",
    "hierarchy": [
      "Start the Second Solr Node"
    ],
    "pageId": 1174
  },
  {
    "content": "curl on OS X Mavericks (10.9) has degraded SSL support. For more information and\nworkarounds to allow one-way SSL, see <span class=\"link\">http://curl.haxx.se/mail/archive-2013-10/0036.html</span>.\ncurl on OS X Yosemite (10.10) is improved - 2-way SSL is possible - see <span class=\"link\">http://curl.haxx.se/</span>\nmail/archive-2014-10/0053.html<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Example Client Actions"
    ],
    "pageId": 1174
  },
  {
    "content": "The curl commands in the following sections will not work with the system <span class=\"ff2 fs1\">curl</span> on OS X\nYosemite (10.10). Instead, the certificate supplied with the <span class=\"ff2 fs1\">-E</span> parameter must be in PKCS12\nformat, and the file supplied with the <span class=\"ff2 fs1\">--cacert</span> parametr must contain only the CA\ncertificate, and no key (see <span class=\"link\">above</span> for instructions on creating this file):",
    "hierarchy": [
      "Example Client Actions"
    ],
    "pageId": 1174
  },
  {
    "content": "curl -E solr-ssl.keystore.p12:secret --cacert solr-ssl.cacert.pem ...",
    "hierarchy": [
      "Example Client Actions"
    ],
    "pageId": 1174
  },
  {
    "content": "If your operating system does not include curl, you can download binaries here:\nhttp://curl.haxx.se/download.html",
    "hierarchy": [
      "Example Client Actions"
    ],
    "pageId": 1174
  },
  {
    "content": "Create a 2-shard, replicationFactor=1 collection named mycollection using the default configset (_default):",
    "hierarchy": [
      "Example Client Actions",
      "Create a SolrCloud Collection using bin/solr"
    ],
    "pageId": 1174
  },
  {
    "content": "bin/solr create -c mycollection -shards 2",
    "hierarchy": [
      "Example Client Actions",
      "Create a SolrCloud Collection using bin/solr"
    ],
    "pageId": 1174
  },
  {
    "content": "bin\\solr.cmd create -c mycollection -shards 2",
    "hierarchy": [
      "Example Client Actions",
      "Create a SolrCloud Collection using bin/solr"
    ],
    "pageId": 1174
  },
  {
    "content": "The <span class=\"ff2 fs1\">create</span> action will pass the <span class=\"ff2 fs1\">SOLR_SSL_*</span> properties set in your include file to the SolrJ code used to create\nthe collection.",
    "hierarchy": [
    ],
    "pageId": 1175
  },
  {
    "content": "To get the resulting cluster status (again, if you have not enabled client authentication, remove the <span class=\"ff2 fs1\">-E solr-</span>\nssl.pem:secret<span class=\"ff1 fs0\"> option):</span>",
    "hierarchy": [
      "Retrieve SolrCloud Cluster Status using curl"
    ],
    "pageId": 1175
  },
  {
    "content": "curl -E solr-ssl.pem:secret --cacert solr-ssl.pem\n\"https://localhost:8984/solr/admin/collections?action=CLUSTERSTATUS&indent=on\"",
    "hierarchy": [
      "Retrieve SolrCloud Cluster Status using curl"
    ],
    "pageId": 1175
  },
  {
    "content": "You should get a response that looks like this:",
    "hierarchy": [
      "Retrieve SolrCloud Cluster Status using curl"
    ],
    "pageId": 1175
  },
  {
    "content": "{\nÊ <span class=\"fc2\">\"responseHeader\"</span>:{\nÊ   <span class=\"fc2\">\"status\"</span>:<span class=\"fc3\">0</span>,\nÊ   <span class=\"fc2\">\"QTime\"</span>:<span class=\"fc3\">2041</span>},\nÊ <span class=\"fc2\">\"cluster\"</span>:{\nÊ   <span class=\"fc2\">\"collections\"</span>:{\nÊ     <span class=\"fc2\">\"mycollection\"</span>:{\nÊ       <span class=\"fc2\">\"shards\"</span>:{\nÊ         <span class=\"fc2\">\"shard1\"</span>:{\nÊ           <span class=\"fc2\">\"range\"</span>:<span class=\"fc4\">\"80000000-ffffffff\"</span>,\nÊ           <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ           <span class=\"fc2\">\"replicas\"</span>:{<span class=\"fc2\">\"core_node1\"</span>:{\nÊ               <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ               <span class=\"fc2\">\"base_url\"</span>:<span class=\"fc4\">\"https://127.0.0.1:8984/solr\"</span>,\nÊ               <span class=\"fc2\">\"core\"</span>:<span class=\"fc4\">\"mycollection_shard1_replica1\"</span>,\nÊ               <span class=\"fc2\">\"node_name\"</span>:<span class=\"fc4\">\"127.0.0.1:8984_solr\"</span>,\nÊ               <span class=\"fc2\">\"leader\"</span>:<span class=\"fc4\">\"true\"</span>}}},\nÊ         <span class=\"fc2\">\"shard2\"</span>:{\nÊ           <span class=\"fc2\">\"range\"</span>:<span class=\"fc4\">\"0-7fffffff\"</span>,\nÊ           <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ           <span class=\"fc2\">\"replicas\"</span>:{<span class=\"fc2\">\"core_node2\"</span>:{\nÊ               <span class=\"fc2\">\"state\"</span>:<span class=\"fc4\">\"active\"</span>,\nÊ               <span class=\"fc2\">\"base_url\"</span>:<span class=\"fc4\">\"https://127.0.0.1:7574/solr\"</span>,\nÊ               <span class=\"fc2\">\"core\"</span>:<span class=\"fc4\">\"mycollection_shard2_replica1\"</span>,\nÊ               <span class=\"fc2\">\"node_name\"</span>:<span class=\"fc4\">\"127.0.0.1:7574_solr\"</span>,\nÊ               <span class=\"fc2\">\"leader\"</span>:<span class=\"fc4\">\"true\"</span>}}}},\nÊ       <span class=\"fc2\">\"maxShardsPerNode\"</span>:<span class=\"fc4\">\"1\"</span>,\nÊ       <span class=\"fc2\">\"router\"</span>:{<span class=\"fc2\">\"name\"</span>:<span class=\"fc4\">\"compositeId\"</span>},\nÊ       <span class=\"fc2\">\"replicationFactor\"</span>:<span class=\"fc4\">\"1\"</span>}},\nÊ   <span class=\"fc2\">\"properties\"</span>:{<span class=\"fc2\">\"urlScheme\"</span>:<span class=\"fc4\">\"https\"</span>}}}",
    "hierarchy": [
      "Retrieve SolrCloud Cluster Status using curl"
    ],
    "pageId": 1175
  },
  {
    "content": "Use <span class=\"ff2 fs1\">post.jar</span> to index some example documents to the SolrCloud collection created above:",
    "hierarchy": [
      "Index Documents using post.jar"
    ],
    "pageId": 1175
  },
  {
    "content": "cd example/exampledocs",
    "hierarchy": [
    ],
    "pageId": 1176
  },
  {
    "content": "java -Djavax.net.ssl.keyStorePassword=secret -Djavax.net.ssl.keyStore=../../server/etc/solr\n-ssl.keystore.jks -Djavax.net.ssl.trustStore=../../server/etc/solr-ssl.keystore.jks\n-Djavax.net.ssl.trustStorePassword=secret -Durl=https://localhost:8984/solr/mycollection/update\n-jar post.jar *.xml",
    "hierarchy": [
    ],
    "pageId": 1176
  },
  {
    "content": "Use curl to query the SolrCloud collection created above, from a directory containing the PEM formatted\ncertificate and key created above (e.g., <span class=\"ff1 fs2\">example/etc/</span>) - if you have not enabled client authentication (system\nproperty <span class=\"ff1 fs2\">-Djetty.ssl.clientAuth=true)</span>, then you can remove the <span class=\"ff1 fs2\">-E solr-ssl.pem:secret</span> option:",
    "hierarchy": [
      "Query Using curl"
    ],
    "pageId": 1176
  },
  {
    "content": "curl -E solr-ssl.pem:secret --cacert solr-ssl.pem\n\"https://localhost:8984/solr/mycollection/select?q=*:*\"",
    "hierarchy": [
      "Query Using curl"
    ],
    "pageId": 1176
  },
  {
    "content": "From a java client using SolrJ, index a document. In the code below, the <span class=\"ff1 fs2\">javax.net.ssl.*</span> system properties\nare set programmatically, but you could instead specify them on the java command line, as in the <span class=\"ff1 fs2\">post.jar</span>\nexample above:",
    "hierarchy": [
      "Index a Document using CloudSolrClient"
    ],
    "pageId": 1176
  },
  {
    "content": "CloudSolrClient client = <span class=\"fc4\">new</span> CloudSolrClient.Builder().withZkHost(zkHost).build();\nclient.setDefaultCollection(<span class=\"fc3\">\"mycollection\"</span>);\nSolrInputDocument doc = <span class=\"fc4\">new</span> SolrInputDocument();\ndoc.addField(<span class=\"fc3\">\"id\"</span>, <span class=\"fc3\">\"1234\"</span>);\ndoc.addField(<span class=\"fc3\">\"name\"</span>, <span class=\"fc3\">\"A lovely summer holiday\"</span>);\nclient.add(doc);\nclient.commit();",
    "hierarchy": [
      "Index a Document using CloudSolrClient"
    ],
    "pageId": 1176
  },
  {
    "content": "This section discusses the available client APIs for Solr. It covers the following topics:",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Introduction to Client APIs<span class=\"fc1\">: A conceptual overview of Solr client APIs.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Choosing an Output Format<span class=\"fc1\">: Information about choosing a response format in Solr.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Using JavaScript<span class=\"fc1\">: Explains why a client API is not needed for JavaScript responses.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Using Python<span class=\"fc1\">: Information about Python and JSON responses.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Client API Lineup<span class=\"fc1\">: A list of all Solr Client APIs, with links.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Using SolrJ<span class=\"fc1\">: Detailed information about SolrJ, an API for working with Java applications.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "Using Solr From Ruby<span class=\"fc1\">: Detailed information about using Solr with Ruby applications.</span>",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "MBean Request Handler<span class=\"fc1\">: Describes the MBean request handler for programmatic access to Solr server</span>\nstatistics and information.",
    "hierarchy": [
      "Client APIs"
    ],
    "pageId": 1177
  },
  {
    "content": "At its heart, Solr is a Web application, but because it is built on open protocols, any type of client application\ncan use Solr.",
    "hierarchy": [
      "Introduction to Client APIs"
    ],
    "pageId": 1178
  },
  {
    "content": "HTTP is the fundamental protocol used between client applications and Solr. The client makes a request and\nSolr does some work and provides a response. Clients use requests to ask Solr to do things like perform\nqueries or index documents.",
    "hierarchy": [
      "Introduction to Client APIs"
    ],
    "pageId": 1178
  },
  {
    "content": "Client applications can reach Solr by creating HTTP requests and parsing the HTTP responses. Client APIs\nencapsulate much of the work of sending requests and parsing responses, which makes it much easier to\nwrite client applications.",
    "hierarchy": [
      "Introduction to Client APIs"
    ],
    "pageId": 1178
  },
  {
    "content": "Clients use Solr's five fundamental operations to work with Solr. The operations are query, index, delete,\ncommit, and optimize.",
    "hierarchy": [
      "Introduction to Client APIs"
    ],
    "pageId": 1178
  },
  {
    "content": "Queries are executed by creating a URL that contains all the query parameters. Solr examines the request\nURL, performs the query, and returns the results. The other operations are similar, although in certain cases\nthe HTTP request is a POST operation and contains information beyond whatever is included in the request\nURL. An index operation, for example, may contain a document in the body of the request.",
    "hierarchy": [
      "Introduction to Client APIs"
    ],
    "pageId": 1178
  },
  {
    "content": "Solr also features an EmbeddedSolrServer that offers a Java API without requiring an HTTP connection. For\ndetails, see <span class=\"link\">Using SolrJ</span>.",
    "hierarchy": [
      "Introduction to Client APIs"
    ],
    "pageId": 1178
  },
  {
    "content": "Many programming environments are able to send HTTP requests and retrieve responses. Parsing the\nresponses is a slightly more thorny problem. Fortunately, Solr makes it easy to choose an output format that\nwill be easy to handle on the client side.",
    "hierarchy": [
      "Choosing an Output Format"
    ],
    "pageId": 1179
  },
  {
    "content": "Specify a response format using the <span class=\"code\">wt</span> parameter in a query. The available response formats are\ndocumented in <span class=\"link\">Response Writers</span>.",
    "hierarchy": [
      "Choosing an Output Format"
    ],
    "pageId": 1179
  },
  {
    "content": "Most client APIs hide this detail for you, so for many types of client applications, you won't ever have to\nspecify a <span class=\"code\">wt</span> parameter. In JavaScript, however, the interface to Solr is a little closer to the metal, so you will\nneed to add this parameter yourself.",
    "hierarchy": [
      "Choosing an Output Format"
    ],
    "pageId": 1179
  },
  {
    "content": "The Solr Wiki contains a list of client APIs at <span class=\"link\">http://wiki.apache.org/solr/IntegratingSolr</span>.",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "Here is the list of client APIs, current at this writing (November 2011):",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolRubyRuby<span class=\"link\">https://github.com/rsolr/rsolr</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "DelSolrRuby<span class=\"link\">https://github.com/avvo/delsolr</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "acts_as_solrRails<span class=\"link\">http://acts-as-solr.rubyforge.org/</span>, <span class=\"link\">http://rubyforge.org/</span>\nprojects/background-solr/",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "FlareRails<span class=\"link\">http://wiki.apache.org/solr/Flare</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolPHPPHP<span class=\"link\">http://wiki.apache.org/solr/SolPHP</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolrJJava<span class=\"link\">http://wiki.apache.org/solr/SolJava</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "Python APIPython<span class=\"link\">http://wiki.apache.org/solr/SolPython</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "PySolrPython<span class=\"link\">http://code.google.com/p/pysolr/</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolPerlPerl<span class=\"link\">http://wiki.apache.org/solr/SolPerl</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "Solr.pmPerl<span class=\"link\">http://search.cpan.org/~garafola/Solr-0.03/lib/Solr.pm</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolrForrestForrest/Cocoon<span class=\"link\">http://wiki.apache.org/solr/SolrForrest</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolrSharpC#<span class=\"link\">http://www.codeplex.com/solrsharp</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolColdfusionColdFusion<span class=\"link\">http://solcoldfusion.riaforge.org/</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "SolrNet.NET<span class=\"link\">https://github.com/mausch/SolrNet</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "AJAX SolrAJAX<span class=\"link\">http://github.com/evolvingweb/ajax-solr/wiki</span>",
    "hierarchy": [
      "Client API Lineup"
    ],
    "pageId": 1180
  },
  {
    "content": "Using Solr from JavaScript clients is so straightforward that it deserves a special mention. In fact, it is so\nstraightforward that there is no client API. You don't need to install any packages or configure anything.",
    "hierarchy": [
      "Using JavaScript"
    ],
    "pageId": 1181
  },
  {
    "content": "HTTP requests can be sent to Solr using the standard <span class=\"code\">XMLHttpRequest</span> mechanism.",
    "hierarchy": [
      "Using JavaScript"
    ],
    "pageId": 1181
  },
  {
    "content": "By default, Solr sends <span class=\"link\">JavaScript Object Notation (JSON) responses</span>, which are easily interpreted in JavaScript.\nYou don't need to add anything to the request URL to have responses sent as JSON.",
    "hierarchy": [
      "Using JavaScript"
    ],
    "pageId": 1181
  },
  {
    "content": "For more information and an excellent example, read the SolJSON page on the Solr Wiki:",
    "hierarchy": [
      "Using JavaScript"
    ],
    "pageId": 1181
  },
  {
    "content": "http://wiki.apache.org/solr/SolJSON",
    "hierarchy": [
      "Using JavaScript"
    ],
    "pageId": 1181
  },
  {
    "content": "Solr includes an output format specifically for <span class=\"link\">Python</span>, but <span class=\"link\">JSON output</span> is a little more robust.",
    "hierarchy": [
      "Using Python"
    ],
    "pageId": 1182
  },
  {
    "content": "Making a query is a simple matter. First, tell Python you will need to make HTTP connections.",
    "hierarchy": [
      "Using Python",
      "Simple Python"
    ],
    "pageId": 1182
  },
  {
    "content": "Now open a connection to the server and get a response. The <span class=\"code\">wt</span> query parameter tells Solr to return results\nin a format that Python can understand.",
    "hierarchy": [
      "Using Python",
      "Simple Python"
    ],
    "pageId": 1182
  },
  {
    "content": "connection = urlopen(<span class=\"fc4\">'http://localhost:8983/solr/collection_name/select?q=cheese&wt=python'</span>)\nresponse = eval(connection.read())",
    "hierarchy": [
      "Using Python",
      "Simple Python"
    ],
    "pageId": 1182
  },
  {
    "content": "Now interpreting the response is just a matter of pulling out the information that you need.",
    "hierarchy": [
      "Using Python",
      "Simple Python"
    ],
    "pageId": 1182
  },
  {
    "content": "Ê <span class=\"fc3\">print</span> <span class=\"fc4\">\"  Name =\"</span>, document[<span class=\"fc4\">'name'</span>]",
    "hierarchy": [
      "Using Python",
      "Simple Python"
    ],
    "pageId": 1182
  },
  {
    "content": "JSON is a more robust response format, and Python has support for it in its standard library since version\n2.6.",
    "hierarchy": [
      "Using Python",
      "Python with JSON"
    ],
    "pageId": 1182
  },
  {
    "content": "Making a query is nearly the same as before. However, notice that the <span class=\"code\">wt</span> query parameter is now <span class=\"code\">json</span>\n(which is also the default if no <span class=\"code\">wt</span> parameter is specified), and the response is now digested by <span class=\"code\">json.load()</span>.",
    "hierarchy": [
      "Using Python",
      "Python with JSON"
    ],
    "pageId": 1182
  },
  {
    "content": "connection = urlopen(<span class=\"fc4\">'http://localhost:8983/solr/collection_name/select?q=cheese&wt=json'</span>)\nresponse = json.load(connection)",
    "hierarchy": [
      "Using Python",
      "Python with JSON"
    ],
    "pageId": 1182
  },
  {
    "content": "Ê <span class=\"fc3\">print</span> <span class=\"fc4\">\"  Name =\"</span>, document[<span class=\"fc4\">'name'</span>]",
    "hierarchy": [
      "Using Python",
      "Python with JSON"
    ],
    "pageId": 1182
  },
  {
    "content": "SolrJ<span class=\"fc2\"> is an API that makes it easy for applications written in Java (or any language based on the JVM) to talk</span>\nto Solr. SolrJ hides a lot of the details of connecting to Solr and allows your application to interact with Solr\nwith simple high-level methods. SolrJ supports most Solr APIs, and is highly configurable.",
    "hierarchy": [
      "Using SolrJ"
    ],
    "pageId": 1183
  },
  {
    "content": "The SolrJ API ships with Solr, so you do not have to download or install anything else. But you will need to\nconfigure your build to include SolrJ and its dependencies.",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications"
    ],
    "pageId": 1183
  },
  {
    "content": "Most mainstream build systems greatly simplify dependency management, making it easy to add SolrJ to\nyour project.",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Common Build Systems"
    ],
    "pageId": 1183
  },
  {
    "content": "For projects built with Ant (using <span class=\"link\">Ivy</span>), place the following in your <span class=\"code\">ivy.xml</span>:",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Common Build Systems"
    ],
    "pageId": 1183
  },
  {
    "content": "For projects built with Maven, place the following in your <span class=\"code\">pom.xml</span>:",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Common Build Systems"
    ],
    "pageId": 1183
  },
  {
    "content": "Ê <span class=\"fc3\"><groupId></span>org.apache.solr<span class=\"fc3\"></groupId></span>\nÊ <span class=\"fc3\"><artifactId></span>solr-solrj<span class=\"fc3\"></artifactId></span>\nÊ <span class=\"fc3\"><version></span>7.3.0<span class=\"fc3\"></version></span>",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Common Build Systems"
    ],
    "pageId": 1183
  },
  {
    "content": "For projects built with Gradle, place the following in your <span class=\"code\">build.gradle</span>:",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Common Build Systems"
    ],
    "pageId": 1183
  },
  {
    "content": "compile <span class=\"fc6\">group</span>: <span class=\"fc5\">'org.apache.solr'</span>, <span class=\"fc6\">name</span>: <span class=\"fc5\">'solr-solrj'</span>, <span class=\"fc6\">version</span>: <span class=\"fc5\">'7.3.0'</span>",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Common Build Systems"
    ],
    "pageId": 1183
  },
  {
    "content": "If you are not using one of the above build system, it's still easy to add SolrJ to your build.",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Adding SolrJ to the Classpath Manually"
    ],
    "pageId": 1183
  },
  {
    "content": "At build time, all that is required is the SolrJ jar itself: <span class=\"code\">solr-solrj-7.3.0.jar</span>. To compile code manually that\nuses SolrJ, use a <span class=\"code\">javac</span> command similar to:",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Adding SolrJ to the Classpath Manually"
    ],
    "pageId": 1183
  },
  {
    "content": "javac -cp .:$SOLR_HOME/dist/solr-solrj-7.3.0.jar ...",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Adding SolrJ to the Classpath Manually"
    ],
    "pageId": 1183
  },
  {
    "content": "At runtime, you need a few of SolrJ's dependencies, in addition to SolrJ itself. For convenience, these\ndependencies are made available in the <span class=\"code\">dist/solrj-lib</span> directory. Run your project with a classpath like:",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Adding SolrJ to the Classpath Manually"
    ],
    "pageId": 1183
  },
  {
    "content": "java -cp .:$SOLR_HOME/dist/solrj-lib/*:$SOLR_HOME/dist/solr-solrj-7.3.0.jar ...",
    "hierarchy": [
      "Using SolrJ",
      "Building and Running SolrJ Applications",
      "Adding SolrJ to the Classpath Manually"
    ],
    "pageId": 1183
  },
  {
    "content": "If you are worried about the SolrJ libraries expanding the size of your client application, you can use a code\nobfuscator like <span class=\"link\">ProGuard</span> to remove APIs that you are not using.",
    "hierarchy": [
    ],
    "pageId": 1184
  },
  {
    "content": "For all its flexibility, SolrJ is built around a few simple interfaces.",
    "hierarchy": [
      "SolrJ Overview"
    ],
    "pageId": 1184
  },
  {
    "content": "All requests to Solr are sent by a <span class=\"code\">SolrClient</span>. SolrClient's are the main workhorses at the core of SolrJ. They\nhandle the work of connecting to and communicating with Solr, and are where most of the user\nconfiguration happens.",
    "hierarchy": [
      "SolrJ Overview"
    ],
    "pageId": 1184
  },
  {
    "content": "Requests are sent in the form of <span class=\"code\">SolrRequests</span>, and are returned as <span class=\"code\">SolrResponses</span>.",
    "hierarchy": [
      "SolrJ Overview"
    ],
    "pageId": 1184
  },
  {
    "content": "SolrClient<span class=\"ff1 fs0\"> has a few concrete implementations, each geared towards a different usage-pattern or</span>\nresiliency model:",
    "hierarchy": [
      "SolrJ Overview",
      "Types of SolrClients"
    ],
    "pageId": 1184
  },
  {
    "content": "HttpSolrClient - geared towards query-centric workloads, though also a good general-purpose client.\nCommunicates directly with a single Solr node.",
    "hierarchy": [
      "SolrJ Overview",
      "Types of SolrClients"
    ],
    "pageId": 1184
  },
  {
    "content": "LBHttpSolrClient - balances request load across a list of Solr nodes. Adjusts the list of \"in-service\"\nnodes based on node health.",
    "hierarchy": [
      "SolrJ Overview",
      "Types of SolrClients"
    ],
    "pageId": 1184
  },
  {
    "content": "CloudSolrClient - geared towards communicating with SolrCloud deployments. Uses already-recorded\nZooKeeper state to discover and route requests to healthy Solr nodes.",
    "hierarchy": [
      "SolrJ Overview",
      "Types of SolrClients"
    ],
    "pageId": 1184
  },
  {
    "content": "ConcurrentUpdateSolrClient - geared towards indexing-centric workloads. Buffers documents\ninternally before sending larger batches to Solr.",
    "hierarchy": [
      "SolrJ Overview",
      "Types of SolrClients"
    ],
    "pageId": 1184
  },
  {
    "content": "Most SolrJ configuration happens at the <span class=\"code\">SolrClient</span> level. The most common/important of these are\ndiscussed below. For comprehensive information on how to tweak your <span class=\"code\">SolrClient</span>, see the Javadocs for the\ninvolved client, and its corresponding builder object.",
    "hierarchy": [
      "SolrJ Overview",
      "Common Configuration Options"
    ],
    "pageId": 1184
  },
  {
    "content": "Most <span class=\"code\">SolrClient</span> implementations (with the notable exception of <span class=\"code\">CloudSolrClient</span>) require users to specify\none or more Solr base URLs, which the client then uses to send HTTP requests to Solr. The path users include\non the base URL they provide has an effect on the behavior of the created client from that point on.",
    "hierarchy": [
      "SolrJ Overview",
      "Common Configuration Options",
      "Base URLs"
    ],
    "pageId": 1184
  },
  {
    "content": "1.A URL with a path pointing to a specific core or collection (e.g., <span class=\"code\">http://hostname:8983/solr/core1</span>).\nWhen a core or collection is specified in the base URL, subsequent requests made with that client are not\nrequired to re-specify the affected collection. However, the client is limited to sending requests to that\ncore/collection, and can not send requests to any others.",
    "hierarchy": [
      "SolrJ Overview",
      "Common Configuration Options",
      "Base URLs"
    ],
    "pageId": 1184
  },
  {
    "content": "2.A URL pointing to the root Solr path (e.g., <span class=\"code\">http://hostname:8983/solr</span>). When no core or collection is\nspecified in the base URL, requests can be made to any core/collection, but the affected core/collection\nmust be specified on all requests.",
    "hierarchy": [
      "SolrJ Overview",
      "Common Configuration Options",
      "Base URLs"
    ],
    "pageId": 1184
  },
  {
    "content": "Generally speaking, if your <span class=\"code\">SolrClient</span> will only be used on a single core/collection, including that entity in\nthe path is the most convenient. Where more flexibility is required, the collection/core should be excluded.",
    "hierarchy": [
      "SolrJ Overview",
      "Common Configuration Options",
      "Base URLs"
    ],
    "pageId": 1184
  },
  {
    "content": "All <span class=\"code\">SolrClient</span> implementations allow users to specify the connection and read timeouts for communicating\nwith Solr. These are provided at client creation time, as in the example below:",
    "hierarchy": [
      "Timeouts"
    ],
    "pageId": 1185
  },
  {
    "content": "Ê   .withConnectionTimeout(<span class=\"fc5\">10000</span>)\nÊ   .withSocketTimeout(<span class=\"fc5\">60000</span>)\nÊ   .build();",
    "hierarchy": [
      "Timeouts"
    ],
    "pageId": 1185
  },
  {
    "content": "When these values are not explicitly provided, SolrJ falls back to using the defaults for the OS/environment is\nrunning on.",
    "hierarchy": [
      "Timeouts"
    ],
    "pageId": 1185
  },
  {
    "content": "SolrClient<span class=\"ff2 fs0\"> has a number of </span>query()<span class=\"ff2 fs0\"> methods for fetching results from Solr. Each of these methods takes in</span>\na <span class=\"code\">SolrParams</span>,an object encapsulating arbitrary query-parameters. And each method outputs a\nQueryResponse<span class=\"ff2 fs0\">, a wrapper which can be used to access the result documents and other related metadata.</span>",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "The following snippet uses a SolrClient to query Solr's \"techproducts\" example collection, and iterate over\nthe results.",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "queryParamMap.put(<span class=\"fc4\">\"q\"</span>, <span class=\"fc4\">\"*:*\"</span>);\nqueryParamMap.put(<span class=\"fc4\">\"fl\"</span>, <span class=\"fc4\">\"id, name\"</span>);\nqueryParamMap.put(<span class=\"fc4\">\"sort\"</span>, <span class=\"fc4\">\"id asc\"</span>);\nMapSolrParams queryParams = <span class=\"fc2\">new</span> MapSolrParams(queryParamMap);",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "print(<span class=\"fc4\">\"Found \"</span> + documents.getNumFound() + <span class=\"fc4\">\" documents\"</span>);",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "Ê <span class=\"fc2\">final</span> <span class=\"fc3\">String</span> id = (<span class=\"fc3\">String</span>) document.getFirstValue(<span class=\"fc4\">\"id\"</span>);\nÊ <span class=\"fc2\">final</span> <span class=\"fc3\">String</span> name = (<span class=\"fc3\">String</span>) document.getFirstValue(<span class=\"fc4\">\"name\"</span>);",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "Ê print(<span class=\"fc4\">\"id: \"</span> + id + <span class=\"fc4\">\"; name: \"</span> + name);\n}",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "SolrParams<span class=\"ff2 fs0\"> has a </span>SolrQuery<span class=\"ff2 fs0\"> subclass, which provides some convenience methods that greatly simplifies</span>\nquery creation. The following snippet shows how the query from the previous example can be built using\nsome of the convenience methods in <span class=\"code\">SolrQuery</span>:",
    "hierarchy": [
      "Querying in SolrJ"
    ],
    "pageId": 1185
  },
  {
    "content": "query.addField(<span class=\"fc2\">\"id\"</span>);\nquery.addField(<span class=\"fc2\">\"name\"</span>);\nquery.setSort(<span class=\"fc2\">\"id\"</span>, ORDER.asc);\nquery.setRows(numResultsToReturn);",
    "hierarchy": [
    ],
    "pageId": 1186
  },
  {
    "content": "Indexing is also simple using SolrJ. Users build the documents they want to index as instances of\nSolrInputDocument<span class=\"code\">, and provide them as arguments to one of the </span>add()<span class=\"code\"> methods on </span>SolrClient<span class=\"code\">.</span>",
    "hierarchy": [
      "Indexing in SolrJ"
    ],
    "pageId": 1186
  },
  {
    "content": "The following example shows how to use SolrJ to add a document to Solr's \"techproducts\" example\ncollection:",
    "hierarchy": [
      "Indexing in SolrJ"
    ],
    "pageId": 1186
  },
  {
    "content": "doc.addField(<span class=\"fc2\">\"id\"</span>, <span class=\"fc4\">UUID</span>.randomUUID().toString());\ndoc.addField(<span class=\"fc2\">\"name\"</span>, <span class=\"fc2\">\"Amazon Kindle Paperwhite\"</span>);",
    "hierarchy": [
      "Indexing in SolrJ"
    ],
    "pageId": 1186
  },
  {
    "content": "client.commit(<span class=\"fc2\">\"techproducts\"</span>);",
    "hierarchy": [
      "Indexing in SolrJ"
    ],
    "pageId": 1186
  },
  {
    "content": "The indexing examples above are intended to show syntax. For brevity, they break several\nSolr indexing best-practices. Under normal circumstances, documents should be indexed in\nlarger batches, instead of one at a time. It is also suggested that Solr administrators\ncommit documents using Solr's autocommit settings, and not using explicit <span class=\"ff1 fs2\">commit()</span>\ninvocations.",
    "hierarchy": [
      "Indexing in SolrJ"
    ],
    "pageId": 1186
  },
  {
    "content": "While the <span class=\"ff1 fs2\">UpdateResponse</span> and <span class=\"ff1 fs2\">QueryResponse</span> interfaces that SolrJ provides are useful, it is often more\nconvenient to work with domain-specific objects that can more easily be understood by your application.\nThankfully, SolrJ supports this by implicitly converting documents to and from any class that has been\nspecially marked with <span class=\"ff1 fs2\">Field</span> annotations.",
    "hierarchy": [
      "Java Object Binding"
    ],
    "pageId": 1186
  },
  {
    "content": "Each instance variable in a Java object can be mapped to a corresponding Solr field, using the <span class=\"ff1 fs2\">Field</span>\nannotation. The Solr field shares the name of the annotated variable by default, however, this can be\noverridden by providing the annotation with an explicit field name.",
    "hierarchy": [
      "Java Object Binding"
    ],
    "pageId": 1186
  },
  {
    "content": "The example snippet below shows an annotated <span class=\"ff1 fs2\">TechProduct</span> class that can be used to represent results\nfrom Solr's \"techproducts\" example collection.",
    "hierarchy": [
      "Java Object Binding"
    ],
    "pageId": 1186
  },
  {
    "content": "Ê <span class=\"fc4\">@Field</span> <span class=\"fc0\">public</span> <span class=\"fc2\">String</span> id;\nÊ <span class=\"fc4\">@Field</span> <span class=\"fc0\">public</span> <span class=\"fc2\">String</span> name;",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "Ê <span class=\"fc0\">public</span> TechProduct(<span class=\"fc2\">String</span> id, <span class=\"fc2\">String</span> name) {\nÊ   this.id = id;  this.name = name;\nÊ }",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "Ê <span class=\"fc0\">public</span> TechProduct() {}\n}",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "Application code with access to the annotated <span class=\"ff1 fs1\">TechProduct</span> class above can index <span class=\"ff1 fs1\">TechProduct</span> objects\ndirectly without any conversion, as in the example snippet below:",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "client.commit(<span class=\"fc5\">\"techproducts\"</span>);",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "Similarly, search results can be converted directly into bean objects using the <span class=\"ff1 fs1\">getBeans()</span> method on\nQueryResponse<span class=\"ff2 fs0\">:</span>",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "query.addField(<span class=\"fc5\">\"id\"</span>);\nquery.addField(<span class=\"fc5\">\"name\"</span>);\nquery.setSort(<span class=\"fc5\">\"id\"</span>, ORDER.asc);",
    "hierarchy": [
    ],
    "pageId": 1187
  },
  {
    "content": "SolrJ allows more than just querying and indexing. It supports all of Solr's APIs. Accessing Solr’s other APIs is\nas easy as finding the appropriate request object, providing any necessary parameters, and passing it to the\nrequest()<span class=\"ff2 fs0\"> method of your </span>SolrClient<span class=\"ff2 fs0\">. </span>request()<span class=\"ff2 fs0\"> will return a </span>NamedList<span class=\"ff2 fs0\">: a generic object which mirrors</span>\nthe hierarchical structure of the JSON or XML returned by their request.",
    "hierarchy": [
      "Other APIs"
    ],
    "pageId": 1187
  },
  {
    "content": "The example below shows how SolrJ users can call the CLUSTERSTATUS API of SolrCloud deployments, and\nmanipulate the returned <span class=\"ff1 fs1\">NamedList</span>:",
    "hierarchy": [
      "Other APIs"
    ],
    "pageId": 1187
  },
  {
    "content": "print(<span class=\"fc3\">\"Found \"</span> + liveNodes.size() + <span class=\"fc3\">\" live nodes\"</span>);",
    "hierarchy": [
    ],
    "pageId": 1188
  },
  {
    "content": "Solr has an optional Ruby response format that extends the <span class=\"link\">JSON output</span> to allow the response to be safely\neval'd by Ruby’s interpreter",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "This Ruby response format differs from JSON in the following ways:",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "Ruby's single quoted strings are used to prevent possible string exploits",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "◦\\<span class=\"ff2 fs1\"> and </span>'<span class=\"ff2 fs1\"> are the only two characters escaped…</span>\n◦unicode escapes not used… data is written as raw UTF-8\nnil used for null",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "=> used as the key/value separator in maps",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "Here's an example Ruby response from Solr, for a request like\nhttp://localhost:8983/solr/techproducts/select?q=iPod&wt=ruby&indent=on<span class=\"ff2 fs1\"> (with Solr launching</span>\nusing <span class=\"ff4 fs2\">bin/solr start -e techproducts</span>):",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "{\nÊ <span class=\"fc3\">'responseHeader'</span>=>{\nÊ   <span class=\"fc3\">'status'</span>=><span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">'QTime'</span>=><span class=\"fc4\">0</span>,\nÊ   <span class=\"fc3\">'params'</span>=>{\nÊ     <span class=\"fc3\">'q'</span>=><span class=\"fc3\">'iPod'</span>,\nÊ     <span class=\"fc3\">'indent'</span>=><span class=\"fc3\">'on'</span>,\nÊ     <span class=\"fc3\">'wt'</span>=><span class=\"fc3\">'ruby'</span>}},\nÊ <span class=\"fc3\">'response'</span>=>{<span class=\"fc3\">'numFound'</span>=><span class=\"fc4\">3</span>,<span class=\"fc3\">'start'</span>=><span class=\"fc4\">0</span>,<span class=\"fc3\">'docs'</span>=>[\nÊ     {\nÊ       <span class=\"fc3\">'id'</span>=><span class=\"fc3\">'IW-02'</span>,\nÊ       <span class=\"fc3\">'name'</span>=><span class=\"fc3\">'iPod & iPod Mini USB 2.0 Cable'</span>,\nÊ       <span class=\"fc3\">'manu'</span>=><span class=\"fc3\">'Belkin'</span>,\nÊ       <span class=\"fc3\">'manu_id_s'</span>=><span class=\"fc3\">'belkin'</span>,\nÊ       <span class=\"fc3\">'cat'</span>=>[<span class=\"fc3\">'electronics'</span>,\nÊ         <span class=\"fc3\">'connector'</span>],\nÊ       <span class=\"fc3\">'features'</span>=>[<span class=\"fc3\">'car power adapter for iPod, white'</span>],\nÊ       <span class=\"fc3\">'weight'</span>=><span class=\"fc4\">2.0</span>,\nÊ       <span class=\"fc3\">'price'</span>=><span class=\"fc4\">11.5</span>,\nÊ       <span class=\"fc3\">'price_c'</span>=><span class=\"fc3\">'11.50,USD'</span>,\nÊ       <span class=\"fc3\">'popularity'</span>=><span class=\"fc4\">1</span>,\nÊ       <span class=\"fc3\">'inStock'</span>=>false,\nÊ       <span class=\"fc3\">'store'</span>=><span class=\"fc3\">'37.7752,-122.4232'</span>,\nÊ       <span class=\"fc3\">'manufacturedate_dt'</span>=><span class=\"fc3\">'2006-02-14T23:55:59Z'</span>,\nÊ       <span class=\"fc3\">'_version_'</span>=><span class=\"fc4\">1491038048794705920</span>},\nÊ     {\nÊ       <span class=\"fc3\">'id'</span>=><span class=\"fc3\">'F8V7067-APL-KIT'</span>,\nÊ       <span class=\"fc3\">'name'</span>=><span class=\"fc3\">'Belkin Mobile Power Cord for iPod w/ Dock'</span>,\nÊ       <span class=\"fc3\">'manu'</span>=><span class=\"fc3\">'Belkin'</span>,\nÊ       <span class=\"fc3\">'manu_id_s'</span>=><span class=\"fc3\">'belkin'</span>,\nÊ       <span class=\"fc3\">'cat'</span>=>[<span class=\"fc3\">'electronics'</span>,\nÊ         <span class=\"fc3\">'connector'</span>],",
    "hierarchy": [
      "Using Solr From Ruby"
    ],
    "pageId": 1189
  },
  {
    "content": "Ê       <span class=\"fc1\">'features'</span>=>[<span class=\"fc1\">'car power adapter, white'</span>],\nÊ       <span class=\"fc1\">'weight'</span>=><span class=\"fc2\">4.0</span>,\nÊ       <span class=\"fc1\">'price'</span>=><span class=\"fc2\">19.95</span>,\nÊ       <span class=\"fc1\">'price_c'</span>=><span class=\"fc1\">'19.95,USD'</span>,\nÊ       <span class=\"fc1\">'popularity'</span>=><span class=\"fc2\">1</span>,\nÊ       <span class=\"fc1\">'inStock'</span>=>false,\nÊ       <span class=\"fc1\">'store'</span>=><span class=\"fc1\">'45.18014,-93.87741'</span>,\nÊ       <span class=\"fc1\">'manufacturedate_dt'</span>=><span class=\"fc1\">'2005-08-01T16:30:25Z'</span>,\nÊ       <span class=\"fc1\">'_version_'</span>=><span class=\"fc2\">1491038048792608768</span>},\nÊ     {\nÊ       <span class=\"fc1\">'id'</span>=><span class=\"fc1\">'MA147LL/A'</span>,\nÊ       <span class=\"fc1\">'name'</span>=><span class=\"fc1\">'Apple 60 GB iPod with Video Playback Black'</span>,\nÊ       <span class=\"fc1\">'manu'</span>=><span class=\"fc1\">'Apple Computer Inc.'</span>,\nÊ       <span class=\"fc1\">'manu_id_s'</span>=><span class=\"fc1\">'apple'</span>,\nÊ       <span class=\"fc1\">'cat'</span>=>[<span class=\"fc1\">'electronics'</span>,\nÊ         <span class=\"fc1\">'music'</span>],\nÊ       <span class=\"fc1\">'features'</span>=>[<span class=\"fc1\">'iTunes, Podcasts, Audiobooks'</span>,\nÊ         <span class=\"fc1\">'Stores up to 15,000 songs, 25,000 photos, or 150 hours of video'</span>,\nÊ         <span class=\"fc1\">'2.5-inch, 320x240 color TFT LCD display with LED backlight'</span>,\nÊ         <span class=\"fc1\">'Up to 20 hours of battery life'</span>,\nÊ         <span class=\"fc1\">'Plays AAC, MP3, WAV, AIFF, Audible, Apple Lossless, H.264 video'</span>,\nÊ         <span class=\"fc1\">'Notes, Calendar, Phone book, Hold button, Date display, Photo wallet, Built-in games,</span>",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "Ê       <span class=\"fc1\">'includes'</span>=><span class=\"fc1\">'earbud headphones, USB cable'</span>,\nÊ       <span class=\"fc1\">'weight'</span>=><span class=\"fc2\">5.5</span>,\nÊ       <span class=\"fc1\">'price'</span>=><span class=\"fc2\">399.0</span>,\nÊ       <span class=\"fc1\">'price_c'</span>=><span class=\"fc1\">'399.00,USD'</span>,\nÊ       <span class=\"fc1\">'popularity'</span>=><span class=\"fc2\">10</span>,\nÊ       <span class=\"fc1\">'inStock'</span>=>true,\nÊ       <span class=\"fc1\">'store'</span>=><span class=\"fc1\">'37.7752,-100.0232'</span>,\nÊ       <span class=\"fc1\">'manufacturedate_dt'</span>=><span class=\"fc1\">'2005-10-12T08:00:00Z'</span>,\nÊ       <span class=\"fc1\">'_version_'</span>=><span class=\"fc2\">1491038048799948800</span>}]\nÊ }}",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "Here is a simple example of how one may query Solr using the Ruby response format:",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "require <span class=\"fc1\">'net/http'</span>",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "h = <span class=\"fc3\">Net</span>::<span class=\"fc3\">HTTP</span>.new(<span class=\"fc1\">'localhost'</span>, <span class=\"fc2\">8983</span>)\nhttp_response = h.get(<span class=\"fc1\">'/solr/techproducts/select?q=iPod&wt=ruby'</span>)\nrsp = eval(http_response.body)",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "puts <span class=\"fc1\">'number of matches = '</span> + rsp[<span class=\"fc1\">'response'</span>][<span class=\"fc1\">'numFound'</span>].to_s",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "rsp[<span class=\"fc1\">'response'</span>][<span class=\"fc1\">'docs'</span>].each { |doc| puts <span class=\"fc1\">'name field = '</span> + doc[<span class=\"fc1\">'name'</span>] }",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "For simple interactions with Solr, this may be all you need! If you are building complex interactions with Solr,\nthen consider the libraries mentioned at <span class=\"link\">https://wiki.apache.org/solr/Ruby%20Response%20Format</span>",
    "hierarchy": [
    ],
    "pageId": 1190
  },
  {
    "content": "There is a very active user community around Solr and Lucene. The solr-user mailing list, and #solr IRC\nchannel are both great resources for asking questions.",
    "hierarchy": [
      "Further Assistance"
    ],
    "pageId": 1191
  },
  {
    "content": "To view the mailing list archives, subscribe to the list, or join the IRC channel, please see\nhttps://lucene.apache.org/solr/community.html<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Further Assistance"
    ],
    "pageId": 1191
  },
  {
    "content": "These are common terms used with Solr.",
    "hierarchy": [
      "Solr Glossary"
    ],
    "pageId": 1192
  },
  {
    "content": "Where possible, terms are linked to relevant parts of the Solr Reference Guide for more information.",
    "hierarchy": [
      "Solr Terms"
    ],
    "pageId": 1193
  },
  {
    "content": "A<span class=\"fc1\"> </span>B<span class=\"fc1\"> </span>C<span class=\"fc1\"> </span>D<span class=\"fc1\"> </span>E<span class=\"fc1\"> </span>F<span class=\"fc1\"> G H </span>I<span class=\"fc1\"> J K </span>L<span class=\"fc1\"> </span>M<span class=\"fc1\"> </span>N<span class=\"fc1\"> </span>O<span class=\"fc1\"> P </span>Q<span class=\"fc1\"> </span>R<span class=\"fc1\"> </span>S<span class=\"fc1\"> </span>T<span class=\"fc1\"> U V </span>W<span class=\"fc1\"> X Y </span>Z",
    "hierarchy": [
      "Solr Terms"
    ],
    "pageId": 1193
  },
  {
    "content": "Atomic updates\nAn approach to updating only one or more fields of a document, instead of reindexing the entire\ndocument.",
    "hierarchy": [
      "Solr Terms",
      "A"
    ],
    "pageId": 1193
  },
  {
    "content": "Boolean operators\nThese control the inclusion or exclusion of keywords in a query by using operators such as AND, OR, and\nNOT.",
    "hierarchy": [
      "Solr Terms",
      "B"
    ],
    "pageId": 1193
  },
  {
    "content": "Cluster\nIn Solr, a cluster is a set of Solr nodes operating in coordination with each other via <span class=\"link\">ZooKeeper</span>, and\nmanaged as a unit. A cluster may contain many collections. See also <span class=\"link\">SolrCloud</span>.",
    "hierarchy": [
      "Solr Terms",
      "C"
    ],
    "pageId": 1193
  },
  {
    "content": "Collection\nIn Solr, one or more <span class=\"link\">Documents</span> grouped together in a single logical index using a single configuration\nand Schema.",
    "hierarchy": [
      "Solr Terms",
      "C"
    ],
    "pageId": 1193
  },
  {
    "content": "In <span class=\"link\">SolrCloud</span> a collection may be divided up into multiple logical shards, which may in turn be distributed\nacross many nodes, or in a Single node Solr installation, a collection may be a single <span class=\"link\">Core</span>.",
    "hierarchy": [
      "Solr Terms",
      "C"
    ],
    "pageId": 1193
  },
  {
    "content": "Commit\nTo make document changes permanent in the index. In the case of added documents, they would be\nsearchable after a <span class=\"code\">commit</span>.",
    "hierarchy": [
      "Solr Terms",
      "C"
    ],
    "pageId": 1193
  },
  {
    "content": "Core\nAn individual Solr instance (represents a logical index). Multiple cores can run on a single node. See also\nSolrCloud<span class=\"fc1\">.</span>",
    "hierarchy": [
      "Solr Terms",
      "C"
    ],
    "pageId": 1193
  },
  {
    "content": "Core reload\nTo re-initialize a Solr core after changes to <span class=\"ff4 fs3\">schema.xml</span>, <span class=\"ff4 fs3\">solrconfig.xml</span> or other configuration files.",
    "hierarchy": [
      "Solr Terms",
      "C"
    ],
    "pageId": 1193
  },
  {
    "content": "Distributed search\nDistributed search is one where queries are processed across more than one <span class=\"link\">Shard</span>.",
    "hierarchy": [
      "Solr Terms",
      "D"
    ],
    "pageId": 1193
  },
  {
    "content": "Document\nA group of <span class=\"link\">fields</span> and their values. Documents are the basic unit of data in a <span class=\"link\">collection</span>. Documents are\nassigned to <span class=\"link\">shards</span> using standard hashing, or by specifically assigning a shard within the document ID.\nDocuments are versioned after each write operation.",
    "hierarchy": [
    ],
    "pageId": 1194
  },
  {
    "content": "Ensemble\nA <span class=\"link\">ZooKeeper</span> term to indicate multiple ZooKeeper instances running simultaneously and in coordination\nwith each other for fault tolerance.",
    "hierarchy": [
      "E"
    ],
    "pageId": 1194
  },
  {
    "content": "Facet\nThe arrangement of search results into categories based on indexed terms.",
    "hierarchy": [
      "F"
    ],
    "pageId": 1194
  },
  {
    "content": "Field\nThe content to be indexed/searched along with metadata defining how the content should be processed\nby Solr.",
    "hierarchy": [
      "F"
    ],
    "pageId": 1194
  },
  {
    "content": "Inverse document frequency (IDF)\nA measure of the general importance of a term. It is calculated as the number of total Documents divided\nby the number of Documents that a particular word occurs in the collection. See <span class=\"link\">http://en.wikipedia.org/</span>\nwiki/Tf-idf<span class=\"fc0\"> and </span>theÊLucene TFIDFSimilarity javadocs<span class=\"fc0\"> for more info on TF-IDF based scoring and Lucene</span>\nscoring in particular. See also <span class=\"link\">Term frequency</span>.",
    "hierarchy": [
      "I"
    ],
    "pageId": 1194
  },
  {
    "content": "Inverted index\nA way of creating a searchable index that lists every word and the documents that contain those words,\nsimilar to an index in the back of a book which lists words and the pages on which they can be found.\nWhen performing keyword searches, this method is considered more efficient than the alternative, which\nwould be to create a list of documents paired with every word used in each document. Since users search\nusing terms they expect to be in documents, finding the term before the document saves processing\nresources and time.",
    "hierarchy": [
      "I"
    ],
    "pageId": 1194
  },
  {
    "content": "Leader\nA single <span class=\"link\">Replica</span> for each <span class=\"link\">Shard</span> that takes charge of coordinating index updates (document additions or\ndeletions) to other replicas in the same shard. This is a transient responsibility assigned to a node via an\nelection, if the current Shard Leader goes down, a new node will automatically be elected to take its place.\nSee also <span class=\"link\">SolrCloud</span>.",
    "hierarchy": [
      "L"
    ],
    "pageId": 1194
  },
  {
    "content": "Metadata\nLiterally, <span class=\"code\">data about data</span>. Metadata is information about a document, such as its title, author, or location.",
    "hierarchy": [
    ],
    "pageId": 1195
  },
  {
    "content": "Natural language query\nA search that is entered as a user would normally speak or write, as in, \"What is aspirin?\"",
    "hierarchy": [
      "N"
    ],
    "pageId": 1195
  },
  {
    "content": "Node\nA JVM instance running Solr. Also known as a Solr server.",
    "hierarchy": [
      "N"
    ],
    "pageId": 1195
  },
  {
    "content": "Optimistic concurrency\nAlso known as \"optimistic locking\", this is an approach that allows for updates to documents currently in\nthe index while retaining locking or version control.",
    "hierarchy": [
      "O"
    ],
    "pageId": 1195
  },
  {
    "content": "Overseer\nA single node in <span class=\"link\">SolrCloud</span> that is responsible for processing and coordinating actions involving the entire\ncluster. It keeps track of the state of existing nodes, collections, shards, and replicas, and assigns new\nreplicas to nodes. This is a transient responsibility assigned to a node via an election, if the current\nOverseer goes down, a new node will be automatically elected to take its place. See also <span class=\"link\">SolrCloud</span>.",
    "hierarchy": [
      "O"
    ],
    "pageId": 1195
  },
  {
    "content": "Query parser\nA query parser processes the terms entered by a user.",
    "hierarchy": [
      "Q"
    ],
    "pageId": 1195
  },
  {
    "content": "Recall\nThe ability of a search engine to retrieve <span class=\"code\">all</span> of the possible matches to a user's query.",
    "hierarchy": [
      "R"
    ],
    "pageId": 1195
  },
  {
    "content": "Relevance\nThe appropriateness of a document to the search conducted by the user.",
    "hierarchy": [
      "R"
    ],
    "pageId": 1195
  },
  {
    "content": "Replica\nA <span class=\"link\">Core</span> that acts as a physical copy of a <span class=\"link\">Shard</span> in a <span class=\"link\">SolrCloud</span> <span class=\"link\">Collection</span>.",
    "hierarchy": [
      "R"
    ],
    "pageId": 1195
  },
  {
    "content": "Replication\nA method of copying a master index from one server to one or more \"slave\" or \"child\" servers.",
    "hierarchy": [
      "R"
    ],
    "pageId": 1195
  },
  {
    "content": "RequestHandler\nLogic and configuration parameters that tell Solr how to handle incoming \"requests\", whether the\nrequests are to return search results, to index documents, or to handle other custom situations.",
    "hierarchy": [
      "R"
    ],
    "pageId": 1195
  },
  {
    "content": "SearchComponent\nLogic and configuration parameters used by request handlers to process query requests. Examples of\nsearch components include faceting, highlighting, and \"more like this\" functionality.",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "Shard\nIn SolrCloud, a logical partition of a single <span class=\"link\">Collection</span>. Every shard consists of at least one physical <span class=\"link\">Replica</span>,\nbut there may be multiple Replicas distributed across multiple <span class=\"link\">Nodes</span> for fault tolerance. See also\nSolrCloud<span class=\"fc2\">.</span>",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "SolrCloud\nUmbrella term for a suite of functionality in Solr which allows managing a <span class=\"link\">Cluster</span> of Solr <span class=\"link\">Nodes</span> for\nscalability, fault tolerance, and high availability.",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "Solr Schema (managed-schema or schema.xml)\nThe Solr index Schema defines the fields to be indexed and the type for the field (text, integers, etc.) By\ndefault schema data can be \"managed\" at run time using the <span class=\"link\">Schema API</span> and is typically kept in a file\nnamed <span class=\"code\">managed-schema</span> which Solr modifies as needed, but a collection may be configured to use a static\nSchema, which is only loaded on startup from a human edited configuration file - typically named\nschema.xml<span class=\"ff2 fs1\">. See <span class=\"link\">Schema Factory Definition in SolrConfig</span> for details.</span>",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "SolrConfig (solrconfig.xml)\nThe Apache Solr configuration file. Defines indexing options, RequestHandlers, highlighting,\nspellchecking and various other configurations. The file, <span class=\"code\">solrconfig.xml</span>, is located in the Solr home <span class=\"code\">conf</span>\ndirectory.",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "Spell Check\nThe ability to suggest alternative spellings of search terms to a user, as a check against spelling errors\ncausing few or zero results.",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "Stopwords\nGenerally, words that have little meaning to a user's search but which may have been entered as part of a\nnatural language<span class=\"fc2\"> query. Stopwords are generally very small pronouns, conjunctions and prepositions</span>\n(such as, \"the\", \"with\", or \"and\")",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "Suggester\nFunctionality in Solr that provides the ability to suggest possible query terms to users as they type.",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "Synonyms\nSynonyms generally are terms which are near to each other in meaning and may substitute for one\nanother. In a search engine implementation, synonyms may be abbreviations as well as words, or terms\nthat are not consistently hyphenated. Examples of synonyms in this context would be \"Inc.\" and\n\"Incorporated\" or \"iPod\" and \"i-pod\".",
    "hierarchy": [
      "S"
    ],
    "pageId": 1196
  },
  {
    "content": "The number of times a word occurs in a given document. See <span class=\"link\">http://en.wikipedia.org/wiki/Tf-idf</span> and <span class=\"link\">the</span>\nLucene TFIDFSimilarity javadocs<span class=\"fc0\"> for more info on TF-IDF based scoring and Lucene scoring in particular.</span>\nSee also <span class=\"link\">Inverse document frequency (IDF)</span>.",
    "hierarchy": [
    ],
    "pageId": 1197
  },
  {
    "content": "Transaction log\nAn append-only log of write operations maintained by each <span class=\"link\">Replica</span>. This log is required with SolrCloud\nimplementations and is created and managed automatically by Solr.",
    "hierarchy": [
    ],
    "pageId": 1197
  },
  {
    "content": "Wildcard\nA wildcard allows a substitution of one or more letters of a word to account for possible variations in\nspelling or tenses.",
    "hierarchy": [
      "W"
    ],
    "pageId": 1197
  },
  {
    "content": "ZooKeeper\nAlso known as <span class=\"link\">Apache ZooKeeper</span>. The system used by SolrCloud to keep track of configuration files and\nnode names for a cluster. A ZooKeeper cluster is used as the central configuration store for the cluster, a\ncoordinator for operations requiring distributed synchronization, and the system of record for cluster\ntopology. See also <span class=\"link\">SolrCloud</span>.",
    "hierarchy": [
      "Z"
    ],
    "pageId": 1197
  },
  {
    "content": "Any mistakes found in this documentation after its release will be listed on the on-line version of this page:",
    "hierarchy": [
      "Errata For This Documentation"
    ],
    "pageId": 1199
  },
  {
    "content": "https://lucene.apache.org/solr/guide/7.3/errata.html",
    "hierarchy": [
      "Errata For This Documentation"
    ],
    "pageId": 1199
  },
  {
    "content": "Any known mistakes in past releases of this documentation will be noted below.",
    "hierarchy": [
      "Errata For This Documentation",
      "Errata For Past Versions of This Documentation"
    ],
    "pageId": 1199
  }
]